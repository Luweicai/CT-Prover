// generated by SMACK version 2.8.0 for boogie
// via /usr/local/bin/smack -t --warn silent --verifier=boogie --entry-points Hacl_Curve25519_51_scalarmult_wrapper --unroll 1 --loop-limit 1 -bpl Hacl_Curve25519_51_scalarmult.bpl Hacl_Curve25519_51_scalarmult-t.ll

// Basic types
type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i33 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type float;

// Basic constants
const $0: i32;
axiom ($0 == 0);
const $1: i32;
axiom ($1 == 1);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
// Memory model constants
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;

// Memory maps (695 regions)
var $M.0: [ref] i8;
var $M.1: [ref] i8;
var $M.2: [ref] i8;
var $M.3: [ref] i8;
var $M.4: [ref] i8;
var $M.5: [ref] i8;
var $M.6: [ref] i8;
var $M.7: [ref] i8;
var $M.8: [ref] i8;
var $M.9: [ref] i8;
var $M.10: [ref] i8;
var $M.11: [ref] i8;
var $M.12: [ref] i8;
var $M.13: [ref] i8;
var $M.14: [ref] i8;
var $M.15: [ref] i8;
var $M.16: [ref] i8;
var $M.17: [ref] i8;
var $M.18: [ref] i8;
var $M.19: [ref] i8;
var $M.20: [ref] i8;
var $M.21: [ref] i8;
var $M.22: [ref] i8;
var $M.23: [ref] i8;
var $M.24: [ref] i8;
var $M.25: [ref] i8;
var $M.26: [ref] i8;
var $M.27: [ref] i8;
var $M.28: [ref] i8;
var $M.29: [ref] i8;
var $M.30: [ref] i8;
var $M.31: [ref] i8;
var $M.32: [ref] i8;
var $M.33: [ref] i8;
var $M.34: [ref] i8;
var $M.35: [ref] i8;
var $M.36: [ref] i8;
var $M.37: [ref] i8;
var $M.38: [ref] i8;
var $M.39: [ref] i8;
var $M.40: [ref] i8;
var $M.41: [ref] i8;
var $M.42: [ref] i8;
var $M.43: [ref] i8;
var $M.44: [ref] i8;
var $M.45: [ref] i8;
var $M.46: [ref] i8;
var $M.47: [ref] i8;
var $M.48: [ref] i8;
var $M.49: [ref] i8;
var $M.50: [ref] i8;
var $M.51: [ref] i8;
var $M.52: [ref] i8;
var $M.53: [ref] i8;
var $M.54: [ref] i8;
var $M.55: [ref] i8;
var $M.56: [ref] i8;
var $M.57: [ref] i8;
var $M.58: [ref] i8;
var $M.59: [ref] i8;
var $M.60: [ref] i8;
var $M.61: [ref] i8;
var $M.62: [ref] i8;
var $M.63: [ref] i8;
var $M.64: [ref] i8;
var $M.65: [ref] i8;
var $M.66: [ref] i8;
var $M.67: [ref] i8;
var $M.68: [ref] i8;
var $M.69: [ref] i8;
var $M.70: [ref] i8;
var $M.71: [ref] i8;
var $M.72: [ref] i8;
var $M.73: [ref] i8;
var $M.74: [ref] i8;
var $M.75: [ref] i8;
var $M.76: [ref] i8;
var $M.77: [ref] i8;
var $M.78: [ref] i8;
var $M.79: [ref] i8;
var $M.80: [ref] i8;
var $M.81: [ref] i8;
var $M.82: [ref] i8;
var $M.83: [ref] i8;
var $M.84: [ref] i8;
var $M.85: [ref] i8;
var $M.86: [ref] i8;
var $M.87: [ref] i8;
var $M.88: [ref] i8;
var $M.89: [ref] i8;
var $M.90: [ref] i8;
var $M.91: [ref] i8;
var $M.92: [ref] i8;
var $M.93: [ref] i8;
var $M.94: [ref] i8;
var $M.95: [ref] i8;
var $M.96: [ref] i8;
var $M.97: [ref] i8;
var $M.98: [ref] i8;
var $M.99: [ref] i8;
var $M.100: [ref] i8;
var $M.101: [ref] i8;
var $M.102: [ref] i8;
var $M.103: [ref] i8;
var $M.104: [ref] i8;
var $M.105: [ref] i8;
var $M.106: [ref] i8;
var $M.107: [ref] i8;
var $M.108: [ref] i8;
var $M.109: [ref] i8;
var $M.110: [ref] i8;
var $M.111: [ref] i8;
var $M.112: [ref] i8;
var $M.113: [ref] i8;
var $M.114: [ref] i8;
var $M.115: [ref] i8;
var $M.116: [ref] i8;
var $M.117: [ref] i8;
var $M.118: [ref] i8;
var $M.119: [ref] i8;
var $M.120: [ref] i8;
var $M.121: [ref] i8;
var $M.122: [ref] i8;
var $M.123: [ref] i8;
var $M.124: [ref] i8;
var $M.125: [ref] i8;
var $M.126: [ref] i8;
var $M.127: [ref] i8;
var $M.128: [ref] i8;
var $M.129: [ref] i8;
var $M.130: [ref] i8;
var $M.131: [ref] i8;
var $M.132: [ref] i8;
var $M.133: [ref] i8;
var $M.134: [ref] i8;
var $M.135: [ref] i8;
var $M.136: [ref] i8;
var $M.137: [ref] i8;
var $M.138: [ref] i8;
var $M.139: [ref] i8;
var $M.140: [ref] i8;
var $M.141: [ref] i8;
var $M.142: [ref] i8;
var $M.143: [ref] i8;
var $M.144: [ref] i8;
var $M.145: [ref] i8;
var $M.146: [ref] i8;
var $M.147: [ref] i8;
var $M.148: [ref] i8;
var $M.149: [ref] i8;
var $M.150: [ref] i8;
var $M.151: [ref] i8;
var $M.152: [ref] i8;
var $M.153: [ref] i8;
var $M.154: [ref] i8;
var $M.155: [ref] i8;
var $M.156: [ref] i8;
var $M.157: [ref] i8;
var $M.158: [ref] i8;
var $M.159: [ref] i8;
var $M.160: [ref] i8;
var $M.161: [ref] i8;
var $M.162: [ref] i8;
var $M.163: [ref] i8;
var $M.164: [ref] i8;
var $M.165: [ref] i8;
var $M.166: [ref] i8;
var $M.167: [ref] i8;
var $M.168: [ref] i8;
var $M.169: [ref] i8;
var $M.170: [ref] i8;
var $M.171: [ref] i8;
var $M.172: [ref] i8;
var $M.173: [ref] i8;
var $M.174: [ref] i8;
var $M.175: [ref] i8;
var $M.176: [ref] i8;
var $M.177: [ref] i8;
var $M.178: [ref] i8;
var $M.179: [ref] i8;
var $M.180: [ref] i8;
var $M.181: [ref] i8;
var $M.182: [ref] i8;
var $M.183: [ref] i8;
var $M.184: [ref] i8;
var $M.185: [ref] i8;
var $M.186: [ref] i8;
var $M.187: [ref] i8;
var $M.188: [ref] i8;
var $M.189: [ref] i8;
var $M.190: [ref] i8;
var $M.191: [ref] i8;
var $M.192: [ref] i8;
var $M.193: [ref] i8;
var $M.194: [ref] i8;
var $M.195: [ref] i8;
var $M.196: [ref] i8;
var $M.197: [ref] i8;
var $M.198: [ref] i8;
var $M.199: [ref] i8;
var $M.200: [ref] i8;
var $M.201: [ref] i8;
var $M.202: [ref] i8;
var $M.203: [ref] i8;
var $M.204: [ref] i8;
var $M.205: [ref] i8;
var $M.206: [ref] i8;
var $M.207: [ref] i8;
var $M.208: [ref] i8;
var $M.209: [ref] i8;
var $M.210: [ref] i8;
var $M.211: [ref] i8;
var $M.212: [ref] i8;
var $M.213: [ref] i8;
var $M.214: [ref] i8;
var $M.215: [ref] i8;
var $M.216: [ref] i8;
var $M.217: [ref] i8;
var $M.218: [ref] i8;
var $M.219: [ref] i8;
var $M.220: [ref] i8;
var $M.221: [ref] i8;
var $M.222: [ref] i8;
var $M.223: [ref] i128;
var $M.224: [ref] i8;
var $M.225: [ref] i8;
var $M.226: [ref] i8;
var $M.227: [ref] i8;
var $M.228: [ref] i8;
var $M.229: [ref] i8;
var $M.230: [ref] i8;
var $M.231: [ref] i8;
var $M.232: [ref] i8;
var $M.233: [ref] i8;
var $M.234: [ref] i8;
var $M.235: [ref] i8;
var $M.236: [ref] i8;
var $M.237: [ref] i8;
var $M.238: [ref] i8;
var $M.239: [ref] i8;
var $M.240: [ref] i8;
var $M.241: [ref] i8;
var $M.242: [ref] i8;
var $M.243: [ref] i8;
var $M.244: [ref] i8;
var $M.245: [ref] i8;
var $M.246: [ref] i8;
var $M.247: [ref] i8;
var $M.248: [ref] i8;
var $M.249: [ref] i8;
var $M.250: [ref] i8;
var $M.251: [ref] i8;
var $M.252: [ref] i8;
var $M.253: [ref] i8;
var $M.254: [ref] i8;
var $M.255: [ref] i8;
var $M.256: [ref] i8;
var $M.257: [ref] i8;
var $M.258: [ref] i8;
var $M.259: [ref] i8;
var $M.260: [ref] i8;
var $M.261: [ref] i8;
var $M.262: [ref] i8;
var $M.263: [ref] i8;
var $M.264: [ref] i8;
var $M.265: [ref] i8;
var $M.266: [ref] i8;
var $M.267: [ref] i8;
var $M.268: [ref] i8;
var $M.269: [ref] i8;
var $M.270: [ref] i8;
var $M.271: [ref] i8;
var $M.272: [ref] i8;
var $M.273: [ref] i8;
var $M.274: [ref] i8;
var $M.275: [ref] i8;
var $M.276: [ref] i8;
var $M.277: [ref] i8;
var $M.278: [ref] i8;
var $M.279: [ref] i8;
var $M.280: [ref] i8;
var $M.281: [ref] i8;
var $M.282: [ref] i8;
var $M.283: [ref] i8;
var $M.284: [ref] i8;
var $M.285: [ref] i8;
var $M.286: [ref] i8;
var $M.287: [ref] i8;
var $M.288: [ref] i8;
var $M.289: [ref] i8;
var $M.290: [ref] i8;
var $M.291: [ref] i8;
var $M.292: [ref] i8;
var $M.293: [ref] i8;
var $M.294: [ref] i8;
var $M.295: [ref] i8;
var $M.296: [ref] i8;
var $M.297: [ref] i8;
var $M.298: [ref] i8;
var $M.299: [ref] i8;
var $M.300: [ref] i8;
var $M.301: [ref] i8;
var $M.302: [ref] i8;
var $M.303: [ref] i8;
var $M.304: [ref] i8;
var $M.305: [ref] i8;
var $M.306: [ref] i8;
var $M.307: [ref] i8;
var $M.308: [ref] i8;
var $M.309: [ref] i8;
var $M.310: [ref] i8;
var $M.311: [ref] i8;
var $M.312: [ref] i8;
var $M.313: [ref] i8;
var $M.314: [ref] i8;
var $M.315: [ref] i8;
var $M.316: [ref] i8;
var $M.317: [ref] i8;
var $M.318: [ref] i8;
var $M.319: [ref] i8;
var $M.320: [ref] i8;
var $M.321: [ref] i8;
var $M.322: [ref] i8;
var $M.323: [ref] i8;
var $M.324: [ref] i8;
var $M.325: [ref] i8;
var $M.326: [ref] i8;
var $M.327: [ref] i8;
var $M.328: [ref] i8;
var $M.329: [ref] i8;
var $M.330: [ref] i8;
var $M.331: [ref] i8;
var $M.332: [ref] i8;
var $M.333: [ref] i8;
var $M.334: [ref] i8;
var $M.335: [ref] i8;
var $M.336: [ref] i8;
var $M.337: [ref] i8;
var $M.338: [ref] i8;
var $M.339: [ref] i8;
var $M.340: [ref] i8;
var $M.341: [ref] i8;
var $M.342: [ref] i8;
var $M.343: [ref] i8;
var $M.344: [ref] i8;
var $M.345: [ref] i8;
var $M.346: [ref] i8;
var $M.347: [ref] i8;
var $M.348: [ref] i8;
var $M.349: [ref] i8;
var $M.350: [ref] i8;
var $M.351: [ref] i8;
var $M.352: [ref] i8;
var $M.353: [ref] i8;
var $M.354: [ref] i8;
var $M.355: [ref] i8;
var $M.356: [ref] i8;
var $M.357: [ref] i8;
var $M.358: [ref] i8;
var $M.359: [ref] i8;
var $M.360: [ref] i8;
var $M.361: [ref] i8;
var $M.362: [ref] i8;
var $M.363: [ref] i8;
var $M.364: [ref] i8;
var $M.365: [ref] i8;
var $M.366: [ref] i8;
var $M.367: [ref] i8;
var $M.368: [ref] i8;
var $M.369: [ref] i8;
var $M.370: [ref] i8;
var $M.371: [ref] i8;
var $M.372: [ref] i8;
var $M.373: [ref] i8;
var $M.374: [ref] i8;
var $M.375: [ref] i8;
var $M.376: [ref] i8;
var $M.377: [ref] i8;
var $M.378: [ref] i8;
var $M.379: [ref] i8;
var $M.380: [ref] i8;
var $M.381: [ref] i8;
var $M.382: [ref] i8;
var $M.383: [ref] i8;
var $M.384: [ref] i8;
var $M.385: [ref] i8;
var $M.386: [ref] i8;
var $M.387: [ref] i8;
var $M.388: [ref] i8;
var $M.389: [ref] i8;
var $M.390: [ref] i8;
var $M.391: [ref] i8;
var $M.392: [ref] i8;
var $M.393: [ref] i8;
var $M.394: [ref] i8;
var $M.395: [ref] i8;
var $M.396: [ref] i8;
var $M.397: [ref] i8;
var $M.398: [ref] i8;
var $M.399: [ref] i8;
var $M.400: [ref] i8;
var $M.401: [ref] i8;
var $M.402: [ref] i8;
var $M.403: [ref] i8;
var $M.404: [ref] i8;
var $M.405: [ref] i8;
var $M.406: [ref] i8;
var $M.407: [ref] i8;
var $M.408: [ref] i8;
var $M.409: [ref] i8;
var $M.410: [ref] i8;
var $M.411: [ref] i8;
var $M.412: [ref] i8;
var $M.413: [ref] i8;
var $M.414: [ref] i8;
var $M.415: [ref] i8;
var $M.416: [ref] i8;
var $M.417: [ref] i8;
var $M.418: [ref] i8;
var $M.419: [ref] i8;
var $M.420: [ref] i8;
var $M.421: [ref] i8;
var $M.422: [ref] i8;
var $M.423: [ref] i8;
var $M.424: [ref] i8;
var $M.425: [ref] i8;
var $M.426: [ref] i8;
var $M.427: [ref] i8;
var $M.428: [ref] i8;
var $M.429: [ref] i8;
var $M.430: [ref] i8;
var $M.431: [ref] i8;
var $M.432: [ref] i8;
var $M.433: [ref] i8;
var $M.434: [ref] i8;
var $M.435: [ref] i8;
var $M.436: [ref] i8;
var $M.437: [ref] i8;
var $M.438: [ref] i8;
var $M.439: [ref] i8;
var $M.440: [ref] i8;
var $M.441: [ref] i8;
var $M.442: [ref] i8;
var $M.443: [ref] i8;
var $M.444: [ref] i8;
var $M.445: [ref] i8;
var $M.446: [ref] i8;
var $M.447: [ref] i8;
var $M.448: [ref] i8;
var $M.449: [ref] i8;
var $M.450: [ref] i8;
var $M.451: [ref] i8;
var $M.452: [ref] i8;
var $M.453: [ref] i8;
var $M.454: [ref] i8;
var $M.455: [ref] i8;
var $M.456: [ref] i8;
var $M.457: [ref] i8;
var $M.458: [ref] i8;
var $M.459: [ref] i8;
var $M.460: [ref] i8;
var $M.461: [ref] i8;
var $M.462: [ref] i8;
var $M.463: [ref] i8;
var $M.464: [ref] i8;
var $M.465: [ref] i8;
var $M.466: [ref] i8;
var $M.467: [ref] i8;
var $M.468: [ref] i8;
var $M.469: [ref] i8;
var $M.470: [ref] i8;
var $M.471: [ref] i8;
var $M.472: [ref] i8;
var $M.473: [ref] i8;
var $M.474: [ref] i8;
var $M.475: [ref] i8;
var $M.476: [ref] i8;
var $M.477: [ref] i8;
var $M.478: [ref] i8;
var $M.479: [ref] i8;
var $M.480: [ref] i8;
var $M.481: [ref] i8;
var $M.482: [ref] i8;
var $M.483: [ref] i8;
var $M.484: [ref] i8;
var $M.485: [ref] i8;
var $M.486: [ref] i8;
var $M.487: [ref] i8;
var $M.488: [ref] i8;
var $M.489: [ref] i8;
var $M.490: [ref] i8;
var $M.491: [ref] i8;
var $M.492: [ref] i8;
var $M.493: [ref] i8;
var $M.494: [ref] i8;
var $M.495: [ref] i8;
var $M.496: [ref] i8;
var $M.497: [ref] i8;
var $M.498: [ref] i8;
var $M.499: [ref] i8;
var $M.500: [ref] i8;
var $M.501: [ref] i8;
var $M.502: [ref] i8;
var $M.503: [ref] i8;
var $M.504: [ref] i8;
var $M.505: [ref] i8;
var $M.506: [ref] i8;
var $M.507: [ref] i8;
var $M.508: [ref] i8;
var $M.509: [ref] i8;
var $M.510: [ref] i8;
var $M.511: [ref] i8;
var $M.512: [ref] i8;
var $M.513: [ref] i8;
var $M.514: [ref] i8;
var $M.515: [ref] i8;
var $M.516: [ref] i8;
var $M.517: [ref] i8;
var $M.518: [ref] i8;
var $M.519: [ref] i8;
var $M.520: [ref] i8;
var $M.521: [ref] i8;
var $M.522: [ref] i8;
var $M.523: [ref] i8;
var $M.524: [ref] i8;
var $M.525: [ref] i8;
var $M.526: [ref] i8;
var $M.527: [ref] i8;
var $M.528: [ref] i8;
var $M.529: [ref] i8;
var $M.530: [ref] i8;
var $M.531: [ref] i8;
var $M.532: [ref] i8;
var $M.533: [ref] i8;
var $M.534: [ref] i8;
var $M.535: [ref] i8;
var $M.536: [ref] i8;
var $M.537: [ref] i8;
var $M.538: [ref] i8;
var $M.539: [ref] i8;
var $M.540: [ref] i8;
var $M.541: [ref] i8;
var $M.542: [ref] i8;
var $M.543: [ref] i8;
var $M.544: [ref] i8;
var $M.545: [ref] i8;
var $M.546: [ref] i8;
var $M.547: [ref] i8;
var $M.548: [ref] i8;
var $M.549: [ref] i8;
var $M.550: [ref] i8;
var $M.551: [ref] i8;
var $M.552: [ref] i8;
var $M.553: [ref] i8;
var $M.554: [ref] i8;
var $M.555: [ref] i8;
var $M.556: [ref] i8;
var $M.557: [ref] i8;
var $M.558: [ref] i8;
var $M.559: [ref] i8;
var $M.560: [ref] i8;
var $M.561: [ref] i8;
var $M.562: [ref] i8;
var $M.563: [ref] i8;
var $M.564: [ref] i8;
var $M.565: [ref] i8;
var $M.566: [ref] i8;
var $M.567: [ref] i8;
var $M.568: [ref] i8;
var $M.569: [ref] i8;
var $M.570: [ref] i8;
var $M.571: [ref] i8;
var $M.572: [ref] i8;
var $M.573: [ref] i8;
var $M.574: [ref] i8;
var $M.575: [ref] i8;
var $M.576: [ref] i8;
var $M.577: [ref] i8;
var $M.578: [ref] i8;
var $M.579: [ref] i8;
var $M.580: [ref] i8;
var $M.581: [ref] i8;
var $M.582: [ref] i8;
var $M.583: [ref] i8;
var $M.584: [ref] i8;
var $M.585: [ref] i8;
var $M.586: [ref] i8;
var $M.587: [ref] i8;
var $M.588: [ref] i8;
var $M.589: [ref] i8;
var $M.590: [ref] i8;
var $M.591: [ref] i8;
var $M.592: [ref] i8;
var $M.593: [ref] i8;
var $M.594: [ref] i8;
var $M.595: [ref] i8;
var $M.596: [ref] i8;
var $M.597: [ref] i8;
var $M.598: [ref] i8;
var $M.599: [ref] i8;
var $M.600: [ref] i8;
var $M.601: [ref] i8;
var $M.602: [ref] i8;
var $M.603: [ref] i8;
var $M.604: [ref] i8;
var $M.605: [ref] i8;
var $M.606: [ref] i8;
var $M.607: [ref] i8;
var $M.608: [ref] i8;
var $M.609: [ref] i8;
var $M.610: [ref] i8;
var $M.611: [ref] i8;
var $M.612: [ref] i8;
var $M.613: [ref] i8;
var $M.614: [ref] i8;
var $M.615: [ref] i8;
var $M.616: [ref] i8;
var $M.617: [ref] i8;
var $M.618: [ref] i8;
var $M.619: [ref] i8;
var $M.620: [ref] i8;
var $M.621: [ref] i8;
var $M.622: [ref] i8;
var $M.623: [ref] i8;
var $M.624: [ref] i8;
var $M.625: [ref] i8;
var $M.626: [ref] i8;
var $M.627: [ref] i8;
var $M.628: [ref] i8;
var $M.629: [ref] i8;
var $M.630: [ref] i8;
var $M.631: [ref] i8;
var $M.632: [ref] i8;
var $M.633: [ref] i8;
var $M.634: [ref] i8;
var $M.635: [ref] i8;
var $M.636: [ref] i8;
var $M.637: [ref] i8;
var $M.638: [ref] i8;
var $M.639: [ref] i8;
var $M.640: [ref] i8;
var $M.641: [ref] i8;
var $M.642: [ref] i8;
var $M.643: [ref] i8;
var $M.644: [ref] i8;
var $M.645: [ref] i8;
var $M.646: [ref] i8;
var $M.647: [ref] i8;
var $M.648: [ref] i8;
var $M.649: [ref] i8;
var $M.650: [ref] i8;
var $M.651: [ref] i8;
var $M.652: [ref] i8;
var $M.653: [ref] i8;
var $M.654: [ref] i8;
var $M.655: [ref] i8;
var $M.656: [ref] i8;
var $M.657: [ref] i8;
var $M.658: [ref] i8;
var $M.659: [ref] i8;
var $M.660: [ref] i8;
var $M.661: [ref] i8;
var $M.662: [ref] i8;
var $M.663: [ref] i8;
var $M.664: [ref] i8;
var $M.665: [ref] i8;
var $M.666: [ref] i8;
var $M.667: [ref] i8;
var $M.668: [ref] i8;
var $M.669: [ref] i8;
var $M.670: [ref] i8;
var $M.671: [ref] i8;
var $M.672: [ref] i8;
var $M.673: [ref] i8;
var $M.674: [ref] i8;
var $M.675: [ref] i8;
var $M.676: [ref] i8;
var $M.677: [ref] i8;
var $M.678: [ref] i8;
var $M.679: [ref] i8;
var $M.680: [ref] i8;
var $M.681: [ref] i8;
var $M.682: [ref] i8;
var $M.683: [ref] i8;
var $M.684: [ref] i8;
var $M.685: [ref] i8;
var $M.686: [ref] i8;
var $M.687: [ref] i8;
var $M.688: [ref] i8;
var $M.689: [ref] i8;
var $M.690: [ref] i8;
var $M.691: [ref] i8;
var $M.692: [ref] i8;
var $M.693: [ref] i8;
var $M.694: [ref] ref;

// Memory address bounds
axiom ($GLOBALS_BOTTOM == $sub.ref(0, 52632));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM, $sub.ref(0, 32768)));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p, $EXTERNS_BOTTOM) }

// SMT bit-vector/integer conversion
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (i64);

// Integer arithmetic operations
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:inline} $add.i33(i1: i33, i2: i33) returns (i33) { (i1 + i2) }
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:inline} $sub.i33(i1: i33, i2: i33) returns (i33) { (i1 - i2) }
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:inline} $mul.i33(i1: i33, i2: i33) returns (i33) { (i1 * i2) }
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:builtin "div"} $idiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $idiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $idiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $idiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $idiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $idiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $idiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $idiv.i33(i1: i33, i2: i33) returns (i33);
function {:builtin "div"} $idiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $idiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $idiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $idiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $idiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $idiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $idiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $idiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $idiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $idiv.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $sdiv.i1(i1: i1, i2: i1) returns (i1) { $idiv.i1(i1, i2) }
function {:inline} $sdiv.i5(i1: i5, i2: i5) returns (i5) { $idiv.i5(i1, i2) }
function {:inline} $sdiv.i6(i1: i6, i2: i6) returns (i6) { $idiv.i6(i1, i2) }
function {:inline} $sdiv.i8(i1: i8, i2: i8) returns (i8) { $idiv.i8(i1, i2) }
function {:inline} $sdiv.i16(i1: i16, i2: i16) returns (i16) { $idiv.i16(i1, i2) }
function {:inline} $sdiv.i24(i1: i24, i2: i24) returns (i24) { $idiv.i24(i1, i2) }
function {:inline} $sdiv.i32(i1: i32, i2: i32) returns (i32) { $idiv.i32(i1, i2) }
function {:inline} $sdiv.i33(i1: i33, i2: i33) returns (i33) { $idiv.i33(i1, i2) }
function {:inline} $sdiv.i40(i1: i40, i2: i40) returns (i40) { $idiv.i40(i1, i2) }
function {:inline} $sdiv.i48(i1: i48, i2: i48) returns (i48) { $idiv.i48(i1, i2) }
function {:inline} $sdiv.i56(i1: i56, i2: i56) returns (i56) { $idiv.i56(i1, i2) }
function {:inline} $sdiv.i64(i1: i64, i2: i64) returns (i64) { $idiv.i64(i1, i2) }
function {:inline} $sdiv.i80(i1: i80, i2: i80) returns (i80) { $idiv.i80(i1, i2) }
function {:inline} $sdiv.i88(i1: i88, i2: i88) returns (i88) { $idiv.i88(i1, i2) }
function {:inline} $sdiv.i96(i1: i96, i2: i96) returns (i96) { $idiv.i96(i1, i2) }
function {:inline} $sdiv.i128(i1: i128, i2: i128) returns (i128) { $idiv.i128(i1, i2) }
function {:inline} $sdiv.i160(i1: i160, i2: i160) returns (i160) { $idiv.i160(i1, i2) }
function {:inline} $sdiv.i256(i1: i256, i2: i256) returns (i256) { $idiv.i256(i1, i2) }
function {:inline} $udiv.i1(i1: i1, i2: i1) returns (i1) { $idiv.i1(i1, i2) }
function {:inline} $udiv.i5(i1: i5, i2: i5) returns (i5) { $idiv.i5(i1, i2) }
function {:inline} $udiv.i6(i1: i6, i2: i6) returns (i6) { $idiv.i6(i1, i2) }
function {:inline} $udiv.i8(i1: i8, i2: i8) returns (i8) { $idiv.i8(i1, i2) }
function {:inline} $udiv.i16(i1: i16, i2: i16) returns (i16) { $idiv.i16(i1, i2) }
function {:inline} $udiv.i24(i1: i24, i2: i24) returns (i24) { $idiv.i24(i1, i2) }
function {:inline} $udiv.i32(i1: i32, i2: i32) returns (i32) { $idiv.i32(i1, i2) }
function {:inline} $udiv.i33(i1: i33, i2: i33) returns (i33) { $idiv.i33(i1, i2) }
function {:inline} $udiv.i40(i1: i40, i2: i40) returns (i40) { $idiv.i40(i1, i2) }
function {:inline} $udiv.i48(i1: i48, i2: i48) returns (i48) { $idiv.i48(i1, i2) }
function {:inline} $udiv.i56(i1: i56, i2: i56) returns (i56) { $idiv.i56(i1, i2) }
function {:inline} $udiv.i64(i1: i64, i2: i64) returns (i64) { $idiv.i64(i1, i2) }
function {:inline} $udiv.i80(i1: i80, i2: i80) returns (i80) { $idiv.i80(i1, i2) }
function {:inline} $udiv.i88(i1: i88, i2: i88) returns (i88) { $idiv.i88(i1, i2) }
function {:inline} $udiv.i96(i1: i96, i2: i96) returns (i96) { $idiv.i96(i1, i2) }
function {:inline} $udiv.i128(i1: i128, i2: i128) returns (i128) { $idiv.i128(i1, i2) }
function {:inline} $udiv.i160(i1: i160, i2: i160) returns (i160) { $idiv.i160(i1, i2) }
function {:inline} $udiv.i256(i1: i256, i2: i256) returns (i256) { $idiv.i256(i1, i2) }
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i33(i1: i33, i2: i33) returns (i33);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $srem.i1(i1: i1, i2: i1) returns (i1) { (if ($ne.i1.bool($smod.i1(i1, i2), 0) && $slt.i1.bool(i1, 0)) then $sub.i1($smod.i1(i1, i2), $smax.i1(i2, $sub.i1(0, i2))) else $smod.i1(i1, i2)) }
function {:inline} $srem.i5(i1: i5, i2: i5) returns (i5) { (if ($ne.i5.bool($smod.i5(i1, i2), 0) && $slt.i5.bool(i1, 0)) then $sub.i5($smod.i5(i1, i2), $smax.i5(i2, $sub.i5(0, i2))) else $smod.i5(i1, i2)) }
function {:inline} $srem.i6(i1: i6, i2: i6) returns (i6) { (if ($ne.i6.bool($smod.i6(i1, i2), 0) && $slt.i6.bool(i1, 0)) then $sub.i6($smod.i6(i1, i2), $smax.i6(i2, $sub.i6(0, i2))) else $smod.i6(i1, i2)) }
function {:inline} $srem.i8(i1: i8, i2: i8) returns (i8) { (if ($ne.i8.bool($smod.i8(i1, i2), 0) && $slt.i8.bool(i1, 0)) then $sub.i8($smod.i8(i1, i2), $smax.i8(i2, $sub.i8(0, i2))) else $smod.i8(i1, i2)) }
function {:inline} $srem.i16(i1: i16, i2: i16) returns (i16) { (if ($ne.i16.bool($smod.i16(i1, i2), 0) && $slt.i16.bool(i1, 0)) then $sub.i16($smod.i16(i1, i2), $smax.i16(i2, $sub.i16(0, i2))) else $smod.i16(i1, i2)) }
function {:inline} $srem.i24(i1: i24, i2: i24) returns (i24) { (if ($ne.i24.bool($smod.i24(i1, i2), 0) && $slt.i24.bool(i1, 0)) then $sub.i24($smod.i24(i1, i2), $smax.i24(i2, $sub.i24(0, i2))) else $smod.i24(i1, i2)) }
function {:inline} $srem.i32(i1: i32, i2: i32) returns (i32) { (if ($ne.i32.bool($smod.i32(i1, i2), 0) && $slt.i32.bool(i1, 0)) then $sub.i32($smod.i32(i1, i2), $smax.i32(i2, $sub.i32(0, i2))) else $smod.i32(i1, i2)) }
function {:inline} $srem.i33(i1: i33, i2: i33) returns (i33) { (if ($ne.i33.bool($smod.i33(i1, i2), 0) && $slt.i33.bool(i1, 0)) then $sub.i33($smod.i33(i1, i2), $smax.i33(i2, $sub.i33(0, i2))) else $smod.i33(i1, i2)) }
function {:inline} $srem.i40(i1: i40, i2: i40) returns (i40) { (if ($ne.i40.bool($smod.i40(i1, i2), 0) && $slt.i40.bool(i1, 0)) then $sub.i40($smod.i40(i1, i2), $smax.i40(i2, $sub.i40(0, i2))) else $smod.i40(i1, i2)) }
function {:inline} $srem.i48(i1: i48, i2: i48) returns (i48) { (if ($ne.i48.bool($smod.i48(i1, i2), 0) && $slt.i48.bool(i1, 0)) then $sub.i48($smod.i48(i1, i2), $smax.i48(i2, $sub.i48(0, i2))) else $smod.i48(i1, i2)) }
function {:inline} $srem.i56(i1: i56, i2: i56) returns (i56) { (if ($ne.i56.bool($smod.i56(i1, i2), 0) && $slt.i56.bool(i1, 0)) then $sub.i56($smod.i56(i1, i2), $smax.i56(i2, $sub.i56(0, i2))) else $smod.i56(i1, i2)) }
function {:inline} $srem.i64(i1: i64, i2: i64) returns (i64) { (if ($ne.i64.bool($smod.i64(i1, i2), 0) && $slt.i64.bool(i1, 0)) then $sub.i64($smod.i64(i1, i2), $smax.i64(i2, $sub.i64(0, i2))) else $smod.i64(i1, i2)) }
function {:inline} $srem.i80(i1: i80, i2: i80) returns (i80) { (if ($ne.i80.bool($smod.i80(i1, i2), 0) && $slt.i80.bool(i1, 0)) then $sub.i80($smod.i80(i1, i2), $smax.i80(i2, $sub.i80(0, i2))) else $smod.i80(i1, i2)) }
function {:inline} $srem.i88(i1: i88, i2: i88) returns (i88) { (if ($ne.i88.bool($smod.i88(i1, i2), 0) && $slt.i88.bool(i1, 0)) then $sub.i88($smod.i88(i1, i2), $smax.i88(i2, $sub.i88(0, i2))) else $smod.i88(i1, i2)) }
function {:inline} $srem.i96(i1: i96, i2: i96) returns (i96) { (if ($ne.i96.bool($smod.i96(i1, i2), 0) && $slt.i96.bool(i1, 0)) then $sub.i96($smod.i96(i1, i2), $smax.i96(i2, $sub.i96(0, i2))) else $smod.i96(i1, i2)) }
function {:inline} $srem.i128(i1: i128, i2: i128) returns (i128) { (if ($ne.i128.bool($smod.i128(i1, i2), 0) && $slt.i128.bool(i1, 0)) then $sub.i128($smod.i128(i1, i2), $smax.i128(i2, $sub.i128(0, i2))) else $smod.i128(i1, i2)) }
function {:inline} $srem.i160(i1: i160, i2: i160) returns (i160) { (if ($ne.i160.bool($smod.i160(i1, i2), 0) && $slt.i160.bool(i1, 0)) then $sub.i160($smod.i160(i1, i2), $smax.i160(i2, $sub.i160(0, i2))) else $smod.i160(i1, i2)) }
function {:inline} $srem.i256(i1: i256, i2: i256) returns (i256) { (if ($ne.i256.bool($smod.i256(i1, i2), 0) && $slt.i256.bool(i1, 0)) then $sub.i256($smod.i256(i1, i2), $smax.i256(i2, $sub.i256(0, i2))) else $smod.i256(i1, i2)) }
function {:inline} $urem.i1(i1: i1, i2: i1) returns (i1) { $smod.i1(i1, i2) }
function {:inline} $urem.i5(i1: i5, i2: i5) returns (i5) { $smod.i5(i1, i2) }
function {:inline} $urem.i6(i1: i6, i2: i6) returns (i6) { $smod.i6(i1, i2) }
function {:inline} $urem.i8(i1: i8, i2: i8) returns (i8) { $smod.i8(i1, i2) }
function {:inline} $urem.i16(i1: i16, i2: i16) returns (i16) { $smod.i16(i1, i2) }
function {:inline} $urem.i24(i1: i24, i2: i24) returns (i24) { $smod.i24(i1, i2) }
function {:inline} $urem.i32(i1: i32, i2: i32) returns (i32) { $smod.i32(i1, i2) }
function {:inline} $urem.i33(i1: i33, i2: i33) returns (i33) { $smod.i33(i1, i2) }
function {:inline} $urem.i40(i1: i40, i2: i40) returns (i40) { $smod.i40(i1, i2) }
function {:inline} $urem.i48(i1: i48, i2: i48) returns (i48) { $smod.i48(i1, i2) }
function {:inline} $urem.i56(i1: i56, i2: i56) returns (i56) { $smod.i56(i1, i2) }
function {:inline} $urem.i64(i1: i64, i2: i64) returns (i64) { $smod.i64(i1, i2) }
function {:inline} $urem.i80(i1: i80, i2: i80) returns (i80) { $smod.i80(i1, i2) }
function {:inline} $urem.i88(i1: i88, i2: i88) returns (i88) { $smod.i88(i1, i2) }
function {:inline} $urem.i96(i1: i96, i2: i96) returns (i96) { $smod.i96(i1, i2) }
function {:inline} $urem.i128(i1: i128, i2: i128) returns (i128) { $smod.i128(i1, i2) }
function {:inline} $urem.i160(i1: i160, i2: i160) returns (i160) { $smod.i160(i1, i2) }
function {:inline} $urem.i256(i1: i256, i2: i256) returns (i256) { $smod.i256(i1, i2) }
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $shl.i5(i1: i5, i2: i5) returns (i5);
function $shl.i6(i1: i6, i2: i6) returns (i6);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i33(i1: i33, i2: i33) returns (i33);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i160(i1: i160, i2: i160) returns (i160);
function $shl.i256(i1: i256, i2: i256) returns (i256);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i5(i1: i5, i2: i5) returns (i5);
function $lshr.i6(i1: i6, i2: i6) returns (i6);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i33(i1: i33, i2: i33) returns (i33);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i160(i1: i160, i2: i160) returns (i160);
function $lshr.i256(i1: i256, i2: i256) returns (i256);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i5(i1: i5, i2: i5) returns (i5);
function $ashr.i6(i1: i6, i2: i6) returns (i6);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i33(i1: i33, i2: i33) returns (i33);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i160(i1: i160, i2: i160) returns (i160);
function $ashr.i256(i1: i256, i2: i256) returns (i256);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $and.i5(i1: i5, i2: i5) returns (i5);
function $and.i6(i1: i6, i2: i6) returns (i6);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i33(i1: i33, i2: i33) returns (i33);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i80(i1: i80, i2: i80) returns (i80);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i160(i1: i160, i2: i160) returns (i160);
function $and.i256(i1: i256, i2: i256) returns (i256);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $or.i5(i1: i5, i2: i5) returns (i5);
function $or.i6(i1: i6, i2: i6) returns (i6);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i33(i1: i33, i2: i33) returns (i33);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i80(i1: i80, i2: i80) returns (i80);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i160(i1: i160, i2: i160) returns (i160);
function $or.i256(i1: i256, i2: i256) returns (i256);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $xor.i5(i1: i5, i2: i5) returns (i5);
function $xor.i6(i1: i6, i2: i6) returns (i6);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i33(i1: i33, i2: i33) returns (i33);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i160(i1: i160, i2: i160) returns (i160);
function $xor.i256(i1: i256, i2: i256) returns (i256);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function $nand.i5(i1: i5, i2: i5) returns (i5);
function $nand.i6(i1: i6, i2: i6) returns (i6);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i33(i1: i33, i2: i33) returns (i33);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i160(i1: i160, i2: i160) returns (i160);
function $nand.i256(i1: i256, i2: i256) returns (i256);
function $not.i1(i: i1) returns (i1);
function $not.i5(i: i5) returns (i5);
function $not.i6(i: i6) returns (i6);
function $not.i8(i: i8) returns (i8);
function $not.i16(i: i16) returns (i16);
function $not.i24(i: i24) returns (i24);
function $not.i32(i: i32) returns (i32);
function $not.i33(i: i33) returns (i33);
function $not.i40(i: i40) returns (i40);
function $not.i48(i: i48) returns (i48);
function $not.i56(i: i56) returns (i56);
function $not.i64(i: i64) returns (i64);
function $not.i80(i: i80) returns (i80);
function $not.i88(i: i88) returns (i88);
function $not.i96(i: i96) returns (i96);
function $not.i128(i: i128) returns (i128);
function $not.i160(i: i160) returns (i160);
function $not.i256(i: i256) returns (i256);
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i5(i1: i5, i2: i5) returns (i5) { (if $slt.i5.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i6(i1: i6, i2: i6) returns (i6) { (if $slt.i6.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) { (if $slt.i8.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) { (if $slt.i16.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) { (if $slt.i24.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) { (if $slt.i32.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i33(i1: i33, i2: i33) returns (i33) { (if $slt.i33.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) { (if $slt.i40.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) { (if $slt.i48.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) { (if $slt.i56.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) { (if $slt.i64.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) { (if $slt.i80.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) { (if $slt.i88.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) { (if $slt.i96.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) { (if $slt.i128.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i160(i1: i160, i2: i160) returns (i160) { (if $slt.i160.bool(i1, i2) then i1 else i2) }
function {:inline} $smin.i256(i1: i256, i2: i256) returns (i256) { (if $slt.i256.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i5(i1: i5, i2: i5) returns (i5) { (if $sgt.i5.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i6(i1: i6, i2: i6) returns (i6) { (if $sgt.i6.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) { (if $sgt.i8.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) { (if $sgt.i16.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) { (if $sgt.i24.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) { (if $sgt.i32.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i33(i1: i33, i2: i33) returns (i33) { (if $sgt.i33.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) { (if $sgt.i40.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) { (if $sgt.i48.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) { (if $sgt.i56.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) { (if $sgt.i64.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) { (if $sgt.i80.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) { (if $sgt.i88.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) { (if $sgt.i96.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) { (if $sgt.i128.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i160(i1: i160, i2: i160) returns (i160) { (if $sgt.i160.bool(i1, i2) then i1 else i2) }
function {:inline} $smax.i256(i1: i256, i2: i256) returns (i256) { (if $sgt.i256.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i5(i1: i5, i2: i5) returns (i5) { (if $ult.i5.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i6(i1: i6, i2: i6) returns (i6) { (if $ult.i6.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) { (if $ult.i8.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) { (if $ult.i16.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) { (if $ult.i24.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) { (if $ult.i32.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i33(i1: i33, i2: i33) returns (i33) { (if $ult.i33.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) { (if $ult.i40.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) { (if $ult.i48.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) { (if $ult.i56.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) { (if $ult.i64.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) { (if $ult.i80.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) { (if $ult.i88.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) { (if $ult.i96.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) { (if $ult.i128.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i160(i1: i160, i2: i160) returns (i160) { (if $ult.i160.bool(i1, i2) then i1 else i2) }
function {:inline} $umin.i256(i1: i256, i2: i256) returns (i256) { (if $ult.i256.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i5(i1: i5, i2: i5) returns (i5) { (if $ugt.i5.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i6(i1: i6, i2: i6) returns (i6) { (if $ugt.i6.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) { (if $ugt.i8.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) { (if $ugt.i16.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) { (if $ugt.i24.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) { (if $ugt.i32.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i33(i1: i33, i2: i33) returns (i33) { (if $ugt.i33.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) { (if $ugt.i40.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) { (if $ugt.i48.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) { (if $ugt.i56.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) { (if $ugt.i64.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) { (if $ugt.i80.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) { (if $ugt.i88.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) { (if $ugt.i96.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) { (if $ugt.i128.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i160(i1: i160, i2: i160) returns (i160) { (if $ugt.i160.bool(i1, i2) then i1 else i2) }
function {:inline} $umax.i256(i1: i256, i2: i256) returns (i256) { (if $ugt.i256.bool(i1, i2) then i1 else i2) }
axiom ($and.i1(0, 0) == 0);
axiom ($or.i1(0, 0) == 0);
axiom ($xor.i1(0, 0) == 0);
axiom ($and.i1(0, 1) == 0);
axiom ($or.i1(0, 1) == 1);
axiom ($xor.i1(0, 1) == 1);
axiom ($and.i1(1, 0) == 0);
axiom ($or.i1(1, 0) == 1);
axiom ($xor.i1(1, 0) == 1);
axiom ($and.i1(1, 1) == 1);
axiom ($or.i1(1, 1) == 1);
axiom ($xor.i1(1, 1) == 0);
axiom ($and.i32(32, 16) == 0);
// Integer predicates
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i33(i1: i33, i2: i33) returns (i1) { (if $ule.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 < i2) }
function {:inline} $ult.i33(i1: i33, i2: i33) returns (i1) { (if $ult.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i33(i1: i33, i2: i33) returns (i1) { (if $uge.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i33(i1: i33, i2: i33) returns (i1) { (if $ugt.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i33(i1: i33, i2: i33) returns (i1) { (if $sle.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 < i2) }
function {:inline} $slt.i33(i1: i33, i2: i33) returns (i1) { (if $slt.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i33(i1: i33, i2: i33) returns (i1) { (if $sge.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i33(i1: i33, i2: i33) returns (i1) { (if $sgt.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 == i2) }
function {:inline} $eq.i33(i1: i33, i2: i33) returns (i1) { (if $eq.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 != i2) }
function {:inline} $ne.i33(i1: i33, i2: i33) returns (i1) { (if $ne.i33.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1, i2) then 1 else 0) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1, i2) then 1 else 0) }
// Integer load/store operations
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) { M[p] }
function {:inline} $store.i1(M: [ref] i1, p: ref, i: i1) returns ([ref] i1) { M[p := i] }
function {:inline} $load.i5(M: [ref] i5, p: ref) returns (i5) { M[p] }
function {:inline} $store.i5(M: [ref] i5, p: ref, i: i5) returns ([ref] i5) { M[p := i] }
function {:inline} $load.i6(M: [ref] i6, p: ref) returns (i6) { M[p] }
function {:inline} $store.i6(M: [ref] i6, p: ref, i: i6) returns ([ref] i6) { M[p := i] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $store.i8(M: [ref] i8, p: ref, i: i8) returns ([ref] i8) { M[p := i] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $store.i16(M: [ref] i16, p: ref, i: i16) returns ([ref] i16) { M[p := i] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $store.i24(M: [ref] i24, p: ref, i: i24) returns ([ref] i24) { M[p := i] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $store.i32(M: [ref] i32, p: ref, i: i32) returns ([ref] i32) { M[p := i] }
function {:inline} $load.i33(M: [ref] i33, p: ref) returns (i33) { M[p] }
function {:inline} $store.i33(M: [ref] i33, p: ref, i: i33) returns ([ref] i33) { M[p := i] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $store.i40(M: [ref] i40, p: ref, i: i40) returns ([ref] i40) { M[p := i] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $store.i48(M: [ref] i48, p: ref, i: i48) returns ([ref] i48) { M[p := i] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $store.i56(M: [ref] i56, p: ref, i: i56) returns ([ref] i56) { M[p := i] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $store.i64(M: [ref] i64, p: ref, i: i64) returns ([ref] i64) { M[p := i] }
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) { M[p] }
function {:inline} $store.i80(M: [ref] i80, p: ref, i: i80) returns ([ref] i80) { M[p := i] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $store.i88(M: [ref] i88, p: ref, i: i88) returns ([ref] i88) { M[p := i] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $store.i96(M: [ref] i96, p: ref, i: i96) returns ([ref] i96) { M[p := i] }
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, i: i128) returns ([ref] i128) { M[p := i] }
function {:inline} $load.i160(M: [ref] i160, p: ref) returns (i160) { M[p] }
function {:inline} $store.i160(M: [ref] i160, p: ref, i: i160) returns ([ref] i160) { M[p := i] }
function {:inline} $load.i256(M: [ref] i256, p: ref) returns (i256) { M[p] }
function {:inline} $store.i256(M: [ref] i256, p: ref, i: i256) returns ([ref] i256) { M[p := i] }
// Conversion between integer types
function {:inline} $trunc.i5.i1(i: i5) returns (i1) { i }
function {:inline} $trunc.i6.i1(i: i6) returns (i1) { i }
function {:inline} $trunc.i8.i1(i: i8) returns (i1) { i }
function {:inline} $trunc.i16.i1(i: i16) returns (i1) { i }
function {:inline} $trunc.i24.i1(i: i24) returns (i1) { i }
function {:inline} $trunc.i32.i1(i: i32) returns (i1) { i }
function {:inline} $trunc.i33.i1(i: i33) returns (i1) { i }
function {:inline} $trunc.i40.i1(i: i40) returns (i1) { i }
function {:inline} $trunc.i48.i1(i: i48) returns (i1) { i }
function {:inline} $trunc.i56.i1(i: i56) returns (i1) { i }
function {:inline} $trunc.i64.i1(i: i64) returns (i1) { i }
function {:inline} $trunc.i80.i1(i: i80) returns (i1) { i }
function {:inline} $trunc.i88.i1(i: i88) returns (i1) { i }
function {:inline} $trunc.i96.i1(i: i96) returns (i1) { i }
function {:inline} $trunc.i128.i1(i: i128) returns (i1) { i }
function {:inline} $trunc.i160.i1(i: i160) returns (i1) { i }
function {:inline} $trunc.i256.i1(i: i256) returns (i1) { i }
function {:inline} $trunc.i6.i5(i: i6) returns (i5) { i }
function {:inline} $trunc.i8.i5(i: i8) returns (i5) { i }
function {:inline} $trunc.i16.i5(i: i16) returns (i5) { i }
function {:inline} $trunc.i24.i5(i: i24) returns (i5) { i }
function {:inline} $trunc.i32.i5(i: i32) returns (i5) { i }
function {:inline} $trunc.i33.i5(i: i33) returns (i5) { i }
function {:inline} $trunc.i40.i5(i: i40) returns (i5) { i }
function {:inline} $trunc.i48.i5(i: i48) returns (i5) { i }
function {:inline} $trunc.i56.i5(i: i56) returns (i5) { i }
function {:inline} $trunc.i64.i5(i: i64) returns (i5) { i }
function {:inline} $trunc.i80.i5(i: i80) returns (i5) { i }
function {:inline} $trunc.i88.i5(i: i88) returns (i5) { i }
function {:inline} $trunc.i96.i5(i: i96) returns (i5) { i }
function {:inline} $trunc.i128.i5(i: i128) returns (i5) { i }
function {:inline} $trunc.i160.i5(i: i160) returns (i5) { i }
function {:inline} $trunc.i256.i5(i: i256) returns (i5) { i }
function {:inline} $trunc.i8.i6(i: i8) returns (i6) { i }
function {:inline} $trunc.i16.i6(i: i16) returns (i6) { i }
function {:inline} $trunc.i24.i6(i: i24) returns (i6) { i }
function {:inline} $trunc.i32.i6(i: i32) returns (i6) { i }
function {:inline} $trunc.i33.i6(i: i33) returns (i6) { i }
function {:inline} $trunc.i40.i6(i: i40) returns (i6) { i }
function {:inline} $trunc.i48.i6(i: i48) returns (i6) { i }
function {:inline} $trunc.i56.i6(i: i56) returns (i6) { i }
function {:inline} $trunc.i64.i6(i: i64) returns (i6) { i }
function {:inline} $trunc.i80.i6(i: i80) returns (i6) { i }
function {:inline} $trunc.i88.i6(i: i88) returns (i6) { i }
function {:inline} $trunc.i96.i6(i: i96) returns (i6) { i }
function {:inline} $trunc.i128.i6(i: i128) returns (i6) { i }
function {:inline} $trunc.i160.i6(i: i160) returns (i6) { i }
function {:inline} $trunc.i256.i6(i: i256) returns (i6) { i }
function {:inline} $trunc.i16.i8(i: i16) returns (i8) { i }
function {:inline} $trunc.i24.i8(i: i24) returns (i8) { i }
function {:inline} $trunc.i32.i8(i: i32) returns (i8) { i }
function {:inline} $trunc.i33.i8(i: i33) returns (i8) { i }
function {:inline} $trunc.i40.i8(i: i40) returns (i8) { i }
function {:inline} $trunc.i48.i8(i: i48) returns (i8) { i }
function {:inline} $trunc.i56.i8(i: i56) returns (i8) { i }
function {:inline} $trunc.i64.i8(i: i64) returns (i8) { i }
function {:inline} $trunc.i80.i8(i: i80) returns (i8) { i }
function {:inline} $trunc.i88.i8(i: i88) returns (i8) { i }
function {:inline} $trunc.i96.i8(i: i96) returns (i8) { i }
function {:inline} $trunc.i128.i8(i: i128) returns (i8) { i }
function {:inline} $trunc.i160.i8(i: i160) returns (i8) { i }
function {:inline} $trunc.i256.i8(i: i256) returns (i8) { i }
function {:inline} $trunc.i24.i16(i: i24) returns (i16) { i }
function {:inline} $trunc.i32.i16(i: i32) returns (i16) { i }
function {:inline} $trunc.i33.i16(i: i33) returns (i16) { i }
function {:inline} $trunc.i40.i16(i: i40) returns (i16) { i }
function {:inline} $trunc.i48.i16(i: i48) returns (i16) { i }
function {:inline} $trunc.i56.i16(i: i56) returns (i16) { i }
function {:inline} $trunc.i64.i16(i: i64) returns (i16) { i }
function {:inline} $trunc.i80.i16(i: i80) returns (i16) { i }
function {:inline} $trunc.i88.i16(i: i88) returns (i16) { i }
function {:inline} $trunc.i96.i16(i: i96) returns (i16) { i }
function {:inline} $trunc.i128.i16(i: i128) returns (i16) { i }
function {:inline} $trunc.i160.i16(i: i160) returns (i16) { i }
function {:inline} $trunc.i256.i16(i: i256) returns (i16) { i }
function {:inline} $trunc.i32.i24(i: i32) returns (i24) { i }
function {:inline} $trunc.i33.i24(i: i33) returns (i24) { i }
function {:inline} $trunc.i40.i24(i: i40) returns (i24) { i }
function {:inline} $trunc.i48.i24(i: i48) returns (i24) { i }
function {:inline} $trunc.i56.i24(i: i56) returns (i24) { i }
function {:inline} $trunc.i64.i24(i: i64) returns (i24) { i }
function {:inline} $trunc.i80.i24(i: i80) returns (i24) { i }
function {:inline} $trunc.i88.i24(i: i88) returns (i24) { i }
function {:inline} $trunc.i96.i24(i: i96) returns (i24) { i }
function {:inline} $trunc.i128.i24(i: i128) returns (i24) { i }
function {:inline} $trunc.i160.i24(i: i160) returns (i24) { i }
function {:inline} $trunc.i256.i24(i: i256) returns (i24) { i }
function {:inline} $trunc.i33.i32(i: i33) returns (i32) { i }
function {:inline} $trunc.i40.i32(i: i40) returns (i32) { i }
function {:inline} $trunc.i48.i32(i: i48) returns (i32) { i }
function {:inline} $trunc.i56.i32(i: i56) returns (i32) { i }
function {:inline} $trunc.i64.i32(i: i64) returns (i32) { i }
function {:inline} $trunc.i80.i32(i: i80) returns (i32) { i }
function {:inline} $trunc.i88.i32(i: i88) returns (i32) { i }
function {:inline} $trunc.i96.i32(i: i96) returns (i32) { i }
function {:inline} $trunc.i128.i32(i: i128) returns (i32) { i }
function {:inline} $trunc.i160.i32(i: i160) returns (i32) { i }
function {:inline} $trunc.i256.i32(i: i256) returns (i32) { i }
function {:inline} $trunc.i40.i33(i: i40) returns (i33) { i }
function {:inline} $trunc.i48.i33(i: i48) returns (i33) { i }
function {:inline} $trunc.i56.i33(i: i56) returns (i33) { i }
function {:inline} $trunc.i64.i33(i: i64) returns (i33) { i }
function {:inline} $trunc.i80.i33(i: i80) returns (i33) { i }
function {:inline} $trunc.i88.i33(i: i88) returns (i33) { i }
function {:inline} $trunc.i96.i33(i: i96) returns (i33) { i }
function {:inline} $trunc.i128.i33(i: i128) returns (i33) { i }
function {:inline} $trunc.i160.i33(i: i160) returns (i33) { i }
function {:inline} $trunc.i256.i33(i: i256) returns (i33) { i }
function {:inline} $trunc.i48.i40(i: i48) returns (i40) { i }
function {:inline} $trunc.i56.i40(i: i56) returns (i40) { i }
function {:inline} $trunc.i64.i40(i: i64) returns (i40) { i }
function {:inline} $trunc.i80.i40(i: i80) returns (i40) { i }
function {:inline} $trunc.i88.i40(i: i88) returns (i40) { i }
function {:inline} $trunc.i96.i40(i: i96) returns (i40) { i }
function {:inline} $trunc.i128.i40(i: i128) returns (i40) { i }
function {:inline} $trunc.i160.i40(i: i160) returns (i40) { i }
function {:inline} $trunc.i256.i40(i: i256) returns (i40) { i }
function {:inline} $trunc.i56.i48(i: i56) returns (i48) { i }
function {:inline} $trunc.i64.i48(i: i64) returns (i48) { i }
function {:inline} $trunc.i80.i48(i: i80) returns (i48) { i }
function {:inline} $trunc.i88.i48(i: i88) returns (i48) { i }
function {:inline} $trunc.i96.i48(i: i96) returns (i48) { i }
function {:inline} $trunc.i128.i48(i: i128) returns (i48) { i }
function {:inline} $trunc.i160.i48(i: i160) returns (i48) { i }
function {:inline} $trunc.i256.i48(i: i256) returns (i48) { i }
function {:inline} $trunc.i64.i56(i: i64) returns (i56) { i }
function {:inline} $trunc.i80.i56(i: i80) returns (i56) { i }
function {:inline} $trunc.i88.i56(i: i88) returns (i56) { i }
function {:inline} $trunc.i96.i56(i: i96) returns (i56) { i }
function {:inline} $trunc.i128.i56(i: i128) returns (i56) { i }
function {:inline} $trunc.i160.i56(i: i160) returns (i56) { i }
function {:inline} $trunc.i256.i56(i: i256) returns (i56) { i }
function {:inline} $trunc.i80.i64(i: i80) returns (i64) { i }
function {:inline} $trunc.i88.i64(i: i88) returns (i64) { i }
function {:inline} $trunc.i96.i64(i: i96) returns (i64) { i }
function {:inline} $trunc.i128.i64(i: i128) returns (i64) { i }
function {:inline} $trunc.i160.i64(i: i160) returns (i64) { i }
function {:inline} $trunc.i256.i64(i: i256) returns (i64) { i }
function {:inline} $trunc.i88.i80(i: i88) returns (i80) { i }
function {:inline} $trunc.i96.i80(i: i96) returns (i80) { i }
function {:inline} $trunc.i128.i80(i: i128) returns (i80) { i }
function {:inline} $trunc.i160.i80(i: i160) returns (i80) { i }
function {:inline} $trunc.i256.i80(i: i256) returns (i80) { i }
function {:inline} $trunc.i96.i88(i: i96) returns (i88) { i }
function {:inline} $trunc.i128.i88(i: i128) returns (i88) { i }
function {:inline} $trunc.i160.i88(i: i160) returns (i88) { i }
function {:inline} $trunc.i256.i88(i: i256) returns (i88) { i }
function {:inline} $trunc.i128.i96(i: i128) returns (i96) { i }
function {:inline} $trunc.i160.i96(i: i160) returns (i96) { i }
function {:inline} $trunc.i256.i96(i: i256) returns (i96) { i }
function {:inline} $trunc.i160.i128(i: i160) returns (i128) { i }
function {:inline} $trunc.i256.i128(i: i256) returns (i128) { i }
function {:inline} $trunc.i256.i160(i: i256) returns (i160) { i }
function {:inline} $sext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $sext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $sext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $sext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $sext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $sext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $sext.i1.i33(i: i1) returns (i33) { i }
function {:inline} $sext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $sext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $sext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $sext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $sext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $sext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $sext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $sext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $sext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $sext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $sext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $sext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $sext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $sext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $sext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $sext.i5.i33(i: i5) returns (i33) { i }
function {:inline} $sext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $sext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $sext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $sext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $sext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $sext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $sext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $sext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $sext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $sext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $sext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $sext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $sext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $sext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $sext.i6.i33(i: i6) returns (i33) { i }
function {:inline} $sext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $sext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $sext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $sext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $sext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $sext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $sext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $sext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $sext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $sext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $sext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $sext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $sext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $sext.i8.i33(i: i8) returns (i33) { i }
function {:inline} $sext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $sext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $sext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $sext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $sext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $sext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $sext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $sext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $sext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $sext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $sext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $sext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $sext.i16.i33(i: i16) returns (i33) { i }
function {:inline} $sext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $sext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $sext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $sext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $sext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $sext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $sext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $sext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $sext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $sext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $sext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $sext.i24.i33(i: i24) returns (i33) { i }
function {:inline} $sext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $sext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $sext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $sext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $sext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $sext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $sext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $sext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $sext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $sext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $sext.i32.i33(i: i32) returns (i33) { i }
function {:inline} $sext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $sext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $sext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $sext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $sext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $sext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $sext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $sext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $sext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $sext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $sext.i33.i40(i: i33) returns (i40) { i }
function {:inline} $sext.i33.i48(i: i33) returns (i48) { i }
function {:inline} $sext.i33.i56(i: i33) returns (i56) { i }
function {:inline} $sext.i33.i64(i: i33) returns (i64) { i }
function {:inline} $sext.i33.i80(i: i33) returns (i80) { i }
function {:inline} $sext.i33.i88(i: i33) returns (i88) { i }
function {:inline} $sext.i33.i96(i: i33) returns (i96) { i }
function {:inline} $sext.i33.i128(i: i33) returns (i128) { i }
function {:inline} $sext.i33.i160(i: i33) returns (i160) { i }
function {:inline} $sext.i33.i256(i: i33) returns (i256) { i }
function {:inline} $sext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $sext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $sext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $sext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $sext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $sext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $sext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $sext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $sext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $sext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $sext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $sext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $sext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $sext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $sext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $sext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $sext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $sext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $sext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $sext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $sext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $sext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $sext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $sext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $sext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $sext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $sext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $sext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $sext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $sext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $sext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $sext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $sext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $sext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $sext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $sext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $sext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $sext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $sext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $sext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $sext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $sext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $sext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $sext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $sext.i160.i256(i: i160) returns (i256) { i }
function {:inline} $zext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $zext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $zext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $zext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $zext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $zext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $zext.i1.i33(i: i1) returns (i33) { i }
function {:inline} $zext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $zext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $zext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $zext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $zext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $zext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $zext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $zext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $zext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $zext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $zext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $zext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $zext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $zext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $zext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $zext.i5.i33(i: i5) returns (i33) { i }
function {:inline} $zext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $zext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $zext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $zext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $zext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $zext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $zext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $zext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $zext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $zext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $zext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $zext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $zext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $zext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $zext.i6.i33(i: i6) returns (i33) { i }
function {:inline} $zext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $zext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $zext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $zext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $zext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $zext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $zext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $zext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $zext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $zext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $zext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $zext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $zext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $zext.i8.i33(i: i8) returns (i33) { i }
function {:inline} $zext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $zext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $zext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $zext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $zext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $zext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $zext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $zext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $zext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $zext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $zext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $zext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $zext.i16.i33(i: i16) returns (i33) { i }
function {:inline} $zext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $zext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $zext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $zext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $zext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $zext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $zext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $zext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $zext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $zext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $zext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $zext.i24.i33(i: i24) returns (i33) { i }
function {:inline} $zext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $zext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $zext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $zext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $zext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $zext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $zext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $zext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $zext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $zext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $zext.i32.i33(i: i32) returns (i33) { i }
function {:inline} $zext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $zext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $zext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $zext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $zext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $zext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $zext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $zext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $zext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $zext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $zext.i33.i40(i: i33) returns (i40) { i }
function {:inline} $zext.i33.i48(i: i33) returns (i48) { i }
function {:inline} $zext.i33.i56(i: i33) returns (i56) { i }
function {:inline} $zext.i33.i64(i: i33) returns (i64) { i }
function {:inline} $zext.i33.i80(i: i33) returns (i80) { i }
function {:inline} $zext.i33.i88(i: i33) returns (i88) { i }
function {:inline} $zext.i33.i96(i: i33) returns (i96) { i }
function {:inline} $zext.i33.i128(i: i33) returns (i128) { i }
function {:inline} $zext.i33.i160(i: i33) returns (i160) { i }
function {:inline} $zext.i33.i256(i: i33) returns (i256) { i }
function {:inline} $zext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $zext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $zext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $zext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $zext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $zext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $zext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $zext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $zext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $zext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $zext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $zext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $zext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $zext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $zext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $zext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $zext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $zext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $zext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $zext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $zext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $zext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $zext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $zext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $zext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $zext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $zext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $zext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $zext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $zext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $zext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $zext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $zext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $zext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $zext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $zext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $zext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $zext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $zext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $zext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $zext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $zext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $zext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $zext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $zext.i160.i256(i: i160) returns (i256) { i }
function $extractvalue.i1(p: ref, i: int) returns (i1);
function $extractvalue.i5(p: ref, i: int) returns (i5);
function $extractvalue.i6(p: ref, i: int) returns (i6);
function $extractvalue.i8(p: ref, i: int) returns (i8);
function $extractvalue.i16(p: ref, i: int) returns (i16);
function $extractvalue.i24(p: ref, i: int) returns (i24);
function $extractvalue.i32(p: ref, i: int) returns (i32);
function $extractvalue.i33(p: ref, i: int) returns (i33);
function $extractvalue.i40(p: ref, i: int) returns (i40);
function $extractvalue.i48(p: ref, i: int) returns (i48);
function $extractvalue.i56(p: ref, i: int) returns (i56);
function $extractvalue.i64(p: ref, i: int) returns (i64);
function $extractvalue.i80(p: ref, i: int) returns (i80);
function $extractvalue.i88(p: ref, i: int) returns (i88);
function $extractvalue.i96(p: ref, i: int) returns (i96);
function $extractvalue.i128(p: ref, i: int) returns (i128);
function $extractvalue.i160(p: ref, i: int) returns (i160);
function $extractvalue.i256(p: ref, i: int) returns (i256);
// Pointer arithmetic operations
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1, p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1, p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1, p2) }

// Pointer predicates
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 == p2) }
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { (if $eq.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 != p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { (if $ne.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 > p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { (if $ugt.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 >= p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { (if $uge.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 < p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { (if $ult.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 <= p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { (if $ule.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 > p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { (if $sgt.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 >= p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { (if $sge.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 < p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { (if $slt.ref.bool(p1, p2) then 1 else 0) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 <= p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { (if $sle.ref.bool(p1, p2) then 1 else 0) }

// Pointer load/store operations
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }

// Pointer conversion
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
// Pointer-number conversion
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }

function $fp(ipart: int, fpart: int, epart: int) returns (float);
// Floating-point arithmetic operations
function $abs.float(f: float) returns (float);
function $round.float(f: float) returns (float);
function $sqrt.float(f: float) returns (float);
function $fadd.float(f1: float, f2: float) returns (float);
function $fsub.float(f1: float, f2: float) returns (float);
function $fmul.float(f1: float, f2: float) returns (float);
function $fdiv.float(f1: float, f2: float) returns (float);
function $frem.float(f1: float, f2: float) returns (float);
function $min.float(f1: float, f2: float) returns (float);
function $max.float(f1: float, f2: float) returns (float);
function $fma.float(f1: float, f2: float, f3: float) returns (float);
function $fneg.float(f: float) returns (float);
// Floating-point predicates
function $foeq.float.bool(f1: float, f2: float) returns (bool);
function $fole.float.bool(f1: float, f2: float) returns (bool);
function $folt.float.bool(f1: float, f2: float) returns (bool);
function $foge.float.bool(f1: float, f2: float) returns (bool);
function $fogt.float.bool(f1: float, f2: float) returns (bool);
function $fone.float.bool(f1: float, f2: float) returns (bool);
function $ford.float.bool(f1: float, f2: float) returns (bool);
function $fueq.float.bool(f1: float, f2: float) returns (bool);
function $fugt.float.bool(f1: float, f2: float) returns (bool);
function $fuge.float.bool(f1: float, f2: float) returns (bool);
function $fult.float.bool(f1: float, f2: float) returns (bool);
function $fule.float.bool(f1: float, f2: float) returns (bool);
function $fune.float.bool(f1: float, f2: float) returns (bool);
function $funo.float.bool(f1: float, f2: float) returns (bool);
function $ffalse.float.bool(f1: float, f2: float) returns (bool);
function $ftrue.float.bool(f1: float, f2: float) returns (bool);
// Floating-point/integer conversion
function $bitcast.float.i8(f: float) returns (i8);
function $bitcast.float.i16(f: float) returns (i16);
function $bitcast.float.i32(f: float) returns (i32);
function $bitcast.float.i64(f: float) returns (i64);
function $bitcast.float.i80(f: float) returns (i80);
function $bitcast.i8.float(i: i8) returns (float);
function $bitcast.i16.float(i: i16) returns (float);
function $bitcast.i32.float(i: i32) returns (float);
function $bitcast.i64.float(i: i64) returns (float);
function $bitcast.i80.float(i: i80) returns (float);
function $fp2si.float.i1(f: float) returns (i1);
function $fp2si.float.i5(f: float) returns (i5);
function $fp2si.float.i6(f: float) returns (i6);
function $fp2si.float.i8(f: float) returns (i8);
function $fp2si.float.i16(f: float) returns (i16);
function $fp2si.float.i24(f: float) returns (i24);
function $fp2si.float.i32(f: float) returns (i32);
function $fp2si.float.i33(f: float) returns (i33);
function $fp2si.float.i40(f: float) returns (i40);
function $fp2si.float.i48(f: float) returns (i48);
function $fp2si.float.i56(f: float) returns (i56);
function $fp2si.float.i64(f: float) returns (i64);
function $fp2si.float.i80(f: float) returns (i80);
function $fp2si.float.i88(f: float) returns (i88);
function $fp2si.float.i96(f: float) returns (i96);
function $fp2si.float.i128(f: float) returns (i128);
function $fp2si.float.i160(f: float) returns (i160);
function $fp2si.float.i256(f: float) returns (i256);
function $fp2ui.float.i1(f: float) returns (i1);
function $fp2ui.float.i5(f: float) returns (i5);
function $fp2ui.float.i6(f: float) returns (i6);
function $fp2ui.float.i8(f: float) returns (i8);
function $fp2ui.float.i16(f: float) returns (i16);
function $fp2ui.float.i24(f: float) returns (i24);
function $fp2ui.float.i32(f: float) returns (i32);
function $fp2ui.float.i33(f: float) returns (i33);
function $fp2ui.float.i40(f: float) returns (i40);
function $fp2ui.float.i48(f: float) returns (i48);
function $fp2ui.float.i56(f: float) returns (i56);
function $fp2ui.float.i64(f: float) returns (i64);
function $fp2ui.float.i80(f: float) returns (i80);
function $fp2ui.float.i88(f: float) returns (i88);
function $fp2ui.float.i96(f: float) returns (i96);
function $fp2ui.float.i128(f: float) returns (i128);
function $fp2ui.float.i160(f: float) returns (i160);
function $fp2ui.float.i256(f: float) returns (i256);
function $si2fp.i1.float(i: i1) returns (float);
function $si2fp.i5.float(i: i5) returns (float);
function $si2fp.i6.float(i: i6) returns (float);
function $si2fp.i8.float(i: i8) returns (float);
function $si2fp.i16.float(i: i16) returns (float);
function $si2fp.i24.float(i: i24) returns (float);
function $si2fp.i32.float(i: i32) returns (float);
function $si2fp.i33.float(i: i33) returns (float);
function $si2fp.i40.float(i: i40) returns (float);
function $si2fp.i48.float(i: i48) returns (float);
function $si2fp.i56.float(i: i56) returns (float);
function $si2fp.i64.float(i: i64) returns (float);
function $si2fp.i80.float(i: i80) returns (float);
function $si2fp.i88.float(i: i88) returns (float);
function $si2fp.i96.float(i: i96) returns (float);
function $si2fp.i128.float(i: i128) returns (float);
function $si2fp.i160.float(i: i160) returns (float);
function $si2fp.i256.float(i: i256) returns (float);
function $ui2fp.i1.float(i: i1) returns (float);
function $ui2fp.i5.float(i: i5) returns (float);
function $ui2fp.i6.float(i: i6) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $ui2fp.i33.float(i: i33) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $ui2fp.i80.float(i: i80) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $ui2fp.i160.float(i: i160) returns (float);
function $ui2fp.i256.float(i: i256) returns (float);
// Floating-point conversion
function $fpext.float.float(f: float) returns (float);
function $fptrunc.float.float(f: float) returns (float);
// Floating-point load/store operations
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, f: float) returns ([ref] float) { M[p := f] }
function {:inline} $load.unsafe.float(M: [ref] i8, p: ref) returns (float) { $bitcast.i8.float(M[p]) }
function {:inline} $store.unsafe.float(M: [ref] i8, p: ref, f: float) returns ([ref] i8) { M[p := $bitcast.float.i8(f)] }
function $extractvalue.float(p: ref, i: int) returns (float);
const Hacl_Curve25519_51_fsquare_times: ref;
axiom (Hacl_Curve25519_51_fsquare_times == $sub.ref(0, 1032));
procedure {:inline 1} Hacl_Curve25519_51_fsquare_times($p0: ref, $p1: ref, $p2: ref, $i3: i32)
{
  var $i4: i32;
  var $i5: i32;
  var $i6: i1;
  var $i7: i32;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 167, 3} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !61, metadata !DIExpression()), !dbg !62, !psr.id !63, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !65, metadata !DIExpression()), !dbg !62, !psr.id !66, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128* %2, metadata !67, metadata !DIExpression()), !dbg !62, !psr.id !68, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 %3, metadata !69, metadata !DIExpression()), !dbg !62, !psr.id !70, !verifier.code !64 */
  call {:cexpr "Hacl_Curve25519_51_fsquare_times:arg:n"} boogie_si_record_i32($i3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 167, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fsqr(i64* %0, i64* %1, i128* %2), !dbg !71, !psr.id !72, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fsqr($p0, $p1, $p2);
  /* call void @llvm.dbg.value(metadata i32 0, metadata !73, metadata !DIExpression()), !dbg !75, !psr.id !76, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 168, 8} true;
  assume {:verifier.code 0} true;
  /* br label %5, !dbg !77, !psr.id !78, !verifier.code !64 */
  $i4 := 0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.0 = phi i32 [ 0, %4 ], [ %10, %9 ], !dbg !75, !psr.id !79, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 %.0, metadata !73, metadata !DIExpression()), !dbg !75, !psr.id !80, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 168, 41} true;
  assume {:verifier.code 0} true;
  /* %6 = sub i32 %3, 1, !dbg !81, !psr.id !83, !verifier.code !64 */
  $i5 := $sub.i32($i3, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 168, 37} true;
  assume {:verifier.code 0} true;
  /* %7 = icmp ult i32 %.0, %6, !dbg !84, !psr.id !85, !verifier.code !64 */
  $i6 := $ult.i32($i4, $i5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 168, 3} true;
  assume {:verifier.code 0} true;
  /* br i1 %7, label %8, label %11, !dbg !86, !psr.id !87, !verifier.code !64 */
  assume {:branchcond $i6} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i6 == 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 170, 5} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fsqr(i64* %0, i64* %0, i128* %2), !dbg !88, !psr.id !90, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fsqr($p0, $p0, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 171, 3} true;
  assume {:verifier.code 0} true;
  /* br label %9, !dbg !91, !psr.id !92, !verifier.code !64 */
  goto $bb4;
$bb3:
  assume !(($i6 == 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 172, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !101, !psr.id !102, !verifier.code !64 */
  $exn := false;
  return;
$bb4:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 168, 58} true;
  assume {:verifier.code 0} true;
  /* %10 = add i32 %.0, 1, !dbg !93, !psr.id !94, !verifier.code !64 */
  $i7 := $add.i32($i4, 1);
  /* call void @llvm.dbg.value(metadata i32 %10, metadata !73, metadata !DIExpression()), !dbg !75, !psr.id !95, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i7);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 168, 3} true;
  assume {:verifier.code 0} true;
  /* br label %5, !dbg !96, !llvm.loop !97, !psr.id !100, !verifier.code !64 */
  $i4 := $i7;
  goto $bb1;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0, 2064));
procedure {:inline 1} llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const Hacl_Impl_Curve25519_Field51_fsqr: ref;
axiom (Hacl_Impl_Curve25519_Field51_fsqr == $sub.ref(0, 3096));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fsqr($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $p94: ref;
  var $i95: i64;
  var $p96: ref;
  var $i97: i64;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $i101: i64;
  var $i102: i64;
  var $i103: i64;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $i109: i64;
  var $i110: i128;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $i114: i64;
  var $p115: ref;
  var $i116: i64;
  var $i117: i128;
  var $p118: ref;
  var $p119: ref;
  var $i120: i64;
  var $p121: ref;
  var $i122: i64;
  var $p123: ref;
  var $p124: ref;
  var $i125: i64;
  var $p126: ref;
  var $i127: i64;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $i131: i64;
  var $p132: ref;
  var $i133: i64;
  var $i134: i128;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $p139: ref;
  var $i140: i64;
  var $i141: i128;
  var $p142: ref;
  var $p143: ref;
  var $i144: i64;
  var $p145: ref;
  var $i146: i64;
  var $p147: ref;
  var $p148: ref;
  var $i149: i64;
  var $p150: ref;
  var $i151: i64;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $i155: i64;
  var $p156: ref;
  var $i157: i64;
  var $i158: i128;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $p163: ref;
  var $i164: i64;
  var $i165: i128;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $i169: i64;
  var $p170: ref;
  var $i171: i64;
  var $i172: i128;
  var $p173: ref;
  var $p174: ref;
  var $i175: i64;
  var $p176: ref;
  var $i177: i64;
  var $p178: ref;
  var $p179: ref;
  var $i180: i64;
  var $p181: ref;
  var $i182: i64;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $i186: i64;
  var $p187: ref;
  var $i188: i64;
  var $i189: i128;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $i193: i64;
  var $p194: ref;
  var $i195: i64;
  var $i196: i128;
  var $p197: ref;
  var $p198: ref;
  var $i199: i64;
  var $p200: ref;
  var $i201: i64;
  var $p202: ref;
  var $p203: ref;
  var $i204: i64;
  var $p205: ref;
  var $i206: i64;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $i210: i64;
  var $p211: ref;
  var $i212: i64;
  var $i213: i128;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $i217: i64;
  var $p218: ref;
  var $i219: i64;
  var $i220: i128;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $i224: i64;
  var $p225: ref;
  var $i226: i64;
  var $i227: i128;
  var $p228: ref;
  var $p229: ref;
  var $i230: i64;
  var $p231: ref;
  var $i232: i64;
  var $p233: ref;
  var $p234: ref;
  var $i235: i64;
  var $p236: ref;
  var $i237: i64;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $i241: i64;
  var $p242: ref;
  var $i243: i64;
  var $i244: i128;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $i248: i64;
  var $p249: ref;
  var $i250: i64;
  var $i251: i128;
  var $p252: ref;
  var $p253: ref;
  var $i254: i64;
  var $p255: ref;
  var $i256: i64;
  var $p257: ref;
  var $p258: ref;
  var $i259: i64;
  var $p260: ref;
  var $i261: i64;
  var $p262: ref;
  var $p263: ref;
  var $p264: ref;
  var $i265: i64;
  var $p266: ref;
  var $i267: i64;
  var $i268: i128;
  var $p269: ref;
  var $p270: ref;
  var $p271: ref;
  var $i272: i64;
  var $p273: ref;
  var $i274: i64;
  var $i275: i128;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $i279: i64;
  var $p280: ref;
  var $i281: i64;
  var $i282: i128;
  var $p283: ref;
  var $p284: ref;
  var $i285: i64;
  var $p286: ref;
  var $i287: i64;
  var $p288: ref;
  var $p289: ref;
  var $i290: i64;
  var $p291: ref;
  var $i292: i64;
  var $p293: ref;
  var $p294: ref;
  var $p295: ref;
  var $i296: i64;
  var $p297: ref;
  var $i298: i64;
  var $i299: i128;
  var $p300: ref;
  var $p301: ref;
  var $p302: ref;
  var $i303: i64;
  var $p304: ref;
  var $i305: i64;
  var $i306: i128;
  var $p307: ref;
  var $p308: ref;
  var $i309: i64;
  var $p310: ref;
  var $i311: i64;
  var $p312: ref;
  var $p313: ref;
  var $i314: i64;
  var $p315: ref;
  var $i316: i64;
  var $p317: ref;
  var $p318: ref;
  var $p319: ref;
  var $i320: i64;
  var $p321: ref;
  var $i322: i64;
  var $i323: i128;
  var $p324: ref;
  var $p325: ref;
  var $p326: ref;
  var $i327: i64;
  var $p328: ref;
  var $i329: i64;
  var $i330: i128;
  var $p331: ref;
  var $p332: ref;
  var $p333: ref;
  var $i334: i64;
  var $p335: ref;
  var $i336: i64;
  var $i337: i128;
  var $p338: ref;
  var $p339: ref;
  var $i340: i64;
  var $p341: ref;
  var $i342: i64;
  var $p343: ref;
  var $p344: ref;
  var $i345: i64;
  var $p346: ref;
  var $i347: i64;
  var $p348: ref;
  var $p349: ref;
  var $p350: ref;
  var $i351: i64;
  var $p352: ref;
  var $i353: i64;
  var $i354: i128;
  var $p355: ref;
  var $p356: ref;
  var $p357: ref;
  var $i358: i64;
  var $p359: ref;
  var $i360: i64;
  var $i361: i128;
  var $p362: ref;
  var $p363: ref;
  var $i364: i64;
  var $p365: ref;
  var $i366: i64;
  var $p367: ref;
  var $p368: ref;
  var $i369: i64;
  var $p370: ref;
  var $i371: i64;
  var $p372: ref;
  var $p373: ref;
  var $p374: ref;
  var $i375: i64;
  var $p376: ref;
  var $i377: i64;
  var $i378: i128;
  var $p379: ref;
  var $p380: ref;
  var $p381: ref;
  var $i382: i64;
  var $p383: ref;
  var $i384: i64;
  var $i385: i128;
  var $p386: ref;
  var $p387: ref;
  var $i388: i64;
  var $p389: ref;
  var $i390: i64;
  var $p391: ref;
  var $p392: ref;
  var $i393: i64;
  var $p394: ref;
  var $i395: i64;
  var $p396: ref;
  var $p397: ref;
  var $p398: ref;
  var $i399: i64;
  var $p400: ref;
  var $i401: i64;
  var $i402: i128;
  var $p403: ref;
  var $p404: ref;
  var $i405: i64;
  var $p406: ref;
  var $i407: i64;
  var $i408: i64;
  var $i409: i64;
  var $p410: ref;
  var $p411: ref;
  var $i412: i64;
  var $p413: ref;
  var $i414: i64;
  var $p415: ref;
  var $p416: ref;
  var $p417: ref;
  var $i418: i64;
  var $p419: ref;
  var $i420: i64;
  var $i421: i128;
  var $p422: ref;
  var $p423: ref;
  var $i424: i64;
  var $p425: ref;
  var $i426: i64;
  var $i427: i64;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $i431: i64;
  var $p432: ref;
  var $i433: i64;
  var $i434: i128;
  var $p435: ref;
  var $p436: ref;
  var $i437: i64;
  var $p438: ref;
  var $i439: i64;
  var $p440: ref;
  var $p441: ref;
  var $i442: i64;
  var $p443: ref;
  var $i444: i64;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $i448: i64;
  var $p449: ref;
  var $i450: i64;
  var $i451: i128;
  var $p452: ref;
  var $p453: ref;
  var $i454: i64;
  var $p455: ref;
  var $i456: i64;
  var $i457: i64;
  var $i458: i64;
  var $p459: ref;
  var $p460: ref;
  var $i461: i64;
  var $p462: ref;
  var $i463: i64;
  var $p464: ref;
  var $p465: ref;
  var $p466: ref;
  var $i467: i64;
  var $p468: ref;
  var $i469: i64;
  var $i470: i128;
  var $p471: ref;
  var $p472: ref;
  var $i473: i64;
  var $p474: ref;
  var $i475: i64;
  var $i476: i64;
  var $p477: ref;
  var $p478: ref;
  var $p479: ref;
  var $i480: i64;
  var $p481: ref;
  var $i482: i64;
  var $i483: i128;
  var $p484: ref;
  var $p485: ref;
  var $i486: i64;
  var $p487: ref;
  var $i488: i64;
  var $p489: ref;
  var $p490: ref;
  var $i491: i64;
  var $p492: ref;
  var $i493: i64;
  var $p494: ref;
  var $p495: ref;
  var $p496: ref;
  var $i497: i64;
  var $p498: ref;
  var $i499: i64;
  var $i500: i128;
  var $p501: ref;
  var $p502: ref;
  var $i503: i64;
  var $p504: ref;
  var $i505: i64;
  var $i506: i64;
  var $i507: i64;
  var $p508: ref;
  var $p509: ref;
  var $i510: i64;
  var $p511: ref;
  var $i512: i64;
  var $p513: ref;
  var $p514: ref;
  var $p515: ref;
  var $i516: i64;
  var $p517: ref;
  var $i518: i64;
  var $i519: i128;
  var $p520: ref;
  var $p521: ref;
  var $i522: i64;
  var $p523: ref;
  var $i524: i64;
  var $i525: i64;
  var $p526: ref;
  var $p527: ref;
  var $p528: ref;
  var $i529: i64;
  var $p530: ref;
  var $i531: i64;
  var $i532: i128;
  var $p533: ref;
  var $p534: ref;
  var $i535: i64;
  var $p536: ref;
  var $i537: i64;
  var $p538: ref;
  var $p539: ref;
  var $i540: i64;
  var $p541: ref;
  var $i542: i64;
  var $p543: ref;
  var $p544: ref;
  var $p545: ref;
  var $i546: i64;
  var $p547: ref;
  var $i548: i64;
  var $i549: i128;
  var $p550: ref;
  var $p551: ref;
  var $i552: i64;
  var $p553: ref;
  var $i554: i64;
  var $i555: i64;
  var $i556: i64;
  var $p557: ref;
  var $p558: ref;
  var $i559: i64;
  var $p560: ref;
  var $i561: i64;
  var $p562: ref;
  var $p563: ref;
  var $p564: ref;
  var $i565: i64;
  var $p566: ref;
  var $i567: i64;
  var $i568: i128;
  var $p569: ref;
  var $p570: ref;
  var $i571: i64;
  var $p572: ref;
  var $i573: i64;
  var $i574: i64;
  var $p575: ref;
  var $p576: ref;
  var $p577: ref;
  var $i578: i64;
  var $p579: ref;
  var $i580: i64;
  var $i581: i128;
  var $p582: ref;
  var $p583: ref;
  var $i584: i64;
  var $p585: ref;
  var $i586: i64;
  var $p587: ref;
  var $p588: ref;
  var $i589: i64;
  var $p590: ref;
  var $i591: i64;
  var $p592: ref;
  var $p593: ref;
  var $p594: ref;
  var $i595: i64;
  var $p596: ref;
  var $i597: i64;
  var $i598: i128;
  var $p599: ref;
  var $p600: ref;
  var $i601: i64;
  var $p602: ref;
  var $i603: i64;
  var $i604: i64;
  var $i605: i64;
  var $p606: ref;
  var $p607: ref;
  var $i608: i64;
  var $p609: ref;
  var $i610: i64;
  var $p611: ref;
  var $p612: ref;
  var $p613: ref;
  var $i614: i64;
  var $p615: ref;
  var $i616: i64;
  var $i617: i128;
  var $p618: ref;
  var $p619: ref;
  var $i620: i64;
  var $p621: ref;
  var $i622: i64;
  var $i623: i64;
  var $i624: i64;
  var $i625: i64;
  var $i626: i64;
  var $i627: i64;
  var $i628: i64;
  var $p629: ref;
  var $p630: ref;
  var $p631: ref;
  var $p632: ref;
  var $p633: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 374, 17} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %4 = alloca i128, align 16, !psr.id !62, !verifier.code !63 */
  call $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %5 = alloca i128, align 16, !psr.id !64, !verifier.code !63 */
  call $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %6 = alloca i128, align 16, !psr.id !65, !verifier.code !63 */
  call $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %7 = alloca i128, align 16, !psr.id !66, !verifier.code !63 */
  call $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %8 = alloca i128, align 16, !psr.id !67, !verifier.code !63 */
  call $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %9 = alloca i128, align 16, !psr.id !68, !verifier.code !63 */
  call $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %10 = alloca i128, align 16, !psr.id !69, !verifier.code !63 */
  call $p9 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %11 = alloca i128, align 16, !psr.id !70, !verifier.code !63 */
  call $p10 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %12 = alloca i128, align 16, !psr.id !71, !verifier.code !63 */
  call $p11 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %13 = alloca i128, align 16, !psr.id !72, !verifier.code !63 */
  call $p12 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %14 = alloca i128, align 16, !psr.id !73, !verifier.code !63 */
  call $p13 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %15 = alloca i128, align 16, !psr.id !74, !verifier.code !63 */
  call $p14 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %16 = alloca i128, align 16, !psr.id !75, !verifier.code !63 */
  call $p15 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %17 = alloca i128, align 16, !psr.id !76, !verifier.code !63 */
  call $p16 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %18 = alloca i128, align 16, !psr.id !77, !verifier.code !63 */
  call $p17 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %19 = alloca i128, align 16, !psr.id !78, !verifier.code !63 */
  call $p18 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %20 = alloca i128, align 16, !psr.id !79, !verifier.code !63 */
  call $p19 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %21 = alloca i128, align 16, !psr.id !80, !verifier.code !63 */
  call $p20 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %22 = alloca i128, align 16, !psr.id !81, !verifier.code !63 */
  call $p21 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %23 = alloca i128, align 16, !psr.id !82, !verifier.code !63 */
  call $p22 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %24 = alloca i128, align 16, !psr.id !83, !verifier.code !63 */
  call $p23 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %25 = alloca i128, align 16, !psr.id !84, !verifier.code !63 */
  call $p24 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %26 = alloca i128, align 16, !psr.id !85, !verifier.code !63 */
  call $p25 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %27 = alloca i128, align 16, !psr.id !86, !verifier.code !63 */
  call $p26 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %28 = alloca i128, align 16, !psr.id !87, !verifier.code !63 */
  call $p27 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %29 = alloca i128, align 16, !psr.id !88, !verifier.code !63 */
  call $p28 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %30 = alloca i128, align 16, !psr.id !89, !verifier.code !63 */
  call $p29 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %31 = alloca i128, align 16, !psr.id !90, !verifier.code !63 */
  call $p30 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %32 = alloca i128, align 16, !psr.id !91, !verifier.code !63 */
  call $p31 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %33 = alloca i128, align 16, !psr.id !92, !verifier.code !63 */
  call $p32 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %34 = alloca i128, align 16, !psr.id !93, !verifier.code !63 */
  call $p33 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %35 = alloca i128, align 16, !psr.id !94, !verifier.code !63 */
  call $p34 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %36 = alloca i128, align 16, !psr.id !95, !verifier.code !63 */
  call $p35 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %37 = alloca i128, align 16, !psr.id !96, !verifier.code !63 */
  call $p36 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %38 = alloca i128, align 16, !psr.id !97, !verifier.code !63 */
  call $p37 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %39 = alloca i128, align 16, !psr.id !98, !verifier.code !63 */
  call $p38 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %40 = alloca i128, align 16, !psr.id !99, !verifier.code !63 */
  call $p39 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %41 = alloca i128, align 16, !psr.id !100, !verifier.code !63 */
  call $p40 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %42 = alloca i128, align 16, !psr.id !101, !verifier.code !63 */
  call $p41 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %43 = alloca i128, align 16, !psr.id !102, !verifier.code !63 */
  call $p42 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %44 = alloca i128, align 16, !psr.id !103, !verifier.code !63 */
  call $p43 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %45 = alloca i128, align 16, !psr.id !104, !verifier.code !63 */
  call $p44 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %46 = alloca i128, align 16, !psr.id !105, !verifier.code !63 */
  call $p45 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %47 = alloca i128, align 16, !psr.id !106, !verifier.code !63 */
  call $p46 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %48 = alloca i128, align 16, !psr.id !107, !verifier.code !63 */
  call $p47 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %49 = alloca i128, align 16, !psr.id !108, !verifier.code !63 */
  call $p48 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %50 = alloca i128, align 16, !psr.id !109, !verifier.code !63 */
  call $p49 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %51 = alloca i128, align 16, !psr.id !110, !verifier.code !63 */
  call $p50 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %52 = alloca i128, align 16, !psr.id !111, !verifier.code !63 */
  call $p51 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %53 = alloca i128, align 16, !psr.id !112, !verifier.code !63 */
  call $p52 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %54 = alloca i128, align 16, !psr.id !113, !verifier.code !63 */
  call $p53 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %55 = alloca i128, align 16, !psr.id !114, !verifier.code !63 */
  call $p54 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %56 = alloca i128, align 16, !psr.id !115, !verifier.code !63 */
  call $p55 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %57 = alloca i128, align 16, !psr.id !116, !verifier.code !63 */
  call $p56 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %58 = alloca i128, align 16, !psr.id !117, !verifier.code !63 */
  call $p57 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %59 = alloca i128, align 16, !psr.id !118, !verifier.code !63 */
  call $p58 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %60 = alloca i128, align 16, !psr.id !119, !verifier.code !63 */
  call $p59 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %61 = alloca i128, align 16, !psr.id !120, !verifier.code !63 */
  call $p60 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %62 = alloca i128, align 16, !psr.id !121, !verifier.code !63 */
  call $p61 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %63 = alloca i128, align 16, !psr.id !122, !verifier.code !63 */
  call $p62 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %64 = alloca i128, align 16, !psr.id !123, !verifier.code !63 */
  call $p63 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %65 = alloca i128, align 16, !psr.id !124, !verifier.code !63 */
  call $p64 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %66 = alloca i128, align 16, !psr.id !125, !verifier.code !63 */
  call $p65 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %67 = alloca i128, align 16, !psr.id !126, !verifier.code !63 */
  call $p66 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %68 = alloca i128, align 16, !psr.id !127, !verifier.code !63 */
  call $p67 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %69 = alloca i128, align 16, !psr.id !128, !verifier.code !63 */
  call $p68 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %70 = alloca i128, align 16, !psr.id !129, !verifier.code !63 */
  call $p69 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %71 = alloca i128, align 16, !psr.id !130, !verifier.code !63 */
  call $p70 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %72 = alloca i128, align 16, !psr.id !131, !verifier.code !63 */
  call $p71 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %73 = alloca i128, align 16, !psr.id !132, !verifier.code !63 */
  call $p72 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %74 = alloca i128, align 16, !psr.id !133, !verifier.code !63 */
  call $p73 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %75 = alloca i128, align 16, !psr.id !134, !verifier.code !63 */
  call $p74 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %76 = alloca i128, align 16, !psr.id !135, !verifier.code !63 */
  call $p75 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %77 = alloca i128, align 16, !psr.id !136, !verifier.code !63 */
  call $p76 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %78 = alloca i128, align 16, !psr.id !137, !verifier.code !63 */
  call $p77 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %79 = alloca i128, align 16, !psr.id !138, !verifier.code !63 */
  call $p78 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %80 = alloca i128, align 16, !psr.id !139, !verifier.code !63 */
  call $p79 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %81 = alloca i128, align 16, !psr.id !140, !verifier.code !63 */
  call $p80 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %82 = alloca i128, align 16, !psr.id !141, !verifier.code !63 */
  call $p81 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %83 = alloca i128, align 16, !psr.id !142, !verifier.code !63 */
  call $p82 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %84 = alloca i128, align 16, !psr.id !143, !verifier.code !63 */
  call $p83 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %85 = alloca i128, align 16, !psr.id !144, !verifier.code !63 */
  call $p84 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %86 = alloca i128, align 16, !psr.id !145, !verifier.code !63 */
  call $p85 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %87 = alloca i128, align 16, !psr.id !146, !verifier.code !63 */
  call $p86 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %88 = alloca i128, align 16, !psr.id !147, !verifier.code !63 */
  call $p87 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !192, metadata !DIExpression()), !dbg !193, !psr.id !194, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !195, metadata !DIExpression()), !dbg !193, !psr.id !196, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128* %2, metadata !197, metadata !DIExpression()), !dbg !193, !psr.id !198, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 374, 17} true;
  assume {:verifier.code 0} true;
  /* %89 = getelementptr inbounds i64, i64* %1, i64 0, !dbg !155, !psr.id !156, !verifier.code !63 */
  $p88 := $add.ref($p1, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 374, 17} true;
  assume {:verifier.code 0} true;
  /* %90 = load i64, i64* %89, align 8, !dbg !155, !psr.id !157, !verifier.code !63 */
  $i89 := $load.i64($M.0, $p88);
  /* call void @llvm.dbg.value(metadata i64 %90, metadata !202, metadata !DIExpression()), !dbg !193, !psr.id !203, !verifier.code !64 */
  call {:cexpr "f0"} boogie_si_record_i64($i89);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 375, 17} true;
  assume {:verifier.code 0} true;
  /* %91 = getelementptr inbounds i64, i64* %1, i64 1, !dbg !160, !psr.id !161, !verifier.code !63 */
  $p90 := $add.ref($p1, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 375, 17} true;
  assume {:verifier.code 0} true;
  /* %92 = load i64, i64* %91, align 8, !dbg !160, !psr.id !162, !verifier.code !63 */
  $i91 := $load.i64($M.0, $p90);
  /* call void @llvm.dbg.value(metadata i64 %92, metadata !207, metadata !DIExpression()), !dbg !193, !psr.id !208, !verifier.code !64 */
  call {:cexpr "f1"} boogie_si_record_i64($i91);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 376, 17} true;
  assume {:verifier.code 0} true;
  /* %93 = getelementptr inbounds i64, i64* %1, i64 2, !dbg !165, !psr.id !166, !verifier.code !63 */
  $p92 := $add.ref($p1, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 376, 17} true;
  assume {:verifier.code 0} true;
  /* %94 = load i64, i64* %93, align 8, !dbg !165, !psr.id !167, !verifier.code !63 */
  $i93 := $load.i64($M.0, $p92);
  /* call void @llvm.dbg.value(metadata i64 %94, metadata !212, metadata !DIExpression()), !dbg !193, !psr.id !213, !verifier.code !64 */
  call {:cexpr "f2"} boogie_si_record_i64($i93);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 377, 17} true;
  assume {:verifier.code 0} true;
  /* %95 = getelementptr inbounds i64, i64* %1, i64 3, !dbg !170, !psr.id !171, !verifier.code !63 */
  $p94 := $add.ref($p1, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 377, 17} true;
  assume {:verifier.code 0} true;
  /* %96 = load i64, i64* %95, align 8, !dbg !170, !psr.id !172, !verifier.code !63 */
  $i95 := $load.i64($M.0, $p94);
  /* call void @llvm.dbg.value(metadata i64 %96, metadata !217, metadata !DIExpression()), !dbg !193, !psr.id !218, !verifier.code !64 */
  call {:cexpr "f3"} boogie_si_record_i64($i95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 378, 17} true;
  assume {:verifier.code 0} true;
  /* %97 = getelementptr inbounds i64, i64* %1, i64 4, !dbg !175, !psr.id !176, !verifier.code !63 */
  $p96 := $add.ref($p1, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 378, 17} true;
  assume {:verifier.code 0} true;
  /* %98 = load i64, i64* %97, align 8, !dbg !175, !psr.id !177, !verifier.code !63 */
  $i97 := $load.i64($M.0, $p96);
  /* call void @llvm.dbg.value(metadata i64 %98, metadata !222, metadata !DIExpression()), !dbg !193, !psr.id !223, !verifier.code !64 */
  call {:cexpr "f4"} boogie_si_record_i64($i97);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 379, 30} true;
  assume {:verifier.code 0} true;
  /* %99 = mul i64 2, %90, !dbg !180, !psr.id !181, !verifier.code !63 */
  $i98 := $mul.i64(2, $i89);
  /* call void @llvm.dbg.value(metadata i64 %99, metadata !226, metadata !DIExpression()), !dbg !193, !psr.id !227, !verifier.code !64 */
  call {:cexpr "d0"} boogie_si_record_i64($i98);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 380, 30} true;
  assume {:verifier.code 0} true;
  /* %100 = mul i64 2, %92, !dbg !184, !psr.id !185, !verifier.code !63 */
  $i99 := $mul.i64(2, $i91);
  /* call void @llvm.dbg.value(metadata i64 %100, metadata !230, metadata !DIExpression()), !dbg !193, !psr.id !231, !verifier.code !64 */
  call {:cexpr "d1"} boogie_si_record_i64($i99);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 381, 31} true;
  assume {:verifier.code 0} true;
  /* %101 = mul i64 38, %94, !dbg !188, !psr.id !189, !verifier.code !63 */
  $i100 := $mul.i64(38, $i93);
  /* call void @llvm.dbg.value(metadata i64 %101, metadata !234, metadata !DIExpression()), !dbg !193, !psr.id !235, !verifier.code !64 */
  call {:cexpr "d2"} boogie_si_record_i64($i100);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 382, 31} true;
  assume {:verifier.code 0} true;
  /* %102 = mul i64 19, %96, !dbg !192, !psr.id !193, !verifier.code !63 */
  $i101 := $mul.i64(19, $i95);
  /* call void @llvm.dbg.value(metadata i64 %102, metadata !238, metadata !DIExpression()), !dbg !193, !psr.id !239, !verifier.code !64 */
  call {:cexpr "d3"} boogie_si_record_i64($i101);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 383, 33} true;
  assume {:verifier.code 0} true;
  /* %103 = mul i64 19, %98, !dbg !196, !psr.id !197, !verifier.code !63 */
  $i102 := $mul.i64(19, $i97);
  /* call void @llvm.dbg.value(metadata i64 %103, metadata !242, metadata !DIExpression()), !dbg !193, !psr.id !243, !verifier.code !64 */
  call {:cexpr "d419"} boogie_si_record_i64($i102);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 384, 30} true;
  assume {:verifier.code 0} true;
  /* %104 = mul i64 2, %103, !dbg !200, !psr.id !201, !verifier.code !63 */
  $i103 := $mul.i64(2, $i102);
  /* call void @llvm.dbg.value(metadata i64 %104, metadata !246, metadata !DIExpression()), !dbg !193, !psr.id !247, !verifier.code !64 */
  call {:cexpr "d4"} boogie_si_record_i64($i103);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  /* %105 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %90, i64 %90), !dbg !204, !psr.id !205, !verifier.code !63 */
  call $p104 := FStar_UInt128_mul_wide($i89, $i89);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  /* %106 = bitcast i128* %4 to { i64, i64 }*, !dbg !204, !psr.id !206, !verifier.code !63 */
  $p105 := $bitcast.ref.ref($p3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  /* %107 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %106, i32 0, i32 0, !dbg !204, !psr.id !207, !verifier.code !63 */
  $p106 := $add.ref($add.ref($p105, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  /* %108 = extractvalue { i64, i64 } %105, 0, !dbg !204, !psr.id !208, !verifier.code !63 */
  $i107 := $extractvalue.i64($p104, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %108, i64* %107, align 16, !dbg !204, !psr.id !209, !verifier.code !63 */
  $M.1 := $store.i64($M.1, $p106, $i107);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  /* %109 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %106, i32 0, i32 1, !dbg !204, !psr.id !210, !verifier.code !63 */
  $p108 := $add.ref($add.ref($p105, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  /* %110 = extractvalue { i64, i64 } %105, 1, !dbg !204, !psr.id !211, !verifier.code !63 */
  $i109 := $extractvalue.i64($p104, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %110, i64* %109, align 8, !dbg !204, !psr.id !212, !verifier.code !63 */
  $M.1 := $store.i64($M.1, $p108, $i109);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  /* %111 = load i128, i128* %4, align 16, !dbg !204, !psr.id !213, !verifier.code !63 */
  $i110 := $load.i128($M.1, $p3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  /* %112 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %104, i64 %92), !dbg !214, !psr.id !215, !verifier.code !63 */
  call $p111 := FStar_UInt128_mul_wide($i103, $i91);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  /* %113 = bitcast i128* %5 to { i64, i64 }*, !dbg !214, !psr.id !216, !verifier.code !63 */
  $p112 := $bitcast.ref.ref($p4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  /* %114 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %113, i32 0, i32 0, !dbg !214, !psr.id !217, !verifier.code !63 */
  $p113 := $add.ref($add.ref($p112, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  /* %115 = extractvalue { i64, i64 } %112, 0, !dbg !214, !psr.id !218, !verifier.code !63 */
  $i114 := $extractvalue.i64($p111, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %115, i64* %114, align 16, !dbg !214, !psr.id !219, !verifier.code !63 */
  $M.2 := $store.i64($M.2, $p113, $i114);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  /* %116 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %113, i32 0, i32 1, !dbg !214, !psr.id !220, !verifier.code !63 */
  $p115 := $add.ref($add.ref($p112, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  /* %117 = extractvalue { i64, i64 } %112, 1, !dbg !214, !psr.id !221, !verifier.code !63 */
  $i116 := $extractvalue.i64($p111, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %117, i64* %116, align 8, !dbg !214, !psr.id !222, !verifier.code !63 */
  $M.2 := $store.i64($M.2, $p115, $i116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  /* %118 = load i128, i128* %5, align 16, !dbg !214, !psr.id !223, !verifier.code !63 */
  $i117 := $load.i128($M.2, $p4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %111, i128* %6, align 16, !dbg !224, !psr.id !225, !verifier.code !63 */
  $M.3 := $store.i128($M.3, $p5, $i110);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %119 = bitcast i128* %6 to { i64, i64 }*, !dbg !224, !psr.id !226, !verifier.code !63 */
  $p118 := $bitcast.ref.ref($p5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %120 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %119, i32 0, i32 0, !dbg !224, !psr.id !227, !verifier.code !63 */
  $p119 := $add.ref($add.ref($p118, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %121 = load i64, i64* %120, align 16, !dbg !224, !psr.id !228, !verifier.code !63 */
  $i120 := $load.i64($M.3, $p119);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %122 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %119, i32 0, i32 1, !dbg !224, !psr.id !229, !verifier.code !63 */
  $p121 := $add.ref($add.ref($p118, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %123 = load i64, i64* %122, align 8, !dbg !224, !psr.id !230, !verifier.code !63 */
  $i122 := $load.i64($M.3, $p121);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %118, i128* %7, align 16, !dbg !224, !psr.id !231, !verifier.code !63 */
  $M.4 := $store.i128($M.4, $p6, $i117);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %124 = bitcast i128* %7 to { i64, i64 }*, !dbg !224, !psr.id !232, !verifier.code !63 */
  $p123 := $bitcast.ref.ref($p6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %125 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %124, i32 0, i32 0, !dbg !224, !psr.id !233, !verifier.code !63 */
  $p124 := $add.ref($add.ref($p123, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %126 = load i64, i64* %125, align 16, !dbg !224, !psr.id !234, !verifier.code !63 */
  $i125 := $load.i64($M.4, $p124);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %127 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %124, i32 0, i32 1, !dbg !224, !psr.id !235, !verifier.code !63 */
  $p126 := $add.ref($add.ref($p123, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %128 = load i64, i64* %127, align 8, !dbg !224, !psr.id !236, !verifier.code !63 */
  $i127 := $load.i64($M.4, $p126);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %129 = call { i64, i64 } @FStar_UInt128_add(i64 %121, i64 %123, i64 %126, i64 %128), !dbg !224, !psr.id !237, !verifier.code !63 */
  call $p128 := FStar_UInt128_add($i120, $i122, $i125, $i127);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %130 = bitcast i128* %8 to { i64, i64 }*, !dbg !224, !psr.id !238, !verifier.code !63 */
  $p129 := $bitcast.ref.ref($p7);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %131 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %130, i32 0, i32 0, !dbg !224, !psr.id !239, !verifier.code !63 */
  $p130 := $add.ref($add.ref($p129, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %132 = extractvalue { i64, i64 } %129, 0, !dbg !224, !psr.id !240, !verifier.code !63 */
  $i131 := $extractvalue.i64($p128, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %132, i64* %131, align 16, !dbg !224, !psr.id !241, !verifier.code !63 */
  $M.5 := $store.i64($M.5, $p130, $i131);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %133 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %130, i32 0, i32 1, !dbg !224, !psr.id !242, !verifier.code !63 */
  $p132 := $add.ref($add.ref($p129, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %134 = extractvalue { i64, i64 } %129, 1, !dbg !224, !psr.id !243, !verifier.code !63 */
  $i133 := $extractvalue.i64($p128, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %134, i64* %133, align 8, !dbg !224, !psr.id !244, !verifier.code !63 */
  $M.5 := $store.i64($M.5, $p132, $i133);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  /* %135 = load i128, i128* %8, align 16, !dbg !224, !psr.id !245, !verifier.code !63 */
  $i134 := $load.i128($M.5, $p7);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  /* %136 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %101, i64 %96), !dbg !246, !psr.id !247, !verifier.code !63 */
  call $p135 := FStar_UInt128_mul_wide($i100, $i95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  /* %137 = bitcast i128* %9 to { i64, i64 }*, !dbg !246, !psr.id !248, !verifier.code !63 */
  $p136 := $bitcast.ref.ref($p8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  /* %138 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %137, i32 0, i32 0, !dbg !246, !psr.id !249, !verifier.code !63 */
  $p137 := $add.ref($add.ref($p136, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  /* %139 = extractvalue { i64, i64 } %136, 0, !dbg !246, !psr.id !250, !verifier.code !63 */
  $i138 := $extractvalue.i64($p135, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %139, i64* %138, align 16, !dbg !246, !psr.id !251, !verifier.code !63 */
  $M.6 := $store.i64($M.6, $p137, $i138);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  /* %140 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %137, i32 0, i32 1, !dbg !246, !psr.id !252, !verifier.code !63 */
  $p139 := $add.ref($add.ref($p136, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  /* %141 = extractvalue { i64, i64 } %136, 1, !dbg !246, !psr.id !253, !verifier.code !63 */
  $i140 := $extractvalue.i64($p135, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %141, i64* %140, align 8, !dbg !246, !psr.id !254, !verifier.code !63 */
  $M.6 := $store.i64($M.6, $p139, $i140);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  /* %142 = load i128, i128* %9, align 16, !dbg !246, !psr.id !255, !verifier.code !63 */
  $i141 := $load.i128($M.6, $p8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %135, i128* %10, align 16, !dbg !256, !psr.id !257, !verifier.code !63 */
  $M.7 := $store.i128($M.7, $p9, $i134);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %143 = bitcast i128* %10 to { i64, i64 }*, !dbg !256, !psr.id !258, !verifier.code !63 */
  $p142 := $bitcast.ref.ref($p9);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %144 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %143, i32 0, i32 0, !dbg !256, !psr.id !259, !verifier.code !63 */
  $p143 := $add.ref($add.ref($p142, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %145 = load i64, i64* %144, align 16, !dbg !256, !psr.id !260, !verifier.code !63 */
  $i144 := $load.i64($M.7, $p143);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %146 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %143, i32 0, i32 1, !dbg !256, !psr.id !261, !verifier.code !63 */
  $p145 := $add.ref($add.ref($p142, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %147 = load i64, i64* %146, align 8, !dbg !256, !psr.id !262, !verifier.code !63 */
  $i146 := $load.i64($M.7, $p145);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %142, i128* %11, align 16, !dbg !256, !psr.id !263, !verifier.code !63 */
  $M.8 := $store.i128($M.8, $p10, $i141);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %148 = bitcast i128* %11 to { i64, i64 }*, !dbg !256, !psr.id !264, !verifier.code !63 */
  $p147 := $bitcast.ref.ref($p10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %149 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %148, i32 0, i32 0, !dbg !256, !psr.id !265, !verifier.code !63 */
  $p148 := $add.ref($add.ref($p147, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %150 = load i64, i64* %149, align 16, !dbg !256, !psr.id !266, !verifier.code !63 */
  $i149 := $load.i64($M.8, $p148);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %151 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %148, i32 0, i32 1, !dbg !256, !psr.id !267, !verifier.code !63 */
  $p150 := $add.ref($add.ref($p147, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %152 = load i64, i64* %151, align 8, !dbg !256, !psr.id !268, !verifier.code !63 */
  $i151 := $load.i64($M.8, $p150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %153 = call { i64, i64 } @FStar_UInt128_add(i64 %145, i64 %147, i64 %150, i64 %152), !dbg !256, !psr.id !269, !verifier.code !63 */
  call $p152 := FStar_UInt128_add($i144, $i146, $i149, $i151);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %154 = bitcast i128* %12 to { i64, i64 }*, !dbg !256, !psr.id !270, !verifier.code !63 */
  $p153 := $bitcast.ref.ref($p11);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %155 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %154, i32 0, i32 0, !dbg !256, !psr.id !271, !verifier.code !63 */
  $p154 := $add.ref($add.ref($p153, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %156 = extractvalue { i64, i64 } %153, 0, !dbg !256, !psr.id !272, !verifier.code !63 */
  $i155 := $extractvalue.i64($p152, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %156, i64* %155, align 16, !dbg !256, !psr.id !273, !verifier.code !63 */
  $M.9 := $store.i64($M.9, $p154, $i155);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %154, i32 0, i32 1, !dbg !256, !psr.id !274, !verifier.code !63 */
  $p156 := $add.ref($add.ref($p153, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %158 = extractvalue { i64, i64 } %153, 1, !dbg !256, !psr.id !275, !verifier.code !63 */
  $i157 := $extractvalue.i64($p152, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %158, i64* %157, align 8, !dbg !256, !psr.id !276, !verifier.code !63 */
  $M.9 := $store.i64($M.9, $p156, $i157);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  /* %159 = load i128, i128* %12, align 16, !dbg !256, !psr.id !277, !verifier.code !63 */
  $i158 := $load.i128($M.9, $p11);
  /* call void @llvm.dbg.value(metadata i128 %159, metadata !322, metadata !DIExpression()), !dbg !193, !psr.id !323, !verifier.code !64 */
  call {:cexpr "s0"} boogie_si_record_i128($i158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  /* %160 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %99, i64 %92), !dbg !280, !psr.id !281, !verifier.code !63 */
  call $p159 := FStar_UInt128_mul_wide($i98, $i91);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  /* %161 = bitcast i128* %13 to { i64, i64 }*, !dbg !280, !psr.id !282, !verifier.code !63 */
  $p160 := $bitcast.ref.ref($p12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  /* %162 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %161, i32 0, i32 0, !dbg !280, !psr.id !283, !verifier.code !63 */
  $p161 := $add.ref($add.ref($p160, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  /* %163 = extractvalue { i64, i64 } %160, 0, !dbg !280, !psr.id !284, !verifier.code !63 */
  $i162 := $extractvalue.i64($p159, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %163, i64* %162, align 16, !dbg !280, !psr.id !285, !verifier.code !63 */
  $M.10 := $store.i64($M.10, $p161, $i162);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  /* %164 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %161, i32 0, i32 1, !dbg !280, !psr.id !286, !verifier.code !63 */
  $p163 := $add.ref($add.ref($p160, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  /* %165 = extractvalue { i64, i64 } %160, 1, !dbg !280, !psr.id !287, !verifier.code !63 */
  $i164 := $extractvalue.i64($p159, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %165, i64* %164, align 8, !dbg !280, !psr.id !288, !verifier.code !63 */
  $M.10 := $store.i64($M.10, $p163, $i164);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  /* %166 = load i128, i128* %13, align 16, !dbg !280, !psr.id !289, !verifier.code !63 */
  $i165 := $load.i128($M.10, $p12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  /* %167 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %104, i64 %94), !dbg !290, !psr.id !291, !verifier.code !63 */
  call $p166 := FStar_UInt128_mul_wide($i103, $i93);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  /* %168 = bitcast i128* %14 to { i64, i64 }*, !dbg !290, !psr.id !292, !verifier.code !63 */
  $p167 := $bitcast.ref.ref($p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  /* %169 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %168, i32 0, i32 0, !dbg !290, !psr.id !293, !verifier.code !63 */
  $p168 := $add.ref($add.ref($p167, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  /* %170 = extractvalue { i64, i64 } %167, 0, !dbg !290, !psr.id !294, !verifier.code !63 */
  $i169 := $extractvalue.i64($p166, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %170, i64* %169, align 16, !dbg !290, !psr.id !295, !verifier.code !63 */
  $M.11 := $store.i64($M.11, $p168, $i169);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  /* %171 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %168, i32 0, i32 1, !dbg !290, !psr.id !296, !verifier.code !63 */
  $p170 := $add.ref($add.ref($p167, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  /* %172 = extractvalue { i64, i64 } %167, 1, !dbg !290, !psr.id !297, !verifier.code !63 */
  $i171 := $extractvalue.i64($p166, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %172, i64* %171, align 8, !dbg !290, !psr.id !298, !verifier.code !63 */
  $M.11 := $store.i64($M.11, $p170, $i171);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  /* %173 = load i128, i128* %14, align 16, !dbg !290, !psr.id !299, !verifier.code !63 */
  $i172 := $load.i128($M.11, $p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %166, i128* %15, align 16, !dbg !300, !psr.id !301, !verifier.code !63 */
  $M.12 := $store.i128($M.12, $p14, $i165);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %174 = bitcast i128* %15 to { i64, i64 }*, !dbg !300, !psr.id !302, !verifier.code !63 */
  $p173 := $bitcast.ref.ref($p14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %175 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %174, i32 0, i32 0, !dbg !300, !psr.id !303, !verifier.code !63 */
  $p174 := $add.ref($add.ref($p173, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %176 = load i64, i64* %175, align 16, !dbg !300, !psr.id !304, !verifier.code !63 */
  $i175 := $load.i64($M.12, $p174);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %177 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %174, i32 0, i32 1, !dbg !300, !psr.id !305, !verifier.code !63 */
  $p176 := $add.ref($add.ref($p173, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %178 = load i64, i64* %177, align 8, !dbg !300, !psr.id !306, !verifier.code !63 */
  $i177 := $load.i64($M.12, $p176);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %173, i128* %16, align 16, !dbg !300, !psr.id !307, !verifier.code !63 */
  $M.13 := $store.i128($M.13, $p15, $i172);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %179 = bitcast i128* %16 to { i64, i64 }*, !dbg !300, !psr.id !308, !verifier.code !63 */
  $p178 := $bitcast.ref.ref($p15);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %180 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %179, i32 0, i32 0, !dbg !300, !psr.id !309, !verifier.code !63 */
  $p179 := $add.ref($add.ref($p178, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %181 = load i64, i64* %180, align 16, !dbg !300, !psr.id !310, !verifier.code !63 */
  $i180 := $load.i64($M.13, $p179);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %182 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %179, i32 0, i32 1, !dbg !300, !psr.id !311, !verifier.code !63 */
  $p181 := $add.ref($add.ref($p178, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %183 = load i64, i64* %182, align 8, !dbg !300, !psr.id !312, !verifier.code !63 */
  $i182 := $load.i64($M.13, $p181);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %184 = call { i64, i64 } @FStar_UInt128_add(i64 %176, i64 %178, i64 %181, i64 %183), !dbg !300, !psr.id !313, !verifier.code !63 */
  call $p183 := FStar_UInt128_add($i175, $i177, $i180, $i182);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %185 = bitcast i128* %17 to { i64, i64 }*, !dbg !300, !psr.id !314, !verifier.code !63 */
  $p184 := $bitcast.ref.ref($p16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %186 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %185, i32 0, i32 0, !dbg !300, !psr.id !315, !verifier.code !63 */
  $p185 := $add.ref($add.ref($p184, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %187 = extractvalue { i64, i64 } %184, 0, !dbg !300, !psr.id !316, !verifier.code !63 */
  $i186 := $extractvalue.i64($p183, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %187, i64* %186, align 16, !dbg !300, !psr.id !317, !verifier.code !63 */
  $M.14 := $store.i64($M.14, $p185, $i186);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %188 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %185, i32 0, i32 1, !dbg !300, !psr.id !318, !verifier.code !63 */
  $p187 := $add.ref($add.ref($p184, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %189 = extractvalue { i64, i64 } %184, 1, !dbg !300, !psr.id !319, !verifier.code !63 */
  $i188 := $extractvalue.i64($p183, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %189, i64* %188, align 8, !dbg !300, !psr.id !320, !verifier.code !63 */
  $M.14 := $store.i64($M.14, $p187, $i188);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  /* %190 = load i128, i128* %17, align 16, !dbg !300, !psr.id !321, !verifier.code !63 */
  $i189 := $load.i128($M.14, $p16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  /* %191 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %102, i64 %96), !dbg !322, !psr.id !323, !verifier.code !63 */
  call $p190 := FStar_UInt128_mul_wide($i101, $i95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  /* %192 = bitcast i128* %18 to { i64, i64 }*, !dbg !322, !psr.id !324, !verifier.code !63 */
  $p191 := $bitcast.ref.ref($p17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  /* %193 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %192, i32 0, i32 0, !dbg !322, !psr.id !325, !verifier.code !63 */
  $p192 := $add.ref($add.ref($p191, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  /* %194 = extractvalue { i64, i64 } %191, 0, !dbg !322, !psr.id !326, !verifier.code !63 */
  $i193 := $extractvalue.i64($p190, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %194, i64* %193, align 16, !dbg !322, !psr.id !327, !verifier.code !63 */
  $M.15 := $store.i64($M.15, $p192, $i193);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  /* %195 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %192, i32 0, i32 1, !dbg !322, !psr.id !328, !verifier.code !63 */
  $p194 := $add.ref($add.ref($p191, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  /* %196 = extractvalue { i64, i64 } %191, 1, !dbg !322, !psr.id !329, !verifier.code !63 */
  $i195 := $extractvalue.i64($p190, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %196, i64* %195, align 8, !dbg !322, !psr.id !330, !verifier.code !63 */
  $M.15 := $store.i64($M.15, $p194, $i195);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  /* %197 = load i128, i128* %18, align 16, !dbg !322, !psr.id !331, !verifier.code !63 */
  $i196 := $load.i128($M.15, $p17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %190, i128* %19, align 16, !dbg !332, !psr.id !333, !verifier.code !63 */
  $M.16 := $store.i128($M.16, $p18, $i189);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %198 = bitcast i128* %19 to { i64, i64 }*, !dbg !332, !psr.id !334, !verifier.code !63 */
  $p197 := $bitcast.ref.ref($p18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %199 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %198, i32 0, i32 0, !dbg !332, !psr.id !335, !verifier.code !63 */
  $p198 := $add.ref($add.ref($p197, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %200 = load i64, i64* %199, align 16, !dbg !332, !psr.id !336, !verifier.code !63 */
  $i199 := $load.i64($M.16, $p198);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %201 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %198, i32 0, i32 1, !dbg !332, !psr.id !337, !verifier.code !63 */
  $p200 := $add.ref($add.ref($p197, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %202 = load i64, i64* %201, align 8, !dbg !332, !psr.id !338, !verifier.code !63 */
  $i201 := $load.i64($M.16, $p200);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %197, i128* %20, align 16, !dbg !332, !psr.id !339, !verifier.code !63 */
  $M.17 := $store.i128($M.17, $p19, $i196);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %203 = bitcast i128* %20 to { i64, i64 }*, !dbg !332, !psr.id !340, !verifier.code !63 */
  $p202 := $bitcast.ref.ref($p19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %204 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %203, i32 0, i32 0, !dbg !332, !psr.id !341, !verifier.code !63 */
  $p203 := $add.ref($add.ref($p202, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %205 = load i64, i64* %204, align 16, !dbg !332, !psr.id !342, !verifier.code !63 */
  $i204 := $load.i64($M.17, $p203);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %206 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %203, i32 0, i32 1, !dbg !332, !psr.id !343, !verifier.code !63 */
  $p205 := $add.ref($add.ref($p202, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %207 = load i64, i64* %206, align 8, !dbg !332, !psr.id !344, !verifier.code !63 */
  $i206 := $load.i64($M.17, $p205);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %208 = call { i64, i64 } @FStar_UInt128_add(i64 %200, i64 %202, i64 %205, i64 %207), !dbg !332, !psr.id !345, !verifier.code !63 */
  call $p207 := FStar_UInt128_add($i199, $i201, $i204, $i206);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %209 = bitcast i128* %21 to { i64, i64 }*, !dbg !332, !psr.id !346, !verifier.code !63 */
  $p208 := $bitcast.ref.ref($p20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %210 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %209, i32 0, i32 0, !dbg !332, !psr.id !347, !verifier.code !63 */
  $p209 := $add.ref($add.ref($p208, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %211 = extractvalue { i64, i64 } %208, 0, !dbg !332, !psr.id !348, !verifier.code !63 */
  $i210 := $extractvalue.i64($p207, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %211, i64* %210, align 16, !dbg !332, !psr.id !349, !verifier.code !63 */
  $M.18 := $store.i64($M.18, $p209, $i210);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %212 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %209, i32 0, i32 1, !dbg !332, !psr.id !350, !verifier.code !63 */
  $p211 := $add.ref($add.ref($p208, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %213 = extractvalue { i64, i64 } %208, 1, !dbg !332, !psr.id !351, !verifier.code !63 */
  $i212 := $extractvalue.i64($p207, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %213, i64* %212, align 8, !dbg !332, !psr.id !352, !verifier.code !63 */
  $M.18 := $store.i64($M.18, $p211, $i212);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  /* %214 = load i128, i128* %21, align 16, !dbg !332, !psr.id !353, !verifier.code !63 */
  $i213 := $load.i128($M.18, $p20);
  /* call void @llvm.dbg.value(metadata i128 %214, metadata !398, metadata !DIExpression()), !dbg !193, !psr.id !399, !verifier.code !64 */
  call {:cexpr "s1"} boogie_si_record_i128($i213);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  /* %215 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %99, i64 %94), !dbg !356, !psr.id !357, !verifier.code !63 */
  call $p214 := FStar_UInt128_mul_wide($i98, $i93);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  /* %216 = bitcast i128* %22 to { i64, i64 }*, !dbg !356, !psr.id !358, !verifier.code !63 */
  $p215 := $bitcast.ref.ref($p21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  /* %217 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %216, i32 0, i32 0, !dbg !356, !psr.id !359, !verifier.code !63 */
  $p216 := $add.ref($add.ref($p215, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  /* %218 = extractvalue { i64, i64 } %215, 0, !dbg !356, !psr.id !360, !verifier.code !63 */
  $i217 := $extractvalue.i64($p214, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %218, i64* %217, align 16, !dbg !356, !psr.id !361, !verifier.code !63 */
  $M.19 := $store.i64($M.19, $p216, $i217);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  /* %219 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %216, i32 0, i32 1, !dbg !356, !psr.id !362, !verifier.code !63 */
  $p218 := $add.ref($add.ref($p215, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  /* %220 = extractvalue { i64, i64 } %215, 1, !dbg !356, !psr.id !363, !verifier.code !63 */
  $i219 := $extractvalue.i64($p214, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %220, i64* %219, align 8, !dbg !356, !psr.id !364, !verifier.code !63 */
  $M.19 := $store.i64($M.19, $p218, $i219);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  /* %221 = load i128, i128* %22, align 16, !dbg !356, !psr.id !365, !verifier.code !63 */
  $i220 := $load.i128($M.19, $p21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  /* %222 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %92, i64 %92), !dbg !366, !psr.id !367, !verifier.code !63 */
  call $p221 := FStar_UInt128_mul_wide($i91, $i91);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  /* %223 = bitcast i128* %23 to { i64, i64 }*, !dbg !366, !psr.id !368, !verifier.code !63 */
  $p222 := $bitcast.ref.ref($p22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  /* %224 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %223, i32 0, i32 0, !dbg !366, !psr.id !369, !verifier.code !63 */
  $p223 := $add.ref($add.ref($p222, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  /* %225 = extractvalue { i64, i64 } %222, 0, !dbg !366, !psr.id !370, !verifier.code !63 */
  $i224 := $extractvalue.i64($p221, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %225, i64* %224, align 16, !dbg !366, !psr.id !371, !verifier.code !63 */
  $M.20 := $store.i64($M.20, $p223, $i224);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  /* %226 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %223, i32 0, i32 1, !dbg !366, !psr.id !372, !verifier.code !63 */
  $p225 := $add.ref($add.ref($p222, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  /* %227 = extractvalue { i64, i64 } %222, 1, !dbg !366, !psr.id !373, !verifier.code !63 */
  $i226 := $extractvalue.i64($p221, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %227, i64* %226, align 8, !dbg !366, !psr.id !374, !verifier.code !63 */
  $M.20 := $store.i64($M.20, $p225, $i226);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  /* %228 = load i128, i128* %23, align 16, !dbg !366, !psr.id !375, !verifier.code !63 */
  $i227 := $load.i128($M.20, $p22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %221, i128* %24, align 16, !dbg !376, !psr.id !377, !verifier.code !63 */
  $M.21 := $store.i128($M.21, $p23, $i220);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %229 = bitcast i128* %24 to { i64, i64 }*, !dbg !376, !psr.id !378, !verifier.code !63 */
  $p228 := $bitcast.ref.ref($p23);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %230 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %229, i32 0, i32 0, !dbg !376, !psr.id !379, !verifier.code !63 */
  $p229 := $add.ref($add.ref($p228, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %231 = load i64, i64* %230, align 16, !dbg !376, !psr.id !380, !verifier.code !63 */
  $i230 := $load.i64($M.21, $p229);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %232 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %229, i32 0, i32 1, !dbg !376, !psr.id !381, !verifier.code !63 */
  $p231 := $add.ref($add.ref($p228, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %233 = load i64, i64* %232, align 8, !dbg !376, !psr.id !382, !verifier.code !63 */
  $i232 := $load.i64($M.21, $p231);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %228, i128* %25, align 16, !dbg !376, !psr.id !383, !verifier.code !63 */
  $M.22 := $store.i128($M.22, $p24, $i227);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %234 = bitcast i128* %25 to { i64, i64 }*, !dbg !376, !psr.id !384, !verifier.code !63 */
  $p233 := $bitcast.ref.ref($p24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %235 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %234, i32 0, i32 0, !dbg !376, !psr.id !385, !verifier.code !63 */
  $p234 := $add.ref($add.ref($p233, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %236 = load i64, i64* %235, align 16, !dbg !376, !psr.id !386, !verifier.code !63 */
  $i235 := $load.i64($M.22, $p234);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %237 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %234, i32 0, i32 1, !dbg !376, !psr.id !387, !verifier.code !63 */
  $p236 := $add.ref($add.ref($p233, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %238 = load i64, i64* %237, align 8, !dbg !376, !psr.id !388, !verifier.code !63 */
  $i237 := $load.i64($M.22, $p236);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %239 = call { i64, i64 } @FStar_UInt128_add(i64 %231, i64 %233, i64 %236, i64 %238), !dbg !376, !psr.id !389, !verifier.code !63 */
  call $p238 := FStar_UInt128_add($i230, $i232, $i235, $i237);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %240 = bitcast i128* %26 to { i64, i64 }*, !dbg !376, !psr.id !390, !verifier.code !63 */
  $p239 := $bitcast.ref.ref($p25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %241 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %240, i32 0, i32 0, !dbg !376, !psr.id !391, !verifier.code !63 */
  $p240 := $add.ref($add.ref($p239, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %242 = extractvalue { i64, i64 } %239, 0, !dbg !376, !psr.id !392, !verifier.code !63 */
  $i241 := $extractvalue.i64($p238, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %242, i64* %241, align 16, !dbg !376, !psr.id !393, !verifier.code !63 */
  $M.23 := $store.i64($M.23, $p240, $i241);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %243 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %240, i32 0, i32 1, !dbg !376, !psr.id !394, !verifier.code !63 */
  $p242 := $add.ref($add.ref($p239, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %244 = extractvalue { i64, i64 } %239, 1, !dbg !376, !psr.id !395, !verifier.code !63 */
  $i243 := $extractvalue.i64($p238, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %244, i64* %243, align 8, !dbg !376, !psr.id !396, !verifier.code !63 */
  $M.23 := $store.i64($M.23, $p242, $i243);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  /* %245 = load i128, i128* %26, align 16, !dbg !376, !psr.id !397, !verifier.code !63 */
  $i244 := $load.i128($M.23, $p25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  /* %246 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %104, i64 %96), !dbg !398, !psr.id !399, !verifier.code !63 */
  call $p245 := FStar_UInt128_mul_wide($i103, $i95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  /* %247 = bitcast i128* %27 to { i64, i64 }*, !dbg !398, !psr.id !400, !verifier.code !63 */
  $p246 := $bitcast.ref.ref($p26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  /* %248 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %247, i32 0, i32 0, !dbg !398, !psr.id !401, !verifier.code !63 */
  $p247 := $add.ref($add.ref($p246, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  /* %249 = extractvalue { i64, i64 } %246, 0, !dbg !398, !psr.id !402, !verifier.code !63 */
  $i248 := $extractvalue.i64($p245, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %249, i64* %248, align 16, !dbg !398, !psr.id !403, !verifier.code !63 */
  $M.24 := $store.i64($M.24, $p247, $i248);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  /* %250 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %247, i32 0, i32 1, !dbg !398, !psr.id !404, !verifier.code !63 */
  $p249 := $add.ref($add.ref($p246, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  /* %251 = extractvalue { i64, i64 } %246, 1, !dbg !398, !psr.id !405, !verifier.code !63 */
  $i250 := $extractvalue.i64($p245, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %251, i64* %250, align 8, !dbg !398, !psr.id !406, !verifier.code !63 */
  $M.24 := $store.i64($M.24, $p249, $i250);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  /* %252 = load i128, i128* %27, align 16, !dbg !398, !psr.id !407, !verifier.code !63 */
  $i251 := $load.i128($M.24, $p26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %245, i128* %28, align 16, !dbg !408, !psr.id !409, !verifier.code !63 */
  $M.25 := $store.i128($M.25, $p27, $i244);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %253 = bitcast i128* %28 to { i64, i64 }*, !dbg !408, !psr.id !410, !verifier.code !63 */
  $p252 := $bitcast.ref.ref($p27);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %254 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %253, i32 0, i32 0, !dbg !408, !psr.id !411, !verifier.code !63 */
  $p253 := $add.ref($add.ref($p252, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %255 = load i64, i64* %254, align 16, !dbg !408, !psr.id !412, !verifier.code !63 */
  $i254 := $load.i64($M.25, $p253);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %256 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %253, i32 0, i32 1, !dbg !408, !psr.id !413, !verifier.code !63 */
  $p255 := $add.ref($add.ref($p252, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %257 = load i64, i64* %256, align 8, !dbg !408, !psr.id !414, !verifier.code !63 */
  $i256 := $load.i64($M.25, $p255);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %252, i128* %29, align 16, !dbg !408, !psr.id !415, !verifier.code !63 */
  $M.26 := $store.i128($M.26, $p28, $i251);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %258 = bitcast i128* %29 to { i64, i64 }*, !dbg !408, !psr.id !416, !verifier.code !63 */
  $p257 := $bitcast.ref.ref($p28);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %259 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %258, i32 0, i32 0, !dbg !408, !psr.id !417, !verifier.code !63 */
  $p258 := $add.ref($add.ref($p257, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %260 = load i64, i64* %259, align 16, !dbg !408, !psr.id !418, !verifier.code !63 */
  $i259 := $load.i64($M.26, $p258);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %261 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %258, i32 0, i32 1, !dbg !408, !psr.id !419, !verifier.code !63 */
  $p260 := $add.ref($add.ref($p257, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %262 = load i64, i64* %261, align 8, !dbg !408, !psr.id !420, !verifier.code !63 */
  $i261 := $load.i64($M.26, $p260);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %263 = call { i64, i64 } @FStar_UInt128_add(i64 %255, i64 %257, i64 %260, i64 %262), !dbg !408, !psr.id !421, !verifier.code !63 */
  call $p262 := FStar_UInt128_add($i254, $i256, $i259, $i261);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %264 = bitcast i128* %30 to { i64, i64 }*, !dbg !408, !psr.id !422, !verifier.code !63 */
  $p263 := $bitcast.ref.ref($p29);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %265 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %264, i32 0, i32 0, !dbg !408, !psr.id !423, !verifier.code !63 */
  $p264 := $add.ref($add.ref($p263, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %266 = extractvalue { i64, i64 } %263, 0, !dbg !408, !psr.id !424, !verifier.code !63 */
  $i265 := $extractvalue.i64($p262, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %266, i64* %265, align 16, !dbg !408, !psr.id !425, !verifier.code !63 */
  $M.27 := $store.i64($M.27, $p264, $i265);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %267 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %264, i32 0, i32 1, !dbg !408, !psr.id !426, !verifier.code !63 */
  $p266 := $add.ref($add.ref($p263, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %268 = extractvalue { i64, i64 } %263, 1, !dbg !408, !psr.id !427, !verifier.code !63 */
  $i267 := $extractvalue.i64($p262, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %268, i64* %267, align 8, !dbg !408, !psr.id !428, !verifier.code !63 */
  $M.27 := $store.i64($M.27, $p266, $i267);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %269 = load i128, i128* %30, align 16, !dbg !408, !psr.id !429, !verifier.code !63 */
  $i268 := $load.i128($M.27, $p29);
  /* call void @llvm.dbg.value(metadata i128 %269, metadata !474, metadata !DIExpression()), !dbg !193, !psr.id !475, !verifier.code !64 */
  call {:cexpr "s2"} boogie_si_record_i128($i268);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  /* %270 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %99, i64 %96), !dbg !432, !psr.id !433, !verifier.code !63 */
  call $p269 := FStar_UInt128_mul_wide($i98, $i95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  /* %271 = bitcast i128* %31 to { i64, i64 }*, !dbg !432, !psr.id !434, !verifier.code !63 */
  $p270 := $bitcast.ref.ref($p30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  /* %272 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %271, i32 0, i32 0, !dbg !432, !psr.id !435, !verifier.code !63 */
  $p271 := $add.ref($add.ref($p270, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  /* %273 = extractvalue { i64, i64 } %270, 0, !dbg !432, !psr.id !436, !verifier.code !63 */
  $i272 := $extractvalue.i64($p269, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %273, i64* %272, align 16, !dbg !432, !psr.id !437, !verifier.code !63 */
  $M.28 := $store.i64($M.28, $p271, $i272);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  /* %274 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %271, i32 0, i32 1, !dbg !432, !psr.id !438, !verifier.code !63 */
  $p273 := $add.ref($add.ref($p270, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  /* %275 = extractvalue { i64, i64 } %270, 1, !dbg !432, !psr.id !439, !verifier.code !63 */
  $i274 := $extractvalue.i64($p269, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %275, i64* %274, align 8, !dbg !432, !psr.id !440, !verifier.code !63 */
  $M.28 := $store.i64($M.28, $p273, $i274);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  /* %276 = load i128, i128* %31, align 16, !dbg !432, !psr.id !441, !verifier.code !63 */
  $i275 := $load.i128($M.28, $p30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  /* %277 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %100, i64 %94), !dbg !442, !psr.id !443, !verifier.code !63 */
  call $p276 := FStar_UInt128_mul_wide($i99, $i93);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  /* %278 = bitcast i128* %32 to { i64, i64 }*, !dbg !442, !psr.id !444, !verifier.code !63 */
  $p277 := $bitcast.ref.ref($p31);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  /* %279 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %278, i32 0, i32 0, !dbg !442, !psr.id !445, !verifier.code !63 */
  $p278 := $add.ref($add.ref($p277, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  /* %280 = extractvalue { i64, i64 } %277, 0, !dbg !442, !psr.id !446, !verifier.code !63 */
  $i279 := $extractvalue.i64($p276, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %280, i64* %279, align 16, !dbg !442, !psr.id !447, !verifier.code !63 */
  $M.29 := $store.i64($M.29, $p278, $i279);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  /* %281 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %278, i32 0, i32 1, !dbg !442, !psr.id !448, !verifier.code !63 */
  $p280 := $add.ref($add.ref($p277, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  /* %282 = extractvalue { i64, i64 } %277, 1, !dbg !442, !psr.id !449, !verifier.code !63 */
  $i281 := $extractvalue.i64($p276, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %282, i64* %281, align 8, !dbg !442, !psr.id !450, !verifier.code !63 */
  $M.29 := $store.i64($M.29, $p280, $i281);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  /* %283 = load i128, i128* %32, align 16, !dbg !442, !psr.id !451, !verifier.code !63 */
  $i282 := $load.i128($M.29, $p31);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %276, i128* %33, align 16, !dbg !452, !psr.id !453, !verifier.code !63 */
  $M.30 := $store.i128($M.30, $p32, $i275);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %284 = bitcast i128* %33 to { i64, i64 }*, !dbg !452, !psr.id !454, !verifier.code !63 */
  $p283 := $bitcast.ref.ref($p32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %285 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %284, i32 0, i32 0, !dbg !452, !psr.id !455, !verifier.code !63 */
  $p284 := $add.ref($add.ref($p283, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %286 = load i64, i64* %285, align 16, !dbg !452, !psr.id !456, !verifier.code !63 */
  $i285 := $load.i64($M.30, $p284);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %287 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %284, i32 0, i32 1, !dbg !452, !psr.id !457, !verifier.code !63 */
  $p286 := $add.ref($add.ref($p283, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %288 = load i64, i64* %287, align 8, !dbg !452, !psr.id !458, !verifier.code !63 */
  $i287 := $load.i64($M.30, $p286);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %283, i128* %34, align 16, !dbg !452, !psr.id !459, !verifier.code !63 */
  $M.31 := $store.i128($M.31, $p33, $i282);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %289 = bitcast i128* %34 to { i64, i64 }*, !dbg !452, !psr.id !460, !verifier.code !63 */
  $p288 := $bitcast.ref.ref($p33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %290 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %289, i32 0, i32 0, !dbg !452, !psr.id !461, !verifier.code !63 */
  $p289 := $add.ref($add.ref($p288, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %291 = load i64, i64* %290, align 16, !dbg !452, !psr.id !462, !verifier.code !63 */
  $i290 := $load.i64($M.31, $p289);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %292 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %289, i32 0, i32 1, !dbg !452, !psr.id !463, !verifier.code !63 */
  $p291 := $add.ref($add.ref($p288, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %293 = load i64, i64* %292, align 8, !dbg !452, !psr.id !464, !verifier.code !63 */
  $i292 := $load.i64($M.31, $p291);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %294 = call { i64, i64 } @FStar_UInt128_add(i64 %286, i64 %288, i64 %291, i64 %293), !dbg !452, !psr.id !465, !verifier.code !63 */
  call $p293 := FStar_UInt128_add($i285, $i287, $i290, $i292);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %295 = bitcast i128* %35 to { i64, i64 }*, !dbg !452, !psr.id !466, !verifier.code !63 */
  $p294 := $bitcast.ref.ref($p34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %296 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %295, i32 0, i32 0, !dbg !452, !psr.id !467, !verifier.code !63 */
  $p295 := $add.ref($add.ref($p294, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %297 = extractvalue { i64, i64 } %294, 0, !dbg !452, !psr.id !468, !verifier.code !63 */
  $i296 := $extractvalue.i64($p293, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %297, i64* %296, align 16, !dbg !452, !psr.id !469, !verifier.code !63 */
  $M.32 := $store.i64($M.32, $p295, $i296);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %298 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %295, i32 0, i32 1, !dbg !452, !psr.id !470, !verifier.code !63 */
  $p297 := $add.ref($add.ref($p294, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %299 = extractvalue { i64, i64 } %294, 1, !dbg !452, !psr.id !471, !verifier.code !63 */
  $i298 := $extractvalue.i64($p293, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %299, i64* %298, align 8, !dbg !452, !psr.id !472, !verifier.code !63 */
  $M.32 := $store.i64($M.32, $p297, $i298);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  /* %300 = load i128, i128* %35, align 16, !dbg !452, !psr.id !473, !verifier.code !63 */
  $i299 := $load.i128($M.32, $p34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  /* %301 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %98, i64 %103), !dbg !474, !psr.id !475, !verifier.code !63 */
  call $p300 := FStar_UInt128_mul_wide($i97, $i102);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  /* %302 = bitcast i128* %36 to { i64, i64 }*, !dbg !474, !psr.id !476, !verifier.code !63 */
  $p301 := $bitcast.ref.ref($p35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  /* %303 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %302, i32 0, i32 0, !dbg !474, !psr.id !477, !verifier.code !63 */
  $p302 := $add.ref($add.ref($p301, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  /* %304 = extractvalue { i64, i64 } %301, 0, !dbg !474, !psr.id !478, !verifier.code !63 */
  $i303 := $extractvalue.i64($p300, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %304, i64* %303, align 16, !dbg !474, !psr.id !479, !verifier.code !63 */
  $M.33 := $store.i64($M.33, $p302, $i303);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  /* %305 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %302, i32 0, i32 1, !dbg !474, !psr.id !480, !verifier.code !63 */
  $p304 := $add.ref($add.ref($p301, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  /* %306 = extractvalue { i64, i64 } %301, 1, !dbg !474, !psr.id !481, !verifier.code !63 */
  $i305 := $extractvalue.i64($p300, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %306, i64* %305, align 8, !dbg !474, !psr.id !482, !verifier.code !63 */
  $M.33 := $store.i64($M.33, $p304, $i305);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  /* %307 = load i128, i128* %36, align 16, !dbg !474, !psr.id !483, !verifier.code !63 */
  $i306 := $load.i128($M.33, $p35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %300, i128* %37, align 16, !dbg !484, !psr.id !485, !verifier.code !63 */
  $M.34 := $store.i128($M.34, $p36, $i299);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %308 = bitcast i128* %37 to { i64, i64 }*, !dbg !484, !psr.id !486, !verifier.code !63 */
  $p307 := $bitcast.ref.ref($p36);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %309 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %308, i32 0, i32 0, !dbg !484, !psr.id !487, !verifier.code !63 */
  $p308 := $add.ref($add.ref($p307, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %310 = load i64, i64* %309, align 16, !dbg !484, !psr.id !488, !verifier.code !63 */
  $i309 := $load.i64($M.34, $p308);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %311 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %308, i32 0, i32 1, !dbg !484, !psr.id !489, !verifier.code !63 */
  $p310 := $add.ref($add.ref($p307, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %312 = load i64, i64* %311, align 8, !dbg !484, !psr.id !490, !verifier.code !63 */
  $i311 := $load.i64($M.34, $p310);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %307, i128* %38, align 16, !dbg !484, !psr.id !491, !verifier.code !63 */
  $M.35 := $store.i128($M.35, $p37, $i306);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %313 = bitcast i128* %38 to { i64, i64 }*, !dbg !484, !psr.id !492, !verifier.code !63 */
  $p312 := $bitcast.ref.ref($p37);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %314 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %313, i32 0, i32 0, !dbg !484, !psr.id !493, !verifier.code !63 */
  $p313 := $add.ref($add.ref($p312, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %315 = load i64, i64* %314, align 16, !dbg !484, !psr.id !494, !verifier.code !63 */
  $i314 := $load.i64($M.35, $p313);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %316 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %313, i32 0, i32 1, !dbg !484, !psr.id !495, !verifier.code !63 */
  $p315 := $add.ref($add.ref($p312, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %317 = load i64, i64* %316, align 8, !dbg !484, !psr.id !496, !verifier.code !63 */
  $i316 := $load.i64($M.35, $p315);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %318 = call { i64, i64 } @FStar_UInt128_add(i64 %310, i64 %312, i64 %315, i64 %317), !dbg !484, !psr.id !497, !verifier.code !63 */
  call $p317 := FStar_UInt128_add($i309, $i311, $i314, $i316);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %319 = bitcast i128* %39 to { i64, i64 }*, !dbg !484, !psr.id !498, !verifier.code !63 */
  $p318 := $bitcast.ref.ref($p38);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %320 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %319, i32 0, i32 0, !dbg !484, !psr.id !499, !verifier.code !63 */
  $p319 := $add.ref($add.ref($p318, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %321 = extractvalue { i64, i64 } %318, 0, !dbg !484, !psr.id !500, !verifier.code !63 */
  $i320 := $extractvalue.i64($p317, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %321, i64* %320, align 16, !dbg !484, !psr.id !501, !verifier.code !63 */
  $M.36 := $store.i64($M.36, $p319, $i320);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %322 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %319, i32 0, i32 1, !dbg !484, !psr.id !502, !verifier.code !63 */
  $p321 := $add.ref($add.ref($p318, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %323 = extractvalue { i64, i64 } %318, 1, !dbg !484, !psr.id !503, !verifier.code !63 */
  $i322 := $extractvalue.i64($p317, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %323, i64* %322, align 8, !dbg !484, !psr.id !504, !verifier.code !63 */
  $M.36 := $store.i64($M.36, $p321, $i322);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  /* %324 = load i128, i128* %39, align 16, !dbg !484, !psr.id !505, !verifier.code !63 */
  $i323 := $load.i128($M.36, $p38);
  /* call void @llvm.dbg.value(metadata i128 %324, metadata !550, metadata !DIExpression()), !dbg !193, !psr.id !551, !verifier.code !64 */
  call {:cexpr "s3"} boogie_si_record_i128($i323);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  /* %325 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %99, i64 %98), !dbg !508, !psr.id !509, !verifier.code !63 */
  call $p324 := FStar_UInt128_mul_wide($i98, $i97);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  /* %326 = bitcast i128* %40 to { i64, i64 }*, !dbg !508, !psr.id !510, !verifier.code !63 */
  $p325 := $bitcast.ref.ref($p39);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  /* %327 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %326, i32 0, i32 0, !dbg !508, !psr.id !511, !verifier.code !63 */
  $p326 := $add.ref($add.ref($p325, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  /* %328 = extractvalue { i64, i64 } %325, 0, !dbg !508, !psr.id !512, !verifier.code !63 */
  $i327 := $extractvalue.i64($p324, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %328, i64* %327, align 16, !dbg !508, !psr.id !513, !verifier.code !63 */
  $M.37 := $store.i64($M.37, $p326, $i327);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  /* %329 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %326, i32 0, i32 1, !dbg !508, !psr.id !514, !verifier.code !63 */
  $p328 := $add.ref($add.ref($p325, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  /* %330 = extractvalue { i64, i64 } %325, 1, !dbg !508, !psr.id !515, !verifier.code !63 */
  $i329 := $extractvalue.i64($p324, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %330, i64* %329, align 8, !dbg !508, !psr.id !516, !verifier.code !63 */
  $M.37 := $store.i64($M.37, $p328, $i329);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  /* %331 = load i128, i128* %40, align 16, !dbg !508, !psr.id !517, !verifier.code !63 */
  $i330 := $load.i128($M.37, $p39);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  /* %332 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %100, i64 %96), !dbg !518, !psr.id !519, !verifier.code !63 */
  call $p331 := FStar_UInt128_mul_wide($i99, $i95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  /* %333 = bitcast i128* %41 to { i64, i64 }*, !dbg !518, !psr.id !520, !verifier.code !63 */
  $p332 := $bitcast.ref.ref($p40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  /* %334 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %333, i32 0, i32 0, !dbg !518, !psr.id !521, !verifier.code !63 */
  $p333 := $add.ref($add.ref($p332, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  /* %335 = extractvalue { i64, i64 } %332, 0, !dbg !518, !psr.id !522, !verifier.code !63 */
  $i334 := $extractvalue.i64($p331, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %335, i64* %334, align 16, !dbg !518, !psr.id !523, !verifier.code !63 */
  $M.38 := $store.i64($M.38, $p333, $i334);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  /* %336 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %333, i32 0, i32 1, !dbg !518, !psr.id !524, !verifier.code !63 */
  $p335 := $add.ref($add.ref($p332, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  /* %337 = extractvalue { i64, i64 } %332, 1, !dbg !518, !psr.id !525, !verifier.code !63 */
  $i336 := $extractvalue.i64($p331, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %337, i64* %336, align 8, !dbg !518, !psr.id !526, !verifier.code !63 */
  $M.38 := $store.i64($M.38, $p335, $i336);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  /* %338 = load i128, i128* %41, align 16, !dbg !518, !psr.id !527, !verifier.code !63 */
  $i337 := $load.i128($M.38, $p40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %331, i128* %42, align 16, !dbg !528, !psr.id !529, !verifier.code !63 */
  $M.39 := $store.i128($M.39, $p41, $i330);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %339 = bitcast i128* %42 to { i64, i64 }*, !dbg !528, !psr.id !530, !verifier.code !63 */
  $p338 := $bitcast.ref.ref($p41);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %340 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %339, i32 0, i32 0, !dbg !528, !psr.id !531, !verifier.code !63 */
  $p339 := $add.ref($add.ref($p338, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %341 = load i64, i64* %340, align 16, !dbg !528, !psr.id !532, !verifier.code !63 */
  $i340 := $load.i64($M.39, $p339);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %342 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %339, i32 0, i32 1, !dbg !528, !psr.id !533, !verifier.code !63 */
  $p341 := $add.ref($add.ref($p338, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %343 = load i64, i64* %342, align 8, !dbg !528, !psr.id !534, !verifier.code !63 */
  $i342 := $load.i64($M.39, $p341);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %338, i128* %43, align 16, !dbg !528, !psr.id !535, !verifier.code !63 */
  $M.40 := $store.i128($M.40, $p42, $i337);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %344 = bitcast i128* %43 to { i64, i64 }*, !dbg !528, !psr.id !536, !verifier.code !63 */
  $p343 := $bitcast.ref.ref($p42);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %345 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %344, i32 0, i32 0, !dbg !528, !psr.id !537, !verifier.code !63 */
  $p344 := $add.ref($add.ref($p343, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %346 = load i64, i64* %345, align 16, !dbg !528, !psr.id !538, !verifier.code !63 */
  $i345 := $load.i64($M.40, $p344);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %347 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %344, i32 0, i32 1, !dbg !528, !psr.id !539, !verifier.code !63 */
  $p346 := $add.ref($add.ref($p343, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %348 = load i64, i64* %347, align 8, !dbg !528, !psr.id !540, !verifier.code !63 */
  $i347 := $load.i64($M.40, $p346);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %349 = call { i64, i64 } @FStar_UInt128_add(i64 %341, i64 %343, i64 %346, i64 %348), !dbg !528, !psr.id !541, !verifier.code !63 */
  call $p348 := FStar_UInt128_add($i340, $i342, $i345, $i347);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %350 = bitcast i128* %44 to { i64, i64 }*, !dbg !528, !psr.id !542, !verifier.code !63 */
  $p349 := $bitcast.ref.ref($p43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %351 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %350, i32 0, i32 0, !dbg !528, !psr.id !543, !verifier.code !63 */
  $p350 := $add.ref($add.ref($p349, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %352 = extractvalue { i64, i64 } %349, 0, !dbg !528, !psr.id !544, !verifier.code !63 */
  $i351 := $extractvalue.i64($p348, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %352, i64* %351, align 16, !dbg !528, !psr.id !545, !verifier.code !63 */
  $M.41 := $store.i64($M.41, $p350, $i351);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %353 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %350, i32 0, i32 1, !dbg !528, !psr.id !546, !verifier.code !63 */
  $p352 := $add.ref($add.ref($p349, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %354 = extractvalue { i64, i64 } %349, 1, !dbg !528, !psr.id !547, !verifier.code !63 */
  $i353 := $extractvalue.i64($p348, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %354, i64* %353, align 8, !dbg !528, !psr.id !548, !verifier.code !63 */
  $M.41 := $store.i64($M.41, $p352, $i353);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  /* %355 = load i128, i128* %44, align 16, !dbg !528, !psr.id !549, !verifier.code !63 */
  $i354 := $load.i128($M.41, $p43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  /* %356 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %94, i64 %94), !dbg !550, !psr.id !551, !verifier.code !63 */
  call $p355 := FStar_UInt128_mul_wide($i93, $i93);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  /* %357 = bitcast i128* %45 to { i64, i64 }*, !dbg !550, !psr.id !552, !verifier.code !63 */
  $p356 := $bitcast.ref.ref($p44);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  /* %358 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %357, i32 0, i32 0, !dbg !550, !psr.id !553, !verifier.code !63 */
  $p357 := $add.ref($add.ref($p356, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  /* %359 = extractvalue { i64, i64 } %356, 0, !dbg !550, !psr.id !554, !verifier.code !63 */
  $i358 := $extractvalue.i64($p355, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %359, i64* %358, align 16, !dbg !550, !psr.id !555, !verifier.code !63 */
  $M.42 := $store.i64($M.42, $p357, $i358);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  /* %360 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %357, i32 0, i32 1, !dbg !550, !psr.id !556, !verifier.code !63 */
  $p359 := $add.ref($add.ref($p356, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  /* %361 = extractvalue { i64, i64 } %356, 1, !dbg !550, !psr.id !557, !verifier.code !63 */
  $i360 := $extractvalue.i64($p355, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %361, i64* %360, align 8, !dbg !550, !psr.id !558, !verifier.code !63 */
  $M.42 := $store.i64($M.42, $p359, $i360);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  /* %362 = load i128, i128* %45, align 16, !dbg !550, !psr.id !559, !verifier.code !63 */
  $i361 := $load.i128($M.42, $p44);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %355, i128* %46, align 16, !dbg !560, !psr.id !561, !verifier.code !63 */
  $M.43 := $store.i128($M.43, $p45, $i354);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %363 = bitcast i128* %46 to { i64, i64 }*, !dbg !560, !psr.id !562, !verifier.code !63 */
  $p362 := $bitcast.ref.ref($p45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %364 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %363, i32 0, i32 0, !dbg !560, !psr.id !563, !verifier.code !63 */
  $p363 := $add.ref($add.ref($p362, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %365 = load i64, i64* %364, align 16, !dbg !560, !psr.id !564, !verifier.code !63 */
  $i364 := $load.i64($M.43, $p363);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %366 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %363, i32 0, i32 1, !dbg !560, !psr.id !565, !verifier.code !63 */
  $p365 := $add.ref($add.ref($p362, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %367 = load i64, i64* %366, align 8, !dbg !560, !psr.id !566, !verifier.code !63 */
  $i366 := $load.i64($M.43, $p365);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %362, i128* %47, align 16, !dbg !560, !psr.id !567, !verifier.code !63 */
  $M.44 := $store.i128($M.44, $p46, $i361);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %368 = bitcast i128* %47 to { i64, i64 }*, !dbg !560, !psr.id !568, !verifier.code !63 */
  $p367 := $bitcast.ref.ref($p46);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %369 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %368, i32 0, i32 0, !dbg !560, !psr.id !569, !verifier.code !63 */
  $p368 := $add.ref($add.ref($p367, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %370 = load i64, i64* %369, align 16, !dbg !560, !psr.id !570, !verifier.code !63 */
  $i369 := $load.i64($M.44, $p368);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %371 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %368, i32 0, i32 1, !dbg !560, !psr.id !571, !verifier.code !63 */
  $p370 := $add.ref($add.ref($p367, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %372 = load i64, i64* %371, align 8, !dbg !560, !psr.id !572, !verifier.code !63 */
  $i371 := $load.i64($M.44, $p370);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %373 = call { i64, i64 } @FStar_UInt128_add(i64 %365, i64 %367, i64 %370, i64 %372), !dbg !560, !psr.id !573, !verifier.code !63 */
  call $p372 := FStar_UInt128_add($i364, $i366, $i369, $i371);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %374 = bitcast i128* %48 to { i64, i64 }*, !dbg !560, !psr.id !574, !verifier.code !63 */
  $p373 := $bitcast.ref.ref($p47);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %375 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %374, i32 0, i32 0, !dbg !560, !psr.id !575, !verifier.code !63 */
  $p374 := $add.ref($add.ref($p373, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %376 = extractvalue { i64, i64 } %373, 0, !dbg !560, !psr.id !576, !verifier.code !63 */
  $i375 := $extractvalue.i64($p372, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %376, i64* %375, align 16, !dbg !560, !psr.id !577, !verifier.code !63 */
  $M.45 := $store.i64($M.45, $p374, $i375);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %377 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %374, i32 0, i32 1, !dbg !560, !psr.id !578, !verifier.code !63 */
  $p376 := $add.ref($add.ref($p373, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %378 = extractvalue { i64, i64 } %373, 1, !dbg !560, !psr.id !579, !verifier.code !63 */
  $i377 := $extractvalue.i64($p372, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %378, i64* %377, align 8, !dbg !560, !psr.id !580, !verifier.code !63 */
  $M.45 := $store.i64($M.45, $p376, $i377);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  /* %379 = load i128, i128* %48, align 16, !dbg !560, !psr.id !581, !verifier.code !63 */
  $i378 := $load.i128($M.45, $p47);
  /* call void @llvm.dbg.value(metadata i128 %379, metadata !626, metadata !DIExpression()), !dbg !193, !psr.id !627, !verifier.code !64 */
  call {:cexpr "s4"} boogie_si_record_i128($i378);
  /* call void @llvm.dbg.value(metadata i128 %159, metadata !628, metadata !DIExpression()), !dbg !193, !psr.id !629, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %214, metadata !630, metadata !DIExpression()), !dbg !193, !psr.id !631, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %269, metadata !632, metadata !DIExpression()), !dbg !193, !psr.id !633, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %324, metadata !634, metadata !DIExpression()), !dbg !193, !psr.id !635, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %379, metadata !636, metadata !DIExpression()), !dbg !193, !psr.id !637, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  /* %380 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 0), !dbg !594, !psr.id !595, !verifier.code !63 */
  call $p379 := FStar_UInt128_uint64_to_uint128(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  /* %381 = bitcast i128* %49 to { i64, i64 }*, !dbg !594, !psr.id !596, !verifier.code !63 */
  $p380 := $bitcast.ref.ref($p48);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  /* %382 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %381, i32 0, i32 0, !dbg !594, !psr.id !597, !verifier.code !63 */
  $p381 := $add.ref($add.ref($p380, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  /* %383 = extractvalue { i64, i64 } %380, 0, !dbg !594, !psr.id !598, !verifier.code !63 */
  $i382 := $extractvalue.i64($p379, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %383, i64* %382, align 16, !dbg !594, !psr.id !599, !verifier.code !63 */
  $M.46 := $store.i64($M.46, $p381, $i382);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  /* %384 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %381, i32 0, i32 1, !dbg !594, !psr.id !600, !verifier.code !63 */
  $p383 := $add.ref($add.ref($p380, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  /* %385 = extractvalue { i64, i64 } %380, 1, !dbg !594, !psr.id !601, !verifier.code !63 */
  $i384 := $extractvalue.i64($p379, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %385, i64* %384, align 8, !dbg !594, !psr.id !602, !verifier.code !63 */
  $M.46 := $store.i64($M.46, $p383, $i384);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  /* %386 = load i128, i128* %49, align 16, !dbg !594, !psr.id !603, !verifier.code !63 */
  $i385 := $load.i128($M.46, $p48);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* store i128 %159, i128* %50, align 16, !dbg !604, !psr.id !605, !verifier.code !63 */
  $M.47 := $store.i128($M.47, $p49, $i158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %387 = bitcast i128* %50 to { i64, i64 }*, !dbg !604, !psr.id !606, !verifier.code !63 */
  $p386 := $bitcast.ref.ref($p49);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %388 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %387, i32 0, i32 0, !dbg !604, !psr.id !607, !verifier.code !63 */
  $p387 := $add.ref($add.ref($p386, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %389 = load i64, i64* %388, align 16, !dbg !604, !psr.id !608, !verifier.code !63 */
  $i388 := $load.i64($M.47, $p387);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %390 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %387, i32 0, i32 1, !dbg !604, !psr.id !609, !verifier.code !63 */
  $p389 := $add.ref($add.ref($p386, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %391 = load i64, i64* %390, align 8, !dbg !604, !psr.id !610, !verifier.code !63 */
  $i390 := $load.i64($M.47, $p389);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* store i128 %386, i128* %51, align 16, !dbg !604, !psr.id !611, !verifier.code !63 */
  $M.48 := $store.i128($M.48, $p50, $i385);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %392 = bitcast i128* %51 to { i64, i64 }*, !dbg !604, !psr.id !612, !verifier.code !63 */
  $p391 := $bitcast.ref.ref($p50);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %393 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %392, i32 0, i32 0, !dbg !604, !psr.id !613, !verifier.code !63 */
  $p392 := $add.ref($add.ref($p391, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %394 = load i64, i64* %393, align 16, !dbg !604, !psr.id !614, !verifier.code !63 */
  $i393 := $load.i64($M.48, $p392);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %395 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %392, i32 0, i32 1, !dbg !604, !psr.id !615, !verifier.code !63 */
  $p394 := $add.ref($add.ref($p391, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %396 = load i64, i64* %395, align 8, !dbg !604, !psr.id !616, !verifier.code !63 */
  $i395 := $load.i64($M.48, $p394);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %397 = call { i64, i64 } @FStar_UInt128_add(i64 %389, i64 %391, i64 %394, i64 %396), !dbg !604, !psr.id !617, !verifier.code !63 */
  call $p396 := FStar_UInt128_add($i388, $i390, $i393, $i395);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %398 = bitcast i128* %52 to { i64, i64 }*, !dbg !604, !psr.id !618, !verifier.code !63 */
  $p397 := $bitcast.ref.ref($p51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %399 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %398, i32 0, i32 0, !dbg !604, !psr.id !619, !verifier.code !63 */
  $p398 := $add.ref($add.ref($p397, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %400 = extractvalue { i64, i64 } %397, 0, !dbg !604, !psr.id !620, !verifier.code !63 */
  $i399 := $extractvalue.i64($p396, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* store i64 %400, i64* %399, align 16, !dbg !604, !psr.id !621, !verifier.code !63 */
  $M.49 := $store.i64($M.49, $p398, $i399);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %401 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %398, i32 0, i32 1, !dbg !604, !psr.id !622, !verifier.code !63 */
  $p400 := $add.ref($add.ref($p397, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %402 = extractvalue { i64, i64 } %397, 1, !dbg !604, !psr.id !623, !verifier.code !63 */
  $i401 := $extractvalue.i64($p396, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* store i64 %402, i64* %401, align 8, !dbg !604, !psr.id !624, !verifier.code !63 */
  $M.49 := $store.i64($M.49, $p400, $i401);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  /* %403 = load i128, i128* %52, align 16, !dbg !604, !psr.id !625, !verifier.code !63 */
  $i402 := $load.i128($M.49, $p51);
  /* call void @llvm.dbg.value(metadata i128 %403, metadata !670, metadata !DIExpression()), !dbg !193, !psr.id !671, !verifier.code !64 */
  call {:cexpr "l_"} boogie_si_record_i128($i402);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %403, i128* %53, align 16, !dbg !628, !psr.id !629, !verifier.code !63 */
  $M.50 := $store.i128($M.50, $p52, $i402);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  /* %404 = bitcast i128* %53 to { i64, i64 }*, !dbg !628, !psr.id !630, !verifier.code !63 */
  $p403 := $bitcast.ref.ref($p52);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  /* %405 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %404, i32 0, i32 0, !dbg !628, !psr.id !631, !verifier.code !63 */
  $p404 := $add.ref($add.ref($p403, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  /* %406 = load i64, i64* %405, align 16, !dbg !628, !psr.id !632, !verifier.code !63 */
  $i405 := $load.i64($M.50, $p404);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  /* %407 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %404, i32 0, i32 1, !dbg !628, !psr.id !633, !verifier.code !63 */
  $p406 := $add.ref($add.ref($p403, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  /* %408 = load i64, i64* %407, align 8, !dbg !628, !psr.id !634, !verifier.code !63 */
  $i407 := $load.i64($M.50, $p406);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  /* %409 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %406, i64 %408), !dbg !628, !psr.id !635, !verifier.code !63 */
  call $i408 := FStar_UInt128_uint128_to_uint64($i405, $i407);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 55} true;
  assume {:verifier.code 0} true;
  /* %410 = and i64 %409, 2251799813685247, !dbg !636, !psr.id !637, !verifier.code !63 */
  $i409 := $and.i64($i408, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %410, metadata !682, metadata !DIExpression()), !dbg !193, !psr.id !683, !verifier.code !64 */
  call {:cexpr "tmp0"} boogie_si_record_i64($i409);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %403, i128* %54, align 16, !dbg !640, !psr.id !641, !verifier.code !63 */
  $M.51 := $store.i128($M.51, $p53, $i402);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* %411 = bitcast i128* %54 to { i64, i64 }*, !dbg !640, !psr.id !642, !verifier.code !63 */
  $p410 := $bitcast.ref.ref($p53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* %412 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %411, i32 0, i32 0, !dbg !640, !psr.id !643, !verifier.code !63 */
  $p411 := $add.ref($add.ref($p410, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* %413 = load i64, i64* %412, align 16, !dbg !640, !psr.id !644, !verifier.code !63 */
  $i412 := $load.i64($M.51, $p411);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* %414 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %411, i32 0, i32 1, !dbg !640, !psr.id !645, !verifier.code !63 */
  $p413 := $add.ref($add.ref($p410, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* %415 = load i64, i64* %414, align 8, !dbg !640, !psr.id !646, !verifier.code !63 */
  $i414 := $load.i64($M.51, $p413);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* %416 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %413, i64 %415, i32 51), !dbg !640, !psr.id !647, !verifier.code !63 */
  call $p415 := FStar_UInt128_shift_right($i412, $i414, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* %417 = bitcast i128* %55 to { i64, i64 }*, !dbg !640, !psr.id !648, !verifier.code !63 */
  $p416 := $bitcast.ref.ref($p54);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* %418 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %417, i32 0, i32 0, !dbg !640, !psr.id !649, !verifier.code !63 */
  $p417 := $add.ref($add.ref($p416, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* %419 = extractvalue { i64, i64 } %416, 0, !dbg !640, !psr.id !650, !verifier.code !63 */
  $i418 := $extractvalue.i64($p415, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %419, i64* %418, align 16, !dbg !640, !psr.id !651, !verifier.code !63 */
  $M.52 := $store.i64($M.52, $p417, $i418);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* %420 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %417, i32 0, i32 1, !dbg !640, !psr.id !652, !verifier.code !63 */
  $p419 := $add.ref($add.ref($p416, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* %421 = extractvalue { i64, i64 } %416, 1, !dbg !640, !psr.id !653, !verifier.code !63 */
  $i420 := $extractvalue.i64($p415, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %421, i64* %420, align 8, !dbg !640, !psr.id !654, !verifier.code !63 */
  $M.52 := $store.i64($M.52, $p419, $i420);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  /* %422 = load i128, i128* %55, align 16, !dbg !640, !psr.id !655, !verifier.code !63 */
  $i421 := $load.i128($M.52, $p54);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %422, i128* %56, align 16, !dbg !656, !psr.id !657, !verifier.code !63 */
  $M.53 := $store.i128($M.53, $p55, $i421);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  /* %423 = bitcast i128* %56 to { i64, i64 }*, !dbg !656, !psr.id !658, !verifier.code !63 */
  $p422 := $bitcast.ref.ref($p55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  /* %424 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %423, i32 0, i32 0, !dbg !656, !psr.id !659, !verifier.code !63 */
  $p423 := $add.ref($add.ref($p422, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  /* %425 = load i64, i64* %424, align 16, !dbg !656, !psr.id !660, !verifier.code !63 */
  $i424 := $load.i64($M.53, $p423);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  /* %426 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %423, i32 0, i32 1, !dbg !656, !psr.id !661, !verifier.code !63 */
  $p425 := $add.ref($add.ref($p422, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  /* %427 = load i64, i64* %426, align 8, !dbg !656, !psr.id !662, !verifier.code !63 */
  $i426 := $load.i64($M.53, $p425);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  /* %428 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %425, i64 %427), !dbg !656, !psr.id !663, !verifier.code !63 */
  call $i427 := FStar_UInt128_uint128_to_uint64($i424, $i426);
  /* call void @llvm.dbg.value(metadata i64 %428, metadata !708, metadata !DIExpression()), !dbg !193, !psr.id !709, !verifier.code !64 */
  call {:cexpr "c0"} boogie_si_record_i64($i427);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  /* %429 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %428), !dbg !666, !psr.id !667, !verifier.code !63 */
  call $p428 := FStar_UInt128_uint64_to_uint128($i427);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  /* %430 = bitcast i128* %57 to { i64, i64 }*, !dbg !666, !psr.id !668, !verifier.code !63 */
  $p429 := $bitcast.ref.ref($p56);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  /* %431 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %430, i32 0, i32 0, !dbg !666, !psr.id !669, !verifier.code !63 */
  $p430 := $add.ref($add.ref($p429, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  /* %432 = extractvalue { i64, i64 } %429, 0, !dbg !666, !psr.id !670, !verifier.code !63 */
  $i431 := $extractvalue.i64($p428, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %432, i64* %431, align 16, !dbg !666, !psr.id !671, !verifier.code !63 */
  $M.54 := $store.i64($M.54, $p430, $i431);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  /* %433 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %430, i32 0, i32 1, !dbg !666, !psr.id !672, !verifier.code !63 */
  $p432 := $add.ref($add.ref($p429, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  /* %434 = extractvalue { i64, i64 } %429, 1, !dbg !666, !psr.id !673, !verifier.code !63 */
  $i433 := $extractvalue.i64($p428, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %434, i64* %433, align 8, !dbg !666, !psr.id !674, !verifier.code !63 */
  $M.54 := $store.i64($M.54, $p432, $i433);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  /* %435 = load i128, i128* %57, align 16, !dbg !666, !psr.id !675, !verifier.code !63 */
  $i434 := $load.i128($M.54, $p56);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %214, i128* %58, align 16, !dbg !676, !psr.id !677, !verifier.code !63 */
  $M.55 := $store.i128($M.55, $p57, $i213);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %436 = bitcast i128* %58 to { i64, i64 }*, !dbg !676, !psr.id !678, !verifier.code !63 */
  $p435 := $bitcast.ref.ref($p57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %437 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %436, i32 0, i32 0, !dbg !676, !psr.id !679, !verifier.code !63 */
  $p436 := $add.ref($add.ref($p435, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %438 = load i64, i64* %437, align 16, !dbg !676, !psr.id !680, !verifier.code !63 */
  $i437 := $load.i64($M.55, $p436);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %439 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %436, i32 0, i32 1, !dbg !676, !psr.id !681, !verifier.code !63 */
  $p438 := $add.ref($add.ref($p435, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %440 = load i64, i64* %439, align 8, !dbg !676, !psr.id !682, !verifier.code !63 */
  $i439 := $load.i64($M.55, $p438);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %435, i128* %59, align 16, !dbg !676, !psr.id !683, !verifier.code !63 */
  $M.56 := $store.i128($M.56, $p58, $i434);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %441 = bitcast i128* %59 to { i64, i64 }*, !dbg !676, !psr.id !684, !verifier.code !63 */
  $p440 := $bitcast.ref.ref($p58);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %442 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %441, i32 0, i32 0, !dbg !676, !psr.id !685, !verifier.code !63 */
  $p441 := $add.ref($add.ref($p440, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %443 = load i64, i64* %442, align 16, !dbg !676, !psr.id !686, !verifier.code !63 */
  $i442 := $load.i64($M.56, $p441);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %444 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %441, i32 0, i32 1, !dbg !676, !psr.id !687, !verifier.code !63 */
  $p443 := $add.ref($add.ref($p440, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %445 = load i64, i64* %444, align 8, !dbg !676, !psr.id !688, !verifier.code !63 */
  $i444 := $load.i64($M.56, $p443);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %446 = call { i64, i64 } @FStar_UInt128_add(i64 %438, i64 %440, i64 %443, i64 %445), !dbg !676, !psr.id !689, !verifier.code !63 */
  call $p445 := FStar_UInt128_add($i437, $i439, $i442, $i444);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %447 = bitcast i128* %60 to { i64, i64 }*, !dbg !676, !psr.id !690, !verifier.code !63 */
  $p446 := $bitcast.ref.ref($p59);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %448 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %447, i32 0, i32 0, !dbg !676, !psr.id !691, !verifier.code !63 */
  $p447 := $add.ref($add.ref($p446, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %449 = extractvalue { i64, i64 } %446, 0, !dbg !676, !psr.id !692, !verifier.code !63 */
  $i448 := $extractvalue.i64($p445, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %449, i64* %448, align 16, !dbg !676, !psr.id !693, !verifier.code !63 */
  $M.57 := $store.i64($M.57, $p447, $i448);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %450 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %447, i32 0, i32 1, !dbg !676, !psr.id !694, !verifier.code !63 */
  $p449 := $add.ref($add.ref($p446, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %451 = extractvalue { i64, i64 } %446, 1, !dbg !676, !psr.id !695, !verifier.code !63 */
  $i450 := $extractvalue.i64($p445, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %451, i64* %450, align 8, !dbg !676, !psr.id !696, !verifier.code !63 */
  $M.57 := $store.i64($M.57, $p449, $i450);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  /* %452 = load i128, i128* %60, align 16, !dbg !676, !psr.id !697, !verifier.code !63 */
  $i451 := $load.i128($M.57, $p59);
  /* call void @llvm.dbg.value(metadata i128 %452, metadata !742, metadata !DIExpression()), !dbg !193, !psr.id !743, !verifier.code !64 */
  call {:cexpr "l_0"} boogie_si_record_i128($i451);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %452, i128* %61, align 16, !dbg !700, !psr.id !701, !verifier.code !63 */
  $M.58 := $store.i128($M.58, $p60, $i451);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  /* %453 = bitcast i128* %61 to { i64, i64 }*, !dbg !700, !psr.id !702, !verifier.code !63 */
  $p452 := $bitcast.ref.ref($p60);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  /* %454 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %453, i32 0, i32 0, !dbg !700, !psr.id !703, !verifier.code !63 */
  $p453 := $add.ref($add.ref($p452, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  /* %455 = load i64, i64* %454, align 16, !dbg !700, !psr.id !704, !verifier.code !63 */
  $i454 := $load.i64($M.58, $p453);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  /* %456 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %453, i32 0, i32 1, !dbg !700, !psr.id !705, !verifier.code !63 */
  $p455 := $add.ref($add.ref($p452, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  /* %457 = load i64, i64* %456, align 8, !dbg !700, !psr.id !706, !verifier.code !63 */
  $i456 := $load.i64($M.58, $p455);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  /* %458 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %455, i64 %457), !dbg !700, !psr.id !707, !verifier.code !63 */
  call $i457 := FStar_UInt128_uint128_to_uint64($i454, $i456);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 56} true;
  assume {:verifier.code 0} true;
  /* %459 = and i64 %458, 2251799813685247, !dbg !708, !psr.id !709, !verifier.code !63 */
  $i458 := $and.i64($i457, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %459, metadata !754, metadata !DIExpression()), !dbg !193, !psr.id !755, !verifier.code !64 */
  call {:cexpr "tmp1"} boogie_si_record_i64($i458);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %452, i128* %62, align 16, !dbg !712, !psr.id !713, !verifier.code !63 */
  $M.59 := $store.i128($M.59, $p61, $i451);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* %460 = bitcast i128* %62 to { i64, i64 }*, !dbg !712, !psr.id !714, !verifier.code !63 */
  $p459 := $bitcast.ref.ref($p61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* %461 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %460, i32 0, i32 0, !dbg !712, !psr.id !715, !verifier.code !63 */
  $p460 := $add.ref($add.ref($p459, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* %462 = load i64, i64* %461, align 16, !dbg !712, !psr.id !716, !verifier.code !63 */
  $i461 := $load.i64($M.59, $p460);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* %463 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %460, i32 0, i32 1, !dbg !712, !psr.id !717, !verifier.code !63 */
  $p462 := $add.ref($add.ref($p459, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* %464 = load i64, i64* %463, align 8, !dbg !712, !psr.id !718, !verifier.code !63 */
  $i463 := $load.i64($M.59, $p462);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* %465 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %462, i64 %464, i32 51), !dbg !712, !psr.id !719, !verifier.code !63 */
  call $p464 := FStar_UInt128_shift_right($i461, $i463, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* %466 = bitcast i128* %63 to { i64, i64 }*, !dbg !712, !psr.id !720, !verifier.code !63 */
  $p465 := $bitcast.ref.ref($p62);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* %467 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %466, i32 0, i32 0, !dbg !712, !psr.id !721, !verifier.code !63 */
  $p466 := $add.ref($add.ref($p465, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* %468 = extractvalue { i64, i64 } %465, 0, !dbg !712, !psr.id !722, !verifier.code !63 */
  $i467 := $extractvalue.i64($p464, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %468, i64* %467, align 16, !dbg !712, !psr.id !723, !verifier.code !63 */
  $M.60 := $store.i64($M.60, $p466, $i467);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* %469 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %466, i32 0, i32 1, !dbg !712, !psr.id !724, !verifier.code !63 */
  $p468 := $add.ref($add.ref($p465, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* %470 = extractvalue { i64, i64 } %465, 1, !dbg !712, !psr.id !725, !verifier.code !63 */
  $i469 := $extractvalue.i64($p464, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %470, i64* %469, align 8, !dbg !712, !psr.id !726, !verifier.code !63 */
  $M.60 := $store.i64($M.60, $p468, $i469);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  /* %471 = load i128, i128* %63, align 16, !dbg !712, !psr.id !727, !verifier.code !63 */
  $i470 := $load.i128($M.60, $p62);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %471, i128* %64, align 16, !dbg !728, !psr.id !729, !verifier.code !63 */
  $M.61 := $store.i128($M.61, $p63, $i470);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  /* %472 = bitcast i128* %64 to { i64, i64 }*, !dbg !728, !psr.id !730, !verifier.code !63 */
  $p471 := $bitcast.ref.ref($p63);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  /* %473 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %472, i32 0, i32 0, !dbg !728, !psr.id !731, !verifier.code !63 */
  $p472 := $add.ref($add.ref($p471, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  /* %474 = load i64, i64* %473, align 16, !dbg !728, !psr.id !732, !verifier.code !63 */
  $i473 := $load.i64($M.61, $p472);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  /* %475 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %472, i32 0, i32 1, !dbg !728, !psr.id !733, !verifier.code !63 */
  $p474 := $add.ref($add.ref($p471, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  /* %476 = load i64, i64* %475, align 8, !dbg !728, !psr.id !734, !verifier.code !63 */
  $i475 := $load.i64($M.61, $p474);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  /* %477 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %474, i64 %476), !dbg !728, !psr.id !735, !verifier.code !63 */
  call $i476 := FStar_UInt128_uint128_to_uint64($i473, $i475);
  /* call void @llvm.dbg.value(metadata i64 %477, metadata !780, metadata !DIExpression()), !dbg !193, !psr.id !781, !verifier.code !64 */
  call {:cexpr "c1"} boogie_si_record_i64($i476);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  /* %478 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %477), !dbg !738, !psr.id !739, !verifier.code !63 */
  call $p477 := FStar_UInt128_uint64_to_uint128($i476);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  /* %479 = bitcast i128* %65 to { i64, i64 }*, !dbg !738, !psr.id !740, !verifier.code !63 */
  $p478 := $bitcast.ref.ref($p64);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  /* %480 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %479, i32 0, i32 0, !dbg !738, !psr.id !741, !verifier.code !63 */
  $p479 := $add.ref($add.ref($p478, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  /* %481 = extractvalue { i64, i64 } %478, 0, !dbg !738, !psr.id !742, !verifier.code !63 */
  $i480 := $extractvalue.i64($p477, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %481, i64* %480, align 16, !dbg !738, !psr.id !743, !verifier.code !63 */
  $M.62 := $store.i64($M.62, $p479, $i480);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  /* %482 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %479, i32 0, i32 1, !dbg !738, !psr.id !744, !verifier.code !63 */
  $p481 := $add.ref($add.ref($p478, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  /* %483 = extractvalue { i64, i64 } %478, 1, !dbg !738, !psr.id !745, !verifier.code !63 */
  $i482 := $extractvalue.i64($p477, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %483, i64* %482, align 8, !dbg !738, !psr.id !746, !verifier.code !63 */
  $M.62 := $store.i64($M.62, $p481, $i482);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  /* %484 = load i128, i128* %65, align 16, !dbg !738, !psr.id !747, !verifier.code !63 */
  $i483 := $load.i128($M.62, $p64);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %269, i128* %66, align 16, !dbg !748, !psr.id !749, !verifier.code !63 */
  $M.63 := $store.i128($M.63, $p65, $i268);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %485 = bitcast i128* %66 to { i64, i64 }*, !dbg !748, !psr.id !750, !verifier.code !63 */
  $p484 := $bitcast.ref.ref($p65);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %486 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %485, i32 0, i32 0, !dbg !748, !psr.id !751, !verifier.code !63 */
  $p485 := $add.ref($add.ref($p484, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %487 = load i64, i64* %486, align 16, !dbg !748, !psr.id !752, !verifier.code !63 */
  $i486 := $load.i64($M.63, $p485);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %488 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %485, i32 0, i32 1, !dbg !748, !psr.id !753, !verifier.code !63 */
  $p487 := $add.ref($add.ref($p484, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %489 = load i64, i64* %488, align 8, !dbg !748, !psr.id !754, !verifier.code !63 */
  $i488 := $load.i64($M.63, $p487);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %484, i128* %67, align 16, !dbg !748, !psr.id !755, !verifier.code !63 */
  $M.64 := $store.i128($M.64, $p66, $i483);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %490 = bitcast i128* %67 to { i64, i64 }*, !dbg !748, !psr.id !756, !verifier.code !63 */
  $p489 := $bitcast.ref.ref($p66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %491 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %490, i32 0, i32 0, !dbg !748, !psr.id !757, !verifier.code !63 */
  $p490 := $add.ref($add.ref($p489, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %492 = load i64, i64* %491, align 16, !dbg !748, !psr.id !758, !verifier.code !63 */
  $i491 := $load.i64($M.64, $p490);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %493 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %490, i32 0, i32 1, !dbg !748, !psr.id !759, !verifier.code !63 */
  $p492 := $add.ref($add.ref($p489, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %494 = load i64, i64* %493, align 8, !dbg !748, !psr.id !760, !verifier.code !63 */
  $i493 := $load.i64($M.64, $p492);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %495 = call { i64, i64 } @FStar_UInt128_add(i64 %487, i64 %489, i64 %492, i64 %494), !dbg !748, !psr.id !761, !verifier.code !63 */
  call $p494 := FStar_UInt128_add($i486, $i488, $i491, $i493);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %496 = bitcast i128* %68 to { i64, i64 }*, !dbg !748, !psr.id !762, !verifier.code !63 */
  $p495 := $bitcast.ref.ref($p67);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %497 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %496, i32 0, i32 0, !dbg !748, !psr.id !763, !verifier.code !63 */
  $p496 := $add.ref($add.ref($p495, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %498 = extractvalue { i64, i64 } %495, 0, !dbg !748, !psr.id !764, !verifier.code !63 */
  $i497 := $extractvalue.i64($p494, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %498, i64* %497, align 16, !dbg !748, !psr.id !765, !verifier.code !63 */
  $M.65 := $store.i64($M.65, $p496, $i497);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %499 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %496, i32 0, i32 1, !dbg !748, !psr.id !766, !verifier.code !63 */
  $p498 := $add.ref($add.ref($p495, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %500 = extractvalue { i64, i64 } %495, 1, !dbg !748, !psr.id !767, !verifier.code !63 */
  $i499 := $extractvalue.i64($p494, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %500, i64* %499, align 8, !dbg !748, !psr.id !768, !verifier.code !63 */
  $M.65 := $store.i64($M.65, $p498, $i499);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  /* %501 = load i128, i128* %68, align 16, !dbg !748, !psr.id !769, !verifier.code !63 */
  $i500 := $load.i128($M.65, $p67);
  /* call void @llvm.dbg.value(metadata i128 %501, metadata !814, metadata !DIExpression()), !dbg !193, !psr.id !815, !verifier.code !64 */
  call {:cexpr "l_1"} boogie_si_record_i128($i500);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %501, i128* %69, align 16, !dbg !772, !psr.id !773, !verifier.code !63 */
  $M.66 := $store.i128($M.66, $p68, $i500);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  /* %502 = bitcast i128* %69 to { i64, i64 }*, !dbg !772, !psr.id !774, !verifier.code !63 */
  $p501 := $bitcast.ref.ref($p68);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  /* %503 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %502, i32 0, i32 0, !dbg !772, !psr.id !775, !verifier.code !63 */
  $p502 := $add.ref($add.ref($p501, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  /* %504 = load i64, i64* %503, align 16, !dbg !772, !psr.id !776, !verifier.code !63 */
  $i503 := $load.i64($M.66, $p502);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  /* %505 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %502, i32 0, i32 1, !dbg !772, !psr.id !777, !verifier.code !63 */
  $p504 := $add.ref($add.ref($p501, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  /* %506 = load i64, i64* %505, align 8, !dbg !772, !psr.id !778, !verifier.code !63 */
  $i505 := $load.i64($M.66, $p504);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  /* %507 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %504, i64 %506), !dbg !772, !psr.id !779, !verifier.code !63 */
  call $i506 := FStar_UInt128_uint128_to_uint64($i503, $i505);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 56} true;
  assume {:verifier.code 0} true;
  /* %508 = and i64 %507, 2251799813685247, !dbg !780, !psr.id !781, !verifier.code !63 */
  $i507 := $and.i64($i506, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %508, metadata !826, metadata !DIExpression()), !dbg !193, !psr.id !827, !verifier.code !64 */
  call {:cexpr "tmp2"} boogie_si_record_i64($i507);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %501, i128* %70, align 16, !dbg !784, !psr.id !785, !verifier.code !63 */
  $M.67 := $store.i128($M.67, $p69, $i500);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* %509 = bitcast i128* %70 to { i64, i64 }*, !dbg !784, !psr.id !786, !verifier.code !63 */
  $p508 := $bitcast.ref.ref($p69);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* %510 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %509, i32 0, i32 0, !dbg !784, !psr.id !787, !verifier.code !63 */
  $p509 := $add.ref($add.ref($p508, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* %511 = load i64, i64* %510, align 16, !dbg !784, !psr.id !788, !verifier.code !63 */
  $i510 := $load.i64($M.67, $p509);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* %512 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %509, i32 0, i32 1, !dbg !784, !psr.id !789, !verifier.code !63 */
  $p511 := $add.ref($add.ref($p508, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* %513 = load i64, i64* %512, align 8, !dbg !784, !psr.id !790, !verifier.code !63 */
  $i512 := $load.i64($M.67, $p511);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* %514 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %511, i64 %513, i32 51), !dbg !784, !psr.id !791, !verifier.code !63 */
  call $p513 := FStar_UInt128_shift_right($i510, $i512, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* %515 = bitcast i128* %71 to { i64, i64 }*, !dbg !784, !psr.id !792, !verifier.code !63 */
  $p514 := $bitcast.ref.ref($p70);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* %516 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %515, i32 0, i32 0, !dbg !784, !psr.id !793, !verifier.code !63 */
  $p515 := $add.ref($add.ref($p514, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* %517 = extractvalue { i64, i64 } %514, 0, !dbg !784, !psr.id !794, !verifier.code !63 */
  $i516 := $extractvalue.i64($p513, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %517, i64* %516, align 16, !dbg !784, !psr.id !795, !verifier.code !63 */
  $M.68 := $store.i64($M.68, $p515, $i516);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* %518 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %515, i32 0, i32 1, !dbg !784, !psr.id !796, !verifier.code !63 */
  $p517 := $add.ref($add.ref($p514, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* %519 = extractvalue { i64, i64 } %514, 1, !dbg !784, !psr.id !797, !verifier.code !63 */
  $i518 := $extractvalue.i64($p513, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %519, i64* %518, align 8, !dbg !784, !psr.id !798, !verifier.code !63 */
  $M.68 := $store.i64($M.68, $p517, $i518);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  /* %520 = load i128, i128* %71, align 16, !dbg !784, !psr.id !799, !verifier.code !63 */
  $i519 := $load.i128($M.68, $p70);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %520, i128* %72, align 16, !dbg !800, !psr.id !801, !verifier.code !63 */
  $M.69 := $store.i128($M.69, $p71, $i519);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  /* %521 = bitcast i128* %72 to { i64, i64 }*, !dbg !800, !psr.id !802, !verifier.code !63 */
  $p520 := $bitcast.ref.ref($p71);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  /* %522 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %521, i32 0, i32 0, !dbg !800, !psr.id !803, !verifier.code !63 */
  $p521 := $add.ref($add.ref($p520, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  /* %523 = load i64, i64* %522, align 16, !dbg !800, !psr.id !804, !verifier.code !63 */
  $i522 := $load.i64($M.69, $p521);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  /* %524 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %521, i32 0, i32 1, !dbg !800, !psr.id !805, !verifier.code !63 */
  $p523 := $add.ref($add.ref($p520, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  /* %525 = load i64, i64* %524, align 8, !dbg !800, !psr.id !806, !verifier.code !63 */
  $i524 := $load.i64($M.69, $p523);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  /* %526 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %523, i64 %525), !dbg !800, !psr.id !807, !verifier.code !63 */
  call $i525 := FStar_UInt128_uint128_to_uint64($i522, $i524);
  /* call void @llvm.dbg.value(metadata i64 %526, metadata !852, metadata !DIExpression()), !dbg !193, !psr.id !853, !verifier.code !64 */
  call {:cexpr "c2"} boogie_si_record_i64($i525);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  /* %527 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %526), !dbg !810, !psr.id !811, !verifier.code !63 */
  call $p526 := FStar_UInt128_uint64_to_uint128($i525);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  /* %528 = bitcast i128* %73 to { i64, i64 }*, !dbg !810, !psr.id !812, !verifier.code !63 */
  $p527 := $bitcast.ref.ref($p72);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  /* %529 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %528, i32 0, i32 0, !dbg !810, !psr.id !813, !verifier.code !63 */
  $p528 := $add.ref($add.ref($p527, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  /* %530 = extractvalue { i64, i64 } %527, 0, !dbg !810, !psr.id !814, !verifier.code !63 */
  $i529 := $extractvalue.i64($p526, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %530, i64* %529, align 16, !dbg !810, !psr.id !815, !verifier.code !63 */
  $M.70 := $store.i64($M.70, $p528, $i529);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  /* %531 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %528, i32 0, i32 1, !dbg !810, !psr.id !816, !verifier.code !63 */
  $p530 := $add.ref($add.ref($p527, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  /* %532 = extractvalue { i64, i64 } %527, 1, !dbg !810, !psr.id !817, !verifier.code !63 */
  $i531 := $extractvalue.i64($p526, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %532, i64* %531, align 8, !dbg !810, !psr.id !818, !verifier.code !63 */
  $M.70 := $store.i64($M.70, $p530, $i531);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  /* %533 = load i128, i128* %73, align 16, !dbg !810, !psr.id !819, !verifier.code !63 */
  $i532 := $load.i128($M.70, $p72);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %324, i128* %74, align 16, !dbg !820, !psr.id !821, !verifier.code !63 */
  $M.71 := $store.i128($M.71, $p73, $i323);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %534 = bitcast i128* %74 to { i64, i64 }*, !dbg !820, !psr.id !822, !verifier.code !63 */
  $p533 := $bitcast.ref.ref($p73);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %535 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %534, i32 0, i32 0, !dbg !820, !psr.id !823, !verifier.code !63 */
  $p534 := $add.ref($add.ref($p533, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %536 = load i64, i64* %535, align 16, !dbg !820, !psr.id !824, !verifier.code !63 */
  $i535 := $load.i64($M.71, $p534);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %537 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %534, i32 0, i32 1, !dbg !820, !psr.id !825, !verifier.code !63 */
  $p536 := $add.ref($add.ref($p533, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %538 = load i64, i64* %537, align 8, !dbg !820, !psr.id !826, !verifier.code !63 */
  $i537 := $load.i64($M.71, $p536);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %533, i128* %75, align 16, !dbg !820, !psr.id !827, !verifier.code !63 */
  $M.72 := $store.i128($M.72, $p74, $i532);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %539 = bitcast i128* %75 to { i64, i64 }*, !dbg !820, !psr.id !828, !verifier.code !63 */
  $p538 := $bitcast.ref.ref($p74);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %540 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %539, i32 0, i32 0, !dbg !820, !psr.id !829, !verifier.code !63 */
  $p539 := $add.ref($add.ref($p538, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %541 = load i64, i64* %540, align 16, !dbg !820, !psr.id !830, !verifier.code !63 */
  $i540 := $load.i64($M.72, $p539);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %542 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %539, i32 0, i32 1, !dbg !820, !psr.id !831, !verifier.code !63 */
  $p541 := $add.ref($add.ref($p538, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %543 = load i64, i64* %542, align 8, !dbg !820, !psr.id !832, !verifier.code !63 */
  $i542 := $load.i64($M.72, $p541);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %544 = call { i64, i64 } @FStar_UInt128_add(i64 %536, i64 %538, i64 %541, i64 %543), !dbg !820, !psr.id !833, !verifier.code !63 */
  call $p543 := FStar_UInt128_add($i535, $i537, $i540, $i542);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %545 = bitcast i128* %76 to { i64, i64 }*, !dbg !820, !psr.id !834, !verifier.code !63 */
  $p544 := $bitcast.ref.ref($p75);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %546 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %545, i32 0, i32 0, !dbg !820, !psr.id !835, !verifier.code !63 */
  $p545 := $add.ref($add.ref($p544, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %547 = extractvalue { i64, i64 } %544, 0, !dbg !820, !psr.id !836, !verifier.code !63 */
  $i546 := $extractvalue.i64($p543, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %547, i64* %546, align 16, !dbg !820, !psr.id !837, !verifier.code !63 */
  $M.73 := $store.i64($M.73, $p545, $i546);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %548 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %545, i32 0, i32 1, !dbg !820, !psr.id !838, !verifier.code !63 */
  $p547 := $add.ref($add.ref($p544, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %549 = extractvalue { i64, i64 } %544, 1, !dbg !820, !psr.id !839, !verifier.code !63 */
  $i548 := $extractvalue.i64($p543, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %549, i64* %548, align 8, !dbg !820, !psr.id !840, !verifier.code !63 */
  $M.73 := $store.i64($M.73, $p547, $i548);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  /* %550 = load i128, i128* %76, align 16, !dbg !820, !psr.id !841, !verifier.code !63 */
  $i549 := $load.i128($M.73, $p75);
  /* call void @llvm.dbg.value(metadata i128 %550, metadata !886, metadata !DIExpression()), !dbg !193, !psr.id !887, !verifier.code !64 */
  call {:cexpr "l_2"} boogie_si_record_i128($i549);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %550, i128* %77, align 16, !dbg !844, !psr.id !845, !verifier.code !63 */
  $M.74 := $store.i128($M.74, $p76, $i549);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  /* %551 = bitcast i128* %77 to { i64, i64 }*, !dbg !844, !psr.id !846, !verifier.code !63 */
  $p550 := $bitcast.ref.ref($p76);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  /* %552 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %551, i32 0, i32 0, !dbg !844, !psr.id !847, !verifier.code !63 */
  $p551 := $add.ref($add.ref($p550, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  /* %553 = load i64, i64* %552, align 16, !dbg !844, !psr.id !848, !verifier.code !63 */
  $i552 := $load.i64($M.74, $p551);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  /* %554 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %551, i32 0, i32 1, !dbg !844, !psr.id !849, !verifier.code !63 */
  $p553 := $add.ref($add.ref($p550, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  /* %555 = load i64, i64* %554, align 8, !dbg !844, !psr.id !850, !verifier.code !63 */
  $i554 := $load.i64($M.74, $p553);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  /* %556 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %553, i64 %555), !dbg !844, !psr.id !851, !verifier.code !63 */
  call $i555 := FStar_UInt128_uint128_to_uint64($i552, $i554);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 56} true;
  assume {:verifier.code 0} true;
  /* %557 = and i64 %556, 2251799813685247, !dbg !852, !psr.id !853, !verifier.code !63 */
  $i556 := $and.i64($i555, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %557, metadata !898, metadata !DIExpression()), !dbg !193, !psr.id !899, !verifier.code !64 */
  call {:cexpr "tmp3"} boogie_si_record_i64($i556);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %550, i128* %78, align 16, !dbg !856, !psr.id !857, !verifier.code !63 */
  $M.75 := $store.i128($M.75, $p77, $i549);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* %558 = bitcast i128* %78 to { i64, i64 }*, !dbg !856, !psr.id !858, !verifier.code !63 */
  $p557 := $bitcast.ref.ref($p77);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* %559 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %558, i32 0, i32 0, !dbg !856, !psr.id !859, !verifier.code !63 */
  $p558 := $add.ref($add.ref($p557, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* %560 = load i64, i64* %559, align 16, !dbg !856, !psr.id !860, !verifier.code !63 */
  $i559 := $load.i64($M.75, $p558);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* %561 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %558, i32 0, i32 1, !dbg !856, !psr.id !861, !verifier.code !63 */
  $p560 := $add.ref($add.ref($p557, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* %562 = load i64, i64* %561, align 8, !dbg !856, !psr.id !862, !verifier.code !63 */
  $i561 := $load.i64($M.75, $p560);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* %563 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %560, i64 %562, i32 51), !dbg !856, !psr.id !863, !verifier.code !63 */
  call $p562 := FStar_UInt128_shift_right($i559, $i561, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* %564 = bitcast i128* %79 to { i64, i64 }*, !dbg !856, !psr.id !864, !verifier.code !63 */
  $p563 := $bitcast.ref.ref($p78);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* %565 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %564, i32 0, i32 0, !dbg !856, !psr.id !865, !verifier.code !63 */
  $p564 := $add.ref($add.ref($p563, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* %566 = extractvalue { i64, i64 } %563, 0, !dbg !856, !psr.id !866, !verifier.code !63 */
  $i565 := $extractvalue.i64($p562, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %566, i64* %565, align 16, !dbg !856, !psr.id !867, !verifier.code !63 */
  $M.76 := $store.i64($M.76, $p564, $i565);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* %567 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %564, i32 0, i32 1, !dbg !856, !psr.id !868, !verifier.code !63 */
  $p566 := $add.ref($add.ref($p563, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* %568 = extractvalue { i64, i64 } %563, 1, !dbg !856, !psr.id !869, !verifier.code !63 */
  $i567 := $extractvalue.i64($p562, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %568, i64* %567, align 8, !dbg !856, !psr.id !870, !verifier.code !63 */
  $M.76 := $store.i64($M.76, $p566, $i567);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  /* %569 = load i128, i128* %79, align 16, !dbg !856, !psr.id !871, !verifier.code !63 */
  $i568 := $load.i128($M.76, $p78);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %569, i128* %80, align 16, !dbg !872, !psr.id !873, !verifier.code !63 */
  $M.77 := $store.i128($M.77, $p79, $i568);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  /* %570 = bitcast i128* %80 to { i64, i64 }*, !dbg !872, !psr.id !874, !verifier.code !63 */
  $p569 := $bitcast.ref.ref($p79);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  /* %571 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %570, i32 0, i32 0, !dbg !872, !psr.id !875, !verifier.code !63 */
  $p570 := $add.ref($add.ref($p569, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  /* %572 = load i64, i64* %571, align 16, !dbg !872, !psr.id !876, !verifier.code !63 */
  $i571 := $load.i64($M.77, $p570);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  /* %573 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %570, i32 0, i32 1, !dbg !872, !psr.id !877, !verifier.code !63 */
  $p572 := $add.ref($add.ref($p569, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  /* %574 = load i64, i64* %573, align 8, !dbg !872, !psr.id !878, !verifier.code !63 */
  $i573 := $load.i64($M.77, $p572);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  /* %575 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %572, i64 %574), !dbg !872, !psr.id !879, !verifier.code !63 */
  call $i574 := FStar_UInt128_uint128_to_uint64($i571, $i573);
  /* call void @llvm.dbg.value(metadata i64 %575, metadata !924, metadata !DIExpression()), !dbg !193, !psr.id !925, !verifier.code !64 */
  call {:cexpr "c3"} boogie_si_record_i64($i574);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  /* %576 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %575), !dbg !882, !psr.id !883, !verifier.code !63 */
  call $p575 := FStar_UInt128_uint64_to_uint128($i574);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  /* %577 = bitcast i128* %81 to { i64, i64 }*, !dbg !882, !psr.id !884, !verifier.code !63 */
  $p576 := $bitcast.ref.ref($p80);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  /* %578 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %577, i32 0, i32 0, !dbg !882, !psr.id !885, !verifier.code !63 */
  $p577 := $add.ref($add.ref($p576, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  /* %579 = extractvalue { i64, i64 } %576, 0, !dbg !882, !psr.id !886, !verifier.code !63 */
  $i578 := $extractvalue.i64($p575, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %579, i64* %578, align 16, !dbg !882, !psr.id !887, !verifier.code !63 */
  $M.78 := $store.i64($M.78, $p577, $i578);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  /* %580 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %577, i32 0, i32 1, !dbg !882, !psr.id !888, !verifier.code !63 */
  $p579 := $add.ref($add.ref($p576, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  /* %581 = extractvalue { i64, i64 } %576, 1, !dbg !882, !psr.id !889, !verifier.code !63 */
  $i580 := $extractvalue.i64($p575, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %581, i64* %580, align 8, !dbg !882, !psr.id !890, !verifier.code !63 */
  $M.78 := $store.i64($M.78, $p579, $i580);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  /* %582 = load i128, i128* %81, align 16, !dbg !882, !psr.id !891, !verifier.code !63 */
  $i581 := $load.i128($M.78, $p80);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %379, i128* %82, align 16, !dbg !892, !psr.id !893, !verifier.code !63 */
  $M.79 := $store.i128($M.79, $p81, $i378);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %583 = bitcast i128* %82 to { i64, i64 }*, !dbg !892, !psr.id !894, !verifier.code !63 */
  $p582 := $bitcast.ref.ref($p81);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %584 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %583, i32 0, i32 0, !dbg !892, !psr.id !895, !verifier.code !63 */
  $p583 := $add.ref($add.ref($p582, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %585 = load i64, i64* %584, align 16, !dbg !892, !psr.id !896, !verifier.code !63 */
  $i584 := $load.i64($M.79, $p583);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %586 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %583, i32 0, i32 1, !dbg !892, !psr.id !897, !verifier.code !63 */
  $p585 := $add.ref($add.ref($p582, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %587 = load i64, i64* %586, align 8, !dbg !892, !psr.id !898, !verifier.code !63 */
  $i586 := $load.i64($M.79, $p585);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %582, i128* %83, align 16, !dbg !892, !psr.id !899, !verifier.code !63 */
  $M.80 := $store.i128($M.80, $p82, $i581);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %588 = bitcast i128* %83 to { i64, i64 }*, !dbg !892, !psr.id !900, !verifier.code !63 */
  $p587 := $bitcast.ref.ref($p82);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %589 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %588, i32 0, i32 0, !dbg !892, !psr.id !901, !verifier.code !63 */
  $p588 := $add.ref($add.ref($p587, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %590 = load i64, i64* %589, align 16, !dbg !892, !psr.id !902, !verifier.code !63 */
  $i589 := $load.i64($M.80, $p588);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %591 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %588, i32 0, i32 1, !dbg !892, !psr.id !903, !verifier.code !63 */
  $p590 := $add.ref($add.ref($p587, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %592 = load i64, i64* %591, align 8, !dbg !892, !psr.id !904, !verifier.code !63 */
  $i591 := $load.i64($M.80, $p590);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %593 = call { i64, i64 } @FStar_UInt128_add(i64 %585, i64 %587, i64 %590, i64 %592), !dbg !892, !psr.id !905, !verifier.code !63 */
  call $p592 := FStar_UInt128_add($i584, $i586, $i589, $i591);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %594 = bitcast i128* %84 to { i64, i64 }*, !dbg !892, !psr.id !906, !verifier.code !63 */
  $p593 := $bitcast.ref.ref($p83);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %595 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %594, i32 0, i32 0, !dbg !892, !psr.id !907, !verifier.code !63 */
  $p594 := $add.ref($add.ref($p593, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %596 = extractvalue { i64, i64 } %593, 0, !dbg !892, !psr.id !908, !verifier.code !63 */
  $i595 := $extractvalue.i64($p592, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %596, i64* %595, align 16, !dbg !892, !psr.id !909, !verifier.code !63 */
  $M.81 := $store.i64($M.81, $p594, $i595);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %597 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %594, i32 0, i32 1, !dbg !892, !psr.id !910, !verifier.code !63 */
  $p596 := $add.ref($add.ref($p593, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %598 = extractvalue { i64, i64 } %593, 1, !dbg !892, !psr.id !911, !verifier.code !63 */
  $i597 := $extractvalue.i64($p592, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %598, i64* %597, align 8, !dbg !892, !psr.id !912, !verifier.code !63 */
  $M.81 := $store.i64($M.81, $p596, $i597);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  /* %599 = load i128, i128* %84, align 16, !dbg !892, !psr.id !913, !verifier.code !63 */
  $i598 := $load.i128($M.81, $p83);
  /* call void @llvm.dbg.value(metadata i128 %599, metadata !958, metadata !DIExpression()), !dbg !193, !psr.id !959, !verifier.code !64 */
  call {:cexpr "l_3"} boogie_si_record_i128($i598);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %599, i128* %85, align 16, !dbg !916, !psr.id !917, !verifier.code !63 */
  $M.82 := $store.i128($M.82, $p84, $i598);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  /* %600 = bitcast i128* %85 to { i64, i64 }*, !dbg !916, !psr.id !918, !verifier.code !63 */
  $p599 := $bitcast.ref.ref($p84);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  /* %601 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %600, i32 0, i32 0, !dbg !916, !psr.id !919, !verifier.code !63 */
  $p600 := $add.ref($add.ref($p599, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  /* %602 = load i64, i64* %601, align 16, !dbg !916, !psr.id !920, !verifier.code !63 */
  $i601 := $load.i64($M.82, $p600);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  /* %603 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %600, i32 0, i32 1, !dbg !916, !psr.id !921, !verifier.code !63 */
  $p602 := $add.ref($add.ref($p599, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  /* %604 = load i64, i64* %603, align 8, !dbg !916, !psr.id !922, !verifier.code !63 */
  $i603 := $load.i64($M.82, $p602);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  /* %605 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %602, i64 %604), !dbg !916, !psr.id !923, !verifier.code !63 */
  call $i604 := FStar_UInt128_uint128_to_uint64($i601, $i603);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 56} true;
  assume {:verifier.code 0} true;
  /* %606 = and i64 %605, 2251799813685247, !dbg !924, !psr.id !925, !verifier.code !63 */
  $i605 := $and.i64($i604, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %606, metadata !970, metadata !DIExpression()), !dbg !193, !psr.id !971, !verifier.code !64 */
  call {:cexpr "tmp4"} boogie_si_record_i64($i605);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %599, i128* %86, align 16, !dbg !928, !psr.id !929, !verifier.code !63 */
  $M.83 := $store.i128($M.83, $p85, $i598);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* %607 = bitcast i128* %86 to { i64, i64 }*, !dbg !928, !psr.id !930, !verifier.code !63 */
  $p606 := $bitcast.ref.ref($p85);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* %608 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %607, i32 0, i32 0, !dbg !928, !psr.id !931, !verifier.code !63 */
  $p607 := $add.ref($add.ref($p606, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* %609 = load i64, i64* %608, align 16, !dbg !928, !psr.id !932, !verifier.code !63 */
  $i608 := $load.i64($M.83, $p607);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* %610 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %607, i32 0, i32 1, !dbg !928, !psr.id !933, !verifier.code !63 */
  $p609 := $add.ref($add.ref($p606, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* %611 = load i64, i64* %610, align 8, !dbg !928, !psr.id !934, !verifier.code !63 */
  $i610 := $load.i64($M.83, $p609);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* %612 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %609, i64 %611, i32 51), !dbg !928, !psr.id !935, !verifier.code !63 */
  call $p611 := FStar_UInt128_shift_right($i608, $i610, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* %613 = bitcast i128* %87 to { i64, i64 }*, !dbg !928, !psr.id !936, !verifier.code !63 */
  $p612 := $bitcast.ref.ref($p86);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* %614 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %613, i32 0, i32 0, !dbg !928, !psr.id !937, !verifier.code !63 */
  $p613 := $add.ref($add.ref($p612, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* %615 = extractvalue { i64, i64 } %612, 0, !dbg !928, !psr.id !938, !verifier.code !63 */
  $i614 := $extractvalue.i64($p611, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %615, i64* %614, align 16, !dbg !928, !psr.id !939, !verifier.code !63 */
  $M.84 := $store.i64($M.84, $p613, $i614);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* %616 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %613, i32 0, i32 1, !dbg !928, !psr.id !940, !verifier.code !63 */
  $p615 := $add.ref($add.ref($p612, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* %617 = extractvalue { i64, i64 } %612, 1, !dbg !928, !psr.id !941, !verifier.code !63 */
  $i616 := $extractvalue.i64($p611, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %617, i64* %616, align 8, !dbg !928, !psr.id !942, !verifier.code !63 */
  $M.84 := $store.i64($M.84, $p615, $i616);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  /* %618 = load i128, i128* %87, align 16, !dbg !928, !psr.id !943, !verifier.code !63 */
  $i617 := $load.i128($M.84, $p86);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %618, i128* %88, align 16, !dbg !944, !psr.id !945, !verifier.code !63 */
  $M.85 := $store.i128($M.85, $p87, $i617);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  /* %619 = bitcast i128* %88 to { i64, i64 }*, !dbg !944, !psr.id !946, !verifier.code !63 */
  $p618 := $bitcast.ref.ref($p87);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  /* %620 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %619, i32 0, i32 0, !dbg !944, !psr.id !947, !verifier.code !63 */
  $p619 := $add.ref($add.ref($p618, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  /* %621 = load i64, i64* %620, align 16, !dbg !944, !psr.id !948, !verifier.code !63 */
  $i620 := $load.i64($M.85, $p619);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  /* %622 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %619, i32 0, i32 1, !dbg !944, !psr.id !949, !verifier.code !63 */
  $p621 := $add.ref($add.ref($p618, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  /* %623 = load i64, i64* %622, align 8, !dbg !944, !psr.id !950, !verifier.code !63 */
  $i622 := $load.i64($M.85, $p621);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  /* %624 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %621, i64 %623), !dbg !944, !psr.id !951, !verifier.code !63 */
  call $i623 := FStar_UInt128_uint128_to_uint64($i620, $i622);
  /* call void @llvm.dbg.value(metadata i64 %624, metadata !996, metadata !DIExpression()), !dbg !193, !psr.id !997, !verifier.code !64 */
  call {:cexpr "c4"} boogie_si_record_i64($i623);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 431, 28} true;
  assume {:verifier.code 0} true;
  /* %625 = mul i64 %624, 19, !dbg !954, !psr.id !955, !verifier.code !63 */
  $i624 := $mul.i64($i623, 19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 431, 23} true;
  assume {:verifier.code 0} true;
  /* %626 = add i64 %410, %625, !dbg !956, !psr.id !957, !verifier.code !63 */
  $i625 := $add.i64($i409, $i624);
  /* call void @llvm.dbg.value(metadata i64 %626, metadata !1002, metadata !DIExpression()), !dbg !193, !psr.id !1003, !verifier.code !64 */
  call {:cexpr "l_4"} boogie_si_record_i64($i625);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 432, 24} true;
  assume {:verifier.code 0} true;
  /* %627 = and i64 %626, 2251799813685247, !dbg !960, !psr.id !961, !verifier.code !63 */
  $i626 := $and.i64($i625, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %627, metadata !1006, metadata !DIExpression()), !dbg !193, !psr.id !1007, !verifier.code !64 */
  call {:cexpr "tmp0_"} boogie_si_record_i64($i626);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 433, 21} true;
  assume {:verifier.code 0} true;
  /* %628 = lshr i64 %626, 51, !dbg !964, !psr.id !965, !verifier.code !63 */
  $i627 := $lshr.i64($i625, 51);
  /* call void @llvm.dbg.value(metadata i64 %628, metadata !1010, metadata !DIExpression()), !dbg !193, !psr.id !1011, !verifier.code !64 */
  call {:cexpr "c5"} boogie_si_record_i64($i627);
  /* call void @llvm.dbg.value(metadata i64 %627, metadata !1012, metadata !DIExpression()), !dbg !193, !psr.id !1013, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 435, 22} true;
  assume {:verifier.code 0} true;
  /* %629 = add i64 %459, %628, !dbg !970, !psr.id !971, !verifier.code !63 */
  $i628 := $add.i64($i458, $i627);
  /* call void @llvm.dbg.value(metadata i64 %629, metadata !1016, metadata !DIExpression()), !dbg !193, !psr.id !1017, !verifier.code !64 */
  call {:cexpr "o1"} boogie_si_record_i64($i628);
  /* call void @llvm.dbg.value(metadata i64 %508, metadata !1018, metadata !DIExpression()), !dbg !193, !psr.id !1019, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %557, metadata !1020, metadata !DIExpression()), !dbg !193, !psr.id !1021, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %606, metadata !1022, metadata !DIExpression()), !dbg !193, !psr.id !1023, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 439, 3} true;
  assume {:verifier.code 0} true;
  /* %630 = getelementptr inbounds i64, i64* %0, i64 0, !dbg !980, !psr.id !981, !verifier.code !63 */
  $p629 := $add.ref($p0, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 439, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %627, i64* %630, align 8, !dbg !982, !psr.id !983, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p629, $i626);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 440, 3} true;
  assume {:verifier.code 0} true;
  /* %631 = getelementptr inbounds i64, i64* %0, i64 1, !dbg !984, !psr.id !985, !verifier.code !63 */
  $p630 := $add.ref($p0, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 440, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %629, i64* %631, align 8, !dbg !986, !psr.id !987, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p630, $i628);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 441, 3} true;
  assume {:verifier.code 0} true;
  /* %632 = getelementptr inbounds i64, i64* %0, i64 2, !dbg !988, !psr.id !989, !verifier.code !63 */
  $p631 := $add.ref($p0, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 441, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %508, i64* %632, align 8, !dbg !990, !psr.id !991, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p631, $i507);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 442, 3} true;
  assume {:verifier.code 0} true;
  /* %633 = getelementptr inbounds i64, i64* %0, i64 3, !dbg !992, !psr.id !993, !verifier.code !63 */
  $p632 := $add.ref($p0, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 442, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %557, i64* %633, align 8, !dbg !994, !psr.id !995, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p632, $i556);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 443, 3} true;
  assume {:verifier.code 0} true;
  /* %634 = getelementptr inbounds i64, i64* %0, i64 4, !dbg !996, !psr.id !997, !verifier.code !63 */
  $p633 := $add.ref($p0, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 443, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %606, i64* %634, align 8, !dbg !998, !psr.id !999, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p633, $i605);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 444, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !1000, !psr.id !1001, !verifier.code !63 */
  $exn := false;
  return;
}
const FStar_UInt128_mul_wide: ref;
axiom (FStar_UInt128_mul_wide == $sub.ref(0, 4128));
procedure {:inline 1} FStar_UInt128_mul_wide($i0: i64, $i1: i64)
  returns ($r: ref)
{
  var $p2: ref;
  var $i3: i128;
  var $i4: i128;
  var $i5: i128;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 11} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  assume {:verifier.code 0} true;
  /* %3 = alloca i128, align 16, !psr.id !60, !verifier.code !61 */
  call $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i64 %0, metadata !1051, metadata !DIExpression()), !dbg !1052, !psr.id !1053, !verifier.code !64 */
  call {:cexpr "FStar_UInt128_mul_wide:arg:x"} boogie_si_record_i64($i0);
  /* call void @llvm.dbg.value(metadata i64 %1, metadata !1054, metadata !DIExpression()), !dbg !1052, !psr.id !1055, !verifier.code !64 */
  call {:cexpr "FStar_UInt128_mul_wide:arg:y"} boogie_si_record_i64($i1);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 11} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %4 = zext i64 %0 to i128, !dbg !67, !psr.id !68, !ValueTainted !69, !verifier.code !61 */
  $i3 := $zext.i64.i128($i0);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 28} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %5 = zext i64 %1 to i128, !dbg !70, !psr.id !71, !ValueTainted !69, !verifier.code !61 */
  $i4 := $zext.i64.i128($i1);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 26} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %6 = mul i128 %4, %5, !dbg !72, !psr.id !73, !ValueTainted !69, !verifier.code !61 */
  $i5 := $mul.i128($i3, $i4);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  assume {:verifier.code 0} true;
  /* store i128 %6, i128* %3, align 16, !dbg !74, !psr.id !75, !verifier.code !61 */
  $M.86 := $store.i128($M.86, $p2, $i5);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  assume {:verifier.code 0} true;
  assume {:PointTainted} true;
  /* %7 = bitcast i128* %3 to { i64, i64 }*, !dbg !74, !psr.id !76, !PointTainted !77, !verifier.code !61 */
  $p6 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  /* %8 = getelementptr { i64, i64 }, { i64, i64 }* %7, i32 0, i32 0, !dbg !74 */
  $p7 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  /* %9 = load i64, i64* %8, align 8, !dbg !74 */
  $i8 := $load.i64($M.86, $p7);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  /* %10 = insertvalue { i64, i64 } undef, i64 %9, 0, !dbg !74 */
  assume ($extractvalue.i64($p9, 1) == $extractvalue.i64($u0, 1));
  assume ($extractvalue.i64($p9, 0) == $i8);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  /* %11 = getelementptr { i64, i64 }, { i64, i64 }* %7, i32 0, i32 1, !dbg !74 */
  $p10 := $add.ref($add.ref($p6, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  /* %12 = load i64, i64* %11, align 8, !dbg !74 */
  $i11 := $load.i64($M.86, $p10);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  /* %13 = insertvalue { i64, i64 } %10, i64 %12, 1, !dbg !74 */
  assume ($extractvalue.i64($p12, 0) == $extractvalue.i64($p9, 0));
  assume ($extractvalue.i64($p12, 1) == $i11);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  assume {:verifier.code 0} true;
  /* ret { i64, i64 } %13, !dbg !74, !psr.id !78, !verifier.code !61 */
  $r := $p12;
  $exn := false;
  return;
}
const FStar_UInt128_add: ref;
axiom (FStar_UInt128_add == $sub.ref(0, 5160));
procedure {:inline 1} FStar_UInt128_add($i0: i64, $i1: i64, $i2: i64, $i3: i64)
  returns ($r: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $i10: i128;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i128;
  var $i15: i128;
  var $p16: ref;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 12} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %5 = alloca i128, align 16, !psr.id !60, !verifier.code !61 */
  call $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %6 = alloca i128, align 16, !psr.id !62, !verifier.code !61 */
  call $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %7 = alloca i128, align 16, !psr.id !63, !verifier.code !61 */
  call $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %8 = bitcast i128* %6 to { i64, i64 }*, !psr.id !64, !verifier.code !61 */
  $p7 := $bitcast.ref.ref($p5);
  assume {:verifier.code 0} true;
  /* %9 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 0, !psr.id !65, !verifier.code !61 */
  $p8 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:verifier.code 0} true;
  /* store i64 %0, i64* %9, align 16, !psr.id !66, !verifier.code !61 */
  $M.87 := $store.i64($M.87, $p8, $i0);
  assume {:verifier.code 0} true;
  /* %10 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %8, i32 0, i32 1, !psr.id !67, !verifier.code !61 */
  $p9 := $add.ref($add.ref($p7, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:verifier.code 0} true;
  /* store i64 %1, i64* %10, align 8, !psr.id !68, !verifier.code !61 */
  $M.87 := $store.i64($M.87, $p9, $i1);
  assume {:verifier.code 0} true;
  /* %11 = load i128, i128* %6, align 16, !psr.id !69, !verifier.code !61 */
  $i10 := $load.i128($M.87, $p5);
  assume {:verifier.code 0} true;
  /* %12 = bitcast i128* %7 to { i64, i64 }*, !psr.id !70, !verifier.code !61 */
  $p11 := $bitcast.ref.ref($p6);
  assume {:verifier.code 0} true;
  /* %13 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !psr.id !71, !verifier.code !61 */
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:verifier.code 0} true;
  /* store i64 %2, i64* %13, align 16, !psr.id !72, !verifier.code !61 */
  $M.88 := $store.i64($M.88, $p12, $i2);
  assume {:verifier.code 0} true;
  /* %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !psr.id !73, !verifier.code !61 */
  $p13 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:verifier.code 0} true;
  /* store i64 %3, i64* %14, align 8, !psr.id !74, !verifier.code !61 */
  $M.88 := $store.i64($M.88, $p13, $i3);
  assume {:verifier.code 0} true;
  /* %15 = load i128, i128* %7, align 16, !psr.id !75, !verifier.code !61 */
  $i14 := $load.i128($M.88, $p6);
  /* call void @llvm.dbg.value(metadata i128 %11, metadata !1086, metadata !DIExpression()), !dbg !1087, !psr.id !1088, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %15, metadata !1089, metadata !DIExpression()), !dbg !1087, !psr.id !1090, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 12} true;
  assume {:verifier.code 0} true;
  /* %16 = add i128 %11, %15, !dbg !81, !psr.id !82, !verifier.code !61 */
  $i15 := $add.i128($i10, $i14);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  assume {:verifier.code 0} true;
  /* store i128 %16, i128* %5, align 16, !dbg !83, !psr.id !84, !verifier.code !61 */
  $M.89 := $store.i128($M.89, $p4, $i15);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  assume {:verifier.code 0} true;
  /* %17 = bitcast i128* %5 to { i64, i64 }*, !dbg !83, !psr.id !85, !verifier.code !61 */
  $p16 := $bitcast.ref.ref($p4);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  /* %18 = getelementptr { i64, i64 }, { i64, i64 }* %17, i32 0, i32 0, !dbg !83 */
  $p17 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  /* %19 = load i64, i64* %18, align 8, !dbg !83 */
  $i18 := $load.i64($M.89, $p17);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  /* %20 = insertvalue { i64, i64 } undef, i64 %19, 0, !dbg !83 */
  assume ($extractvalue.i64($p19, 1) == $extractvalue.i64($u0, 1));
  assume ($extractvalue.i64($p19, 0) == $i18);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  /* %21 = getelementptr { i64, i64 }, { i64, i64 }* %17, i32 0, i32 1, !dbg !83 */
  $p20 := $add.ref($add.ref($p16, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  /* %22 = load i64, i64* %21, align 8, !dbg !83 */
  $i21 := $load.i64($M.89, $p20);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  /* %23 = insertvalue { i64, i64 } %20, i64 %22, 1, !dbg !83 */
  assume ($extractvalue.i64($p22, 0) == $extractvalue.i64($p19, 0));
  assume ($extractvalue.i64($p22, 1) == $i21);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  assume {:verifier.code 0} true;
  /* ret { i64, i64 } %23, !dbg !83, !psr.id !86, !verifier.code !61 */
  $r := $p22;
  $exn := false;
  return;
}
const FStar_UInt128_uint64_to_uint128: ref;
axiom (FStar_UInt128_uint64_to_uint128 == $sub.ref(0, 6192));
procedure {:inline 1} FStar_UInt128_uint64_to_uint128($i0: i64)
  returns ($r: ref)
{
  var $p1: ref;
  var $i2: i128;
  var $p3: ref;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 10} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %2 = alloca i128, align 16, !psr.id !60, !verifier.code !61 */
  call $p1 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i64 %0, metadata !1101, metadata !DIExpression()), !dbg !1102, !psr.id !1103, !verifier.code !64 */
  call {:cexpr "FStar_UInt128_uint64_to_uint128:arg:x"} boogie_si_record_i64($i0);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 10} true;
  assume {:verifier.code 0} true;
  /* %3 = zext i64 %0 to i128, !dbg !65, !psr.id !66, !verifier.code !61 */
  $i2 := $zext.i64.i128($i0);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  assume {:verifier.code 0} true;
  /* store i128 %3, i128* %2, align 16, !dbg !67, !psr.id !68, !verifier.code !61 */
  $M.90 := $store.i128($M.90, $p1, $i2);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  assume {:verifier.code 0} true;
  /* %4 = bitcast i128* %2 to { i64, i64 }*, !dbg !67, !psr.id !69, !verifier.code !61 */
  $p3 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  /* %5 = getelementptr { i64, i64 }, { i64, i64 }* %4, i32 0, i32 0, !dbg !67 */
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  /* %6 = load i64, i64* %5, align 8, !dbg !67 */
  $i5 := $load.i64($M.90, $p4);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  /* %7 = insertvalue { i64, i64 } undef, i64 %6, 0, !dbg !67 */
  assume ($extractvalue.i64($p6, 1) == $extractvalue.i64($u0, 1));
  assume ($extractvalue.i64($p6, 0) == $i5);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  /* %8 = getelementptr { i64, i64 }, { i64, i64 }* %4, i32 0, i32 1, !dbg !67 */
  $p7 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  /* %9 = load i64, i64* %8, align 8, !dbg !67 */
  $i8 := $load.i64($M.90, $p7);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  /* %10 = insertvalue { i64, i64 } %7, i64 %9, 1, !dbg !67 */
  assume ($extractvalue.i64($p9, 0) == $extractvalue.i64($p6, 0));
  assume ($extractvalue.i64($p9, 1) == $i8);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  assume {:verifier.code 0} true;
  /* ret { i64, i64 } %10, !dbg !67, !psr.id !70, !verifier.code !61 */
  $r := $p9;
  $exn := false;
  return;
}
const FStar_UInt128_uint128_to_uint64: ref;
axiom (FStar_UInt128_uint128_to_uint64 == $sub.ref(0, 7224));
procedure {:inline 1} FStar_UInt128_uint128_to_uint64($i0: i64, $i1: i64)
  returns ($r: i64)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i128;
  var $i7: i64;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 103, 10} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %3 = alloca i128, align 16, !psr.id !60, !verifier.code !61 */
  call $p2 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %4 = bitcast i128* %3 to { i64, i64 }*, !psr.id !62, !verifier.code !61 */
  $p3 := $bitcast.ref.ref($p2);
  assume {:verifier.code 0} true;
  /* %5 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 0, !psr.id !63, !verifier.code !61 */
  $p4 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:verifier.code 0} true;
  /* store i64 %0, i64* %5, align 16, !psr.id !64, !verifier.code !61 */
  $M.91 := $store.i64($M.91, $p4, $i0);
  assume {:verifier.code 0} true;
  /* %6 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %4, i32 0, i32 1, !psr.id !65, !verifier.code !61 */
  $p5 := $add.ref($add.ref($p3, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:verifier.code 0} true;
  /* store i64 %1, i64* %6, align 8, !psr.id !66, !verifier.code !61 */
  $M.91 := $store.i64($M.91, $p5, $i1);
  assume {:verifier.code 0} true;
  /* %7 = load i128, i128* %3, align 16, !psr.id !67, !verifier.code !61 */
  $i6 := $load.i128($M.91, $p2);
  /* call void @llvm.dbg.value(metadata i128 %7, metadata !1120, metadata !DIExpression()), !dbg !1121, !psr.id !1122, !verifier.code !64 */
  call {:cexpr "x"} boogie_si_record_i128($i6);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 103, 10} true;
  assume {:verifier.code 0} true;
  /* %8 = trunc i128 %7 to i64, !dbg !71, !psr.id !72, !verifier.code !61 */
  $i7 := $trunc.i128.i64($i6);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 103, 3} true;
  assume {:verifier.code 0} true;
  /* ret i64 %8, !dbg !73, !psr.id !74, !verifier.code !61 */
  $r := $i7;
  $exn := false;
  return;
}
const FStar_UInt128_shift_right: ref;
axiom (FStar_UInt128_shift_right == $sub.ref(0, 8256));
procedure {:inline 1} FStar_UInt128_shift_right($i0: i64, $i1: i64, $i2: i32)
  returns ($r: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i128;
  var $i9: i128;
  var $i10: i128;
  var $p11: ref;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 12} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %4 = alloca i128, align 16, !psr.id !60, !verifier.code !61 */
  call $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %5 = alloca i128, align 16, !psr.id !62, !verifier.code !61 */
  call $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %6 = bitcast i128* %5 to { i64, i64 }*, !psr.id !63, !verifier.code !61 */
  $p5 := $bitcast.ref.ref($p4);
  assume {:verifier.code 0} true;
  /* %7 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 0, !psr.id !64, !verifier.code !61 */
  $p6 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:verifier.code 0} true;
  /* store i64 %0, i64* %7, align 16, !psr.id !65, !verifier.code !61 */
  $M.92 := $store.i64($M.92, $p6, $i0);
  assume {:verifier.code 0} true;
  /* %8 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %6, i32 0, i32 1, !psr.id !66, !verifier.code !61 */
  $p7 := $add.ref($add.ref($p5, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:verifier.code 0} true;
  /* store i64 %1, i64* %8, align 8, !psr.id !67, !verifier.code !61 */
  $M.92 := $store.i64($M.92, $p7, $i1);
  assume {:verifier.code 0} true;
  /* %9 = load i128, i128* %5, align 16, !psr.id !68, !verifier.code !61 */
  $i8 := $load.i128($M.92, $p4);
  /* call void @llvm.dbg.value(metadata i128 %9, metadata !1138, metadata !DIExpression()), !dbg !1139, !psr.id !1140, !verifier.code !64 */
  call {:cexpr "x"} boogie_si_record_i128($i8);
  /* call void @llvm.dbg.value(metadata i32 %2, metadata !1141, metadata !DIExpression()), !dbg !1139, !psr.id !1142, !verifier.code !64 */
  call {:cexpr "FStar_UInt128_shift_right:arg:y"} boogie_si_record_i32($i2);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 12} true;
  assume {:verifier.code 0} true;
  /* %10 = zext i32 %2 to i128, !dbg !74, !psr.id !75, !verifier.code !61 */
  $i9 := $zext.i32.i128($i2);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 12} true;
  assume {:verifier.code 0} true;
  /* %11 = lshr i128 %9, %10, !dbg !74, !psr.id !76, !verifier.code !61 */
  $i10 := $lshr.i128($i8, $i9);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  assume {:verifier.code 0} true;
  /* store i128 %11, i128* %4, align 16, !dbg !77, !psr.id !78, !verifier.code !61 */
  $M.93 := $store.i128($M.93, $p3, $i10);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  assume {:verifier.code 0} true;
  /* %12 = bitcast i128* %4 to { i64, i64 }*, !dbg !77, !psr.id !79, !verifier.code !61 */
  $p11 := $bitcast.ref.ref($p3);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  /* %13 = getelementptr { i64, i64 }, { i64, i64 }* %12, i32 0, i32 0, !dbg !77 */
  $p12 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  /* %14 = load i64, i64* %13, align 8, !dbg !77 */
  $i13 := $load.i64($M.93, $p12);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  /* %15 = insertvalue { i64, i64 } undef, i64 %14, 0, !dbg !77 */
  assume ($extractvalue.i64($p14, 1) == $extractvalue.i64($u0, 1));
  assume ($extractvalue.i64($p14, 0) == $i13);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  /* %16 = getelementptr { i64, i64 }, { i64, i64 }* %12, i32 0, i32 1, !dbg !77 */
  $p15 := $add.ref($add.ref($p11, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  /* %17 = load i64, i64* %16, align 8, !dbg !77 */
  $i16 := $load.i64($M.93, $p15);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  /* %18 = insertvalue { i64, i64 } %15, i64 %17, 1, !dbg !77 */
  assume ($extractvalue.i64($p17, 0) == $extractvalue.i64($p14, 0));
  assume ($extractvalue.i64($p17, 1) == $i16);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  assume {:verifier.code 0} true;
  /* ret { i64, i64 } %18, !dbg !77, !psr.id !80, !verifier.code !61 */
  $r := $p17;
  $exn := false;
  return;
}
const Hacl_Curve25519_51_finv: ref;
axiom (Hacl_Curve25519_51_finv == $sub.ref(0, 9288));
procedure {:inline 1} Hacl_Curve25519_51_finv($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 176, 12} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %4 = alloca [20 x i64], align 16, !psr.id !61, !verifier.code !62 */
  call $p3 := $alloc($mul.ref(160, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !1152, metadata !DIExpression()), !dbg !1153, !psr.id !1154, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !1155, metadata !DIExpression()), !dbg !1153, !psr.id !1156, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128* %2, metadata !1157, metadata !DIExpression()), !dbg !1153, !psr.id !1158, !verifier.code !64 */
  /* call void @llvm.dbg.declare(metadata [20 x i64]* %4, metadata !1159, metadata !DIExpression()), !dbg !1163, !psr.id !1164, !verifier.code !64 */
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 176, 12} true;
  assume {:verifier.code 0} true;
  /* %5 = bitcast [20 x i64]* %4 to i8*, !dbg !74, !psr.id !76, !verifier.code !62 */
  $p4 := $bitcast.ref.ref($p3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 176, 12} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.memset.p0i8.i64(i8* align 16 %5, i8 0, i64 160, i1 false), !dbg !74, !psr.id !77, !verifier.code !62 */
  call $M.0 := $memset.i8($M.0, $p4, 0, 160, false);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 177, 18} true;
  assume {:verifier.code 0} true;
  /* %6 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 0, !dbg !78, !psr.id !79, !verifier.code !62 */
  $p5 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %6, metadata !1169, metadata !DIExpression()), !dbg !1153, !psr.id !1170, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 178, 18} true;
  assume {:verifier.code 0} true;
  /* %7 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 0, !dbg !82, !psr.id !83, !verifier.code !62 */
  $p6 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 8));
  /* %8 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 5 */
  $p7 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(5, 8));
  /* call void @llvm.dbg.value(metadata i64* %8, metadata !1173, metadata !DIExpression()), !dbg !1153, !psr.id !1174, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 179, 20} true;
  assume {:verifier.code 0} true;
  /* %9 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 0, !dbg !86, !psr.id !87, !verifier.code !62 */
  $p8 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 8));
  /* %10 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 15 */
  $p9 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(15, 8));
  /* call void @llvm.dbg.value(metadata i64* %10, metadata !1177, metadata !DIExpression()), !dbg !1153, !psr.id !1178, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128* %2, metadata !1179, metadata !DIExpression()), !dbg !1153, !psr.id !1180, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 181, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_fsquare_times(i64* %6, i64* %1, i128* %2, i32 1), !dbg !92, !psr.id !93, !verifier.code !62 */
  call Hacl_Curve25519_51_fsquare_times($p5, $p1, $p2, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 182, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_fsquare_times(i64* %10, i64* %6, i128* %2, i32 2), !dbg !94, !psr.id !95, !verifier.code !62 */
  call Hacl_Curve25519_51_fsquare_times($p9, $p5, $p2, 2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 183, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %8, i64* %10, i64* %1, i128* %2), !dbg !96, !psr.id !97, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_fmul($p7, $p9, $p1, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 184, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %6, i64* %8, i64* %6, i128* %2), !dbg !98, !psr.id !99, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_fmul($p5, $p7, $p5, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 185, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_fsquare_times(i64* %10, i64* %6, i128* %2, i32 1), !dbg !100, !psr.id !101, !verifier.code !62 */
  call Hacl_Curve25519_51_fsquare_times($p9, $p5, $p2, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 186, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %8, i64* %10, i64* %8, i128* %2), !dbg !102, !psr.id !103, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_fmul($p7, $p9, $p7, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 187, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_fsquare_times(i64* %10, i64* %8, i128* %2, i32 5), !dbg !104, !psr.id !105, !verifier.code !62 */
  call Hacl_Curve25519_51_fsquare_times($p9, $p7, $p2, 5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 188, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %8, i64* %10, i64* %8, i128* %2), !dbg !106, !psr.id !107, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_fmul($p7, $p9, $p7, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 189, 19} true;
  assume {:verifier.code 0} true;
  /* %11 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 0, !dbg !108, !psr.id !109, !verifier.code !62 */
  $p10 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 8));
  /* %12 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 5 */
  $p11 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(5, 8));
  /* call void @llvm.dbg.value(metadata i64* %12, metadata !1199, metadata !DIExpression()), !dbg !1153, !psr.id !1200, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 190, 19} true;
  assume {:verifier.code 0} true;
  /* %13 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 0, !dbg !112, !psr.id !113, !verifier.code !62 */
  $p12 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 8));
  /* %14 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 10 */
  $p13 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(10, 8));
  /* call void @llvm.dbg.value(metadata i64* %14, metadata !1203, metadata !DIExpression()), !dbg !1153, !psr.id !1204, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 191, 20} true;
  assume {:verifier.code 0} true;
  /* %15 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 0, !dbg !116, !psr.id !117, !verifier.code !62 */
  $p14 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 8));
  /* %16 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 15 */
  $p15 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(15, 8));
  /* call void @llvm.dbg.value(metadata i64* %16, metadata !1207, metadata !DIExpression()), !dbg !1153, !psr.id !1208, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128* %2, metadata !1209, metadata !DIExpression()), !dbg !1153, !psr.id !1210, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 193, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_fsquare_times(i64* %16, i64* %12, i128* %2, i32 10), !dbg !122, !psr.id !123, !verifier.code !62 */
  call Hacl_Curve25519_51_fsquare_times($p15, $p11, $p2, 10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 194, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %14, i64* %16, i64* %12, i128* %2), !dbg !124, !psr.id !125, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_fmul($p13, $p15, $p11, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 195, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_fsquare_times(i64* %16, i64* %14, i128* %2, i32 20), !dbg !126, !psr.id !127, !verifier.code !62 */
  call Hacl_Curve25519_51_fsquare_times($p15, $p13, $p2, 20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 196, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %16, i64* %16, i64* %14, i128* %2), !dbg !128, !psr.id !129, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_fmul($p15, $p15, $p13, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 197, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_fsquare_times(i64* %16, i64* %16, i128* %2, i32 10), !dbg !130, !psr.id !131, !verifier.code !62 */
  call Hacl_Curve25519_51_fsquare_times($p15, $p15, $p2, 10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 198, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %12, i64* %16, i64* %12, i128* %2), !dbg !132, !psr.id !133, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_fmul($p11, $p15, $p11, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 199, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_fsquare_times(i64* %16, i64* %12, i128* %2, i32 50), !dbg !134, !psr.id !135, !verifier.code !62 */
  call Hacl_Curve25519_51_fsquare_times($p15, $p11, $p2, 50);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 200, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %14, i64* %16, i64* %12, i128* %2), !dbg !136, !psr.id !137, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_fmul($p13, $p15, $p11, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 201, 19} true;
  assume {:verifier.code 0} true;
  /* %17 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 0, !dbg !138, !psr.id !139, !verifier.code !62 */
  $p16 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 8));
  /* %18 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 5 */
  $p17 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(5, 8));
  /* call void @llvm.dbg.value(metadata i64* %18, metadata !1229, metadata !DIExpression()), !dbg !1153, !psr.id !1230, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 202, 18} true;
  assume {:verifier.code 0} true;
  /* %19 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 0, !dbg !142, !psr.id !143, !verifier.code !62 */
  $p18 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 8));
  /* %20 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 10 */
  $p19 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(10, 8));
  /* call void @llvm.dbg.value(metadata i64* %20, metadata !1233, metadata !DIExpression()), !dbg !1153, !psr.id !1234, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 203, 19} true;
  assume {:verifier.code 0} true;
  /* %21 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 0, !dbg !146, !psr.id !147, !verifier.code !62 */
  $p20 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 8));
  /* %22 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 15 */
  $p21 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(15, 8));
  /* call void @llvm.dbg.value(metadata i64* %22, metadata !1237, metadata !DIExpression()), !dbg !1153, !psr.id !1238, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128* %2, metadata !1239, metadata !DIExpression()), !dbg !1153, !psr.id !1240, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 205, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_fsquare_times(i64* %22, i64* %20, i128* %2, i32 100), !dbg !152, !psr.id !153, !verifier.code !62 */
  call Hacl_Curve25519_51_fsquare_times($p21, $p19, $p2, 100);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 206, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %22, i64* %22, i64* %20, i128* %2), !dbg !154, !psr.id !155, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_fmul($p21, $p21, $p19, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 207, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_fsquare_times(i64* %22, i64* %22, i128* %2, i32 50), !dbg !156, !psr.id !157, !verifier.code !62 */
  call Hacl_Curve25519_51_fsquare_times($p21, $p21, $p2, 50);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 208, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %22, i64* %22, i64* %18, i128* %2), !dbg !158, !psr.id !159, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_fmul($p21, $p21, $p17, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 209, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_fsquare_times(i64* %22, i64* %22, i128* %2, i32 5), !dbg !160, !psr.id !161, !verifier.code !62 */
  call Hacl_Curve25519_51_fsquare_times($p21, $p21, $p2, 5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 210, 17} true;
  assume {:verifier.code 0} true;
  /* %23 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 0, !dbg !162, !psr.id !163, !verifier.code !62 */
  $p22 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %23, metadata !1253, metadata !DIExpression()), !dbg !1153, !psr.id !1254, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 211, 18} true;
  assume {:verifier.code 0} true;
  /* %24 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 0, !dbg !166, !psr.id !167, !verifier.code !62 */
  $p23 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 8));
  /* %25 = getelementptr inbounds [20 x i64], [20 x i64]* %4, i64 0, i64 15 */
  $p24 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(15, 8));
  /* call void @llvm.dbg.value(metadata i64* %25, metadata !1257, metadata !DIExpression()), !dbg !1153, !psr.id !1258, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 212, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %0, i64* %25, i64* %23, i128* %2), !dbg !170, !psr.id !171, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_fmul($p0, $p24, $p22, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 213, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !172, !psr.id !173, !verifier.code !62 */
  $exn := false;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0, 10320));
procedure {:inline 1} llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0, 11352));
procedure {:inline 1} llvm.memset.p0i8.i64($p0: ref, $i1: i8, $i2: i64, $i3: i1);
const Hacl_Impl_Curve25519_Field51_fmul: ref;
axiom (Hacl_Impl_Curve25519_Field51_fmul == $sub.ref(0, 12384));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fmul($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $i130: i64;
  var $p131: ref;
  var $i132: i64;
  var $p133: ref;
  var $i134: i64;
  var $p135: ref;
  var $i136: i64;
  var $p137: ref;
  var $i138: i64;
  var $p139: ref;
  var $i140: i64;
  var $p141: ref;
  var $i142: i64;
  var $p143: ref;
  var $i144: i64;
  var $p145: ref;
  var $i146: i64;
  var $p147: ref;
  var $i148: i64;
  var $i149: i64;
  var $i150: i64;
  var $i151: i64;
  var $i152: i64;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $p157: ref;
  var $i158: i64;
  var $i159: i128;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $i163: i64;
  var $p164: ref;
  var $i165: i64;
  var $i166: i128;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $i170: i64;
  var $p171: ref;
  var $i172: i64;
  var $i173: i128;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $i177: i64;
  var $p178: ref;
  var $i179: i64;
  var $i180: i128;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $i184: i64;
  var $p185: ref;
  var $i186: i64;
  var $i187: i128;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $i191: i64;
  var $p192: ref;
  var $i193: i64;
  var $i194: i128;
  var $p195: ref;
  var $p196: ref;
  var $i197: i64;
  var $p198: ref;
  var $i199: i64;
  var $p200: ref;
  var $p201: ref;
  var $i202: i64;
  var $p203: ref;
  var $i204: i64;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $i208: i64;
  var $p209: ref;
  var $i210: i64;
  var $i211: i128;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $i215: i64;
  var $p216: ref;
  var $i217: i64;
  var $i218: i128;
  var $p219: ref;
  var $p220: ref;
  var $i221: i64;
  var $p222: ref;
  var $i223: i64;
  var $p224: ref;
  var $p225: ref;
  var $i226: i64;
  var $p227: ref;
  var $i228: i64;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $i232: i64;
  var $p233: ref;
  var $i234: i64;
  var $i235: i128;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $i239: i64;
  var $p240: ref;
  var $i241: i64;
  var $i242: i128;
  var $p243: ref;
  var $p244: ref;
  var $i245: i64;
  var $p246: ref;
  var $i247: i64;
  var $p248: ref;
  var $p249: ref;
  var $i250: i64;
  var $p251: ref;
  var $i252: i64;
  var $p253: ref;
  var $p254: ref;
  var $p255: ref;
  var $i256: i64;
  var $p257: ref;
  var $i258: i64;
  var $i259: i128;
  var $p260: ref;
  var $p261: ref;
  var $p262: ref;
  var $i263: i64;
  var $p264: ref;
  var $i265: i64;
  var $i266: i128;
  var $p267: ref;
  var $p268: ref;
  var $i269: i64;
  var $p270: ref;
  var $i271: i64;
  var $p272: ref;
  var $p273: ref;
  var $i274: i64;
  var $p275: ref;
  var $i276: i64;
  var $p277: ref;
  var $p278: ref;
  var $p279: ref;
  var $i280: i64;
  var $p281: ref;
  var $i282: i64;
  var $i283: i128;
  var $p284: ref;
  var $p285: ref;
  var $p286: ref;
  var $i287: i64;
  var $p288: ref;
  var $i289: i64;
  var $i290: i128;
  var $p291: ref;
  var $p292: ref;
  var $i293: i64;
  var $p294: ref;
  var $i295: i64;
  var $p296: ref;
  var $p297: ref;
  var $i298: i64;
  var $p299: ref;
  var $i300: i64;
  var $p301: ref;
  var $p302: ref;
  var $p303: ref;
  var $i304: i64;
  var $p305: ref;
  var $i306: i64;
  var $i307: i128;
  var $p308: ref;
  var $p309: ref;
  var $p310: ref;
  var $i311: i64;
  var $p312: ref;
  var $i313: i64;
  var $i314: i128;
  var $p315: ref;
  var $p316: ref;
  var $i317: i64;
  var $p318: ref;
  var $i319: i64;
  var $p320: ref;
  var $p321: ref;
  var $i322: i64;
  var $p323: ref;
  var $i324: i64;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $i328: i64;
  var $p329: ref;
  var $i330: i64;
  var $i331: i128;
  var $p332: ref;
  var $p333: ref;
  var $p334: ref;
  var $i335: i64;
  var $p336: ref;
  var $i337: i64;
  var $i338: i128;
  var $p339: ref;
  var $p340: ref;
  var $i341: i64;
  var $p342: ref;
  var $i343: i64;
  var $p344: ref;
  var $p345: ref;
  var $i346: i64;
  var $p347: ref;
  var $i348: i64;
  var $p349: ref;
  var $p350: ref;
  var $p351: ref;
  var $i352: i64;
  var $p353: ref;
  var $i354: i64;
  var $i355: i128;
  var $p356: ref;
  var $p357: ref;
  var $p358: ref;
  var $i359: i64;
  var $p360: ref;
  var $i361: i64;
  var $i362: i128;
  var $p363: ref;
  var $p364: ref;
  var $i365: i64;
  var $p366: ref;
  var $i367: i64;
  var $p368: ref;
  var $p369: ref;
  var $i370: i64;
  var $p371: ref;
  var $i372: i64;
  var $p373: ref;
  var $p374: ref;
  var $p375: ref;
  var $i376: i64;
  var $p377: ref;
  var $i378: i64;
  var $i379: i128;
  var $p380: ref;
  var $p381: ref;
  var $p382: ref;
  var $i383: i64;
  var $p384: ref;
  var $i385: i64;
  var $i386: i128;
  var $p387: ref;
  var $p388: ref;
  var $i389: i64;
  var $p390: ref;
  var $i391: i64;
  var $p392: ref;
  var $p393: ref;
  var $i394: i64;
  var $p395: ref;
  var $i396: i64;
  var $p397: ref;
  var $p398: ref;
  var $p399: ref;
  var $i400: i64;
  var $p401: ref;
  var $i402: i64;
  var $i403: i128;
  var $p404: ref;
  var $p405: ref;
  var $p406: ref;
  var $i407: i64;
  var $p408: ref;
  var $i409: i64;
  var $i410: i128;
  var $p411: ref;
  var $p412: ref;
  var $i413: i64;
  var $p414: ref;
  var $i415: i64;
  var $p416: ref;
  var $p417: ref;
  var $i418: i64;
  var $p419: ref;
  var $i420: i64;
  var $p421: ref;
  var $p422: ref;
  var $p423: ref;
  var $i424: i64;
  var $p425: ref;
  var $i426: i64;
  var $i427: i128;
  var $p428: ref;
  var $p429: ref;
  var $p430: ref;
  var $i431: i64;
  var $p432: ref;
  var $i433: i64;
  var $i434: i128;
  var $p435: ref;
  var $p436: ref;
  var $i437: i64;
  var $p438: ref;
  var $i439: i64;
  var $p440: ref;
  var $p441: ref;
  var $i442: i64;
  var $p443: ref;
  var $i444: i64;
  var $p445: ref;
  var $p446: ref;
  var $p447: ref;
  var $i448: i64;
  var $p449: ref;
  var $i450: i64;
  var $i451: i128;
  var $p452: ref;
  var $p453: ref;
  var $p454: ref;
  var $i455: i64;
  var $p456: ref;
  var $i457: i64;
  var $i458: i128;
  var $p459: ref;
  var $p460: ref;
  var $i461: i64;
  var $p462: ref;
  var $i463: i64;
  var $p464: ref;
  var $p465: ref;
  var $i466: i64;
  var $p467: ref;
  var $i468: i64;
  var $p469: ref;
  var $p470: ref;
  var $p471: ref;
  var $i472: i64;
  var $p473: ref;
  var $i474: i64;
  var $i475: i128;
  var $p476: ref;
  var $p477: ref;
  var $p478: ref;
  var $i479: i64;
  var $p480: ref;
  var $i481: i64;
  var $i482: i128;
  var $p483: ref;
  var $p484: ref;
  var $i485: i64;
  var $p486: ref;
  var $i487: i64;
  var $p488: ref;
  var $p489: ref;
  var $i490: i64;
  var $p491: ref;
  var $i492: i64;
  var $p493: ref;
  var $p494: ref;
  var $p495: ref;
  var $i496: i64;
  var $p497: ref;
  var $i498: i64;
  var $i499: i128;
  var $p500: ref;
  var $p501: ref;
  var $p502: ref;
  var $i503: i64;
  var $p504: ref;
  var $i505: i64;
  var $i506: i128;
  var $p507: ref;
  var $p508: ref;
  var $i509: i64;
  var $p510: ref;
  var $i511: i64;
  var $p512: ref;
  var $p513: ref;
  var $i514: i64;
  var $p515: ref;
  var $i516: i64;
  var $p517: ref;
  var $p518: ref;
  var $p519: ref;
  var $i520: i64;
  var $p521: ref;
  var $i522: i64;
  var $i523: i128;
  var $p524: ref;
  var $p525: ref;
  var $p526: ref;
  var $i527: i64;
  var $p528: ref;
  var $i529: i64;
  var $i530: i128;
  var $p531: ref;
  var $p532: ref;
  var $i533: i64;
  var $p534: ref;
  var $i535: i64;
  var $p536: ref;
  var $p537: ref;
  var $i538: i64;
  var $p539: ref;
  var $i540: i64;
  var $p541: ref;
  var $p542: ref;
  var $p543: ref;
  var $i544: i64;
  var $p545: ref;
  var $i546: i64;
  var $i547: i128;
  var $p548: ref;
  var $p549: ref;
  var $p550: ref;
  var $i551: i64;
  var $p552: ref;
  var $i553: i64;
  var $i554: i128;
  var $p555: ref;
  var $p556: ref;
  var $i557: i64;
  var $p558: ref;
  var $i559: i64;
  var $p560: ref;
  var $p561: ref;
  var $i562: i64;
  var $p563: ref;
  var $i564: i64;
  var $p565: ref;
  var $p566: ref;
  var $p567: ref;
  var $i568: i64;
  var $p569: ref;
  var $i570: i64;
  var $i571: i128;
  var $p572: ref;
  var $p573: ref;
  var $p574: ref;
  var $i575: i64;
  var $p576: ref;
  var $i577: i64;
  var $i578: i128;
  var $p579: ref;
  var $p580: ref;
  var $i581: i64;
  var $p582: ref;
  var $i583: i64;
  var $p584: ref;
  var $p585: ref;
  var $i586: i64;
  var $p587: ref;
  var $i588: i64;
  var $p589: ref;
  var $p590: ref;
  var $p591: ref;
  var $i592: i64;
  var $p593: ref;
  var $i594: i64;
  var $i595: i128;
  var $p596: ref;
  var $p597: ref;
  var $p598: ref;
  var $i599: i64;
  var $p600: ref;
  var $i601: i64;
  var $i602: i128;
  var $p603: ref;
  var $p604: ref;
  var $i605: i64;
  var $p606: ref;
  var $i607: i64;
  var $p608: ref;
  var $p609: ref;
  var $i610: i64;
  var $p611: ref;
  var $i612: i64;
  var $p613: ref;
  var $p614: ref;
  var $p615: ref;
  var $i616: i64;
  var $p617: ref;
  var $i618: i64;
  var $i619: i128;
  var $p620: ref;
  var $p621: ref;
  var $p622: ref;
  var $i623: i64;
  var $p624: ref;
  var $i625: i64;
  var $i626: i128;
  var $p627: ref;
  var $p628: ref;
  var $i629: i64;
  var $p630: ref;
  var $i631: i64;
  var $p632: ref;
  var $p633: ref;
  var $i634: i64;
  var $p635: ref;
  var $i636: i64;
  var $p637: ref;
  var $p638: ref;
  var $p639: ref;
  var $i640: i64;
  var $p641: ref;
  var $i642: i64;
  var $i643: i128;
  var $p644: ref;
  var $p645: ref;
  var $p646: ref;
  var $i647: i64;
  var $p648: ref;
  var $i649: i64;
  var $i650: i128;
  var $p651: ref;
  var $p652: ref;
  var $i653: i64;
  var $p654: ref;
  var $i655: i64;
  var $p656: ref;
  var $p657: ref;
  var $i658: i64;
  var $p659: ref;
  var $i660: i64;
  var $p661: ref;
  var $p662: ref;
  var $p663: ref;
  var $i664: i64;
  var $p665: ref;
  var $i666: i64;
  var $i667: i128;
  var $p668: ref;
  var $p669: ref;
  var $p670: ref;
  var $i671: i64;
  var $p672: ref;
  var $i673: i64;
  var $i674: i128;
  var $p675: ref;
  var $p676: ref;
  var $i677: i64;
  var $p678: ref;
  var $i679: i64;
  var $p680: ref;
  var $p681: ref;
  var $i682: i64;
  var $p683: ref;
  var $i684: i64;
  var $p685: ref;
  var $p686: ref;
  var $p687: ref;
  var $i688: i64;
  var $p689: ref;
  var $i690: i64;
  var $i691: i128;
  var $p692: ref;
  var $p693: ref;
  var $i694: i64;
  var $p695: ref;
  var $i696: i64;
  var $i697: i64;
  var $i698: i64;
  var $p699: ref;
  var $p700: ref;
  var $i701: i64;
  var $p702: ref;
  var $i703: i64;
  var $p704: ref;
  var $p705: ref;
  var $p706: ref;
  var $i707: i64;
  var $p708: ref;
  var $i709: i64;
  var $i710: i128;
  var $p711: ref;
  var $p712: ref;
  var $i713: i64;
  var $p714: ref;
  var $i715: i64;
  var $i716: i64;
  var $p717: ref;
  var $p718: ref;
  var $p719: ref;
  var $i720: i64;
  var $p721: ref;
  var $i722: i64;
  var $i723: i128;
  var $p724: ref;
  var $p725: ref;
  var $i726: i64;
  var $p727: ref;
  var $i728: i64;
  var $p729: ref;
  var $p730: ref;
  var $i731: i64;
  var $p732: ref;
  var $i733: i64;
  var $p734: ref;
  var $p735: ref;
  var $p736: ref;
  var $i737: i64;
  var $p738: ref;
  var $i739: i64;
  var $i740: i128;
  var $p741: ref;
  var $p742: ref;
  var $i743: i64;
  var $p744: ref;
  var $i745: i64;
  var $i746: i64;
  var $i747: i64;
  var $p748: ref;
  var $p749: ref;
  var $i750: i64;
  var $p751: ref;
  var $i752: i64;
  var $p753: ref;
  var $p754: ref;
  var $p755: ref;
  var $i756: i64;
  var $p757: ref;
  var $i758: i64;
  var $i759: i128;
  var $p760: ref;
  var $p761: ref;
  var $i762: i64;
  var $p763: ref;
  var $i764: i64;
  var $i765: i64;
  var $p766: ref;
  var $p767: ref;
  var $p768: ref;
  var $i769: i64;
  var $p770: ref;
  var $i771: i64;
  var $i772: i128;
  var $p773: ref;
  var $p774: ref;
  var $i775: i64;
  var $p776: ref;
  var $i777: i64;
  var $p778: ref;
  var $p779: ref;
  var $i780: i64;
  var $p781: ref;
  var $i782: i64;
  var $p783: ref;
  var $p784: ref;
  var $p785: ref;
  var $i786: i64;
  var $p787: ref;
  var $i788: i64;
  var $i789: i128;
  var $p790: ref;
  var $p791: ref;
  var $i792: i64;
  var $p793: ref;
  var $i794: i64;
  var $i795: i64;
  var $i796: i64;
  var $p797: ref;
  var $p798: ref;
  var $i799: i64;
  var $p800: ref;
  var $i801: i64;
  var $p802: ref;
  var $p803: ref;
  var $p804: ref;
  var $i805: i64;
  var $p806: ref;
  var $i807: i64;
  var $i808: i128;
  var $p809: ref;
  var $p810: ref;
  var $i811: i64;
  var $p812: ref;
  var $i813: i64;
  var $i814: i64;
  var $p815: ref;
  var $p816: ref;
  var $p817: ref;
  var $i818: i64;
  var $p819: ref;
  var $i820: i64;
  var $i821: i128;
  var $p822: ref;
  var $p823: ref;
  var $i824: i64;
  var $p825: ref;
  var $i826: i64;
  var $p827: ref;
  var $p828: ref;
  var $i829: i64;
  var $p830: ref;
  var $i831: i64;
  var $p832: ref;
  var $p833: ref;
  var $p834: ref;
  var $i835: i64;
  var $p836: ref;
  var $i837: i64;
  var $i838: i128;
  var $p839: ref;
  var $p840: ref;
  var $i841: i64;
  var $p842: ref;
  var $i843: i64;
  var $i844: i64;
  var $i845: i64;
  var $p846: ref;
  var $p847: ref;
  var $i848: i64;
  var $p849: ref;
  var $i850: i64;
  var $p851: ref;
  var $p852: ref;
  var $p853: ref;
  var $i854: i64;
  var $p855: ref;
  var $i856: i64;
  var $i857: i128;
  var $p858: ref;
  var $p859: ref;
  var $i860: i64;
  var $p861: ref;
  var $i862: i64;
  var $i863: i64;
  var $p864: ref;
  var $p865: ref;
  var $p866: ref;
  var $i867: i64;
  var $p868: ref;
  var $i869: i64;
  var $i870: i128;
  var $p871: ref;
  var $p872: ref;
  var $i873: i64;
  var $p874: ref;
  var $i875: i64;
  var $p876: ref;
  var $p877: ref;
  var $i878: i64;
  var $p879: ref;
  var $i880: i64;
  var $p881: ref;
  var $p882: ref;
  var $p883: ref;
  var $i884: i64;
  var $p885: ref;
  var $i886: i64;
  var $i887: i128;
  var $p888: ref;
  var $p889: ref;
  var $i890: i64;
  var $p891: ref;
  var $i892: i64;
  var $i893: i64;
  var $i894: i64;
  var $p895: ref;
  var $p896: ref;
  var $i897: i64;
  var $p898: ref;
  var $i899: i64;
  var $p900: ref;
  var $p901: ref;
  var $p902: ref;
  var $i903: i64;
  var $p904: ref;
  var $i905: i64;
  var $i906: i128;
  var $p907: ref;
  var $p908: ref;
  var $i909: i64;
  var $p910: ref;
  var $i911: i64;
  var $i912: i64;
  var $i913: i64;
  var $i914: i64;
  var $i915: i64;
  var $i916: i64;
  var $i917: i64;
  var $p918: ref;
  var $p919: ref;
  var $p920: ref;
  var $p921: ref;
  var $p922: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 87, 18} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %5 = alloca i128, align 16, !psr.id !62, !verifier.code !63 */
  call $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %6 = alloca i128, align 16, !psr.id !64, !verifier.code !63 */
  call $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %7 = alloca i128, align 16, !psr.id !65, !verifier.code !63 */
  call $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %8 = alloca i128, align 16, !psr.id !66, !verifier.code !63 */
  call $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %9 = alloca i128, align 16, !psr.id !67, !verifier.code !63 */
  call $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %10 = alloca i128, align 16, !psr.id !68, !verifier.code !63 */
  call $p9 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %11 = alloca i128, align 16, !psr.id !69, !verifier.code !63 */
  call $p10 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %12 = alloca i128, align 16, !psr.id !70, !verifier.code !63 */
  call $p11 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %13 = alloca i128, align 16, !psr.id !71, !verifier.code !63 */
  call $p12 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %14 = alloca i128, align 16, !psr.id !72, !verifier.code !63 */
  call $p13 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %15 = alloca i128, align 16, !psr.id !73, !verifier.code !63 */
  call $p14 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %16 = alloca i128, align 16, !psr.id !74, !verifier.code !63 */
  call $p15 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %17 = alloca i128, align 16, !psr.id !75, !verifier.code !63 */
  call $p16 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %18 = alloca i128, align 16, !psr.id !76, !verifier.code !63 */
  call $p17 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %19 = alloca i128, align 16, !psr.id !77, !verifier.code !63 */
  call $p18 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %20 = alloca i128, align 16, !psr.id !78, !verifier.code !63 */
  call $p19 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %21 = alloca i128, align 16, !psr.id !79, !verifier.code !63 */
  call $p20 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %22 = alloca i128, align 16, !psr.id !80, !verifier.code !63 */
  call $p21 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %23 = alloca i128, align 16, !psr.id !81, !verifier.code !63 */
  call $p22 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %24 = alloca i128, align 16, !psr.id !82, !verifier.code !63 */
  call $p23 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %25 = alloca i128, align 16, !psr.id !83, !verifier.code !63 */
  call $p24 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %26 = alloca i128, align 16, !psr.id !84, !verifier.code !63 */
  call $p25 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %27 = alloca i128, align 16, !psr.id !85, !verifier.code !63 */
  call $p26 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %28 = alloca i128, align 16, !psr.id !86, !verifier.code !63 */
  call $p27 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %29 = alloca i128, align 16, !psr.id !87, !verifier.code !63 */
  call $p28 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %30 = alloca i128, align 16, !psr.id !88, !verifier.code !63 */
  call $p29 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %31 = alloca i128, align 16, !psr.id !89, !verifier.code !63 */
  call $p30 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %32 = alloca i128, align 16, !psr.id !90, !verifier.code !63 */
  call $p31 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %33 = alloca i128, align 16, !psr.id !91, !verifier.code !63 */
  call $p32 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %34 = alloca i128, align 16, !psr.id !92, !verifier.code !63 */
  call $p33 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %35 = alloca i128, align 16, !psr.id !93, !verifier.code !63 */
  call $p34 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %36 = alloca i128, align 16, !psr.id !94, !verifier.code !63 */
  call $p35 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %37 = alloca i128, align 16, !psr.id !95, !verifier.code !63 */
  call $p36 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %38 = alloca i128, align 16, !psr.id !96, !verifier.code !63 */
  call $p37 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %39 = alloca i128, align 16, !psr.id !97, !verifier.code !63 */
  call $p38 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %40 = alloca i128, align 16, !psr.id !98, !verifier.code !63 */
  call $p39 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %41 = alloca i128, align 16, !psr.id !99, !verifier.code !63 */
  call $p40 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %42 = alloca i128, align 16, !psr.id !100, !verifier.code !63 */
  call $p41 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %43 = alloca i128, align 16, !psr.id !101, !verifier.code !63 */
  call $p42 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %44 = alloca i128, align 16, !psr.id !102, !verifier.code !63 */
  call $p43 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %45 = alloca i128, align 16, !psr.id !103, !verifier.code !63 */
  call $p44 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %46 = alloca i128, align 16, !psr.id !104, !verifier.code !63 */
  call $p45 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %47 = alloca i128, align 16, !psr.id !105, !verifier.code !63 */
  call $p46 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %48 = alloca i128, align 16, !psr.id !106, !verifier.code !63 */
  call $p47 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %49 = alloca i128, align 16, !psr.id !107, !verifier.code !63 */
  call $p48 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %50 = alloca i128, align 16, !psr.id !108, !verifier.code !63 */
  call $p49 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %51 = alloca i128, align 16, !psr.id !109, !verifier.code !63 */
  call $p50 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %52 = alloca i128, align 16, !psr.id !110, !verifier.code !63 */
  call $p51 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %53 = alloca i128, align 16, !psr.id !111, !verifier.code !63 */
  call $p52 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %54 = alloca i128, align 16, !psr.id !112, !verifier.code !63 */
  call $p53 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %55 = alloca i128, align 16, !psr.id !113, !verifier.code !63 */
  call $p54 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %56 = alloca i128, align 16, !psr.id !114, !verifier.code !63 */
  call $p55 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %57 = alloca i128, align 16, !psr.id !115, !verifier.code !63 */
  call $p56 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %58 = alloca i128, align 16, !psr.id !116, !verifier.code !63 */
  call $p57 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %59 = alloca i128, align 16, !psr.id !117, !verifier.code !63 */
  call $p58 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %60 = alloca i128, align 16, !psr.id !118, !verifier.code !63 */
  call $p59 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %61 = alloca i128, align 16, !psr.id !119, !verifier.code !63 */
  call $p60 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %62 = alloca i128, align 16, !psr.id !120, !verifier.code !63 */
  call $p61 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %63 = alloca i128, align 16, !psr.id !121, !verifier.code !63 */
  call $p62 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %64 = alloca i128, align 16, !psr.id !122, !verifier.code !63 */
  call $p63 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %65 = alloca i128, align 16, !psr.id !123, !verifier.code !63 */
  call $p64 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %66 = alloca i128, align 16, !psr.id !124, !verifier.code !63 */
  call $p65 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %67 = alloca i128, align 16, !psr.id !125, !verifier.code !63 */
  call $p66 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %68 = alloca i128, align 16, !psr.id !126, !verifier.code !63 */
  call $p67 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %69 = alloca i128, align 16, !psr.id !127, !verifier.code !63 */
  call $p68 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %70 = alloca i128, align 16, !psr.id !128, !verifier.code !63 */
  call $p69 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %71 = alloca i128, align 16, !psr.id !129, !verifier.code !63 */
  call $p70 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %72 = alloca i128, align 16, !psr.id !130, !verifier.code !63 */
  call $p71 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %73 = alloca i128, align 16, !psr.id !131, !verifier.code !63 */
  call $p72 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %74 = alloca i128, align 16, !psr.id !132, !verifier.code !63 */
  call $p73 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %75 = alloca i128, align 16, !psr.id !133, !verifier.code !63 */
  call $p74 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %76 = alloca i128, align 16, !psr.id !134, !verifier.code !63 */
  call $p75 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %77 = alloca i128, align 16, !psr.id !135, !verifier.code !63 */
  call $p76 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %78 = alloca i128, align 16, !psr.id !136, !verifier.code !63 */
  call $p77 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %79 = alloca i128, align 16, !psr.id !137, !verifier.code !63 */
  call $p78 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %80 = alloca i128, align 16, !psr.id !138, !verifier.code !63 */
  call $p79 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %81 = alloca i128, align 16, !psr.id !139, !verifier.code !63 */
  call $p80 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %82 = alloca i128, align 16, !psr.id !140, !verifier.code !63 */
  call $p81 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %83 = alloca i128, align 16, !psr.id !141, !verifier.code !63 */
  call $p82 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %84 = alloca i128, align 16, !psr.id !142, !verifier.code !63 */
  call $p83 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %85 = alloca i128, align 16, !psr.id !143, !verifier.code !63 */
  call $p84 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %86 = alloca i128, align 16, !psr.id !144, !verifier.code !63 */
  call $p85 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %87 = alloca i128, align 16, !psr.id !145, !verifier.code !63 */
  call $p86 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %88 = alloca i128, align 16, !psr.id !146, !verifier.code !63 */
  call $p87 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %89 = alloca i128, align 16, !psr.id !147, !verifier.code !63 */
  call $p88 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %90 = alloca i128, align 16, !psr.id !148, !verifier.code !63 */
  call $p89 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %91 = alloca i128, align 16, !psr.id !149, !verifier.code !63 */
  call $p90 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %92 = alloca i128, align 16, !psr.id !150, !verifier.code !63 */
  call $p91 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %93 = alloca i128, align 16, !psr.id !151, !verifier.code !63 */
  call $p92 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %94 = alloca i128, align 16, !psr.id !152, !verifier.code !63 */
  call $p93 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %95 = alloca i128, align 16, !psr.id !153, !verifier.code !63 */
  call $p94 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %96 = alloca i128, align 16, !psr.id !154, !verifier.code !63 */
  call $p95 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %97 = alloca i128, align 16, !psr.id !155, !verifier.code !63 */
  call $p96 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %98 = alloca i128, align 16, !psr.id !156, !verifier.code !63 */
  call $p97 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %99 = alloca i128, align 16, !psr.id !157, !verifier.code !63 */
  call $p98 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %100 = alloca i128, align 16, !psr.id !158, !verifier.code !63 */
  call $p99 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %101 = alloca i128, align 16, !psr.id !159, !verifier.code !63 */
  call $p100 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %102 = alloca i128, align 16, !psr.id !160, !verifier.code !63 */
  call $p101 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %103 = alloca i128, align 16, !psr.id !161, !verifier.code !63 */
  call $p102 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %104 = alloca i128, align 16, !psr.id !162, !verifier.code !63 */
  call $p103 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %105 = alloca i128, align 16, !psr.id !163, !verifier.code !63 */
  call $p104 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %106 = alloca i128, align 16, !psr.id !164, !verifier.code !63 */
  call $p105 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %107 = alloca i128, align 16, !psr.id !165, !verifier.code !63 */
  call $p106 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %108 = alloca i128, align 16, !psr.id !166, !verifier.code !63 */
  call $p107 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %109 = alloca i128, align 16, !psr.id !167, !verifier.code !63 */
  call $p108 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %110 = alloca i128, align 16, !psr.id !168, !verifier.code !63 */
  call $p109 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %111 = alloca i128, align 16, !psr.id !169, !verifier.code !63 */
  call $p110 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %112 = alloca i128, align 16, !psr.id !170, !verifier.code !63 */
  call $p111 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %113 = alloca i128, align 16, !psr.id !171, !verifier.code !63 */
  call $p112 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %114 = alloca i128, align 16, !psr.id !172, !verifier.code !63 */
  call $p113 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %115 = alloca i128, align 16, !psr.id !173, !verifier.code !63 */
  call $p114 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %116 = alloca i128, align 16, !psr.id !174, !verifier.code !63 */
  call $p115 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %117 = alloca i128, align 16, !psr.id !175, !verifier.code !63 */
  call $p116 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %118 = alloca i128, align 16, !psr.id !176, !verifier.code !63 */
  call $p117 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %119 = alloca i128, align 16, !psr.id !177, !verifier.code !63 */
  call $p118 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %120 = alloca i128, align 16, !psr.id !178, !verifier.code !63 */
  call $p119 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %121 = alloca i128, align 16, !psr.id !179, !verifier.code !63 */
  call $p120 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %122 = alloca i128, align 16, !psr.id !180, !verifier.code !63 */
  call $p121 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %123 = alloca i128, align 16, !psr.id !181, !verifier.code !63 */
  call $p122 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %124 = alloca i128, align 16, !psr.id !182, !verifier.code !63 */
  call $p123 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %125 = alloca i128, align 16, !psr.id !183, !verifier.code !63 */
  call $p124 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %126 = alloca i128, align 16, !psr.id !184, !verifier.code !63 */
  call $p125 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %127 = alloca i128, align 16, !psr.id !185, !verifier.code !63 */
  call $p126 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %128 = alloca i128, align 16, !psr.id !186, !verifier.code !63 */
  call $p127 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %129 = alloca i128, align 16, !psr.id !187, !verifier.code !63 */
  call $p128 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !1391, metadata !DIExpression()), !dbg !1392, !psr.id !1393, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !1394, metadata !DIExpression()), !dbg !1392, !psr.id !1395, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %2, metadata !1396, metadata !DIExpression()), !dbg !1392, !psr.id !1397, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128* %3, metadata !1398, metadata !DIExpression()), !dbg !1392, !psr.id !1399, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 87, 18} true;
  assume {:verifier.code 0} true;
  /* %130 = getelementptr inbounds i64, i64* %1, i64 0, !dbg !197, !psr.id !198, !verifier.code !63 */
  $p129 := $add.ref($p1, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 87, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %131 = load i64, i64* %130, align 8, !dbg !197, !psr.id !199, !ValueTainted !200, !verifier.code !63 */
  $i130 := $load.i64($M.0, $p129);
  /* call void @llvm.dbg.value(metadata i64 %131, metadata !1403, metadata !DIExpression()), !dbg !1392, !psr.id !1404, !verifier.code !64 */
  call {:cexpr "f10"} boogie_si_record_i64($i130);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 88, 18} true;
  assume {:verifier.code 0} true;
  /* %132 = getelementptr inbounds i64, i64* %1, i64 1, !dbg !203, !psr.id !204, !verifier.code !63 */
  $p131 := $add.ref($p1, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 88, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %133 = load i64, i64* %132, align 8, !dbg !203, !psr.id !205, !ValueTainted !200, !verifier.code !63 */
  $i132 := $load.i64($M.0, $p131);
  /* call void @llvm.dbg.value(metadata i64 %133, metadata !1408, metadata !DIExpression()), !dbg !1392, !psr.id !1409, !verifier.code !64 */
  call {:cexpr "f11"} boogie_si_record_i64($i132);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 89, 18} true;
  assume {:verifier.code 0} true;
  /* %134 = getelementptr inbounds i64, i64* %1, i64 2, !dbg !208, !psr.id !209, !verifier.code !63 */
  $p133 := $add.ref($p1, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 89, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %135 = load i64, i64* %134, align 8, !dbg !208, !psr.id !210, !ValueTainted !200, !verifier.code !63 */
  $i134 := $load.i64($M.0, $p133);
  /* call void @llvm.dbg.value(metadata i64 %135, metadata !1413, metadata !DIExpression()), !dbg !1392, !psr.id !1414, !verifier.code !64 */
  call {:cexpr "f12"} boogie_si_record_i64($i134);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 90, 18} true;
  assume {:verifier.code 0} true;
  /* %136 = getelementptr inbounds i64, i64* %1, i64 3, !dbg !213, !psr.id !214, !verifier.code !63 */
  $p135 := $add.ref($p1, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 90, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %137 = load i64, i64* %136, align 8, !dbg !213, !psr.id !215, !ValueTainted !200, !verifier.code !63 */
  $i136 := $load.i64($M.0, $p135);
  /* call void @llvm.dbg.value(metadata i64 %137, metadata !1418, metadata !DIExpression()), !dbg !1392, !psr.id !1419, !verifier.code !64 */
  call {:cexpr "f13"} boogie_si_record_i64($i136);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 91, 18} true;
  assume {:verifier.code 0} true;
  /* %138 = getelementptr inbounds i64, i64* %1, i64 4, !dbg !218, !psr.id !219, !verifier.code !63 */
  $p137 := $add.ref($p1, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 91, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %139 = load i64, i64* %138, align 8, !dbg !218, !psr.id !220, !ValueTainted !200, !verifier.code !63 */
  $i138 := $load.i64($M.0, $p137);
  /* call void @llvm.dbg.value(metadata i64 %139, metadata !1423, metadata !DIExpression()), !dbg !1392, !psr.id !1424, !verifier.code !64 */
  call {:cexpr "f14"} boogie_si_record_i64($i138);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 92, 18} true;
  assume {:verifier.code 0} true;
  /* %140 = getelementptr inbounds i64, i64* %2, i64 0, !dbg !223, !psr.id !224, !verifier.code !63 */
  $p139 := $add.ref($p2, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 92, 18} true;
  assume {:verifier.code 0} true;
  /* %141 = load i64, i64* %140, align 8, !dbg !223, !psr.id !225, !verifier.code !63 */
  $i140 := $load.i64($M.0, $p139);
  /* call void @llvm.dbg.value(metadata i64 %141, metadata !1428, metadata !DIExpression()), !dbg !1392, !psr.id !1429, !verifier.code !64 */
  call {:cexpr "f20"} boogie_si_record_i64($i140);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 93, 18} true;
  assume {:verifier.code 0} true;
  /* %142 = getelementptr inbounds i64, i64* %2, i64 1, !dbg !228, !psr.id !229, !verifier.code !63 */
  $p141 := $add.ref($p2, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 93, 18} true;
  assume {:verifier.code 0} true;
  /* %143 = load i64, i64* %142, align 8, !dbg !228, !psr.id !230, !verifier.code !63 */
  $i142 := $load.i64($M.0, $p141);
  /* call void @llvm.dbg.value(metadata i64 %143, metadata !1433, metadata !DIExpression()), !dbg !1392, !psr.id !1434, !verifier.code !64 */
  call {:cexpr "f21"} boogie_si_record_i64($i142);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 94, 18} true;
  assume {:verifier.code 0} true;
  /* %144 = getelementptr inbounds i64, i64* %2, i64 2, !dbg !233, !psr.id !234, !verifier.code !63 */
  $p143 := $add.ref($p2, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 94, 18} true;
  assume {:verifier.code 0} true;
  /* %145 = load i64, i64* %144, align 8, !dbg !233, !psr.id !235, !verifier.code !63 */
  $i144 := $load.i64($M.0, $p143);
  /* call void @llvm.dbg.value(metadata i64 %145, metadata !1438, metadata !DIExpression()), !dbg !1392, !psr.id !1439, !verifier.code !64 */
  call {:cexpr "f22"} boogie_si_record_i64($i144);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 95, 18} true;
  assume {:verifier.code 0} true;
  /* %146 = getelementptr inbounds i64, i64* %2, i64 3, !dbg !238, !psr.id !239, !verifier.code !63 */
  $p145 := $add.ref($p2, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 95, 18} true;
  assume {:verifier.code 0} true;
  /* %147 = load i64, i64* %146, align 8, !dbg !238, !psr.id !240, !verifier.code !63 */
  $i146 := $load.i64($M.0, $p145);
  /* call void @llvm.dbg.value(metadata i64 %147, metadata !1443, metadata !DIExpression()), !dbg !1392, !psr.id !1444, !verifier.code !64 */
  call {:cexpr "f23"} boogie_si_record_i64($i146);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 96, 18} true;
  assume {:verifier.code 0} true;
  /* %148 = getelementptr inbounds i64, i64* %2, i64 4, !dbg !243, !psr.id !244, !verifier.code !63 */
  $p147 := $add.ref($p2, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 96, 18} true;
  assume {:verifier.code 0} true;
  /* %149 = load i64, i64* %148, align 8, !dbg !243, !psr.id !245, !verifier.code !63 */
  $i148 := $load.i64($M.0, $p147);
  /* call void @llvm.dbg.value(metadata i64 %149, metadata !1448, metadata !DIExpression()), !dbg !1392, !psr.id !1449, !verifier.code !64 */
  call {:cexpr "f24"} boogie_si_record_i64($i148);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 97, 23} true;
  assume {:verifier.code 0} true;
  /* %150 = mul i64 %143, 19, !dbg !248, !psr.id !249, !verifier.code !63 */
  $i149 := $mul.i64($i142, 19);
  /* call void @llvm.dbg.value(metadata i64 %150, metadata !1452, metadata !DIExpression()), !dbg !1392, !psr.id !1453, !verifier.code !64 */
  call {:cexpr "tmp1"} boogie_si_record_i64($i149);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 98, 23} true;
  assume {:verifier.code 0} true;
  /* %151 = mul i64 %145, 19, !dbg !252, !psr.id !253, !verifier.code !63 */
  $i150 := $mul.i64($i144, 19);
  /* call void @llvm.dbg.value(metadata i64 %151, metadata !1456, metadata !DIExpression()), !dbg !1392, !psr.id !1457, !verifier.code !64 */
  call {:cexpr "tmp2"} boogie_si_record_i64($i150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 99, 23} true;
  assume {:verifier.code 0} true;
  /* %152 = mul i64 %147, 19, !dbg !256, !psr.id !257, !verifier.code !63 */
  $i151 := $mul.i64($i146, 19);
  /* call void @llvm.dbg.value(metadata i64 %152, metadata !1460, metadata !DIExpression()), !dbg !1392, !psr.id !1461, !verifier.code !64 */
  call {:cexpr "tmp3"} boogie_si_record_i64($i151);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 100, 23} true;
  assume {:verifier.code 0} true;
  /* %153 = mul i64 %149, 19, !dbg !260, !psr.id !261, !verifier.code !63 */
  $i152 := $mul.i64($i148, 19);
  /* call void @llvm.dbg.value(metadata i64 %153, metadata !1464, metadata !DIExpression()), !dbg !1392, !psr.id !1465, !verifier.code !64 */
  call {:cexpr "tmp4"} boogie_si_record_i64($i152);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %154 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %131, i64 %141), !dbg !264, !psr.id !265, !ValueTainted !200, !verifier.code !63 */
  call $p153 := FStar_UInt128_mul_wide($i130, $i140);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  /* %155 = bitcast i128* %5 to { i64, i64 }*, !dbg !264, !psr.id !266, !verifier.code !63 */
  $p154 := $bitcast.ref.ref($p4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  /* %156 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %155, i32 0, i32 0, !dbg !264, !psr.id !267, !verifier.code !63 */
  $p155 := $add.ref($add.ref($p154, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  /* %157 = extractvalue { i64, i64 } %154, 0, !dbg !264, !psr.id !268, !verifier.code !63 */
  $i156 := $extractvalue.i64($p153, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %157, i64* %156, align 16, !dbg !264, !psr.id !269, !verifier.code !63 */
  $M.94 := $store.i64($M.94, $p155, $i156);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  /* %158 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %155, i32 0, i32 1, !dbg !264, !psr.id !270, !verifier.code !63 */
  $p157 := $add.ref($add.ref($p154, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  /* %159 = extractvalue { i64, i64 } %154, 1, !dbg !264, !psr.id !271, !verifier.code !63 */
  $i158 := $extractvalue.i64($p153, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %159, i64* %158, align 8, !dbg !264, !psr.id !272, !verifier.code !63 */
  $M.94 := $store.i64($M.94, $p157, $i158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  /* %160 = load i128, i128* %5, align 16, !dbg !264, !psr.id !273, !verifier.code !63 */
  $i159 := $load.i128($M.94, $p4);
  /* call void @llvm.dbg.value(metadata i128 %160, metadata !1476, metadata !DIExpression()), !dbg !1392, !psr.id !1477, !verifier.code !64 */
  call {:cexpr "o00"} boogie_si_record_i128($i159);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %161 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %131, i64 %143), !dbg !276, !psr.id !277, !ValueTainted !200, !verifier.code !63 */
  call $p160 := FStar_UInt128_mul_wide($i130, $i142);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  /* %162 = bitcast i128* %6 to { i64, i64 }*, !dbg !276, !psr.id !278, !verifier.code !63 */
  $p161 := $bitcast.ref.ref($p5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  /* %163 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %162, i32 0, i32 0, !dbg !276, !psr.id !279, !verifier.code !63 */
  $p162 := $add.ref($add.ref($p161, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  /* %164 = extractvalue { i64, i64 } %161, 0, !dbg !276, !psr.id !280, !verifier.code !63 */
  $i163 := $extractvalue.i64($p160, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %164, i64* %163, align 16, !dbg !276, !psr.id !281, !verifier.code !63 */
  $M.95 := $store.i64($M.95, $p162, $i163);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  /* %165 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %162, i32 0, i32 1, !dbg !276, !psr.id !282, !verifier.code !63 */
  $p164 := $add.ref($add.ref($p161, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  /* %166 = extractvalue { i64, i64 } %161, 1, !dbg !276, !psr.id !283, !verifier.code !63 */
  $i165 := $extractvalue.i64($p160, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %166, i64* %165, align 8, !dbg !276, !psr.id !284, !verifier.code !63 */
  $M.95 := $store.i64($M.95, $p164, $i165);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  /* %167 = load i128, i128* %6, align 16, !dbg !276, !psr.id !285, !verifier.code !63 */
  $i166 := $load.i128($M.95, $p5);
  /* call void @llvm.dbg.value(metadata i128 %167, metadata !1488, metadata !DIExpression()), !dbg !1392, !psr.id !1489, !verifier.code !64 */
  call {:cexpr "o10"} boogie_si_record_i128($i166);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %168 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %131, i64 %145), !dbg !288, !psr.id !289, !ValueTainted !200, !verifier.code !63 */
  call $p167 := FStar_UInt128_mul_wide($i130, $i144);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  /* %169 = bitcast i128* %7 to { i64, i64 }*, !dbg !288, !psr.id !290, !verifier.code !63 */
  $p168 := $bitcast.ref.ref($p6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  /* %170 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %169, i32 0, i32 0, !dbg !288, !psr.id !291, !verifier.code !63 */
  $p169 := $add.ref($add.ref($p168, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  /* %171 = extractvalue { i64, i64 } %168, 0, !dbg !288, !psr.id !292, !verifier.code !63 */
  $i170 := $extractvalue.i64($p167, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %171, i64* %170, align 16, !dbg !288, !psr.id !293, !verifier.code !63 */
  $M.96 := $store.i64($M.96, $p169, $i170);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  /* %172 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %169, i32 0, i32 1, !dbg !288, !psr.id !294, !verifier.code !63 */
  $p171 := $add.ref($add.ref($p168, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  /* %173 = extractvalue { i64, i64 } %168, 1, !dbg !288, !psr.id !295, !verifier.code !63 */
  $i172 := $extractvalue.i64($p167, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %173, i64* %172, align 8, !dbg !288, !psr.id !296, !verifier.code !63 */
  $M.96 := $store.i64($M.96, $p171, $i172);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  /* %174 = load i128, i128* %7, align 16, !dbg !288, !psr.id !297, !verifier.code !63 */
  $i173 := $load.i128($M.96, $p6);
  /* call void @llvm.dbg.value(metadata i128 %174, metadata !1500, metadata !DIExpression()), !dbg !1392, !psr.id !1501, !verifier.code !64 */
  call {:cexpr "o20"} boogie_si_record_i128($i173);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %175 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %131, i64 %147), !dbg !300, !psr.id !301, !ValueTainted !200, !verifier.code !63 */
  call $p174 := FStar_UInt128_mul_wide($i130, $i146);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  /* %176 = bitcast i128* %8 to { i64, i64 }*, !dbg !300, !psr.id !302, !verifier.code !63 */
  $p175 := $bitcast.ref.ref($p7);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  /* %177 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %176, i32 0, i32 0, !dbg !300, !psr.id !303, !verifier.code !63 */
  $p176 := $add.ref($add.ref($p175, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  /* %178 = extractvalue { i64, i64 } %175, 0, !dbg !300, !psr.id !304, !verifier.code !63 */
  $i177 := $extractvalue.i64($p174, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %178, i64* %177, align 16, !dbg !300, !psr.id !305, !verifier.code !63 */
  $M.97 := $store.i64($M.97, $p176, $i177);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  /* %179 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %176, i32 0, i32 1, !dbg !300, !psr.id !306, !verifier.code !63 */
  $p178 := $add.ref($add.ref($p175, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  /* %180 = extractvalue { i64, i64 } %175, 1, !dbg !300, !psr.id !307, !verifier.code !63 */
  $i179 := $extractvalue.i64($p174, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %180, i64* %179, align 8, !dbg !300, !psr.id !308, !verifier.code !63 */
  $M.97 := $store.i64($M.97, $p178, $i179);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  /* %181 = load i128, i128* %8, align 16, !dbg !300, !psr.id !309, !verifier.code !63 */
  $i180 := $load.i128($M.97, $p7);
  /* call void @llvm.dbg.value(metadata i128 %181, metadata !1512, metadata !DIExpression()), !dbg !1392, !psr.id !1513, !verifier.code !64 */
  call {:cexpr "o30"} boogie_si_record_i128($i180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %182 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %131, i64 %149), !dbg !312, !psr.id !313, !ValueTainted !200, !verifier.code !63 */
  call $p181 := FStar_UInt128_mul_wide($i130, $i148);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  /* %183 = bitcast i128* %9 to { i64, i64 }*, !dbg !312, !psr.id !314, !verifier.code !63 */
  $p182 := $bitcast.ref.ref($p8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  /* %184 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %183, i32 0, i32 0, !dbg !312, !psr.id !315, !verifier.code !63 */
  $p183 := $add.ref($add.ref($p182, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  /* %185 = extractvalue { i64, i64 } %182, 0, !dbg !312, !psr.id !316, !verifier.code !63 */
  $i184 := $extractvalue.i64($p181, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %185, i64* %184, align 16, !dbg !312, !psr.id !317, !verifier.code !63 */
  $M.98 := $store.i64($M.98, $p183, $i184);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  /* %186 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %183, i32 0, i32 1, !dbg !312, !psr.id !318, !verifier.code !63 */
  $p185 := $add.ref($add.ref($p182, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  /* %187 = extractvalue { i64, i64 } %182, 1, !dbg !312, !psr.id !319, !verifier.code !63 */
  $i186 := $extractvalue.i64($p181, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %187, i64* %186, align 8, !dbg !312, !psr.id !320, !verifier.code !63 */
  $M.98 := $store.i64($M.98, $p185, $i186);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  /* %188 = load i128, i128* %9, align 16, !dbg !312, !psr.id !321, !verifier.code !63 */
  $i187 := $load.i128($M.98, $p8);
  /* call void @llvm.dbg.value(metadata i128 %188, metadata !1524, metadata !DIExpression()), !dbg !1392, !psr.id !1525, !verifier.code !64 */
  call {:cexpr "o40"} boogie_si_record_i128($i187);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %189 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %133, i64 %153), !dbg !324, !psr.id !325, !ValueTainted !200, !verifier.code !63 */
  call $p188 := FStar_UInt128_mul_wide($i132, $i152);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  /* %190 = bitcast i128* %10 to { i64, i64 }*, !dbg !324, !psr.id !326, !verifier.code !63 */
  $p189 := $bitcast.ref.ref($p9);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  /* %191 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %190, i32 0, i32 0, !dbg !324, !psr.id !327, !verifier.code !63 */
  $p190 := $add.ref($add.ref($p189, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  /* %192 = extractvalue { i64, i64 } %189, 0, !dbg !324, !psr.id !328, !verifier.code !63 */
  $i191 := $extractvalue.i64($p188, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %192, i64* %191, align 16, !dbg !324, !psr.id !329, !verifier.code !63 */
  $M.99 := $store.i64($M.99, $p190, $i191);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  /* %193 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %190, i32 0, i32 1, !dbg !324, !psr.id !330, !verifier.code !63 */
  $p192 := $add.ref($add.ref($p189, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  /* %194 = extractvalue { i64, i64 } %189, 1, !dbg !324, !psr.id !331, !verifier.code !63 */
  $i193 := $extractvalue.i64($p188, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %194, i64* %193, align 8, !dbg !324, !psr.id !332, !verifier.code !63 */
  $M.99 := $store.i64($M.99, $p192, $i193);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  /* %195 = load i128, i128* %10, align 16, !dbg !324, !psr.id !333, !verifier.code !63 */
  $i194 := $load.i128($M.99, $p9);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %160, i128* %11, align 16, !dbg !334, !psr.id !335, !verifier.code !63 */
  $M.100 := $store.i128($M.100, $p10, $i159);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %196 = bitcast i128* %11 to { i64, i64 }*, !dbg !334, !psr.id !336, !verifier.code !63 */
  $p195 := $bitcast.ref.ref($p10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %197 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %196, i32 0, i32 0, !dbg !334, !psr.id !337, !verifier.code !63 */
  $p196 := $add.ref($add.ref($p195, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %198 = load i64, i64* %197, align 16, !dbg !334, !psr.id !338, !verifier.code !63 */
  $i197 := $load.i64($M.100, $p196);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %199 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %196, i32 0, i32 1, !dbg !334, !psr.id !339, !verifier.code !63 */
  $p198 := $add.ref($add.ref($p195, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %200 = load i64, i64* %199, align 8, !dbg !334, !psr.id !340, !verifier.code !63 */
  $i199 := $load.i64($M.100, $p198);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %195, i128* %12, align 16, !dbg !334, !psr.id !341, !verifier.code !63 */
  $M.101 := $store.i128($M.101, $p11, $i194);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %201 = bitcast i128* %12 to { i64, i64 }*, !dbg !334, !psr.id !342, !verifier.code !63 */
  $p200 := $bitcast.ref.ref($p11);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %202 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %201, i32 0, i32 0, !dbg !334, !psr.id !343, !verifier.code !63 */
  $p201 := $add.ref($add.ref($p200, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %203 = load i64, i64* %202, align 16, !dbg !334, !psr.id !344, !verifier.code !63 */
  $i202 := $load.i64($M.101, $p201);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %204 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %201, i32 0, i32 1, !dbg !334, !psr.id !345, !verifier.code !63 */
  $p203 := $add.ref($add.ref($p200, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %205 = load i64, i64* %204, align 8, !dbg !334, !psr.id !346, !verifier.code !63 */
  $i204 := $load.i64($M.101, $p203);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %206 = call { i64, i64 } @FStar_UInt128_add(i64 %198, i64 %200, i64 %203, i64 %205), !dbg !334, !psr.id !347, !verifier.code !63 */
  call $p205 := FStar_UInt128_add($i197, $i199, $i202, $i204);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %207 = bitcast i128* %13 to { i64, i64 }*, !dbg !334, !psr.id !348, !verifier.code !63 */
  $p206 := $bitcast.ref.ref($p12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %208 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %207, i32 0, i32 0, !dbg !334, !psr.id !349, !verifier.code !63 */
  $p207 := $add.ref($add.ref($p206, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %209 = extractvalue { i64, i64 } %206, 0, !dbg !334, !psr.id !350, !verifier.code !63 */
  $i208 := $extractvalue.i64($p205, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %209, i64* %208, align 16, !dbg !334, !psr.id !351, !verifier.code !63 */
  $M.102 := $store.i64($M.102, $p207, $i208);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %210 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %207, i32 0, i32 1, !dbg !334, !psr.id !352, !verifier.code !63 */
  $p209 := $add.ref($add.ref($p206, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %211 = extractvalue { i64, i64 } %206, 1, !dbg !334, !psr.id !353, !verifier.code !63 */
  $i210 := $extractvalue.i64($p205, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %211, i64* %210, align 8, !dbg !334, !psr.id !354, !verifier.code !63 */
  $M.102 := $store.i64($M.102, $p209, $i210);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  /* %212 = load i128, i128* %13, align 16, !dbg !334, !psr.id !355, !verifier.code !63 */
  $i211 := $load.i128($M.102, $p12);
  /* call void @llvm.dbg.value(metadata i128 %212, metadata !1558, metadata !DIExpression()), !dbg !1392, !psr.id !1559, !verifier.code !64 */
  call {:cexpr "o01"} boogie_si_record_i128($i211);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %213 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %133, i64 %141), !dbg !358, !psr.id !359, !ValueTainted !200, !verifier.code !63 */
  call $p212 := FStar_UInt128_mul_wide($i132, $i140);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  /* %214 = bitcast i128* %14 to { i64, i64 }*, !dbg !358, !psr.id !360, !verifier.code !63 */
  $p213 := $bitcast.ref.ref($p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  /* %215 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %214, i32 0, i32 0, !dbg !358, !psr.id !361, !verifier.code !63 */
  $p214 := $add.ref($add.ref($p213, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  /* %216 = extractvalue { i64, i64 } %213, 0, !dbg !358, !psr.id !362, !verifier.code !63 */
  $i215 := $extractvalue.i64($p212, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %216, i64* %215, align 16, !dbg !358, !psr.id !363, !verifier.code !63 */
  $M.103 := $store.i64($M.103, $p214, $i215);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  /* %217 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %214, i32 0, i32 1, !dbg !358, !psr.id !364, !verifier.code !63 */
  $p216 := $add.ref($add.ref($p213, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  /* %218 = extractvalue { i64, i64 } %213, 1, !dbg !358, !psr.id !365, !verifier.code !63 */
  $i217 := $extractvalue.i64($p212, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %218, i64* %217, align 8, !dbg !358, !psr.id !366, !verifier.code !63 */
  $M.103 := $store.i64($M.103, $p216, $i217);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  /* %219 = load i128, i128* %14, align 16, !dbg !358, !psr.id !367, !verifier.code !63 */
  $i218 := $load.i128($M.103, $p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %167, i128* %15, align 16, !dbg !368, !psr.id !369, !verifier.code !63 */
  $M.104 := $store.i128($M.104, $p14, $i166);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %220 = bitcast i128* %15 to { i64, i64 }*, !dbg !368, !psr.id !370, !verifier.code !63 */
  $p219 := $bitcast.ref.ref($p14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %221 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %220, i32 0, i32 0, !dbg !368, !psr.id !371, !verifier.code !63 */
  $p220 := $add.ref($add.ref($p219, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %222 = load i64, i64* %221, align 16, !dbg !368, !psr.id !372, !verifier.code !63 */
  $i221 := $load.i64($M.104, $p220);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %223 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %220, i32 0, i32 1, !dbg !368, !psr.id !373, !verifier.code !63 */
  $p222 := $add.ref($add.ref($p219, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %224 = load i64, i64* %223, align 8, !dbg !368, !psr.id !374, !verifier.code !63 */
  $i223 := $load.i64($M.104, $p222);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %219, i128* %16, align 16, !dbg !368, !psr.id !375, !verifier.code !63 */
  $M.105 := $store.i128($M.105, $p15, $i218);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %225 = bitcast i128* %16 to { i64, i64 }*, !dbg !368, !psr.id !376, !verifier.code !63 */
  $p224 := $bitcast.ref.ref($p15);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %226 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %225, i32 0, i32 0, !dbg !368, !psr.id !377, !verifier.code !63 */
  $p225 := $add.ref($add.ref($p224, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %227 = load i64, i64* %226, align 16, !dbg !368, !psr.id !378, !verifier.code !63 */
  $i226 := $load.i64($M.105, $p225);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %228 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %225, i32 0, i32 1, !dbg !368, !psr.id !379, !verifier.code !63 */
  $p227 := $add.ref($add.ref($p224, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %229 = load i64, i64* %228, align 8, !dbg !368, !psr.id !380, !verifier.code !63 */
  $i228 := $load.i64($M.105, $p227);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %230 = call { i64, i64 } @FStar_UInt128_add(i64 %222, i64 %224, i64 %227, i64 %229), !dbg !368, !psr.id !381, !verifier.code !63 */
  call $p229 := FStar_UInt128_add($i221, $i223, $i226, $i228);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %231 = bitcast i128* %17 to { i64, i64 }*, !dbg !368, !psr.id !382, !verifier.code !63 */
  $p230 := $bitcast.ref.ref($p16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %232 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %231, i32 0, i32 0, !dbg !368, !psr.id !383, !verifier.code !63 */
  $p231 := $add.ref($add.ref($p230, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %233 = extractvalue { i64, i64 } %230, 0, !dbg !368, !psr.id !384, !verifier.code !63 */
  $i232 := $extractvalue.i64($p229, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %233, i64* %232, align 16, !dbg !368, !psr.id !385, !verifier.code !63 */
  $M.106 := $store.i64($M.106, $p231, $i232);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %234 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %231, i32 0, i32 1, !dbg !368, !psr.id !386, !verifier.code !63 */
  $p233 := $add.ref($add.ref($p230, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %235 = extractvalue { i64, i64 } %230, 1, !dbg !368, !psr.id !387, !verifier.code !63 */
  $i234 := $extractvalue.i64($p229, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %235, i64* %234, align 8, !dbg !368, !psr.id !388, !verifier.code !63 */
  $M.106 := $store.i64($M.106, $p233, $i234);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  /* %236 = load i128, i128* %17, align 16, !dbg !368, !psr.id !389, !verifier.code !63 */
  $i235 := $load.i128($M.106, $p16);
  /* call void @llvm.dbg.value(metadata i128 %236, metadata !1592, metadata !DIExpression()), !dbg !1392, !psr.id !1593, !verifier.code !64 */
  call {:cexpr "o11"} boogie_si_record_i128($i235);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %237 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %133, i64 %143), !dbg !392, !psr.id !393, !ValueTainted !200, !verifier.code !63 */
  call $p236 := FStar_UInt128_mul_wide($i132, $i142);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  /* %238 = bitcast i128* %18 to { i64, i64 }*, !dbg !392, !psr.id !394, !verifier.code !63 */
  $p237 := $bitcast.ref.ref($p17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  /* %239 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %238, i32 0, i32 0, !dbg !392, !psr.id !395, !verifier.code !63 */
  $p238 := $add.ref($add.ref($p237, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  /* %240 = extractvalue { i64, i64 } %237, 0, !dbg !392, !psr.id !396, !verifier.code !63 */
  $i239 := $extractvalue.i64($p236, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %240, i64* %239, align 16, !dbg !392, !psr.id !397, !verifier.code !63 */
  $M.107 := $store.i64($M.107, $p238, $i239);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  /* %241 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %238, i32 0, i32 1, !dbg !392, !psr.id !398, !verifier.code !63 */
  $p240 := $add.ref($add.ref($p237, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  /* %242 = extractvalue { i64, i64 } %237, 1, !dbg !392, !psr.id !399, !verifier.code !63 */
  $i241 := $extractvalue.i64($p236, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %242, i64* %241, align 8, !dbg !392, !psr.id !400, !verifier.code !63 */
  $M.107 := $store.i64($M.107, $p240, $i241);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  /* %243 = load i128, i128* %18, align 16, !dbg !392, !psr.id !401, !verifier.code !63 */
  $i242 := $load.i128($M.107, $p17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %174, i128* %19, align 16, !dbg !402, !psr.id !403, !verifier.code !63 */
  $M.108 := $store.i128($M.108, $p18, $i173);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %244 = bitcast i128* %19 to { i64, i64 }*, !dbg !402, !psr.id !404, !verifier.code !63 */
  $p243 := $bitcast.ref.ref($p18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %245 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %244, i32 0, i32 0, !dbg !402, !psr.id !405, !verifier.code !63 */
  $p244 := $add.ref($add.ref($p243, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %246 = load i64, i64* %245, align 16, !dbg !402, !psr.id !406, !verifier.code !63 */
  $i245 := $load.i64($M.108, $p244);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %247 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %244, i32 0, i32 1, !dbg !402, !psr.id !407, !verifier.code !63 */
  $p246 := $add.ref($add.ref($p243, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %248 = load i64, i64* %247, align 8, !dbg !402, !psr.id !408, !verifier.code !63 */
  $i247 := $load.i64($M.108, $p246);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %243, i128* %20, align 16, !dbg !402, !psr.id !409, !verifier.code !63 */
  $M.109 := $store.i128($M.109, $p19, $i242);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %249 = bitcast i128* %20 to { i64, i64 }*, !dbg !402, !psr.id !410, !verifier.code !63 */
  $p248 := $bitcast.ref.ref($p19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %250 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %249, i32 0, i32 0, !dbg !402, !psr.id !411, !verifier.code !63 */
  $p249 := $add.ref($add.ref($p248, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %251 = load i64, i64* %250, align 16, !dbg !402, !psr.id !412, !verifier.code !63 */
  $i250 := $load.i64($M.109, $p249);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %252 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %249, i32 0, i32 1, !dbg !402, !psr.id !413, !verifier.code !63 */
  $p251 := $add.ref($add.ref($p248, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %253 = load i64, i64* %252, align 8, !dbg !402, !psr.id !414, !verifier.code !63 */
  $i252 := $load.i64($M.109, $p251);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %254 = call { i64, i64 } @FStar_UInt128_add(i64 %246, i64 %248, i64 %251, i64 %253), !dbg !402, !psr.id !415, !verifier.code !63 */
  call $p253 := FStar_UInt128_add($i245, $i247, $i250, $i252);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %255 = bitcast i128* %21 to { i64, i64 }*, !dbg !402, !psr.id !416, !verifier.code !63 */
  $p254 := $bitcast.ref.ref($p20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %256 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %255, i32 0, i32 0, !dbg !402, !psr.id !417, !verifier.code !63 */
  $p255 := $add.ref($add.ref($p254, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %257 = extractvalue { i64, i64 } %254, 0, !dbg !402, !psr.id !418, !verifier.code !63 */
  $i256 := $extractvalue.i64($p253, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %257, i64* %256, align 16, !dbg !402, !psr.id !419, !verifier.code !63 */
  $M.110 := $store.i64($M.110, $p255, $i256);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %258 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %255, i32 0, i32 1, !dbg !402, !psr.id !420, !verifier.code !63 */
  $p257 := $add.ref($add.ref($p254, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %259 = extractvalue { i64, i64 } %254, 1, !dbg !402, !psr.id !421, !verifier.code !63 */
  $i258 := $extractvalue.i64($p253, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %259, i64* %258, align 8, !dbg !402, !psr.id !422, !verifier.code !63 */
  $M.110 := $store.i64($M.110, $p257, $i258);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  /* %260 = load i128, i128* %21, align 16, !dbg !402, !psr.id !423, !verifier.code !63 */
  $i259 := $load.i128($M.110, $p20);
  /* call void @llvm.dbg.value(metadata i128 %260, metadata !1626, metadata !DIExpression()), !dbg !1392, !psr.id !1627, !verifier.code !64 */
  call {:cexpr "o21"} boogie_si_record_i128($i259);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %261 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %133, i64 %145), !dbg !426, !psr.id !427, !ValueTainted !200, !verifier.code !63 */
  call $p260 := FStar_UInt128_mul_wide($i132, $i144);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  /* %262 = bitcast i128* %22 to { i64, i64 }*, !dbg !426, !psr.id !428, !verifier.code !63 */
  $p261 := $bitcast.ref.ref($p21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  /* %263 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %262, i32 0, i32 0, !dbg !426, !psr.id !429, !verifier.code !63 */
  $p262 := $add.ref($add.ref($p261, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  /* %264 = extractvalue { i64, i64 } %261, 0, !dbg !426, !psr.id !430, !verifier.code !63 */
  $i263 := $extractvalue.i64($p260, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %264, i64* %263, align 16, !dbg !426, !psr.id !431, !verifier.code !63 */
  $M.111 := $store.i64($M.111, $p262, $i263);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  /* %265 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %262, i32 0, i32 1, !dbg !426, !psr.id !432, !verifier.code !63 */
  $p264 := $add.ref($add.ref($p261, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  /* %266 = extractvalue { i64, i64 } %261, 1, !dbg !426, !psr.id !433, !verifier.code !63 */
  $i265 := $extractvalue.i64($p260, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %266, i64* %265, align 8, !dbg !426, !psr.id !434, !verifier.code !63 */
  $M.111 := $store.i64($M.111, $p264, $i265);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  /* %267 = load i128, i128* %22, align 16, !dbg !426, !psr.id !435, !verifier.code !63 */
  $i266 := $load.i128($M.111, $p21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %181, i128* %23, align 16, !dbg !436, !psr.id !437, !verifier.code !63 */
  $M.112 := $store.i128($M.112, $p22, $i180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %268 = bitcast i128* %23 to { i64, i64 }*, !dbg !436, !psr.id !438, !verifier.code !63 */
  $p267 := $bitcast.ref.ref($p22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %269 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %268, i32 0, i32 0, !dbg !436, !psr.id !439, !verifier.code !63 */
  $p268 := $add.ref($add.ref($p267, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %270 = load i64, i64* %269, align 16, !dbg !436, !psr.id !440, !verifier.code !63 */
  $i269 := $load.i64($M.112, $p268);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %271 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %268, i32 0, i32 1, !dbg !436, !psr.id !441, !verifier.code !63 */
  $p270 := $add.ref($add.ref($p267, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %272 = load i64, i64* %271, align 8, !dbg !436, !psr.id !442, !verifier.code !63 */
  $i271 := $load.i64($M.112, $p270);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %267, i128* %24, align 16, !dbg !436, !psr.id !443, !verifier.code !63 */
  $M.113 := $store.i128($M.113, $p23, $i266);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %273 = bitcast i128* %24 to { i64, i64 }*, !dbg !436, !psr.id !444, !verifier.code !63 */
  $p272 := $bitcast.ref.ref($p23);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %274 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %273, i32 0, i32 0, !dbg !436, !psr.id !445, !verifier.code !63 */
  $p273 := $add.ref($add.ref($p272, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %275 = load i64, i64* %274, align 16, !dbg !436, !psr.id !446, !verifier.code !63 */
  $i274 := $load.i64($M.113, $p273);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %276 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %273, i32 0, i32 1, !dbg !436, !psr.id !447, !verifier.code !63 */
  $p275 := $add.ref($add.ref($p272, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %277 = load i64, i64* %276, align 8, !dbg !436, !psr.id !448, !verifier.code !63 */
  $i276 := $load.i64($M.113, $p275);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %278 = call { i64, i64 } @FStar_UInt128_add(i64 %270, i64 %272, i64 %275, i64 %277), !dbg !436, !psr.id !449, !verifier.code !63 */
  call $p277 := FStar_UInt128_add($i269, $i271, $i274, $i276);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %279 = bitcast i128* %25 to { i64, i64 }*, !dbg !436, !psr.id !450, !verifier.code !63 */
  $p278 := $bitcast.ref.ref($p24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %280 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %279, i32 0, i32 0, !dbg !436, !psr.id !451, !verifier.code !63 */
  $p279 := $add.ref($add.ref($p278, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %281 = extractvalue { i64, i64 } %278, 0, !dbg !436, !psr.id !452, !verifier.code !63 */
  $i280 := $extractvalue.i64($p277, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %281, i64* %280, align 16, !dbg !436, !psr.id !453, !verifier.code !63 */
  $M.114 := $store.i64($M.114, $p279, $i280);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %282 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %279, i32 0, i32 1, !dbg !436, !psr.id !454, !verifier.code !63 */
  $p281 := $add.ref($add.ref($p278, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %283 = extractvalue { i64, i64 } %278, 1, !dbg !436, !psr.id !455, !verifier.code !63 */
  $i282 := $extractvalue.i64($p277, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %283, i64* %282, align 8, !dbg !436, !psr.id !456, !verifier.code !63 */
  $M.114 := $store.i64($M.114, $p281, $i282);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  /* %284 = load i128, i128* %25, align 16, !dbg !436, !psr.id !457, !verifier.code !63 */
  $i283 := $load.i128($M.114, $p24);
  /* call void @llvm.dbg.value(metadata i128 %284, metadata !1660, metadata !DIExpression()), !dbg !1392, !psr.id !1661, !verifier.code !64 */
  call {:cexpr "o31"} boogie_si_record_i128($i283);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %285 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %133, i64 %147), !dbg !460, !psr.id !461, !ValueTainted !200, !verifier.code !63 */
  call $p284 := FStar_UInt128_mul_wide($i132, $i146);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  /* %286 = bitcast i128* %26 to { i64, i64 }*, !dbg !460, !psr.id !462, !verifier.code !63 */
  $p285 := $bitcast.ref.ref($p25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  /* %287 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %286, i32 0, i32 0, !dbg !460, !psr.id !463, !verifier.code !63 */
  $p286 := $add.ref($add.ref($p285, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  /* %288 = extractvalue { i64, i64 } %285, 0, !dbg !460, !psr.id !464, !verifier.code !63 */
  $i287 := $extractvalue.i64($p284, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %288, i64* %287, align 16, !dbg !460, !psr.id !465, !verifier.code !63 */
  $M.115 := $store.i64($M.115, $p286, $i287);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  /* %289 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %286, i32 0, i32 1, !dbg !460, !psr.id !466, !verifier.code !63 */
  $p288 := $add.ref($add.ref($p285, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  /* %290 = extractvalue { i64, i64 } %285, 1, !dbg !460, !psr.id !467, !verifier.code !63 */
  $i289 := $extractvalue.i64($p284, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %290, i64* %289, align 8, !dbg !460, !psr.id !468, !verifier.code !63 */
  $M.115 := $store.i64($M.115, $p288, $i289);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  /* %291 = load i128, i128* %26, align 16, !dbg !460, !psr.id !469, !verifier.code !63 */
  $i290 := $load.i128($M.115, $p25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %188, i128* %27, align 16, !dbg !470, !psr.id !471, !verifier.code !63 */
  $M.116 := $store.i128($M.116, $p26, $i187);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %292 = bitcast i128* %27 to { i64, i64 }*, !dbg !470, !psr.id !472, !verifier.code !63 */
  $p291 := $bitcast.ref.ref($p26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %293 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %292, i32 0, i32 0, !dbg !470, !psr.id !473, !verifier.code !63 */
  $p292 := $add.ref($add.ref($p291, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %294 = load i64, i64* %293, align 16, !dbg !470, !psr.id !474, !verifier.code !63 */
  $i293 := $load.i64($M.116, $p292);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %295 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %292, i32 0, i32 1, !dbg !470, !psr.id !475, !verifier.code !63 */
  $p294 := $add.ref($add.ref($p291, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %296 = load i64, i64* %295, align 8, !dbg !470, !psr.id !476, !verifier.code !63 */
  $i295 := $load.i64($M.116, $p294);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %291, i128* %28, align 16, !dbg !470, !psr.id !477, !verifier.code !63 */
  $M.117 := $store.i128($M.117, $p27, $i290);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %297 = bitcast i128* %28 to { i64, i64 }*, !dbg !470, !psr.id !478, !verifier.code !63 */
  $p296 := $bitcast.ref.ref($p27);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %298 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %297, i32 0, i32 0, !dbg !470, !psr.id !479, !verifier.code !63 */
  $p297 := $add.ref($add.ref($p296, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %299 = load i64, i64* %298, align 16, !dbg !470, !psr.id !480, !verifier.code !63 */
  $i298 := $load.i64($M.117, $p297);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %300 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %297, i32 0, i32 1, !dbg !470, !psr.id !481, !verifier.code !63 */
  $p299 := $add.ref($add.ref($p296, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %301 = load i64, i64* %300, align 8, !dbg !470, !psr.id !482, !verifier.code !63 */
  $i300 := $load.i64($M.117, $p299);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %302 = call { i64, i64 } @FStar_UInt128_add(i64 %294, i64 %296, i64 %299, i64 %301), !dbg !470, !psr.id !483, !verifier.code !63 */
  call $p301 := FStar_UInt128_add($i293, $i295, $i298, $i300);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %303 = bitcast i128* %29 to { i64, i64 }*, !dbg !470, !psr.id !484, !verifier.code !63 */
  $p302 := $bitcast.ref.ref($p28);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %304 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %303, i32 0, i32 0, !dbg !470, !psr.id !485, !verifier.code !63 */
  $p303 := $add.ref($add.ref($p302, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %305 = extractvalue { i64, i64 } %302, 0, !dbg !470, !psr.id !486, !verifier.code !63 */
  $i304 := $extractvalue.i64($p301, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %305, i64* %304, align 16, !dbg !470, !psr.id !487, !verifier.code !63 */
  $M.118 := $store.i64($M.118, $p303, $i304);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %306 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %303, i32 0, i32 1, !dbg !470, !psr.id !488, !verifier.code !63 */
  $p305 := $add.ref($add.ref($p302, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %307 = extractvalue { i64, i64 } %302, 1, !dbg !470, !psr.id !489, !verifier.code !63 */
  $i306 := $extractvalue.i64($p301, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %307, i64* %306, align 8, !dbg !470, !psr.id !490, !verifier.code !63 */
  $M.118 := $store.i64($M.118, $p305, $i306);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  /* %308 = load i128, i128* %29, align 16, !dbg !470, !psr.id !491, !verifier.code !63 */
  $i307 := $load.i128($M.118, $p28);
  /* call void @llvm.dbg.value(metadata i128 %308, metadata !1694, metadata !DIExpression()), !dbg !1392, !psr.id !1695, !verifier.code !64 */
  call {:cexpr "o41"} boogie_si_record_i128($i307);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %309 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %135, i64 %152), !dbg !494, !psr.id !495, !ValueTainted !200, !verifier.code !63 */
  call $p308 := FStar_UInt128_mul_wide($i134, $i151);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  /* %310 = bitcast i128* %30 to { i64, i64 }*, !dbg !494, !psr.id !496, !verifier.code !63 */
  $p309 := $bitcast.ref.ref($p29);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  /* %311 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %310, i32 0, i32 0, !dbg !494, !psr.id !497, !verifier.code !63 */
  $p310 := $add.ref($add.ref($p309, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  /* %312 = extractvalue { i64, i64 } %309, 0, !dbg !494, !psr.id !498, !verifier.code !63 */
  $i311 := $extractvalue.i64($p308, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %312, i64* %311, align 16, !dbg !494, !psr.id !499, !verifier.code !63 */
  $M.119 := $store.i64($M.119, $p310, $i311);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  /* %313 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %310, i32 0, i32 1, !dbg !494, !psr.id !500, !verifier.code !63 */
  $p312 := $add.ref($add.ref($p309, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  /* %314 = extractvalue { i64, i64 } %309, 1, !dbg !494, !psr.id !501, !verifier.code !63 */
  $i313 := $extractvalue.i64($p308, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %314, i64* %313, align 8, !dbg !494, !psr.id !502, !verifier.code !63 */
  $M.119 := $store.i64($M.119, $p312, $i313);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  /* %315 = load i128, i128* %30, align 16, !dbg !494, !psr.id !503, !verifier.code !63 */
  $i314 := $load.i128($M.119, $p29);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %212, i128* %31, align 16, !dbg !504, !psr.id !505, !verifier.code !63 */
  $M.120 := $store.i128($M.120, $p30, $i211);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %316 = bitcast i128* %31 to { i64, i64 }*, !dbg !504, !psr.id !506, !verifier.code !63 */
  $p315 := $bitcast.ref.ref($p30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %317 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %316, i32 0, i32 0, !dbg !504, !psr.id !507, !verifier.code !63 */
  $p316 := $add.ref($add.ref($p315, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %318 = load i64, i64* %317, align 16, !dbg !504, !psr.id !508, !verifier.code !63 */
  $i317 := $load.i64($M.120, $p316);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %319 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %316, i32 0, i32 1, !dbg !504, !psr.id !509, !verifier.code !63 */
  $p318 := $add.ref($add.ref($p315, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %320 = load i64, i64* %319, align 8, !dbg !504, !psr.id !510, !verifier.code !63 */
  $i319 := $load.i64($M.120, $p318);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %315, i128* %32, align 16, !dbg !504, !psr.id !511, !verifier.code !63 */
  $M.121 := $store.i128($M.121, $p31, $i314);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %321 = bitcast i128* %32 to { i64, i64 }*, !dbg !504, !psr.id !512, !verifier.code !63 */
  $p320 := $bitcast.ref.ref($p31);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %322 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %321, i32 0, i32 0, !dbg !504, !psr.id !513, !verifier.code !63 */
  $p321 := $add.ref($add.ref($p320, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %323 = load i64, i64* %322, align 16, !dbg !504, !psr.id !514, !verifier.code !63 */
  $i322 := $load.i64($M.121, $p321);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %324 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %321, i32 0, i32 1, !dbg !504, !psr.id !515, !verifier.code !63 */
  $p323 := $add.ref($add.ref($p320, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %325 = load i64, i64* %324, align 8, !dbg !504, !psr.id !516, !verifier.code !63 */
  $i324 := $load.i64($M.121, $p323);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %326 = call { i64, i64 } @FStar_UInt128_add(i64 %318, i64 %320, i64 %323, i64 %325), !dbg !504, !psr.id !517, !verifier.code !63 */
  call $p325 := FStar_UInt128_add($i317, $i319, $i322, $i324);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %327 = bitcast i128* %33 to { i64, i64 }*, !dbg !504, !psr.id !518, !verifier.code !63 */
  $p326 := $bitcast.ref.ref($p32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %328 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %327, i32 0, i32 0, !dbg !504, !psr.id !519, !verifier.code !63 */
  $p327 := $add.ref($add.ref($p326, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %329 = extractvalue { i64, i64 } %326, 0, !dbg !504, !psr.id !520, !verifier.code !63 */
  $i328 := $extractvalue.i64($p325, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %329, i64* %328, align 16, !dbg !504, !psr.id !521, !verifier.code !63 */
  $M.122 := $store.i64($M.122, $p327, $i328);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %330 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %327, i32 0, i32 1, !dbg !504, !psr.id !522, !verifier.code !63 */
  $p329 := $add.ref($add.ref($p326, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %331 = extractvalue { i64, i64 } %326, 1, !dbg !504, !psr.id !523, !verifier.code !63 */
  $i330 := $extractvalue.i64($p325, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %331, i64* %330, align 8, !dbg !504, !psr.id !524, !verifier.code !63 */
  $M.122 := $store.i64($M.122, $p329, $i330);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  /* %332 = load i128, i128* %33, align 16, !dbg !504, !psr.id !525, !verifier.code !63 */
  $i331 := $load.i128($M.122, $p32);
  /* call void @llvm.dbg.value(metadata i128 %332, metadata !1728, metadata !DIExpression()), !dbg !1392, !psr.id !1729, !verifier.code !64 */
  call {:cexpr "o02"} boogie_si_record_i128($i331);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %333 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %135, i64 %153), !dbg !528, !psr.id !529, !ValueTainted !200, !verifier.code !63 */
  call $p332 := FStar_UInt128_mul_wide($i134, $i152);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  /* %334 = bitcast i128* %34 to { i64, i64 }*, !dbg !528, !psr.id !530, !verifier.code !63 */
  $p333 := $bitcast.ref.ref($p33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  /* %335 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %334, i32 0, i32 0, !dbg !528, !psr.id !531, !verifier.code !63 */
  $p334 := $add.ref($add.ref($p333, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  /* %336 = extractvalue { i64, i64 } %333, 0, !dbg !528, !psr.id !532, !verifier.code !63 */
  $i335 := $extractvalue.i64($p332, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %336, i64* %335, align 16, !dbg !528, !psr.id !533, !verifier.code !63 */
  $M.123 := $store.i64($M.123, $p334, $i335);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  /* %337 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %334, i32 0, i32 1, !dbg !528, !psr.id !534, !verifier.code !63 */
  $p336 := $add.ref($add.ref($p333, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  /* %338 = extractvalue { i64, i64 } %333, 1, !dbg !528, !psr.id !535, !verifier.code !63 */
  $i337 := $extractvalue.i64($p332, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %338, i64* %337, align 8, !dbg !528, !psr.id !536, !verifier.code !63 */
  $M.123 := $store.i64($M.123, $p336, $i337);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  /* %339 = load i128, i128* %34, align 16, !dbg !528, !psr.id !537, !verifier.code !63 */
  $i338 := $load.i128($M.123, $p33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %236, i128* %35, align 16, !dbg !538, !psr.id !539, !verifier.code !63 */
  $M.124 := $store.i128($M.124, $p34, $i235);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %340 = bitcast i128* %35 to { i64, i64 }*, !dbg !538, !psr.id !540, !verifier.code !63 */
  $p339 := $bitcast.ref.ref($p34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %341 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %340, i32 0, i32 0, !dbg !538, !psr.id !541, !verifier.code !63 */
  $p340 := $add.ref($add.ref($p339, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %342 = load i64, i64* %341, align 16, !dbg !538, !psr.id !542, !verifier.code !63 */
  $i341 := $load.i64($M.124, $p340);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %343 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %340, i32 0, i32 1, !dbg !538, !psr.id !543, !verifier.code !63 */
  $p342 := $add.ref($add.ref($p339, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %344 = load i64, i64* %343, align 8, !dbg !538, !psr.id !544, !verifier.code !63 */
  $i343 := $load.i64($M.124, $p342);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %339, i128* %36, align 16, !dbg !538, !psr.id !545, !verifier.code !63 */
  $M.125 := $store.i128($M.125, $p35, $i338);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %345 = bitcast i128* %36 to { i64, i64 }*, !dbg !538, !psr.id !546, !verifier.code !63 */
  $p344 := $bitcast.ref.ref($p35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %346 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %345, i32 0, i32 0, !dbg !538, !psr.id !547, !verifier.code !63 */
  $p345 := $add.ref($add.ref($p344, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %347 = load i64, i64* %346, align 16, !dbg !538, !psr.id !548, !verifier.code !63 */
  $i346 := $load.i64($M.125, $p345);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %348 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %345, i32 0, i32 1, !dbg !538, !psr.id !549, !verifier.code !63 */
  $p347 := $add.ref($add.ref($p344, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %349 = load i64, i64* %348, align 8, !dbg !538, !psr.id !550, !verifier.code !63 */
  $i348 := $load.i64($M.125, $p347);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %350 = call { i64, i64 } @FStar_UInt128_add(i64 %342, i64 %344, i64 %347, i64 %349), !dbg !538, !psr.id !551, !verifier.code !63 */
  call $p349 := FStar_UInt128_add($i341, $i343, $i346, $i348);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %351 = bitcast i128* %37 to { i64, i64 }*, !dbg !538, !psr.id !552, !verifier.code !63 */
  $p350 := $bitcast.ref.ref($p36);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %352 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %351, i32 0, i32 0, !dbg !538, !psr.id !553, !verifier.code !63 */
  $p351 := $add.ref($add.ref($p350, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %353 = extractvalue { i64, i64 } %350, 0, !dbg !538, !psr.id !554, !verifier.code !63 */
  $i352 := $extractvalue.i64($p349, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %353, i64* %352, align 16, !dbg !538, !psr.id !555, !verifier.code !63 */
  $M.126 := $store.i64($M.126, $p351, $i352);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %354 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %351, i32 0, i32 1, !dbg !538, !psr.id !556, !verifier.code !63 */
  $p353 := $add.ref($add.ref($p350, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %355 = extractvalue { i64, i64 } %350, 1, !dbg !538, !psr.id !557, !verifier.code !63 */
  $i354 := $extractvalue.i64($p349, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %355, i64* %354, align 8, !dbg !538, !psr.id !558, !verifier.code !63 */
  $M.126 := $store.i64($M.126, $p353, $i354);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  /* %356 = load i128, i128* %37, align 16, !dbg !538, !psr.id !559, !verifier.code !63 */
  $i355 := $load.i128($M.126, $p36);
  /* call void @llvm.dbg.value(metadata i128 %356, metadata !1762, metadata !DIExpression()), !dbg !1392, !psr.id !1763, !verifier.code !64 */
  call {:cexpr "o12"} boogie_si_record_i128($i355);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %357 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %135, i64 %141), !dbg !562, !psr.id !563, !ValueTainted !200, !verifier.code !63 */
  call $p356 := FStar_UInt128_mul_wide($i134, $i140);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  /* %358 = bitcast i128* %38 to { i64, i64 }*, !dbg !562, !psr.id !564, !verifier.code !63 */
  $p357 := $bitcast.ref.ref($p37);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  /* %359 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %358, i32 0, i32 0, !dbg !562, !psr.id !565, !verifier.code !63 */
  $p358 := $add.ref($add.ref($p357, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  /* %360 = extractvalue { i64, i64 } %357, 0, !dbg !562, !psr.id !566, !verifier.code !63 */
  $i359 := $extractvalue.i64($p356, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %360, i64* %359, align 16, !dbg !562, !psr.id !567, !verifier.code !63 */
  $M.127 := $store.i64($M.127, $p358, $i359);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  /* %361 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %358, i32 0, i32 1, !dbg !562, !psr.id !568, !verifier.code !63 */
  $p360 := $add.ref($add.ref($p357, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  /* %362 = extractvalue { i64, i64 } %357, 1, !dbg !562, !psr.id !569, !verifier.code !63 */
  $i361 := $extractvalue.i64($p356, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %362, i64* %361, align 8, !dbg !562, !psr.id !570, !verifier.code !63 */
  $M.127 := $store.i64($M.127, $p360, $i361);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  /* %363 = load i128, i128* %38, align 16, !dbg !562, !psr.id !571, !verifier.code !63 */
  $i362 := $load.i128($M.127, $p37);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %260, i128* %39, align 16, !dbg !572, !psr.id !573, !verifier.code !63 */
  $M.128 := $store.i128($M.128, $p38, $i259);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %364 = bitcast i128* %39 to { i64, i64 }*, !dbg !572, !psr.id !574, !verifier.code !63 */
  $p363 := $bitcast.ref.ref($p38);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %365 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %364, i32 0, i32 0, !dbg !572, !psr.id !575, !verifier.code !63 */
  $p364 := $add.ref($add.ref($p363, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %366 = load i64, i64* %365, align 16, !dbg !572, !psr.id !576, !verifier.code !63 */
  $i365 := $load.i64($M.128, $p364);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %367 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %364, i32 0, i32 1, !dbg !572, !psr.id !577, !verifier.code !63 */
  $p366 := $add.ref($add.ref($p363, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %368 = load i64, i64* %367, align 8, !dbg !572, !psr.id !578, !verifier.code !63 */
  $i367 := $load.i64($M.128, $p366);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %363, i128* %40, align 16, !dbg !572, !psr.id !579, !verifier.code !63 */
  $M.129 := $store.i128($M.129, $p39, $i362);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %369 = bitcast i128* %40 to { i64, i64 }*, !dbg !572, !psr.id !580, !verifier.code !63 */
  $p368 := $bitcast.ref.ref($p39);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %370 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %369, i32 0, i32 0, !dbg !572, !psr.id !581, !verifier.code !63 */
  $p369 := $add.ref($add.ref($p368, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %371 = load i64, i64* %370, align 16, !dbg !572, !psr.id !582, !verifier.code !63 */
  $i370 := $load.i64($M.129, $p369);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %372 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %369, i32 0, i32 1, !dbg !572, !psr.id !583, !verifier.code !63 */
  $p371 := $add.ref($add.ref($p368, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %373 = load i64, i64* %372, align 8, !dbg !572, !psr.id !584, !verifier.code !63 */
  $i372 := $load.i64($M.129, $p371);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %374 = call { i64, i64 } @FStar_UInt128_add(i64 %366, i64 %368, i64 %371, i64 %373), !dbg !572, !psr.id !585, !verifier.code !63 */
  call $p373 := FStar_UInt128_add($i365, $i367, $i370, $i372);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %375 = bitcast i128* %41 to { i64, i64 }*, !dbg !572, !psr.id !586, !verifier.code !63 */
  $p374 := $bitcast.ref.ref($p40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %376 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %375, i32 0, i32 0, !dbg !572, !psr.id !587, !verifier.code !63 */
  $p375 := $add.ref($add.ref($p374, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %377 = extractvalue { i64, i64 } %374, 0, !dbg !572, !psr.id !588, !verifier.code !63 */
  $i376 := $extractvalue.i64($p373, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %377, i64* %376, align 16, !dbg !572, !psr.id !589, !verifier.code !63 */
  $M.130 := $store.i64($M.130, $p375, $i376);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %378 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %375, i32 0, i32 1, !dbg !572, !psr.id !590, !verifier.code !63 */
  $p377 := $add.ref($add.ref($p374, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %379 = extractvalue { i64, i64 } %374, 1, !dbg !572, !psr.id !591, !verifier.code !63 */
  $i378 := $extractvalue.i64($p373, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %379, i64* %378, align 8, !dbg !572, !psr.id !592, !verifier.code !63 */
  $M.130 := $store.i64($M.130, $p377, $i378);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  /* %380 = load i128, i128* %41, align 16, !dbg !572, !psr.id !593, !verifier.code !63 */
  $i379 := $load.i128($M.130, $p40);
  /* call void @llvm.dbg.value(metadata i128 %380, metadata !1796, metadata !DIExpression()), !dbg !1392, !psr.id !1797, !verifier.code !64 */
  call {:cexpr "o22"} boogie_si_record_i128($i379);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %381 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %135, i64 %143), !dbg !596, !psr.id !597, !ValueTainted !200, !verifier.code !63 */
  call $p380 := FStar_UInt128_mul_wide($i134, $i142);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  /* %382 = bitcast i128* %42 to { i64, i64 }*, !dbg !596, !psr.id !598, !verifier.code !63 */
  $p381 := $bitcast.ref.ref($p41);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  /* %383 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %382, i32 0, i32 0, !dbg !596, !psr.id !599, !verifier.code !63 */
  $p382 := $add.ref($add.ref($p381, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  /* %384 = extractvalue { i64, i64 } %381, 0, !dbg !596, !psr.id !600, !verifier.code !63 */
  $i383 := $extractvalue.i64($p380, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %384, i64* %383, align 16, !dbg !596, !psr.id !601, !verifier.code !63 */
  $M.131 := $store.i64($M.131, $p382, $i383);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  /* %385 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %382, i32 0, i32 1, !dbg !596, !psr.id !602, !verifier.code !63 */
  $p384 := $add.ref($add.ref($p381, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  /* %386 = extractvalue { i64, i64 } %381, 1, !dbg !596, !psr.id !603, !verifier.code !63 */
  $i385 := $extractvalue.i64($p380, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %386, i64* %385, align 8, !dbg !596, !psr.id !604, !verifier.code !63 */
  $M.131 := $store.i64($M.131, $p384, $i385);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  /* %387 = load i128, i128* %42, align 16, !dbg !596, !psr.id !605, !verifier.code !63 */
  $i386 := $load.i128($M.131, $p41);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %284, i128* %43, align 16, !dbg !606, !psr.id !607, !verifier.code !63 */
  $M.132 := $store.i128($M.132, $p42, $i283);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %388 = bitcast i128* %43 to { i64, i64 }*, !dbg !606, !psr.id !608, !verifier.code !63 */
  $p387 := $bitcast.ref.ref($p42);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %389 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %388, i32 0, i32 0, !dbg !606, !psr.id !609, !verifier.code !63 */
  $p388 := $add.ref($add.ref($p387, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %390 = load i64, i64* %389, align 16, !dbg !606, !psr.id !610, !verifier.code !63 */
  $i389 := $load.i64($M.132, $p388);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %391 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %388, i32 0, i32 1, !dbg !606, !psr.id !611, !verifier.code !63 */
  $p390 := $add.ref($add.ref($p387, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %392 = load i64, i64* %391, align 8, !dbg !606, !psr.id !612, !verifier.code !63 */
  $i391 := $load.i64($M.132, $p390);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %387, i128* %44, align 16, !dbg !606, !psr.id !613, !verifier.code !63 */
  $M.133 := $store.i128($M.133, $p43, $i386);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %393 = bitcast i128* %44 to { i64, i64 }*, !dbg !606, !psr.id !614, !verifier.code !63 */
  $p392 := $bitcast.ref.ref($p43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %394 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %393, i32 0, i32 0, !dbg !606, !psr.id !615, !verifier.code !63 */
  $p393 := $add.ref($add.ref($p392, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %395 = load i64, i64* %394, align 16, !dbg !606, !psr.id !616, !verifier.code !63 */
  $i394 := $load.i64($M.133, $p393);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %396 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %393, i32 0, i32 1, !dbg !606, !psr.id !617, !verifier.code !63 */
  $p395 := $add.ref($add.ref($p392, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %397 = load i64, i64* %396, align 8, !dbg !606, !psr.id !618, !verifier.code !63 */
  $i396 := $load.i64($M.133, $p395);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %398 = call { i64, i64 } @FStar_UInt128_add(i64 %390, i64 %392, i64 %395, i64 %397), !dbg !606, !psr.id !619, !verifier.code !63 */
  call $p397 := FStar_UInt128_add($i389, $i391, $i394, $i396);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %399 = bitcast i128* %45 to { i64, i64 }*, !dbg !606, !psr.id !620, !verifier.code !63 */
  $p398 := $bitcast.ref.ref($p44);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %400 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %399, i32 0, i32 0, !dbg !606, !psr.id !621, !verifier.code !63 */
  $p399 := $add.ref($add.ref($p398, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %401 = extractvalue { i64, i64 } %398, 0, !dbg !606, !psr.id !622, !verifier.code !63 */
  $i400 := $extractvalue.i64($p397, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %401, i64* %400, align 16, !dbg !606, !psr.id !623, !verifier.code !63 */
  $M.134 := $store.i64($M.134, $p399, $i400);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %402 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %399, i32 0, i32 1, !dbg !606, !psr.id !624, !verifier.code !63 */
  $p401 := $add.ref($add.ref($p398, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %403 = extractvalue { i64, i64 } %398, 1, !dbg !606, !psr.id !625, !verifier.code !63 */
  $i402 := $extractvalue.i64($p397, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %403, i64* %402, align 8, !dbg !606, !psr.id !626, !verifier.code !63 */
  $M.134 := $store.i64($M.134, $p401, $i402);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  /* %404 = load i128, i128* %45, align 16, !dbg !606, !psr.id !627, !verifier.code !63 */
  $i403 := $load.i128($M.134, $p44);
  /* call void @llvm.dbg.value(metadata i128 %404, metadata !1830, metadata !DIExpression()), !dbg !1392, !psr.id !1831, !verifier.code !64 */
  call {:cexpr "o32"} boogie_si_record_i128($i403);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %405 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %135, i64 %145), !dbg !630, !psr.id !631, !ValueTainted !200, !verifier.code !63 */
  call $p404 := FStar_UInt128_mul_wide($i134, $i144);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  /* %406 = bitcast i128* %46 to { i64, i64 }*, !dbg !630, !psr.id !632, !verifier.code !63 */
  $p405 := $bitcast.ref.ref($p45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  /* %407 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %406, i32 0, i32 0, !dbg !630, !psr.id !633, !verifier.code !63 */
  $p406 := $add.ref($add.ref($p405, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  /* %408 = extractvalue { i64, i64 } %405, 0, !dbg !630, !psr.id !634, !verifier.code !63 */
  $i407 := $extractvalue.i64($p404, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %408, i64* %407, align 16, !dbg !630, !psr.id !635, !verifier.code !63 */
  $M.135 := $store.i64($M.135, $p406, $i407);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  /* %409 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %406, i32 0, i32 1, !dbg !630, !psr.id !636, !verifier.code !63 */
  $p408 := $add.ref($add.ref($p405, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  /* %410 = extractvalue { i64, i64 } %405, 1, !dbg !630, !psr.id !637, !verifier.code !63 */
  $i409 := $extractvalue.i64($p404, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %410, i64* %409, align 8, !dbg !630, !psr.id !638, !verifier.code !63 */
  $M.135 := $store.i64($M.135, $p408, $i409);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  /* %411 = load i128, i128* %46, align 16, !dbg !630, !psr.id !639, !verifier.code !63 */
  $i410 := $load.i128($M.135, $p45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %308, i128* %47, align 16, !dbg !640, !psr.id !641, !verifier.code !63 */
  $M.136 := $store.i128($M.136, $p46, $i307);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %412 = bitcast i128* %47 to { i64, i64 }*, !dbg !640, !psr.id !642, !verifier.code !63 */
  $p411 := $bitcast.ref.ref($p46);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %413 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %412, i32 0, i32 0, !dbg !640, !psr.id !643, !verifier.code !63 */
  $p412 := $add.ref($add.ref($p411, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %414 = load i64, i64* %413, align 16, !dbg !640, !psr.id !644, !verifier.code !63 */
  $i413 := $load.i64($M.136, $p412);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %415 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %412, i32 0, i32 1, !dbg !640, !psr.id !645, !verifier.code !63 */
  $p414 := $add.ref($add.ref($p411, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %416 = load i64, i64* %415, align 8, !dbg !640, !psr.id !646, !verifier.code !63 */
  $i415 := $load.i64($M.136, $p414);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %411, i128* %48, align 16, !dbg !640, !psr.id !647, !verifier.code !63 */
  $M.137 := $store.i128($M.137, $p47, $i410);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %417 = bitcast i128* %48 to { i64, i64 }*, !dbg !640, !psr.id !648, !verifier.code !63 */
  $p416 := $bitcast.ref.ref($p47);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %418 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %417, i32 0, i32 0, !dbg !640, !psr.id !649, !verifier.code !63 */
  $p417 := $add.ref($add.ref($p416, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %419 = load i64, i64* %418, align 16, !dbg !640, !psr.id !650, !verifier.code !63 */
  $i418 := $load.i64($M.137, $p417);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %420 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %417, i32 0, i32 1, !dbg !640, !psr.id !651, !verifier.code !63 */
  $p419 := $add.ref($add.ref($p416, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %421 = load i64, i64* %420, align 8, !dbg !640, !psr.id !652, !verifier.code !63 */
  $i420 := $load.i64($M.137, $p419);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %422 = call { i64, i64 } @FStar_UInt128_add(i64 %414, i64 %416, i64 %419, i64 %421), !dbg !640, !psr.id !653, !verifier.code !63 */
  call $p421 := FStar_UInt128_add($i413, $i415, $i418, $i420);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %423 = bitcast i128* %49 to { i64, i64 }*, !dbg !640, !psr.id !654, !verifier.code !63 */
  $p422 := $bitcast.ref.ref($p48);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %424 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %423, i32 0, i32 0, !dbg !640, !psr.id !655, !verifier.code !63 */
  $p423 := $add.ref($add.ref($p422, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %425 = extractvalue { i64, i64 } %422, 0, !dbg !640, !psr.id !656, !verifier.code !63 */
  $i424 := $extractvalue.i64($p421, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %425, i64* %424, align 16, !dbg !640, !psr.id !657, !verifier.code !63 */
  $M.138 := $store.i64($M.138, $p423, $i424);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %426 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %423, i32 0, i32 1, !dbg !640, !psr.id !658, !verifier.code !63 */
  $p425 := $add.ref($add.ref($p422, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %427 = extractvalue { i64, i64 } %422, 1, !dbg !640, !psr.id !659, !verifier.code !63 */
  $i426 := $extractvalue.i64($p421, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %427, i64* %426, align 8, !dbg !640, !psr.id !660, !verifier.code !63 */
  $M.138 := $store.i64($M.138, $p425, $i426);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  /* %428 = load i128, i128* %49, align 16, !dbg !640, !psr.id !661, !verifier.code !63 */
  $i427 := $load.i128($M.138, $p48);
  /* call void @llvm.dbg.value(metadata i128 %428, metadata !1864, metadata !DIExpression()), !dbg !1392, !psr.id !1865, !verifier.code !64 */
  call {:cexpr "o42"} boogie_si_record_i128($i427);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %429 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %137, i64 %151), !dbg !664, !psr.id !665, !ValueTainted !200, !verifier.code !63 */
  call $p428 := FStar_UInt128_mul_wide($i136, $i150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  /* %430 = bitcast i128* %50 to { i64, i64 }*, !dbg !664, !psr.id !666, !verifier.code !63 */
  $p429 := $bitcast.ref.ref($p49);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  /* %431 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %430, i32 0, i32 0, !dbg !664, !psr.id !667, !verifier.code !63 */
  $p430 := $add.ref($add.ref($p429, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  /* %432 = extractvalue { i64, i64 } %429, 0, !dbg !664, !psr.id !668, !verifier.code !63 */
  $i431 := $extractvalue.i64($p428, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %432, i64* %431, align 16, !dbg !664, !psr.id !669, !verifier.code !63 */
  $M.139 := $store.i64($M.139, $p430, $i431);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  /* %433 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %430, i32 0, i32 1, !dbg !664, !psr.id !670, !verifier.code !63 */
  $p432 := $add.ref($add.ref($p429, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  /* %434 = extractvalue { i64, i64 } %429, 1, !dbg !664, !psr.id !671, !verifier.code !63 */
  $i433 := $extractvalue.i64($p428, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %434, i64* %433, align 8, !dbg !664, !psr.id !672, !verifier.code !63 */
  $M.139 := $store.i64($M.139, $p432, $i433);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  /* %435 = load i128, i128* %50, align 16, !dbg !664, !psr.id !673, !verifier.code !63 */
  $i434 := $load.i128($M.139, $p49);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %332, i128* %51, align 16, !dbg !674, !psr.id !675, !verifier.code !63 */
  $M.140 := $store.i128($M.140, $p50, $i331);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %436 = bitcast i128* %51 to { i64, i64 }*, !dbg !674, !psr.id !676, !verifier.code !63 */
  $p435 := $bitcast.ref.ref($p50);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %437 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %436, i32 0, i32 0, !dbg !674, !psr.id !677, !verifier.code !63 */
  $p436 := $add.ref($add.ref($p435, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %438 = load i64, i64* %437, align 16, !dbg !674, !psr.id !678, !verifier.code !63 */
  $i437 := $load.i64($M.140, $p436);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %439 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %436, i32 0, i32 1, !dbg !674, !psr.id !679, !verifier.code !63 */
  $p438 := $add.ref($add.ref($p435, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %440 = load i64, i64* %439, align 8, !dbg !674, !psr.id !680, !verifier.code !63 */
  $i439 := $load.i64($M.140, $p438);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %435, i128* %52, align 16, !dbg !674, !psr.id !681, !verifier.code !63 */
  $M.141 := $store.i128($M.141, $p51, $i434);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %441 = bitcast i128* %52 to { i64, i64 }*, !dbg !674, !psr.id !682, !verifier.code !63 */
  $p440 := $bitcast.ref.ref($p51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %442 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %441, i32 0, i32 0, !dbg !674, !psr.id !683, !verifier.code !63 */
  $p441 := $add.ref($add.ref($p440, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %443 = load i64, i64* %442, align 16, !dbg !674, !psr.id !684, !verifier.code !63 */
  $i442 := $load.i64($M.141, $p441);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %444 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %441, i32 0, i32 1, !dbg !674, !psr.id !685, !verifier.code !63 */
  $p443 := $add.ref($add.ref($p440, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %445 = load i64, i64* %444, align 8, !dbg !674, !psr.id !686, !verifier.code !63 */
  $i444 := $load.i64($M.141, $p443);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %446 = call { i64, i64 } @FStar_UInt128_add(i64 %438, i64 %440, i64 %443, i64 %445), !dbg !674, !psr.id !687, !verifier.code !63 */
  call $p445 := FStar_UInt128_add($i437, $i439, $i442, $i444);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %447 = bitcast i128* %53 to { i64, i64 }*, !dbg !674, !psr.id !688, !verifier.code !63 */
  $p446 := $bitcast.ref.ref($p52);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %448 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %447, i32 0, i32 0, !dbg !674, !psr.id !689, !verifier.code !63 */
  $p447 := $add.ref($add.ref($p446, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %449 = extractvalue { i64, i64 } %446, 0, !dbg !674, !psr.id !690, !verifier.code !63 */
  $i448 := $extractvalue.i64($p445, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %449, i64* %448, align 16, !dbg !674, !psr.id !691, !verifier.code !63 */
  $M.142 := $store.i64($M.142, $p447, $i448);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %450 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %447, i32 0, i32 1, !dbg !674, !psr.id !692, !verifier.code !63 */
  $p449 := $add.ref($add.ref($p446, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %451 = extractvalue { i64, i64 } %446, 1, !dbg !674, !psr.id !693, !verifier.code !63 */
  $i450 := $extractvalue.i64($p445, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %451, i64* %450, align 8, !dbg !674, !psr.id !694, !verifier.code !63 */
  $M.142 := $store.i64($M.142, $p449, $i450);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  /* %452 = load i128, i128* %53, align 16, !dbg !674, !psr.id !695, !verifier.code !63 */
  $i451 := $load.i128($M.142, $p52);
  /* call void @llvm.dbg.value(metadata i128 %452, metadata !1898, metadata !DIExpression()), !dbg !1392, !psr.id !1899, !verifier.code !64 */
  call {:cexpr "o03"} boogie_si_record_i128($i451);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %453 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %137, i64 %152), !dbg !698, !psr.id !699, !ValueTainted !200, !verifier.code !63 */
  call $p452 := FStar_UInt128_mul_wide($i136, $i151);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  /* %454 = bitcast i128* %54 to { i64, i64 }*, !dbg !698, !psr.id !700, !verifier.code !63 */
  $p453 := $bitcast.ref.ref($p53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  /* %455 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %454, i32 0, i32 0, !dbg !698, !psr.id !701, !verifier.code !63 */
  $p454 := $add.ref($add.ref($p453, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  /* %456 = extractvalue { i64, i64 } %453, 0, !dbg !698, !psr.id !702, !verifier.code !63 */
  $i455 := $extractvalue.i64($p452, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %456, i64* %455, align 16, !dbg !698, !psr.id !703, !verifier.code !63 */
  $M.143 := $store.i64($M.143, $p454, $i455);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  /* %457 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %454, i32 0, i32 1, !dbg !698, !psr.id !704, !verifier.code !63 */
  $p456 := $add.ref($add.ref($p453, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  /* %458 = extractvalue { i64, i64 } %453, 1, !dbg !698, !psr.id !705, !verifier.code !63 */
  $i457 := $extractvalue.i64($p452, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %458, i64* %457, align 8, !dbg !698, !psr.id !706, !verifier.code !63 */
  $M.143 := $store.i64($M.143, $p456, $i457);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  /* %459 = load i128, i128* %54, align 16, !dbg !698, !psr.id !707, !verifier.code !63 */
  $i458 := $load.i128($M.143, $p53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %356, i128* %55, align 16, !dbg !708, !psr.id !709, !verifier.code !63 */
  $M.144 := $store.i128($M.144, $p54, $i355);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %460 = bitcast i128* %55 to { i64, i64 }*, !dbg !708, !psr.id !710, !verifier.code !63 */
  $p459 := $bitcast.ref.ref($p54);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %461 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %460, i32 0, i32 0, !dbg !708, !psr.id !711, !verifier.code !63 */
  $p460 := $add.ref($add.ref($p459, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %462 = load i64, i64* %461, align 16, !dbg !708, !psr.id !712, !verifier.code !63 */
  $i461 := $load.i64($M.144, $p460);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %463 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %460, i32 0, i32 1, !dbg !708, !psr.id !713, !verifier.code !63 */
  $p462 := $add.ref($add.ref($p459, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %464 = load i64, i64* %463, align 8, !dbg !708, !psr.id !714, !verifier.code !63 */
  $i463 := $load.i64($M.144, $p462);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %459, i128* %56, align 16, !dbg !708, !psr.id !715, !verifier.code !63 */
  $M.145 := $store.i128($M.145, $p55, $i458);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %465 = bitcast i128* %56 to { i64, i64 }*, !dbg !708, !psr.id !716, !verifier.code !63 */
  $p464 := $bitcast.ref.ref($p55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %466 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %465, i32 0, i32 0, !dbg !708, !psr.id !717, !verifier.code !63 */
  $p465 := $add.ref($add.ref($p464, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %467 = load i64, i64* %466, align 16, !dbg !708, !psr.id !718, !verifier.code !63 */
  $i466 := $load.i64($M.145, $p465);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %468 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %465, i32 0, i32 1, !dbg !708, !psr.id !719, !verifier.code !63 */
  $p467 := $add.ref($add.ref($p464, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %469 = load i64, i64* %468, align 8, !dbg !708, !psr.id !720, !verifier.code !63 */
  $i468 := $load.i64($M.145, $p467);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %470 = call { i64, i64 } @FStar_UInt128_add(i64 %462, i64 %464, i64 %467, i64 %469), !dbg !708, !psr.id !721, !verifier.code !63 */
  call $p469 := FStar_UInt128_add($i461, $i463, $i466, $i468);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %471 = bitcast i128* %57 to { i64, i64 }*, !dbg !708, !psr.id !722, !verifier.code !63 */
  $p470 := $bitcast.ref.ref($p56);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %472 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %471, i32 0, i32 0, !dbg !708, !psr.id !723, !verifier.code !63 */
  $p471 := $add.ref($add.ref($p470, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %473 = extractvalue { i64, i64 } %470, 0, !dbg !708, !psr.id !724, !verifier.code !63 */
  $i472 := $extractvalue.i64($p469, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %473, i64* %472, align 16, !dbg !708, !psr.id !725, !verifier.code !63 */
  $M.146 := $store.i64($M.146, $p471, $i472);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %474 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %471, i32 0, i32 1, !dbg !708, !psr.id !726, !verifier.code !63 */
  $p473 := $add.ref($add.ref($p470, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %475 = extractvalue { i64, i64 } %470, 1, !dbg !708, !psr.id !727, !verifier.code !63 */
  $i474 := $extractvalue.i64($p469, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %475, i64* %474, align 8, !dbg !708, !psr.id !728, !verifier.code !63 */
  $M.146 := $store.i64($M.146, $p473, $i474);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  /* %476 = load i128, i128* %57, align 16, !dbg !708, !psr.id !729, !verifier.code !63 */
  $i475 := $load.i128($M.146, $p56);
  /* call void @llvm.dbg.value(metadata i128 %476, metadata !1932, metadata !DIExpression()), !dbg !1392, !psr.id !1933, !verifier.code !64 */
  call {:cexpr "o13"} boogie_si_record_i128($i475);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %477 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %137, i64 %153), !dbg !732, !psr.id !733, !ValueTainted !200, !verifier.code !63 */
  call $p476 := FStar_UInt128_mul_wide($i136, $i152);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  /* %478 = bitcast i128* %58 to { i64, i64 }*, !dbg !732, !psr.id !734, !verifier.code !63 */
  $p477 := $bitcast.ref.ref($p57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  /* %479 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %478, i32 0, i32 0, !dbg !732, !psr.id !735, !verifier.code !63 */
  $p478 := $add.ref($add.ref($p477, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  /* %480 = extractvalue { i64, i64 } %477, 0, !dbg !732, !psr.id !736, !verifier.code !63 */
  $i479 := $extractvalue.i64($p476, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %480, i64* %479, align 16, !dbg !732, !psr.id !737, !verifier.code !63 */
  $M.147 := $store.i64($M.147, $p478, $i479);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  /* %481 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %478, i32 0, i32 1, !dbg !732, !psr.id !738, !verifier.code !63 */
  $p480 := $add.ref($add.ref($p477, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  /* %482 = extractvalue { i64, i64 } %477, 1, !dbg !732, !psr.id !739, !verifier.code !63 */
  $i481 := $extractvalue.i64($p476, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %482, i64* %481, align 8, !dbg !732, !psr.id !740, !verifier.code !63 */
  $M.147 := $store.i64($M.147, $p480, $i481);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  /* %483 = load i128, i128* %58, align 16, !dbg !732, !psr.id !741, !verifier.code !63 */
  $i482 := $load.i128($M.147, $p57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %380, i128* %59, align 16, !dbg !742, !psr.id !743, !verifier.code !63 */
  $M.148 := $store.i128($M.148, $p58, $i379);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %484 = bitcast i128* %59 to { i64, i64 }*, !dbg !742, !psr.id !744, !verifier.code !63 */
  $p483 := $bitcast.ref.ref($p58);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %485 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %484, i32 0, i32 0, !dbg !742, !psr.id !745, !verifier.code !63 */
  $p484 := $add.ref($add.ref($p483, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %486 = load i64, i64* %485, align 16, !dbg !742, !psr.id !746, !verifier.code !63 */
  $i485 := $load.i64($M.148, $p484);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %487 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %484, i32 0, i32 1, !dbg !742, !psr.id !747, !verifier.code !63 */
  $p486 := $add.ref($add.ref($p483, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %488 = load i64, i64* %487, align 8, !dbg !742, !psr.id !748, !verifier.code !63 */
  $i487 := $load.i64($M.148, $p486);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %483, i128* %60, align 16, !dbg !742, !psr.id !749, !verifier.code !63 */
  $M.149 := $store.i128($M.149, $p59, $i482);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %489 = bitcast i128* %60 to { i64, i64 }*, !dbg !742, !psr.id !750, !verifier.code !63 */
  $p488 := $bitcast.ref.ref($p59);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %490 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %489, i32 0, i32 0, !dbg !742, !psr.id !751, !verifier.code !63 */
  $p489 := $add.ref($add.ref($p488, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %491 = load i64, i64* %490, align 16, !dbg !742, !psr.id !752, !verifier.code !63 */
  $i490 := $load.i64($M.149, $p489);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %492 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %489, i32 0, i32 1, !dbg !742, !psr.id !753, !verifier.code !63 */
  $p491 := $add.ref($add.ref($p488, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %493 = load i64, i64* %492, align 8, !dbg !742, !psr.id !754, !verifier.code !63 */
  $i492 := $load.i64($M.149, $p491);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %494 = call { i64, i64 } @FStar_UInt128_add(i64 %486, i64 %488, i64 %491, i64 %493), !dbg !742, !psr.id !755, !verifier.code !63 */
  call $p493 := FStar_UInt128_add($i485, $i487, $i490, $i492);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %495 = bitcast i128* %61 to { i64, i64 }*, !dbg !742, !psr.id !756, !verifier.code !63 */
  $p494 := $bitcast.ref.ref($p60);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %496 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %495, i32 0, i32 0, !dbg !742, !psr.id !757, !verifier.code !63 */
  $p495 := $add.ref($add.ref($p494, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %497 = extractvalue { i64, i64 } %494, 0, !dbg !742, !psr.id !758, !verifier.code !63 */
  $i496 := $extractvalue.i64($p493, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %497, i64* %496, align 16, !dbg !742, !psr.id !759, !verifier.code !63 */
  $M.150 := $store.i64($M.150, $p495, $i496);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %498 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %495, i32 0, i32 1, !dbg !742, !psr.id !760, !verifier.code !63 */
  $p497 := $add.ref($add.ref($p494, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %499 = extractvalue { i64, i64 } %494, 1, !dbg !742, !psr.id !761, !verifier.code !63 */
  $i498 := $extractvalue.i64($p493, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %499, i64* %498, align 8, !dbg !742, !psr.id !762, !verifier.code !63 */
  $M.150 := $store.i64($M.150, $p497, $i498);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  /* %500 = load i128, i128* %61, align 16, !dbg !742, !psr.id !763, !verifier.code !63 */
  $i499 := $load.i128($M.150, $p60);
  /* call void @llvm.dbg.value(metadata i128 %500, metadata !1966, metadata !DIExpression()), !dbg !1392, !psr.id !1967, !verifier.code !64 */
  call {:cexpr "o23"} boogie_si_record_i128($i499);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %501 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %137, i64 %141), !dbg !766, !psr.id !767, !ValueTainted !200, !verifier.code !63 */
  call $p500 := FStar_UInt128_mul_wide($i136, $i140);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  /* %502 = bitcast i128* %62 to { i64, i64 }*, !dbg !766, !psr.id !768, !verifier.code !63 */
  $p501 := $bitcast.ref.ref($p61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  /* %503 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %502, i32 0, i32 0, !dbg !766, !psr.id !769, !verifier.code !63 */
  $p502 := $add.ref($add.ref($p501, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  /* %504 = extractvalue { i64, i64 } %501, 0, !dbg !766, !psr.id !770, !verifier.code !63 */
  $i503 := $extractvalue.i64($p500, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %504, i64* %503, align 16, !dbg !766, !psr.id !771, !verifier.code !63 */
  $M.151 := $store.i64($M.151, $p502, $i503);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  /* %505 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %502, i32 0, i32 1, !dbg !766, !psr.id !772, !verifier.code !63 */
  $p504 := $add.ref($add.ref($p501, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  /* %506 = extractvalue { i64, i64 } %501, 1, !dbg !766, !psr.id !773, !verifier.code !63 */
  $i505 := $extractvalue.i64($p500, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %506, i64* %505, align 8, !dbg !766, !psr.id !774, !verifier.code !63 */
  $M.151 := $store.i64($M.151, $p504, $i505);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  /* %507 = load i128, i128* %62, align 16, !dbg !766, !psr.id !775, !verifier.code !63 */
  $i506 := $load.i128($M.151, $p61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %404, i128* %63, align 16, !dbg !776, !psr.id !777, !verifier.code !63 */
  $M.152 := $store.i128($M.152, $p62, $i403);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %508 = bitcast i128* %63 to { i64, i64 }*, !dbg !776, !psr.id !778, !verifier.code !63 */
  $p507 := $bitcast.ref.ref($p62);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %509 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %508, i32 0, i32 0, !dbg !776, !psr.id !779, !verifier.code !63 */
  $p508 := $add.ref($add.ref($p507, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %510 = load i64, i64* %509, align 16, !dbg !776, !psr.id !780, !verifier.code !63 */
  $i509 := $load.i64($M.152, $p508);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %511 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %508, i32 0, i32 1, !dbg !776, !psr.id !781, !verifier.code !63 */
  $p510 := $add.ref($add.ref($p507, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %512 = load i64, i64* %511, align 8, !dbg !776, !psr.id !782, !verifier.code !63 */
  $i511 := $load.i64($M.152, $p510);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %507, i128* %64, align 16, !dbg !776, !psr.id !783, !verifier.code !63 */
  $M.153 := $store.i128($M.153, $p63, $i506);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %513 = bitcast i128* %64 to { i64, i64 }*, !dbg !776, !psr.id !784, !verifier.code !63 */
  $p512 := $bitcast.ref.ref($p63);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %514 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %513, i32 0, i32 0, !dbg !776, !psr.id !785, !verifier.code !63 */
  $p513 := $add.ref($add.ref($p512, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %515 = load i64, i64* %514, align 16, !dbg !776, !psr.id !786, !verifier.code !63 */
  $i514 := $load.i64($M.153, $p513);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %516 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %513, i32 0, i32 1, !dbg !776, !psr.id !787, !verifier.code !63 */
  $p515 := $add.ref($add.ref($p512, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %517 = load i64, i64* %516, align 8, !dbg !776, !psr.id !788, !verifier.code !63 */
  $i516 := $load.i64($M.153, $p515);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %518 = call { i64, i64 } @FStar_UInt128_add(i64 %510, i64 %512, i64 %515, i64 %517), !dbg !776, !psr.id !789, !verifier.code !63 */
  call $p517 := FStar_UInt128_add($i509, $i511, $i514, $i516);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %519 = bitcast i128* %65 to { i64, i64 }*, !dbg !776, !psr.id !790, !verifier.code !63 */
  $p518 := $bitcast.ref.ref($p64);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %520 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %519, i32 0, i32 0, !dbg !776, !psr.id !791, !verifier.code !63 */
  $p519 := $add.ref($add.ref($p518, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %521 = extractvalue { i64, i64 } %518, 0, !dbg !776, !psr.id !792, !verifier.code !63 */
  $i520 := $extractvalue.i64($p517, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %521, i64* %520, align 16, !dbg !776, !psr.id !793, !verifier.code !63 */
  $M.154 := $store.i64($M.154, $p519, $i520);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %522 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %519, i32 0, i32 1, !dbg !776, !psr.id !794, !verifier.code !63 */
  $p521 := $add.ref($add.ref($p518, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %523 = extractvalue { i64, i64 } %518, 1, !dbg !776, !psr.id !795, !verifier.code !63 */
  $i522 := $extractvalue.i64($p517, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %523, i64* %522, align 8, !dbg !776, !psr.id !796, !verifier.code !63 */
  $M.154 := $store.i64($M.154, $p521, $i522);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  /* %524 = load i128, i128* %65, align 16, !dbg !776, !psr.id !797, !verifier.code !63 */
  $i523 := $load.i128($M.154, $p64);
  /* call void @llvm.dbg.value(metadata i128 %524, metadata !2000, metadata !DIExpression()), !dbg !1392, !psr.id !2001, !verifier.code !64 */
  call {:cexpr "o33"} boogie_si_record_i128($i523);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %525 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %137, i64 %143), !dbg !800, !psr.id !801, !ValueTainted !200, !verifier.code !63 */
  call $p524 := FStar_UInt128_mul_wide($i136, $i142);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  /* %526 = bitcast i128* %66 to { i64, i64 }*, !dbg !800, !psr.id !802, !verifier.code !63 */
  $p525 := $bitcast.ref.ref($p65);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  /* %527 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %526, i32 0, i32 0, !dbg !800, !psr.id !803, !verifier.code !63 */
  $p526 := $add.ref($add.ref($p525, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  /* %528 = extractvalue { i64, i64 } %525, 0, !dbg !800, !psr.id !804, !verifier.code !63 */
  $i527 := $extractvalue.i64($p524, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %528, i64* %527, align 16, !dbg !800, !psr.id !805, !verifier.code !63 */
  $M.155 := $store.i64($M.155, $p526, $i527);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  /* %529 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %526, i32 0, i32 1, !dbg !800, !psr.id !806, !verifier.code !63 */
  $p528 := $add.ref($add.ref($p525, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  /* %530 = extractvalue { i64, i64 } %525, 1, !dbg !800, !psr.id !807, !verifier.code !63 */
  $i529 := $extractvalue.i64($p524, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %530, i64* %529, align 8, !dbg !800, !psr.id !808, !verifier.code !63 */
  $M.155 := $store.i64($M.155, $p528, $i529);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  /* %531 = load i128, i128* %66, align 16, !dbg !800, !psr.id !809, !verifier.code !63 */
  $i530 := $load.i128($M.155, $p65);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %428, i128* %67, align 16, !dbg !810, !psr.id !811, !verifier.code !63 */
  $M.156 := $store.i128($M.156, $p66, $i427);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %532 = bitcast i128* %67 to { i64, i64 }*, !dbg !810, !psr.id !812, !verifier.code !63 */
  $p531 := $bitcast.ref.ref($p66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %533 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %532, i32 0, i32 0, !dbg !810, !psr.id !813, !verifier.code !63 */
  $p532 := $add.ref($add.ref($p531, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %534 = load i64, i64* %533, align 16, !dbg !810, !psr.id !814, !verifier.code !63 */
  $i533 := $load.i64($M.156, $p532);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %535 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %532, i32 0, i32 1, !dbg !810, !psr.id !815, !verifier.code !63 */
  $p534 := $add.ref($add.ref($p531, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %536 = load i64, i64* %535, align 8, !dbg !810, !psr.id !816, !verifier.code !63 */
  $i535 := $load.i64($M.156, $p534);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %531, i128* %68, align 16, !dbg !810, !psr.id !817, !verifier.code !63 */
  $M.157 := $store.i128($M.157, $p67, $i530);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %537 = bitcast i128* %68 to { i64, i64 }*, !dbg !810, !psr.id !818, !verifier.code !63 */
  $p536 := $bitcast.ref.ref($p67);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %538 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %537, i32 0, i32 0, !dbg !810, !psr.id !819, !verifier.code !63 */
  $p537 := $add.ref($add.ref($p536, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %539 = load i64, i64* %538, align 16, !dbg !810, !psr.id !820, !verifier.code !63 */
  $i538 := $load.i64($M.157, $p537);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %540 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %537, i32 0, i32 1, !dbg !810, !psr.id !821, !verifier.code !63 */
  $p539 := $add.ref($add.ref($p536, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %541 = load i64, i64* %540, align 8, !dbg !810, !psr.id !822, !verifier.code !63 */
  $i540 := $load.i64($M.157, $p539);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %542 = call { i64, i64 } @FStar_UInt128_add(i64 %534, i64 %536, i64 %539, i64 %541), !dbg !810, !psr.id !823, !verifier.code !63 */
  call $p541 := FStar_UInt128_add($i533, $i535, $i538, $i540);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %543 = bitcast i128* %69 to { i64, i64 }*, !dbg !810, !psr.id !824, !verifier.code !63 */
  $p542 := $bitcast.ref.ref($p68);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %544 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %543, i32 0, i32 0, !dbg !810, !psr.id !825, !verifier.code !63 */
  $p543 := $add.ref($add.ref($p542, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %545 = extractvalue { i64, i64 } %542, 0, !dbg !810, !psr.id !826, !verifier.code !63 */
  $i544 := $extractvalue.i64($p541, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %545, i64* %544, align 16, !dbg !810, !psr.id !827, !verifier.code !63 */
  $M.158 := $store.i64($M.158, $p543, $i544);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %546 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %543, i32 0, i32 1, !dbg !810, !psr.id !828, !verifier.code !63 */
  $p545 := $add.ref($add.ref($p542, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %547 = extractvalue { i64, i64 } %542, 1, !dbg !810, !psr.id !829, !verifier.code !63 */
  $i546 := $extractvalue.i64($p541, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %547, i64* %546, align 8, !dbg !810, !psr.id !830, !verifier.code !63 */
  $M.158 := $store.i64($M.158, $p545, $i546);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  /* %548 = load i128, i128* %69, align 16, !dbg !810, !psr.id !831, !verifier.code !63 */
  $i547 := $load.i128($M.158, $p68);
  /* call void @llvm.dbg.value(metadata i128 %548, metadata !2034, metadata !DIExpression()), !dbg !1392, !psr.id !2035, !verifier.code !64 */
  call {:cexpr "o43"} boogie_si_record_i128($i547);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %549 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %139, i64 %150), !dbg !834, !psr.id !835, !ValueTainted !200, !verifier.code !63 */
  call $p548 := FStar_UInt128_mul_wide($i138, $i149);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  /* %550 = bitcast i128* %70 to { i64, i64 }*, !dbg !834, !psr.id !836, !verifier.code !63 */
  $p549 := $bitcast.ref.ref($p69);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  /* %551 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %550, i32 0, i32 0, !dbg !834, !psr.id !837, !verifier.code !63 */
  $p550 := $add.ref($add.ref($p549, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  /* %552 = extractvalue { i64, i64 } %549, 0, !dbg !834, !psr.id !838, !verifier.code !63 */
  $i551 := $extractvalue.i64($p548, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %552, i64* %551, align 16, !dbg !834, !psr.id !839, !verifier.code !63 */
  $M.159 := $store.i64($M.159, $p550, $i551);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  /* %553 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %550, i32 0, i32 1, !dbg !834, !psr.id !840, !verifier.code !63 */
  $p552 := $add.ref($add.ref($p549, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  /* %554 = extractvalue { i64, i64 } %549, 1, !dbg !834, !psr.id !841, !verifier.code !63 */
  $i553 := $extractvalue.i64($p548, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %554, i64* %553, align 8, !dbg !834, !psr.id !842, !verifier.code !63 */
  $M.159 := $store.i64($M.159, $p552, $i553);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  /* %555 = load i128, i128* %70, align 16, !dbg !834, !psr.id !843, !verifier.code !63 */
  $i554 := $load.i128($M.159, $p69);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %452, i128* %71, align 16, !dbg !844, !psr.id !845, !verifier.code !63 */
  $M.160 := $store.i128($M.160, $p70, $i451);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %556 = bitcast i128* %71 to { i64, i64 }*, !dbg !844, !psr.id !846, !verifier.code !63 */
  $p555 := $bitcast.ref.ref($p70);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %557 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %556, i32 0, i32 0, !dbg !844, !psr.id !847, !verifier.code !63 */
  $p556 := $add.ref($add.ref($p555, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %558 = load i64, i64* %557, align 16, !dbg !844, !psr.id !848, !verifier.code !63 */
  $i557 := $load.i64($M.160, $p556);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %559 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %556, i32 0, i32 1, !dbg !844, !psr.id !849, !verifier.code !63 */
  $p558 := $add.ref($add.ref($p555, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %560 = load i64, i64* %559, align 8, !dbg !844, !psr.id !850, !verifier.code !63 */
  $i559 := $load.i64($M.160, $p558);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %555, i128* %72, align 16, !dbg !844, !psr.id !851, !verifier.code !63 */
  $M.161 := $store.i128($M.161, $p71, $i554);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %561 = bitcast i128* %72 to { i64, i64 }*, !dbg !844, !psr.id !852, !verifier.code !63 */
  $p560 := $bitcast.ref.ref($p71);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %562 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %561, i32 0, i32 0, !dbg !844, !psr.id !853, !verifier.code !63 */
  $p561 := $add.ref($add.ref($p560, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %563 = load i64, i64* %562, align 16, !dbg !844, !psr.id !854, !verifier.code !63 */
  $i562 := $load.i64($M.161, $p561);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %564 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %561, i32 0, i32 1, !dbg !844, !psr.id !855, !verifier.code !63 */
  $p563 := $add.ref($add.ref($p560, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %565 = load i64, i64* %564, align 8, !dbg !844, !psr.id !856, !verifier.code !63 */
  $i564 := $load.i64($M.161, $p563);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %566 = call { i64, i64 } @FStar_UInt128_add(i64 %558, i64 %560, i64 %563, i64 %565), !dbg !844, !psr.id !857, !verifier.code !63 */
  call $p565 := FStar_UInt128_add($i557, $i559, $i562, $i564);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %567 = bitcast i128* %73 to { i64, i64 }*, !dbg !844, !psr.id !858, !verifier.code !63 */
  $p566 := $bitcast.ref.ref($p72);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %568 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %567, i32 0, i32 0, !dbg !844, !psr.id !859, !verifier.code !63 */
  $p567 := $add.ref($add.ref($p566, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %569 = extractvalue { i64, i64 } %566, 0, !dbg !844, !psr.id !860, !verifier.code !63 */
  $i568 := $extractvalue.i64($p565, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %569, i64* %568, align 16, !dbg !844, !psr.id !861, !verifier.code !63 */
  $M.162 := $store.i64($M.162, $p567, $i568);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %570 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %567, i32 0, i32 1, !dbg !844, !psr.id !862, !verifier.code !63 */
  $p569 := $add.ref($add.ref($p566, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %571 = extractvalue { i64, i64 } %566, 1, !dbg !844, !psr.id !863, !verifier.code !63 */
  $i570 := $extractvalue.i64($p565, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %571, i64* %570, align 8, !dbg !844, !psr.id !864, !verifier.code !63 */
  $M.162 := $store.i64($M.162, $p569, $i570);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  /* %572 = load i128, i128* %73, align 16, !dbg !844, !psr.id !865, !verifier.code !63 */
  $i571 := $load.i128($M.162, $p72);
  /* call void @llvm.dbg.value(metadata i128 %572, metadata !2068, metadata !DIExpression()), !dbg !1392, !psr.id !2069, !verifier.code !64 */
  call {:cexpr "o04"} boogie_si_record_i128($i571);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %573 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %139, i64 %151), !dbg !868, !psr.id !869, !ValueTainted !200, !verifier.code !63 */
  call $p572 := FStar_UInt128_mul_wide($i138, $i150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  /* %574 = bitcast i128* %74 to { i64, i64 }*, !dbg !868, !psr.id !870, !verifier.code !63 */
  $p573 := $bitcast.ref.ref($p73);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  /* %575 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %574, i32 0, i32 0, !dbg !868, !psr.id !871, !verifier.code !63 */
  $p574 := $add.ref($add.ref($p573, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  /* %576 = extractvalue { i64, i64 } %573, 0, !dbg !868, !psr.id !872, !verifier.code !63 */
  $i575 := $extractvalue.i64($p572, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %576, i64* %575, align 16, !dbg !868, !psr.id !873, !verifier.code !63 */
  $M.163 := $store.i64($M.163, $p574, $i575);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  /* %577 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %574, i32 0, i32 1, !dbg !868, !psr.id !874, !verifier.code !63 */
  $p576 := $add.ref($add.ref($p573, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  /* %578 = extractvalue { i64, i64 } %573, 1, !dbg !868, !psr.id !875, !verifier.code !63 */
  $i577 := $extractvalue.i64($p572, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %578, i64* %577, align 8, !dbg !868, !psr.id !876, !verifier.code !63 */
  $M.163 := $store.i64($M.163, $p576, $i577);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  /* %579 = load i128, i128* %74, align 16, !dbg !868, !psr.id !877, !verifier.code !63 */
  $i578 := $load.i128($M.163, $p73);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %476, i128* %75, align 16, !dbg !878, !psr.id !879, !verifier.code !63 */
  $M.164 := $store.i128($M.164, $p74, $i475);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %580 = bitcast i128* %75 to { i64, i64 }*, !dbg !878, !psr.id !880, !verifier.code !63 */
  $p579 := $bitcast.ref.ref($p74);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %581 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %580, i32 0, i32 0, !dbg !878, !psr.id !881, !verifier.code !63 */
  $p580 := $add.ref($add.ref($p579, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %582 = load i64, i64* %581, align 16, !dbg !878, !psr.id !882, !verifier.code !63 */
  $i581 := $load.i64($M.164, $p580);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %583 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %580, i32 0, i32 1, !dbg !878, !psr.id !883, !verifier.code !63 */
  $p582 := $add.ref($add.ref($p579, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %584 = load i64, i64* %583, align 8, !dbg !878, !psr.id !884, !verifier.code !63 */
  $i583 := $load.i64($M.164, $p582);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %579, i128* %76, align 16, !dbg !878, !psr.id !885, !verifier.code !63 */
  $M.165 := $store.i128($M.165, $p75, $i578);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %585 = bitcast i128* %76 to { i64, i64 }*, !dbg !878, !psr.id !886, !verifier.code !63 */
  $p584 := $bitcast.ref.ref($p75);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %586 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %585, i32 0, i32 0, !dbg !878, !psr.id !887, !verifier.code !63 */
  $p585 := $add.ref($add.ref($p584, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %587 = load i64, i64* %586, align 16, !dbg !878, !psr.id !888, !verifier.code !63 */
  $i586 := $load.i64($M.165, $p585);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %588 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %585, i32 0, i32 1, !dbg !878, !psr.id !889, !verifier.code !63 */
  $p587 := $add.ref($add.ref($p584, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %589 = load i64, i64* %588, align 8, !dbg !878, !psr.id !890, !verifier.code !63 */
  $i588 := $load.i64($M.165, $p587);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %590 = call { i64, i64 } @FStar_UInt128_add(i64 %582, i64 %584, i64 %587, i64 %589), !dbg !878, !psr.id !891, !verifier.code !63 */
  call $p589 := FStar_UInt128_add($i581, $i583, $i586, $i588);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %591 = bitcast i128* %77 to { i64, i64 }*, !dbg !878, !psr.id !892, !verifier.code !63 */
  $p590 := $bitcast.ref.ref($p76);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %592 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %591, i32 0, i32 0, !dbg !878, !psr.id !893, !verifier.code !63 */
  $p591 := $add.ref($add.ref($p590, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %593 = extractvalue { i64, i64 } %590, 0, !dbg !878, !psr.id !894, !verifier.code !63 */
  $i592 := $extractvalue.i64($p589, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %593, i64* %592, align 16, !dbg !878, !psr.id !895, !verifier.code !63 */
  $M.166 := $store.i64($M.166, $p591, $i592);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %594 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %591, i32 0, i32 1, !dbg !878, !psr.id !896, !verifier.code !63 */
  $p593 := $add.ref($add.ref($p590, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %595 = extractvalue { i64, i64 } %590, 1, !dbg !878, !psr.id !897, !verifier.code !63 */
  $i594 := $extractvalue.i64($p589, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %595, i64* %594, align 8, !dbg !878, !psr.id !898, !verifier.code !63 */
  $M.166 := $store.i64($M.166, $p593, $i594);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  /* %596 = load i128, i128* %77, align 16, !dbg !878, !psr.id !899, !verifier.code !63 */
  $i595 := $load.i128($M.166, $p76);
  /* call void @llvm.dbg.value(metadata i128 %596, metadata !2102, metadata !DIExpression()), !dbg !1392, !psr.id !2103, !verifier.code !64 */
  call {:cexpr "o14"} boogie_si_record_i128($i595);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %597 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %139, i64 %152), !dbg !902, !psr.id !903, !ValueTainted !200, !verifier.code !63 */
  call $p596 := FStar_UInt128_mul_wide($i138, $i151);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  /* %598 = bitcast i128* %78 to { i64, i64 }*, !dbg !902, !psr.id !904, !verifier.code !63 */
  $p597 := $bitcast.ref.ref($p77);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  /* %599 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %598, i32 0, i32 0, !dbg !902, !psr.id !905, !verifier.code !63 */
  $p598 := $add.ref($add.ref($p597, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  /* %600 = extractvalue { i64, i64 } %597, 0, !dbg !902, !psr.id !906, !verifier.code !63 */
  $i599 := $extractvalue.i64($p596, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %600, i64* %599, align 16, !dbg !902, !psr.id !907, !verifier.code !63 */
  $M.167 := $store.i64($M.167, $p598, $i599);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  /* %601 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %598, i32 0, i32 1, !dbg !902, !psr.id !908, !verifier.code !63 */
  $p600 := $add.ref($add.ref($p597, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  /* %602 = extractvalue { i64, i64 } %597, 1, !dbg !902, !psr.id !909, !verifier.code !63 */
  $i601 := $extractvalue.i64($p596, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %602, i64* %601, align 8, !dbg !902, !psr.id !910, !verifier.code !63 */
  $M.167 := $store.i64($M.167, $p600, $i601);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  /* %603 = load i128, i128* %78, align 16, !dbg !902, !psr.id !911, !verifier.code !63 */
  $i602 := $load.i128($M.167, $p77);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %500, i128* %79, align 16, !dbg !912, !psr.id !913, !verifier.code !63 */
  $M.168 := $store.i128($M.168, $p78, $i499);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %604 = bitcast i128* %79 to { i64, i64 }*, !dbg !912, !psr.id !914, !verifier.code !63 */
  $p603 := $bitcast.ref.ref($p78);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %605 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %604, i32 0, i32 0, !dbg !912, !psr.id !915, !verifier.code !63 */
  $p604 := $add.ref($add.ref($p603, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %606 = load i64, i64* %605, align 16, !dbg !912, !psr.id !916, !verifier.code !63 */
  $i605 := $load.i64($M.168, $p604);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %607 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %604, i32 0, i32 1, !dbg !912, !psr.id !917, !verifier.code !63 */
  $p606 := $add.ref($add.ref($p603, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %608 = load i64, i64* %607, align 8, !dbg !912, !psr.id !918, !verifier.code !63 */
  $i607 := $load.i64($M.168, $p606);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %603, i128* %80, align 16, !dbg !912, !psr.id !919, !verifier.code !63 */
  $M.169 := $store.i128($M.169, $p79, $i602);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %609 = bitcast i128* %80 to { i64, i64 }*, !dbg !912, !psr.id !920, !verifier.code !63 */
  $p608 := $bitcast.ref.ref($p79);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %610 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %609, i32 0, i32 0, !dbg !912, !psr.id !921, !verifier.code !63 */
  $p609 := $add.ref($add.ref($p608, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %611 = load i64, i64* %610, align 16, !dbg !912, !psr.id !922, !verifier.code !63 */
  $i610 := $load.i64($M.169, $p609);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %612 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %609, i32 0, i32 1, !dbg !912, !psr.id !923, !verifier.code !63 */
  $p611 := $add.ref($add.ref($p608, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %613 = load i64, i64* %612, align 8, !dbg !912, !psr.id !924, !verifier.code !63 */
  $i612 := $load.i64($M.169, $p611);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %614 = call { i64, i64 } @FStar_UInt128_add(i64 %606, i64 %608, i64 %611, i64 %613), !dbg !912, !psr.id !925, !verifier.code !63 */
  call $p613 := FStar_UInt128_add($i605, $i607, $i610, $i612);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %615 = bitcast i128* %81 to { i64, i64 }*, !dbg !912, !psr.id !926, !verifier.code !63 */
  $p614 := $bitcast.ref.ref($p80);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %616 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %615, i32 0, i32 0, !dbg !912, !psr.id !927, !verifier.code !63 */
  $p615 := $add.ref($add.ref($p614, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %617 = extractvalue { i64, i64 } %614, 0, !dbg !912, !psr.id !928, !verifier.code !63 */
  $i616 := $extractvalue.i64($p613, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %617, i64* %616, align 16, !dbg !912, !psr.id !929, !verifier.code !63 */
  $M.170 := $store.i64($M.170, $p615, $i616);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %618 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %615, i32 0, i32 1, !dbg !912, !psr.id !930, !verifier.code !63 */
  $p617 := $add.ref($add.ref($p614, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %619 = extractvalue { i64, i64 } %614, 1, !dbg !912, !psr.id !931, !verifier.code !63 */
  $i618 := $extractvalue.i64($p613, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %619, i64* %618, align 8, !dbg !912, !psr.id !932, !verifier.code !63 */
  $M.170 := $store.i64($M.170, $p617, $i618);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  /* %620 = load i128, i128* %81, align 16, !dbg !912, !psr.id !933, !verifier.code !63 */
  $i619 := $load.i128($M.170, $p80);
  /* call void @llvm.dbg.value(metadata i128 %620, metadata !2136, metadata !DIExpression()), !dbg !1392, !psr.id !2137, !verifier.code !64 */
  call {:cexpr "o24"} boogie_si_record_i128($i619);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %621 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %139, i64 %153), !dbg !936, !psr.id !937, !ValueTainted !200, !verifier.code !63 */
  call $p620 := FStar_UInt128_mul_wide($i138, $i152);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  /* %622 = bitcast i128* %82 to { i64, i64 }*, !dbg !936, !psr.id !938, !verifier.code !63 */
  $p621 := $bitcast.ref.ref($p81);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  /* %623 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %622, i32 0, i32 0, !dbg !936, !psr.id !939, !verifier.code !63 */
  $p622 := $add.ref($add.ref($p621, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  /* %624 = extractvalue { i64, i64 } %621, 0, !dbg !936, !psr.id !940, !verifier.code !63 */
  $i623 := $extractvalue.i64($p620, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %624, i64* %623, align 16, !dbg !936, !psr.id !941, !verifier.code !63 */
  $M.171 := $store.i64($M.171, $p622, $i623);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  /* %625 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %622, i32 0, i32 1, !dbg !936, !psr.id !942, !verifier.code !63 */
  $p624 := $add.ref($add.ref($p621, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  /* %626 = extractvalue { i64, i64 } %621, 1, !dbg !936, !psr.id !943, !verifier.code !63 */
  $i625 := $extractvalue.i64($p620, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %626, i64* %625, align 8, !dbg !936, !psr.id !944, !verifier.code !63 */
  $M.171 := $store.i64($M.171, $p624, $i625);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  /* %627 = load i128, i128* %82, align 16, !dbg !936, !psr.id !945, !verifier.code !63 */
  $i626 := $load.i128($M.171, $p81);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %524, i128* %83, align 16, !dbg !946, !psr.id !947, !verifier.code !63 */
  $M.172 := $store.i128($M.172, $p82, $i523);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %628 = bitcast i128* %83 to { i64, i64 }*, !dbg !946, !psr.id !948, !verifier.code !63 */
  $p627 := $bitcast.ref.ref($p82);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %629 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %628, i32 0, i32 0, !dbg !946, !psr.id !949, !verifier.code !63 */
  $p628 := $add.ref($add.ref($p627, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %630 = load i64, i64* %629, align 16, !dbg !946, !psr.id !950, !verifier.code !63 */
  $i629 := $load.i64($M.172, $p628);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %631 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %628, i32 0, i32 1, !dbg !946, !psr.id !951, !verifier.code !63 */
  $p630 := $add.ref($add.ref($p627, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %632 = load i64, i64* %631, align 8, !dbg !946, !psr.id !952, !verifier.code !63 */
  $i631 := $load.i64($M.172, $p630);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %627, i128* %84, align 16, !dbg !946, !psr.id !953, !verifier.code !63 */
  $M.173 := $store.i128($M.173, $p83, $i626);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %633 = bitcast i128* %84 to { i64, i64 }*, !dbg !946, !psr.id !954, !verifier.code !63 */
  $p632 := $bitcast.ref.ref($p83);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %634 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %633, i32 0, i32 0, !dbg !946, !psr.id !955, !verifier.code !63 */
  $p633 := $add.ref($add.ref($p632, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %635 = load i64, i64* %634, align 16, !dbg !946, !psr.id !956, !verifier.code !63 */
  $i634 := $load.i64($M.173, $p633);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %636 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %633, i32 0, i32 1, !dbg !946, !psr.id !957, !verifier.code !63 */
  $p635 := $add.ref($add.ref($p632, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %637 = load i64, i64* %636, align 8, !dbg !946, !psr.id !958, !verifier.code !63 */
  $i636 := $load.i64($M.173, $p635);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %638 = call { i64, i64 } @FStar_UInt128_add(i64 %630, i64 %632, i64 %635, i64 %637), !dbg !946, !psr.id !959, !verifier.code !63 */
  call $p637 := FStar_UInt128_add($i629, $i631, $i634, $i636);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %639 = bitcast i128* %85 to { i64, i64 }*, !dbg !946, !psr.id !960, !verifier.code !63 */
  $p638 := $bitcast.ref.ref($p84);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %640 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %639, i32 0, i32 0, !dbg !946, !psr.id !961, !verifier.code !63 */
  $p639 := $add.ref($add.ref($p638, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %641 = extractvalue { i64, i64 } %638, 0, !dbg !946, !psr.id !962, !verifier.code !63 */
  $i640 := $extractvalue.i64($p637, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %641, i64* %640, align 16, !dbg !946, !psr.id !963, !verifier.code !63 */
  $M.174 := $store.i64($M.174, $p639, $i640);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %642 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %639, i32 0, i32 1, !dbg !946, !psr.id !964, !verifier.code !63 */
  $p641 := $add.ref($add.ref($p638, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %643 = extractvalue { i64, i64 } %638, 1, !dbg !946, !psr.id !965, !verifier.code !63 */
  $i642 := $extractvalue.i64($p637, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %643, i64* %642, align 8, !dbg !946, !psr.id !966, !verifier.code !63 */
  $M.174 := $store.i64($M.174, $p641, $i642);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  /* %644 = load i128, i128* %85, align 16, !dbg !946, !psr.id !967, !verifier.code !63 */
  $i643 := $load.i128($M.174, $p84);
  /* call void @llvm.dbg.value(metadata i128 %644, metadata !2170, metadata !DIExpression()), !dbg !1392, !psr.id !2171, !verifier.code !64 */
  call {:cexpr "o34"} boogie_si_record_i128($i643);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %645 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %139, i64 %141), !dbg !970, !psr.id !971, !ValueTainted !200, !verifier.code !63 */
  call $p644 := FStar_UInt128_mul_wide($i138, $i140);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  /* %646 = bitcast i128* %86 to { i64, i64 }*, !dbg !970, !psr.id !972, !verifier.code !63 */
  $p645 := $bitcast.ref.ref($p85);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  /* %647 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %646, i32 0, i32 0, !dbg !970, !psr.id !973, !verifier.code !63 */
  $p646 := $add.ref($add.ref($p645, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  /* %648 = extractvalue { i64, i64 } %645, 0, !dbg !970, !psr.id !974, !verifier.code !63 */
  $i647 := $extractvalue.i64($p644, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %648, i64* %647, align 16, !dbg !970, !psr.id !975, !verifier.code !63 */
  $M.175 := $store.i64($M.175, $p646, $i647);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  /* %649 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %646, i32 0, i32 1, !dbg !970, !psr.id !976, !verifier.code !63 */
  $p648 := $add.ref($add.ref($p645, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  /* %650 = extractvalue { i64, i64 } %645, 1, !dbg !970, !psr.id !977, !verifier.code !63 */
  $i649 := $extractvalue.i64($p644, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %650, i64* %649, align 8, !dbg !970, !psr.id !978, !verifier.code !63 */
  $M.175 := $store.i64($M.175, $p648, $i649);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  /* %651 = load i128, i128* %86, align 16, !dbg !970, !psr.id !979, !verifier.code !63 */
  $i650 := $load.i128($M.175, $p85);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %548, i128* %87, align 16, !dbg !980, !psr.id !981, !verifier.code !63 */
  $M.176 := $store.i128($M.176, $p86, $i547);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %652 = bitcast i128* %87 to { i64, i64 }*, !dbg !980, !psr.id !982, !verifier.code !63 */
  $p651 := $bitcast.ref.ref($p86);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %653 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %652, i32 0, i32 0, !dbg !980, !psr.id !983, !verifier.code !63 */
  $p652 := $add.ref($add.ref($p651, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %654 = load i64, i64* %653, align 16, !dbg !980, !psr.id !984, !verifier.code !63 */
  $i653 := $load.i64($M.176, $p652);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %655 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %652, i32 0, i32 1, !dbg !980, !psr.id !985, !verifier.code !63 */
  $p654 := $add.ref($add.ref($p651, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %656 = load i64, i64* %655, align 8, !dbg !980, !psr.id !986, !verifier.code !63 */
  $i655 := $load.i64($M.176, $p654);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %651, i128* %88, align 16, !dbg !980, !psr.id !987, !verifier.code !63 */
  $M.177 := $store.i128($M.177, $p87, $i650);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %657 = bitcast i128* %88 to { i64, i64 }*, !dbg !980, !psr.id !988, !verifier.code !63 */
  $p656 := $bitcast.ref.ref($p87);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %658 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %657, i32 0, i32 0, !dbg !980, !psr.id !989, !verifier.code !63 */
  $p657 := $add.ref($add.ref($p656, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %659 = load i64, i64* %658, align 16, !dbg !980, !psr.id !990, !verifier.code !63 */
  $i658 := $load.i64($M.177, $p657);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %660 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %657, i32 0, i32 1, !dbg !980, !psr.id !991, !verifier.code !63 */
  $p659 := $add.ref($add.ref($p656, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %661 = load i64, i64* %660, align 8, !dbg !980, !psr.id !992, !verifier.code !63 */
  $i660 := $load.i64($M.177, $p659);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %662 = call { i64, i64 } @FStar_UInt128_add(i64 %654, i64 %656, i64 %659, i64 %661), !dbg !980, !psr.id !993, !verifier.code !63 */
  call $p661 := FStar_UInt128_add($i653, $i655, $i658, $i660);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %663 = bitcast i128* %89 to { i64, i64 }*, !dbg !980, !psr.id !994, !verifier.code !63 */
  $p662 := $bitcast.ref.ref($p88);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %664 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %663, i32 0, i32 0, !dbg !980, !psr.id !995, !verifier.code !63 */
  $p663 := $add.ref($add.ref($p662, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %665 = extractvalue { i64, i64 } %662, 0, !dbg !980, !psr.id !996, !verifier.code !63 */
  $i664 := $extractvalue.i64($p661, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %665, i64* %664, align 16, !dbg !980, !psr.id !997, !verifier.code !63 */
  $M.178 := $store.i64($M.178, $p663, $i664);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %666 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %663, i32 0, i32 1, !dbg !980, !psr.id !998, !verifier.code !63 */
  $p665 := $add.ref($add.ref($p662, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %667 = extractvalue { i64, i64 } %662, 1, !dbg !980, !psr.id !999, !verifier.code !63 */
  $i666 := $extractvalue.i64($p661, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %667, i64* %666, align 8, !dbg !980, !psr.id !1000, !verifier.code !63 */
  $M.178 := $store.i64($M.178, $p665, $i666);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  /* %668 = load i128, i128* %89, align 16, !dbg !980, !psr.id !1001, !verifier.code !63 */
  $i667 := $load.i128($M.178, $p88);
  /* call void @llvm.dbg.value(metadata i128 %668, metadata !2204, metadata !DIExpression()), !dbg !1392, !psr.id !2205, !verifier.code !64 */
  call {:cexpr "o44"} boogie_si_record_i128($i667);
  /* call void @llvm.dbg.value(metadata i128 %572, metadata !2206, metadata !DIExpression()), !dbg !1392, !psr.id !2207, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %596, metadata !2208, metadata !DIExpression()), !dbg !1392, !psr.id !2209, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %620, metadata !2210, metadata !DIExpression()), !dbg !1392, !psr.id !2211, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %644, metadata !2212, metadata !DIExpression()), !dbg !1392, !psr.id !2213, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %668, metadata !2214, metadata !DIExpression()), !dbg !1392, !psr.id !2215, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  /* %669 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 0), !dbg !1014, !psr.id !1015, !verifier.code !63 */
  call $p668 := FStar_UInt128_uint64_to_uint128(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  /* %670 = bitcast i128* %90 to { i64, i64 }*, !dbg !1014, !psr.id !1016, !verifier.code !63 */
  $p669 := $bitcast.ref.ref($p89);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  /* %671 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %670, i32 0, i32 0, !dbg !1014, !psr.id !1017, !verifier.code !63 */
  $p670 := $add.ref($add.ref($p669, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  /* %672 = extractvalue { i64, i64 } %669, 0, !dbg !1014, !psr.id !1018, !verifier.code !63 */
  $i671 := $extractvalue.i64($p668, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %672, i64* %671, align 16, !dbg !1014, !psr.id !1019, !verifier.code !63 */
  $M.179 := $store.i64($M.179, $p670, $i671);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  /* %673 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %670, i32 0, i32 1, !dbg !1014, !psr.id !1020, !verifier.code !63 */
  $p672 := $add.ref($add.ref($p669, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  /* %674 = extractvalue { i64, i64 } %669, 1, !dbg !1014, !psr.id !1021, !verifier.code !63 */
  $i673 := $extractvalue.i64($p668, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %674, i64* %673, align 8, !dbg !1014, !psr.id !1022, !verifier.code !63 */
  $M.179 := $store.i64($M.179, $p672, $i673);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  /* %675 = load i128, i128* %90, align 16, !dbg !1014, !psr.id !1023, !verifier.code !63 */
  $i674 := $load.i128($M.179, $p89);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* store i128 %572, i128* %91, align 16, !dbg !1024, !psr.id !1025, !verifier.code !63 */
  $M.180 := $store.i128($M.180, $p90, $i571);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %676 = bitcast i128* %91 to { i64, i64 }*, !dbg !1024, !psr.id !1026, !verifier.code !63 */
  $p675 := $bitcast.ref.ref($p90);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %677 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %676, i32 0, i32 0, !dbg !1024, !psr.id !1027, !verifier.code !63 */
  $p676 := $add.ref($add.ref($p675, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %678 = load i64, i64* %677, align 16, !dbg !1024, !psr.id !1028, !verifier.code !63 */
  $i677 := $load.i64($M.180, $p676);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %679 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %676, i32 0, i32 1, !dbg !1024, !psr.id !1029, !verifier.code !63 */
  $p678 := $add.ref($add.ref($p675, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %680 = load i64, i64* %679, align 8, !dbg !1024, !psr.id !1030, !verifier.code !63 */
  $i679 := $load.i64($M.180, $p678);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* store i128 %675, i128* %92, align 16, !dbg !1024, !psr.id !1031, !verifier.code !63 */
  $M.181 := $store.i128($M.181, $p91, $i674);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %681 = bitcast i128* %92 to { i64, i64 }*, !dbg !1024, !psr.id !1032, !verifier.code !63 */
  $p680 := $bitcast.ref.ref($p91);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %682 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %681, i32 0, i32 0, !dbg !1024, !psr.id !1033, !verifier.code !63 */
  $p681 := $add.ref($add.ref($p680, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %683 = load i64, i64* %682, align 16, !dbg !1024, !psr.id !1034, !verifier.code !63 */
  $i682 := $load.i64($M.181, $p681);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %684 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %681, i32 0, i32 1, !dbg !1024, !psr.id !1035, !verifier.code !63 */
  $p683 := $add.ref($add.ref($p680, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %685 = load i64, i64* %684, align 8, !dbg !1024, !psr.id !1036, !verifier.code !63 */
  $i684 := $load.i64($M.181, $p683);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %686 = call { i64, i64 } @FStar_UInt128_add(i64 %678, i64 %680, i64 %683, i64 %685), !dbg !1024, !psr.id !1037, !verifier.code !63 */
  call $p685 := FStar_UInt128_add($i677, $i679, $i682, $i684);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %687 = bitcast i128* %93 to { i64, i64 }*, !dbg !1024, !psr.id !1038, !verifier.code !63 */
  $p686 := $bitcast.ref.ref($p92);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %688 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %687, i32 0, i32 0, !dbg !1024, !psr.id !1039, !verifier.code !63 */
  $p687 := $add.ref($add.ref($p686, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %689 = extractvalue { i64, i64 } %686, 0, !dbg !1024, !psr.id !1040, !verifier.code !63 */
  $i688 := $extractvalue.i64($p685, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* store i64 %689, i64* %688, align 16, !dbg !1024, !psr.id !1041, !verifier.code !63 */
  $M.182 := $store.i64($M.182, $p687, $i688);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %690 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %687, i32 0, i32 1, !dbg !1024, !psr.id !1042, !verifier.code !63 */
  $p689 := $add.ref($add.ref($p686, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %691 = extractvalue { i64, i64 } %686, 1, !dbg !1024, !psr.id !1043, !verifier.code !63 */
  $i690 := $extractvalue.i64($p685, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* store i64 %691, i64* %690, align 8, !dbg !1024, !psr.id !1044, !verifier.code !63 */
  $M.182 := $store.i64($M.182, $p689, $i690);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  /* %692 = load i128, i128* %93, align 16, !dbg !1024, !psr.id !1045, !verifier.code !63 */
  $i691 := $load.i128($M.182, $p92);
  /* call void @llvm.dbg.value(metadata i128 %692, metadata !2248, metadata !DIExpression()), !dbg !1392, !psr.id !2249, !verifier.code !64 */
  call {:cexpr "l_"} boogie_si_record_i128($i691);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %692, i128* %94, align 16, !dbg !1048, !psr.id !1049, !verifier.code !63 */
  $M.183 := $store.i128($M.183, $p93, $i691);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  /* %693 = bitcast i128* %94 to { i64, i64 }*, !dbg !1048, !psr.id !1050, !verifier.code !63 */
  $p692 := $bitcast.ref.ref($p93);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  /* %694 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %693, i32 0, i32 0, !dbg !1048, !psr.id !1051, !verifier.code !63 */
  $p693 := $add.ref($add.ref($p692, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  /* %695 = load i64, i64* %694, align 16, !dbg !1048, !psr.id !1052, !verifier.code !63 */
  $i694 := $load.i64($M.183, $p693);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  /* %696 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %693, i32 0, i32 1, !dbg !1048, !psr.id !1053, !verifier.code !63 */
  $p695 := $add.ref($add.ref($p692, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  /* %697 = load i64, i64* %696, align 8, !dbg !1048, !psr.id !1054, !verifier.code !63 */
  $i696 := $load.i64($M.183, $p695);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  /* %698 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %695, i64 %697), !dbg !1048, !psr.id !1055, !verifier.code !63 */
  call $i697 := FStar_UInt128_uint128_to_uint64($i694, $i696);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 56} true;
  assume {:verifier.code 0} true;
  /* %699 = and i64 %698, 2251799813685247, !dbg !1056, !psr.id !1057, !verifier.code !63 */
  $i698 := $and.i64($i697, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %699, metadata !2260, metadata !DIExpression()), !dbg !1392, !psr.id !2261, !verifier.code !64 */
  call {:cexpr "tmp01"} boogie_si_record_i64($i698);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %692, i128* %95, align 16, !dbg !1060, !psr.id !1061, !verifier.code !63 */
  $M.184 := $store.i128($M.184, $p94, $i691);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* %700 = bitcast i128* %95 to { i64, i64 }*, !dbg !1060, !psr.id !1062, !verifier.code !63 */
  $p699 := $bitcast.ref.ref($p94);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* %701 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %700, i32 0, i32 0, !dbg !1060, !psr.id !1063, !verifier.code !63 */
  $p700 := $add.ref($add.ref($p699, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* %702 = load i64, i64* %701, align 16, !dbg !1060, !psr.id !1064, !verifier.code !63 */
  $i701 := $load.i64($M.184, $p700);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* %703 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %700, i32 0, i32 1, !dbg !1060, !psr.id !1065, !verifier.code !63 */
  $p702 := $add.ref($add.ref($p699, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* %704 = load i64, i64* %703, align 8, !dbg !1060, !psr.id !1066, !verifier.code !63 */
  $i703 := $load.i64($M.184, $p702);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* %705 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %702, i64 %704, i32 51), !dbg !1060, !psr.id !1067, !verifier.code !63 */
  call $p704 := FStar_UInt128_shift_right($i701, $i703, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* %706 = bitcast i128* %96 to { i64, i64 }*, !dbg !1060, !psr.id !1068, !verifier.code !63 */
  $p705 := $bitcast.ref.ref($p95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* %707 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %706, i32 0, i32 0, !dbg !1060, !psr.id !1069, !verifier.code !63 */
  $p706 := $add.ref($add.ref($p705, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* %708 = extractvalue { i64, i64 } %705, 0, !dbg !1060, !psr.id !1070, !verifier.code !63 */
  $i707 := $extractvalue.i64($p704, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %708, i64* %707, align 16, !dbg !1060, !psr.id !1071, !verifier.code !63 */
  $M.185 := $store.i64($M.185, $p706, $i707);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* %709 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %706, i32 0, i32 1, !dbg !1060, !psr.id !1072, !verifier.code !63 */
  $p708 := $add.ref($add.ref($p705, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* %710 = extractvalue { i64, i64 } %705, 1, !dbg !1060, !psr.id !1073, !verifier.code !63 */
  $i709 := $extractvalue.i64($p704, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %710, i64* %709, align 8, !dbg !1060, !psr.id !1074, !verifier.code !63 */
  $M.185 := $store.i64($M.185, $p708, $i709);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  /* %711 = load i128, i128* %96, align 16, !dbg !1060, !psr.id !1075, !verifier.code !63 */
  $i710 := $load.i128($M.185, $p95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %711, i128* %97, align 16, !dbg !1076, !psr.id !1077, !verifier.code !63 */
  $M.186 := $store.i128($M.186, $p96, $i710);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  /* %712 = bitcast i128* %97 to { i64, i64 }*, !dbg !1076, !psr.id !1078, !verifier.code !63 */
  $p711 := $bitcast.ref.ref($p96);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  /* %713 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %712, i32 0, i32 0, !dbg !1076, !psr.id !1079, !verifier.code !63 */
  $p712 := $add.ref($add.ref($p711, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  /* %714 = load i64, i64* %713, align 16, !dbg !1076, !psr.id !1080, !verifier.code !63 */
  $i713 := $load.i64($M.186, $p712);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  /* %715 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %712, i32 0, i32 1, !dbg !1076, !psr.id !1081, !verifier.code !63 */
  $p714 := $add.ref($add.ref($p711, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  /* %716 = load i64, i64* %715, align 8, !dbg !1076, !psr.id !1082, !verifier.code !63 */
  $i715 := $load.i64($M.186, $p714);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  /* %717 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %714, i64 %716), !dbg !1076, !psr.id !1083, !verifier.code !63 */
  call $i716 := FStar_UInt128_uint128_to_uint64($i713, $i715);
  /* call void @llvm.dbg.value(metadata i64 %717, metadata !2286, metadata !DIExpression()), !dbg !1392, !psr.id !2287, !verifier.code !64 */
  call {:cexpr "c0"} boogie_si_record_i64($i716);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  /* %718 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %717), !dbg !1086, !psr.id !1087, !verifier.code !63 */
  call $p717 := FStar_UInt128_uint64_to_uint128($i716);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  /* %719 = bitcast i128* %98 to { i64, i64 }*, !dbg !1086, !psr.id !1088, !verifier.code !63 */
  $p718 := $bitcast.ref.ref($p97);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  /* %720 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %719, i32 0, i32 0, !dbg !1086, !psr.id !1089, !verifier.code !63 */
  $p719 := $add.ref($add.ref($p718, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  /* %721 = extractvalue { i64, i64 } %718, 0, !dbg !1086, !psr.id !1090, !verifier.code !63 */
  $i720 := $extractvalue.i64($p717, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %721, i64* %720, align 16, !dbg !1086, !psr.id !1091, !verifier.code !63 */
  $M.187 := $store.i64($M.187, $p719, $i720);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  /* %722 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %719, i32 0, i32 1, !dbg !1086, !psr.id !1092, !verifier.code !63 */
  $p721 := $add.ref($add.ref($p718, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  /* %723 = extractvalue { i64, i64 } %718, 1, !dbg !1086, !psr.id !1093, !verifier.code !63 */
  $i722 := $extractvalue.i64($p717, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %723, i64* %722, align 8, !dbg !1086, !psr.id !1094, !verifier.code !63 */
  $M.187 := $store.i64($M.187, $p721, $i722);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  /* %724 = load i128, i128* %98, align 16, !dbg !1086, !psr.id !1095, !verifier.code !63 */
  $i723 := $load.i128($M.187, $p97);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %596, i128* %99, align 16, !dbg !1096, !psr.id !1097, !verifier.code !63 */
  $M.188 := $store.i128($M.188, $p98, $i595);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %725 = bitcast i128* %99 to { i64, i64 }*, !dbg !1096, !psr.id !1098, !verifier.code !63 */
  $p724 := $bitcast.ref.ref($p98);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %726 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %725, i32 0, i32 0, !dbg !1096, !psr.id !1099, !verifier.code !63 */
  $p725 := $add.ref($add.ref($p724, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %727 = load i64, i64* %726, align 16, !dbg !1096, !psr.id !1100, !verifier.code !63 */
  $i726 := $load.i64($M.188, $p725);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %728 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %725, i32 0, i32 1, !dbg !1096, !psr.id !1101, !verifier.code !63 */
  $p727 := $add.ref($add.ref($p724, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %729 = load i64, i64* %728, align 8, !dbg !1096, !psr.id !1102, !verifier.code !63 */
  $i728 := $load.i64($M.188, $p727);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %724, i128* %100, align 16, !dbg !1096, !psr.id !1103, !verifier.code !63 */
  $M.189 := $store.i128($M.189, $p99, $i723);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %730 = bitcast i128* %100 to { i64, i64 }*, !dbg !1096, !psr.id !1104, !verifier.code !63 */
  $p729 := $bitcast.ref.ref($p99);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %731 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %730, i32 0, i32 0, !dbg !1096, !psr.id !1105, !verifier.code !63 */
  $p730 := $add.ref($add.ref($p729, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %732 = load i64, i64* %731, align 16, !dbg !1096, !psr.id !1106, !verifier.code !63 */
  $i731 := $load.i64($M.189, $p730);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %733 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %730, i32 0, i32 1, !dbg !1096, !psr.id !1107, !verifier.code !63 */
  $p732 := $add.ref($add.ref($p729, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %734 = load i64, i64* %733, align 8, !dbg !1096, !psr.id !1108, !verifier.code !63 */
  $i733 := $load.i64($M.189, $p732);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %735 = call { i64, i64 } @FStar_UInt128_add(i64 %727, i64 %729, i64 %732, i64 %734), !dbg !1096, !psr.id !1109, !verifier.code !63 */
  call $p734 := FStar_UInt128_add($i726, $i728, $i731, $i733);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %736 = bitcast i128* %101 to { i64, i64 }*, !dbg !1096, !psr.id !1110, !verifier.code !63 */
  $p735 := $bitcast.ref.ref($p100);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %737 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %736, i32 0, i32 0, !dbg !1096, !psr.id !1111, !verifier.code !63 */
  $p736 := $add.ref($add.ref($p735, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %738 = extractvalue { i64, i64 } %735, 0, !dbg !1096, !psr.id !1112, !verifier.code !63 */
  $i737 := $extractvalue.i64($p734, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %738, i64* %737, align 16, !dbg !1096, !psr.id !1113, !verifier.code !63 */
  $M.190 := $store.i64($M.190, $p736, $i737);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %739 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %736, i32 0, i32 1, !dbg !1096, !psr.id !1114, !verifier.code !63 */
  $p738 := $add.ref($add.ref($p735, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %740 = extractvalue { i64, i64 } %735, 1, !dbg !1096, !psr.id !1115, !verifier.code !63 */
  $i739 := $extractvalue.i64($p734, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %740, i64* %739, align 8, !dbg !1096, !psr.id !1116, !verifier.code !63 */
  $M.190 := $store.i64($M.190, $p738, $i739);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  /* %741 = load i128, i128* %101, align 16, !dbg !1096, !psr.id !1117, !verifier.code !63 */
  $i740 := $load.i128($M.190, $p100);
  /* call void @llvm.dbg.value(metadata i128 %741, metadata !2320, metadata !DIExpression()), !dbg !1392, !psr.id !2321, !verifier.code !64 */
  call {:cexpr "l_0"} boogie_si_record_i128($i740);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %741, i128* %102, align 16, !dbg !1120, !psr.id !1121, !verifier.code !63 */
  $M.191 := $store.i128($M.191, $p101, $i740);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  /* %742 = bitcast i128* %102 to { i64, i64 }*, !dbg !1120, !psr.id !1122, !verifier.code !63 */
  $p741 := $bitcast.ref.ref($p101);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  /* %743 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %742, i32 0, i32 0, !dbg !1120, !psr.id !1123, !verifier.code !63 */
  $p742 := $add.ref($add.ref($p741, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  /* %744 = load i64, i64* %743, align 16, !dbg !1120, !psr.id !1124, !verifier.code !63 */
  $i743 := $load.i64($M.191, $p742);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  /* %745 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %742, i32 0, i32 1, !dbg !1120, !psr.id !1125, !verifier.code !63 */
  $p744 := $add.ref($add.ref($p741, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  /* %746 = load i64, i64* %745, align 8, !dbg !1120, !psr.id !1126, !verifier.code !63 */
  $i745 := $load.i64($M.191, $p744);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  /* %747 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %744, i64 %746), !dbg !1120, !psr.id !1127, !verifier.code !63 */
  call $i746 := FStar_UInt128_uint128_to_uint64($i743, $i745);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 57} true;
  assume {:verifier.code 0} true;
  /* %748 = and i64 %747, 2251799813685247, !dbg !1128, !psr.id !1129, !verifier.code !63 */
  $i747 := $and.i64($i746, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %748, metadata !2332, metadata !DIExpression()), !dbg !1392, !psr.id !2333, !verifier.code !64 */
  call {:cexpr "tmp11"} boogie_si_record_i64($i747);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %741, i128* %103, align 16, !dbg !1132, !psr.id !1133, !verifier.code !63 */
  $M.192 := $store.i128($M.192, $p102, $i740);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* %749 = bitcast i128* %103 to { i64, i64 }*, !dbg !1132, !psr.id !1134, !verifier.code !63 */
  $p748 := $bitcast.ref.ref($p102);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* %750 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %749, i32 0, i32 0, !dbg !1132, !psr.id !1135, !verifier.code !63 */
  $p749 := $add.ref($add.ref($p748, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* %751 = load i64, i64* %750, align 16, !dbg !1132, !psr.id !1136, !verifier.code !63 */
  $i750 := $load.i64($M.192, $p749);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* %752 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %749, i32 0, i32 1, !dbg !1132, !psr.id !1137, !verifier.code !63 */
  $p751 := $add.ref($add.ref($p748, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* %753 = load i64, i64* %752, align 8, !dbg !1132, !psr.id !1138, !verifier.code !63 */
  $i752 := $load.i64($M.192, $p751);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* %754 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %751, i64 %753, i32 51), !dbg !1132, !psr.id !1139, !verifier.code !63 */
  call $p753 := FStar_UInt128_shift_right($i750, $i752, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* %755 = bitcast i128* %104 to { i64, i64 }*, !dbg !1132, !psr.id !1140, !verifier.code !63 */
  $p754 := $bitcast.ref.ref($p103);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* %756 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %755, i32 0, i32 0, !dbg !1132, !psr.id !1141, !verifier.code !63 */
  $p755 := $add.ref($add.ref($p754, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* %757 = extractvalue { i64, i64 } %754, 0, !dbg !1132, !psr.id !1142, !verifier.code !63 */
  $i756 := $extractvalue.i64($p753, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %757, i64* %756, align 16, !dbg !1132, !psr.id !1143, !verifier.code !63 */
  $M.193 := $store.i64($M.193, $p755, $i756);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* %758 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %755, i32 0, i32 1, !dbg !1132, !psr.id !1144, !verifier.code !63 */
  $p757 := $add.ref($add.ref($p754, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* %759 = extractvalue { i64, i64 } %754, 1, !dbg !1132, !psr.id !1145, !verifier.code !63 */
  $i758 := $extractvalue.i64($p753, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %759, i64* %758, align 8, !dbg !1132, !psr.id !1146, !verifier.code !63 */
  $M.193 := $store.i64($M.193, $p757, $i758);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  /* %760 = load i128, i128* %104, align 16, !dbg !1132, !psr.id !1147, !verifier.code !63 */
  $i759 := $load.i128($M.193, $p103);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %760, i128* %105, align 16, !dbg !1148, !psr.id !1149, !verifier.code !63 */
  $M.194 := $store.i128($M.194, $p104, $i759);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  /* %761 = bitcast i128* %105 to { i64, i64 }*, !dbg !1148, !psr.id !1150, !verifier.code !63 */
  $p760 := $bitcast.ref.ref($p104);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  /* %762 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %761, i32 0, i32 0, !dbg !1148, !psr.id !1151, !verifier.code !63 */
  $p761 := $add.ref($add.ref($p760, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  /* %763 = load i64, i64* %762, align 16, !dbg !1148, !psr.id !1152, !verifier.code !63 */
  $i762 := $load.i64($M.194, $p761);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  /* %764 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %761, i32 0, i32 1, !dbg !1148, !psr.id !1153, !verifier.code !63 */
  $p763 := $add.ref($add.ref($p760, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  /* %765 = load i64, i64* %764, align 8, !dbg !1148, !psr.id !1154, !verifier.code !63 */
  $i764 := $load.i64($M.194, $p763);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  /* %766 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %763, i64 %765), !dbg !1148, !psr.id !1155, !verifier.code !63 */
  call $i765 := FStar_UInt128_uint128_to_uint64($i762, $i764);
  /* call void @llvm.dbg.value(metadata i64 %766, metadata !2358, metadata !DIExpression()), !dbg !1392, !psr.id !2359, !verifier.code !64 */
  call {:cexpr "c1"} boogie_si_record_i64($i765);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  /* %767 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %766), !dbg !1158, !psr.id !1159, !verifier.code !63 */
  call $p766 := FStar_UInt128_uint64_to_uint128($i765);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  /* %768 = bitcast i128* %106 to { i64, i64 }*, !dbg !1158, !psr.id !1160, !verifier.code !63 */
  $p767 := $bitcast.ref.ref($p105);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  /* %769 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %768, i32 0, i32 0, !dbg !1158, !psr.id !1161, !verifier.code !63 */
  $p768 := $add.ref($add.ref($p767, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  /* %770 = extractvalue { i64, i64 } %767, 0, !dbg !1158, !psr.id !1162, !verifier.code !63 */
  $i769 := $extractvalue.i64($p766, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %770, i64* %769, align 16, !dbg !1158, !psr.id !1163, !verifier.code !63 */
  $M.195 := $store.i64($M.195, $p768, $i769);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  /* %771 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %768, i32 0, i32 1, !dbg !1158, !psr.id !1164, !verifier.code !63 */
  $p770 := $add.ref($add.ref($p767, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  /* %772 = extractvalue { i64, i64 } %767, 1, !dbg !1158, !psr.id !1165, !verifier.code !63 */
  $i771 := $extractvalue.i64($p766, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %772, i64* %771, align 8, !dbg !1158, !psr.id !1166, !verifier.code !63 */
  $M.195 := $store.i64($M.195, $p770, $i771);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  /* %773 = load i128, i128* %106, align 16, !dbg !1158, !psr.id !1167, !verifier.code !63 */
  $i772 := $load.i128($M.195, $p105);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %620, i128* %107, align 16, !dbg !1168, !psr.id !1169, !verifier.code !63 */
  $M.196 := $store.i128($M.196, $p106, $i619);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %774 = bitcast i128* %107 to { i64, i64 }*, !dbg !1168, !psr.id !1170, !verifier.code !63 */
  $p773 := $bitcast.ref.ref($p106);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %775 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %774, i32 0, i32 0, !dbg !1168, !psr.id !1171, !verifier.code !63 */
  $p774 := $add.ref($add.ref($p773, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %776 = load i64, i64* %775, align 16, !dbg !1168, !psr.id !1172, !verifier.code !63 */
  $i775 := $load.i64($M.196, $p774);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %777 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %774, i32 0, i32 1, !dbg !1168, !psr.id !1173, !verifier.code !63 */
  $p776 := $add.ref($add.ref($p773, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %778 = load i64, i64* %777, align 8, !dbg !1168, !psr.id !1174, !verifier.code !63 */
  $i777 := $load.i64($M.196, $p776);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %773, i128* %108, align 16, !dbg !1168, !psr.id !1175, !verifier.code !63 */
  $M.197 := $store.i128($M.197, $p107, $i772);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %779 = bitcast i128* %108 to { i64, i64 }*, !dbg !1168, !psr.id !1176, !verifier.code !63 */
  $p778 := $bitcast.ref.ref($p107);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %780 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %779, i32 0, i32 0, !dbg !1168, !psr.id !1177, !verifier.code !63 */
  $p779 := $add.ref($add.ref($p778, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %781 = load i64, i64* %780, align 16, !dbg !1168, !psr.id !1178, !verifier.code !63 */
  $i780 := $load.i64($M.197, $p779);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %782 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %779, i32 0, i32 1, !dbg !1168, !psr.id !1179, !verifier.code !63 */
  $p781 := $add.ref($add.ref($p778, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %783 = load i64, i64* %782, align 8, !dbg !1168, !psr.id !1180, !verifier.code !63 */
  $i782 := $load.i64($M.197, $p781);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %784 = call { i64, i64 } @FStar_UInt128_add(i64 %776, i64 %778, i64 %781, i64 %783), !dbg !1168, !psr.id !1181, !verifier.code !63 */
  call $p783 := FStar_UInt128_add($i775, $i777, $i780, $i782);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %785 = bitcast i128* %109 to { i64, i64 }*, !dbg !1168, !psr.id !1182, !verifier.code !63 */
  $p784 := $bitcast.ref.ref($p108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %786 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %785, i32 0, i32 0, !dbg !1168, !psr.id !1183, !verifier.code !63 */
  $p785 := $add.ref($add.ref($p784, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %787 = extractvalue { i64, i64 } %784, 0, !dbg !1168, !psr.id !1184, !verifier.code !63 */
  $i786 := $extractvalue.i64($p783, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %787, i64* %786, align 16, !dbg !1168, !psr.id !1185, !verifier.code !63 */
  $M.198 := $store.i64($M.198, $p785, $i786);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %788 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %785, i32 0, i32 1, !dbg !1168, !psr.id !1186, !verifier.code !63 */
  $p787 := $add.ref($add.ref($p784, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %789 = extractvalue { i64, i64 } %784, 1, !dbg !1168, !psr.id !1187, !verifier.code !63 */
  $i788 := $extractvalue.i64($p783, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %789, i64* %788, align 8, !dbg !1168, !psr.id !1188, !verifier.code !63 */
  $M.198 := $store.i64($M.198, $p787, $i788);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  /* %790 = load i128, i128* %109, align 16, !dbg !1168, !psr.id !1189, !verifier.code !63 */
  $i789 := $load.i128($M.198, $p108);
  /* call void @llvm.dbg.value(metadata i128 %790, metadata !2392, metadata !DIExpression()), !dbg !1392, !psr.id !2393, !verifier.code !64 */
  call {:cexpr "l_1"} boogie_si_record_i128($i789);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %790, i128* %110, align 16, !dbg !1192, !psr.id !1193, !verifier.code !63 */
  $M.199 := $store.i128($M.199, $p109, $i789);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  /* %791 = bitcast i128* %110 to { i64, i64 }*, !dbg !1192, !psr.id !1194, !verifier.code !63 */
  $p790 := $bitcast.ref.ref($p109);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  /* %792 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %791, i32 0, i32 0, !dbg !1192, !psr.id !1195, !verifier.code !63 */
  $p791 := $add.ref($add.ref($p790, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  /* %793 = load i64, i64* %792, align 16, !dbg !1192, !psr.id !1196, !verifier.code !63 */
  $i792 := $load.i64($M.199, $p791);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  /* %794 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %791, i32 0, i32 1, !dbg !1192, !psr.id !1197, !verifier.code !63 */
  $p793 := $add.ref($add.ref($p790, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  /* %795 = load i64, i64* %794, align 8, !dbg !1192, !psr.id !1198, !verifier.code !63 */
  $i794 := $load.i64($M.199, $p793);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  /* %796 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %793, i64 %795), !dbg !1192, !psr.id !1199, !verifier.code !63 */
  call $i795 := FStar_UInt128_uint128_to_uint64($i792, $i794);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 57} true;
  assume {:verifier.code 0} true;
  /* %797 = and i64 %796, 2251799813685247, !dbg !1200, !psr.id !1201, !verifier.code !63 */
  $i796 := $and.i64($i795, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %797, metadata !2404, metadata !DIExpression()), !dbg !1392, !psr.id !2405, !verifier.code !64 */
  call {:cexpr "tmp21"} boogie_si_record_i64($i796);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %790, i128* %111, align 16, !dbg !1204, !psr.id !1205, !verifier.code !63 */
  $M.200 := $store.i128($M.200, $p110, $i789);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* %798 = bitcast i128* %111 to { i64, i64 }*, !dbg !1204, !psr.id !1206, !verifier.code !63 */
  $p797 := $bitcast.ref.ref($p110);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* %799 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %798, i32 0, i32 0, !dbg !1204, !psr.id !1207, !verifier.code !63 */
  $p798 := $add.ref($add.ref($p797, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* %800 = load i64, i64* %799, align 16, !dbg !1204, !psr.id !1208, !verifier.code !63 */
  $i799 := $load.i64($M.200, $p798);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* %801 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %798, i32 0, i32 1, !dbg !1204, !psr.id !1209, !verifier.code !63 */
  $p800 := $add.ref($add.ref($p797, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* %802 = load i64, i64* %801, align 8, !dbg !1204, !psr.id !1210, !verifier.code !63 */
  $i801 := $load.i64($M.200, $p800);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* %803 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %800, i64 %802, i32 51), !dbg !1204, !psr.id !1211, !verifier.code !63 */
  call $p802 := FStar_UInt128_shift_right($i799, $i801, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* %804 = bitcast i128* %112 to { i64, i64 }*, !dbg !1204, !psr.id !1212, !verifier.code !63 */
  $p803 := $bitcast.ref.ref($p111);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* %805 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %804, i32 0, i32 0, !dbg !1204, !psr.id !1213, !verifier.code !63 */
  $p804 := $add.ref($add.ref($p803, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* %806 = extractvalue { i64, i64 } %803, 0, !dbg !1204, !psr.id !1214, !verifier.code !63 */
  $i805 := $extractvalue.i64($p802, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %806, i64* %805, align 16, !dbg !1204, !psr.id !1215, !verifier.code !63 */
  $M.201 := $store.i64($M.201, $p804, $i805);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* %807 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %804, i32 0, i32 1, !dbg !1204, !psr.id !1216, !verifier.code !63 */
  $p806 := $add.ref($add.ref($p803, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* %808 = extractvalue { i64, i64 } %803, 1, !dbg !1204, !psr.id !1217, !verifier.code !63 */
  $i807 := $extractvalue.i64($p802, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %808, i64* %807, align 8, !dbg !1204, !psr.id !1218, !verifier.code !63 */
  $M.201 := $store.i64($M.201, $p806, $i807);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  /* %809 = load i128, i128* %112, align 16, !dbg !1204, !psr.id !1219, !verifier.code !63 */
  $i808 := $load.i128($M.201, $p111);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %809, i128* %113, align 16, !dbg !1220, !psr.id !1221, !verifier.code !63 */
  $M.202 := $store.i128($M.202, $p112, $i808);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  /* %810 = bitcast i128* %113 to { i64, i64 }*, !dbg !1220, !psr.id !1222, !verifier.code !63 */
  $p809 := $bitcast.ref.ref($p112);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  /* %811 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %810, i32 0, i32 0, !dbg !1220, !psr.id !1223, !verifier.code !63 */
  $p810 := $add.ref($add.ref($p809, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  /* %812 = load i64, i64* %811, align 16, !dbg !1220, !psr.id !1224, !verifier.code !63 */
  $i811 := $load.i64($M.202, $p810);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  /* %813 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %810, i32 0, i32 1, !dbg !1220, !psr.id !1225, !verifier.code !63 */
  $p812 := $add.ref($add.ref($p809, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  /* %814 = load i64, i64* %813, align 8, !dbg !1220, !psr.id !1226, !verifier.code !63 */
  $i813 := $load.i64($M.202, $p812);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  /* %815 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %812, i64 %814), !dbg !1220, !psr.id !1227, !verifier.code !63 */
  call $i814 := FStar_UInt128_uint128_to_uint64($i811, $i813);
  /* call void @llvm.dbg.value(metadata i64 %815, metadata !2430, metadata !DIExpression()), !dbg !1392, !psr.id !2431, !verifier.code !64 */
  call {:cexpr "c2"} boogie_si_record_i64($i814);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  /* %816 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %815), !dbg !1230, !psr.id !1231, !verifier.code !63 */
  call $p815 := FStar_UInt128_uint64_to_uint128($i814);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  /* %817 = bitcast i128* %114 to { i64, i64 }*, !dbg !1230, !psr.id !1232, !verifier.code !63 */
  $p816 := $bitcast.ref.ref($p113);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  /* %818 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %817, i32 0, i32 0, !dbg !1230, !psr.id !1233, !verifier.code !63 */
  $p817 := $add.ref($add.ref($p816, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  /* %819 = extractvalue { i64, i64 } %816, 0, !dbg !1230, !psr.id !1234, !verifier.code !63 */
  $i818 := $extractvalue.i64($p815, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %819, i64* %818, align 16, !dbg !1230, !psr.id !1235, !verifier.code !63 */
  $M.203 := $store.i64($M.203, $p817, $i818);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  /* %820 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %817, i32 0, i32 1, !dbg !1230, !psr.id !1236, !verifier.code !63 */
  $p819 := $add.ref($add.ref($p816, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  /* %821 = extractvalue { i64, i64 } %816, 1, !dbg !1230, !psr.id !1237, !verifier.code !63 */
  $i820 := $extractvalue.i64($p815, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %821, i64* %820, align 8, !dbg !1230, !psr.id !1238, !verifier.code !63 */
  $M.203 := $store.i64($M.203, $p819, $i820);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  /* %822 = load i128, i128* %114, align 16, !dbg !1230, !psr.id !1239, !verifier.code !63 */
  $i821 := $load.i128($M.203, $p113);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %644, i128* %115, align 16, !dbg !1240, !psr.id !1241, !verifier.code !63 */
  $M.204 := $store.i128($M.204, $p114, $i643);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %823 = bitcast i128* %115 to { i64, i64 }*, !dbg !1240, !psr.id !1242, !verifier.code !63 */
  $p822 := $bitcast.ref.ref($p114);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %824 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %823, i32 0, i32 0, !dbg !1240, !psr.id !1243, !verifier.code !63 */
  $p823 := $add.ref($add.ref($p822, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %825 = load i64, i64* %824, align 16, !dbg !1240, !psr.id !1244, !verifier.code !63 */
  $i824 := $load.i64($M.204, $p823);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %826 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %823, i32 0, i32 1, !dbg !1240, !psr.id !1245, !verifier.code !63 */
  $p825 := $add.ref($add.ref($p822, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %827 = load i64, i64* %826, align 8, !dbg !1240, !psr.id !1246, !verifier.code !63 */
  $i826 := $load.i64($M.204, $p825);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %822, i128* %116, align 16, !dbg !1240, !psr.id !1247, !verifier.code !63 */
  $M.205 := $store.i128($M.205, $p115, $i821);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %828 = bitcast i128* %116 to { i64, i64 }*, !dbg !1240, !psr.id !1248, !verifier.code !63 */
  $p827 := $bitcast.ref.ref($p115);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %829 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %828, i32 0, i32 0, !dbg !1240, !psr.id !1249, !verifier.code !63 */
  $p828 := $add.ref($add.ref($p827, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %830 = load i64, i64* %829, align 16, !dbg !1240, !psr.id !1250, !verifier.code !63 */
  $i829 := $load.i64($M.205, $p828);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %831 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %828, i32 0, i32 1, !dbg !1240, !psr.id !1251, !verifier.code !63 */
  $p830 := $add.ref($add.ref($p827, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %832 = load i64, i64* %831, align 8, !dbg !1240, !psr.id !1252, !verifier.code !63 */
  $i831 := $load.i64($M.205, $p830);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %833 = call { i64, i64 } @FStar_UInt128_add(i64 %825, i64 %827, i64 %830, i64 %832), !dbg !1240, !psr.id !1253, !verifier.code !63 */
  call $p832 := FStar_UInt128_add($i824, $i826, $i829, $i831);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %834 = bitcast i128* %117 to { i64, i64 }*, !dbg !1240, !psr.id !1254, !verifier.code !63 */
  $p833 := $bitcast.ref.ref($p116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %835 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %834, i32 0, i32 0, !dbg !1240, !psr.id !1255, !verifier.code !63 */
  $p834 := $add.ref($add.ref($p833, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %836 = extractvalue { i64, i64 } %833, 0, !dbg !1240, !psr.id !1256, !verifier.code !63 */
  $i835 := $extractvalue.i64($p832, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %836, i64* %835, align 16, !dbg !1240, !psr.id !1257, !verifier.code !63 */
  $M.206 := $store.i64($M.206, $p834, $i835);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %837 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %834, i32 0, i32 1, !dbg !1240, !psr.id !1258, !verifier.code !63 */
  $p836 := $add.ref($add.ref($p833, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %838 = extractvalue { i64, i64 } %833, 1, !dbg !1240, !psr.id !1259, !verifier.code !63 */
  $i837 := $extractvalue.i64($p832, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %838, i64* %837, align 8, !dbg !1240, !psr.id !1260, !verifier.code !63 */
  $M.206 := $store.i64($M.206, $p836, $i837);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  /* %839 = load i128, i128* %117, align 16, !dbg !1240, !psr.id !1261, !verifier.code !63 */
  $i838 := $load.i128($M.206, $p116);
  /* call void @llvm.dbg.value(metadata i128 %839, metadata !2464, metadata !DIExpression()), !dbg !1392, !psr.id !2465, !verifier.code !64 */
  call {:cexpr "l_2"} boogie_si_record_i128($i838);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %839, i128* %118, align 16, !dbg !1264, !psr.id !1265, !verifier.code !63 */
  $M.207 := $store.i128($M.207, $p117, $i838);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  /* %840 = bitcast i128* %118 to { i64, i64 }*, !dbg !1264, !psr.id !1266, !verifier.code !63 */
  $p839 := $bitcast.ref.ref($p117);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  /* %841 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %840, i32 0, i32 0, !dbg !1264, !psr.id !1267, !verifier.code !63 */
  $p840 := $add.ref($add.ref($p839, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  /* %842 = load i64, i64* %841, align 16, !dbg !1264, !psr.id !1268, !verifier.code !63 */
  $i841 := $load.i64($M.207, $p840);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  /* %843 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %840, i32 0, i32 1, !dbg !1264, !psr.id !1269, !verifier.code !63 */
  $p842 := $add.ref($add.ref($p839, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  /* %844 = load i64, i64* %843, align 8, !dbg !1264, !psr.id !1270, !verifier.code !63 */
  $i843 := $load.i64($M.207, $p842);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  /* %845 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %842, i64 %844), !dbg !1264, !psr.id !1271, !verifier.code !63 */
  call $i844 := FStar_UInt128_uint128_to_uint64($i841, $i843);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 57} true;
  assume {:verifier.code 0} true;
  /* %846 = and i64 %845, 2251799813685247, !dbg !1272, !psr.id !1273, !verifier.code !63 */
  $i845 := $and.i64($i844, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %846, metadata !2476, metadata !DIExpression()), !dbg !1392, !psr.id !2477, !verifier.code !64 */
  call {:cexpr "tmp31"} boogie_si_record_i64($i845);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %839, i128* %119, align 16, !dbg !1276, !psr.id !1277, !verifier.code !63 */
  $M.208 := $store.i128($M.208, $p118, $i838);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* %847 = bitcast i128* %119 to { i64, i64 }*, !dbg !1276, !psr.id !1278, !verifier.code !63 */
  $p846 := $bitcast.ref.ref($p118);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* %848 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %847, i32 0, i32 0, !dbg !1276, !psr.id !1279, !verifier.code !63 */
  $p847 := $add.ref($add.ref($p846, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* %849 = load i64, i64* %848, align 16, !dbg !1276, !psr.id !1280, !verifier.code !63 */
  $i848 := $load.i64($M.208, $p847);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* %850 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %847, i32 0, i32 1, !dbg !1276, !psr.id !1281, !verifier.code !63 */
  $p849 := $add.ref($add.ref($p846, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* %851 = load i64, i64* %850, align 8, !dbg !1276, !psr.id !1282, !verifier.code !63 */
  $i850 := $load.i64($M.208, $p849);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* %852 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %849, i64 %851, i32 51), !dbg !1276, !psr.id !1283, !verifier.code !63 */
  call $p851 := FStar_UInt128_shift_right($i848, $i850, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* %853 = bitcast i128* %120 to { i64, i64 }*, !dbg !1276, !psr.id !1284, !verifier.code !63 */
  $p852 := $bitcast.ref.ref($p119);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* %854 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %853, i32 0, i32 0, !dbg !1276, !psr.id !1285, !verifier.code !63 */
  $p853 := $add.ref($add.ref($p852, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* %855 = extractvalue { i64, i64 } %852, 0, !dbg !1276, !psr.id !1286, !verifier.code !63 */
  $i854 := $extractvalue.i64($p851, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %855, i64* %854, align 16, !dbg !1276, !psr.id !1287, !verifier.code !63 */
  $M.209 := $store.i64($M.209, $p853, $i854);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* %856 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %853, i32 0, i32 1, !dbg !1276, !psr.id !1288, !verifier.code !63 */
  $p855 := $add.ref($add.ref($p852, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* %857 = extractvalue { i64, i64 } %852, 1, !dbg !1276, !psr.id !1289, !verifier.code !63 */
  $i856 := $extractvalue.i64($p851, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %857, i64* %856, align 8, !dbg !1276, !psr.id !1290, !verifier.code !63 */
  $M.209 := $store.i64($M.209, $p855, $i856);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  /* %858 = load i128, i128* %120, align 16, !dbg !1276, !psr.id !1291, !verifier.code !63 */
  $i857 := $load.i128($M.209, $p119);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %858, i128* %121, align 16, !dbg !1292, !psr.id !1293, !verifier.code !63 */
  $M.210 := $store.i128($M.210, $p120, $i857);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  /* %859 = bitcast i128* %121 to { i64, i64 }*, !dbg !1292, !psr.id !1294, !verifier.code !63 */
  $p858 := $bitcast.ref.ref($p120);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  /* %860 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %859, i32 0, i32 0, !dbg !1292, !psr.id !1295, !verifier.code !63 */
  $p859 := $add.ref($add.ref($p858, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  /* %861 = load i64, i64* %860, align 16, !dbg !1292, !psr.id !1296, !verifier.code !63 */
  $i860 := $load.i64($M.210, $p859);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  /* %862 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %859, i32 0, i32 1, !dbg !1292, !psr.id !1297, !verifier.code !63 */
  $p861 := $add.ref($add.ref($p858, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  /* %863 = load i64, i64* %862, align 8, !dbg !1292, !psr.id !1298, !verifier.code !63 */
  $i862 := $load.i64($M.210, $p861);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  /* %864 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %861, i64 %863), !dbg !1292, !psr.id !1299, !verifier.code !63 */
  call $i863 := FStar_UInt128_uint128_to_uint64($i860, $i862);
  /* call void @llvm.dbg.value(metadata i64 %864, metadata !2502, metadata !DIExpression()), !dbg !1392, !psr.id !2503, !verifier.code !64 */
  call {:cexpr "c3"} boogie_si_record_i64($i863);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  /* %865 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %864), !dbg !1302, !psr.id !1303, !verifier.code !63 */
  call $p864 := FStar_UInt128_uint64_to_uint128($i863);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  /* %866 = bitcast i128* %122 to { i64, i64 }*, !dbg !1302, !psr.id !1304, !verifier.code !63 */
  $p865 := $bitcast.ref.ref($p121);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  /* %867 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %866, i32 0, i32 0, !dbg !1302, !psr.id !1305, !verifier.code !63 */
  $p866 := $add.ref($add.ref($p865, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  /* %868 = extractvalue { i64, i64 } %865, 0, !dbg !1302, !psr.id !1306, !verifier.code !63 */
  $i867 := $extractvalue.i64($p864, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %868, i64* %867, align 16, !dbg !1302, !psr.id !1307, !verifier.code !63 */
  $M.211 := $store.i64($M.211, $p866, $i867);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  /* %869 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %866, i32 0, i32 1, !dbg !1302, !psr.id !1308, !verifier.code !63 */
  $p868 := $add.ref($add.ref($p865, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  /* %870 = extractvalue { i64, i64 } %865, 1, !dbg !1302, !psr.id !1309, !verifier.code !63 */
  $i869 := $extractvalue.i64($p864, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %870, i64* %869, align 8, !dbg !1302, !psr.id !1310, !verifier.code !63 */
  $M.211 := $store.i64($M.211, $p868, $i869);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  /* %871 = load i128, i128* %122, align 16, !dbg !1302, !psr.id !1311, !verifier.code !63 */
  $i870 := $load.i128($M.211, $p121);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %668, i128* %123, align 16, !dbg !1312, !psr.id !1313, !verifier.code !63 */
  $M.212 := $store.i128($M.212, $p122, $i667);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %872 = bitcast i128* %123 to { i64, i64 }*, !dbg !1312, !psr.id !1314, !verifier.code !63 */
  $p871 := $bitcast.ref.ref($p122);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %873 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %872, i32 0, i32 0, !dbg !1312, !psr.id !1315, !verifier.code !63 */
  $p872 := $add.ref($add.ref($p871, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %874 = load i64, i64* %873, align 16, !dbg !1312, !psr.id !1316, !verifier.code !63 */
  $i873 := $load.i64($M.212, $p872);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %875 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %872, i32 0, i32 1, !dbg !1312, !psr.id !1317, !verifier.code !63 */
  $p874 := $add.ref($add.ref($p871, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %876 = load i64, i64* %875, align 8, !dbg !1312, !psr.id !1318, !verifier.code !63 */
  $i875 := $load.i64($M.212, $p874);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %871, i128* %124, align 16, !dbg !1312, !psr.id !1319, !verifier.code !63 */
  $M.213 := $store.i128($M.213, $p123, $i870);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %877 = bitcast i128* %124 to { i64, i64 }*, !dbg !1312, !psr.id !1320, !verifier.code !63 */
  $p876 := $bitcast.ref.ref($p123);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %878 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %877, i32 0, i32 0, !dbg !1312, !psr.id !1321, !verifier.code !63 */
  $p877 := $add.ref($add.ref($p876, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %879 = load i64, i64* %878, align 16, !dbg !1312, !psr.id !1322, !verifier.code !63 */
  $i878 := $load.i64($M.213, $p877);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %880 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %877, i32 0, i32 1, !dbg !1312, !psr.id !1323, !verifier.code !63 */
  $p879 := $add.ref($add.ref($p876, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %881 = load i64, i64* %880, align 8, !dbg !1312, !psr.id !1324, !verifier.code !63 */
  $i880 := $load.i64($M.213, $p879);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %882 = call { i64, i64 } @FStar_UInt128_add(i64 %874, i64 %876, i64 %879, i64 %881), !dbg !1312, !psr.id !1325, !verifier.code !63 */
  call $p881 := FStar_UInt128_add($i873, $i875, $i878, $i880);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %883 = bitcast i128* %125 to { i64, i64 }*, !dbg !1312, !psr.id !1326, !verifier.code !63 */
  $p882 := $bitcast.ref.ref($p124);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %884 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %883, i32 0, i32 0, !dbg !1312, !psr.id !1327, !verifier.code !63 */
  $p883 := $add.ref($add.ref($p882, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %885 = extractvalue { i64, i64 } %882, 0, !dbg !1312, !psr.id !1328, !verifier.code !63 */
  $i884 := $extractvalue.i64($p881, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %885, i64* %884, align 16, !dbg !1312, !psr.id !1329, !verifier.code !63 */
  $M.214 := $store.i64($M.214, $p883, $i884);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %886 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %883, i32 0, i32 1, !dbg !1312, !psr.id !1330, !verifier.code !63 */
  $p885 := $add.ref($add.ref($p882, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %887 = extractvalue { i64, i64 } %882, 1, !dbg !1312, !psr.id !1331, !verifier.code !63 */
  $i886 := $extractvalue.i64($p881, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %887, i64* %886, align 8, !dbg !1312, !psr.id !1332, !verifier.code !63 */
  $M.214 := $store.i64($M.214, $p885, $i886);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  /* %888 = load i128, i128* %125, align 16, !dbg !1312, !psr.id !1333, !verifier.code !63 */
  $i887 := $load.i128($M.214, $p124);
  /* call void @llvm.dbg.value(metadata i128 %888, metadata !2536, metadata !DIExpression()), !dbg !1392, !psr.id !2537, !verifier.code !64 */
  call {:cexpr "l_3"} boogie_si_record_i128($i887);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %888, i128* %126, align 16, !dbg !1336, !psr.id !1337, !verifier.code !63 */
  $M.215 := $store.i128($M.215, $p125, $i887);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  /* %889 = bitcast i128* %126 to { i64, i64 }*, !dbg !1336, !psr.id !1338, !verifier.code !63 */
  $p888 := $bitcast.ref.ref($p125);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  /* %890 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %889, i32 0, i32 0, !dbg !1336, !psr.id !1339, !verifier.code !63 */
  $p889 := $add.ref($add.ref($p888, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  /* %891 = load i64, i64* %890, align 16, !dbg !1336, !psr.id !1340, !verifier.code !63 */
  $i890 := $load.i64($M.215, $p889);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  /* %892 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %889, i32 0, i32 1, !dbg !1336, !psr.id !1341, !verifier.code !63 */
  $p891 := $add.ref($add.ref($p888, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  /* %893 = load i64, i64* %892, align 8, !dbg !1336, !psr.id !1342, !verifier.code !63 */
  $i892 := $load.i64($M.215, $p891);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  /* %894 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %891, i64 %893), !dbg !1336, !psr.id !1343, !verifier.code !63 */
  call $i893 := FStar_UInt128_uint128_to_uint64($i890, $i892);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 57} true;
  assume {:verifier.code 0} true;
  /* %895 = and i64 %894, 2251799813685247, !dbg !1344, !psr.id !1345, !verifier.code !63 */
  $i894 := $and.i64($i893, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %895, metadata !2548, metadata !DIExpression()), !dbg !1392, !psr.id !2549, !verifier.code !64 */
  call {:cexpr "tmp41"} boogie_si_record_i64($i894);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %888, i128* %127, align 16, !dbg !1348, !psr.id !1349, !verifier.code !63 */
  $M.216 := $store.i128($M.216, $p126, $i887);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* %896 = bitcast i128* %127 to { i64, i64 }*, !dbg !1348, !psr.id !1350, !verifier.code !63 */
  $p895 := $bitcast.ref.ref($p126);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* %897 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %896, i32 0, i32 0, !dbg !1348, !psr.id !1351, !verifier.code !63 */
  $p896 := $add.ref($add.ref($p895, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* %898 = load i64, i64* %897, align 16, !dbg !1348, !psr.id !1352, !verifier.code !63 */
  $i897 := $load.i64($M.216, $p896);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* %899 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %896, i32 0, i32 1, !dbg !1348, !psr.id !1353, !verifier.code !63 */
  $p898 := $add.ref($add.ref($p895, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* %900 = load i64, i64* %899, align 8, !dbg !1348, !psr.id !1354, !verifier.code !63 */
  $i899 := $load.i64($M.216, $p898);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* %901 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %898, i64 %900, i32 51), !dbg !1348, !psr.id !1355, !verifier.code !63 */
  call $p900 := FStar_UInt128_shift_right($i897, $i899, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* %902 = bitcast i128* %128 to { i64, i64 }*, !dbg !1348, !psr.id !1356, !verifier.code !63 */
  $p901 := $bitcast.ref.ref($p127);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* %903 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %902, i32 0, i32 0, !dbg !1348, !psr.id !1357, !verifier.code !63 */
  $p902 := $add.ref($add.ref($p901, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* %904 = extractvalue { i64, i64 } %901, 0, !dbg !1348, !psr.id !1358, !verifier.code !63 */
  $i903 := $extractvalue.i64($p900, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %904, i64* %903, align 16, !dbg !1348, !psr.id !1359, !verifier.code !63 */
  $M.217 := $store.i64($M.217, $p902, $i903);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* %905 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %902, i32 0, i32 1, !dbg !1348, !psr.id !1360, !verifier.code !63 */
  $p904 := $add.ref($add.ref($p901, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* %906 = extractvalue { i64, i64 } %901, 1, !dbg !1348, !psr.id !1361, !verifier.code !63 */
  $i905 := $extractvalue.i64($p900, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %906, i64* %905, align 8, !dbg !1348, !psr.id !1362, !verifier.code !63 */
  $M.217 := $store.i64($M.217, $p904, $i905);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  /* %907 = load i128, i128* %128, align 16, !dbg !1348, !psr.id !1363, !verifier.code !63 */
  $i906 := $load.i128($M.217, $p127);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %907, i128* %129, align 16, !dbg !1364, !psr.id !1365, !verifier.code !63 */
  $M.218 := $store.i128($M.218, $p128, $i906);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  /* %908 = bitcast i128* %129 to { i64, i64 }*, !dbg !1364, !psr.id !1366, !verifier.code !63 */
  $p907 := $bitcast.ref.ref($p128);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  /* %909 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %908, i32 0, i32 0, !dbg !1364, !psr.id !1367, !verifier.code !63 */
  $p908 := $add.ref($add.ref($p907, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  /* %910 = load i64, i64* %909, align 16, !dbg !1364, !psr.id !1368, !verifier.code !63 */
  $i909 := $load.i64($M.218, $p908);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  /* %911 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %908, i32 0, i32 1, !dbg !1364, !psr.id !1369, !verifier.code !63 */
  $p910 := $add.ref($add.ref($p907, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  /* %912 = load i64, i64* %911, align 8, !dbg !1364, !psr.id !1370, !verifier.code !63 */
  $i911 := $load.i64($M.218, $p910);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  /* %913 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %910, i64 %912), !dbg !1364, !psr.id !1371, !verifier.code !63 */
  call $i912 := FStar_UInt128_uint128_to_uint64($i909, $i911);
  /* call void @llvm.dbg.value(metadata i64 %913, metadata !2574, metadata !DIExpression()), !dbg !1392, !psr.id !2575, !verifier.code !64 */
  call {:cexpr "c4"} boogie_si_record_i64($i912);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 147, 29} true;
  assume {:verifier.code 0} true;
  /* %914 = mul i64 %913, 19, !dbg !1374, !psr.id !1375, !verifier.code !63 */
  $i913 := $mul.i64($i912, 19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 147, 24} true;
  assume {:verifier.code 0} true;
  /* %915 = add i64 %699, %914, !dbg !1376, !psr.id !1377, !verifier.code !63 */
  $i914 := $add.i64($i698, $i913);
  /* call void @llvm.dbg.value(metadata i64 %915, metadata !2580, metadata !DIExpression()), !dbg !1392, !psr.id !2581, !verifier.code !64 */
  call {:cexpr "l_4"} boogie_si_record_i64($i914);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 148, 24} true;
  assume {:verifier.code 0} true;
  /* %916 = and i64 %915, 2251799813685247, !dbg !1380, !psr.id !1381, !verifier.code !63 */
  $i915 := $and.i64($i914, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %916, metadata !2584, metadata !DIExpression()), !dbg !1392, !psr.id !2585, !verifier.code !64 */
  call {:cexpr "tmp0_"} boogie_si_record_i64($i915);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 149, 21} true;
  assume {:verifier.code 0} true;
  /* %917 = lshr i64 %915, 51, !dbg !1384, !psr.id !1385, !verifier.code !63 */
  $i916 := $lshr.i64($i914, 51);
  /* call void @llvm.dbg.value(metadata i64 %917, metadata !2588, metadata !DIExpression()), !dbg !1392, !psr.id !2589, !verifier.code !64 */
  call {:cexpr "c5"} boogie_si_record_i64($i916);
  /* call void @llvm.dbg.value(metadata i64 %916, metadata !2590, metadata !DIExpression()), !dbg !1392, !psr.id !2591, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 151, 23} true;
  assume {:verifier.code 0} true;
  /* %918 = add i64 %748, %917, !dbg !1390, !psr.id !1391, !verifier.code !63 */
  $i917 := $add.i64($i747, $i916);
  /* call void @llvm.dbg.value(metadata i64 %918, metadata !2594, metadata !DIExpression()), !dbg !1392, !psr.id !2595, !verifier.code !64 */
  call {:cexpr "o1"} boogie_si_record_i64($i917);
  /* call void @llvm.dbg.value(metadata i64 %797, metadata !2596, metadata !DIExpression()), !dbg !1392, !psr.id !2597, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %846, metadata !2598, metadata !DIExpression()), !dbg !1392, !psr.id !2599, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %895, metadata !2600, metadata !DIExpression()), !dbg !1392, !psr.id !2601, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 155, 3} true;
  assume {:verifier.code 0} true;
  /* %919 = getelementptr inbounds i64, i64* %0, i64 0, !dbg !1400, !psr.id !1401, !verifier.code !63 */
  $p918 := $add.ref($p0, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 155, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %916, i64* %919, align 8, !dbg !1402, !psr.id !1403, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p918, $i915);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 156, 3} true;
  assume {:verifier.code 0} true;
  /* %920 = getelementptr inbounds i64, i64* %0, i64 1, !dbg !1404, !psr.id !1405, !verifier.code !63 */
  $p919 := $add.ref($p0, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 156, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %918, i64* %920, align 8, !dbg !1406, !psr.id !1407, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p919, $i917);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 157, 3} true;
  assume {:verifier.code 0} true;
  /* %921 = getelementptr inbounds i64, i64* %0, i64 2, !dbg !1408, !psr.id !1409, !verifier.code !63 */
  $p920 := $add.ref($p0, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 157, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %797, i64* %921, align 8, !dbg !1410, !psr.id !1411, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p920, $i796);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 158, 3} true;
  assume {:verifier.code 0} true;
  /* %922 = getelementptr inbounds i64, i64* %0, i64 3, !dbg !1412, !psr.id !1413, !verifier.code !63 */
  $p921 := $add.ref($p0, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 158, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %846, i64* %922, align 8, !dbg !1414, !psr.id !1415, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p921, $i845);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 159, 3} true;
  assume {:verifier.code 0} true;
  /* %923 = getelementptr inbounds i64, i64* %0, i64 4, !dbg !1416, !psr.id !1417, !verifier.code !63 */
  $p922 := $add.ref($p0, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 159, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %895, i64* %923, align 8, !dbg !1418, !psr.id !1419, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p922, $i894);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 160, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !1420, !psr.id !1421, !verifier.code !63 */
  $exn := false;
  return;
}
const Hacl_Curve25519_51_scalarmult: ref;
axiom (Hacl_Curve25519_51_scalarmult == $sub.ref(0, 13416));
procedure {:inline 1} Hacl_Curve25519_51_scalarmult($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $i8: i32;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $p14: ref;
  var $i15: i32;
  var $p16: ref;
  var $i17: i32;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $p25: ref;
  var $i26: i32;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $p32: ref;
  var $i33: i32;
  var $p34: ref;
  var $i35: i32;
  var $i36: i64;
  var $p37: ref;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $p42: ref;
  var $i43: i64;
  var $i44: i64;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $i50: i64;
  var $p51: ref;
  var $i52: i64;
  var $p53: ref;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $p57: ref;
  var $p58: ref;
  var $i59: i64;
  var $i60: i64;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $p64: ref;
  var $i65: i64;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $p75: ref;
  var $i76: i64;
  var $i77: i64;
  var $p78: ref;
  var $i79: i64;
  var $i80: i64;
  var $i81: i64;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $p85: ref;
  var $i86: i64;
  var $p87: ref;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 243, 12} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %4 = alloca [10 x i64], align 16, !psr.id !60, !verifier.code !61 */
  call $p3 := $alloc($mul.ref(80, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %5 = alloca [4 x i64], align 16, !psr.id !62, !verifier.code !61 */
  call $p4 := $alloc($mul.ref(32, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i8* %0, metadata !2630, metadata !DIExpression()), !dbg !2631, !psr.id !2632, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i8* %1, metadata !2633, metadata !DIExpression()), !dbg !2631, !psr.id !2634, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i8* %2, metadata !2635, metadata !DIExpression()), !dbg !2631, !psr.id !2636, !verifier.code !64 */
  /* call void @llvm.dbg.declare(metadata [10 x i64]* %4, metadata !2637, metadata !DIExpression()), !dbg !2641, !psr.id !2642, !verifier.code !64 */
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 243, 12} true;
  assume {:verifier.code 0} true;
  /* %6 = bitcast [10 x i64]* %4 to i8*, !dbg !74, !psr.id !76, !verifier.code !61 */
  $p5 := $bitcast.ref.ref($p3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 243, 12} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.memset.p0i8.i64(i8* align 16 %6, i8 0, i64 80, i1 false), !dbg !74, !psr.id !77, !verifier.code !61 */
  call $M.0 := $memset.i8($M.0, $p5, 0, 80, false);
  /* call void @llvm.dbg.declare(metadata [4 x i64]* %5, metadata !2645, metadata !DIExpression()), !dbg !2649, !psr.id !2650, !verifier.code !64 */
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 244, 12} true;
  assume {:verifier.code 0} true;
  /* %7 = bitcast [4 x i64]* %5 to i8*, !dbg !82, !psr.id !84, !verifier.code !61 */
  $p6 := $bitcast.ref.ref($p4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 244, 12} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.memset.p0i8.i64(i8* align 16 %7, i8 0, i64 32, i1 false), !dbg !82, !psr.id !85, !verifier.code !61 */
  call $M.219 := $memset.i8($M.219, $p6, 0, 32, false);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* br label %8, !dbg !86, !psr.id !87, !verifier.code !61 */
  goto $bb1;
$bb1:
  /* call void @llvm.dbg.value(metadata i32 0, metadata !2655, metadata !DIExpression()), !dbg !2657, !psr.id !2658, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %9 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 0, !dbg !92, !psr.id !94, !verifier.code !61 */
  $p7 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %9, metadata !2662, metadata !DIExpression()), !dbg !2663, !psr.id !2664, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %10 = mul i32 0, 8, !dbg !92, !psr.id !99, !verifier.code !61 */
  $i8 := $mul.i32(0, 8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %11 = zext i32 %10 to i64, !dbg !92, !psr.id !100, !verifier.code !61 */
  $i9 := $zext.i32.i64($i8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %12 = getelementptr inbounds i8, i8* %2, i64 %11, !dbg !92, !psr.id !101, !verifier.code !61 */
  $p10 := $add.ref($p2, $mul.ref($i9, 1));
  /* call void @llvm.dbg.value(metadata i8* %12, metadata !2668, metadata !DIExpression()), !dbg !2663, !psr.id !2669, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %13 = call i64 @load64(i8* %12), !dbg !92, !psr.id !104, !verifier.code !61 */
  call $i11 := load64($p10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %14 = call i64 @__uint64_identity(i64 %13), !dbg !92, !psr.id !105, !verifier.code !61 */
  call $i12 := __uint64_identity($i11);
  /* call void @llvm.dbg.value(metadata i64 %14, metadata !2672, metadata !DIExpression()), !dbg !2663, !psr.id !2673, !verifier.code !64 */
  call {:cexpr "u"} boogie_si_record_i64($i12);
  /* call void @llvm.dbg.value(metadata i64 %14, metadata !2674, metadata !DIExpression()), !dbg !2663, !psr.id !2675, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %14, metadata !2676, metadata !DIExpression()), !dbg !2663, !psr.id !2677, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %15 = zext i32 0 to i64, !dbg !92, !psr.id !112, !verifier.code !61 */
  $i13 := $zext.i32.i64(0);
  /* %16 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 %15 */
  $p14 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref($i13, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %14, i64* %16, align 8, !dbg !92, !psr.id !113, !verifier.code !61 */
  $M.219 := $store.i64($M.219, $p14, $i12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %17 = add i32 0, 1, !dbg !92, !psr.id !114, !verifier.code !61 */
  $i15 := $add.i32(0, 1);
  /* call void @llvm.dbg.value(metadata i32 %17, metadata !2655, metadata !DIExpression()), !dbg !2657, !psr.id !2681, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i15);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %18 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 0, !dbg !116, !psr.id !118, !verifier.code !61 */
  $p16 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %18, metadata !2685, metadata !DIExpression()), !dbg !2686, !psr.id !2687, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %19 = mul i32 %17, 8, !dbg !116, !psr.id !122, !verifier.code !61 */
  $i17 := $mul.i32($i15, 8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %20 = zext i32 %19 to i64, !dbg !116, !psr.id !123, !verifier.code !61 */
  $i18 := $zext.i32.i64($i17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %21 = getelementptr inbounds i8, i8* %2, i64 %20, !dbg !116, !psr.id !124, !verifier.code !61 */
  $p19 := $add.ref($p2, $mul.ref($i18, 1));
  /* call void @llvm.dbg.value(metadata i8* %21, metadata !2691, metadata !DIExpression()), !dbg !2686, !psr.id !2692, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %22 = call i64 @load64(i8* %21), !dbg !116, !psr.id !127, !verifier.code !61 */
  call $i20 := load64($p19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %23 = call i64 @__uint64_identity(i64 %22), !dbg !116, !psr.id !128, !verifier.code !61 */
  call $i21 := __uint64_identity($i20);
  /* call void @llvm.dbg.value(metadata i64 %23, metadata !2695, metadata !DIExpression()), !dbg !2686, !psr.id !2696, !verifier.code !64 */
  call {:cexpr "u"} boogie_si_record_i64($i21);
  /* call void @llvm.dbg.value(metadata i64 %23, metadata !2697, metadata !DIExpression()), !dbg !2686, !psr.id !2698, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %23, metadata !2699, metadata !DIExpression()), !dbg !2686, !psr.id !2700, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %24 = zext i32 %17 to i64, !dbg !116, !psr.id !135, !verifier.code !61 */
  $i22 := $zext.i32.i64($i15);
  /* %25 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 %24 */
  $p23 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref($i22, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %23, i64* %25, align 8, !dbg !116, !psr.id !136, !verifier.code !61 */
  $M.219 := $store.i64($M.219, $p23, $i21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %26 = add i32 %17, 1, !dbg !116, !psr.id !137, !verifier.code !61 */
  $i24 := $add.i32($i15, 1);
  /* call void @llvm.dbg.value(metadata i32 %26, metadata !2655, metadata !DIExpression()), !dbg !2657, !psr.id !2704, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %27 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 0, !dbg !139, !psr.id !141, !verifier.code !61 */
  $p25 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %27, metadata !2708, metadata !DIExpression()), !dbg !2709, !psr.id !2710, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %28 = mul i32 %26, 8, !dbg !139, !psr.id !145, !verifier.code !61 */
  $i26 := $mul.i32($i24, 8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %29 = zext i32 %28 to i64, !dbg !139, !psr.id !146, !verifier.code !61 */
  $i27 := $zext.i32.i64($i26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %30 = getelementptr inbounds i8, i8* %2, i64 %29, !dbg !139, !psr.id !147, !verifier.code !61 */
  $p28 := $add.ref($p2, $mul.ref($i27, 1));
  /* call void @llvm.dbg.value(metadata i8* %30, metadata !2714, metadata !DIExpression()), !dbg !2709, !psr.id !2715, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %31 = call i64 @load64(i8* %30), !dbg !139, !psr.id !150, !verifier.code !61 */
  call $i29 := load64($p28);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %32 = call i64 @__uint64_identity(i64 %31), !dbg !139, !psr.id !151, !verifier.code !61 */
  call $i30 := __uint64_identity($i29);
  /* call void @llvm.dbg.value(metadata i64 %32, metadata !2718, metadata !DIExpression()), !dbg !2709, !psr.id !2719, !verifier.code !64 */
  call {:cexpr "u"} boogie_si_record_i64($i30);
  /* call void @llvm.dbg.value(metadata i64 %32, metadata !2720, metadata !DIExpression()), !dbg !2709, !psr.id !2721, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %32, metadata !2722, metadata !DIExpression()), !dbg !2709, !psr.id !2723, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %33 = zext i32 %26 to i64, !dbg !139, !psr.id !158, !verifier.code !61 */
  $i31 := $zext.i32.i64($i24);
  /* %34 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 %33 */
  $p32 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref($i31, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %32, i64* %34, align 8, !dbg !139, !psr.id !159, !verifier.code !61 */
  $M.219 := $store.i64($M.219, $p32, $i30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %35 = add i32 %26, 1, !dbg !139, !psr.id !160, !verifier.code !61 */
  $i33 := $add.i32($i24, 1);
  /* call void @llvm.dbg.value(metadata i32 %35, metadata !2655, metadata !DIExpression()), !dbg !2657, !psr.id !2727, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %36 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 0, !dbg !162, !psr.id !164, !verifier.code !61 */
  $p34 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %36, metadata !2731, metadata !DIExpression()), !dbg !2732, !psr.id !2733, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %37 = mul i32 %35, 8, !dbg !162, !psr.id !168, !verifier.code !61 */
  $i35 := $mul.i32($i33, 8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %38 = zext i32 %37 to i64, !dbg !162, !psr.id !169, !verifier.code !61 */
  $i36 := $zext.i32.i64($i35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %39 = getelementptr inbounds i8, i8* %2, i64 %38, !dbg !162, !psr.id !170, !verifier.code !61 */
  $p37 := $add.ref($p2, $mul.ref($i36, 1));
  /* call void @llvm.dbg.value(metadata i8* %39, metadata !2737, metadata !DIExpression()), !dbg !2732, !psr.id !2738, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %40 = call i64 @load64(i8* %39), !dbg !162, !psr.id !173, !verifier.code !61 */
  call $i38 := load64($p37);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %41 = call i64 @__uint64_identity(i64 %40), !dbg !162, !psr.id !174, !verifier.code !61 */
  call $i39 := __uint64_identity($i38);
  /* call void @llvm.dbg.value(metadata i64 %41, metadata !2741, metadata !DIExpression()), !dbg !2732, !psr.id !2742, !verifier.code !64 */
  call {:cexpr "u"} boogie_si_record_i64($i39);
  /* call void @llvm.dbg.value(metadata i64 %41, metadata !2743, metadata !DIExpression()), !dbg !2732, !psr.id !2744, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %41, metadata !2745, metadata !DIExpression()), !dbg !2732, !psr.id !2746, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* %42 = zext i32 %35 to i64, !dbg !162, !psr.id !181, !verifier.code !61 */
  $i40 := $zext.i32.i64($i33);
  /* %43 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 %42 */
  $p41 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref($i40, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %41, i64* %43, align 8, !dbg !162, !psr.id !182, !verifier.code !61 */
  $M.219 := $store.i64($M.219, $p41, $i39);
  /* call void @llvm.dbg.value(metadata i32 %35, metadata !2655, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !2657, !psr.id !2749, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  /* br label %44, !dbg !184, !psr.id !185, !verifier.code !61 */
  goto $bb2;
$bb2:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 255, 19} true;
  assume {:verifier.code 0} true;
  /* %45 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 3, !dbg !186, !psr.id !187, !verifier.code !61 */
  $p42 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 255, 19} true;
  assume {:verifier.code 0} true;
  /* %46 = load i64, i64* %45, align 8, !dbg !186, !psr.id !188, !verifier.code !61 */
  $i43 := $load.i64($M.219, $p42);
  /* call void @llvm.dbg.value(metadata i64 %46, metadata !2755, metadata !DIExpression()), !dbg !2631, !psr.id !2756, !verifier.code !64 */
  call {:cexpr "tmp3"} boogie_si_record_i64($i43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 256, 18} true;
  assume {:verifier.code 0} true;
  /* %47 = and i64 %46, 9223372036854775807, !dbg !191, !psr.id !192, !verifier.code !61 */
  $i44 := $and.i64($i43, 9223372036854775807);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 256, 3} true;
  assume {:verifier.code 0} true;
  /* %48 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 3, !dbg !193, !psr.id !194, !verifier.code !61 */
  $p45 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 256, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %47, i64* %48, align 8, !dbg !195, !psr.id !196, !verifier.code !61 */
  $M.219 := $store.i64($M.219, $p45, $i44);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 257, 17} true;
  assume {:verifier.code 0} true;
  /* %49 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 0, !dbg !197, !psr.id !198, !verifier.code !61 */
  $p46 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %49, metadata !2765, metadata !DIExpression()), !dbg !2631, !psr.id !2766, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 258, 17} true;
  assume {:verifier.code 0} true;
  /* %50 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 0, !dbg !201, !psr.id !202, !verifier.code !61 */
  $p47 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 8));
  /* %51 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 5 */
  $p48 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(5, 8));
  /* call void @llvm.dbg.value(metadata i64* %51, metadata !2769, metadata !DIExpression()), !dbg !2631, !psr.id !2770, !verifier.code !64 */
  /* %52 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 5 */
  $p49 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(5, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 259, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 1, i64* %52, align 8, !dbg !205, !psr.id !206, !verifier.code !61 */
  $M.0 := $store.i64($M.0, $p49, 1);
  /* %.sum = add i64 5, 1 */
  $i50 := $add.i64(5, 1);
  /* %53 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 %.sum */
  $p51 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref($i50, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 260, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %53, align 8, !dbg !207, !psr.id !208, !verifier.code !61 */
  $M.0 := $store.i64($M.0, $p51, 0);
  /* %.sum1 = add i64 5, 2 */
  $i52 := $add.i64(5, 2);
  /* %54 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 %.sum1 */
  $p53 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref($i52, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 261, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %54, align 8, !dbg !209, !psr.id !210, !verifier.code !61 */
  $M.0 := $store.i64($M.0, $p53, 0);
  /* %.sum2 = add i64 5, 3 */
  $i54 := $add.i64(5, 3);
  /* %55 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 %.sum2 */
  $p55 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref($i54, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 262, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %55, align 8, !dbg !211, !psr.id !212, !verifier.code !61 */
  $M.0 := $store.i64($M.0, $p55, 0);
  /* %.sum3 = add i64 5, 4 */
  $i56 := $add.i64(5, 4);
  /* %56 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 %.sum3 */
  $p57 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref($i56, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 263, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %56, align 8, !dbg !213, !psr.id !214, !verifier.code !61 */
  $M.0 := $store.i64($M.0, $p57, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 264, 18} true;
  assume {:verifier.code 0} true;
  /* %57 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 0, !dbg !215, !psr.id !216, !verifier.code !61 */
  $p58 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 264, 18} true;
  assume {:verifier.code 0} true;
  /* %58 = load i64, i64* %57, align 16, !dbg !215, !psr.id !217, !verifier.code !61 */
  $i59 := $load.i64($M.219, $p58);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 264, 26} true;
  assume {:verifier.code 0} true;
  /* %59 = and i64 %58, 2251799813685247, !dbg !218, !psr.id !219, !verifier.code !61 */
  $i60 := $and.i64($i59, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %59, metadata !2786, metadata !DIExpression()), !dbg !2631, !psr.id !2787, !verifier.code !64 */
  call {:cexpr "f0l"} boogie_si_record_i64($i60);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 265, 18} true;
  assume {:verifier.code 0} true;
  /* %60 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 0, !dbg !222, !psr.id !223, !verifier.code !61 */
  $p61 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 265, 18} true;
  assume {:verifier.code 0} true;
  /* %61 = load i64, i64* %60, align 16, !dbg !222, !psr.id !224, !verifier.code !61 */
  $i62 := $load.i64($M.219, $p61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 265, 26} true;
  assume {:verifier.code 0} true;
  /* %62 = lshr i64 %61, 51, !dbg !225, !psr.id !226, !verifier.code !61 */
  $i63 := $lshr.i64($i62, 51);
  /* call void @llvm.dbg.value(metadata i64 %62, metadata !2793, metadata !DIExpression()), !dbg !2631, !psr.id !2794, !verifier.code !64 */
  call {:cexpr "f0h"} boogie_si_record_i64($i63);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 266, 19} true;
  assume {:verifier.code 0} true;
  /* %63 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 1, !dbg !229, !psr.id !230, !verifier.code !61 */
  $p64 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 266, 19} true;
  assume {:verifier.code 0} true;
  /* %64 = load i64, i64* %63, align 8, !dbg !229, !psr.id !231, !verifier.code !61 */
  $i65 := $load.i64($M.219, $p64);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 266, 27} true;
  assume {:verifier.code 0} true;
  /* %65 = and i64 %64, 274877906943, !dbg !232, !psr.id !233, !verifier.code !61 */
  $i66 := $and.i64($i65, 274877906943);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 266, 54} true;
  assume {:verifier.code 0} true;
  /* %66 = shl i64 %65, 13, !dbg !234, !psr.id !235, !verifier.code !61 */
  $i67 := $shl.i64($i66, 13);
  /* call void @llvm.dbg.value(metadata i64 %66, metadata !2802, metadata !DIExpression()), !dbg !2631, !psr.id !2803, !verifier.code !64 */
  call {:cexpr "f1l"} boogie_si_record_i64($i67);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 267, 18} true;
  assume {:verifier.code 0} true;
  /* %67 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 1, !dbg !238, !psr.id !239, !verifier.code !61 */
  $p68 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 267, 18} true;
  assume {:verifier.code 0} true;
  /* %68 = load i64, i64* %67, align 8, !dbg !238, !psr.id !240, !verifier.code !61 */
  $i69 := $load.i64($M.219, $p68);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 267, 26} true;
  assume {:verifier.code 0} true;
  /* %69 = lshr i64 %68, 38, !dbg !241, !psr.id !242, !verifier.code !61 */
  $i70 := $lshr.i64($i69, 38);
  /* call void @llvm.dbg.value(metadata i64 %69, metadata !2809, metadata !DIExpression()), !dbg !2631, !psr.id !2810, !verifier.code !64 */
  call {:cexpr "f1h"} boogie_si_record_i64($i70);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 268, 19} true;
  assume {:verifier.code 0} true;
  /* %70 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 2, !dbg !245, !psr.id !246, !verifier.code !61 */
  $p71 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 268, 19} true;
  assume {:verifier.code 0} true;
  /* %71 = load i64, i64* %70, align 16, !dbg !245, !psr.id !247, !verifier.code !61 */
  $i72 := $load.i64($M.219, $p71);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 268, 27} true;
  assume {:verifier.code 0} true;
  /* %72 = and i64 %71, 33554431, !dbg !248, !psr.id !249, !verifier.code !61 */
  $i73 := $and.i64($i72, 33554431);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 268, 51} true;
  assume {:verifier.code 0} true;
  /* %73 = shl i64 %72, 26, !dbg !250, !psr.id !251, !verifier.code !61 */
  $i74 := $shl.i64($i73, 26);
  /* call void @llvm.dbg.value(metadata i64 %73, metadata !2818, metadata !DIExpression()), !dbg !2631, !psr.id !2819, !verifier.code !64 */
  call {:cexpr "f2l"} boogie_si_record_i64($i74);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 269, 18} true;
  assume {:verifier.code 0} true;
  /* %74 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 2, !dbg !254, !psr.id !255, !verifier.code !61 */
  $p75 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 269, 18} true;
  assume {:verifier.code 0} true;
  /* %75 = load i64, i64* %74, align 16, !dbg !254, !psr.id !256, !verifier.code !61 */
  $i76 := $load.i64($M.219, $p75);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 269, 26} true;
  assume {:verifier.code 0} true;
  /* %76 = lshr i64 %75, 25, !dbg !257, !psr.id !258, !verifier.code !61 */
  $i77 := $lshr.i64($i76, 25);
  /* call void @llvm.dbg.value(metadata i64 %76, metadata !2825, metadata !DIExpression()), !dbg !2631, !psr.id !2826, !verifier.code !64 */
  call {:cexpr "f2h"} boogie_si_record_i64($i77);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 270, 19} true;
  assume {:verifier.code 0} true;
  /* %77 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 3, !dbg !261, !psr.id !262, !verifier.code !61 */
  $p78 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 270, 19} true;
  assume {:verifier.code 0} true;
  /* %78 = load i64, i64* %77, align 8, !dbg !261, !psr.id !263, !verifier.code !61 */
  $i79 := $load.i64($M.219, $p78);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 270, 27} true;
  assume {:verifier.code 0} true;
  /* %79 = and i64 %78, 4095, !dbg !264, !psr.id !265, !verifier.code !61 */
  $i80 := $and.i64($i79, 4095);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 270, 47} true;
  assume {:verifier.code 0} true;
  /* %80 = shl i64 %79, 39, !dbg !266, !psr.id !267, !verifier.code !61 */
  $i81 := $shl.i64($i80, 39);
  /* call void @llvm.dbg.value(metadata i64 %80, metadata !2834, metadata !DIExpression()), !dbg !2631, !psr.id !2835, !verifier.code !64 */
  call {:cexpr "f3l"} boogie_si_record_i64($i81);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 271, 18} true;
  assume {:verifier.code 0} true;
  /* %81 = getelementptr inbounds [4 x i64], [4 x i64]* %5, i64 0, i64 3, !dbg !270, !psr.id !271, !verifier.code !61 */
  $p82 := $add.ref($add.ref($p4, $mul.ref(0, 32)), $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 271, 18} true;
  assume {:verifier.code 0} true;
  /* %82 = load i64, i64* %81, align 8, !dbg !270, !psr.id !272, !verifier.code !61 */
  $i83 := $load.i64($M.219, $p82);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 271, 26} true;
  assume {:verifier.code 0} true;
  /* %83 = lshr i64 %82, 12, !dbg !273, !psr.id !274, !verifier.code !61 */
  $i84 := $lshr.i64($i83, 12);
  /* call void @llvm.dbg.value(metadata i64 %83, metadata !2841, metadata !DIExpression()), !dbg !2631, !psr.id !2842, !verifier.code !64 */
  call {:cexpr "f3h"} boogie_si_record_i64($i84);
  /* %84 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 0 */
  $p85 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 272, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %59, i64* %84, align 8, !dbg !277, !psr.id !278, !verifier.code !61 */
  $M.0 := $store.i64($M.0, $p85, $i60);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 273, 15} true;
  assume {:verifier.code 0} true;
  /* %85 = or i64 %62, %66, !dbg !279, !psr.id !280, !verifier.code !61 */
  $i86 := $or.i64($i63, $i67);
  /* %86 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 1 */
  $p87 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 273, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %85, i64* %86, align 8, !dbg !281, !psr.id !282, !verifier.code !61 */
  $M.0 := $store.i64($M.0, $p87, $i86);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 274, 15} true;
  assume {:verifier.code 0} true;
  /* %87 = or i64 %69, %73, !dbg !283, !psr.id !284, !verifier.code !61 */
  $i88 := $or.i64($i70, $i74);
  /* %88 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 2 */
  $p89 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 274, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %87, i64* %88, align 8, !dbg !285, !psr.id !286, !verifier.code !61 */
  $M.0 := $store.i64($M.0, $p89, $i88);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 275, 15} true;
  assume {:verifier.code 0} true;
  /* %89 = or i64 %76, %80, !dbg !287, !psr.id !288, !verifier.code !61 */
  $i90 := $or.i64($i77, $i81);
  /* %90 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 3 */
  $p91 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 275, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %89, i64* %90, align 8, !dbg !289, !psr.id !290, !verifier.code !61 */
  $M.0 := $store.i64($M.0, $p91, $i90);
  /* %91 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 4 */
  $p92 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 276, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %83, i64* %91, align 8, !dbg !291, !psr.id !292, !verifier.code !61 */
  $M.0 := $store.i64($M.0, $p92, $i84);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 277, 21} true;
  assume {:verifier.code 0} true;
  /* %92 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 0, !dbg !293, !psr.id !294, !verifier.code !61 */
  $p93 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 277, 33} true;
  assume {:verifier.code 0} true;
  /* %93 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 0, !dbg !295, !psr.id !296, !verifier.code !61 */
  $p94 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 277, 3} true;
  assume {:verifier.code 0} true;
  /* call void @montgomery_ladder(i64* %92, i8* %1, i64* %93), !dbg !297, !psr.id !298, !verifier.code !61 */
  call montgomery_ladder($p93, $p1, $p94);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 278, 21} true;
  assume {:verifier.code 0} true;
  /* %94 = getelementptr inbounds [10 x i64], [10 x i64]* %4, i64 0, i64 0, !dbg !299, !psr.id !300, !verifier.code !61 */
  $p95 := $add.ref($add.ref($p3, $mul.ref(0, 80)), $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 278, 3} true;
  assume {:verifier.code 0} true;
  /* call void @encode_point(i8* %0, i64* %94), !dbg !301, !psr.id !302, !verifier.code !61 */
  call encode_point($p0, $p95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 279, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !303, !psr.id !304, !verifier.code !61 */
  $exn := false;
  return;
}
const load64: ref;
axiom (load64 == $sub.ref(0, 14448));
procedure {:inline 1} load64($p0: ref)
  returns ($r: i64)
{
  var $p1: ref;
  var $p2: ref;
  var $i3: i64;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 174, 3} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %2 = alloca i64, align 8, !psr.id !61, !verifier.code !62 */
  call $p1 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i8* %0, metadata !2876, metadata !DIExpression()), !dbg !2877, !psr.id !2878, !verifier.code !64 */
  /* call void @llvm.dbg.declare(metadata i64* %2, metadata !2879, metadata !DIExpression()), !dbg !2880, !psr.id !2881, !verifier.code !64 */
  assume true;
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 174, 3} true;
  assume {:verifier.code 0} true;
  /* %3 = bitcast i64* %2 to i8*, !dbg !69, !psr.id !70, !verifier.code !62 */
  $p2 := $bitcast.ref.ref($p1);
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 174, 3} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 1 %0, i64 8, i1 false), !dbg !69, !psr.id !71, !verifier.code !62 */
  call $M.221 := $memcpy.i8($M.221, $M.220, $p2, $p0, 8, false);
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 175, 10} true;
  assume {:verifier.code 0} true;
  /* %4 = load i64, i64* %2, align 8, !dbg !72, !psr.id !73, !verifier.code !62 */
  $i3 := $load.i64($M.221, $p1);
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 175, 3} true;
  assume {:verifier.code 0} true;
  /* ret i64 %4, !dbg !74, !psr.id !75, !verifier.code !62 */
  $r := $i3;
  $exn := false;
  return;
}
const __uint64_identity: ref;
axiom (__uint64_identity == $sub.ref(0, 15480));
procedure {:inline 1} __uint64_identity($i0: i64)
  returns ($r: i64)
{
$bb0:
  assume {:sourceloc "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h", 47, 3} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i64 %0, metadata !2893, metadata !DIExpression()), !dbg !2894, !psr.id !2895, !verifier.code !64 */
  call {:cexpr "__uint64_identity:arg:__x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h", 47, 3} true;
  assume {:verifier.code 0} true;
  /* ret i64 %0, !dbg !64, !psr.id !65, !verifier.code !63 */
  $r := $i0;
  $exn := false;
  return;
}
const montgomery_ladder: ref;
axiom (montgomery_ladder == $sub.ref(0, 16512));
procedure {:inline 1} montgomery_ladder($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i32;
  var $i7: i1;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $i14: i128;
  var $i15: i64;
  var $p16: ref;
  var $i17: i32;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $i48: i32;
  var $i49: i1;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $i54: i32;
  var $i55: i32;
  var $i56: i64;
  var $p57: ref;
  var $i58: i8;
  var $i59: i32;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i32;
  var $i64: i64;
  var $p65: ref;
  var $i66: i64;
  var $i67: i64;
  var $p68: ref;
  var $p69: ref;
  var $i70: i32;
  var $p71: ref;
  var $i72: i64;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 104, 8} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %4 = alloca [10 x i128], align 16, !psr.id !61, !verifier.code !62 */
  call $p3 := $alloc($mul.ref(160, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %5 = alloca i128, align 16, !psr.id !63, !verifier.code !62 */
  call $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %6 = alloca [41 x i64], align 16, !psr.id !64, !verifier.code !62 */
  call $p5 := $alloc($mul.ref(328, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !2904, metadata !DIExpression()), !dbg !2905, !psr.id !2906, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i8* %1, metadata !2907, metadata !DIExpression()), !dbg !2905, !psr.id !2908, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %2, metadata !2909, metadata !DIExpression()), !dbg !2905, !psr.id !2910, !verifier.code !64 */
  /* call void @llvm.dbg.declare(metadata [10 x i128]* %4, metadata !2911, metadata !DIExpression()), !dbg !2913, !psr.id !2914, !verifier.code !64 */
  assume true;
  /* call void @llvm.dbg.value(metadata i32 0, metadata !2915, metadata !DIExpression()), !dbg !2917, !psr.id !2918, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 104, 8} true;
  assume {:verifier.code 0} true;
  /* br label %7, !dbg !82, !psr.id !83, !verifier.code !62 */
  $i6 := 0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.01 = phi i32 [ 0, %3 ], [ %20, %19 ], !dbg !80, !psr.id !84, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.01, metadata !2915, metadata !DIExpression()), !dbg !2917, !psr.id !2922, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 104, 29} true;
  assume {:verifier.code 0} true;
  /* %8 = icmp ult i32 %.01, 10, !dbg !86, !psr.id !88, !verifier.code !62 */
  $i7 := $ult.i32($i6, 10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 104, 3} true;
  assume {:verifier.code 0} true;
  /* br i1 %8, label %9, label %21, !dbg !89, !psr.id !90, !verifier.code !62 */
  assume {:branchcond $i7} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i7 == 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  /* %10 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 0), !dbg !91, !psr.id !92, !verifier.code !62 */
  call $p8 := FStar_UInt128_uint64_to_uint128(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  /* %11 = bitcast i128* %5 to { i64, i64 }*, !dbg !91, !psr.id !93, !verifier.code !62 */
  $p9 := $bitcast.ref.ref($p4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  /* %12 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 0, !dbg !91, !psr.id !94, !verifier.code !62 */
  $p10 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  /* %13 = extractvalue { i64, i64 } %10, 0, !dbg !91, !psr.id !95, !verifier.code !62 */
  $i11 := $extractvalue.i64($p8, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  /* store i64 %13, i64* %12, align 16, !dbg !91, !psr.id !96, !verifier.code !62 */
  $M.222 := $store.i64($M.222, $p10, $i11);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  /* %14 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %11, i32 0, i32 1, !dbg !91, !psr.id !97, !verifier.code !62 */
  $p12 := $add.ref($add.ref($p9, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  /* %15 = extractvalue { i64, i64 } %10, 1, !dbg !91, !psr.id !98, !verifier.code !62 */
  $i13 := $extractvalue.i64($p8, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  /* store i64 %15, i64* %14, align 8, !dbg !91, !psr.id !99, !verifier.code !62 */
  $M.222 := $store.i64($M.222, $p12, $i13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  /* %16 = load i128, i128* %5, align 16, !dbg !91, !psr.id !100, !verifier.code !62 */
  $i14 := $load.i128($M.222, $p4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 5} true;
  assume {:verifier.code 0} true;
  /* %17 = zext i32 %.01 to i64, !dbg !101, !psr.id !102, !verifier.code !62 */
  $i15 := $zext.i32.i64($i6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 5} true;
  assume {:verifier.code 0} true;
  /* %18 = getelementptr inbounds [10 x i128], [10 x i128]* %4, i64 0, i64 %17, !dbg !101, !psr.id !103, !verifier.code !62 */
  $p16 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref($i15, 16));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 14} true;
  assume {:verifier.code 0} true;
  /* store i128 %16, i128* %18, align 16, !dbg !104, !psr.id !105, !verifier.code !62 */
  $M.223 := $store.i128($M.223, $p16, $i14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 5} true;
  assume {:verifier.code 0} true;
  /* br label %19, !dbg !101, !psr.id !106, !verifier.code !62 */
  goto $bb4;
$bb3:
  assume !(($i7 == 1));
  /* call void @llvm.dbg.declare(metadata [41 x i64]* %6, metadata !2951, metadata !DIExpression()), !dbg !2955, !psr.id !2956, !verifier.code !64 */
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 106, 12} true;
  assume {:verifier.code 0} true;
  /* %22 = bitcast [41 x i64]* %6 to i8*, !dbg !119, !psr.id !121, !verifier.code !62 */
  $p18 := $bitcast.ref.ref($p5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 106, 12} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.memset.p0i8.i64(i8* align 16 %22, i8 0, i64 328, i1 false), !dbg !119, !psr.id !122, !verifier.code !62 */
  call $M.0 := $memset.i8($M.0, $p18, 0, 328, false);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 107, 18} true;
  assume {:verifier.code 0} true;
  /* %23 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 0, !dbg !123, !psr.id !124, !verifier.code !62 */
  $p19 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %23, metadata !2961, metadata !DIExpression()), !dbg !2905, !psr.id !2962, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 108, 19} true;
  assume {:verifier.code 0} true;
  /* %24 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 0, !dbg !127, !psr.id !128, !verifier.code !62 */
  $p20 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %24, metadata !2965, metadata !DIExpression()), !dbg !2905, !psr.id !2966, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %24, metadata !2967, metadata !DIExpression()), !dbg !2905, !psr.id !2968, !verifier.code !64 */
  /* %25 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 10 */
  $p21 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(10, 8));
  /* call void @llvm.dbg.value(metadata i64* %25, metadata !2969, metadata !DIExpression()), !dbg !2905, !psr.id !2970, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 111, 3} true;
  assume {:verifier.code 0} true;
  /* %26 = bitcast i64* %25 to i8*, !dbg !135, !psr.id !136, !verifier.code !62 */
  $p22 := $bitcast.ref.ref($p21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 111, 3} true;
  assume {:verifier.code 0} true;
  /* %27 = bitcast i64* %2 to i8*, !dbg !135, !psr.id !137, !verifier.code !62 */
  $p23 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 111, 3} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 8 %27, i64 80, i1 false), !dbg !135, !psr.id !138, !verifier.code !62 */
  call $M.0 := $memcpy.i8($M.0, $M.0, $p22, $p23, 80, false);
  /* call void @llvm.dbg.value(metadata i64* %24, metadata !2975, metadata !DIExpression()), !dbg !2905, !psr.id !2976, !verifier.code !64 */
  /* %28 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 5 */
  $p24 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(5, 8));
  /* call void @llvm.dbg.value(metadata i64* %28, metadata !2977, metadata !DIExpression()), !dbg !2905, !psr.id !2978, !verifier.code !64 */
  /* %29 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 0 */
  $p25 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 114, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 1, i64* %29, align 8, !dbg !143, !psr.id !144, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p25, 1);
  /* %30 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 1 */
  $p26 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 115, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %30, align 8, !dbg !145, !psr.id !146, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p26, 0);
  /* %31 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 2 */
  $p27 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 116, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %31, align 8, !dbg !147, !psr.id !148, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p27, 0);
  /* %32 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 3 */
  $p28 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 117, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %32, align 8, !dbg !149, !psr.id !150, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p28, 0);
  /* %33 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 4 */
  $p29 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 118, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %33, align 8, !dbg !151, !psr.id !152, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p29, 0);
  /* %34 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 5 */
  $p30 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(5, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 119, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %34, align 8, !dbg !153, !psr.id !154, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p30, 0);
  /* %.sum = add i64 5, 1 */
  $i31 := $add.i64(5, 1);
  /* %35 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 %.sum */
  $p32 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref($i31, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 120, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %35, align 8, !dbg !155, !psr.id !156, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p32, 0);
  /* %.sum1 = add i64 5, 2 */
  $i33 := $add.i64(5, 2);
  /* %36 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 %.sum1 */
  $p34 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref($i33, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 121, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %36, align 8, !dbg !157, !psr.id !158, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p34, 0);
  /* %.sum2 = add i64 5, 3 */
  $i35 := $add.i64(5, 3);
  /* %37 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 %.sum2 */
  $p36 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref($i35, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 122, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %37, align 8, !dbg !159, !psr.id !160, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p36, 0);
  /* %.sum3 = add i64 5, 4 */
  $i37 := $add.i64(5, 4);
  /* %38 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 %.sum3 */
  $p38 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref($i37, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 123, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 0, i64* %38, align 8, !dbg !161, !psr.id !162, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p38, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 124, 24} true;
  assume {:verifier.code 0} true;
  /* %39 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 0, !dbg !163, !psr.id !164, !verifier.code !62 */
  $p39 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %39, metadata !3001, metadata !DIExpression()), !dbg !2905, !psr.id !3002, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 125, 25} true;
  assume {:verifier.code 0} true;
  /* %40 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 0, !dbg !167, !psr.id !168, !verifier.code !62 */
  $p40 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %40, metadata !3005, metadata !DIExpression()), !dbg !2905, !psr.id !3006, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 126, 19} true;
  assume {:verifier.code 0} true;
  /* %41 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 0, !dbg !171, !psr.id !172, !verifier.code !62 */
  $p41 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %41, metadata !3009, metadata !DIExpression()), !dbg !2905, !psr.id !3010, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 127, 22} true;
  assume {:verifier.code 0} true;
  /* %42 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 0, !dbg !175, !psr.id !176, !verifier.code !62 */
  $p42 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 8));
  /* %43 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 10 */
  $p43 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(10, 8));
  /* call void @llvm.dbg.value(metadata i64* %43, metadata !3013, metadata !DIExpression()), !dbg !2905, !psr.id !3014, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 128, 20} true;
  assume {:verifier.code 0} true;
  /* %44 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 0, !dbg !179, !psr.id !180, !verifier.code !62 */
  $p44 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 8));
  /* %45 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 40 */
  $p45 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(40, 8));
  /* call void @llvm.dbg.value(metadata i64* %45, metadata !3017, metadata !DIExpression()), !dbg !2905, !psr.id !3018, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 129, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_cswap2(i64 1, i64* %41, i64* %43), !dbg !183, !psr.id !184, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_cswap2(1, $p41, $p43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 130, 41} true;
  assume {:verifier.code 0} true;
  /* %46 = getelementptr inbounds [10 x i128], [10 x i128]* %4, i64 0, i64 0, !dbg !185, !psr.id !186, !verifier.code !62 */
  $p46 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 16));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 130, 3} true;
  assume {:verifier.code 0} true;
  /* call void @point_add_and_double(i64* %2, i64* %40, i128* %46), !dbg !187, !psr.id !188, !verifier.code !62 */
  call point_add_and_double($p2, $p40, $p46);
  /* %47 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 40 */
  $p47 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(40, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 131, 12} true;
  assume {:verifier.code 0} true;
  /* store i64 1, i64* %47, align 8, !dbg !189, !psr.id !190, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p47, 1);
  /* call void @llvm.dbg.value(metadata i32 0, metadata !3027, metadata !DIExpression()), !dbg !3029, !psr.id !3030, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 132, 8} true;
  assume {:verifier.code 0} true;
  /* br label %48, !dbg !195, !psr.id !196, !verifier.code !62 */
  $i48 := 0;
  goto $bb5;
$bb4:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 104, 46} true;
  assume {:verifier.code 0} true;
  /* %20 = add i32 %.01, 1, !dbg !107, !psr.id !108, !verifier.code !62 */
  $i17 := $add.i32($i6, 1);
  /* call void @llvm.dbg.value(metadata i32 %20, metadata !2915, metadata !DIExpression()), !dbg !2917, !psr.id !2946, !verifier.code !64 */
  call {:cexpr "_i"} boogie_si_record_i32($i17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 104, 3} true;
  assume {:verifier.code 0} true;
  /* br label %7, !dbg !110, !llvm.loop !111, !psr.id !114, !verifier.code !62 */
  $i6 := $i17;
  goto $bb1;
$bb5:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.0 = phi i32 [ 0, %21 ], [ %72, %71 ], !dbg !193, !psr.id !197, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.0, metadata !3027, metadata !DIExpression()), !dbg !3029, !psr.id !3034, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 132, 37} true;
  assume {:verifier.code 0} true;
  /* %49 = icmp ult i32 %.0, 251, !dbg !199, !psr.id !201, !verifier.code !62 */
  $i49 := $ult.i32($i48, 251);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 132, 3} true;
  assume {:verifier.code 0} true;
  /* br i1 %49, label %50, label %73, !dbg !202, !psr.id !203, !verifier.code !62 */
  assume {:branchcond $i49} true;
  goto $bb6, $bb7;
$bb6:
  assume ($i49 == 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 134, 27} true;
  assume {:verifier.code 0} true;
  /* %51 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 0, !dbg !204, !psr.id !206, !verifier.code !62 */
  $p50 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 8));
  /* call void @llvm.dbg.value(metadata i64* %51, metadata !3043, metadata !DIExpression()), !dbg !3044, !psr.id !3045, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 135, 23} true;
  assume {:verifier.code 0} true;
  /* %52 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 0, !dbg !210, !psr.id !211, !verifier.code !62 */
  $p51 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(0, 8));
  /* %53 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 40 */
  $p52 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(40, 8));
  /* call void @llvm.dbg.value(metadata i64* %53, metadata !3048, metadata !DIExpression()), !dbg !3044, !psr.id !3049, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %51, metadata !3050, metadata !DIExpression()), !dbg !3044, !psr.id !3051, !verifier.code !64 */
  /* %54 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 10 */
  $p53 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(10, 8));
  /* call void @llvm.dbg.value(metadata i64* %54, metadata !3052, metadata !DIExpression()), !dbg !3044, !psr.id !3053, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 140, 38} true;
  assume {:verifier.code 0} true;
  /* %55 = sub i32 253, %.0, !dbg !218, !psr.id !219, !verifier.code !62 */
  $i54 := $sub.i32(253, $i48);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 141, 7} true;
  assume {:verifier.code 0} true;
  /* %56 = udiv i32 %55, 8, !dbg !220, !psr.id !221, !verifier.code !62 */
  $i55 := $udiv.i32($i54, 8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 140, 18} true;
  assume {:verifier.code 0} true;
  /* %57 = zext i32 %56 to i64, !dbg !222, !psr.id !223, !verifier.code !62 */
  $i56 := $zext.i32.i64($i55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 140, 18} true;
  assume {:verifier.code 0} true;
  assume {:PointTainted} true;
  /* %58 = getelementptr inbounds i8, i8* %1, i64 %57, !dbg !222, !psr.id !224, !PointTainted !225, !verifier.code !62 */
  $p57 := $add.ref($p1, $mul.ref($i56, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 140, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %59 = load i8, i8* %58, align 1, !dbg !222, !psr.id !226, !ValueTainted !227, !verifier.code !62 */
  $i58 := $load.i8($M.224, $p57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 140, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %60 = zext i8 %59 to i32, !dbg !222, !psr.id !228, !ValueTainted !227, !verifier.code !62 */
  $i59 := $zext.i8.i32($i58);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 142, 26} true;
  assume {:verifier.code 0} true;
  /* %61 = sub i32 253, %.0, !dbg !229, !psr.id !230, !verifier.code !62 */
  $i60 := $sub.i32(253, $i48);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 142, 31} true;
  assume {:verifier.code 0} true;
  /* %62 = urem i32 %61, 8, !dbg !231, !psr.id !232, !verifier.code !62 */
  $i61 := $urem.i32($i60, 8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 142, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %63 = ashr i32 %60, %62, !dbg !233, !psr.id !234, !ValueTainted !227, !verifier.code !62 */
  $i62 := $ashr.i32($i59, $i61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 143, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %64 = and i32 %63, 1, !dbg !235, !psr.id !236, !ValueTainted !227, !verifier.code !62 */
  $i63 := $and.i32($i62, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 140, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %65 = sext i32 %64 to i64, !dbg !237, !psr.id !238, !ValueTainted !227, !verifier.code !62 */
  $i64 := $sext.i32.i64($i63);
  /* call void @llvm.dbg.value(metadata i64 %65, metadata !3073, metadata !DIExpression()), !dbg !3044, !psr.id !3074, !verifier.code !64 */
  call {:cexpr "bit"} boogie_si_record_i64($i64);
  /* %66 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 40 */
  $p65 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(40, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 144, 19} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %67 = load i64, i64* %66, align 8, !dbg !241, !psr.id !242, !ValueTainted !227, !verifier.code !62 */
  $i66 := $load.i64($M.0, $p65);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 144, 29} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %68 = xor i64 %67, %65, !dbg !243, !psr.id !244, !ValueTainted !227, !verifier.code !62 */
  $i67 := $xor.i64($i66, $i64);
  /* call void @llvm.dbg.value(metadata i64 %68, metadata !3079, metadata !DIExpression()), !dbg !3044, !psr.id !3080, !verifier.code !64 */
  call {:cexpr "sw"} boogie_si_record_i64($i67);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 145, 5} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_cswap2(i64 %68, i64* %51, i64* %54), !dbg !247, !psr.id !248, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_cswap2($i67, $p50, $p53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 146, 43} true;
  assume {:verifier.code 0} true;
  /* %69 = getelementptr inbounds [10 x i128], [10 x i128]* %4, i64 0, i64 0, !dbg !249, !psr.id !250, !verifier.code !62 */
  $p68 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 16));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 146, 5} true;
  assume {:verifier.code 0} true;
  /* call void @point_add_and_double(i64* %2, i64* %51, i128* %69), !dbg !251, !psr.id !252, !verifier.code !62 */
  call point_add_and_double($p2, $p50, $p68);
  /* %70 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 40 */
  $p69 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(40, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 147, 15} true;
  assume {:verifier.code 0} true;
  /* store i64 %65, i64* %70, align 8, !dbg !253, !psr.id !254, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p69, $i64);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 148, 3} true;
  assume {:verifier.code 0} true;
  /* br label %71, !dbg !255, !psr.id !256, !verifier.code !62 */
  goto $bb8;
$bb7:
  assume !(($i49 == 1));
  /* %74 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 40 */
  $p71 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(40, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 149, 17} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %75 = load i64, i64* %74, align 8, !dbg !264, !psr.id !265, !ValueTainted !227, !verifier.code !62 */
  $i72 := $load.i64($M.0, $p71);
  /* call void @llvm.dbg.value(metadata i64 %75, metadata !3100, metadata !DIExpression()), !dbg !2905, !psr.id !3101, !verifier.code !64 */
  call {:cexpr "sw"} boogie_si_record_i64($i72);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 150, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_cswap2(i64 %75, i64* %41, i64* %43), !dbg !268, !psr.id !269, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_cswap2($i72, $p41, $p43);
  /* call void @llvm.dbg.value(metadata i64* %39, metadata !3104, metadata !DIExpression()), !dbg !2905, !psr.id !3105, !verifier.code !64 */
  /* %76 = getelementptr inbounds [41 x i64], [41 x i64]* %6, i64 0, i64 20 */
  $p73 := $add.ref($add.ref($p5, $mul.ref(0, 328)), $mul.ref(20, 8));
  /* call void @llvm.dbg.value(metadata i64* %76, metadata !3106, metadata !DIExpression()), !dbg !2905, !psr.id !3107, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 153, 28} true;
  assume {:verifier.code 0} true;
  /* %77 = getelementptr inbounds [10 x i128], [10 x i128]* %4, i64 0, i64 0, !dbg !274, !psr.id !275, !verifier.code !62 */
  $p74 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 16));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 153, 3} true;
  assume {:verifier.code 0} true;
  /* call void @point_double(i64* %39, i64* %76, i128* %77), !dbg !276, !psr.id !277, !verifier.code !62 */
  call point_double($p39, $p73, $p74);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 154, 28} true;
  assume {:verifier.code 0} true;
  /* %78 = getelementptr inbounds [10 x i128], [10 x i128]* %4, i64 0, i64 0, !dbg !278, !psr.id !279, !verifier.code !62 */
  $p75 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 16));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 154, 3} true;
  assume {:verifier.code 0} true;
  /* call void @point_double(i64* %39, i64* %76, i128* %78), !dbg !280, !psr.id !281, !verifier.code !62 */
  call point_double($p39, $p73, $p75);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 155, 28} true;
  assume {:verifier.code 0} true;
  /* %79 = getelementptr inbounds [10 x i128], [10 x i128]* %4, i64 0, i64 0, !dbg !282, !psr.id !283, !verifier.code !62 */
  $p76 := $add.ref($add.ref($p3, $mul.ref(0, 160)), $mul.ref(0, 16));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 155, 3} true;
  assume {:verifier.code 0} true;
  /* call void @point_double(i64* %39, i64* %76, i128* %79), !dbg !284, !psr.id !285, !verifier.code !62 */
  call point_double($p39, $p73, $p76);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 156, 3} true;
  assume {:verifier.code 0} true;
  /* %80 = bitcast i64* %0 to i8*, !dbg !286, !psr.id !287, !verifier.code !62 */
  $p77 := $bitcast.ref.ref($p0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 156, 3} true;
  assume {:verifier.code 0} true;
  /* %81 = bitcast i64* %23 to i8*, !dbg !286, !psr.id !288, !verifier.code !62 */
  $p78 := $bitcast.ref.ref($p19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 156, 3} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 80, i1 false), !dbg !286, !psr.id !289, !verifier.code !62 */
  call $M.0 := $memcpy.i8($M.0, $M.0, $p77, $p78, 80, false);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 157, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !290, !psr.id !291, !verifier.code !62 */
  $exn := false;
  return;
$bb8:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 132, 56} true;
  assume {:verifier.code 0} true;
  /* %72 = add i32 %.0, 1, !dbg !257, !psr.id !258, !verifier.code !62 */
  $i70 := $add.i32($i48, 1);
  /* call void @llvm.dbg.value(metadata i32 %72, metadata !3027, metadata !DIExpression()), !dbg !3029, !psr.id !3093, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i70);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 132, 3} true;
  assume {:verifier.code 0} true;
  /* br label %48, !dbg !260, !llvm.loop !261, !psr.id !263, !verifier.code !62 */
  $i48 := $i70;
  goto $bb5;
}
const encode_point: ref;
axiom (encode_point == $sub.ref(0, 17544));
procedure {:inline 1} encode_point($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i32;
  var $i10: i1;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $i17: i128;
  var $i18: i64;
  var $p19: ref;
  var $i20: i32;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $i28: i32;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
  var $i33: i64;
  var $i34: i64;
  var $i35: i32;
  var $i36: i32;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i32;
  var $i44: i32;
  var $i45: i64;
  var $p46: ref;
  var $i47: i64;
  var $p48: ref;
  var $i49: i64;
  var $i50: i64;
  var $i51: i32;
  var $i52: i32;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $i58: i64;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 218, 19} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %3 = alloca [5 x i64], align 16, !psr.id !61, !verifier.code !62 */
  call $p2 := $alloc($mul.ref(40, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %4 = alloca [4 x i64], align 16, !psr.id !63, !verifier.code !62 */
  call $p3 := $alloc($mul.ref(32, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %5 = alloca [10 x i128], align 16, !psr.id !64, !verifier.code !62 */
  call $p4 := $alloc($mul.ref(160, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %6 = alloca i128, align 16, !psr.id !65, !verifier.code !62 */
  call $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i8* %0, metadata !3133, metadata !DIExpression()), !dbg !3134, !psr.id !3135, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !3136, metadata !DIExpression()), !dbg !3134, !psr.id !3137, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !3138, metadata !DIExpression()), !dbg !3134, !psr.id !3139, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 218, 19} true;
  assume {:verifier.code 0} true;
  /* %7 = getelementptr inbounds i64, i64* %1, i64 5, !dbg !73, !psr.id !74, !verifier.code !62 */
  $p6 := $add.ref($p1, $mul.ref(5, 8));
  /* call void @llvm.dbg.value(metadata i64* %7, metadata !3142, metadata !DIExpression()), !dbg !3134, !psr.id !3143, !verifier.code !64 */
  /* call void @llvm.dbg.declare(metadata [5 x i64]* %3, metadata !3144, metadata !DIExpression()), !dbg !3148, !psr.id !3149, !verifier.code !64 */
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 219, 12} true;
  assume {:verifier.code 0} true;
  /* %8 = bitcast [5 x i64]* %3 to i8*, !dbg !81, !psr.id !83, !verifier.code !62 */
  $p7 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 219, 12} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.memset.p0i8.i64(i8* align 16 %8, i8 0, i64 40, i1 false), !dbg !81, !psr.id !84, !verifier.code !62 */
  call $M.0 := $memset.i8($M.0, $p7, 0, 40, false);
  /* call void @llvm.dbg.declare(metadata [4 x i64]* %4, metadata !3152, metadata !DIExpression()), !dbg !3153, !psr.id !3154, !verifier.code !64 */
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 220, 12} true;
  assume {:verifier.code 0} true;
  /* %9 = bitcast [4 x i64]* %4 to i8*, !dbg !89, !psr.id !91, !verifier.code !62 */
  $p8 := $bitcast.ref.ref($p3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 220, 12} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.memset.p0i8.i64(i8* align 16 %9, i8 0, i64 32, i1 false), !dbg !89, !psr.id !92, !verifier.code !62 */
  call $M.225 := $memset.i8($M.225, $p8, 0, 32, false);
  /* call void @llvm.dbg.declare(metadata [10 x i128]* %5, metadata !3157, metadata !DIExpression()), !dbg !3158, !psr.id !3159, !verifier.code !64 */
  assume true;
  /* call void @llvm.dbg.value(metadata i32 0, metadata !3160, metadata !DIExpression()), !dbg !3162, !psr.id !3163, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 222, 8} true;
  assume {:verifier.code 0} true;
  /* br label %10, !dbg !103, !psr.id !104, !verifier.code !62 */
  $i9 := 0;
  goto $bb1;
$bb1:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.0 = phi i32 [ 0, %2 ], [ %23, %22 ], !dbg !101, !psr.id !105, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.0, metadata !3160, metadata !DIExpression()), !dbg !3162, !psr.id !3167, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 222, 29} true;
  assume {:verifier.code 0} true;
  /* %11 = icmp ult i32 %.0, 10, !dbg !107, !psr.id !109, !verifier.code !62 */
  $i10 := $ult.i32($i9, 10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 222, 3} true;
  assume {:verifier.code 0} true;
  /* br i1 %11, label %12, label %24, !dbg !110, !psr.id !111, !verifier.code !62 */
  assume {:branchcond $i10} true;
  goto $bb2, $bb3;
$bb2:
  assume ($i10 == 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  /* %13 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 0), !dbg !112, !psr.id !113, !verifier.code !62 */
  call $p11 := FStar_UInt128_uint64_to_uint128(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  /* %14 = bitcast i128* %6 to { i64, i64 }*, !dbg !112, !psr.id !114, !verifier.code !62 */
  $p12 := $bitcast.ref.ref($p5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  /* %15 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 0, !dbg !112, !psr.id !115, !verifier.code !62 */
  $p13 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  /* %16 = extractvalue { i64, i64 } %13, 0, !dbg !112, !psr.id !116, !verifier.code !62 */
  $i14 := $extractvalue.i64($p11, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  /* store i64 %16, i64* %15, align 16, !dbg !112, !psr.id !117, !verifier.code !62 */
  $M.226 := $store.i64($M.226, $p13, $i14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  /* %17 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %14, i32 0, i32 1, !dbg !112, !psr.id !118, !verifier.code !62 */
  $p15 := $add.ref($add.ref($p12, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  /* %18 = extractvalue { i64, i64 } %13, 1, !dbg !112, !psr.id !119, !verifier.code !62 */
  $i16 := $extractvalue.i64($p11, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  /* store i64 %18, i64* %17, align 8, !dbg !112, !psr.id !120, !verifier.code !62 */
  $M.226 := $store.i64($M.226, $p15, $i16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  /* %19 = load i128, i128* %6, align 16, !dbg !112, !psr.id !121, !verifier.code !62 */
  $i17 := $load.i128($M.226, $p5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 5} true;
  assume {:verifier.code 0} true;
  /* %20 = zext i32 %.0 to i64, !dbg !122, !psr.id !123, !verifier.code !62 */
  $i18 := $zext.i32.i64($i9);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 5} true;
  assume {:verifier.code 0} true;
  /* %21 = getelementptr inbounds [10 x i128], [10 x i128]* %5, i64 0, i64 %20, !dbg !122, !psr.id !124, !verifier.code !62 */
  $p19 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref($i18, 16));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 15} true;
  assume {:verifier.code 0} true;
  /* store i128 %19, i128* %21, align 16, !dbg !125, !psr.id !126, !verifier.code !62 */
  $M.223 := $store.i128($M.223, $p19, $i17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 5} true;
  assume {:verifier.code 0} true;
  /* br label %22, !dbg !122, !psr.id !127, !verifier.code !62 */
  goto $bb4;
$bb3:
  assume !(($i10 == 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 224, 27} true;
  assume {:verifier.code 0} true;
  /* %25 = getelementptr inbounds [5 x i64], [5 x i64]* %3, i64 0, i64 0, !dbg !136, !psr.id !137, !verifier.code !62 */
  $p21 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 224, 35} true;
  assume {:verifier.code 0} true;
  /* %26 = getelementptr inbounds [10 x i128], [10 x i128]* %5, i64 0, i64 0, !dbg !138, !psr.id !139, !verifier.code !62 */
  $p22 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(0, 16));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 224, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_finv(i64* %25, i64* %7, i128* %26), !dbg !140, !psr.id !141, !verifier.code !62 */
  call Hacl_Curve25519_51_finv($p21, $p6, $p22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 225, 37} true;
  assume {:verifier.code 0} true;
  /* %27 = getelementptr inbounds [5 x i64], [5 x i64]* %3, i64 0, i64 0, !dbg !142, !psr.id !143, !verifier.code !62 */
  $p23 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 225, 42} true;
  assume {:verifier.code 0} true;
  /* %28 = getelementptr inbounds [5 x i64], [5 x i64]* %3, i64 0, i64 0, !dbg !144, !psr.id !145, !verifier.code !62 */
  $p24 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 225, 50} true;
  assume {:verifier.code 0} true;
  /* %29 = getelementptr inbounds [10 x i128], [10 x i128]* %5, i64 0, i64 0, !dbg !146, !psr.id !147, !verifier.code !62 */
  $p25 := $add.ref($add.ref($p4, $mul.ref(0, 160)), $mul.ref(0, 16));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 225, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %27, i64* %28, i64* %1, i128* %29), !dbg !148, !psr.id !149, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_fmul($p23, $p24, $p1, $p25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 226, 44} true;
  assume {:verifier.code 0} true;
  /* %30 = getelementptr inbounds [4 x i64], [4 x i64]* %4, i64 0, i64 0, !dbg !150, !psr.id !151, !verifier.code !62 */
  $p26 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 226, 50} true;
  assume {:verifier.code 0} true;
  /* %31 = getelementptr inbounds [5 x i64], [5 x i64]* %3, i64 0, i64 0, !dbg !152, !psr.id !153, !verifier.code !62 */
  $p27 := $add.ref($add.ref($p2, $mul.ref(0, 40)), $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 226, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_store_felem(i64* %30, i64* %31), !dbg !154, !psr.id !155, !verifier.code !62 */
  call Hacl_Impl_Curve25519_Field51_store_felem($p26, $p27);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* br label %32, !dbg !156, !psr.id !157, !verifier.code !62 */
  goto $bb5;
$bb4:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 222, 46} true;
  assume {:verifier.code 0} true;
  /* %23 = add i32 %.0, 1, !dbg !128, !psr.id !129, !verifier.code !62 */
  $i20 := $add.i32($i9, 1);
  /* call void @llvm.dbg.value(metadata i32 %23, metadata !3160, metadata !DIExpression()), !dbg !3162, !psr.id !3191, !verifier.code !64 */
  call {:cexpr "_i"} boogie_si_record_i32($i20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 222, 3} true;
  assume {:verifier.code 0} true;
  /* br label %10, !dbg !131, !llvm.loop !132, !psr.id !135, !verifier.code !62 */
  $i9 := $i20;
  goto $bb1;
$bb5:
  /* call void @llvm.dbg.value(metadata i32 0, metadata !3218, metadata !DIExpression()), !dbg !3220, !psr.id !3221, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %33 = mul i32 0, 8, !dbg !162, !psr.id !164, !verifier.code !62 */
  $i28 := $mul.i32(0, 8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %34 = zext i32 %33 to i64, !dbg !162, !psr.id !165, !verifier.code !62 */
  $i29 := $zext.i32.i64($i28);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %35 = getelementptr inbounds i8, i8* %0, i64 %34, !dbg !162, !psr.id !166, !verifier.code !62 */
  $p30 := $add.ref($p0, $mul.ref($i29, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %36 = zext i32 0 to i64, !dbg !162, !psr.id !167, !verifier.code !62 */
  $i31 := $zext.i32.i64(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %37 = getelementptr inbounds [4 x i64], [4 x i64]* %4, i64 0, i64 %36, !dbg !162, !psr.id !168, !verifier.code !62 */
  $p32 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i31, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %38 = load i64, i64* %37, align 8, !dbg !162, !psr.id !169, !verifier.code !62 */
  $i33 := $load.i64($M.225, $p32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %39 = call i64 @__uint64_identity(i64 %38), !dbg !162, !psr.id !170, !verifier.code !62 */
  call $i34 := __uint64_identity($i33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* call void @store64(i8* %35, i64 %39), !dbg !162, !psr.id !171, !verifier.code !62 */
  call store64($p30, $i34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %40 = add i32 0, 1, !dbg !162, !psr.id !172, !verifier.code !62 */
  $i35 := $add.i32(0, 1);
  /* call void @llvm.dbg.value(metadata i32 %40, metadata !3218, metadata !DIExpression()), !dbg !3220, !psr.id !3233, !verifier.code !64 */
  call {:cexpr "i0"} boogie_si_record_i32($i35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %41 = mul i32 %40, 8, !dbg !174, !psr.id !176, !verifier.code !62 */
  $i36 := $mul.i32($i35, 8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %42 = zext i32 %41 to i64, !dbg !174, !psr.id !177, !verifier.code !62 */
  $i37 := $zext.i32.i64($i36);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %43 = getelementptr inbounds i8, i8* %0, i64 %42, !dbg !174, !psr.id !178, !verifier.code !62 */
  $p38 := $add.ref($p0, $mul.ref($i37, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %44 = zext i32 %40 to i64, !dbg !174, !psr.id !179, !verifier.code !62 */
  $i39 := $zext.i32.i64($i35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %45 = getelementptr inbounds [4 x i64], [4 x i64]* %4, i64 0, i64 %44, !dbg !174, !psr.id !180, !verifier.code !62 */
  $p40 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i39, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %46 = load i64, i64* %45, align 8, !dbg !174, !psr.id !181, !verifier.code !62 */
  $i41 := $load.i64($M.225, $p40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %47 = call i64 @__uint64_identity(i64 %46), !dbg !174, !psr.id !182, !verifier.code !62 */
  call $i42 := __uint64_identity($i41);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* call void @store64(i8* %43, i64 %47), !dbg !174, !psr.id !183, !verifier.code !62 */
  call store64($p38, $i42);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %48 = add i32 %40, 1, !dbg !174, !psr.id !184, !verifier.code !62 */
  $i43 := $add.i32($i35, 1);
  /* call void @llvm.dbg.value(metadata i32 %48, metadata !3218, metadata !DIExpression()), !dbg !3220, !psr.id !3245, !verifier.code !64 */
  call {:cexpr "i0"} boogie_si_record_i32($i43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %49 = mul i32 %48, 8, !dbg !186, !psr.id !188, !verifier.code !62 */
  $i44 := $mul.i32($i43, 8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %50 = zext i32 %49 to i64, !dbg !186, !psr.id !189, !verifier.code !62 */
  $i45 := $zext.i32.i64($i44);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %51 = getelementptr inbounds i8, i8* %0, i64 %50, !dbg !186, !psr.id !190, !verifier.code !62 */
  $p46 := $add.ref($p0, $mul.ref($i45, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %52 = zext i32 %48 to i64, !dbg !186, !psr.id !191, !verifier.code !62 */
  $i47 := $zext.i32.i64($i43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %53 = getelementptr inbounds [4 x i64], [4 x i64]* %4, i64 0, i64 %52, !dbg !186, !psr.id !192, !verifier.code !62 */
  $p48 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i47, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %54 = load i64, i64* %53, align 8, !dbg !186, !psr.id !193, !verifier.code !62 */
  $i49 := $load.i64($M.225, $p48);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %55 = call i64 @__uint64_identity(i64 %54), !dbg !186, !psr.id !194, !verifier.code !62 */
  call $i50 := __uint64_identity($i49);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* call void @store64(i8* %51, i64 %55), !dbg !186, !psr.id !195, !verifier.code !62 */
  call store64($p46, $i50);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %56 = add i32 %48, 1, !dbg !186, !psr.id !196, !verifier.code !62 */
  $i51 := $add.i32($i43, 1);
  /* call void @llvm.dbg.value(metadata i32 %56, metadata !3218, metadata !DIExpression()), !dbg !3220, !psr.id !3257, !verifier.code !64 */
  call {:cexpr "i0"} boogie_si_record_i32($i51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %57 = mul i32 %56, 8, !dbg !198, !psr.id !200, !verifier.code !62 */
  $i52 := $mul.i32($i51, 8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %58 = zext i32 %57 to i64, !dbg !198, !psr.id !201, !verifier.code !62 */
  $i53 := $zext.i32.i64($i52);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %59 = getelementptr inbounds i8, i8* %0, i64 %58, !dbg !198, !psr.id !202, !verifier.code !62 */
  $p54 := $add.ref($p0, $mul.ref($i53, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %60 = zext i32 %56 to i64, !dbg !198, !psr.id !203, !verifier.code !62 */
  $i55 := $zext.i32.i64($i51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %61 = getelementptr inbounds [4 x i64], [4 x i64]* %4, i64 0, i64 %60, !dbg !198, !psr.id !204, !verifier.code !62 */
  $p56 := $add.ref($add.ref($p3, $mul.ref(0, 32)), $mul.ref($i55, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %62 = load i64, i64* %61, align 8, !dbg !198, !psr.id !205, !verifier.code !62 */
  $i57 := $load.i64($M.225, $p56);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* %63 = call i64 @__uint64_identity(i64 %62), !dbg !198, !psr.id !206, !verifier.code !62 */
  call $i58 := __uint64_identity($i57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* call void @store64(i8* %59, i64 %63), !dbg !198, !psr.id !207, !verifier.code !62 */
  call store64($p54, $i58);
  /* call void @llvm.dbg.value(metadata i32 %56, metadata !3218, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !3220, !psr.id !3268, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  /* br label %64, !dbg !209, !psr.id !210, !verifier.code !62 */
  goto $bb6;
$bb6:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 232, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !211, !psr.id !212, !verifier.code !62 */
  $exn := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_store_felem: ref;
axiom (Hacl_Impl_Curve25519_Field51_store_felem == $sub.ref(0, 18576));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_store_felem($p0: ref, $p1: ref)
{
  var $p2: ref;
  var $i3: i64;
  var $p4: ref;
  var $i5: i64;
  var $p6: ref;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $i12: i64;
  var $i13: i64;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $i17: i64;
  var $i18: i64;
  var $i19: i64;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $i25: i64;
  var $i26: i64;
  var $i27: i64;
  var $i28: i64;
  var $i29: i64;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $i34: i64;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $i38: i64;
  var $i39: i64;
  var $i40: i64;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $i44: i64;
  var $i45: i64;
  var $i46: i64;
  var $i47: i64;
  var $i48: i64;
  var $i49: i64;
  var $i50: i64;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $i55: i64;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $i59: i64;
  var $i60: i64;
  var $i61: i64;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 603, 17} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !3276, metadata !DIExpression()), !dbg !3277, !psr.id !3278, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !3279, metadata !DIExpression()), !dbg !3277, !psr.id !3280, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 603, 17} true;
  assume {:verifier.code 0} true;
  /* %3 = getelementptr inbounds i64, i64* %1, i64 0, !dbg !67, !psr.id !68, !verifier.code !64 */
  $p2 := $add.ref($p1, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 603, 17} true;
  assume {:verifier.code 0} true;
  /* %4 = load i64, i64* %3, align 8, !dbg !67, !psr.id !69, !verifier.code !64 */
  $i3 := $load.i64($M.0, $p2);
  /* call void @llvm.dbg.value(metadata i64 %4, metadata !3284, metadata !DIExpression()), !dbg !3277, !psr.id !3285, !verifier.code !64 */
  call {:cexpr "f0"} boogie_si_record_i64($i3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 604, 17} true;
  assume {:verifier.code 0} true;
  /* %5 = getelementptr inbounds i64, i64* %1, i64 1, !dbg !72, !psr.id !73, !verifier.code !64 */
  $p4 := $add.ref($p1, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 604, 17} true;
  assume {:verifier.code 0} true;
  /* %6 = load i64, i64* %5, align 8, !dbg !72, !psr.id !74, !verifier.code !64 */
  $i5 := $load.i64($M.0, $p4);
  /* call void @llvm.dbg.value(metadata i64 %6, metadata !3289, metadata !DIExpression()), !dbg !3277, !psr.id !3290, !verifier.code !64 */
  call {:cexpr "f1"} boogie_si_record_i64($i5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 605, 17} true;
  assume {:verifier.code 0} true;
  /* %7 = getelementptr inbounds i64, i64* %1, i64 2, !dbg !77, !psr.id !78, !verifier.code !64 */
  $p6 := $add.ref($p1, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 605, 17} true;
  assume {:verifier.code 0} true;
  /* %8 = load i64, i64* %7, align 8, !dbg !77, !psr.id !79, !verifier.code !64 */
  $i7 := $load.i64($M.0, $p6);
  /* call void @llvm.dbg.value(metadata i64 %8, metadata !3294, metadata !DIExpression()), !dbg !3277, !psr.id !3295, !verifier.code !64 */
  call {:cexpr "f2"} boogie_si_record_i64($i7);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 606, 17} true;
  assume {:verifier.code 0} true;
  /* %9 = getelementptr inbounds i64, i64* %1, i64 3, !dbg !82, !psr.id !83, !verifier.code !64 */
  $p8 := $add.ref($p1, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 606, 17} true;
  assume {:verifier.code 0} true;
  /* %10 = load i64, i64* %9, align 8, !dbg !82, !psr.id !84, !verifier.code !64 */
  $i9 := $load.i64($M.0, $p8);
  /* call void @llvm.dbg.value(metadata i64 %10, metadata !3299, metadata !DIExpression()), !dbg !3277, !psr.id !3300, !verifier.code !64 */
  call {:cexpr "f3"} boogie_si_record_i64($i9);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 607, 17} true;
  assume {:verifier.code 0} true;
  /* %11 = getelementptr inbounds i64, i64* %1, i64 4, !dbg !87, !psr.id !88, !verifier.code !64 */
  $p10 := $add.ref($p1, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 607, 17} true;
  assume {:verifier.code 0} true;
  /* %12 = load i64, i64* %11, align 8, !dbg !87, !psr.id !89, !verifier.code !64 */
  $i11 := $load.i64($M.0, $p10);
  /* call void @llvm.dbg.value(metadata i64 %12, metadata !3304, metadata !DIExpression()), !dbg !3277, !psr.id !3305, !verifier.code !64 */
  call {:cexpr "f4"} boogie_si_record_i64($i11);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 608, 20} true;
  assume {:verifier.code 0} true;
  /* %13 = add i64 %4, 0, !dbg !92, !psr.id !93, !verifier.code !64 */
  $i12 := $add.i64($i3, 0);
  /* call void @llvm.dbg.value(metadata i64 %13, metadata !3308, metadata !DIExpression()), !dbg !3277, !psr.id !3309, !verifier.code !64 */
  call {:cexpr "l_"} boogie_si_record_i64($i12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 609, 22} true;
  assume {:verifier.code 0} true;
  /* %14 = and i64 %13, 2251799813685247, !dbg !96, !psr.id !97, !verifier.code !64 */
  $i13 := $and.i64($i12, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %14, metadata !3312, metadata !DIExpression()), !dbg !3277, !psr.id !3313, !verifier.code !64 */
  call {:cexpr "tmp0"} boogie_si_record_i64($i13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 610, 20} true;
  assume {:verifier.code 0} true;
  /* %15 = lshr i64 %13, 51, !dbg !100, !psr.id !101, !verifier.code !64 */
  $i14 := $lshr.i64($i12, 51);
  /* call void @llvm.dbg.value(metadata i64 %15, metadata !3316, metadata !DIExpression()), !dbg !3277, !psr.id !3317, !verifier.code !64 */
  call {:cexpr "c0"} boogie_si_record_i64($i14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 611, 21} true;
  assume {:verifier.code 0} true;
  /* %16 = add i64 %6, %15, !dbg !104, !psr.id !105, !verifier.code !64 */
  $i15 := $add.i64($i5, $i14);
  /* call void @llvm.dbg.value(metadata i64 %16, metadata !3320, metadata !DIExpression()), !dbg !3277, !psr.id !3321, !verifier.code !64 */
  call {:cexpr "l_0"} boogie_si_record_i64($i15);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 612, 23} true;
  assume {:verifier.code 0} true;
  /* %17 = and i64 %16, 2251799813685247, !dbg !108, !psr.id !109, !verifier.code !64 */
  $i16 := $and.i64($i15, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %17, metadata !3324, metadata !DIExpression()), !dbg !3277, !psr.id !3325, !verifier.code !64 */
  call {:cexpr "tmp1"} boogie_si_record_i64($i16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 613, 21} true;
  assume {:verifier.code 0} true;
  /* %18 = lshr i64 %16, 51, !dbg !112, !psr.id !113, !verifier.code !64 */
  $i17 := $lshr.i64($i15, 51);
  /* call void @llvm.dbg.value(metadata i64 %18, metadata !3328, metadata !DIExpression()), !dbg !3277, !psr.id !3329, !verifier.code !64 */
  call {:cexpr "c1"} boogie_si_record_i64($i17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 614, 21} true;
  assume {:verifier.code 0} true;
  /* %19 = add i64 %8, %18, !dbg !116, !psr.id !117, !verifier.code !64 */
  $i18 := $add.i64($i7, $i17);
  /* call void @llvm.dbg.value(metadata i64 %19, metadata !3332, metadata !DIExpression()), !dbg !3277, !psr.id !3333, !verifier.code !64 */
  call {:cexpr "l_1"} boogie_si_record_i64($i18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 615, 23} true;
  assume {:verifier.code 0} true;
  /* %20 = and i64 %19, 2251799813685247, !dbg !120, !psr.id !121, !verifier.code !64 */
  $i19 := $and.i64($i18, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %20, metadata !3336, metadata !DIExpression()), !dbg !3277, !psr.id !3337, !verifier.code !64 */
  call {:cexpr "tmp2"} boogie_si_record_i64($i19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 616, 21} true;
  assume {:verifier.code 0} true;
  /* %21 = lshr i64 %19, 51, !dbg !124, !psr.id !125, !verifier.code !64 */
  $i20 := $lshr.i64($i18, 51);
  /* call void @llvm.dbg.value(metadata i64 %21, metadata !3340, metadata !DIExpression()), !dbg !3277, !psr.id !3341, !verifier.code !64 */
  call {:cexpr "c2"} boogie_si_record_i64($i20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 617, 21} true;
  assume {:verifier.code 0} true;
  /* %22 = add i64 %10, %21, !dbg !128, !psr.id !129, !verifier.code !64 */
  $i21 := $add.i64($i9, $i20);
  /* call void @llvm.dbg.value(metadata i64 %22, metadata !3344, metadata !DIExpression()), !dbg !3277, !psr.id !3345, !verifier.code !64 */
  call {:cexpr "l_2"} boogie_si_record_i64($i21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 618, 23} true;
  assume {:verifier.code 0} true;
  /* %23 = and i64 %22, 2251799813685247, !dbg !132, !psr.id !133, !verifier.code !64 */
  $i22 := $and.i64($i21, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %23, metadata !3348, metadata !DIExpression()), !dbg !3277, !psr.id !3349, !verifier.code !64 */
  call {:cexpr "tmp3"} boogie_si_record_i64($i22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 619, 21} true;
  assume {:verifier.code 0} true;
  /* %24 = lshr i64 %22, 51, !dbg !136, !psr.id !137, !verifier.code !64 */
  $i23 := $lshr.i64($i21, 51);
  /* call void @llvm.dbg.value(metadata i64 %24, metadata !3352, metadata !DIExpression()), !dbg !3277, !psr.id !3353, !verifier.code !64 */
  call {:cexpr "c3"} boogie_si_record_i64($i23);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 620, 21} true;
  assume {:verifier.code 0} true;
  /* %25 = add i64 %12, %24, !dbg !140, !psr.id !141, !verifier.code !64 */
  $i24 := $add.i64($i11, $i23);
  /* call void @llvm.dbg.value(metadata i64 %25, metadata !3356, metadata !DIExpression()), !dbg !3277, !psr.id !3357, !verifier.code !64 */
  call {:cexpr "l_3"} boogie_si_record_i64($i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 621, 23} true;
  assume {:verifier.code 0} true;
  /* %26 = and i64 %25, 2251799813685247, !dbg !144, !psr.id !145, !verifier.code !64 */
  $i25 := $and.i64($i24, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %26, metadata !3360, metadata !DIExpression()), !dbg !3277, !psr.id !3361, !verifier.code !64 */
  call {:cexpr "tmp4"} boogie_si_record_i64($i25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 622, 21} true;
  assume {:verifier.code 0} true;
  /* %27 = lshr i64 %25, 51, !dbg !148, !psr.id !149, !verifier.code !64 */
  $i26 := $lshr.i64($i24, 51);
  /* call void @llvm.dbg.value(metadata i64 %27, metadata !3364, metadata !DIExpression()), !dbg !3277, !psr.id !3365, !verifier.code !64 */
  call {:cexpr "c4"} boogie_si_record_i64($i26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 623, 28} true;
  assume {:verifier.code 0} true;
  /* %28 = mul i64 %27, 19, !dbg !152, !psr.id !153, !verifier.code !64 */
  $i27 := $mul.i64($i26, 19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 623, 23} true;
  assume {:verifier.code 0} true;
  /* %29 = add i64 %14, %28, !dbg !154, !psr.id !155, !verifier.code !64 */
  $i28 := $add.i64($i13, $i27);
  /* call void @llvm.dbg.value(metadata i64 %29, metadata !3370, metadata !DIExpression()), !dbg !3277, !psr.id !3371, !verifier.code !64 */
  call {:cexpr "l_4"} boogie_si_record_i64($i28);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 624, 24} true;
  assume {:verifier.code 0} true;
  /* %30 = and i64 %29, 2251799813685247, !dbg !158, !psr.id !159, !verifier.code !64 */
  $i29 := $and.i64($i28, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %30, metadata !3374, metadata !DIExpression()), !dbg !3277, !psr.id !3375, !verifier.code !64 */
  call {:cexpr "tmp0_"} boogie_si_record_i64($i29);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 625, 21} true;
  assume {:verifier.code 0} true;
  /* %31 = lshr i64 %29, 51, !dbg !162, !psr.id !163, !verifier.code !64 */
  $i30 := $lshr.i64($i28, 51);
  /* call void @llvm.dbg.value(metadata i64 %31, metadata !3378, metadata !DIExpression()), !dbg !3277, !psr.id !3379, !verifier.code !64 */
  call {:cexpr "c5"} boogie_si_record_i64($i30);
  /* call void @llvm.dbg.value(metadata i64 %30, metadata !3380, metadata !DIExpression()), !dbg !3277, !psr.id !3381, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 627, 23} true;
  assume {:verifier.code 0} true;
  /* %32 = add i64 %17, %31, !dbg !168, !psr.id !169, !verifier.code !64 */
  $i31 := $add.i64($i16, $i30);
  /* call void @llvm.dbg.value(metadata i64 %32, metadata !3384, metadata !DIExpression()), !dbg !3277, !psr.id !3385, !verifier.code !64 */
  call {:cexpr "f11"} boogie_si_record_i64($i31);
  /* call void @llvm.dbg.value(metadata i64 %20, metadata !3386, metadata !DIExpression()), !dbg !3277, !psr.id !3387, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %23, metadata !3388, metadata !DIExpression()), !dbg !3277, !psr.id !3389, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %26, metadata !3390, metadata !DIExpression()), !dbg !3277, !psr.id !3391, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 631, 17} true;
  assume {:verifier.code 0} true;
  /* %33 = call i64 @FStar_UInt64_gte_mask(i64 %30, i64 2251799813685229), !dbg !178, !psr.id !179, !verifier.code !64 */
  call $i32 := FStar_UInt64_gte_mask($i29, 2251799813685229);
  /* call void @llvm.dbg.value(metadata i64 %33, metadata !3394, metadata !DIExpression()), !dbg !3277, !psr.id !3395, !verifier.code !64 */
  call {:cexpr "m0"} boogie_si_record_i64($i32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 632, 17} true;
  assume {:verifier.code 0} true;
  /* %34 = call i64 @FStar_UInt64_eq_mask(i64 %32, i64 2251799813685247), !dbg !182, !psr.id !183, !verifier.code !64 */
  call $i33 := FStar_UInt64_eq_mask($i31, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %34, metadata !3398, metadata !DIExpression()), !dbg !3277, !psr.id !3399, !verifier.code !64 */
  call {:cexpr "m1"} boogie_si_record_i64($i33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 633, 17} true;
  assume {:verifier.code 0} true;
  /* %35 = call i64 @FStar_UInt64_eq_mask(i64 %20, i64 2251799813685247), !dbg !186, !psr.id !187, !verifier.code !64 */
  call $i34 := FStar_UInt64_eq_mask($i19, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %35, metadata !3402, metadata !DIExpression()), !dbg !3277, !psr.id !3403, !verifier.code !64 */
  call {:cexpr "m2"} boogie_si_record_i64($i34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 634, 17} true;
  assume {:verifier.code 0} true;
  /* %36 = call i64 @FStar_UInt64_eq_mask(i64 %23, i64 2251799813685247), !dbg !190, !psr.id !191, !verifier.code !64 */
  call $i35 := FStar_UInt64_eq_mask($i22, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %36, metadata !3406, metadata !DIExpression()), !dbg !3277, !psr.id !3407, !verifier.code !64 */
  call {:cexpr "m3"} boogie_si_record_i64($i35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 635, 17} true;
  assume {:verifier.code 0} true;
  /* %37 = call i64 @FStar_UInt64_eq_mask(i64 %26, i64 2251799813685247), !dbg !194, !psr.id !195, !verifier.code !64 */
  call $i36 := FStar_UInt64_eq_mask($i25, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %37, metadata !3410, metadata !DIExpression()), !dbg !3277, !psr.id !3411, !verifier.code !64 */
  call {:cexpr "m4"} boogie_si_record_i64($i36);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 636, 25} true;
  assume {:verifier.code 0} true;
  /* %38 = and i64 %33, %34, !dbg !198, !psr.id !199, !verifier.code !64 */
  $i37 := $and.i64($i32, $i33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 636, 31} true;
  assume {:verifier.code 0} true;
  /* %39 = and i64 %38, %35, !dbg !200, !psr.id !201, !verifier.code !64 */
  $i38 := $and.i64($i37, $i34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 636, 37} true;
  assume {:verifier.code 0} true;
  /* %40 = and i64 %39, %36, !dbg !202, !psr.id !203, !verifier.code !64 */
  $i39 := $and.i64($i38, $i35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 636, 43} true;
  assume {:verifier.code 0} true;
  /* %41 = and i64 %40, %37, !dbg !204, !psr.id !205, !verifier.code !64 */
  $i40 := $and.i64($i39, $i36);
  /* call void @llvm.dbg.value(metadata i64 %41, metadata !3420, metadata !DIExpression()), !dbg !3277, !psr.id !3421, !verifier.code !64 */
  call {:cexpr "mask"} boogie_si_record_i64($i40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 637, 30} true;
  assume {:verifier.code 0} true;
  /* %42 = and i64 %41, 2251799813685229, !dbg !208, !psr.id !209, !verifier.code !64 */
  $i41 := $and.i64($i40, 2251799813685229);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 637, 22} true;
  assume {:verifier.code 0} true;
  /* %43 = sub i64 %30, %42, !dbg !210, !psr.id !211, !verifier.code !64 */
  $i42 := $sub.i64($i29, $i41);
  /* call void @llvm.dbg.value(metadata i64 %43, metadata !3426, metadata !DIExpression()), !dbg !3277, !psr.id !3427, !verifier.code !64 */
  call {:cexpr "f0_"} boogie_si_record_i64($i42);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 638, 30} true;
  assume {:verifier.code 0} true;
  /* %44 = and i64 %41, 2251799813685247, !dbg !214, !psr.id !215, !verifier.code !64 */
  $i43 := $and.i64($i40, 2251799813685247);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 638, 22} true;
  assume {:verifier.code 0} true;
  /* %45 = sub i64 %32, %44, !dbg !216, !psr.id !217, !verifier.code !64 */
  $i44 := $sub.i64($i31, $i43);
  /* call void @llvm.dbg.value(metadata i64 %45, metadata !3432, metadata !DIExpression()), !dbg !3277, !psr.id !3433, !verifier.code !64 */
  call {:cexpr "f1_"} boogie_si_record_i64($i44);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 639, 30} true;
  assume {:verifier.code 0} true;
  /* %46 = and i64 %41, 2251799813685247, !dbg !220, !psr.id !221, !verifier.code !64 */
  $i45 := $and.i64($i40, 2251799813685247);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 639, 22} true;
  assume {:verifier.code 0} true;
  /* %47 = sub i64 %20, %46, !dbg !222, !psr.id !223, !verifier.code !64 */
  $i46 := $sub.i64($i19, $i45);
  /* call void @llvm.dbg.value(metadata i64 %47, metadata !3438, metadata !DIExpression()), !dbg !3277, !psr.id !3439, !verifier.code !64 */
  call {:cexpr "f2_"} boogie_si_record_i64($i46);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 640, 30} true;
  assume {:verifier.code 0} true;
  /* %48 = and i64 %41, 2251799813685247, !dbg !226, !psr.id !227, !verifier.code !64 */
  $i47 := $and.i64($i40, 2251799813685247);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 640, 22} true;
  assume {:verifier.code 0} true;
  /* %49 = sub i64 %23, %48, !dbg !228, !psr.id !229, !verifier.code !64 */
  $i48 := $sub.i64($i22, $i47);
  /* call void @llvm.dbg.value(metadata i64 %49, metadata !3444, metadata !DIExpression()), !dbg !3277, !psr.id !3445, !verifier.code !64 */
  call {:cexpr "f3_"} boogie_si_record_i64($i48);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 641, 30} true;
  assume {:verifier.code 0} true;
  /* %50 = and i64 %41, 2251799813685247, !dbg !232, !psr.id !233, !verifier.code !64 */
  $i49 := $and.i64($i40, 2251799813685247);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 641, 22} true;
  assume {:verifier.code 0} true;
  /* %51 = sub i64 %26, %50, !dbg !234, !psr.id !235, !verifier.code !64 */
  $i50 := $sub.i64($i25, $i49);
  /* call void @llvm.dbg.value(metadata i64 %51, metadata !3450, metadata !DIExpression()), !dbg !3277, !psr.id !3451, !verifier.code !64 */
  call {:cexpr "f4_"} boogie_si_record_i64($i50);
  /* call void @llvm.dbg.value(metadata i64 %43, metadata !3452, metadata !DIExpression()), !dbg !3277, !psr.id !3453, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %45, metadata !3454, metadata !DIExpression()), !dbg !3277, !psr.id !3455, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %47, metadata !3456, metadata !DIExpression()), !dbg !3277, !psr.id !3457, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %49, metadata !3458, metadata !DIExpression()), !dbg !3277, !psr.id !3459, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %51, metadata !3460, metadata !DIExpression()), !dbg !3277, !psr.id !3461, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 647, 28} true;
  assume {:verifier.code 0} true;
  /* %52 = shl i64 %45, 51, !dbg !248, !psr.id !249, !verifier.code !64 */
  $i51 := $shl.i64($i44, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 647, 22} true;
  assume {:verifier.code 0} true;
  /* %53 = or i64 %43, %52, !dbg !250, !psr.id !251, !verifier.code !64 */
  $i52 := $or.i64($i42, $i51);
  /* call void @llvm.dbg.value(metadata i64 %53, metadata !3466, metadata !DIExpression()), !dbg !3277, !psr.id !3467, !verifier.code !64 */
  call {:cexpr "o00"} boogie_si_record_i64($i52);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 648, 22} true;
  assume {:verifier.code 0} true;
  /* %54 = lshr i64 %45, 13, !dbg !254, !psr.id !255, !verifier.code !64 */
  $i53 := $lshr.i64($i44, 13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 648, 45} true;
  assume {:verifier.code 0} true;
  /* %55 = shl i64 %47, 38, !dbg !256, !psr.id !257, !verifier.code !64 */
  $i54 := $shl.i64($i46, 38);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 648, 39} true;
  assume {:verifier.code 0} true;
  /* %56 = or i64 %54, %55, !dbg !258, !psr.id !259, !verifier.code !64 */
  $i55 := $or.i64($i53, $i54);
  /* call void @llvm.dbg.value(metadata i64 %56, metadata !3474, metadata !DIExpression()), !dbg !3277, !psr.id !3475, !verifier.code !64 */
  call {:cexpr "o10"} boogie_si_record_i64($i55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 649, 22} true;
  assume {:verifier.code 0} true;
  /* %57 = lshr i64 %47, 26, !dbg !262, !psr.id !263, !verifier.code !64 */
  $i56 := $lshr.i64($i46, 26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 649, 45} true;
  assume {:verifier.code 0} true;
  /* %58 = shl i64 %49, 25, !dbg !264, !psr.id !265, !verifier.code !64 */
  $i57 := $shl.i64($i48, 25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 649, 39} true;
  assume {:verifier.code 0} true;
  /* %59 = or i64 %57, %58, !dbg !266, !psr.id !267, !verifier.code !64 */
  $i58 := $or.i64($i56, $i57);
  /* call void @llvm.dbg.value(metadata i64 %59, metadata !3482, metadata !DIExpression()), !dbg !3277, !psr.id !3483, !verifier.code !64 */
  call {:cexpr "o20"} boogie_si_record_i64($i58);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 650, 22} true;
  assume {:verifier.code 0} true;
  /* %60 = lshr i64 %49, 39, !dbg !270, !psr.id !271, !verifier.code !64 */
  $i59 := $lshr.i64($i48, 39);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 650, 45} true;
  assume {:verifier.code 0} true;
  /* %61 = shl i64 %51, 12, !dbg !272, !psr.id !273, !verifier.code !64 */
  $i60 := $shl.i64($i50, 12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 650, 39} true;
  assume {:verifier.code 0} true;
  /* %62 = or i64 %60, %61, !dbg !274, !psr.id !275, !verifier.code !64 */
  $i61 := $or.i64($i59, $i60);
  /* call void @llvm.dbg.value(metadata i64 %62, metadata !3490, metadata !DIExpression()), !dbg !3277, !psr.id !3491, !verifier.code !64 */
  call {:cexpr "o30"} boogie_si_record_i64($i61);
  /* call void @llvm.dbg.value(metadata i64 %53, metadata !3492, metadata !DIExpression()), !dbg !3277, !psr.id !3493, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %56, metadata !3494, metadata !DIExpression()), !dbg !3277, !psr.id !3495, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %59, metadata !3496, metadata !DIExpression()), !dbg !3277, !psr.id !3497, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %62, metadata !3498, metadata !DIExpression()), !dbg !3277, !psr.id !3499, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 655, 3} true;
  assume {:verifier.code 0} true;
  /* %63 = getelementptr inbounds i64, i64* %0, i64 0, !dbg !286, !psr.id !287, !verifier.code !64 */
  $p62 := $add.ref($p0, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 655, 12} true;
  assume {:verifier.code 0} true;
  /* store i64 %53, i64* %63, align 8, !dbg !288, !psr.id !289, !verifier.code !64 */
  $M.225 := $store.i64($M.225, $p62, $i52);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 656, 3} true;
  assume {:verifier.code 0} true;
  /* %64 = getelementptr inbounds i64, i64* %0, i64 1, !dbg !290, !psr.id !291, !verifier.code !64 */
  $p63 := $add.ref($p0, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 656, 12} true;
  assume {:verifier.code 0} true;
  /* store i64 %56, i64* %64, align 8, !dbg !292, !psr.id !293, !verifier.code !64 */
  $M.225 := $store.i64($M.225, $p63, $i55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 657, 3} true;
  assume {:verifier.code 0} true;
  /* %65 = getelementptr inbounds i64, i64* %0, i64 2, !dbg !294, !psr.id !295, !verifier.code !64 */
  $p64 := $add.ref($p0, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 657, 12} true;
  assume {:verifier.code 0} true;
  /* store i64 %59, i64* %65, align 8, !dbg !296, !psr.id !297, !verifier.code !64 */
  $M.225 := $store.i64($M.225, $p64, $i58);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 658, 3} true;
  assume {:verifier.code 0} true;
  /* %66 = getelementptr inbounds i64, i64* %0, i64 3, !dbg !298, !psr.id !299, !verifier.code !64 */
  $p65 := $add.ref($p0, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 658, 12} true;
  assume {:verifier.code 0} true;
  /* store i64 %62, i64* %66, align 8, !dbg !300, !psr.id !301, !verifier.code !64 */
  $M.225 := $store.i64($M.225, $p65, $i61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 659, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !302, !psr.id !303, !verifier.code !64 */
  $exn := false;
  return;
}
const store64: ref;
axiom (store64 == $sub.ref(0, 19608));
procedure {:inline 1} store64($p0: ref, $i1: i64)
{
  var $p2: ref;
  var $p3: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 187, 3} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %3 = alloca i64, align 8, !psr.id !61, !verifier.code !62 */
  call $p2 := $alloc($mul.ref(8, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i8* %0, metadata !3522, metadata !DIExpression()), !dbg !3523, !psr.id !3524, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* store i64 %1, i64* %3, align 8, !psr.id !66, !verifier.code !62 */
  $M.227 := $store.i64($M.227, $p2, $i1);
  /* call void @llvm.dbg.declare(metadata i64* %3, metadata !3526, metadata !DIExpression()), !dbg !3527, !psr.id !3528, !verifier.code !64 */
  assume true;
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 187, 3} true;
  assume {:verifier.code 0} true;
  /* %4 = bitcast i64* %3 to i8*, !dbg !70, !psr.id !71, !verifier.code !62 */
  $p3 := $bitcast.ref.ref($p2);
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 187, 3} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 8 %4, i64 8, i1 false), !dbg !70, !psr.id !72, !verifier.code !62 */
  call $M.228 := $memcpy.i8($M.228, $M.227, $p0, $p3, 8, false);
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 188, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !73, !psr.id !74, !verifier.code !62 */
  $exn := false;
  return;
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0, 20640));
procedure {:inline 1} llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p1: ref, $i2: i64, $i3: i1);
const FStar_UInt64_gte_mask: ref;
axiom (FStar_UInt64_gte_mask == $sub.ref(0, 21672));
procedure {:inline 1} FStar_UInt64_gte_mask($i0: i64, $i1: i64)
  returns ($r: i64)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
  var $i8: i64;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 48, 24} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i64 %0, metadata !3538, metadata !DIExpression()), !dbg !3539, !psr.id !3540, !verifier.code !64 */
  call {:cexpr "FStar_UInt64_gte_mask:arg:a"} boogie_si_record_i64($i0);
  /* call void @llvm.dbg.value(metadata i64 %1, metadata !3541, metadata !DIExpression()), !dbg !3539, !psr.id !3542, !verifier.code !64 */
  call {:cexpr "FStar_UInt64_gte_mask:arg:b"} boogie_si_record_i64($i1);
  /* call void @llvm.dbg.value(metadata i64 %0, metadata !3543, metadata !DIExpression()), !dbg !3539, !psr.id !3544, !verifier.code !64 */
  call {:cexpr "FStar_UInt64_gte_mask:arg:x"} boogie_si_record_i64($i0);
  /* call void @llvm.dbg.value(metadata i64 %1, metadata !3545, metadata !DIExpression()), !dbg !3539, !psr.id !3546, !verifier.code !64 */
  call {:cexpr "FStar_UInt64_gte_mask:arg:y"} boogie_si_record_i64($i1);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 48, 24} true;
  assume {:verifier.code 0} true;
  /* %3 = xor i64 %0, %1, !dbg !70, !psr.id !71, !verifier.code !63 */
  $i2 := $xor.i64($i0, $i1);
  /* call void @llvm.dbg.value(metadata i64 %3, metadata !3549, metadata !DIExpression()), !dbg !3539, !psr.id !3550, !verifier.code !64 */
  call {:cexpr "x_xor_y"} boogie_si_record_i64($i2);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 49, 24} true;
  assume {:verifier.code 0} true;
  /* %4 = sub i64 %0, %1, !dbg !74, !psr.id !75, !verifier.code !63 */
  $i3 := $sub.i64($i0, $i1);
  /* call void @llvm.dbg.value(metadata i64 %4, metadata !3553, metadata !DIExpression()), !dbg !3539, !psr.id !3554, !verifier.code !64 */
  call {:cexpr "x_sub_y"} boogie_si_record_i64($i3);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 50, 36} true;
  assume {:verifier.code 0} true;
  /* %5 = xor i64 %4, %1, !dbg !78, !psr.id !79, !verifier.code !63 */
  $i4 := $xor.i64($i3, $i1);
  /* call void @llvm.dbg.value(metadata i64 %5, metadata !3557, metadata !DIExpression()), !dbg !3539, !psr.id !3558, !verifier.code !64 */
  call {:cexpr "x_sub_y_xor_y"} boogie_si_record_i64($i4);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 51, 24} true;
  assume {:verifier.code 0} true;
  /* %6 = or i64 %3, %5, !dbg !82, !psr.id !83, !verifier.code !63 */
  $i5 := $or.i64($i2, $i4);
  /* call void @llvm.dbg.value(metadata i64 %6, metadata !3561, metadata !DIExpression()), !dbg !3539, !psr.id !3562, !verifier.code !64 */
  call {:cexpr "q"} boogie_si_record_i64($i5);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 52, 24} true;
  assume {:verifier.code 0} true;
  /* %7 = xor i64 %0, %6, !dbg !86, !psr.id !87, !verifier.code !63 */
  $i6 := $xor.i64($i0, $i5);
  /* call void @llvm.dbg.value(metadata i64 %7, metadata !3565, metadata !DIExpression()), !dbg !3539, !psr.id !3566, !verifier.code !64 */
  call {:cexpr "x_xor_q"} boogie_si_record_i64($i6);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 53, 31} true;
  assume {:verifier.code 0} true;
  /* %8 = lshr i64 %7, 63, !dbg !90, !psr.id !91, !verifier.code !63 */
  $i7 := $lshr.i64($i6, 63);
  /* call void @llvm.dbg.value(metadata i64 %8, metadata !3569, metadata !DIExpression()), !dbg !3539, !psr.id !3570, !verifier.code !64 */
  call {:cexpr "x_xor_q_"} boogie_si_record_i64($i7);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 54, 19} true;
  assume {:verifier.code 0} true;
  /* %9 = sub i64 %8, 1, !dbg !94, !psr.id !95, !verifier.code !63 */
  $i8 := $sub.i64($i7, 1);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 54, 3} true;
  assume {:verifier.code 0} true;
  /* ret i64 %9, !dbg !96, !psr.id !97, !verifier.code !63 */
  $r := $i8;
  $exn := false;
  return;
}
const FStar_UInt64_eq_mask: ref;
axiom (FStar_UInt64_eq_mask == $sub.ref(0, 22704));
procedure {:inline 1} FStar_UInt64_eq_mask($i0: i64, $i1: i64)
  returns ($r: i64)
{
  var $i2: i64;
  var $i3: i64;
  var $i4: i64;
  var $i5: i64;
  var $i6: i64;
  var $i7: i64;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 37, 18} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i64 %0, metadata !3576, metadata !DIExpression()), !dbg !3577, !psr.id !3578, !verifier.code !64 */
  call {:cexpr "FStar_UInt64_eq_mask:arg:a"} boogie_si_record_i64($i0);
  /* call void @llvm.dbg.value(metadata i64 %1, metadata !3579, metadata !DIExpression()), !dbg !3577, !psr.id !3580, !verifier.code !64 */
  call {:cexpr "FStar_UInt64_eq_mask:arg:b"} boogie_si_record_i64($i1);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 37, 18} true;
  assume {:verifier.code 0} true;
  /* %3 = xor i64 %0, %1, !dbg !66, !psr.id !67, !verifier.code !63 */
  $i2 := $xor.i64($i0, $i1);
  /* call void @llvm.dbg.value(metadata i64 %3, metadata !3583, metadata !DIExpression()), !dbg !3577, !psr.id !3584, !verifier.code !64 */
  call {:cexpr "x"} boogie_si_record_i64($i2);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 38, 22} true;
  assume {:verifier.code 0} true;
  /* %4 = xor i64 %3, -1, !dbg !70, !psr.id !71, !verifier.code !63 */
  $i3 := $xor.i64($i2, $sub.i64(0, 1));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 38, 25} true;
  assume {:verifier.code 0} true;
  /* %5 = add i64 %4, 1, !dbg !72, !psr.id !73, !verifier.code !63 */
  $i4 := $add.i64($i3, 1);
  /* call void @llvm.dbg.value(metadata i64 %5, metadata !3589, metadata !DIExpression()), !dbg !3577, !psr.id !3590, !verifier.code !64 */
  call {:cexpr "minus_x"} boogie_si_record_i64($i4);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 39, 29} true;
  assume {:verifier.code 0} true;
  /* %6 = or i64 %3, %5, !dbg !76, !psr.id !77, !verifier.code !63 */
  $i5 := $or.i64($i2, $i4);
  /* call void @llvm.dbg.value(metadata i64 %6, metadata !3593, metadata !DIExpression()), !dbg !3577, !psr.id !3594, !verifier.code !64 */
  call {:cexpr "x_or_minus_x"} boogie_si_record_i64($i5);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 40, 31} true;
  assume {:verifier.code 0} true;
  /* %7 = lshr i64 %6, 63, !dbg !80, !psr.id !81, !verifier.code !63 */
  $i6 := $lshr.i64($i5, 63);
  /* call void @llvm.dbg.value(metadata i64 %7, metadata !3597, metadata !DIExpression()), !dbg !3577, !psr.id !3598, !verifier.code !64 */
  call {:cexpr "xnx"} boogie_si_record_i64($i6);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 41, 14} true;
  assume {:verifier.code 0} true;
  /* %8 = sub i64 %7, 1, !dbg !84, !psr.id !85, !verifier.code !63 */
  $i7 := $sub.i64($i6, 1);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 41, 3} true;
  assume {:verifier.code 0} true;
  /* ret i64 %8, !dbg !86, !psr.id !87, !verifier.code !63 */
  $r := $i7;
  $exn := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_cswap2: ref;
axiom (Hacl_Impl_Curve25519_Field51_cswap2 == $sub.ref(0, 23736));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_cswap2($i0: i64, $p1: ref, $p2: ref)
{
  var $i3: i64;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $i7: i64;
  var $p8: ref;
  var $i9: i64;
  var $i10: i64;
  var $i11: i64;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $i15: i64;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $i21: i64;
  var $i22: i64;
  var $p23: ref;
  var $i24: i32;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $i28: i64;
  var $p29: ref;
  var $i30: i64;
  var $i31: i64;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $p40: ref;
  var $i41: i64;
  var $i42: i64;
  var $i43: i64;
  var $p44: ref;
  var $i45: i32;
  var $i46: i64;
  var $p47: ref;
  var $i48: i64;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $i52: i64;
  var $i53: i64;
  var $i54: i64;
  var $p55: ref;
  var $i56: i64;
  var $i57: i64;
  var $i58: i64;
  var $p59: ref;
  var $i60: i64;
  var $p61: ref;
  var $i62: i64;
  var $i63: i64;
  var $i64: i64;
  var $p65: ref;
  var $i66: i32;
  var $i67: i64;
  var $p68: ref;
  var $i69: i64;
  var $i70: i64;
  var $p71: ref;
  var $i72: i64;
  var $i73: i64;
  var $i74: i64;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i64;
  var $i79: i64;
  var $p80: ref;
  var $i81: i64;
  var $p82: ref;
  var $i83: i64;
  var $i84: i64;
  var $i85: i64;
  var $p86: ref;
  var $i87: i32;
  var $i88: i64;
  var $p89: ref;
  var $i90: i64;
  var $i91: i64;
  var $p92: ref;
  var $i93: i64;
  var $i94: i64;
  var $i95: i64;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $i99: i64;
  var $i100: i64;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $i104: i64;
  var $i105: i64;
  var $i106: i64;
  var $p107: ref;
  var $i108: i32;
  var $i109: i64;
  var $p110: ref;
  var $i111: i64;
  var $i112: i64;
  var $p113: ref;
  var $i114: i64;
  var $i115: i64;
  var $i116: i64;
  var $i117: i64;
  var $p118: ref;
  var $i119: i64;
  var $i120: i64;
  var $i121: i64;
  var $p122: ref;
  var $i123: i64;
  var $p124: ref;
  var $i125: i64;
  var $i126: i64;
  var $i127: i64;
  var $p128: ref;
  var $i129: i32;
  var $i130: i64;
  var $p131: ref;
  var $i132: i64;
  var $i133: i64;
  var $p134: ref;
  var $i135: i64;
  var $i136: i64;
  var $i137: i64;
  var $i138: i64;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $i142: i64;
  var $p143: ref;
  var $i144: i64;
  var $p145: ref;
  var $i146: i64;
  var $i147: i64;
  var $i148: i64;
  var $p149: ref;
  var $i150: i32;
  var $i151: i64;
  var $p152: ref;
  var $i153: i64;
  var $i154: i64;
  var $p155: ref;
  var $i156: i64;
  var $i157: i64;
  var $i158: i64;
  var $i159: i64;
  var $p160: ref;
  var $i161: i64;
  var $i162: i64;
  var $i163: i64;
  var $p164: ref;
  var $i165: i64;
  var $p166: ref;
  var $i167: i64;
  var $i168: i64;
  var $i169: i64;
  var $p170: ref;
  var $i171: i32;
  var $i172: i64;
  var $p173: ref;
  var $i174: i64;
  var $i175: i64;
  var $p176: ref;
  var $i177: i64;
  var $i178: i64;
  var $i179: i64;
  var $i180: i64;
  var $p181: ref;
  var $i182: i64;
  var $i183: i64;
  var $i184: i64;
  var $p185: ref;
  var $i186: i64;
  var $p187: ref;
  var $i188: i64;
  var $i189: i64;
  var $i190: i64;
  var $p191: ref;
  var $i192: i32;
  var $i193: i64;
  var $p194: ref;
  var $i195: i64;
  var $i196: i64;
  var $p197: ref;
  var $i198: i64;
  var $i199: i64;
  var $i200: i64;
  var $i201: i64;
  var $p202: ref;
  var $i203: i64;
  var $i204: i64;
  var $i205: i64;
  var $p206: ref;
  var $i207: i64;
  var $p208: ref;
  var $i209: i64;
  var $i210: i64;
  var $i211: i64;
  var $p212: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 664, 32} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* call void @llvm.dbg.value(metadata i64 %0, metadata !3606, metadata !DIExpression()), !dbg !3607, !psr.id !3608, !verifier.code !64 */
  call {:cexpr "Hacl_Impl_Curve25519_Field51_cswap2:arg:bit"} boogie_si_record_i64($i0);
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !3609, metadata !DIExpression()), !dbg !3607, !psr.id !3610, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %2, metadata !3611, metadata !DIExpression()), !dbg !3607, !psr.id !3612, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 664, 32} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %4 = sub i64 0, %0, !dbg !69, !psr.id !70, !ValueTainted !71, !verifier.code !64 */
  $i3 := $sub.i64(0, $i0);
  /* call void @llvm.dbg.value(metadata i64 %4, metadata !3615, metadata !DIExpression()), !dbg !3607, !psr.id !3616, !verifier.code !64 */
  call {:cexpr "mask"} boogie_si_record_i64($i3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* br label %5, !dbg !74, !psr.id !75, !verifier.code !64 */
  goto $bb1;
$bb1:
  /* call void @llvm.dbg.value(metadata i32 0, metadata !3619, metadata !DIExpression()), !dbg !3621, !psr.id !3622, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %6 = zext i32 0 to i64, !dbg !80, !psr.id !82, !verifier.code !64 */
  $i4 := $zext.i32.i64(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %7 = getelementptr inbounds i64, i64* %1, i64 %6, !dbg !80, !psr.id !83, !verifier.code !64 */
  $p5 := $add.ref($p1, $mul.ref($i4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %8 = load i64, i64* %7, align 8, !dbg !80, !psr.id !84, !ValueTainted !71, !verifier.code !64 */
  $i6 := $load.i64($M.0, $p5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %9 = zext i32 0 to i64, !dbg !80, !psr.id !85, !verifier.code !64 */
  $i7 := $zext.i32.i64(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %10 = getelementptr inbounds i64, i64* %2, i64 %9, !dbg !80, !psr.id !86, !verifier.code !64 */
  $p8 := $add.ref($p2, $mul.ref($i7, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %11 = load i64, i64* %10, align 8, !dbg !80, !psr.id !87, !ValueTainted !71, !verifier.code !64 */
  $i9 := $load.i64($M.0, $p8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %12 = xor i64 %8, %11, !dbg !80, !psr.id !88, !ValueTainted !71, !verifier.code !64 */
  $i10 := $xor.i64($i6, $i9);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %13 = and i64 %4, %12, !dbg !80, !psr.id !89, !ValueTainted !71, !verifier.code !64 */
  $i11 := $and.i64($i3, $i10);
  /* call void @llvm.dbg.value(metadata i64 %13, metadata !3633, metadata !DIExpression()), !dbg !3634, !psr.id !3635, !verifier.code !64 */
  call {:cexpr "dummy"} boogie_si_record_i64($i11);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %14 = zext i32 0 to i64, !dbg !80, !psr.id !93, !verifier.code !64 */
  $i12 := $zext.i32.i64(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %15 = getelementptr inbounds i64, i64* %1, i64 %14, !dbg !80, !psr.id !94, !verifier.code !64 */
  $p13 := $add.ref($p1, $mul.ref($i12, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %16 = load i64, i64* %15, align 8, !dbg !80, !psr.id !95, !ValueTainted !71, !verifier.code !64 */
  $i14 := $load.i64($M.0, $p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %17 = xor i64 %16, %13, !dbg !80, !psr.id !96, !ValueTainted !71, !verifier.code !64 */
  $i15 := $xor.i64($i14, $i11);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %18 = zext i32 0 to i64, !dbg !80, !psr.id !97, !verifier.code !64 */
  $i16 := $zext.i32.i64(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %19 = getelementptr inbounds i64, i64* %1, i64 %18, !dbg !80, !psr.id !98, !verifier.code !64 */
  $p17 := $add.ref($p1, $mul.ref($i16, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %17, i64* %19, align 8, !dbg !80, !psr.id !99, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p17, $i15);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %20 = zext i32 0 to i64, !dbg !80, !psr.id !100, !verifier.code !64 */
  $i18 := $zext.i32.i64(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %21 = getelementptr inbounds i64, i64* %2, i64 %20, !dbg !80, !psr.id !101, !verifier.code !64 */
  $p19 := $add.ref($p2, $mul.ref($i18, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %22 = load i64, i64* %21, align 8, !dbg !80, !psr.id !102, !ValueTainted !71, !verifier.code !64 */
  $i20 := $load.i64($M.0, $p19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %23 = xor i64 %22, %13, !dbg !80, !psr.id !103, !ValueTainted !71, !verifier.code !64 */
  $i21 := $xor.i64($i20, $i11);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %24 = zext i32 0 to i64, !dbg !80, !psr.id !104, !verifier.code !64 */
  $i22 := $zext.i32.i64(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %25 = getelementptr inbounds i64, i64* %2, i64 %24, !dbg !80, !psr.id !105, !verifier.code !64 */
  $p23 := $add.ref($p2, $mul.ref($i22, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %23, i64* %25, align 8, !dbg !80, !psr.id !106, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p23, $i21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %26 = add i32 0, 1, !dbg !80, !psr.id !107, !verifier.code !64 */
  $i24 := $add.i32(0, 1);
  /* call void @llvm.dbg.value(metadata i32 %26, metadata !3619, metadata !DIExpression()), !dbg !3621, !psr.id !3651, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %27 = zext i32 %26 to i64, !dbg !109, !psr.id !111, !verifier.code !64 */
  $i25 := $zext.i32.i64($i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %28 = getelementptr inbounds i64, i64* %1, i64 %27, !dbg !109, !psr.id !112, !verifier.code !64 */
  $p26 := $add.ref($p1, $mul.ref($i25, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %29 = load i64, i64* %28, align 8, !dbg !109, !psr.id !113, !ValueTainted !71, !verifier.code !64 */
  $i27 := $load.i64($M.0, $p26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %30 = zext i32 %26 to i64, !dbg !109, !psr.id !114, !verifier.code !64 */
  $i28 := $zext.i32.i64($i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %31 = getelementptr inbounds i64, i64* %2, i64 %30, !dbg !109, !psr.id !115, !verifier.code !64 */
  $p29 := $add.ref($p2, $mul.ref($i28, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %32 = load i64, i64* %31, align 8, !dbg !109, !psr.id !116, !ValueTainted !71, !verifier.code !64 */
  $i30 := $load.i64($M.0, $p29);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %33 = xor i64 %29, %32, !dbg !109, !psr.id !117, !ValueTainted !71, !verifier.code !64 */
  $i31 := $xor.i64($i27, $i30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %34 = and i64 %4, %33, !dbg !109, !psr.id !118, !ValueTainted !71, !verifier.code !64 */
  $i32 := $and.i64($i3, $i31);
  /* call void @llvm.dbg.value(metadata i64 %34, metadata !3662, metadata !DIExpression()), !dbg !3663, !psr.id !3664, !verifier.code !64 */
  call {:cexpr "dummy"} boogie_si_record_i64($i32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %35 = zext i32 %26 to i64, !dbg !109, !psr.id !122, !verifier.code !64 */
  $i33 := $zext.i32.i64($i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %36 = getelementptr inbounds i64, i64* %1, i64 %35, !dbg !109, !psr.id !123, !verifier.code !64 */
  $p34 := $add.ref($p1, $mul.ref($i33, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %37 = load i64, i64* %36, align 8, !dbg !109, !psr.id !124, !ValueTainted !71, !verifier.code !64 */
  $i35 := $load.i64($M.0, $p34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %38 = xor i64 %37, %34, !dbg !109, !psr.id !125, !ValueTainted !71, !verifier.code !64 */
  $i36 := $xor.i64($i35, $i32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %39 = zext i32 %26 to i64, !dbg !109, !psr.id !126, !verifier.code !64 */
  $i37 := $zext.i32.i64($i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %40 = getelementptr inbounds i64, i64* %1, i64 %39, !dbg !109, !psr.id !127, !verifier.code !64 */
  $p38 := $add.ref($p1, $mul.ref($i37, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %38, i64* %40, align 8, !dbg !109, !psr.id !128, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p38, $i36);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %41 = zext i32 %26 to i64, !dbg !109, !psr.id !129, !verifier.code !64 */
  $i39 := $zext.i32.i64($i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %42 = getelementptr inbounds i64, i64* %2, i64 %41, !dbg !109, !psr.id !130, !verifier.code !64 */
  $p40 := $add.ref($p2, $mul.ref($i39, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %43 = load i64, i64* %42, align 8, !dbg !109, !psr.id !131, !ValueTainted !71, !verifier.code !64 */
  $i41 := $load.i64($M.0, $p40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %44 = xor i64 %43, %34, !dbg !109, !psr.id !132, !ValueTainted !71, !verifier.code !64 */
  $i42 := $xor.i64($i41, $i32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %45 = zext i32 %26 to i64, !dbg !109, !psr.id !133, !verifier.code !64 */
  $i43 := $zext.i32.i64($i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %46 = getelementptr inbounds i64, i64* %2, i64 %45, !dbg !109, !psr.id !134, !verifier.code !64 */
  $p44 := $add.ref($p2, $mul.ref($i43, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %44, i64* %46, align 8, !dbg !109, !psr.id !135, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p44, $i42);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %47 = add i32 %26, 1, !dbg !109, !psr.id !136, !verifier.code !64 */
  $i45 := $add.i32($i24, 1);
  /* call void @llvm.dbg.value(metadata i32 %47, metadata !3619, metadata !DIExpression()), !dbg !3621, !psr.id !3680, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %48 = zext i32 %47 to i64, !dbg !138, !psr.id !140, !verifier.code !64 */
  $i46 := $zext.i32.i64($i45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %49 = getelementptr inbounds i64, i64* %1, i64 %48, !dbg !138, !psr.id !141, !verifier.code !64 */
  $p47 := $add.ref($p1, $mul.ref($i46, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %50 = load i64, i64* %49, align 8, !dbg !138, !psr.id !142, !ValueTainted !71, !verifier.code !64 */
  $i48 := $load.i64($M.0, $p47);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %51 = zext i32 %47 to i64, !dbg !138, !psr.id !143, !verifier.code !64 */
  $i49 := $zext.i32.i64($i45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %52 = getelementptr inbounds i64, i64* %2, i64 %51, !dbg !138, !psr.id !144, !verifier.code !64 */
  $p50 := $add.ref($p2, $mul.ref($i49, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %53 = load i64, i64* %52, align 8, !dbg !138, !psr.id !145, !ValueTainted !71, !verifier.code !64 */
  $i51 := $load.i64($M.0, $p50);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %54 = xor i64 %50, %53, !dbg !138, !psr.id !146, !ValueTainted !71, !verifier.code !64 */
  $i52 := $xor.i64($i48, $i51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %55 = and i64 %4, %54, !dbg !138, !psr.id !147, !ValueTainted !71, !verifier.code !64 */
  $i53 := $and.i64($i3, $i52);
  /* call void @llvm.dbg.value(metadata i64 %55, metadata !3691, metadata !DIExpression()), !dbg !3692, !psr.id !3693, !verifier.code !64 */
  call {:cexpr "dummy"} boogie_si_record_i64($i53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %56 = zext i32 %47 to i64, !dbg !138, !psr.id !151, !verifier.code !64 */
  $i54 := $zext.i32.i64($i45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %57 = getelementptr inbounds i64, i64* %1, i64 %56, !dbg !138, !psr.id !152, !verifier.code !64 */
  $p55 := $add.ref($p1, $mul.ref($i54, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %58 = load i64, i64* %57, align 8, !dbg !138, !psr.id !153, !ValueTainted !71, !verifier.code !64 */
  $i56 := $load.i64($M.0, $p55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %59 = xor i64 %58, %55, !dbg !138, !psr.id !154, !ValueTainted !71, !verifier.code !64 */
  $i57 := $xor.i64($i56, $i53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %60 = zext i32 %47 to i64, !dbg !138, !psr.id !155, !verifier.code !64 */
  $i58 := $zext.i32.i64($i45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %61 = getelementptr inbounds i64, i64* %1, i64 %60, !dbg !138, !psr.id !156, !verifier.code !64 */
  $p59 := $add.ref($p1, $mul.ref($i58, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %59, i64* %61, align 8, !dbg !138, !psr.id !157, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p59, $i57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %62 = zext i32 %47 to i64, !dbg !138, !psr.id !158, !verifier.code !64 */
  $i60 := $zext.i32.i64($i45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %63 = getelementptr inbounds i64, i64* %2, i64 %62, !dbg !138, !psr.id !159, !verifier.code !64 */
  $p61 := $add.ref($p2, $mul.ref($i60, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %64 = load i64, i64* %63, align 8, !dbg !138, !psr.id !160, !ValueTainted !71, !verifier.code !64 */
  $i62 := $load.i64($M.0, $p61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %65 = xor i64 %64, %55, !dbg !138, !psr.id !161, !ValueTainted !71, !verifier.code !64 */
  $i63 := $xor.i64($i62, $i53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %66 = zext i32 %47 to i64, !dbg !138, !psr.id !162, !verifier.code !64 */
  $i64 := $zext.i32.i64($i45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %67 = getelementptr inbounds i64, i64* %2, i64 %66, !dbg !138, !psr.id !163, !verifier.code !64 */
  $p65 := $add.ref($p2, $mul.ref($i64, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %65, i64* %67, align 8, !dbg !138, !psr.id !164, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p65, $i63);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %68 = add i32 %47, 1, !dbg !138, !psr.id !165, !verifier.code !64 */
  $i66 := $add.i32($i45, 1);
  /* call void @llvm.dbg.value(metadata i32 %68, metadata !3619, metadata !DIExpression()), !dbg !3621, !psr.id !3709, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %69 = zext i32 %68 to i64, !dbg !167, !psr.id !169, !verifier.code !64 */
  $i67 := $zext.i32.i64($i66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %70 = getelementptr inbounds i64, i64* %1, i64 %69, !dbg !167, !psr.id !170, !verifier.code !64 */
  $p68 := $add.ref($p1, $mul.ref($i67, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %71 = load i64, i64* %70, align 8, !dbg !167, !psr.id !171, !ValueTainted !71, !verifier.code !64 */
  $i69 := $load.i64($M.0, $p68);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %72 = zext i32 %68 to i64, !dbg !167, !psr.id !172, !verifier.code !64 */
  $i70 := $zext.i32.i64($i66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %73 = getelementptr inbounds i64, i64* %2, i64 %72, !dbg !167, !psr.id !173, !verifier.code !64 */
  $p71 := $add.ref($p2, $mul.ref($i70, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %74 = load i64, i64* %73, align 8, !dbg !167, !psr.id !174, !ValueTainted !71, !verifier.code !64 */
  $i72 := $load.i64($M.0, $p71);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %75 = xor i64 %71, %74, !dbg !167, !psr.id !175, !ValueTainted !71, !verifier.code !64 */
  $i73 := $xor.i64($i69, $i72);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %76 = and i64 %4, %75, !dbg !167, !psr.id !176, !ValueTainted !71, !verifier.code !64 */
  $i74 := $and.i64($i3, $i73);
  /* call void @llvm.dbg.value(metadata i64 %76, metadata !3720, metadata !DIExpression()), !dbg !3721, !psr.id !3722, !verifier.code !64 */
  call {:cexpr "dummy"} boogie_si_record_i64($i74);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %77 = zext i32 %68 to i64, !dbg !167, !psr.id !180, !verifier.code !64 */
  $i75 := $zext.i32.i64($i66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %78 = getelementptr inbounds i64, i64* %1, i64 %77, !dbg !167, !psr.id !181, !verifier.code !64 */
  $p76 := $add.ref($p1, $mul.ref($i75, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %79 = load i64, i64* %78, align 8, !dbg !167, !psr.id !182, !ValueTainted !71, !verifier.code !64 */
  $i77 := $load.i64($M.0, $p76);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %80 = xor i64 %79, %76, !dbg !167, !psr.id !183, !ValueTainted !71, !verifier.code !64 */
  $i78 := $xor.i64($i77, $i74);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %81 = zext i32 %68 to i64, !dbg !167, !psr.id !184, !verifier.code !64 */
  $i79 := $zext.i32.i64($i66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %82 = getelementptr inbounds i64, i64* %1, i64 %81, !dbg !167, !psr.id !185, !verifier.code !64 */
  $p80 := $add.ref($p1, $mul.ref($i79, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %80, i64* %82, align 8, !dbg !167, !psr.id !186, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p80, $i78);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %83 = zext i32 %68 to i64, !dbg !167, !psr.id !187, !verifier.code !64 */
  $i81 := $zext.i32.i64($i66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %84 = getelementptr inbounds i64, i64* %2, i64 %83, !dbg !167, !psr.id !188, !verifier.code !64 */
  $p82 := $add.ref($p2, $mul.ref($i81, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %85 = load i64, i64* %84, align 8, !dbg !167, !psr.id !189, !ValueTainted !71, !verifier.code !64 */
  $i83 := $load.i64($M.0, $p82);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %86 = xor i64 %85, %76, !dbg !167, !psr.id !190, !ValueTainted !71, !verifier.code !64 */
  $i84 := $xor.i64($i83, $i74);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %87 = zext i32 %68 to i64, !dbg !167, !psr.id !191, !verifier.code !64 */
  $i85 := $zext.i32.i64($i66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %88 = getelementptr inbounds i64, i64* %2, i64 %87, !dbg !167, !psr.id !192, !verifier.code !64 */
  $p86 := $add.ref($p2, $mul.ref($i85, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %86, i64* %88, align 8, !dbg !167, !psr.id !193, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p86, $i84);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %89 = add i32 %68, 1, !dbg !167, !psr.id !194, !verifier.code !64 */
  $i87 := $add.i32($i66, 1);
  /* call void @llvm.dbg.value(metadata i32 %89, metadata !3619, metadata !DIExpression()), !dbg !3621, !psr.id !3738, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i87);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %90 = zext i32 %89 to i64, !dbg !196, !psr.id !198, !verifier.code !64 */
  $i88 := $zext.i32.i64($i87);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %91 = getelementptr inbounds i64, i64* %1, i64 %90, !dbg !196, !psr.id !199, !verifier.code !64 */
  $p89 := $add.ref($p1, $mul.ref($i88, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %92 = load i64, i64* %91, align 8, !dbg !196, !psr.id !200, !ValueTainted !71, !verifier.code !64 */
  $i90 := $load.i64($M.0, $p89);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %93 = zext i32 %89 to i64, !dbg !196, !psr.id !201, !verifier.code !64 */
  $i91 := $zext.i32.i64($i87);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %94 = getelementptr inbounds i64, i64* %2, i64 %93, !dbg !196, !psr.id !202, !verifier.code !64 */
  $p92 := $add.ref($p2, $mul.ref($i91, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %95 = load i64, i64* %94, align 8, !dbg !196, !psr.id !203, !ValueTainted !71, !verifier.code !64 */
  $i93 := $load.i64($M.0, $p92);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %96 = xor i64 %92, %95, !dbg !196, !psr.id !204, !ValueTainted !71, !verifier.code !64 */
  $i94 := $xor.i64($i90, $i93);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %97 = and i64 %4, %96, !dbg !196, !psr.id !205, !ValueTainted !71, !verifier.code !64 */
  $i95 := $and.i64($i3, $i94);
  /* call void @llvm.dbg.value(metadata i64 %97, metadata !3749, metadata !DIExpression()), !dbg !3750, !psr.id !3751, !verifier.code !64 */
  call {:cexpr "dummy"} boogie_si_record_i64($i95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %98 = zext i32 %89 to i64, !dbg !196, !psr.id !209, !verifier.code !64 */
  $i96 := $zext.i32.i64($i87);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %99 = getelementptr inbounds i64, i64* %1, i64 %98, !dbg !196, !psr.id !210, !verifier.code !64 */
  $p97 := $add.ref($p1, $mul.ref($i96, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %100 = load i64, i64* %99, align 8, !dbg !196, !psr.id !211, !ValueTainted !71, !verifier.code !64 */
  $i98 := $load.i64($M.0, $p97);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %101 = xor i64 %100, %97, !dbg !196, !psr.id !212, !ValueTainted !71, !verifier.code !64 */
  $i99 := $xor.i64($i98, $i95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %102 = zext i32 %89 to i64, !dbg !196, !psr.id !213, !verifier.code !64 */
  $i100 := $zext.i32.i64($i87);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %103 = getelementptr inbounds i64, i64* %1, i64 %102, !dbg !196, !psr.id !214, !verifier.code !64 */
  $p101 := $add.ref($p1, $mul.ref($i100, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %101, i64* %103, align 8, !dbg !196, !psr.id !215, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p101, $i99);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %104 = zext i32 %89 to i64, !dbg !196, !psr.id !216, !verifier.code !64 */
  $i102 := $zext.i32.i64($i87);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %105 = getelementptr inbounds i64, i64* %2, i64 %104, !dbg !196, !psr.id !217, !verifier.code !64 */
  $p103 := $add.ref($p2, $mul.ref($i102, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %106 = load i64, i64* %105, align 8, !dbg !196, !psr.id !218, !ValueTainted !71, !verifier.code !64 */
  $i104 := $load.i64($M.0, $p103);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %107 = xor i64 %106, %97, !dbg !196, !psr.id !219, !ValueTainted !71, !verifier.code !64 */
  $i105 := $xor.i64($i104, $i95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %108 = zext i32 %89 to i64, !dbg !196, !psr.id !220, !verifier.code !64 */
  $i106 := $zext.i32.i64($i87);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %109 = getelementptr inbounds i64, i64* %2, i64 %108, !dbg !196, !psr.id !221, !verifier.code !64 */
  $p107 := $add.ref($p2, $mul.ref($i106, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %107, i64* %109, align 8, !dbg !196, !psr.id !222, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p107, $i105);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %110 = add i32 %89, 1, !dbg !196, !psr.id !223, !verifier.code !64 */
  $i108 := $add.i32($i87, 1);
  /* call void @llvm.dbg.value(metadata i32 %110, metadata !3619, metadata !DIExpression()), !dbg !3621, !psr.id !3767, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %111 = zext i32 %110 to i64, !dbg !225, !psr.id !227, !verifier.code !64 */
  $i109 := $zext.i32.i64($i108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %112 = getelementptr inbounds i64, i64* %1, i64 %111, !dbg !225, !psr.id !228, !verifier.code !64 */
  $p110 := $add.ref($p1, $mul.ref($i109, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %113 = load i64, i64* %112, align 8, !dbg !225, !psr.id !229, !ValueTainted !71, !verifier.code !64 */
  $i111 := $load.i64($M.0, $p110);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %114 = zext i32 %110 to i64, !dbg !225, !psr.id !230, !verifier.code !64 */
  $i112 := $zext.i32.i64($i108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %115 = getelementptr inbounds i64, i64* %2, i64 %114, !dbg !225, !psr.id !231, !verifier.code !64 */
  $p113 := $add.ref($p2, $mul.ref($i112, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %116 = load i64, i64* %115, align 8, !dbg !225, !psr.id !232, !ValueTainted !71, !verifier.code !64 */
  $i114 := $load.i64($M.0, $p113);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %117 = xor i64 %113, %116, !dbg !225, !psr.id !233, !ValueTainted !71, !verifier.code !64 */
  $i115 := $xor.i64($i111, $i114);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %118 = and i64 %4, %117, !dbg !225, !psr.id !234, !ValueTainted !71, !verifier.code !64 */
  $i116 := $and.i64($i3, $i115);
  /* call void @llvm.dbg.value(metadata i64 %118, metadata !3778, metadata !DIExpression()), !dbg !3779, !psr.id !3780, !verifier.code !64 */
  call {:cexpr "dummy"} boogie_si_record_i64($i116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %119 = zext i32 %110 to i64, !dbg !225, !psr.id !238, !verifier.code !64 */
  $i117 := $zext.i32.i64($i108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %120 = getelementptr inbounds i64, i64* %1, i64 %119, !dbg !225, !psr.id !239, !verifier.code !64 */
  $p118 := $add.ref($p1, $mul.ref($i117, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %121 = load i64, i64* %120, align 8, !dbg !225, !psr.id !240, !ValueTainted !71, !verifier.code !64 */
  $i119 := $load.i64($M.0, $p118);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %122 = xor i64 %121, %118, !dbg !225, !psr.id !241, !ValueTainted !71, !verifier.code !64 */
  $i120 := $xor.i64($i119, $i116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %123 = zext i32 %110 to i64, !dbg !225, !psr.id !242, !verifier.code !64 */
  $i121 := $zext.i32.i64($i108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %124 = getelementptr inbounds i64, i64* %1, i64 %123, !dbg !225, !psr.id !243, !verifier.code !64 */
  $p122 := $add.ref($p1, $mul.ref($i121, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %122, i64* %124, align 8, !dbg !225, !psr.id !244, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p122, $i120);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %125 = zext i32 %110 to i64, !dbg !225, !psr.id !245, !verifier.code !64 */
  $i123 := $zext.i32.i64($i108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %126 = getelementptr inbounds i64, i64* %2, i64 %125, !dbg !225, !psr.id !246, !verifier.code !64 */
  $p124 := $add.ref($p2, $mul.ref($i123, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %127 = load i64, i64* %126, align 8, !dbg !225, !psr.id !247, !ValueTainted !71, !verifier.code !64 */
  $i125 := $load.i64($M.0, $p124);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %128 = xor i64 %127, %118, !dbg !225, !psr.id !248, !ValueTainted !71, !verifier.code !64 */
  $i126 := $xor.i64($i125, $i116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %129 = zext i32 %110 to i64, !dbg !225, !psr.id !249, !verifier.code !64 */
  $i127 := $zext.i32.i64($i108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %130 = getelementptr inbounds i64, i64* %2, i64 %129, !dbg !225, !psr.id !250, !verifier.code !64 */
  $p128 := $add.ref($p2, $mul.ref($i127, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %128, i64* %130, align 8, !dbg !225, !psr.id !251, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p128, $i126);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %131 = add i32 %110, 1, !dbg !225, !psr.id !252, !verifier.code !64 */
  $i129 := $add.i32($i108, 1);
  /* call void @llvm.dbg.value(metadata i32 %131, metadata !3619, metadata !DIExpression()), !dbg !3621, !psr.id !3796, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i129);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %132 = zext i32 %131 to i64, !dbg !254, !psr.id !256, !verifier.code !64 */
  $i130 := $zext.i32.i64($i129);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %133 = getelementptr inbounds i64, i64* %1, i64 %132, !dbg !254, !psr.id !257, !verifier.code !64 */
  $p131 := $add.ref($p1, $mul.ref($i130, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %134 = load i64, i64* %133, align 8, !dbg !254, !psr.id !258, !ValueTainted !71, !verifier.code !64 */
  $i132 := $load.i64($M.0, $p131);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %135 = zext i32 %131 to i64, !dbg !254, !psr.id !259, !verifier.code !64 */
  $i133 := $zext.i32.i64($i129);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %136 = getelementptr inbounds i64, i64* %2, i64 %135, !dbg !254, !psr.id !260, !verifier.code !64 */
  $p134 := $add.ref($p2, $mul.ref($i133, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %137 = load i64, i64* %136, align 8, !dbg !254, !psr.id !261, !ValueTainted !71, !verifier.code !64 */
  $i135 := $load.i64($M.0, $p134);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %138 = xor i64 %134, %137, !dbg !254, !psr.id !262, !ValueTainted !71, !verifier.code !64 */
  $i136 := $xor.i64($i132, $i135);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %139 = and i64 %4, %138, !dbg !254, !psr.id !263, !ValueTainted !71, !verifier.code !64 */
  $i137 := $and.i64($i3, $i136);
  /* call void @llvm.dbg.value(metadata i64 %139, metadata !3807, metadata !DIExpression()), !dbg !3808, !psr.id !3809, !verifier.code !64 */
  call {:cexpr "dummy"} boogie_si_record_i64($i137);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %140 = zext i32 %131 to i64, !dbg !254, !psr.id !267, !verifier.code !64 */
  $i138 := $zext.i32.i64($i129);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %141 = getelementptr inbounds i64, i64* %1, i64 %140, !dbg !254, !psr.id !268, !verifier.code !64 */
  $p139 := $add.ref($p1, $mul.ref($i138, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %142 = load i64, i64* %141, align 8, !dbg !254, !psr.id !269, !ValueTainted !71, !verifier.code !64 */
  $i140 := $load.i64($M.0, $p139);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %143 = xor i64 %142, %139, !dbg !254, !psr.id !270, !ValueTainted !71, !verifier.code !64 */
  $i141 := $xor.i64($i140, $i137);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %144 = zext i32 %131 to i64, !dbg !254, !psr.id !271, !verifier.code !64 */
  $i142 := $zext.i32.i64($i129);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %145 = getelementptr inbounds i64, i64* %1, i64 %144, !dbg !254, !psr.id !272, !verifier.code !64 */
  $p143 := $add.ref($p1, $mul.ref($i142, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %143, i64* %145, align 8, !dbg !254, !psr.id !273, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p143, $i141);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %146 = zext i32 %131 to i64, !dbg !254, !psr.id !274, !verifier.code !64 */
  $i144 := $zext.i32.i64($i129);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %147 = getelementptr inbounds i64, i64* %2, i64 %146, !dbg !254, !psr.id !275, !verifier.code !64 */
  $p145 := $add.ref($p2, $mul.ref($i144, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %148 = load i64, i64* %147, align 8, !dbg !254, !psr.id !276, !ValueTainted !71, !verifier.code !64 */
  $i146 := $load.i64($M.0, $p145);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %149 = xor i64 %148, %139, !dbg !254, !psr.id !277, !ValueTainted !71, !verifier.code !64 */
  $i147 := $xor.i64($i146, $i137);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %150 = zext i32 %131 to i64, !dbg !254, !psr.id !278, !verifier.code !64 */
  $i148 := $zext.i32.i64($i129);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %151 = getelementptr inbounds i64, i64* %2, i64 %150, !dbg !254, !psr.id !279, !verifier.code !64 */
  $p149 := $add.ref($p2, $mul.ref($i148, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %149, i64* %151, align 8, !dbg !254, !psr.id !280, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p149, $i147);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %152 = add i32 %131, 1, !dbg !254, !psr.id !281, !verifier.code !64 */
  $i150 := $add.i32($i129, 1);
  /* call void @llvm.dbg.value(metadata i32 %152, metadata !3619, metadata !DIExpression()), !dbg !3621, !psr.id !3825, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %153 = zext i32 %152 to i64, !dbg !283, !psr.id !285, !verifier.code !64 */
  $i151 := $zext.i32.i64($i150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %154 = getelementptr inbounds i64, i64* %1, i64 %153, !dbg !283, !psr.id !286, !verifier.code !64 */
  $p152 := $add.ref($p1, $mul.ref($i151, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %155 = load i64, i64* %154, align 8, !dbg !283, !psr.id !287, !ValueTainted !71, !verifier.code !64 */
  $i153 := $load.i64($M.0, $p152);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %156 = zext i32 %152 to i64, !dbg !283, !psr.id !288, !verifier.code !64 */
  $i154 := $zext.i32.i64($i150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %157 = getelementptr inbounds i64, i64* %2, i64 %156, !dbg !283, !psr.id !289, !verifier.code !64 */
  $p155 := $add.ref($p2, $mul.ref($i154, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %158 = load i64, i64* %157, align 8, !dbg !283, !psr.id !290, !ValueTainted !71, !verifier.code !64 */
  $i156 := $load.i64($M.0, $p155);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %159 = xor i64 %155, %158, !dbg !283, !psr.id !291, !ValueTainted !71, !verifier.code !64 */
  $i157 := $xor.i64($i153, $i156);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %160 = and i64 %4, %159, !dbg !283, !psr.id !292, !ValueTainted !71, !verifier.code !64 */
  $i158 := $and.i64($i3, $i157);
  /* call void @llvm.dbg.value(metadata i64 %160, metadata !3836, metadata !DIExpression()), !dbg !3837, !psr.id !3838, !verifier.code !64 */
  call {:cexpr "dummy"} boogie_si_record_i64($i158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %161 = zext i32 %152 to i64, !dbg !283, !psr.id !296, !verifier.code !64 */
  $i159 := $zext.i32.i64($i150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %162 = getelementptr inbounds i64, i64* %1, i64 %161, !dbg !283, !psr.id !297, !verifier.code !64 */
  $p160 := $add.ref($p1, $mul.ref($i159, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %163 = load i64, i64* %162, align 8, !dbg !283, !psr.id !298, !ValueTainted !71, !verifier.code !64 */
  $i161 := $load.i64($M.0, $p160);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %164 = xor i64 %163, %160, !dbg !283, !psr.id !299, !ValueTainted !71, !verifier.code !64 */
  $i162 := $xor.i64($i161, $i158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %165 = zext i32 %152 to i64, !dbg !283, !psr.id !300, !verifier.code !64 */
  $i163 := $zext.i32.i64($i150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %166 = getelementptr inbounds i64, i64* %1, i64 %165, !dbg !283, !psr.id !301, !verifier.code !64 */
  $p164 := $add.ref($p1, $mul.ref($i163, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %164, i64* %166, align 8, !dbg !283, !psr.id !302, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p164, $i162);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %167 = zext i32 %152 to i64, !dbg !283, !psr.id !303, !verifier.code !64 */
  $i165 := $zext.i32.i64($i150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %168 = getelementptr inbounds i64, i64* %2, i64 %167, !dbg !283, !psr.id !304, !verifier.code !64 */
  $p166 := $add.ref($p2, $mul.ref($i165, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %169 = load i64, i64* %168, align 8, !dbg !283, !psr.id !305, !ValueTainted !71, !verifier.code !64 */
  $i167 := $load.i64($M.0, $p166);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %170 = xor i64 %169, %160, !dbg !283, !psr.id !306, !ValueTainted !71, !verifier.code !64 */
  $i168 := $xor.i64($i167, $i158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %171 = zext i32 %152 to i64, !dbg !283, !psr.id !307, !verifier.code !64 */
  $i169 := $zext.i32.i64($i150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %172 = getelementptr inbounds i64, i64* %2, i64 %171, !dbg !283, !psr.id !308, !verifier.code !64 */
  $p170 := $add.ref($p2, $mul.ref($i169, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %170, i64* %172, align 8, !dbg !283, !psr.id !309, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p170, $i168);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %173 = add i32 %152, 1, !dbg !283, !psr.id !310, !verifier.code !64 */
  $i171 := $add.i32($i150, 1);
  /* call void @llvm.dbg.value(metadata i32 %173, metadata !3619, metadata !DIExpression()), !dbg !3621, !psr.id !3854, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i171);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %174 = zext i32 %173 to i64, !dbg !312, !psr.id !314, !verifier.code !64 */
  $i172 := $zext.i32.i64($i171);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %175 = getelementptr inbounds i64, i64* %1, i64 %174, !dbg !312, !psr.id !315, !verifier.code !64 */
  $p173 := $add.ref($p1, $mul.ref($i172, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %176 = load i64, i64* %175, align 8, !dbg !312, !psr.id !316, !ValueTainted !71, !verifier.code !64 */
  $i174 := $load.i64($M.0, $p173);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %177 = zext i32 %173 to i64, !dbg !312, !psr.id !317, !verifier.code !64 */
  $i175 := $zext.i32.i64($i171);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %178 = getelementptr inbounds i64, i64* %2, i64 %177, !dbg !312, !psr.id !318, !verifier.code !64 */
  $p176 := $add.ref($p2, $mul.ref($i175, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %179 = load i64, i64* %178, align 8, !dbg !312, !psr.id !319, !ValueTainted !71, !verifier.code !64 */
  $i177 := $load.i64($M.0, $p176);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %180 = xor i64 %176, %179, !dbg !312, !psr.id !320, !ValueTainted !71, !verifier.code !64 */
  $i178 := $xor.i64($i174, $i177);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %181 = and i64 %4, %180, !dbg !312, !psr.id !321, !ValueTainted !71, !verifier.code !64 */
  $i179 := $and.i64($i3, $i178);
  /* call void @llvm.dbg.value(metadata i64 %181, metadata !3865, metadata !DIExpression()), !dbg !3866, !psr.id !3867, !verifier.code !64 */
  call {:cexpr "dummy"} boogie_si_record_i64($i179);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %182 = zext i32 %173 to i64, !dbg !312, !psr.id !325, !verifier.code !64 */
  $i180 := $zext.i32.i64($i171);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %183 = getelementptr inbounds i64, i64* %1, i64 %182, !dbg !312, !psr.id !326, !verifier.code !64 */
  $p181 := $add.ref($p1, $mul.ref($i180, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %184 = load i64, i64* %183, align 8, !dbg !312, !psr.id !327, !ValueTainted !71, !verifier.code !64 */
  $i182 := $load.i64($M.0, $p181);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %185 = xor i64 %184, %181, !dbg !312, !psr.id !328, !ValueTainted !71, !verifier.code !64 */
  $i183 := $xor.i64($i182, $i179);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %186 = zext i32 %173 to i64, !dbg !312, !psr.id !329, !verifier.code !64 */
  $i184 := $zext.i32.i64($i171);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %187 = getelementptr inbounds i64, i64* %1, i64 %186, !dbg !312, !psr.id !330, !verifier.code !64 */
  $p185 := $add.ref($p1, $mul.ref($i184, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %185, i64* %187, align 8, !dbg !312, !psr.id !331, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p185, $i183);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %188 = zext i32 %173 to i64, !dbg !312, !psr.id !332, !verifier.code !64 */
  $i186 := $zext.i32.i64($i171);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %189 = getelementptr inbounds i64, i64* %2, i64 %188, !dbg !312, !psr.id !333, !verifier.code !64 */
  $p187 := $add.ref($p2, $mul.ref($i186, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %190 = load i64, i64* %189, align 8, !dbg !312, !psr.id !334, !ValueTainted !71, !verifier.code !64 */
  $i188 := $load.i64($M.0, $p187);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %191 = xor i64 %190, %181, !dbg !312, !psr.id !335, !ValueTainted !71, !verifier.code !64 */
  $i189 := $xor.i64($i188, $i179);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %192 = zext i32 %173 to i64, !dbg !312, !psr.id !336, !verifier.code !64 */
  $i190 := $zext.i32.i64($i171);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %193 = getelementptr inbounds i64, i64* %2, i64 %192, !dbg !312, !psr.id !337, !verifier.code !64 */
  $p191 := $add.ref($p2, $mul.ref($i190, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %191, i64* %193, align 8, !dbg !312, !psr.id !338, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p191, $i189);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %194 = add i32 %173, 1, !dbg !312, !psr.id !339, !verifier.code !64 */
  $i192 := $add.i32($i171, 1);
  /* call void @llvm.dbg.value(metadata i32 %194, metadata !3619, metadata !DIExpression()), !dbg !3621, !psr.id !3883, !verifier.code !64 */
  call {:cexpr "i"} boogie_si_record_i32($i192);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %195 = zext i32 %194 to i64, !dbg !341, !psr.id !343, !verifier.code !64 */
  $i193 := $zext.i32.i64($i192);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %196 = getelementptr inbounds i64, i64* %1, i64 %195, !dbg !341, !psr.id !344, !verifier.code !64 */
  $p194 := $add.ref($p1, $mul.ref($i193, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %197 = load i64, i64* %196, align 8, !dbg !341, !psr.id !345, !ValueTainted !71, !verifier.code !64 */
  $i195 := $load.i64($M.0, $p194);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %198 = zext i32 %194 to i64, !dbg !341, !psr.id !346, !verifier.code !64 */
  $i196 := $zext.i32.i64($i192);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %199 = getelementptr inbounds i64, i64* %2, i64 %198, !dbg !341, !psr.id !347, !verifier.code !64 */
  $p197 := $add.ref($p2, $mul.ref($i196, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %200 = load i64, i64* %199, align 8, !dbg !341, !psr.id !348, !ValueTainted !71, !verifier.code !64 */
  $i198 := $load.i64($M.0, $p197);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %201 = xor i64 %197, %200, !dbg !341, !psr.id !349, !ValueTainted !71, !verifier.code !64 */
  $i199 := $xor.i64($i195, $i198);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %202 = and i64 %4, %201, !dbg !341, !psr.id !350, !ValueTainted !71, !verifier.code !64 */
  $i200 := $and.i64($i3, $i199);
  /* call void @llvm.dbg.value(metadata i64 %202, metadata !3894, metadata !DIExpression()), !dbg !3895, !psr.id !3896, !verifier.code !64 */
  call {:cexpr "dummy"} boogie_si_record_i64($i200);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %203 = zext i32 %194 to i64, !dbg !341, !psr.id !354, !verifier.code !64 */
  $i201 := $zext.i32.i64($i192);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %204 = getelementptr inbounds i64, i64* %1, i64 %203, !dbg !341, !psr.id !355, !verifier.code !64 */
  $p202 := $add.ref($p1, $mul.ref($i201, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %205 = load i64, i64* %204, align 8, !dbg !341, !psr.id !356, !ValueTainted !71, !verifier.code !64 */
  $i203 := $load.i64($M.0, $p202);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %206 = xor i64 %205, %202, !dbg !341, !psr.id !357, !ValueTainted !71, !verifier.code !64 */
  $i204 := $xor.i64($i203, $i200);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %207 = zext i32 %194 to i64, !dbg !341, !psr.id !358, !verifier.code !64 */
  $i205 := $zext.i32.i64($i192);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %208 = getelementptr inbounds i64, i64* %1, i64 %207, !dbg !341, !psr.id !359, !verifier.code !64 */
  $p206 := $add.ref($p1, $mul.ref($i205, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %206, i64* %208, align 8, !dbg !341, !psr.id !360, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p206, $i204);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %209 = zext i32 %194 to i64, !dbg !341, !psr.id !361, !verifier.code !64 */
  $i207 := $zext.i32.i64($i192);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %210 = getelementptr inbounds i64, i64* %2, i64 %209, !dbg !341, !psr.id !362, !verifier.code !64 */
  $p208 := $add.ref($p2, $mul.ref($i207, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %211 = load i64, i64* %210, align 8, !dbg !341, !psr.id !363, !ValueTainted !71, !verifier.code !64 */
  $i209 := $load.i64($M.0, $p208);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %212 = xor i64 %211, %202, !dbg !341, !psr.id !364, !ValueTainted !71, !verifier.code !64 */
  $i210 := $xor.i64($i209, $i200);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* %213 = zext i32 %194 to i64, !dbg !341, !psr.id !365, !verifier.code !64 */
  $i211 := $zext.i32.i64($i192);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:PointTainted} true;
  /* %214 = getelementptr inbounds i64, i64* %2, i64 %213, !dbg !341, !psr.id !366, !PointTainted !367, !verifier.code !64 */
  $p212 := $add.ref($p2, $mul.ref($i211, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* store i64 %212, i64* %214, align 8, !dbg !341, !psr.id !368, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p212, $i210);
  /* call void @llvm.dbg.value(metadata i32 %194, metadata !3619, metadata !DIExpression(DW_OP_plus_uconst, 1, DW_OP_stack_value)), !dbg !3621, !psr.id !3911, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  /* br label %215, !dbg !370, !psr.id !371, !verifier.code !64 */
  goto $bb2;
$bb2:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 672, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !372, !psr.id !373, !verifier.code !64 */
  $exn := false;
  return;
}
const point_add_and_double: ref;
axiom (point_add_and_double == $sub.ref(0, 24768));
procedure {:inline 1} point_add_and_double($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $p23: ref;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $p33: ref;
  var $i34: i64;
  var $i35: i64;
  var $p36: ref;
  var $i37: i64;
  var $p38: ref;
  var $i39: i64;
  var $i40: i64;
  var $p41: ref;
  var $i42: i64;
  var $p43: ref;
  var $i44: i64;
  var $i45: i64;
  var $p46: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 36, 30} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !3917, metadata !DIExpression()), !dbg !3918, !psr.id !3919, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !3920, metadata !DIExpression()), !dbg !3918, !psr.id !3921, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128* %2, metadata !3922, metadata !DIExpression()), !dbg !3918, !psr.id !3923, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !3924, metadata !DIExpression()), !dbg !3918, !psr.id !3925, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 36, 30} true;
  assume {:verifier.code 0} true;
  /* %4 = getelementptr inbounds i64, i64* %1, i64 10, !dbg !71, !psr.id !72, !verifier.code !64 */
  $p3 := $add.ref($p1, $mul.ref(10, 8));
  /* call void @llvm.dbg.value(metadata i64* %4, metadata !3928, metadata !DIExpression()), !dbg !3918, !psr.id !3929, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 37, 29} true;
  assume {:verifier.code 0} true;
  /* %5 = getelementptr inbounds i64, i64* %1, i64 20, !dbg !75, !psr.id !76, !verifier.code !64 */
  $p4 := $add.ref($p1, $mul.ref(20, 8));
  /* call void @llvm.dbg.value(metadata i64* %5, metadata !3932, metadata !DIExpression()), !dbg !3918, !psr.id !3933, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !3934, metadata !DIExpression()), !dbg !3918, !psr.id !3935, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !3936, metadata !DIExpression()), !dbg !3918, !psr.id !3937, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 40, 21} true;
  assume {:verifier.code 0} true;
  /* %6 = getelementptr inbounds i64, i64* %1, i64 5, !dbg !83, !psr.id !84, !verifier.code !64 */
  $p5 := $add.ref($p1, $mul.ref(5, 8));
  /* call void @llvm.dbg.value(metadata i64* %6, metadata !3940, metadata !DIExpression()), !dbg !3918, !psr.id !3941, !verifier.code !64 */
  /* %.sum = add i64 10, 5 */
  $i6 := $add.i64(10, 5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 41, 24} true;
  assume {:verifier.code 0} true;
  /* %7 = getelementptr inbounds i64, i64* %1, i64 %.sum, !dbg !87, !psr.id !88, !verifier.code !64 */
  $p7 := $add.ref($p1, $mul.ref($i6, 8));
  /* call void @llvm.dbg.value(metadata i64* %7, metadata !3944, metadata !DIExpression()), !dbg !3918, !psr.id !3945, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %5, metadata !3946, metadata !DIExpression()), !dbg !3918, !psr.id !3947, !verifier.code !64 */
  /* %.sum1 = add i64 20, 5 */
  $i8 := $add.i64(20, 5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 43, 22} true;
  assume {:verifier.code 0} true;
  /* %8 = getelementptr inbounds i64, i64* %1, i64 %.sum1, !dbg !93, !psr.id !94, !verifier.code !64 */
  $p9 := $add.ref($p1, $mul.ref($i8, 8));
  /* call void @llvm.dbg.value(metadata i64* %8, metadata !3950, metadata !DIExpression()), !dbg !3918, !psr.id !3951, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %5, metadata !3952, metadata !DIExpression()), !dbg !3918, !psr.id !3953, !verifier.code !64 */
  /* %.sum2 = add i64 20, 10 */
  $i10 := $add.i64(20, 10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 45, 23} true;
  assume {:verifier.code 0} true;
  /* %9 = getelementptr inbounds i64, i64* %1, i64 %.sum2, !dbg !99, !psr.id !100, !verifier.code !64 */
  $p11 := $add.ref($p1, $mul.ref($i10, 8));
  /* call void @llvm.dbg.value(metadata i64* %9, metadata !3956, metadata !DIExpression()), !dbg !3918, !psr.id !3957, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 46, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fadd(i64* %5, i64* %1, i64* %6), !dbg !103, !psr.id !104, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fadd($p4, $p1, $p5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 47, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fsub(i64* %8, i64* %1, i64* %6), !dbg !105, !psr.id !106, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fsub($p9, $p1, $p5);
  /* call void @llvm.dbg.value(metadata i64* %4, metadata !3962, metadata !DIExpression()), !dbg !3918, !psr.id !3963, !verifier.code !64 */
  /* %.sum3 = add i64 10, 5 */
  $i12 := $add.i64(10, 5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 49, 25} true;
  assume {:verifier.code 0} true;
  /* %10 = getelementptr inbounds i64, i64* %1, i64 %.sum3, !dbg !109, !psr.id !110, !verifier.code !64 */
  $p13 := $add.ref($p1, $mul.ref($i12, 8));
  /* call void @llvm.dbg.value(metadata i64* %10, metadata !3966, metadata !DIExpression()), !dbg !3918, !psr.id !3967, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %9, metadata !3968, metadata !DIExpression()), !dbg !3918, !psr.id !3969, !verifier.code !64 */
  /* %.sum4 = add i64 %.sum2, 5 */
  $i14 := $add.i64($i10, 5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 51, 21} true;
  assume {:verifier.code 0} true;
  /* %11 = getelementptr inbounds i64, i64* %1, i64 %.sum4, !dbg !115, !psr.id !116, !verifier.code !64 */
  $p15 := $add.ref($p1, $mul.ref($i14, 8));
  /* call void @llvm.dbg.value(metadata i64* %11, metadata !3972, metadata !DIExpression()), !dbg !3918, !psr.id !3973, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 52, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fadd(i64* %11, i64* %4, i64* %10), !dbg !119, !psr.id !120, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fadd($p15, $p3, $p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 53, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fsub(i64* %9, i64* %4, i64* %10), !dbg !121, !psr.id !122, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fsub($p11, $p3, $p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 54, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul2(i64* %9, i64* %9, i64* %5, i128* %2), !dbg !123, !psr.id !124, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fmul2($p11, $p11, $p4, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 55, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fadd(i64* %4, i64* %9, i64* %11), !dbg !125, !psr.id !126, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fadd($p3, $p11, $p15);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 56, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fsub(i64* %10, i64* %9, i64* %11), !dbg !127, !psr.id !128, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fsub($p13, $p11, $p15);
  /* call void @llvm.dbg.value(metadata i64* %5, metadata !3984, metadata !DIExpression()), !dbg !3918, !psr.id !3985, !verifier.code !64 */
  /* %.sum5 = add i64 20, 5 */
  $i16 := $add.i64(20, 5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 58, 23} true;
  assume {:verifier.code 0} true;
  /* %12 = getelementptr inbounds i64, i64* %1, i64 %.sum5, !dbg !131, !psr.id !132, !verifier.code !64 */
  $p17 := $add.ref($p1, $mul.ref($i16, 8));
  /* call void @llvm.dbg.value(metadata i64* %12, metadata !3988, metadata !DIExpression()), !dbg !3918, !psr.id !3989, !verifier.code !64 */
  /* %.sum6 = add i64 20, 10 */
  $i18 := $add.i64(20, 10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 59, 22} true;
  assume {:verifier.code 0} true;
  /* %13 = getelementptr inbounds i64, i64* %1, i64 %.sum6, !dbg !135, !psr.id !136, !verifier.code !64 */
  $p19 := $add.ref($p1, $mul.ref($i18, 8));
  /* call void @llvm.dbg.value(metadata i64* %13, metadata !3992, metadata !DIExpression()), !dbg !3918, !psr.id !3993, !verifier.code !64 */
  /* %.sum7 = add i64 20, 15 */
  $i20 := $add.i64(20, 15);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 60, 22} true;
  assume {:verifier.code 0} true;
  /* %14 = getelementptr inbounds i64, i64* %1, i64 %.sum7, !dbg !139, !psr.id !140, !verifier.code !64 */
  $p21 := $add.ref($p1, $mul.ref($i20, 8));
  /* call void @llvm.dbg.value(metadata i64* %14, metadata !3996, metadata !DIExpression()), !dbg !3918, !psr.id !3997, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %5, metadata !3998, metadata !DIExpression()), !dbg !3918, !psr.id !3999, !verifier.code !64 */
  /* %.sum8 = add i64 20, 10 */
  $i22 := $add.i64(20, 10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 62, 24} true;
  assume {:verifier.code 0} true;
  /* %15 = getelementptr inbounds i64, i64* %1, i64 %.sum8, !dbg !145, !psr.id !146, !verifier.code !64 */
  $p23 := $add.ref($p1, $mul.ref($i22, 8));
  /* call void @llvm.dbg.value(metadata i64* %15, metadata !4002, metadata !DIExpression()), !dbg !3918, !psr.id !4003, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 63, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fsqr2(i64* %15, i64* %5, i128* %2), !dbg !149, !psr.id !150, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fsqr2($p23, $p4, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 64, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fsqr2(i64* %4, i64* %4, i128* %2), !dbg !151, !psr.id !152, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fsqr2($p3, $p3, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 65, 12} true;
  assume {:verifier.code 0} true;
  /* %16 = getelementptr inbounds i64, i64* %1, i64 %.sum7, !dbg !153, !psr.id !154, !verifier.code !64 */
  $p24 := $add.ref($p1, $mul.ref($i20, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 65, 12} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %17 = load i64, i64* %16, align 8, !dbg !153, !psr.id !155, !ValueTainted !156, !verifier.code !64 */
  $i25 := $load.i64($M.0, $p24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 65, 3} true;
  assume {:verifier.code 0} true;
  /* %18 = getelementptr inbounds i64, i64* %1, i64 20, !dbg !157, !psr.id !158, !verifier.code !64 */
  $p26 := $add.ref($p1, $mul.ref(20, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 65, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 %17, i64* %18, align 8, !dbg !159, !psr.id !160, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p26, $i25);
  /* %.sum9 = add i64 %.sum7, 1 */
  $i27 := $add.i64($i20, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 66, 12} true;
  assume {:verifier.code 0} true;
  /* %19 = getelementptr inbounds i64, i64* %1, i64 %.sum9, !dbg !161, !psr.id !162, !verifier.code !64 */
  $p28 := $add.ref($p1, $mul.ref($i27, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 66, 12} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %20 = load i64, i64* %19, align 8, !dbg !161, !psr.id !163, !ValueTainted !156, !verifier.code !64 */
  $i29 := $load.i64($M.0, $p28);
  /* %.sum10 = add i64 20, 1 */
  $i30 := $add.i64(20, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 66, 3} true;
  assume {:verifier.code 0} true;
  /* %21 = getelementptr inbounds i64, i64* %1, i64 %.sum10, !dbg !164, !psr.id !165, !verifier.code !64 */
  $p31 := $add.ref($p1, $mul.ref($i30, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 66, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 %20, i64* %21, align 8, !dbg !166, !psr.id !167, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p31, $i29);
  /* %.sum11 = add i64 %.sum7, 2 */
  $i32 := $add.i64($i20, 2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 67, 12} true;
  assume {:verifier.code 0} true;
  /* %22 = getelementptr inbounds i64, i64* %1, i64 %.sum11, !dbg !168, !psr.id !169, !verifier.code !64 */
  $p33 := $add.ref($p1, $mul.ref($i32, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 67, 12} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %23 = load i64, i64* %22, align 8, !dbg !168, !psr.id !170, !ValueTainted !156, !verifier.code !64 */
  $i34 := $load.i64($M.0, $p33);
  /* %.sum12 = add i64 20, 2 */
  $i35 := $add.i64(20, 2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 67, 3} true;
  assume {:verifier.code 0} true;
  /* %24 = getelementptr inbounds i64, i64* %1, i64 %.sum12, !dbg !171, !psr.id !172, !verifier.code !64 */
  $p36 := $add.ref($p1, $mul.ref($i35, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 67, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 %23, i64* %24, align 8, !dbg !173, !psr.id !174, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p36, $i34);
  /* %.sum13 = add i64 %.sum7, 3 */
  $i37 := $add.i64($i20, 3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 68, 12} true;
  assume {:verifier.code 0} true;
  /* %25 = getelementptr inbounds i64, i64* %1, i64 %.sum13, !dbg !175, !psr.id !176, !verifier.code !64 */
  $p38 := $add.ref($p1, $mul.ref($i37, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 68, 12} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %26 = load i64, i64* %25, align 8, !dbg !175, !psr.id !177, !ValueTainted !156, !verifier.code !64 */
  $i39 := $load.i64($M.0, $p38);
  /* %.sum14 = add i64 20, 3 */
  $i40 := $add.i64(20, 3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 68, 3} true;
  assume {:verifier.code 0} true;
  /* %27 = getelementptr inbounds i64, i64* %1, i64 %.sum14, !dbg !178, !psr.id !179, !verifier.code !64 */
  $p41 := $add.ref($p1, $mul.ref($i40, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 68, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 %26, i64* %27, align 8, !dbg !180, !psr.id !181, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p41, $i39);
  /* %.sum15 = add i64 %.sum7, 4 */
  $i42 := $add.i64($i20, 4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 69, 12} true;
  assume {:verifier.code 0} true;
  /* %28 = getelementptr inbounds i64, i64* %1, i64 %.sum15, !dbg !182, !psr.id !183, !verifier.code !64 */
  $p43 := $add.ref($p1, $mul.ref($i42, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 69, 12} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %29 = load i64, i64* %28, align 8, !dbg !182, !psr.id !184, !ValueTainted !156, !verifier.code !64 */
  $i44 := $load.i64($M.0, $p43);
  /* %.sum16 = add i64 20, 4 */
  $i45 := $add.i64(20, 4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 69, 3} true;
  assume {:verifier.code 0} true;
  /* %30 = getelementptr inbounds i64, i64* %1, i64 %.sum16, !dbg !185, !psr.id !186, !verifier.code !64 */
  $p46 := $add.ref($p1, $mul.ref($i45, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 69, 10} true;
  assume {:verifier.code 0} true;
  /* store i64 %29, i64* %30, align 8, !dbg !187, !psr.id !188, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p46, $i44);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 70, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fsub(i64* %14, i64* %13, i64* %14), !dbg !189, !psr.id !190, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fsub($p21, $p19, $p21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 71, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul1(i64* %12, i64* %14, i64 121665), !dbg !191, !psr.id !192, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fmul1($p17, $p21, 121665);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 72, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fadd(i64* %12, i64* %12, i64* %13), !dbg !193, !psr.id !194, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fadd($p17, $p17, $p19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 73, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul2(i64* %1, i64* %15, i64* %5, i128* %2), !dbg !195, !psr.id !196, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fmul2($p1, $p23, $p4, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 74, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul(i64* %7, i64* %7, i64* %0, i128* %2), !dbg !197, !psr.id !198, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fmul($p7, $p7, $p0, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 75, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !199, !psr.id !200, !verifier.code !64 */
  $exn := false;
  return;
}
const point_double: ref;
axiom (point_double == $sub.ref(0, 25800));
procedure {:inline 1} point_double($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $i9: i64;
  var $p10: ref;
  var $i11: i64;
  var $p12: ref;
  var $i13: i64;
  var $p14: ref;
  var $i15: i64;
  var $p16: ref;
  var $i17: i64;
  var $p18: ref;
  var $i19: i64;
  var $p20: ref;
  var $i21: i64;
  var $p22: ref;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 80, 21} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !4056, metadata !DIExpression()), !dbg !4057, !psr.id !4058, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !4059, metadata !DIExpression()), !dbg !4057, !psr.id !4060, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128* %2, metadata !4061, metadata !DIExpression()), !dbg !4057, !psr.id !4062, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !4063, metadata !DIExpression()), !dbg !4057, !psr.id !4064, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 80, 21} true;
  assume {:verifier.code 0} true;
  /* %4 = getelementptr inbounds i64, i64* %0, i64 5, !dbg !71, !psr.id !72, !verifier.code !64 */
  $p3 := $add.ref($p0, $mul.ref(5, 8));
  /* call void @llvm.dbg.value(metadata i64* %4, metadata !4067, metadata !DIExpression()), !dbg !4057, !psr.id !4068, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !4069, metadata !DIExpression()), !dbg !4057, !psr.id !4070, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 82, 22} true;
  assume {:verifier.code 0} true;
  /* %5 = getelementptr inbounds i64, i64* %1, i64 5, !dbg !77, !psr.id !78, !verifier.code !64 */
  $p4 := $add.ref($p1, $mul.ref(5, 8));
  /* call void @llvm.dbg.value(metadata i64* %5, metadata !4073, metadata !DIExpression()), !dbg !4057, !psr.id !4074, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 83, 22} true;
  assume {:verifier.code 0} true;
  /* %6 = getelementptr inbounds i64, i64* %1, i64 10, !dbg !81, !psr.id !82, !verifier.code !64 */
  $p5 := $add.ref($p1, $mul.ref(10, 8));
  /* call void @llvm.dbg.value(metadata i64* %6, metadata !4077, metadata !DIExpression()), !dbg !4057, !psr.id !4078, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 84, 22} true;
  assume {:verifier.code 0} true;
  /* %7 = getelementptr inbounds i64, i64* %1, i64 15, !dbg !85, !psr.id !86, !verifier.code !64 */
  $p6 := $add.ref($p1, $mul.ref(15, 8));
  /* call void @llvm.dbg.value(metadata i64* %7, metadata !4081, metadata !DIExpression()), !dbg !4057, !psr.id !4082, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !4083, metadata !DIExpression()), !dbg !4057, !psr.id !4084, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 86, 23} true;
  assume {:verifier.code 0} true;
  /* %8 = getelementptr inbounds i64, i64* %1, i64 10, !dbg !91, !psr.id !92, !verifier.code !64 */
  $p7 := $add.ref($p1, $mul.ref(10, 8));
  /* call void @llvm.dbg.value(metadata i64* %8, metadata !4087, metadata !DIExpression()), !dbg !4057, !psr.id !4088, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 87, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fadd(i64* %1, i64* %0, i64* %4), !dbg !95, !psr.id !96, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fadd($p1, $p0, $p3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 88, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fsub(i64* %5, i64* %0, i64* %4), !dbg !97, !psr.id !98, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fsub($p4, $p0, $p3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 89, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fsqr2(i64* %8, i64* %1, i128* %2), !dbg !99, !psr.id !100, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fsqr2($p7, $p1, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 90, 11} true;
  assume {:verifier.code 0} true;
  /* %9 = getelementptr inbounds i64, i64* %1, i64 15, !dbg !101, !psr.id !102, !verifier.code !64 */
  $p8 := $add.ref($p1, $mul.ref(15, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 90, 11} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %10 = load i64, i64* %9, align 8, !dbg !101, !psr.id !103, !ValueTainted !104, !verifier.code !64 */
  $i9 := $load.i64($M.0, $p8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 90, 3} true;
  assume {:verifier.code 0} true;
  /* %11 = getelementptr inbounds i64, i64* %1, i64 0, !dbg !105, !psr.id !106, !verifier.code !64 */
  $p10 := $add.ref($p1, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 90, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %10, i64* %11, align 8, !dbg !107, !psr.id !108, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p10, $i9);
  /* %.sum = add i64 15, 1 */
  $i11 := $add.i64(15, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 91, 11} true;
  assume {:verifier.code 0} true;
  /* %12 = getelementptr inbounds i64, i64* %1, i64 %.sum, !dbg !109, !psr.id !110, !verifier.code !64 */
  $p12 := $add.ref($p1, $mul.ref($i11, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 91, 11} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %13 = load i64, i64* %12, align 8, !dbg !109, !psr.id !111, !ValueTainted !104, !verifier.code !64 */
  $i13 := $load.i64($M.0, $p12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 91, 3} true;
  assume {:verifier.code 0} true;
  /* %14 = getelementptr inbounds i64, i64* %1, i64 1, !dbg !112, !psr.id !113, !verifier.code !64 */
  $p14 := $add.ref($p1, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 91, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %13, i64* %14, align 8, !dbg !114, !psr.id !115, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p14, $i13);
  /* %.sum1 = add i64 15, 2 */
  $i15 := $add.i64(15, 2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 92, 11} true;
  assume {:verifier.code 0} true;
  /* %15 = getelementptr inbounds i64, i64* %1, i64 %.sum1, !dbg !116, !psr.id !117, !verifier.code !64 */
  $p16 := $add.ref($p1, $mul.ref($i15, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 92, 11} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %16 = load i64, i64* %15, align 8, !dbg !116, !psr.id !118, !ValueTainted !104, !verifier.code !64 */
  $i17 := $load.i64($M.0, $p16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 92, 3} true;
  assume {:verifier.code 0} true;
  /* %17 = getelementptr inbounds i64, i64* %1, i64 2, !dbg !119, !psr.id !120, !verifier.code !64 */
  $p18 := $add.ref($p1, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 92, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %16, i64* %17, align 8, !dbg !121, !psr.id !122, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p18, $i17);
  /* %.sum2 = add i64 15, 3 */
  $i19 := $add.i64(15, 3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 93, 11} true;
  assume {:verifier.code 0} true;
  /* %18 = getelementptr inbounds i64, i64* %1, i64 %.sum2, !dbg !123, !psr.id !124, !verifier.code !64 */
  $p20 := $add.ref($p1, $mul.ref($i19, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 93, 11} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %19 = load i64, i64* %18, align 8, !dbg !123, !psr.id !125, !ValueTainted !104, !verifier.code !64 */
  $i21 := $load.i64($M.0, $p20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 93, 3} true;
  assume {:verifier.code 0} true;
  /* %20 = getelementptr inbounds i64, i64* %1, i64 3, !dbg !126, !psr.id !127, !verifier.code !64 */
  $p22 := $add.ref($p1, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 93, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %19, i64* %20, align 8, !dbg !128, !psr.id !129, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p22, $i21);
  /* %.sum3 = add i64 15, 4 */
  $i23 := $add.i64(15, 4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 94, 11} true;
  assume {:verifier.code 0} true;
  /* %21 = getelementptr inbounds i64, i64* %1, i64 %.sum3, !dbg !130, !psr.id !131, !verifier.code !64 */
  $p24 := $add.ref($p1, $mul.ref($i23, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 94, 11} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %22 = load i64, i64* %21, align 8, !dbg !130, !psr.id !132, !ValueTainted !104, !verifier.code !64 */
  $i25 := $load.i64($M.0, $p24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 94, 3} true;
  assume {:verifier.code 0} true;
  /* %23 = getelementptr inbounds i64, i64* %1, i64 4, !dbg !133, !psr.id !134, !verifier.code !64 */
  $p26 := $add.ref($p1, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 94, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %22, i64* %23, align 8, !dbg !135, !psr.id !136, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p26, $i25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 95, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fsub(i64* %7, i64* %6, i64* %7), !dbg !137, !psr.id !138, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fsub($p6, $p5, $p6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 96, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul1(i64* %5, i64* %7, i64 121665), !dbg !139, !psr.id !140, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fmul1($p4, $p6, 121665);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 97, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fadd(i64* %5, i64* %5, i64* %6), !dbg !141, !psr.id !142, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fadd($p4, $p4, $p5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 98, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Impl_Curve25519_Field51_fmul2(i64* %0, i64* %8, i64* %1, i128* %2), !dbg !143, !psr.id !144, !verifier.code !64 */
  call Hacl_Impl_Curve25519_Field51_fmul2($p0, $p7, $p1, $p2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 99, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !145, !psr.id !146, !verifier.code !64 */
  $exn := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_fadd: ref;
axiom (Hacl_Impl_Curve25519_Field51_fadd == $sub.ref(0, 26832));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fadd($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $p24: ref;
  var $i25: i64;
  var $p26: ref;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $p30: ref;
  var $i31: i64;
  var $p32: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 43, 18} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !4143, metadata !DIExpression()), !dbg !4144, !psr.id !4145, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !4146, metadata !DIExpression()), !dbg !4144, !psr.id !4147, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %2, metadata !4148, metadata !DIExpression()), !dbg !4144, !psr.id !4149, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 43, 18} true;
  assume {:verifier.code 0} true;
  /* %4 = getelementptr inbounds i64, i64* %1, i64 0, !dbg !69, !psr.id !70, !verifier.code !64 */
  $p3 := $add.ref($p1, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 43, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %5 = load i64, i64* %4, align 8, !dbg !69, !psr.id !71, !ValueTainted !72, !verifier.code !64 */
  $i4 := $load.i64($M.0, $p3);
  /* call void @llvm.dbg.value(metadata i64 %5, metadata !4153, metadata !DIExpression()), !dbg !4144, !psr.id !4154, !verifier.code !64 */
  call {:cexpr "f10"} boogie_si_record_i64($i4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 44, 18} true;
  assume {:verifier.code 0} true;
  /* %6 = getelementptr inbounds i64, i64* %2, i64 0, !dbg !75, !psr.id !76, !verifier.code !64 */
  $p5 := $add.ref($p2, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 44, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %7 = load i64, i64* %6, align 8, !dbg !75, !psr.id !77, !ValueTainted !72, !verifier.code !64 */
  $i6 := $load.i64($M.0, $p5);
  /* call void @llvm.dbg.value(metadata i64 %7, metadata !4158, metadata !DIExpression()), !dbg !4144, !psr.id !4159, !verifier.code !64 */
  call {:cexpr "f20"} boogie_si_record_i64($i6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 45, 18} true;
  assume {:verifier.code 0} true;
  /* %8 = getelementptr inbounds i64, i64* %1, i64 1, !dbg !80, !psr.id !81, !verifier.code !64 */
  $p7 := $add.ref($p1, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 45, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %9 = load i64, i64* %8, align 8, !dbg !80, !psr.id !82, !ValueTainted !72, !verifier.code !64 */
  $i8 := $load.i64($M.0, $p7);
  /* call void @llvm.dbg.value(metadata i64 %9, metadata !4163, metadata !DIExpression()), !dbg !4144, !psr.id !4164, !verifier.code !64 */
  call {:cexpr "f11"} boogie_si_record_i64($i8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 46, 18} true;
  assume {:verifier.code 0} true;
  /* %10 = getelementptr inbounds i64, i64* %2, i64 1, !dbg !85, !psr.id !86, !verifier.code !64 */
  $p9 := $add.ref($p2, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 46, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %11 = load i64, i64* %10, align 8, !dbg !85, !psr.id !87, !ValueTainted !72, !verifier.code !64 */
  $i10 := $load.i64($M.0, $p9);
  /* call void @llvm.dbg.value(metadata i64 %11, metadata !4168, metadata !DIExpression()), !dbg !4144, !psr.id !4169, !verifier.code !64 */
  call {:cexpr "f21"} boogie_si_record_i64($i10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 47, 18} true;
  assume {:verifier.code 0} true;
  /* %12 = getelementptr inbounds i64, i64* %1, i64 2, !dbg !90, !psr.id !91, !verifier.code !64 */
  $p11 := $add.ref($p1, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 47, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %13 = load i64, i64* %12, align 8, !dbg !90, !psr.id !92, !ValueTainted !72, !verifier.code !64 */
  $i12 := $load.i64($M.0, $p11);
  /* call void @llvm.dbg.value(metadata i64 %13, metadata !4173, metadata !DIExpression()), !dbg !4144, !psr.id !4174, !verifier.code !64 */
  call {:cexpr "f12"} boogie_si_record_i64($i12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 48, 18} true;
  assume {:verifier.code 0} true;
  /* %14 = getelementptr inbounds i64, i64* %2, i64 2, !dbg !95, !psr.id !96, !verifier.code !64 */
  $p13 := $add.ref($p2, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 48, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %15 = load i64, i64* %14, align 8, !dbg !95, !psr.id !97, !ValueTainted !72, !verifier.code !64 */
  $i14 := $load.i64($M.0, $p13);
  /* call void @llvm.dbg.value(metadata i64 %15, metadata !4178, metadata !DIExpression()), !dbg !4144, !psr.id !4179, !verifier.code !64 */
  call {:cexpr "f22"} boogie_si_record_i64($i14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 49, 18} true;
  assume {:verifier.code 0} true;
  /* %16 = getelementptr inbounds i64, i64* %1, i64 3, !dbg !100, !psr.id !101, !verifier.code !64 */
  $p15 := $add.ref($p1, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 49, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %17 = load i64, i64* %16, align 8, !dbg !100, !psr.id !102, !ValueTainted !72, !verifier.code !64 */
  $i16 := $load.i64($M.0, $p15);
  /* call void @llvm.dbg.value(metadata i64 %17, metadata !4183, metadata !DIExpression()), !dbg !4144, !psr.id !4184, !verifier.code !64 */
  call {:cexpr "f13"} boogie_si_record_i64($i16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 50, 18} true;
  assume {:verifier.code 0} true;
  /* %18 = getelementptr inbounds i64, i64* %2, i64 3, !dbg !105, !psr.id !106, !verifier.code !64 */
  $p17 := $add.ref($p2, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 50, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %19 = load i64, i64* %18, align 8, !dbg !105, !psr.id !107, !ValueTainted !72, !verifier.code !64 */
  $i18 := $load.i64($M.0, $p17);
  /* call void @llvm.dbg.value(metadata i64 %19, metadata !4188, metadata !DIExpression()), !dbg !4144, !psr.id !4189, !verifier.code !64 */
  call {:cexpr "f23"} boogie_si_record_i64($i18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 51, 18} true;
  assume {:verifier.code 0} true;
  /* %20 = getelementptr inbounds i64, i64* %1, i64 4, !dbg !110, !psr.id !111, !verifier.code !64 */
  $p19 := $add.ref($p1, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 51, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %21 = load i64, i64* %20, align 8, !dbg !110, !psr.id !112, !ValueTainted !72, !verifier.code !64 */
  $i20 := $load.i64($M.0, $p19);
  /* call void @llvm.dbg.value(metadata i64 %21, metadata !4193, metadata !DIExpression()), !dbg !4144, !psr.id !4194, !verifier.code !64 */
  call {:cexpr "f14"} boogie_si_record_i64($i20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 52, 18} true;
  assume {:verifier.code 0} true;
  /* %22 = getelementptr inbounds i64, i64* %2, i64 4, !dbg !115, !psr.id !116, !verifier.code !64 */
  $p21 := $add.ref($p2, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 52, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %23 = load i64, i64* %22, align 8, !dbg !115, !psr.id !117, !ValueTainted !72, !verifier.code !64 */
  $i22 := $load.i64($M.0, $p21);
  /* call void @llvm.dbg.value(metadata i64 %23, metadata !4198, metadata !DIExpression()), !dbg !4144, !psr.id !4199, !verifier.code !64 */
  call {:cexpr "f24"} boogie_si_record_i64($i22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 53, 17} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %24 = add i64 %5, %7, !dbg !120, !psr.id !121, !ValueTainted !72, !verifier.code !64 */
  $i23 := $add.i64($i4, $i6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 53, 3} true;
  assume {:verifier.code 0} true;
  /* %25 = getelementptr inbounds i64, i64* %0, i64 0, !dbg !122, !psr.id !123, !verifier.code !64 */
  $p24 := $add.ref($p0, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 53, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %24, i64* %25, align 8, !dbg !124, !psr.id !125, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p24, $i23);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 54, 17} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %26 = add i64 %9, %11, !dbg !126, !psr.id !127, !ValueTainted !72, !verifier.code !64 */
  $i25 := $add.i64($i8, $i10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 54, 3} true;
  assume {:verifier.code 0} true;
  /* %27 = getelementptr inbounds i64, i64* %0, i64 1, !dbg !128, !psr.id !129, !verifier.code !64 */
  $p26 := $add.ref($p0, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 54, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %26, i64* %27, align 8, !dbg !130, !psr.id !131, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p26, $i25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 55, 17} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %28 = add i64 %13, %15, !dbg !132, !psr.id !133, !ValueTainted !72, !verifier.code !64 */
  $i27 := $add.i64($i12, $i14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 55, 3} true;
  assume {:verifier.code 0} true;
  /* %29 = getelementptr inbounds i64, i64* %0, i64 2, !dbg !134, !psr.id !135, !verifier.code !64 */
  $p28 := $add.ref($p0, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 55, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %28, i64* %29, align 8, !dbg !136, !psr.id !137, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p28, $i27);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 56, 17} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %30 = add i64 %17, %19, !dbg !138, !psr.id !139, !ValueTainted !72, !verifier.code !64 */
  $i29 := $add.i64($i16, $i18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 56, 3} true;
  assume {:verifier.code 0} true;
  /* %31 = getelementptr inbounds i64, i64* %0, i64 3, !dbg !140, !psr.id !141, !verifier.code !64 */
  $p30 := $add.ref($p0, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 56, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %30, i64* %31, align 8, !dbg !142, !psr.id !143, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p30, $i29);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 57, 17} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %32 = add i64 %21, %23, !dbg !144, !psr.id !145, !ValueTainted !72, !verifier.code !64 */
  $i31 := $add.i64($i20, $i22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 57, 3} true;
  assume {:verifier.code 0} true;
  /* %33 = getelementptr inbounds i64, i64* %0, i64 4, !dbg !146, !psr.id !147, !verifier.code !64 */
  $p32 := $add.ref($p0, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 57, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %32, i64* %33, align 8, !dbg !148, !psr.id !149, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p32, $i31);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 58, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !150, !psr.id !151, !verifier.code !64 */
  $exn := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_fsub: ref;
axiom (Hacl_Impl_Curve25519_Field51_fsub == $sub.ref(0, 27864));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fsub($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $i4: i64;
  var $p5: ref;
  var $i6: i64;
  var $p7: ref;
  var $i8: i64;
  var $p9: ref;
  var $i10: i64;
  var $p11: ref;
  var $i12: i64;
  var $p13: ref;
  var $i14: i64;
  var $p15: ref;
  var $i16: i64;
  var $p17: ref;
  var $i18: i64;
  var $p19: ref;
  var $i20: i64;
  var $p21: ref;
  var $i22: i64;
  var $i23: i64;
  var $i24: i64;
  var $p25: ref;
  var $i26: i64;
  var $i27: i64;
  var $p28: ref;
  var $i29: i64;
  var $i30: i64;
  var $p31: ref;
  var $i32: i64;
  var $i33: i64;
  var $p34: ref;
  var $i35: i64;
  var $i36: i64;
  var $p37: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 62, 18} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !4233, metadata !DIExpression()), !dbg !4234, !psr.id !4235, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !4236, metadata !DIExpression()), !dbg !4234, !psr.id !4237, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %2, metadata !4238, metadata !DIExpression()), !dbg !4234, !psr.id !4239, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 62, 18} true;
  assume {:verifier.code 0} true;
  /* %4 = getelementptr inbounds i64, i64* %1, i64 0, !dbg !69, !psr.id !70, !verifier.code !64 */
  $p3 := $add.ref($p1, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 62, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %5 = load i64, i64* %4, align 8, !dbg !69, !psr.id !71, !ValueTainted !72, !verifier.code !64 */
  $i4 := $load.i64($M.0, $p3);
  /* call void @llvm.dbg.value(metadata i64 %5, metadata !4243, metadata !DIExpression()), !dbg !4234, !psr.id !4244, !verifier.code !64 */
  call {:cexpr "f10"} boogie_si_record_i64($i4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 63, 18} true;
  assume {:verifier.code 0} true;
  /* %6 = getelementptr inbounds i64, i64* %2, i64 0, !dbg !75, !psr.id !76, !verifier.code !64 */
  $p5 := $add.ref($p2, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 63, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %7 = load i64, i64* %6, align 8, !dbg !75, !psr.id !77, !ValueTainted !72, !verifier.code !64 */
  $i6 := $load.i64($M.0, $p5);
  /* call void @llvm.dbg.value(metadata i64 %7, metadata !4248, metadata !DIExpression()), !dbg !4234, !psr.id !4249, !verifier.code !64 */
  call {:cexpr "f20"} boogie_si_record_i64($i6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 64, 18} true;
  assume {:verifier.code 0} true;
  /* %8 = getelementptr inbounds i64, i64* %1, i64 1, !dbg !80, !psr.id !81, !verifier.code !64 */
  $p7 := $add.ref($p1, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 64, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %9 = load i64, i64* %8, align 8, !dbg !80, !psr.id !82, !ValueTainted !72, !verifier.code !64 */
  $i8 := $load.i64($M.0, $p7);
  /* call void @llvm.dbg.value(metadata i64 %9, metadata !4253, metadata !DIExpression()), !dbg !4234, !psr.id !4254, !verifier.code !64 */
  call {:cexpr "f11"} boogie_si_record_i64($i8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 65, 18} true;
  assume {:verifier.code 0} true;
  /* %10 = getelementptr inbounds i64, i64* %2, i64 1, !dbg !85, !psr.id !86, !verifier.code !64 */
  $p9 := $add.ref($p2, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 65, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %11 = load i64, i64* %10, align 8, !dbg !85, !psr.id !87, !ValueTainted !72, !verifier.code !64 */
  $i10 := $load.i64($M.0, $p9);
  /* call void @llvm.dbg.value(metadata i64 %11, metadata !4258, metadata !DIExpression()), !dbg !4234, !psr.id !4259, !verifier.code !64 */
  call {:cexpr "f21"} boogie_si_record_i64($i10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 66, 18} true;
  assume {:verifier.code 0} true;
  /* %12 = getelementptr inbounds i64, i64* %1, i64 2, !dbg !90, !psr.id !91, !verifier.code !64 */
  $p11 := $add.ref($p1, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 66, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %13 = load i64, i64* %12, align 8, !dbg !90, !psr.id !92, !ValueTainted !72, !verifier.code !64 */
  $i12 := $load.i64($M.0, $p11);
  /* call void @llvm.dbg.value(metadata i64 %13, metadata !4263, metadata !DIExpression()), !dbg !4234, !psr.id !4264, !verifier.code !64 */
  call {:cexpr "f12"} boogie_si_record_i64($i12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 67, 18} true;
  assume {:verifier.code 0} true;
  /* %14 = getelementptr inbounds i64, i64* %2, i64 2, !dbg !95, !psr.id !96, !verifier.code !64 */
  $p13 := $add.ref($p2, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 67, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %15 = load i64, i64* %14, align 8, !dbg !95, !psr.id !97, !ValueTainted !72, !verifier.code !64 */
  $i14 := $load.i64($M.0, $p13);
  /* call void @llvm.dbg.value(metadata i64 %15, metadata !4268, metadata !DIExpression()), !dbg !4234, !psr.id !4269, !verifier.code !64 */
  call {:cexpr "f22"} boogie_si_record_i64($i14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 68, 18} true;
  assume {:verifier.code 0} true;
  /* %16 = getelementptr inbounds i64, i64* %1, i64 3, !dbg !100, !psr.id !101, !verifier.code !64 */
  $p15 := $add.ref($p1, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 68, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %17 = load i64, i64* %16, align 8, !dbg !100, !psr.id !102, !ValueTainted !72, !verifier.code !64 */
  $i16 := $load.i64($M.0, $p15);
  /* call void @llvm.dbg.value(metadata i64 %17, metadata !4273, metadata !DIExpression()), !dbg !4234, !psr.id !4274, !verifier.code !64 */
  call {:cexpr "f13"} boogie_si_record_i64($i16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 69, 18} true;
  assume {:verifier.code 0} true;
  /* %18 = getelementptr inbounds i64, i64* %2, i64 3, !dbg !105, !psr.id !106, !verifier.code !64 */
  $p17 := $add.ref($p2, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 69, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %19 = load i64, i64* %18, align 8, !dbg !105, !psr.id !107, !ValueTainted !72, !verifier.code !64 */
  $i18 := $load.i64($M.0, $p17);
  /* call void @llvm.dbg.value(metadata i64 %19, metadata !4278, metadata !DIExpression()), !dbg !4234, !psr.id !4279, !verifier.code !64 */
  call {:cexpr "f23"} boogie_si_record_i64($i18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 70, 18} true;
  assume {:verifier.code 0} true;
  /* %20 = getelementptr inbounds i64, i64* %1, i64 4, !dbg !110, !psr.id !111, !verifier.code !64 */
  $p19 := $add.ref($p1, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 70, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %21 = load i64, i64* %20, align 8, !dbg !110, !psr.id !112, !ValueTainted !72, !verifier.code !64 */
  $i20 := $load.i64($M.0, $p19);
  /* call void @llvm.dbg.value(metadata i64 %21, metadata !4283, metadata !DIExpression()), !dbg !4234, !psr.id !4284, !verifier.code !64 */
  call {:cexpr "f14"} boogie_si_record_i64($i20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 71, 18} true;
  assume {:verifier.code 0} true;
  /* %22 = getelementptr inbounds i64, i64* %2, i64 4, !dbg !115, !psr.id !116, !verifier.code !64 */
  $p21 := $add.ref($p2, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 71, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %23 = load i64, i64* %22, align 8, !dbg !115, !psr.id !117, !ValueTainted !72, !verifier.code !64 */
  $i22 := $load.i64($M.0, $p21);
  /* call void @llvm.dbg.value(metadata i64 %23, metadata !4288, metadata !DIExpression()), !dbg !4234, !psr.id !4289, !verifier.code !64 */
  call {:cexpr "f24"} boogie_si_record_i64($i22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 72, 17} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %24 = add i64 %5, 18014398509481832, !dbg !120, !psr.id !121, !ValueTainted !72, !verifier.code !64 */
  $i23 := $add.i64($i4, 18014398509481832);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 72, 47} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %25 = sub i64 %24, %7, !dbg !122, !psr.id !123, !ValueTainted !72, !verifier.code !64 */
  $i24 := $sub.i64($i23, $i6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 72, 3} true;
  assume {:verifier.code 0} true;
  /* %26 = getelementptr inbounds i64, i64* %0, i64 0, !dbg !124, !psr.id !125, !verifier.code !64 */
  $p25 := $add.ref($p0, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 72, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %25, i64* %26, align 8, !dbg !126, !psr.id !127, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p25, $i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 73, 17} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %27 = add i64 %9, 18014398509481976, !dbg !128, !psr.id !129, !ValueTainted !72, !verifier.code !64 */
  $i26 := $add.i64($i8, 18014398509481976);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 73, 47} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %28 = sub i64 %27, %11, !dbg !130, !psr.id !131, !ValueTainted !72, !verifier.code !64 */
  $i27 := $sub.i64($i26, $i10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 73, 3} true;
  assume {:verifier.code 0} true;
  /* %29 = getelementptr inbounds i64, i64* %0, i64 1, !dbg !132, !psr.id !133, !verifier.code !64 */
  $p28 := $add.ref($p0, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 73, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %28, i64* %29, align 8, !dbg !134, !psr.id !135, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p28, $i27);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 74, 17} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %30 = add i64 %13, 18014398509481976, !dbg !136, !psr.id !137, !ValueTainted !72, !verifier.code !64 */
  $i29 := $add.i64($i12, 18014398509481976);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 74, 47} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %31 = sub i64 %30, %15, !dbg !138, !psr.id !139, !ValueTainted !72, !verifier.code !64 */
  $i30 := $sub.i64($i29, $i14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 74, 3} true;
  assume {:verifier.code 0} true;
  /* %32 = getelementptr inbounds i64, i64* %0, i64 2, !dbg !140, !psr.id !141, !verifier.code !64 */
  $p31 := $add.ref($p0, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 74, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %31, i64* %32, align 8, !dbg !142, !psr.id !143, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p31, $i30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 75, 17} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %33 = add i64 %17, 18014398509481976, !dbg !144, !psr.id !145, !ValueTainted !72, !verifier.code !64 */
  $i32 := $add.i64($i16, 18014398509481976);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 75, 47} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %34 = sub i64 %33, %19, !dbg !146, !psr.id !147, !ValueTainted !72, !verifier.code !64 */
  $i33 := $sub.i64($i32, $i18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 75, 3} true;
  assume {:verifier.code 0} true;
  /* %35 = getelementptr inbounds i64, i64* %0, i64 3, !dbg !148, !psr.id !149, !verifier.code !64 */
  $p34 := $add.ref($p0, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 75, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %34, i64* %35, align 8, !dbg !150, !psr.id !151, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p34, $i33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 76, 17} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %36 = add i64 %21, 18014398509481976, !dbg !152, !psr.id !153, !ValueTainted !72, !verifier.code !64 */
  $i35 := $add.i64($i20, 18014398509481976);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 76, 47} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %37 = sub i64 %36, %23, !dbg !154, !psr.id !155, !ValueTainted !72, !verifier.code !64 */
  $i36 := $sub.i64($i35, $i22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 76, 3} true;
  assume {:verifier.code 0} true;
  /* %38 = getelementptr inbounds i64, i64* %0, i64 4, !dbg !156, !psr.id !157, !verifier.code !64 */
  $p37 := $add.ref($p0, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 76, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %37, i64* %38, align 8, !dbg !158, !psr.id !159, !verifier.code !64 */
  $M.0 := $store.i64($M.0, $p37, $i36);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 77, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !160, !psr.id !161, !verifier.code !64 */
  $exn := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_fsqr2: ref;
axiom (Hacl_Impl_Curve25519_Field51_fsqr2 == $sub.ref(0, 28896));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fsqr2($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $i174: i64;
  var $p175: ref;
  var $i176: i64;
  var $p177: ref;
  var $i178: i64;
  var $p179: ref;
  var $i180: i64;
  var $p181: ref;
  var $i182: i64;
  var $p183: ref;
  var $i184: i64;
  var $p185: ref;
  var $i186: i64;
  var $p187: ref;
  var $i188: i64;
  var $p189: ref;
  var $i190: i64;
  var $p191: ref;
  var $i192: i64;
  var $i193: i64;
  var $i194: i64;
  var $i195: i64;
  var $i196: i64;
  var $i197: i64;
  var $i198: i64;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $i202: i64;
  var $p203: ref;
  var $i204: i64;
  var $i205: i128;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $i209: i64;
  var $p210: ref;
  var $i211: i64;
  var $i212: i128;
  var $p213: ref;
  var $p214: ref;
  var $i215: i64;
  var $p216: ref;
  var $i217: i64;
  var $p218: ref;
  var $p219: ref;
  var $i220: i64;
  var $p221: ref;
  var $i222: i64;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $i226: i64;
  var $p227: ref;
  var $i228: i64;
  var $i229: i128;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $i233: i64;
  var $p234: ref;
  var $i235: i64;
  var $i236: i128;
  var $p237: ref;
  var $p238: ref;
  var $i239: i64;
  var $p240: ref;
  var $i241: i64;
  var $p242: ref;
  var $p243: ref;
  var $i244: i64;
  var $p245: ref;
  var $i246: i64;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $i250: i64;
  var $p251: ref;
  var $i252: i64;
  var $i253: i128;
  var $p254: ref;
  var $p255: ref;
  var $p256: ref;
  var $i257: i64;
  var $p258: ref;
  var $i259: i64;
  var $i260: i128;
  var $p261: ref;
  var $p262: ref;
  var $p263: ref;
  var $i264: i64;
  var $p265: ref;
  var $i266: i64;
  var $i267: i128;
  var $p268: ref;
  var $p269: ref;
  var $i270: i64;
  var $p271: ref;
  var $i272: i64;
  var $p273: ref;
  var $p274: ref;
  var $i275: i64;
  var $p276: ref;
  var $i277: i64;
  var $p278: ref;
  var $p279: ref;
  var $p280: ref;
  var $i281: i64;
  var $p282: ref;
  var $i283: i64;
  var $i284: i128;
  var $p285: ref;
  var $p286: ref;
  var $p287: ref;
  var $i288: i64;
  var $p289: ref;
  var $i290: i64;
  var $i291: i128;
  var $p292: ref;
  var $p293: ref;
  var $i294: i64;
  var $p295: ref;
  var $i296: i64;
  var $p297: ref;
  var $p298: ref;
  var $i299: i64;
  var $p300: ref;
  var $i301: i64;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $i305: i64;
  var $p306: ref;
  var $i307: i64;
  var $i308: i128;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $i312: i64;
  var $p313: ref;
  var $i314: i64;
  var $i315: i128;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $i319: i64;
  var $p320: ref;
  var $i321: i64;
  var $i322: i128;
  var $p323: ref;
  var $p324: ref;
  var $i325: i64;
  var $p326: ref;
  var $i327: i64;
  var $p328: ref;
  var $p329: ref;
  var $i330: i64;
  var $p331: ref;
  var $i332: i64;
  var $p333: ref;
  var $p334: ref;
  var $p335: ref;
  var $i336: i64;
  var $p337: ref;
  var $i338: i64;
  var $i339: i128;
  var $p340: ref;
  var $p341: ref;
  var $p342: ref;
  var $i343: i64;
  var $p344: ref;
  var $i345: i64;
  var $i346: i128;
  var $p347: ref;
  var $p348: ref;
  var $i349: i64;
  var $p350: ref;
  var $i351: i64;
  var $p352: ref;
  var $p353: ref;
  var $i354: i64;
  var $p355: ref;
  var $i356: i64;
  var $p357: ref;
  var $p358: ref;
  var $p359: ref;
  var $i360: i64;
  var $p361: ref;
  var $i362: i64;
  var $i363: i128;
  var $p364: ref;
  var $p365: ref;
  var $p366: ref;
  var $i367: i64;
  var $p368: ref;
  var $i369: i64;
  var $i370: i128;
  var $p371: ref;
  var $p372: ref;
  var $p373: ref;
  var $i374: i64;
  var $p375: ref;
  var $i376: i64;
  var $i377: i128;
  var $p378: ref;
  var $p379: ref;
  var $i380: i64;
  var $p381: ref;
  var $i382: i64;
  var $p383: ref;
  var $p384: ref;
  var $i385: i64;
  var $p386: ref;
  var $i387: i64;
  var $p388: ref;
  var $p389: ref;
  var $p390: ref;
  var $i391: i64;
  var $p392: ref;
  var $i393: i64;
  var $i394: i128;
  var $p395: ref;
  var $p396: ref;
  var $p397: ref;
  var $i398: i64;
  var $p399: ref;
  var $i400: i64;
  var $i401: i128;
  var $p402: ref;
  var $p403: ref;
  var $i404: i64;
  var $p405: ref;
  var $i406: i64;
  var $p407: ref;
  var $p408: ref;
  var $i409: i64;
  var $p410: ref;
  var $i411: i64;
  var $p412: ref;
  var $p413: ref;
  var $p414: ref;
  var $i415: i64;
  var $p416: ref;
  var $i417: i64;
  var $i418: i128;
  var $p419: ref;
  var $p420: ref;
  var $p421: ref;
  var $i422: i64;
  var $p423: ref;
  var $i424: i64;
  var $i425: i128;
  var $p426: ref;
  var $p427: ref;
  var $p428: ref;
  var $i429: i64;
  var $p430: ref;
  var $i431: i64;
  var $i432: i128;
  var $p433: ref;
  var $p434: ref;
  var $i435: i64;
  var $p436: ref;
  var $i437: i64;
  var $p438: ref;
  var $p439: ref;
  var $i440: i64;
  var $p441: ref;
  var $i442: i64;
  var $p443: ref;
  var $p444: ref;
  var $p445: ref;
  var $i446: i64;
  var $p447: ref;
  var $i448: i64;
  var $i449: i128;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $i453: i64;
  var $p454: ref;
  var $i455: i64;
  var $i456: i128;
  var $p457: ref;
  var $p458: ref;
  var $i459: i64;
  var $p460: ref;
  var $i461: i64;
  var $p462: ref;
  var $p463: ref;
  var $i464: i64;
  var $p465: ref;
  var $i466: i64;
  var $p467: ref;
  var $p468: ref;
  var $p469: ref;
  var $i470: i64;
  var $p471: ref;
  var $i472: i64;
  var $i473: i128;
  var $i474: i64;
  var $i475: i64;
  var $i476: i64;
  var $i477: i64;
  var $i478: i64;
  var $i479: i64;
  var $p480: ref;
  var $p481: ref;
  var $p482: ref;
  var $i483: i64;
  var $p484: ref;
  var $i485: i64;
  var $i486: i128;
  var $p487: ref;
  var $p488: ref;
  var $p489: ref;
  var $i490: i64;
  var $p491: ref;
  var $i492: i64;
  var $i493: i128;
  var $p494: ref;
  var $p495: ref;
  var $i496: i64;
  var $p497: ref;
  var $i498: i64;
  var $p499: ref;
  var $p500: ref;
  var $i501: i64;
  var $p502: ref;
  var $i503: i64;
  var $p504: ref;
  var $p505: ref;
  var $p506: ref;
  var $i507: i64;
  var $p508: ref;
  var $i509: i64;
  var $i510: i128;
  var $p511: ref;
  var $p512: ref;
  var $p513: ref;
  var $i514: i64;
  var $p515: ref;
  var $i516: i64;
  var $i517: i128;
  var $p518: ref;
  var $p519: ref;
  var $i520: i64;
  var $p521: ref;
  var $i522: i64;
  var $p523: ref;
  var $p524: ref;
  var $i525: i64;
  var $p526: ref;
  var $i527: i64;
  var $p528: ref;
  var $p529: ref;
  var $p530: ref;
  var $i531: i64;
  var $p532: ref;
  var $i533: i64;
  var $i534: i128;
  var $p535: ref;
  var $p536: ref;
  var $p537: ref;
  var $i538: i64;
  var $p539: ref;
  var $i540: i64;
  var $i541: i128;
  var $p542: ref;
  var $p543: ref;
  var $p544: ref;
  var $i545: i64;
  var $p546: ref;
  var $i547: i64;
  var $i548: i128;
  var $p549: ref;
  var $p550: ref;
  var $i551: i64;
  var $p552: ref;
  var $i553: i64;
  var $p554: ref;
  var $p555: ref;
  var $i556: i64;
  var $p557: ref;
  var $i558: i64;
  var $p559: ref;
  var $p560: ref;
  var $p561: ref;
  var $i562: i64;
  var $p563: ref;
  var $i564: i64;
  var $i565: i128;
  var $p566: ref;
  var $p567: ref;
  var $p568: ref;
  var $i569: i64;
  var $p570: ref;
  var $i571: i64;
  var $i572: i128;
  var $p573: ref;
  var $p574: ref;
  var $i575: i64;
  var $p576: ref;
  var $i577: i64;
  var $p578: ref;
  var $p579: ref;
  var $i580: i64;
  var $p581: ref;
  var $i582: i64;
  var $p583: ref;
  var $p584: ref;
  var $p585: ref;
  var $i586: i64;
  var $p587: ref;
  var $i588: i64;
  var $i589: i128;
  var $p590: ref;
  var $p591: ref;
  var $p592: ref;
  var $i593: i64;
  var $p594: ref;
  var $i595: i64;
  var $i596: i128;
  var $p597: ref;
  var $p598: ref;
  var $p599: ref;
  var $i600: i64;
  var $p601: ref;
  var $i602: i64;
  var $i603: i128;
  var $p604: ref;
  var $p605: ref;
  var $i606: i64;
  var $p607: ref;
  var $i608: i64;
  var $p609: ref;
  var $p610: ref;
  var $i611: i64;
  var $p612: ref;
  var $i613: i64;
  var $p614: ref;
  var $p615: ref;
  var $p616: ref;
  var $i617: i64;
  var $p618: ref;
  var $i619: i64;
  var $i620: i128;
  var $p621: ref;
  var $p622: ref;
  var $p623: ref;
  var $i624: i64;
  var $p625: ref;
  var $i626: i64;
  var $i627: i128;
  var $p628: ref;
  var $p629: ref;
  var $i630: i64;
  var $p631: ref;
  var $i632: i64;
  var $p633: ref;
  var $p634: ref;
  var $i635: i64;
  var $p636: ref;
  var $i637: i64;
  var $p638: ref;
  var $p639: ref;
  var $p640: ref;
  var $i641: i64;
  var $p642: ref;
  var $i643: i64;
  var $i644: i128;
  var $p645: ref;
  var $p646: ref;
  var $p647: ref;
  var $i648: i64;
  var $p649: ref;
  var $i650: i64;
  var $i651: i128;
  var $p652: ref;
  var $p653: ref;
  var $p654: ref;
  var $i655: i64;
  var $p656: ref;
  var $i657: i64;
  var $i658: i128;
  var $p659: ref;
  var $p660: ref;
  var $i661: i64;
  var $p662: ref;
  var $i663: i64;
  var $p664: ref;
  var $p665: ref;
  var $i666: i64;
  var $p667: ref;
  var $i668: i64;
  var $p669: ref;
  var $p670: ref;
  var $p671: ref;
  var $i672: i64;
  var $p673: ref;
  var $i674: i64;
  var $i675: i128;
  var $p676: ref;
  var $p677: ref;
  var $p678: ref;
  var $i679: i64;
  var $p680: ref;
  var $i681: i64;
  var $i682: i128;
  var $p683: ref;
  var $p684: ref;
  var $i685: i64;
  var $p686: ref;
  var $i687: i64;
  var $p688: ref;
  var $p689: ref;
  var $i690: i64;
  var $p691: ref;
  var $i692: i64;
  var $p693: ref;
  var $p694: ref;
  var $p695: ref;
  var $i696: i64;
  var $p697: ref;
  var $i698: i64;
  var $i699: i128;
  var $p700: ref;
  var $p701: ref;
  var $p702: ref;
  var $i703: i64;
  var $p704: ref;
  var $i705: i64;
  var $i706: i128;
  var $p707: ref;
  var $p708: ref;
  var $p709: ref;
  var $i710: i64;
  var $p711: ref;
  var $i712: i64;
  var $i713: i128;
  var $p714: ref;
  var $p715: ref;
  var $i716: i64;
  var $p717: ref;
  var $i718: i64;
  var $p719: ref;
  var $p720: ref;
  var $i721: i64;
  var $p722: ref;
  var $i723: i64;
  var $p724: ref;
  var $p725: ref;
  var $p726: ref;
  var $i727: i64;
  var $p728: ref;
  var $i729: i64;
  var $i730: i128;
  var $p731: ref;
  var $p732: ref;
  var $p733: ref;
  var $i734: i64;
  var $p735: ref;
  var $i736: i64;
  var $i737: i128;
  var $p738: ref;
  var $p739: ref;
  var $i740: i64;
  var $p741: ref;
  var $i742: i64;
  var $p743: ref;
  var $p744: ref;
  var $i745: i64;
  var $p746: ref;
  var $i747: i64;
  var $p748: ref;
  var $p749: ref;
  var $p750: ref;
  var $i751: i64;
  var $p752: ref;
  var $i753: i64;
  var $i754: i128;
  var $p755: ref;
  var $p756: ref;
  var $p757: ref;
  var $i758: i64;
  var $p759: ref;
  var $i760: i64;
  var $i761: i128;
  var $p762: ref;
  var $p763: ref;
  var $i764: i64;
  var $p765: ref;
  var $i766: i64;
  var $p767: ref;
  var $p768: ref;
  var $i769: i64;
  var $p770: ref;
  var $i771: i64;
  var $p772: ref;
  var $p773: ref;
  var $p774: ref;
  var $i775: i64;
  var $p776: ref;
  var $i777: i64;
  var $i778: i128;
  var $p779: ref;
  var $p780: ref;
  var $i781: i64;
  var $p782: ref;
  var $i783: i64;
  var $i784: i64;
  var $i785: i64;
  var $p786: ref;
  var $p787: ref;
  var $i788: i64;
  var $p789: ref;
  var $i790: i64;
  var $p791: ref;
  var $p792: ref;
  var $p793: ref;
  var $i794: i64;
  var $p795: ref;
  var $i796: i64;
  var $i797: i128;
  var $p798: ref;
  var $p799: ref;
  var $i800: i64;
  var $p801: ref;
  var $i802: i64;
  var $i803: i64;
  var $p804: ref;
  var $p805: ref;
  var $p806: ref;
  var $i807: i64;
  var $p808: ref;
  var $i809: i64;
  var $i810: i128;
  var $p811: ref;
  var $p812: ref;
  var $i813: i64;
  var $p814: ref;
  var $i815: i64;
  var $p816: ref;
  var $p817: ref;
  var $i818: i64;
  var $p819: ref;
  var $i820: i64;
  var $p821: ref;
  var $p822: ref;
  var $p823: ref;
  var $i824: i64;
  var $p825: ref;
  var $i826: i64;
  var $i827: i128;
  var $p828: ref;
  var $p829: ref;
  var $i830: i64;
  var $p831: ref;
  var $i832: i64;
  var $i833: i64;
  var $i834: i64;
  var $p835: ref;
  var $p836: ref;
  var $i837: i64;
  var $p838: ref;
  var $i839: i64;
  var $p840: ref;
  var $p841: ref;
  var $p842: ref;
  var $i843: i64;
  var $p844: ref;
  var $i845: i64;
  var $i846: i128;
  var $p847: ref;
  var $p848: ref;
  var $i849: i64;
  var $p850: ref;
  var $i851: i64;
  var $i852: i64;
  var $p853: ref;
  var $p854: ref;
  var $p855: ref;
  var $i856: i64;
  var $p857: ref;
  var $i858: i64;
  var $i859: i128;
  var $p860: ref;
  var $p861: ref;
  var $i862: i64;
  var $p863: ref;
  var $i864: i64;
  var $p865: ref;
  var $p866: ref;
  var $i867: i64;
  var $p868: ref;
  var $i869: i64;
  var $p870: ref;
  var $p871: ref;
  var $p872: ref;
  var $i873: i64;
  var $p874: ref;
  var $i875: i64;
  var $i876: i128;
  var $p877: ref;
  var $p878: ref;
  var $i879: i64;
  var $p880: ref;
  var $i881: i64;
  var $i882: i64;
  var $i883: i64;
  var $p884: ref;
  var $p885: ref;
  var $i886: i64;
  var $p887: ref;
  var $i888: i64;
  var $p889: ref;
  var $p890: ref;
  var $p891: ref;
  var $i892: i64;
  var $p893: ref;
  var $i894: i64;
  var $i895: i128;
  var $p896: ref;
  var $p897: ref;
  var $i898: i64;
  var $p899: ref;
  var $i900: i64;
  var $i901: i64;
  var $p902: ref;
  var $p903: ref;
  var $p904: ref;
  var $i905: i64;
  var $p906: ref;
  var $i907: i64;
  var $i908: i128;
  var $p909: ref;
  var $p910: ref;
  var $i911: i64;
  var $p912: ref;
  var $i913: i64;
  var $p914: ref;
  var $p915: ref;
  var $i916: i64;
  var $p917: ref;
  var $i918: i64;
  var $p919: ref;
  var $p920: ref;
  var $p921: ref;
  var $i922: i64;
  var $p923: ref;
  var $i924: i64;
  var $i925: i128;
  var $p926: ref;
  var $p927: ref;
  var $i928: i64;
  var $p929: ref;
  var $i930: i64;
  var $i931: i64;
  var $i932: i64;
  var $p933: ref;
  var $p934: ref;
  var $i935: i64;
  var $p936: ref;
  var $i937: i64;
  var $p938: ref;
  var $p939: ref;
  var $p940: ref;
  var $i941: i64;
  var $p942: ref;
  var $i943: i64;
  var $i944: i128;
  var $p945: ref;
  var $p946: ref;
  var $i947: i64;
  var $p948: ref;
  var $i949: i64;
  var $i950: i64;
  var $p951: ref;
  var $p952: ref;
  var $p953: ref;
  var $i954: i64;
  var $p955: ref;
  var $i956: i64;
  var $i957: i128;
  var $p958: ref;
  var $p959: ref;
  var $i960: i64;
  var $p961: ref;
  var $i962: i64;
  var $p963: ref;
  var $p964: ref;
  var $i965: i64;
  var $p966: ref;
  var $i967: i64;
  var $p968: ref;
  var $p969: ref;
  var $p970: ref;
  var $i971: i64;
  var $p972: ref;
  var $i973: i64;
  var $i974: i128;
  var $p975: ref;
  var $p976: ref;
  var $i977: i64;
  var $p978: ref;
  var $i979: i64;
  var $i980: i64;
  var $i981: i64;
  var $p982: ref;
  var $p983: ref;
  var $i984: i64;
  var $p985: ref;
  var $i986: i64;
  var $p987: ref;
  var $p988: ref;
  var $p989: ref;
  var $i990: i64;
  var $p991: ref;
  var $i992: i64;
  var $i993: i128;
  var $p994: ref;
  var $p995: ref;
  var $i996: i64;
  var $p997: ref;
  var $i998: i64;
  var $i999: i64;
  var $i1000: i64;
  var $i1001: i64;
  var $i1002: i64;
  var $i1003: i64;
  var $i1004: i64;
  var $p1005: ref;
  var $p1006: ref;
  var $p1007: ref;
  var $i1008: i64;
  var $p1009: ref;
  var $i1010: i64;
  var $i1011: i128;
  var $p1012: ref;
  var $p1013: ref;
  var $i1014: i64;
  var $p1015: ref;
  var $i1016: i64;
  var $p1017: ref;
  var $p1018: ref;
  var $i1019: i64;
  var $p1020: ref;
  var $i1021: i64;
  var $p1022: ref;
  var $p1023: ref;
  var $p1024: ref;
  var $i1025: i64;
  var $p1026: ref;
  var $i1027: i64;
  var $i1028: i128;
  var $p1029: ref;
  var $p1030: ref;
  var $i1031: i64;
  var $p1032: ref;
  var $i1033: i64;
  var $i1034: i64;
  var $i1035: i64;
  var $p1036: ref;
  var $p1037: ref;
  var $i1038: i64;
  var $p1039: ref;
  var $i1040: i64;
  var $p1041: ref;
  var $p1042: ref;
  var $p1043: ref;
  var $i1044: i64;
  var $p1045: ref;
  var $i1046: i64;
  var $i1047: i128;
  var $p1048: ref;
  var $p1049: ref;
  var $i1050: i64;
  var $p1051: ref;
  var $i1052: i64;
  var $i1053: i64;
  var $p1054: ref;
  var $p1055: ref;
  var $p1056: ref;
  var $i1057: i64;
  var $p1058: ref;
  var $i1059: i64;
  var $i1060: i128;
  var $p1061: ref;
  var $p1062: ref;
  var $i1063: i64;
  var $p1064: ref;
  var $i1065: i64;
  var $p1066: ref;
  var $p1067: ref;
  var $i1068: i64;
  var $p1069: ref;
  var $i1070: i64;
  var $p1071: ref;
  var $p1072: ref;
  var $p1073: ref;
  var $i1074: i64;
  var $p1075: ref;
  var $i1076: i64;
  var $i1077: i128;
  var $p1078: ref;
  var $p1079: ref;
  var $i1080: i64;
  var $p1081: ref;
  var $i1082: i64;
  var $i1083: i64;
  var $i1084: i64;
  var $p1085: ref;
  var $p1086: ref;
  var $i1087: i64;
  var $p1088: ref;
  var $i1089: i64;
  var $p1090: ref;
  var $p1091: ref;
  var $p1092: ref;
  var $i1093: i64;
  var $p1094: ref;
  var $i1095: i64;
  var $i1096: i128;
  var $p1097: ref;
  var $p1098: ref;
  var $i1099: i64;
  var $p1100: ref;
  var $i1101: i64;
  var $i1102: i64;
  var $p1103: ref;
  var $p1104: ref;
  var $p1105: ref;
  var $i1106: i64;
  var $p1107: ref;
  var $i1108: i64;
  var $i1109: i128;
  var $p1110: ref;
  var $p1111: ref;
  var $i1112: i64;
  var $p1113: ref;
  var $i1114: i64;
  var $p1115: ref;
  var $p1116: ref;
  var $i1117: i64;
  var $p1118: ref;
  var $i1119: i64;
  var $p1120: ref;
  var $p1121: ref;
  var $p1122: ref;
  var $i1123: i64;
  var $p1124: ref;
  var $i1125: i64;
  var $i1126: i128;
  var $p1127: ref;
  var $p1128: ref;
  var $i1129: i64;
  var $p1130: ref;
  var $i1131: i64;
  var $i1132: i64;
  var $i1133: i64;
  var $p1134: ref;
  var $p1135: ref;
  var $i1136: i64;
  var $p1137: ref;
  var $i1138: i64;
  var $p1139: ref;
  var $p1140: ref;
  var $p1141: ref;
  var $i1142: i64;
  var $p1143: ref;
  var $i1144: i64;
  var $i1145: i128;
  var $p1146: ref;
  var $p1147: ref;
  var $i1148: i64;
  var $p1149: ref;
  var $i1150: i64;
  var $i1151: i64;
  var $p1152: ref;
  var $p1153: ref;
  var $p1154: ref;
  var $i1155: i64;
  var $p1156: ref;
  var $i1157: i64;
  var $i1158: i128;
  var $p1159: ref;
  var $p1160: ref;
  var $i1161: i64;
  var $p1162: ref;
  var $i1163: i64;
  var $p1164: ref;
  var $p1165: ref;
  var $i1166: i64;
  var $p1167: ref;
  var $i1168: i64;
  var $p1169: ref;
  var $p1170: ref;
  var $p1171: ref;
  var $i1172: i64;
  var $p1173: ref;
  var $i1174: i64;
  var $i1175: i128;
  var $p1176: ref;
  var $p1177: ref;
  var $i1178: i64;
  var $p1179: ref;
  var $i1180: i64;
  var $i1181: i64;
  var $i1182: i64;
  var $p1183: ref;
  var $p1184: ref;
  var $i1185: i64;
  var $p1186: ref;
  var $i1187: i64;
  var $p1188: ref;
  var $p1189: ref;
  var $p1190: ref;
  var $i1191: i64;
  var $p1192: ref;
  var $i1193: i64;
  var $i1194: i128;
  var $p1195: ref;
  var $p1196: ref;
  var $i1197: i64;
  var $p1198: ref;
  var $i1199: i64;
  var $i1200: i64;
  var $p1201: ref;
  var $p1202: ref;
  var $p1203: ref;
  var $i1204: i64;
  var $p1205: ref;
  var $i1206: i64;
  var $i1207: i128;
  var $p1208: ref;
  var $p1209: ref;
  var $i1210: i64;
  var $p1211: ref;
  var $i1212: i64;
  var $p1213: ref;
  var $p1214: ref;
  var $i1215: i64;
  var $p1216: ref;
  var $i1217: i64;
  var $p1218: ref;
  var $p1219: ref;
  var $p1220: ref;
  var $i1221: i64;
  var $p1222: ref;
  var $i1223: i64;
  var $i1224: i128;
  var $p1225: ref;
  var $p1226: ref;
  var $i1227: i64;
  var $p1228: ref;
  var $i1229: i64;
  var $i1230: i64;
  var $i1231: i64;
  var $p1232: ref;
  var $p1233: ref;
  var $i1234: i64;
  var $p1235: ref;
  var $i1236: i64;
  var $p1237: ref;
  var $p1238: ref;
  var $p1239: ref;
  var $i1240: i64;
  var $p1241: ref;
  var $i1242: i64;
  var $i1243: i128;
  var $p1244: ref;
  var $p1245: ref;
  var $i1246: i64;
  var $p1247: ref;
  var $i1248: i64;
  var $i1249: i64;
  var $i1250: i64;
  var $i1251: i64;
  var $i1252: i64;
  var $i1253: i64;
  var $i1254: i64;
  var $p1255: ref;
  var $p1256: ref;
  var $p1257: ref;
  var $p1258: ref;
  var $p1259: ref;
  var $p1260: ref;
  var $p1261: ref;
  var $p1262: ref;
  var $p1263: ref;
  var $p1264: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 449, 18} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %4 = alloca i128, align 16, !psr.id !62, !verifier.code !63 */
  call $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %5 = alloca i128, align 16, !psr.id !64, !verifier.code !63 */
  call $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %6 = alloca i128, align 16, !psr.id !65, !verifier.code !63 */
  call $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %7 = alloca i128, align 16, !psr.id !66, !verifier.code !63 */
  call $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %8 = alloca i128, align 16, !psr.id !67, !verifier.code !63 */
  call $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %9 = alloca i128, align 16, !psr.id !68, !verifier.code !63 */
  call $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %10 = alloca i128, align 16, !psr.id !69, !verifier.code !63 */
  call $p9 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %11 = alloca i128, align 16, !psr.id !70, !verifier.code !63 */
  call $p10 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %12 = alloca i128, align 16, !psr.id !71, !verifier.code !63 */
  call $p11 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %13 = alloca i128, align 16, !psr.id !72, !verifier.code !63 */
  call $p12 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %14 = alloca i128, align 16, !psr.id !73, !verifier.code !63 */
  call $p13 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %15 = alloca i128, align 16, !psr.id !74, !verifier.code !63 */
  call $p14 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %16 = alloca i128, align 16, !psr.id !75, !verifier.code !63 */
  call $p15 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %17 = alloca i128, align 16, !psr.id !76, !verifier.code !63 */
  call $p16 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %18 = alloca i128, align 16, !psr.id !77, !verifier.code !63 */
  call $p17 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %19 = alloca i128, align 16, !psr.id !78, !verifier.code !63 */
  call $p18 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %20 = alloca i128, align 16, !psr.id !79, !verifier.code !63 */
  call $p19 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %21 = alloca i128, align 16, !psr.id !80, !verifier.code !63 */
  call $p20 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %22 = alloca i128, align 16, !psr.id !81, !verifier.code !63 */
  call $p21 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %23 = alloca i128, align 16, !psr.id !82, !verifier.code !63 */
  call $p22 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %24 = alloca i128, align 16, !psr.id !83, !verifier.code !63 */
  call $p23 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %25 = alloca i128, align 16, !psr.id !84, !verifier.code !63 */
  call $p24 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %26 = alloca i128, align 16, !psr.id !85, !verifier.code !63 */
  call $p25 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %27 = alloca i128, align 16, !psr.id !86, !verifier.code !63 */
  call $p26 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %28 = alloca i128, align 16, !psr.id !87, !verifier.code !63 */
  call $p27 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %29 = alloca i128, align 16, !psr.id !88, !verifier.code !63 */
  call $p28 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %30 = alloca i128, align 16, !psr.id !89, !verifier.code !63 */
  call $p29 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %31 = alloca i128, align 16, !psr.id !90, !verifier.code !63 */
  call $p30 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %32 = alloca i128, align 16, !psr.id !91, !verifier.code !63 */
  call $p31 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %33 = alloca i128, align 16, !psr.id !92, !verifier.code !63 */
  call $p32 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %34 = alloca i128, align 16, !psr.id !93, !verifier.code !63 */
  call $p33 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %35 = alloca i128, align 16, !psr.id !94, !verifier.code !63 */
  call $p34 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %36 = alloca i128, align 16, !psr.id !95, !verifier.code !63 */
  call $p35 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %37 = alloca i128, align 16, !psr.id !96, !verifier.code !63 */
  call $p36 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %38 = alloca i128, align 16, !psr.id !97, !verifier.code !63 */
  call $p37 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %39 = alloca i128, align 16, !psr.id !98, !verifier.code !63 */
  call $p38 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %40 = alloca i128, align 16, !psr.id !99, !verifier.code !63 */
  call $p39 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %41 = alloca i128, align 16, !psr.id !100, !verifier.code !63 */
  call $p40 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %42 = alloca i128, align 16, !psr.id !101, !verifier.code !63 */
  call $p41 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %43 = alloca i128, align 16, !psr.id !102, !verifier.code !63 */
  call $p42 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %44 = alloca i128, align 16, !psr.id !103, !verifier.code !63 */
  call $p43 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %45 = alloca i128, align 16, !psr.id !104, !verifier.code !63 */
  call $p44 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %46 = alloca i128, align 16, !psr.id !105, !verifier.code !63 */
  call $p45 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %47 = alloca i128, align 16, !psr.id !106, !verifier.code !63 */
  call $p46 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %48 = alloca i128, align 16, !psr.id !107, !verifier.code !63 */
  call $p47 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %49 = alloca i128, align 16, !psr.id !108, !verifier.code !63 */
  call $p48 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %50 = alloca i128, align 16, !psr.id !109, !verifier.code !63 */
  call $p49 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %51 = alloca i128, align 16, !psr.id !110, !verifier.code !63 */
  call $p50 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %52 = alloca i128, align 16, !psr.id !111, !verifier.code !63 */
  call $p51 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %53 = alloca i128, align 16, !psr.id !112, !verifier.code !63 */
  call $p52 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %54 = alloca i128, align 16, !psr.id !113, !verifier.code !63 */
  call $p53 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %55 = alloca i128, align 16, !psr.id !114, !verifier.code !63 */
  call $p54 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %56 = alloca i128, align 16, !psr.id !115, !verifier.code !63 */
  call $p55 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %57 = alloca i128, align 16, !psr.id !116, !verifier.code !63 */
  call $p56 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %58 = alloca i128, align 16, !psr.id !117, !verifier.code !63 */
  call $p57 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %59 = alloca i128, align 16, !psr.id !118, !verifier.code !63 */
  call $p58 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %60 = alloca i128, align 16, !psr.id !119, !verifier.code !63 */
  call $p59 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %61 = alloca i128, align 16, !psr.id !120, !verifier.code !63 */
  call $p60 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %62 = alloca i128, align 16, !psr.id !121, !verifier.code !63 */
  call $p61 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %63 = alloca i128, align 16, !psr.id !122, !verifier.code !63 */
  call $p62 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %64 = alloca i128, align 16, !psr.id !123, !verifier.code !63 */
  call $p63 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %65 = alloca i128, align 16, !psr.id !124, !verifier.code !63 */
  call $p64 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %66 = alloca i128, align 16, !psr.id !125, !verifier.code !63 */
  call $p65 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %67 = alloca i128, align 16, !psr.id !126, !verifier.code !63 */
  call $p66 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %68 = alloca i128, align 16, !psr.id !127, !verifier.code !63 */
  call $p67 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %69 = alloca i128, align 16, !psr.id !128, !verifier.code !63 */
  call $p68 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %70 = alloca i128, align 16, !psr.id !129, !verifier.code !63 */
  call $p69 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %71 = alloca i128, align 16, !psr.id !130, !verifier.code !63 */
  call $p70 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %72 = alloca i128, align 16, !psr.id !131, !verifier.code !63 */
  call $p71 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %73 = alloca i128, align 16, !psr.id !132, !verifier.code !63 */
  call $p72 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %74 = alloca i128, align 16, !psr.id !133, !verifier.code !63 */
  call $p73 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %75 = alloca i128, align 16, !psr.id !134, !verifier.code !63 */
  call $p74 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %76 = alloca i128, align 16, !psr.id !135, !verifier.code !63 */
  call $p75 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %77 = alloca i128, align 16, !psr.id !136, !verifier.code !63 */
  call $p76 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %78 = alloca i128, align 16, !psr.id !137, !verifier.code !63 */
  call $p77 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %79 = alloca i128, align 16, !psr.id !138, !verifier.code !63 */
  call $p78 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %80 = alloca i128, align 16, !psr.id !139, !verifier.code !63 */
  call $p79 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %81 = alloca i128, align 16, !psr.id !140, !verifier.code !63 */
  call $p80 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %82 = alloca i128, align 16, !psr.id !141, !verifier.code !63 */
  call $p81 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %83 = alloca i128, align 16, !psr.id !142, !verifier.code !63 */
  call $p82 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %84 = alloca i128, align 16, !psr.id !143, !verifier.code !63 */
  call $p83 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %85 = alloca i128, align 16, !psr.id !144, !verifier.code !63 */
  call $p84 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %86 = alloca i128, align 16, !psr.id !145, !verifier.code !63 */
  call $p85 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %87 = alloca i128, align 16, !psr.id !146, !verifier.code !63 */
  call $p86 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %88 = alloca i128, align 16, !psr.id !147, !verifier.code !63 */
  call $p87 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %89 = alloca i128, align 16, !psr.id !148, !verifier.code !63 */
  call $p88 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %90 = alloca i128, align 16, !psr.id !149, !verifier.code !63 */
  call $p89 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %91 = alloca i128, align 16, !psr.id !150, !verifier.code !63 */
  call $p90 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %92 = alloca i128, align 16, !psr.id !151, !verifier.code !63 */
  call $p91 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %93 = alloca i128, align 16, !psr.id !152, !verifier.code !63 */
  call $p92 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %94 = alloca i128, align 16, !psr.id !153, !verifier.code !63 */
  call $p93 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %95 = alloca i128, align 16, !psr.id !154, !verifier.code !63 */
  call $p94 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %96 = alloca i128, align 16, !psr.id !155, !verifier.code !63 */
  call $p95 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %97 = alloca i128, align 16, !psr.id !156, !verifier.code !63 */
  call $p96 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %98 = alloca i128, align 16, !psr.id !157, !verifier.code !63 */
  call $p97 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %99 = alloca i128, align 16, !psr.id !158, !verifier.code !63 */
  call $p98 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %100 = alloca i128, align 16, !psr.id !159, !verifier.code !63 */
  call $p99 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %101 = alloca i128, align 16, !psr.id !160, !verifier.code !63 */
  call $p100 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %102 = alloca i128, align 16, !psr.id !161, !verifier.code !63 */
  call $p101 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %103 = alloca i128, align 16, !psr.id !162, !verifier.code !63 */
  call $p102 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %104 = alloca i128, align 16, !psr.id !163, !verifier.code !63 */
  call $p103 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %105 = alloca i128, align 16, !psr.id !164, !verifier.code !63 */
  call $p104 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %106 = alloca i128, align 16, !psr.id !165, !verifier.code !63 */
  call $p105 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %107 = alloca i128, align 16, !psr.id !166, !verifier.code !63 */
  call $p106 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %108 = alloca i128, align 16, !psr.id !167, !verifier.code !63 */
  call $p107 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %109 = alloca i128, align 16, !psr.id !168, !verifier.code !63 */
  call $p108 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %110 = alloca i128, align 16, !psr.id !169, !verifier.code !63 */
  call $p109 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %111 = alloca i128, align 16, !psr.id !170, !verifier.code !63 */
  call $p110 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %112 = alloca i128, align 16, !psr.id !171, !verifier.code !63 */
  call $p111 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %113 = alloca i128, align 16, !psr.id !172, !verifier.code !63 */
  call $p112 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %114 = alloca i128, align 16, !psr.id !173, !verifier.code !63 */
  call $p113 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %115 = alloca i128, align 16, !psr.id !174, !verifier.code !63 */
  call $p114 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %116 = alloca i128, align 16, !psr.id !175, !verifier.code !63 */
  call $p115 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %117 = alloca i128, align 16, !psr.id !176, !verifier.code !63 */
  call $p116 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %118 = alloca i128, align 16, !psr.id !177, !verifier.code !63 */
  call $p117 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %119 = alloca i128, align 16, !psr.id !178, !verifier.code !63 */
  call $p118 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %120 = alloca i128, align 16, !psr.id !179, !verifier.code !63 */
  call $p119 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %121 = alloca i128, align 16, !psr.id !180, !verifier.code !63 */
  call $p120 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %122 = alloca i128, align 16, !psr.id !181, !verifier.code !63 */
  call $p121 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %123 = alloca i128, align 16, !psr.id !182, !verifier.code !63 */
  call $p122 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %124 = alloca i128, align 16, !psr.id !183, !verifier.code !63 */
  call $p123 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %125 = alloca i128, align 16, !psr.id !184, !verifier.code !63 */
  call $p124 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %126 = alloca i128, align 16, !psr.id !185, !verifier.code !63 */
  call $p125 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %127 = alloca i128, align 16, !psr.id !186, !verifier.code !63 */
  call $p126 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %128 = alloca i128, align 16, !psr.id !187, !verifier.code !63 */
  call $p127 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %129 = alloca i128, align 16, !psr.id !188, !verifier.code !63 */
  call $p128 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %130 = alloca i128, align 16, !psr.id !189, !verifier.code !63 */
  call $p129 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %131 = alloca i128, align 16, !psr.id !190, !verifier.code !63 */
  call $p130 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %132 = alloca i128, align 16, !psr.id !191, !verifier.code !63 */
  call $p131 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %133 = alloca i128, align 16, !psr.id !192, !verifier.code !63 */
  call $p132 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %134 = alloca i128, align 16, !psr.id !193, !verifier.code !63 */
  call $p133 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %135 = alloca i128, align 16, !psr.id !194, !verifier.code !63 */
  call $p134 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %136 = alloca i128, align 16, !psr.id !195, !verifier.code !63 */
  call $p135 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %137 = alloca i128, align 16, !psr.id !196, !verifier.code !63 */
  call $p136 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %138 = alloca i128, align 16, !psr.id !197, !verifier.code !63 */
  call $p137 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %139 = alloca i128, align 16, !psr.id !198, !verifier.code !63 */
  call $p138 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %140 = alloca i128, align 16, !psr.id !199, !verifier.code !63 */
  call $p139 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %141 = alloca i128, align 16, !psr.id !200, !verifier.code !63 */
  call $p140 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %142 = alloca i128, align 16, !psr.id !201, !verifier.code !63 */
  call $p141 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %143 = alloca i128, align 16, !psr.id !202, !verifier.code !63 */
  call $p142 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %144 = alloca i128, align 16, !psr.id !203, !verifier.code !63 */
  call $p143 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %145 = alloca i128, align 16, !psr.id !204, !verifier.code !63 */
  call $p144 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %146 = alloca i128, align 16, !psr.id !205, !verifier.code !63 */
  call $p145 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %147 = alloca i128, align 16, !psr.id !206, !verifier.code !63 */
  call $p146 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %148 = alloca i128, align 16, !psr.id !207, !verifier.code !63 */
  call $p147 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %149 = alloca i128, align 16, !psr.id !208, !verifier.code !63 */
  call $p148 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %150 = alloca i128, align 16, !psr.id !209, !verifier.code !63 */
  call $p149 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %151 = alloca i128, align 16, !psr.id !210, !verifier.code !63 */
  call $p150 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %152 = alloca i128, align 16, !psr.id !211, !verifier.code !63 */
  call $p151 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %153 = alloca i128, align 16, !psr.id !212, !verifier.code !63 */
  call $p152 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %154 = alloca i128, align 16, !psr.id !213, !verifier.code !63 */
  call $p153 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %155 = alloca i128, align 16, !psr.id !214, !verifier.code !63 */
  call $p154 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %156 = alloca i128, align 16, !psr.id !215, !verifier.code !63 */
  call $p155 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %157 = alloca i128, align 16, !psr.id !216, !verifier.code !63 */
  call $p156 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %158 = alloca i128, align 16, !psr.id !217, !verifier.code !63 */
  call $p157 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %159 = alloca i128, align 16, !psr.id !218, !verifier.code !63 */
  call $p158 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %160 = alloca i128, align 16, !psr.id !219, !verifier.code !63 */
  call $p159 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %161 = alloca i128, align 16, !psr.id !220, !verifier.code !63 */
  call $p160 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %162 = alloca i128, align 16, !psr.id !221, !verifier.code !63 */
  call $p161 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %163 = alloca i128, align 16, !psr.id !222, !verifier.code !63 */
  call $p162 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %164 = alloca i128, align 16, !psr.id !223, !verifier.code !63 */
  call $p163 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %165 = alloca i128, align 16, !psr.id !224, !verifier.code !63 */
  call $p164 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %166 = alloca i128, align 16, !psr.id !225, !verifier.code !63 */
  call $p165 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %167 = alloca i128, align 16, !psr.id !226, !verifier.code !63 */
  call $p166 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %168 = alloca i128, align 16, !psr.id !227, !verifier.code !63 */
  call $p167 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %169 = alloca i128, align 16, !psr.id !228, !verifier.code !63 */
  call $p168 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %170 = alloca i128, align 16, !psr.id !229, !verifier.code !63 */
  call $p169 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %171 = alloca i128, align 16, !psr.id !230, !verifier.code !63 */
  call $p170 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %172 = alloca i128, align 16, !psr.id !231, !verifier.code !63 */
  call $p171 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %173 = alloca i128, align 16, !psr.id !232, !verifier.code !63 */
  call $p172 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !4503, metadata !DIExpression()), !dbg !4504, !psr.id !4505, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !4506, metadata !DIExpression()), !dbg !4504, !psr.id !4507, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128* %2, metadata !4508, metadata !DIExpression()), !dbg !4504, !psr.id !4509, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 449, 18} true;
  assume {:verifier.code 0} true;
  /* %174 = getelementptr inbounds i64, i64* %1, i64 0, !dbg !240, !psr.id !241, !verifier.code !63 */
  $p173 := $add.ref($p1, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 449, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %175 = load i64, i64* %174, align 8, !dbg !240, !psr.id !242, !ValueTainted !243, !verifier.code !63 */
  $i174 := $load.i64($M.0, $p173);
  /* call void @llvm.dbg.value(metadata i64 %175, metadata !4513, metadata !DIExpression()), !dbg !4504, !psr.id !4514, !verifier.code !64 */
  call {:cexpr "f10"} boogie_si_record_i64($i174);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 450, 18} true;
  assume {:verifier.code 0} true;
  /* %176 = getelementptr inbounds i64, i64* %1, i64 1, !dbg !246, !psr.id !247, !verifier.code !63 */
  $p175 := $add.ref($p1, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 450, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %177 = load i64, i64* %176, align 8, !dbg !246, !psr.id !248, !ValueTainted !243, !verifier.code !63 */
  $i176 := $load.i64($M.0, $p175);
  /* call void @llvm.dbg.value(metadata i64 %177, metadata !4518, metadata !DIExpression()), !dbg !4504, !psr.id !4519, !verifier.code !64 */
  call {:cexpr "f11"} boogie_si_record_i64($i176);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 451, 18} true;
  assume {:verifier.code 0} true;
  /* %178 = getelementptr inbounds i64, i64* %1, i64 2, !dbg !251, !psr.id !252, !verifier.code !63 */
  $p177 := $add.ref($p1, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 451, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %179 = load i64, i64* %178, align 8, !dbg !251, !psr.id !253, !ValueTainted !243, !verifier.code !63 */
  $i178 := $load.i64($M.0, $p177);
  /* call void @llvm.dbg.value(metadata i64 %179, metadata !4523, metadata !DIExpression()), !dbg !4504, !psr.id !4524, !verifier.code !64 */
  call {:cexpr "f12"} boogie_si_record_i64($i178);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 452, 18} true;
  assume {:verifier.code 0} true;
  /* %180 = getelementptr inbounds i64, i64* %1, i64 3, !dbg !256, !psr.id !257, !verifier.code !63 */
  $p179 := $add.ref($p1, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 452, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %181 = load i64, i64* %180, align 8, !dbg !256, !psr.id !258, !ValueTainted !243, !verifier.code !63 */
  $i180 := $load.i64($M.0, $p179);
  /* call void @llvm.dbg.value(metadata i64 %181, metadata !4528, metadata !DIExpression()), !dbg !4504, !psr.id !4529, !verifier.code !64 */
  call {:cexpr "f13"} boogie_si_record_i64($i180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 453, 18} true;
  assume {:verifier.code 0} true;
  /* %182 = getelementptr inbounds i64, i64* %1, i64 4, !dbg !261, !psr.id !262, !verifier.code !63 */
  $p181 := $add.ref($p1, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 453, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %183 = load i64, i64* %182, align 8, !dbg !261, !psr.id !263, !ValueTainted !243, !verifier.code !63 */
  $i182 := $load.i64($M.0, $p181);
  /* call void @llvm.dbg.value(metadata i64 %183, metadata !4533, metadata !DIExpression()), !dbg !4504, !psr.id !4534, !verifier.code !64 */
  call {:cexpr "f14"} boogie_si_record_i64($i182);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 454, 18} true;
  assume {:verifier.code 0} true;
  /* %184 = getelementptr inbounds i64, i64* %1, i64 5, !dbg !266, !psr.id !267, !verifier.code !63 */
  $p183 := $add.ref($p1, $mul.ref(5, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 454, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %185 = load i64, i64* %184, align 8, !dbg !266, !psr.id !268, !ValueTainted !243, !verifier.code !63 */
  $i184 := $load.i64($M.0, $p183);
  /* call void @llvm.dbg.value(metadata i64 %185, metadata !4538, metadata !DIExpression()), !dbg !4504, !psr.id !4539, !verifier.code !64 */
  call {:cexpr "f20"} boogie_si_record_i64($i184);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 455, 18} true;
  assume {:verifier.code 0} true;
  /* %186 = getelementptr inbounds i64, i64* %1, i64 6, !dbg !271, !psr.id !272, !verifier.code !63 */
  $p185 := $add.ref($p1, $mul.ref(6, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 455, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %187 = load i64, i64* %186, align 8, !dbg !271, !psr.id !273, !ValueTainted !243, !verifier.code !63 */
  $i186 := $load.i64($M.0, $p185);
  /* call void @llvm.dbg.value(metadata i64 %187, metadata !4543, metadata !DIExpression()), !dbg !4504, !psr.id !4544, !verifier.code !64 */
  call {:cexpr "f21"} boogie_si_record_i64($i186);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 456, 18} true;
  assume {:verifier.code 0} true;
  /* %188 = getelementptr inbounds i64, i64* %1, i64 7, !dbg !276, !psr.id !277, !verifier.code !63 */
  $p187 := $add.ref($p1, $mul.ref(7, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 456, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %189 = load i64, i64* %188, align 8, !dbg !276, !psr.id !278, !ValueTainted !243, !verifier.code !63 */
  $i188 := $load.i64($M.0, $p187);
  /* call void @llvm.dbg.value(metadata i64 %189, metadata !4548, metadata !DIExpression()), !dbg !4504, !psr.id !4549, !verifier.code !64 */
  call {:cexpr "f22"} boogie_si_record_i64($i188);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 457, 18} true;
  assume {:verifier.code 0} true;
  /* %190 = getelementptr inbounds i64, i64* %1, i64 8, !dbg !281, !psr.id !282, !verifier.code !63 */
  $p189 := $add.ref($p1, $mul.ref(8, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 457, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %191 = load i64, i64* %190, align 8, !dbg !281, !psr.id !283, !ValueTainted !243, !verifier.code !63 */
  $i190 := $load.i64($M.0, $p189);
  /* call void @llvm.dbg.value(metadata i64 %191, metadata !4553, metadata !DIExpression()), !dbg !4504, !psr.id !4554, !verifier.code !64 */
  call {:cexpr "f23"} boogie_si_record_i64($i190);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 458, 18} true;
  assume {:verifier.code 0} true;
  /* %192 = getelementptr inbounds i64, i64* %1, i64 9, !dbg !286, !psr.id !287, !verifier.code !63 */
  $p191 := $add.ref($p1, $mul.ref(9, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 458, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %193 = load i64, i64* %192, align 8, !dbg !286, !psr.id !288, !ValueTainted !243, !verifier.code !63 */
  $i192 := $load.i64($M.0, $p191);
  /* call void @llvm.dbg.value(metadata i64 %193, metadata !4558, metadata !DIExpression()), !dbg !4504, !psr.id !4559, !verifier.code !64 */
  call {:cexpr "f24"} boogie_si_record_i64($i192);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 459, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %194 = mul i64 2, %175, !dbg !291, !psr.id !292, !ValueTainted !243, !verifier.code !63 */
  $i193 := $mul.i64(2, $i174);
  /* call void @llvm.dbg.value(metadata i64 %194, metadata !4562, metadata !DIExpression()), !dbg !4504, !psr.id !4563, !verifier.code !64 */
  call {:cexpr "d00"} boogie_si_record_i64($i193);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 460, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %195 = mul i64 2, %177, !dbg !295, !psr.id !296, !ValueTainted !243, !verifier.code !63 */
  $i194 := $mul.i64(2, $i176);
  /* call void @llvm.dbg.value(metadata i64 %195, metadata !4566, metadata !DIExpression()), !dbg !4504, !psr.id !4567, !verifier.code !64 */
  call {:cexpr "d10"} boogie_si_record_i64($i194);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 461, 32} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %196 = mul i64 38, %179, !dbg !299, !psr.id !300, !ValueTainted !243, !verifier.code !63 */
  $i195 := $mul.i64(38, $i178);
  /* call void @llvm.dbg.value(metadata i64 %196, metadata !4570, metadata !DIExpression()), !dbg !4504, !psr.id !4571, !verifier.code !64 */
  call {:cexpr "d20"} boogie_si_record_i64($i195);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 462, 32} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %197 = mul i64 19, %181, !dbg !303, !psr.id !304, !ValueTainted !243, !verifier.code !63 */
  $i196 := $mul.i64(19, $i180);
  /* call void @llvm.dbg.value(metadata i64 %197, metadata !4574, metadata !DIExpression()), !dbg !4504, !psr.id !4575, !verifier.code !64 */
  call {:cexpr "d30"} boogie_si_record_i64($i196);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 463, 34} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %198 = mul i64 19, %183, !dbg !307, !psr.id !308, !ValueTainted !243, !verifier.code !63 */
  $i197 := $mul.i64(19, $i182);
  /* call void @llvm.dbg.value(metadata i64 %198, metadata !4578, metadata !DIExpression()), !dbg !4504, !psr.id !4579, !verifier.code !64 */
  call {:cexpr "d4190"} boogie_si_record_i64($i197);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 464, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %199 = mul i64 2, %198, !dbg !311, !psr.id !312, !ValueTainted !243, !verifier.code !63 */
  $i198 := $mul.i64(2, $i197);
  /* call void @llvm.dbg.value(metadata i64 %199, metadata !4582, metadata !DIExpression()), !dbg !4504, !psr.id !4583, !verifier.code !64 */
  call {:cexpr "d40"} boogie_si_record_i64($i198);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %200 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %175, i64 %175), !dbg !315, !psr.id !316, !ValueTainted !243, !verifier.code !63 */
  call $p199 := FStar_UInt128_mul_wide($i174, $i174);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  /* %201 = bitcast i128* %4 to { i64, i64 }*, !dbg !315, !psr.id !317, !verifier.code !63 */
  $p200 := $bitcast.ref.ref($p3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  /* %202 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %201, i32 0, i32 0, !dbg !315, !psr.id !318, !verifier.code !63 */
  $p201 := $add.ref($add.ref($p200, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  /* %203 = extractvalue { i64, i64 } %200, 0, !dbg !315, !psr.id !319, !verifier.code !63 */
  $i202 := $extractvalue.i64($p199, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %203, i64* %202, align 16, !dbg !315, !psr.id !320, !verifier.code !63 */
  $M.229 := $store.i64($M.229, $p201, $i202);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  /* %204 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %201, i32 0, i32 1, !dbg !315, !psr.id !321, !verifier.code !63 */
  $p203 := $add.ref($add.ref($p200, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  /* %205 = extractvalue { i64, i64 } %200, 1, !dbg !315, !psr.id !322, !verifier.code !63 */
  $i204 := $extractvalue.i64($p199, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %205, i64* %204, align 8, !dbg !315, !psr.id !323, !verifier.code !63 */
  $M.229 := $store.i64($M.229, $p203, $i204);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  /* %206 = load i128, i128* %4, align 16, !dbg !315, !psr.id !324, !verifier.code !63 */
  $i205 := $load.i128($M.229, $p3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %207 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %199, i64 %177), !dbg !325, !psr.id !326, !ValueTainted !243, !verifier.code !63 */
  call $p206 := FStar_UInt128_mul_wide($i198, $i176);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  /* %208 = bitcast i128* %5 to { i64, i64 }*, !dbg !325, !psr.id !327, !verifier.code !63 */
  $p207 := $bitcast.ref.ref($p4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  /* %209 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %208, i32 0, i32 0, !dbg !325, !psr.id !328, !verifier.code !63 */
  $p208 := $add.ref($add.ref($p207, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  /* %210 = extractvalue { i64, i64 } %207, 0, !dbg !325, !psr.id !329, !verifier.code !63 */
  $i209 := $extractvalue.i64($p206, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %210, i64* %209, align 16, !dbg !325, !psr.id !330, !verifier.code !63 */
  $M.230 := $store.i64($M.230, $p208, $i209);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  /* %211 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %208, i32 0, i32 1, !dbg !325, !psr.id !331, !verifier.code !63 */
  $p210 := $add.ref($add.ref($p207, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  /* %212 = extractvalue { i64, i64 } %207, 1, !dbg !325, !psr.id !332, !verifier.code !63 */
  $i211 := $extractvalue.i64($p206, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %212, i64* %211, align 8, !dbg !325, !psr.id !333, !verifier.code !63 */
  $M.230 := $store.i64($M.230, $p210, $i211);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  /* %213 = load i128, i128* %5, align 16, !dbg !325, !psr.id !334, !verifier.code !63 */
  $i212 := $load.i128($M.230, $p4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %206, i128* %6, align 16, !dbg !335, !psr.id !336, !verifier.code !63 */
  $M.231 := $store.i128($M.231, $p5, $i205);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %214 = bitcast i128* %6 to { i64, i64 }*, !dbg !335, !psr.id !337, !verifier.code !63 */
  $p213 := $bitcast.ref.ref($p5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %215 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %214, i32 0, i32 0, !dbg !335, !psr.id !338, !verifier.code !63 */
  $p214 := $add.ref($add.ref($p213, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %216 = load i64, i64* %215, align 16, !dbg !335, !psr.id !339, !verifier.code !63 */
  $i215 := $load.i64($M.231, $p214);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %217 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %214, i32 0, i32 1, !dbg !335, !psr.id !340, !verifier.code !63 */
  $p216 := $add.ref($add.ref($p213, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %218 = load i64, i64* %217, align 8, !dbg !335, !psr.id !341, !verifier.code !63 */
  $i217 := $load.i64($M.231, $p216);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %213, i128* %7, align 16, !dbg !335, !psr.id !342, !verifier.code !63 */
  $M.232 := $store.i128($M.232, $p6, $i212);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %219 = bitcast i128* %7 to { i64, i64 }*, !dbg !335, !psr.id !343, !verifier.code !63 */
  $p218 := $bitcast.ref.ref($p6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %220 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %219, i32 0, i32 0, !dbg !335, !psr.id !344, !verifier.code !63 */
  $p219 := $add.ref($add.ref($p218, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %221 = load i64, i64* %220, align 16, !dbg !335, !psr.id !345, !verifier.code !63 */
  $i220 := $load.i64($M.232, $p219);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %222 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %219, i32 0, i32 1, !dbg !335, !psr.id !346, !verifier.code !63 */
  $p221 := $add.ref($add.ref($p218, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %223 = load i64, i64* %222, align 8, !dbg !335, !psr.id !347, !verifier.code !63 */
  $i222 := $load.i64($M.232, $p221);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %224 = call { i64, i64 } @FStar_UInt128_add(i64 %216, i64 %218, i64 %221, i64 %223), !dbg !335, !psr.id !348, !verifier.code !63 */
  call $p223 := FStar_UInt128_add($i215, $i217, $i220, $i222);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %225 = bitcast i128* %8 to { i64, i64 }*, !dbg !335, !psr.id !349, !verifier.code !63 */
  $p224 := $bitcast.ref.ref($p7);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %226 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %225, i32 0, i32 0, !dbg !335, !psr.id !350, !verifier.code !63 */
  $p225 := $add.ref($add.ref($p224, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %227 = extractvalue { i64, i64 } %224, 0, !dbg !335, !psr.id !351, !verifier.code !63 */
  $i226 := $extractvalue.i64($p223, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %227, i64* %226, align 16, !dbg !335, !psr.id !352, !verifier.code !63 */
  $M.233 := $store.i64($M.233, $p225, $i226);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %228 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %225, i32 0, i32 1, !dbg !335, !psr.id !353, !verifier.code !63 */
  $p227 := $add.ref($add.ref($p224, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %229 = extractvalue { i64, i64 } %224, 1, !dbg !335, !psr.id !354, !verifier.code !63 */
  $i228 := $extractvalue.i64($p223, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %229, i64* %228, align 8, !dbg !335, !psr.id !355, !verifier.code !63 */
  $M.233 := $store.i64($M.233, $p227, $i228);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  /* %230 = load i128, i128* %8, align 16, !dbg !335, !psr.id !356, !verifier.code !63 */
  $i229 := $load.i128($M.233, $p7);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %231 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %196, i64 %181), !dbg !357, !psr.id !358, !ValueTainted !243, !verifier.code !63 */
  call $p230 := FStar_UInt128_mul_wide($i195, $i180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  /* %232 = bitcast i128* %9 to { i64, i64 }*, !dbg !357, !psr.id !359, !verifier.code !63 */
  $p231 := $bitcast.ref.ref($p8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  /* %233 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %232, i32 0, i32 0, !dbg !357, !psr.id !360, !verifier.code !63 */
  $p232 := $add.ref($add.ref($p231, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  /* %234 = extractvalue { i64, i64 } %231, 0, !dbg !357, !psr.id !361, !verifier.code !63 */
  $i233 := $extractvalue.i64($p230, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %234, i64* %233, align 16, !dbg !357, !psr.id !362, !verifier.code !63 */
  $M.234 := $store.i64($M.234, $p232, $i233);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  /* %235 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %232, i32 0, i32 1, !dbg !357, !psr.id !363, !verifier.code !63 */
  $p234 := $add.ref($add.ref($p231, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  /* %236 = extractvalue { i64, i64 } %231, 1, !dbg !357, !psr.id !364, !verifier.code !63 */
  $i235 := $extractvalue.i64($p230, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %236, i64* %235, align 8, !dbg !357, !psr.id !365, !verifier.code !63 */
  $M.234 := $store.i64($M.234, $p234, $i235);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  /* %237 = load i128, i128* %9, align 16, !dbg !357, !psr.id !366, !verifier.code !63 */
  $i236 := $load.i128($M.234, $p8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %230, i128* %10, align 16, !dbg !367, !psr.id !368, !verifier.code !63 */
  $M.235 := $store.i128($M.235, $p9, $i229);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %238 = bitcast i128* %10 to { i64, i64 }*, !dbg !367, !psr.id !369, !verifier.code !63 */
  $p237 := $bitcast.ref.ref($p9);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %239 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %238, i32 0, i32 0, !dbg !367, !psr.id !370, !verifier.code !63 */
  $p238 := $add.ref($add.ref($p237, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %240 = load i64, i64* %239, align 16, !dbg !367, !psr.id !371, !verifier.code !63 */
  $i239 := $load.i64($M.235, $p238);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %241 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %238, i32 0, i32 1, !dbg !367, !psr.id !372, !verifier.code !63 */
  $p240 := $add.ref($add.ref($p237, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %242 = load i64, i64* %241, align 8, !dbg !367, !psr.id !373, !verifier.code !63 */
  $i241 := $load.i64($M.235, $p240);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %237, i128* %11, align 16, !dbg !367, !psr.id !374, !verifier.code !63 */
  $M.236 := $store.i128($M.236, $p10, $i236);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %243 = bitcast i128* %11 to { i64, i64 }*, !dbg !367, !psr.id !375, !verifier.code !63 */
  $p242 := $bitcast.ref.ref($p10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %244 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %243, i32 0, i32 0, !dbg !367, !psr.id !376, !verifier.code !63 */
  $p243 := $add.ref($add.ref($p242, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %245 = load i64, i64* %244, align 16, !dbg !367, !psr.id !377, !verifier.code !63 */
  $i244 := $load.i64($M.236, $p243);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %246 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %243, i32 0, i32 1, !dbg !367, !psr.id !378, !verifier.code !63 */
  $p245 := $add.ref($add.ref($p242, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %247 = load i64, i64* %246, align 8, !dbg !367, !psr.id !379, !verifier.code !63 */
  $i246 := $load.i64($M.236, $p245);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %248 = call { i64, i64 } @FStar_UInt128_add(i64 %240, i64 %242, i64 %245, i64 %247), !dbg !367, !psr.id !380, !verifier.code !63 */
  call $p247 := FStar_UInt128_add($i239, $i241, $i244, $i246);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %249 = bitcast i128* %12 to { i64, i64 }*, !dbg !367, !psr.id !381, !verifier.code !63 */
  $p248 := $bitcast.ref.ref($p11);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %250 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %249, i32 0, i32 0, !dbg !367, !psr.id !382, !verifier.code !63 */
  $p249 := $add.ref($add.ref($p248, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %251 = extractvalue { i64, i64 } %248, 0, !dbg !367, !psr.id !383, !verifier.code !63 */
  $i250 := $extractvalue.i64($p247, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %251, i64* %250, align 16, !dbg !367, !psr.id !384, !verifier.code !63 */
  $M.237 := $store.i64($M.237, $p249, $i250);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %252 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %249, i32 0, i32 1, !dbg !367, !psr.id !385, !verifier.code !63 */
  $p251 := $add.ref($add.ref($p248, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %253 = extractvalue { i64, i64 } %248, 1, !dbg !367, !psr.id !386, !verifier.code !63 */
  $i252 := $extractvalue.i64($p247, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %253, i64* %252, align 8, !dbg !367, !psr.id !387, !verifier.code !63 */
  $M.237 := $store.i64($M.237, $p251, $i252);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %254 = load i128, i128* %12, align 16, !dbg !367, !psr.id !388, !verifier.code !63 */
  $i253 := $load.i128($M.237, $p11);
  /* call void @llvm.dbg.value(metadata i128 %254, metadata !4658, metadata !DIExpression()), !dbg !4504, !psr.id !4659, !verifier.code !64 */
  call {:cexpr "s00"} boogie_si_record_i128($i253);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %255 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %194, i64 %177), !dbg !391, !psr.id !392, !ValueTainted !243, !verifier.code !63 */
  call $p254 := FStar_UInt128_mul_wide($i193, $i176);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  /* %256 = bitcast i128* %13 to { i64, i64 }*, !dbg !391, !psr.id !393, !verifier.code !63 */
  $p255 := $bitcast.ref.ref($p12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  /* %257 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %256, i32 0, i32 0, !dbg !391, !psr.id !394, !verifier.code !63 */
  $p256 := $add.ref($add.ref($p255, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  /* %258 = extractvalue { i64, i64 } %255, 0, !dbg !391, !psr.id !395, !verifier.code !63 */
  $i257 := $extractvalue.i64($p254, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %258, i64* %257, align 16, !dbg !391, !psr.id !396, !verifier.code !63 */
  $M.238 := $store.i64($M.238, $p256, $i257);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  /* %259 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %256, i32 0, i32 1, !dbg !391, !psr.id !397, !verifier.code !63 */
  $p258 := $add.ref($add.ref($p255, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  /* %260 = extractvalue { i64, i64 } %255, 1, !dbg !391, !psr.id !398, !verifier.code !63 */
  $i259 := $extractvalue.i64($p254, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %260, i64* %259, align 8, !dbg !391, !psr.id !399, !verifier.code !63 */
  $M.238 := $store.i64($M.238, $p258, $i259);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  /* %261 = load i128, i128* %13, align 16, !dbg !391, !psr.id !400, !verifier.code !63 */
  $i260 := $load.i128($M.238, $p12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %262 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %199, i64 %179), !dbg !401, !psr.id !402, !ValueTainted !243, !verifier.code !63 */
  call $p261 := FStar_UInt128_mul_wide($i198, $i178);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  /* %263 = bitcast i128* %14 to { i64, i64 }*, !dbg !401, !psr.id !403, !verifier.code !63 */
  $p262 := $bitcast.ref.ref($p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  /* %264 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %263, i32 0, i32 0, !dbg !401, !psr.id !404, !verifier.code !63 */
  $p263 := $add.ref($add.ref($p262, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  /* %265 = extractvalue { i64, i64 } %262, 0, !dbg !401, !psr.id !405, !verifier.code !63 */
  $i264 := $extractvalue.i64($p261, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %265, i64* %264, align 16, !dbg !401, !psr.id !406, !verifier.code !63 */
  $M.239 := $store.i64($M.239, $p263, $i264);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  /* %266 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %263, i32 0, i32 1, !dbg !401, !psr.id !407, !verifier.code !63 */
  $p265 := $add.ref($add.ref($p262, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  /* %267 = extractvalue { i64, i64 } %262, 1, !dbg !401, !psr.id !408, !verifier.code !63 */
  $i266 := $extractvalue.i64($p261, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %267, i64* %266, align 8, !dbg !401, !psr.id !409, !verifier.code !63 */
  $M.239 := $store.i64($M.239, $p265, $i266);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  /* %268 = load i128, i128* %14, align 16, !dbg !401, !psr.id !410, !verifier.code !63 */
  $i267 := $load.i128($M.239, $p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %261, i128* %15, align 16, !dbg !411, !psr.id !412, !verifier.code !63 */
  $M.240 := $store.i128($M.240, $p14, $i260);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %269 = bitcast i128* %15 to { i64, i64 }*, !dbg !411, !psr.id !413, !verifier.code !63 */
  $p268 := $bitcast.ref.ref($p14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %270 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %269, i32 0, i32 0, !dbg !411, !psr.id !414, !verifier.code !63 */
  $p269 := $add.ref($add.ref($p268, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %271 = load i64, i64* %270, align 16, !dbg !411, !psr.id !415, !verifier.code !63 */
  $i270 := $load.i64($M.240, $p269);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %272 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %269, i32 0, i32 1, !dbg !411, !psr.id !416, !verifier.code !63 */
  $p271 := $add.ref($add.ref($p268, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %273 = load i64, i64* %272, align 8, !dbg !411, !psr.id !417, !verifier.code !63 */
  $i272 := $load.i64($M.240, $p271);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %268, i128* %16, align 16, !dbg !411, !psr.id !418, !verifier.code !63 */
  $M.241 := $store.i128($M.241, $p15, $i267);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %274 = bitcast i128* %16 to { i64, i64 }*, !dbg !411, !psr.id !419, !verifier.code !63 */
  $p273 := $bitcast.ref.ref($p15);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %275 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %274, i32 0, i32 0, !dbg !411, !psr.id !420, !verifier.code !63 */
  $p274 := $add.ref($add.ref($p273, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %276 = load i64, i64* %275, align 16, !dbg !411, !psr.id !421, !verifier.code !63 */
  $i275 := $load.i64($M.241, $p274);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %277 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %274, i32 0, i32 1, !dbg !411, !psr.id !422, !verifier.code !63 */
  $p276 := $add.ref($add.ref($p273, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %278 = load i64, i64* %277, align 8, !dbg !411, !psr.id !423, !verifier.code !63 */
  $i277 := $load.i64($M.241, $p276);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %279 = call { i64, i64 } @FStar_UInt128_add(i64 %271, i64 %273, i64 %276, i64 %278), !dbg !411, !psr.id !424, !verifier.code !63 */
  call $p278 := FStar_UInt128_add($i270, $i272, $i275, $i277);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %280 = bitcast i128* %17 to { i64, i64 }*, !dbg !411, !psr.id !425, !verifier.code !63 */
  $p279 := $bitcast.ref.ref($p16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %281 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %280, i32 0, i32 0, !dbg !411, !psr.id !426, !verifier.code !63 */
  $p280 := $add.ref($add.ref($p279, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %282 = extractvalue { i64, i64 } %279, 0, !dbg !411, !psr.id !427, !verifier.code !63 */
  $i281 := $extractvalue.i64($p278, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %282, i64* %281, align 16, !dbg !411, !psr.id !428, !verifier.code !63 */
  $M.242 := $store.i64($M.242, $p280, $i281);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %283 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %280, i32 0, i32 1, !dbg !411, !psr.id !429, !verifier.code !63 */
  $p282 := $add.ref($add.ref($p279, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %284 = extractvalue { i64, i64 } %279, 1, !dbg !411, !psr.id !430, !verifier.code !63 */
  $i283 := $extractvalue.i64($p278, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %284, i64* %283, align 8, !dbg !411, !psr.id !431, !verifier.code !63 */
  $M.242 := $store.i64($M.242, $p282, $i283);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  /* %285 = load i128, i128* %17, align 16, !dbg !411, !psr.id !432, !verifier.code !63 */
  $i284 := $load.i128($M.242, $p16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %286 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %197, i64 %181), !dbg !433, !psr.id !434, !ValueTainted !243, !verifier.code !63 */
  call $p285 := FStar_UInt128_mul_wide($i196, $i180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  /* %287 = bitcast i128* %18 to { i64, i64 }*, !dbg !433, !psr.id !435, !verifier.code !63 */
  $p286 := $bitcast.ref.ref($p17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  /* %288 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %287, i32 0, i32 0, !dbg !433, !psr.id !436, !verifier.code !63 */
  $p287 := $add.ref($add.ref($p286, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  /* %289 = extractvalue { i64, i64 } %286, 0, !dbg !433, !psr.id !437, !verifier.code !63 */
  $i288 := $extractvalue.i64($p285, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %289, i64* %288, align 16, !dbg !433, !psr.id !438, !verifier.code !63 */
  $M.243 := $store.i64($M.243, $p287, $i288);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  /* %290 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %287, i32 0, i32 1, !dbg !433, !psr.id !439, !verifier.code !63 */
  $p289 := $add.ref($add.ref($p286, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  /* %291 = extractvalue { i64, i64 } %286, 1, !dbg !433, !psr.id !440, !verifier.code !63 */
  $i290 := $extractvalue.i64($p285, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %291, i64* %290, align 8, !dbg !433, !psr.id !441, !verifier.code !63 */
  $M.243 := $store.i64($M.243, $p289, $i290);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  /* %292 = load i128, i128* %18, align 16, !dbg !433, !psr.id !442, !verifier.code !63 */
  $i291 := $load.i128($M.243, $p17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %285, i128* %19, align 16, !dbg !443, !psr.id !444, !verifier.code !63 */
  $M.244 := $store.i128($M.244, $p18, $i284);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %293 = bitcast i128* %19 to { i64, i64 }*, !dbg !443, !psr.id !445, !verifier.code !63 */
  $p292 := $bitcast.ref.ref($p18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %294 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %293, i32 0, i32 0, !dbg !443, !psr.id !446, !verifier.code !63 */
  $p293 := $add.ref($add.ref($p292, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %295 = load i64, i64* %294, align 16, !dbg !443, !psr.id !447, !verifier.code !63 */
  $i294 := $load.i64($M.244, $p293);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %296 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %293, i32 0, i32 1, !dbg !443, !psr.id !448, !verifier.code !63 */
  $p295 := $add.ref($add.ref($p292, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %297 = load i64, i64* %296, align 8, !dbg !443, !psr.id !449, !verifier.code !63 */
  $i296 := $load.i64($M.244, $p295);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %292, i128* %20, align 16, !dbg !443, !psr.id !450, !verifier.code !63 */
  $M.245 := $store.i128($M.245, $p19, $i291);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %298 = bitcast i128* %20 to { i64, i64 }*, !dbg !443, !psr.id !451, !verifier.code !63 */
  $p297 := $bitcast.ref.ref($p19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %299 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %298, i32 0, i32 0, !dbg !443, !psr.id !452, !verifier.code !63 */
  $p298 := $add.ref($add.ref($p297, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %300 = load i64, i64* %299, align 16, !dbg !443, !psr.id !453, !verifier.code !63 */
  $i299 := $load.i64($M.245, $p298);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %301 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %298, i32 0, i32 1, !dbg !443, !psr.id !454, !verifier.code !63 */
  $p300 := $add.ref($add.ref($p297, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %302 = load i64, i64* %301, align 8, !dbg !443, !psr.id !455, !verifier.code !63 */
  $i301 := $load.i64($M.245, $p300);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %303 = call { i64, i64 } @FStar_UInt128_add(i64 %295, i64 %297, i64 %300, i64 %302), !dbg !443, !psr.id !456, !verifier.code !63 */
  call $p302 := FStar_UInt128_add($i294, $i296, $i299, $i301);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %304 = bitcast i128* %21 to { i64, i64 }*, !dbg !443, !psr.id !457, !verifier.code !63 */
  $p303 := $bitcast.ref.ref($p20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %305 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %304, i32 0, i32 0, !dbg !443, !psr.id !458, !verifier.code !63 */
  $p304 := $add.ref($add.ref($p303, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %306 = extractvalue { i64, i64 } %303, 0, !dbg !443, !psr.id !459, !verifier.code !63 */
  $i305 := $extractvalue.i64($p302, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %306, i64* %305, align 16, !dbg !443, !psr.id !460, !verifier.code !63 */
  $M.246 := $store.i64($M.246, $p304, $i305);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %307 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %304, i32 0, i32 1, !dbg !443, !psr.id !461, !verifier.code !63 */
  $p306 := $add.ref($add.ref($p303, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %308 = extractvalue { i64, i64 } %303, 1, !dbg !443, !psr.id !462, !verifier.code !63 */
  $i307 := $extractvalue.i64($p302, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %308, i64* %307, align 8, !dbg !443, !psr.id !463, !verifier.code !63 */
  $M.246 := $store.i64($M.246, $p306, $i307);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  /* %309 = load i128, i128* %21, align 16, !dbg !443, !psr.id !464, !verifier.code !63 */
  $i308 := $load.i128($M.246, $p20);
  /* call void @llvm.dbg.value(metadata i128 %309, metadata !4734, metadata !DIExpression()), !dbg !4504, !psr.id !4735, !verifier.code !64 */
  call {:cexpr "s10"} boogie_si_record_i128($i308);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %310 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %194, i64 %179), !dbg !467, !psr.id !468, !ValueTainted !243, !verifier.code !63 */
  call $p309 := FStar_UInt128_mul_wide($i193, $i178);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  /* %311 = bitcast i128* %22 to { i64, i64 }*, !dbg !467, !psr.id !469, !verifier.code !63 */
  $p310 := $bitcast.ref.ref($p21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  /* %312 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %311, i32 0, i32 0, !dbg !467, !psr.id !470, !verifier.code !63 */
  $p311 := $add.ref($add.ref($p310, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  /* %313 = extractvalue { i64, i64 } %310, 0, !dbg !467, !psr.id !471, !verifier.code !63 */
  $i312 := $extractvalue.i64($p309, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %313, i64* %312, align 16, !dbg !467, !psr.id !472, !verifier.code !63 */
  $M.247 := $store.i64($M.247, $p311, $i312);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  /* %314 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %311, i32 0, i32 1, !dbg !467, !psr.id !473, !verifier.code !63 */
  $p313 := $add.ref($add.ref($p310, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  /* %315 = extractvalue { i64, i64 } %310, 1, !dbg !467, !psr.id !474, !verifier.code !63 */
  $i314 := $extractvalue.i64($p309, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %315, i64* %314, align 8, !dbg !467, !psr.id !475, !verifier.code !63 */
  $M.247 := $store.i64($M.247, $p313, $i314);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  /* %316 = load i128, i128* %22, align 16, !dbg !467, !psr.id !476, !verifier.code !63 */
  $i315 := $load.i128($M.247, $p21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %317 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %177, i64 %177), !dbg !477, !psr.id !478, !ValueTainted !243, !verifier.code !63 */
  call $p316 := FStar_UInt128_mul_wide($i176, $i176);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  /* %318 = bitcast i128* %23 to { i64, i64 }*, !dbg !477, !psr.id !479, !verifier.code !63 */
  $p317 := $bitcast.ref.ref($p22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  /* %319 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %318, i32 0, i32 0, !dbg !477, !psr.id !480, !verifier.code !63 */
  $p318 := $add.ref($add.ref($p317, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  /* %320 = extractvalue { i64, i64 } %317, 0, !dbg !477, !psr.id !481, !verifier.code !63 */
  $i319 := $extractvalue.i64($p316, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %320, i64* %319, align 16, !dbg !477, !psr.id !482, !verifier.code !63 */
  $M.248 := $store.i64($M.248, $p318, $i319);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  /* %321 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %318, i32 0, i32 1, !dbg !477, !psr.id !483, !verifier.code !63 */
  $p320 := $add.ref($add.ref($p317, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  /* %322 = extractvalue { i64, i64 } %317, 1, !dbg !477, !psr.id !484, !verifier.code !63 */
  $i321 := $extractvalue.i64($p316, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %322, i64* %321, align 8, !dbg !477, !psr.id !485, !verifier.code !63 */
  $M.248 := $store.i64($M.248, $p320, $i321);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  /* %323 = load i128, i128* %23, align 16, !dbg !477, !psr.id !486, !verifier.code !63 */
  $i322 := $load.i128($M.248, $p22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %316, i128* %24, align 16, !dbg !487, !psr.id !488, !verifier.code !63 */
  $M.249 := $store.i128($M.249, $p23, $i315);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %324 = bitcast i128* %24 to { i64, i64 }*, !dbg !487, !psr.id !489, !verifier.code !63 */
  $p323 := $bitcast.ref.ref($p23);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %325 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %324, i32 0, i32 0, !dbg !487, !psr.id !490, !verifier.code !63 */
  $p324 := $add.ref($add.ref($p323, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %326 = load i64, i64* %325, align 16, !dbg !487, !psr.id !491, !verifier.code !63 */
  $i325 := $load.i64($M.249, $p324);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %327 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %324, i32 0, i32 1, !dbg !487, !psr.id !492, !verifier.code !63 */
  $p326 := $add.ref($add.ref($p323, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %328 = load i64, i64* %327, align 8, !dbg !487, !psr.id !493, !verifier.code !63 */
  $i327 := $load.i64($M.249, $p326);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %323, i128* %25, align 16, !dbg !487, !psr.id !494, !verifier.code !63 */
  $M.250 := $store.i128($M.250, $p24, $i322);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %329 = bitcast i128* %25 to { i64, i64 }*, !dbg !487, !psr.id !495, !verifier.code !63 */
  $p328 := $bitcast.ref.ref($p24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %330 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %329, i32 0, i32 0, !dbg !487, !psr.id !496, !verifier.code !63 */
  $p329 := $add.ref($add.ref($p328, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %331 = load i64, i64* %330, align 16, !dbg !487, !psr.id !497, !verifier.code !63 */
  $i330 := $load.i64($M.250, $p329);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %332 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %329, i32 0, i32 1, !dbg !487, !psr.id !498, !verifier.code !63 */
  $p331 := $add.ref($add.ref($p328, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %333 = load i64, i64* %332, align 8, !dbg !487, !psr.id !499, !verifier.code !63 */
  $i332 := $load.i64($M.250, $p331);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %334 = call { i64, i64 } @FStar_UInt128_add(i64 %326, i64 %328, i64 %331, i64 %333), !dbg !487, !psr.id !500, !verifier.code !63 */
  call $p333 := FStar_UInt128_add($i325, $i327, $i330, $i332);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %335 = bitcast i128* %26 to { i64, i64 }*, !dbg !487, !psr.id !501, !verifier.code !63 */
  $p334 := $bitcast.ref.ref($p25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %336 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %335, i32 0, i32 0, !dbg !487, !psr.id !502, !verifier.code !63 */
  $p335 := $add.ref($add.ref($p334, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %337 = extractvalue { i64, i64 } %334, 0, !dbg !487, !psr.id !503, !verifier.code !63 */
  $i336 := $extractvalue.i64($p333, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %337, i64* %336, align 16, !dbg !487, !psr.id !504, !verifier.code !63 */
  $M.251 := $store.i64($M.251, $p335, $i336);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %338 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %335, i32 0, i32 1, !dbg !487, !psr.id !505, !verifier.code !63 */
  $p337 := $add.ref($add.ref($p334, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %339 = extractvalue { i64, i64 } %334, 1, !dbg !487, !psr.id !506, !verifier.code !63 */
  $i338 := $extractvalue.i64($p333, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %339, i64* %338, align 8, !dbg !487, !psr.id !507, !verifier.code !63 */
  $M.251 := $store.i64($M.251, $p337, $i338);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  /* %340 = load i128, i128* %26, align 16, !dbg !487, !psr.id !508, !verifier.code !63 */
  $i339 := $load.i128($M.251, $p25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %341 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %199, i64 %181), !dbg !509, !psr.id !510, !ValueTainted !243, !verifier.code !63 */
  call $p340 := FStar_UInt128_mul_wide($i198, $i180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  /* %342 = bitcast i128* %27 to { i64, i64 }*, !dbg !509, !psr.id !511, !verifier.code !63 */
  $p341 := $bitcast.ref.ref($p26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  /* %343 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %342, i32 0, i32 0, !dbg !509, !psr.id !512, !verifier.code !63 */
  $p342 := $add.ref($add.ref($p341, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  /* %344 = extractvalue { i64, i64 } %341, 0, !dbg !509, !psr.id !513, !verifier.code !63 */
  $i343 := $extractvalue.i64($p340, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %344, i64* %343, align 16, !dbg !509, !psr.id !514, !verifier.code !63 */
  $M.252 := $store.i64($M.252, $p342, $i343);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  /* %345 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %342, i32 0, i32 1, !dbg !509, !psr.id !515, !verifier.code !63 */
  $p344 := $add.ref($add.ref($p341, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  /* %346 = extractvalue { i64, i64 } %341, 1, !dbg !509, !psr.id !516, !verifier.code !63 */
  $i345 := $extractvalue.i64($p340, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %346, i64* %345, align 8, !dbg !509, !psr.id !517, !verifier.code !63 */
  $M.252 := $store.i64($M.252, $p344, $i345);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  /* %347 = load i128, i128* %27, align 16, !dbg !509, !psr.id !518, !verifier.code !63 */
  $i346 := $load.i128($M.252, $p26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %340, i128* %28, align 16, !dbg !519, !psr.id !520, !verifier.code !63 */
  $M.253 := $store.i128($M.253, $p27, $i339);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %348 = bitcast i128* %28 to { i64, i64 }*, !dbg !519, !psr.id !521, !verifier.code !63 */
  $p347 := $bitcast.ref.ref($p27);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %349 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %348, i32 0, i32 0, !dbg !519, !psr.id !522, !verifier.code !63 */
  $p348 := $add.ref($add.ref($p347, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %350 = load i64, i64* %349, align 16, !dbg !519, !psr.id !523, !verifier.code !63 */
  $i349 := $load.i64($M.253, $p348);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %351 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %348, i32 0, i32 1, !dbg !519, !psr.id !524, !verifier.code !63 */
  $p350 := $add.ref($add.ref($p347, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %352 = load i64, i64* %351, align 8, !dbg !519, !psr.id !525, !verifier.code !63 */
  $i351 := $load.i64($M.253, $p350);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %347, i128* %29, align 16, !dbg !519, !psr.id !526, !verifier.code !63 */
  $M.254 := $store.i128($M.254, $p28, $i346);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %353 = bitcast i128* %29 to { i64, i64 }*, !dbg !519, !psr.id !527, !verifier.code !63 */
  $p352 := $bitcast.ref.ref($p28);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %354 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %353, i32 0, i32 0, !dbg !519, !psr.id !528, !verifier.code !63 */
  $p353 := $add.ref($add.ref($p352, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %355 = load i64, i64* %354, align 16, !dbg !519, !psr.id !529, !verifier.code !63 */
  $i354 := $load.i64($M.254, $p353);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %356 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %353, i32 0, i32 1, !dbg !519, !psr.id !530, !verifier.code !63 */
  $p355 := $add.ref($add.ref($p352, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %357 = load i64, i64* %356, align 8, !dbg !519, !psr.id !531, !verifier.code !63 */
  $i356 := $load.i64($M.254, $p355);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %358 = call { i64, i64 } @FStar_UInt128_add(i64 %350, i64 %352, i64 %355, i64 %357), !dbg !519, !psr.id !532, !verifier.code !63 */
  call $p357 := FStar_UInt128_add($i349, $i351, $i354, $i356);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %359 = bitcast i128* %30 to { i64, i64 }*, !dbg !519, !psr.id !533, !verifier.code !63 */
  $p358 := $bitcast.ref.ref($p29);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %360 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %359, i32 0, i32 0, !dbg !519, !psr.id !534, !verifier.code !63 */
  $p359 := $add.ref($add.ref($p358, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %361 = extractvalue { i64, i64 } %358, 0, !dbg !519, !psr.id !535, !verifier.code !63 */
  $i360 := $extractvalue.i64($p357, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %361, i64* %360, align 16, !dbg !519, !psr.id !536, !verifier.code !63 */
  $M.255 := $store.i64($M.255, $p359, $i360);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %362 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %359, i32 0, i32 1, !dbg !519, !psr.id !537, !verifier.code !63 */
  $p361 := $add.ref($add.ref($p358, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %363 = extractvalue { i64, i64 } %358, 1, !dbg !519, !psr.id !538, !verifier.code !63 */
  $i362 := $extractvalue.i64($p357, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %363, i64* %362, align 8, !dbg !519, !psr.id !539, !verifier.code !63 */
  $M.255 := $store.i64($M.255, $p361, $i362);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  /* %364 = load i128, i128* %30, align 16, !dbg !519, !psr.id !540, !verifier.code !63 */
  $i363 := $load.i128($M.255, $p29);
  /* call void @llvm.dbg.value(metadata i128 %364, metadata !4810, metadata !DIExpression()), !dbg !4504, !psr.id !4811, !verifier.code !64 */
  call {:cexpr "s20"} boogie_si_record_i128($i363);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %365 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %194, i64 %181), !dbg !543, !psr.id !544, !ValueTainted !243, !verifier.code !63 */
  call $p364 := FStar_UInt128_mul_wide($i193, $i180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  /* %366 = bitcast i128* %31 to { i64, i64 }*, !dbg !543, !psr.id !545, !verifier.code !63 */
  $p365 := $bitcast.ref.ref($p30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  /* %367 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %366, i32 0, i32 0, !dbg !543, !psr.id !546, !verifier.code !63 */
  $p366 := $add.ref($add.ref($p365, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  /* %368 = extractvalue { i64, i64 } %365, 0, !dbg !543, !psr.id !547, !verifier.code !63 */
  $i367 := $extractvalue.i64($p364, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %368, i64* %367, align 16, !dbg !543, !psr.id !548, !verifier.code !63 */
  $M.256 := $store.i64($M.256, $p366, $i367);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  /* %369 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %366, i32 0, i32 1, !dbg !543, !psr.id !549, !verifier.code !63 */
  $p368 := $add.ref($add.ref($p365, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  /* %370 = extractvalue { i64, i64 } %365, 1, !dbg !543, !psr.id !550, !verifier.code !63 */
  $i369 := $extractvalue.i64($p364, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %370, i64* %369, align 8, !dbg !543, !psr.id !551, !verifier.code !63 */
  $M.256 := $store.i64($M.256, $p368, $i369);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  /* %371 = load i128, i128* %31, align 16, !dbg !543, !psr.id !552, !verifier.code !63 */
  $i370 := $load.i128($M.256, $p30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %372 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %195, i64 %179), !dbg !553, !psr.id !554, !ValueTainted !243, !verifier.code !63 */
  call $p371 := FStar_UInt128_mul_wide($i194, $i178);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  /* %373 = bitcast i128* %32 to { i64, i64 }*, !dbg !553, !psr.id !555, !verifier.code !63 */
  $p372 := $bitcast.ref.ref($p31);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  /* %374 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %373, i32 0, i32 0, !dbg !553, !psr.id !556, !verifier.code !63 */
  $p373 := $add.ref($add.ref($p372, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  /* %375 = extractvalue { i64, i64 } %372, 0, !dbg !553, !psr.id !557, !verifier.code !63 */
  $i374 := $extractvalue.i64($p371, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %375, i64* %374, align 16, !dbg !553, !psr.id !558, !verifier.code !63 */
  $M.257 := $store.i64($M.257, $p373, $i374);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  /* %376 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %373, i32 0, i32 1, !dbg !553, !psr.id !559, !verifier.code !63 */
  $p375 := $add.ref($add.ref($p372, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  /* %377 = extractvalue { i64, i64 } %372, 1, !dbg !553, !psr.id !560, !verifier.code !63 */
  $i376 := $extractvalue.i64($p371, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %377, i64* %376, align 8, !dbg !553, !psr.id !561, !verifier.code !63 */
  $M.257 := $store.i64($M.257, $p375, $i376);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  /* %378 = load i128, i128* %32, align 16, !dbg !553, !psr.id !562, !verifier.code !63 */
  $i377 := $load.i128($M.257, $p31);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %371, i128* %33, align 16, !dbg !563, !psr.id !564, !verifier.code !63 */
  $M.258 := $store.i128($M.258, $p32, $i370);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %379 = bitcast i128* %33 to { i64, i64 }*, !dbg !563, !psr.id !565, !verifier.code !63 */
  $p378 := $bitcast.ref.ref($p32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %380 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %379, i32 0, i32 0, !dbg !563, !psr.id !566, !verifier.code !63 */
  $p379 := $add.ref($add.ref($p378, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %381 = load i64, i64* %380, align 16, !dbg !563, !psr.id !567, !verifier.code !63 */
  $i380 := $load.i64($M.258, $p379);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %382 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %379, i32 0, i32 1, !dbg !563, !psr.id !568, !verifier.code !63 */
  $p381 := $add.ref($add.ref($p378, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %383 = load i64, i64* %382, align 8, !dbg !563, !psr.id !569, !verifier.code !63 */
  $i382 := $load.i64($M.258, $p381);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %378, i128* %34, align 16, !dbg !563, !psr.id !570, !verifier.code !63 */
  $M.259 := $store.i128($M.259, $p33, $i377);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %384 = bitcast i128* %34 to { i64, i64 }*, !dbg !563, !psr.id !571, !verifier.code !63 */
  $p383 := $bitcast.ref.ref($p33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %385 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %384, i32 0, i32 0, !dbg !563, !psr.id !572, !verifier.code !63 */
  $p384 := $add.ref($add.ref($p383, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %386 = load i64, i64* %385, align 16, !dbg !563, !psr.id !573, !verifier.code !63 */
  $i385 := $load.i64($M.259, $p384);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %387 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %384, i32 0, i32 1, !dbg !563, !psr.id !574, !verifier.code !63 */
  $p386 := $add.ref($add.ref($p383, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %388 = load i64, i64* %387, align 8, !dbg !563, !psr.id !575, !verifier.code !63 */
  $i387 := $load.i64($M.259, $p386);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %389 = call { i64, i64 } @FStar_UInt128_add(i64 %381, i64 %383, i64 %386, i64 %388), !dbg !563, !psr.id !576, !verifier.code !63 */
  call $p388 := FStar_UInt128_add($i380, $i382, $i385, $i387);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %390 = bitcast i128* %35 to { i64, i64 }*, !dbg !563, !psr.id !577, !verifier.code !63 */
  $p389 := $bitcast.ref.ref($p34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %391 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %390, i32 0, i32 0, !dbg !563, !psr.id !578, !verifier.code !63 */
  $p390 := $add.ref($add.ref($p389, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %392 = extractvalue { i64, i64 } %389, 0, !dbg !563, !psr.id !579, !verifier.code !63 */
  $i391 := $extractvalue.i64($p388, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %392, i64* %391, align 16, !dbg !563, !psr.id !580, !verifier.code !63 */
  $M.260 := $store.i64($M.260, $p390, $i391);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %393 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %390, i32 0, i32 1, !dbg !563, !psr.id !581, !verifier.code !63 */
  $p392 := $add.ref($add.ref($p389, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %394 = extractvalue { i64, i64 } %389, 1, !dbg !563, !psr.id !582, !verifier.code !63 */
  $i393 := $extractvalue.i64($p388, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %394, i64* %393, align 8, !dbg !563, !psr.id !583, !verifier.code !63 */
  $M.260 := $store.i64($M.260, $p392, $i393);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  /* %395 = load i128, i128* %35, align 16, !dbg !563, !psr.id !584, !verifier.code !63 */
  $i394 := $load.i128($M.260, $p34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %396 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %183, i64 %198), !dbg !585, !psr.id !586, !ValueTainted !243, !verifier.code !63 */
  call $p395 := FStar_UInt128_mul_wide($i182, $i197);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  /* %397 = bitcast i128* %36 to { i64, i64 }*, !dbg !585, !psr.id !587, !verifier.code !63 */
  $p396 := $bitcast.ref.ref($p35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  /* %398 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %397, i32 0, i32 0, !dbg !585, !psr.id !588, !verifier.code !63 */
  $p397 := $add.ref($add.ref($p396, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  /* %399 = extractvalue { i64, i64 } %396, 0, !dbg !585, !psr.id !589, !verifier.code !63 */
  $i398 := $extractvalue.i64($p395, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %399, i64* %398, align 16, !dbg !585, !psr.id !590, !verifier.code !63 */
  $M.261 := $store.i64($M.261, $p397, $i398);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  /* %400 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %397, i32 0, i32 1, !dbg !585, !psr.id !591, !verifier.code !63 */
  $p399 := $add.ref($add.ref($p396, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  /* %401 = extractvalue { i64, i64 } %396, 1, !dbg !585, !psr.id !592, !verifier.code !63 */
  $i400 := $extractvalue.i64($p395, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %401, i64* %400, align 8, !dbg !585, !psr.id !593, !verifier.code !63 */
  $M.261 := $store.i64($M.261, $p399, $i400);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  /* %402 = load i128, i128* %36, align 16, !dbg !585, !psr.id !594, !verifier.code !63 */
  $i401 := $load.i128($M.261, $p35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %395, i128* %37, align 16, !dbg !595, !psr.id !596, !verifier.code !63 */
  $M.262 := $store.i128($M.262, $p36, $i394);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %403 = bitcast i128* %37 to { i64, i64 }*, !dbg !595, !psr.id !597, !verifier.code !63 */
  $p402 := $bitcast.ref.ref($p36);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %404 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %403, i32 0, i32 0, !dbg !595, !psr.id !598, !verifier.code !63 */
  $p403 := $add.ref($add.ref($p402, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %405 = load i64, i64* %404, align 16, !dbg !595, !psr.id !599, !verifier.code !63 */
  $i404 := $load.i64($M.262, $p403);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %406 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %403, i32 0, i32 1, !dbg !595, !psr.id !600, !verifier.code !63 */
  $p405 := $add.ref($add.ref($p402, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %407 = load i64, i64* %406, align 8, !dbg !595, !psr.id !601, !verifier.code !63 */
  $i406 := $load.i64($M.262, $p405);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %402, i128* %38, align 16, !dbg !595, !psr.id !602, !verifier.code !63 */
  $M.263 := $store.i128($M.263, $p37, $i401);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %408 = bitcast i128* %38 to { i64, i64 }*, !dbg !595, !psr.id !603, !verifier.code !63 */
  $p407 := $bitcast.ref.ref($p37);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %409 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %408, i32 0, i32 0, !dbg !595, !psr.id !604, !verifier.code !63 */
  $p408 := $add.ref($add.ref($p407, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %410 = load i64, i64* %409, align 16, !dbg !595, !psr.id !605, !verifier.code !63 */
  $i409 := $load.i64($M.263, $p408);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %411 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %408, i32 0, i32 1, !dbg !595, !psr.id !606, !verifier.code !63 */
  $p410 := $add.ref($add.ref($p407, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %412 = load i64, i64* %411, align 8, !dbg !595, !psr.id !607, !verifier.code !63 */
  $i411 := $load.i64($M.263, $p410);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %413 = call { i64, i64 } @FStar_UInt128_add(i64 %405, i64 %407, i64 %410, i64 %412), !dbg !595, !psr.id !608, !verifier.code !63 */
  call $p412 := FStar_UInt128_add($i404, $i406, $i409, $i411);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %414 = bitcast i128* %39 to { i64, i64 }*, !dbg !595, !psr.id !609, !verifier.code !63 */
  $p413 := $bitcast.ref.ref($p38);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %415 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %414, i32 0, i32 0, !dbg !595, !psr.id !610, !verifier.code !63 */
  $p414 := $add.ref($add.ref($p413, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %416 = extractvalue { i64, i64 } %413, 0, !dbg !595, !psr.id !611, !verifier.code !63 */
  $i415 := $extractvalue.i64($p412, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %416, i64* %415, align 16, !dbg !595, !psr.id !612, !verifier.code !63 */
  $M.264 := $store.i64($M.264, $p414, $i415);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %417 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %414, i32 0, i32 1, !dbg !595, !psr.id !613, !verifier.code !63 */
  $p416 := $add.ref($add.ref($p413, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %418 = extractvalue { i64, i64 } %413, 1, !dbg !595, !psr.id !614, !verifier.code !63 */
  $i417 := $extractvalue.i64($p412, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %418, i64* %417, align 8, !dbg !595, !psr.id !615, !verifier.code !63 */
  $M.264 := $store.i64($M.264, $p416, $i417);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  /* %419 = load i128, i128* %39, align 16, !dbg !595, !psr.id !616, !verifier.code !63 */
  $i418 := $load.i128($M.264, $p38);
  /* call void @llvm.dbg.value(metadata i128 %419, metadata !4886, metadata !DIExpression()), !dbg !4504, !psr.id !4887, !verifier.code !64 */
  call {:cexpr "s30"} boogie_si_record_i128($i418);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %420 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %194, i64 %183), !dbg !619, !psr.id !620, !ValueTainted !243, !verifier.code !63 */
  call $p419 := FStar_UInt128_mul_wide($i193, $i182);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  /* %421 = bitcast i128* %40 to { i64, i64 }*, !dbg !619, !psr.id !621, !verifier.code !63 */
  $p420 := $bitcast.ref.ref($p39);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  /* %422 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %421, i32 0, i32 0, !dbg !619, !psr.id !622, !verifier.code !63 */
  $p421 := $add.ref($add.ref($p420, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  /* %423 = extractvalue { i64, i64 } %420, 0, !dbg !619, !psr.id !623, !verifier.code !63 */
  $i422 := $extractvalue.i64($p419, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %423, i64* %422, align 16, !dbg !619, !psr.id !624, !verifier.code !63 */
  $M.265 := $store.i64($M.265, $p421, $i422);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  /* %424 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %421, i32 0, i32 1, !dbg !619, !psr.id !625, !verifier.code !63 */
  $p423 := $add.ref($add.ref($p420, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  /* %425 = extractvalue { i64, i64 } %420, 1, !dbg !619, !psr.id !626, !verifier.code !63 */
  $i424 := $extractvalue.i64($p419, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %425, i64* %424, align 8, !dbg !619, !psr.id !627, !verifier.code !63 */
  $M.265 := $store.i64($M.265, $p423, $i424);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  /* %426 = load i128, i128* %40, align 16, !dbg !619, !psr.id !628, !verifier.code !63 */
  $i425 := $load.i128($M.265, $p39);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %427 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %195, i64 %181), !dbg !629, !psr.id !630, !ValueTainted !243, !verifier.code !63 */
  call $p426 := FStar_UInt128_mul_wide($i194, $i180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  /* %428 = bitcast i128* %41 to { i64, i64 }*, !dbg !629, !psr.id !631, !verifier.code !63 */
  $p427 := $bitcast.ref.ref($p40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  /* %429 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %428, i32 0, i32 0, !dbg !629, !psr.id !632, !verifier.code !63 */
  $p428 := $add.ref($add.ref($p427, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  /* %430 = extractvalue { i64, i64 } %427, 0, !dbg !629, !psr.id !633, !verifier.code !63 */
  $i429 := $extractvalue.i64($p426, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %430, i64* %429, align 16, !dbg !629, !psr.id !634, !verifier.code !63 */
  $M.266 := $store.i64($M.266, $p428, $i429);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  /* %431 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %428, i32 0, i32 1, !dbg !629, !psr.id !635, !verifier.code !63 */
  $p430 := $add.ref($add.ref($p427, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  /* %432 = extractvalue { i64, i64 } %427, 1, !dbg !629, !psr.id !636, !verifier.code !63 */
  $i431 := $extractvalue.i64($p426, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %432, i64* %431, align 8, !dbg !629, !psr.id !637, !verifier.code !63 */
  $M.266 := $store.i64($M.266, $p430, $i431);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  /* %433 = load i128, i128* %41, align 16, !dbg !629, !psr.id !638, !verifier.code !63 */
  $i432 := $load.i128($M.266, $p40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %426, i128* %42, align 16, !dbg !639, !psr.id !640, !verifier.code !63 */
  $M.267 := $store.i128($M.267, $p41, $i425);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %434 = bitcast i128* %42 to { i64, i64 }*, !dbg !639, !psr.id !641, !verifier.code !63 */
  $p433 := $bitcast.ref.ref($p41);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %435 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %434, i32 0, i32 0, !dbg !639, !psr.id !642, !verifier.code !63 */
  $p434 := $add.ref($add.ref($p433, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %436 = load i64, i64* %435, align 16, !dbg !639, !psr.id !643, !verifier.code !63 */
  $i435 := $load.i64($M.267, $p434);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %437 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %434, i32 0, i32 1, !dbg !639, !psr.id !644, !verifier.code !63 */
  $p436 := $add.ref($add.ref($p433, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %438 = load i64, i64* %437, align 8, !dbg !639, !psr.id !645, !verifier.code !63 */
  $i437 := $load.i64($M.267, $p436);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %433, i128* %43, align 16, !dbg !639, !psr.id !646, !verifier.code !63 */
  $M.268 := $store.i128($M.268, $p42, $i432);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %439 = bitcast i128* %43 to { i64, i64 }*, !dbg !639, !psr.id !647, !verifier.code !63 */
  $p438 := $bitcast.ref.ref($p42);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %440 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %439, i32 0, i32 0, !dbg !639, !psr.id !648, !verifier.code !63 */
  $p439 := $add.ref($add.ref($p438, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %441 = load i64, i64* %440, align 16, !dbg !639, !psr.id !649, !verifier.code !63 */
  $i440 := $load.i64($M.268, $p439);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %442 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %439, i32 0, i32 1, !dbg !639, !psr.id !650, !verifier.code !63 */
  $p441 := $add.ref($add.ref($p438, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %443 = load i64, i64* %442, align 8, !dbg !639, !psr.id !651, !verifier.code !63 */
  $i442 := $load.i64($M.268, $p441);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %444 = call { i64, i64 } @FStar_UInt128_add(i64 %436, i64 %438, i64 %441, i64 %443), !dbg !639, !psr.id !652, !verifier.code !63 */
  call $p443 := FStar_UInt128_add($i435, $i437, $i440, $i442);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %445 = bitcast i128* %44 to { i64, i64 }*, !dbg !639, !psr.id !653, !verifier.code !63 */
  $p444 := $bitcast.ref.ref($p43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %446 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %445, i32 0, i32 0, !dbg !639, !psr.id !654, !verifier.code !63 */
  $p445 := $add.ref($add.ref($p444, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %447 = extractvalue { i64, i64 } %444, 0, !dbg !639, !psr.id !655, !verifier.code !63 */
  $i446 := $extractvalue.i64($p443, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %447, i64* %446, align 16, !dbg !639, !psr.id !656, !verifier.code !63 */
  $M.269 := $store.i64($M.269, $p445, $i446);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %448 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %445, i32 0, i32 1, !dbg !639, !psr.id !657, !verifier.code !63 */
  $p447 := $add.ref($add.ref($p444, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %449 = extractvalue { i64, i64 } %444, 1, !dbg !639, !psr.id !658, !verifier.code !63 */
  $i448 := $extractvalue.i64($p443, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %449, i64* %448, align 8, !dbg !639, !psr.id !659, !verifier.code !63 */
  $M.269 := $store.i64($M.269, $p447, $i448);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  /* %450 = load i128, i128* %44, align 16, !dbg !639, !psr.id !660, !verifier.code !63 */
  $i449 := $load.i128($M.269, $p43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %451 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %179, i64 %179), !dbg !661, !psr.id !662, !ValueTainted !243, !verifier.code !63 */
  call $p450 := FStar_UInt128_mul_wide($i178, $i178);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  /* %452 = bitcast i128* %45 to { i64, i64 }*, !dbg !661, !psr.id !663, !verifier.code !63 */
  $p451 := $bitcast.ref.ref($p44);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  /* %453 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %452, i32 0, i32 0, !dbg !661, !psr.id !664, !verifier.code !63 */
  $p452 := $add.ref($add.ref($p451, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  /* %454 = extractvalue { i64, i64 } %451, 0, !dbg !661, !psr.id !665, !verifier.code !63 */
  $i453 := $extractvalue.i64($p450, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %454, i64* %453, align 16, !dbg !661, !psr.id !666, !verifier.code !63 */
  $M.270 := $store.i64($M.270, $p452, $i453);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  /* %455 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %452, i32 0, i32 1, !dbg !661, !psr.id !667, !verifier.code !63 */
  $p454 := $add.ref($add.ref($p451, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  /* %456 = extractvalue { i64, i64 } %451, 1, !dbg !661, !psr.id !668, !verifier.code !63 */
  $i455 := $extractvalue.i64($p450, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %456, i64* %455, align 8, !dbg !661, !psr.id !669, !verifier.code !63 */
  $M.270 := $store.i64($M.270, $p454, $i455);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  /* %457 = load i128, i128* %45, align 16, !dbg !661, !psr.id !670, !verifier.code !63 */
  $i456 := $load.i128($M.270, $p44);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %450, i128* %46, align 16, !dbg !671, !psr.id !672, !verifier.code !63 */
  $M.271 := $store.i128($M.271, $p45, $i449);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %458 = bitcast i128* %46 to { i64, i64 }*, !dbg !671, !psr.id !673, !verifier.code !63 */
  $p457 := $bitcast.ref.ref($p45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %459 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %458, i32 0, i32 0, !dbg !671, !psr.id !674, !verifier.code !63 */
  $p458 := $add.ref($add.ref($p457, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %460 = load i64, i64* %459, align 16, !dbg !671, !psr.id !675, !verifier.code !63 */
  $i459 := $load.i64($M.271, $p458);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %461 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %458, i32 0, i32 1, !dbg !671, !psr.id !676, !verifier.code !63 */
  $p460 := $add.ref($add.ref($p457, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %462 = load i64, i64* %461, align 8, !dbg !671, !psr.id !677, !verifier.code !63 */
  $i461 := $load.i64($M.271, $p460);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %457, i128* %47, align 16, !dbg !671, !psr.id !678, !verifier.code !63 */
  $M.272 := $store.i128($M.272, $p46, $i456);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %463 = bitcast i128* %47 to { i64, i64 }*, !dbg !671, !psr.id !679, !verifier.code !63 */
  $p462 := $bitcast.ref.ref($p46);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %464 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %463, i32 0, i32 0, !dbg !671, !psr.id !680, !verifier.code !63 */
  $p463 := $add.ref($add.ref($p462, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %465 = load i64, i64* %464, align 16, !dbg !671, !psr.id !681, !verifier.code !63 */
  $i464 := $load.i64($M.272, $p463);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %466 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %463, i32 0, i32 1, !dbg !671, !psr.id !682, !verifier.code !63 */
  $p465 := $add.ref($add.ref($p462, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %467 = load i64, i64* %466, align 8, !dbg !671, !psr.id !683, !verifier.code !63 */
  $i466 := $load.i64($M.272, $p465);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %468 = call { i64, i64 } @FStar_UInt128_add(i64 %460, i64 %462, i64 %465, i64 %467), !dbg !671, !psr.id !684, !verifier.code !63 */
  call $p467 := FStar_UInt128_add($i459, $i461, $i464, $i466);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %469 = bitcast i128* %48 to { i64, i64 }*, !dbg !671, !psr.id !685, !verifier.code !63 */
  $p468 := $bitcast.ref.ref($p47);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %470 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %469, i32 0, i32 0, !dbg !671, !psr.id !686, !verifier.code !63 */
  $p469 := $add.ref($add.ref($p468, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %471 = extractvalue { i64, i64 } %468, 0, !dbg !671, !psr.id !687, !verifier.code !63 */
  $i470 := $extractvalue.i64($p467, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %471, i64* %470, align 16, !dbg !671, !psr.id !688, !verifier.code !63 */
  $M.273 := $store.i64($M.273, $p469, $i470);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %472 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %469, i32 0, i32 1, !dbg !671, !psr.id !689, !verifier.code !63 */
  $p471 := $add.ref($add.ref($p468, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %473 = extractvalue { i64, i64 } %468, 1, !dbg !671, !psr.id !690, !verifier.code !63 */
  $i472 := $extractvalue.i64($p467, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %473, i64* %472, align 8, !dbg !671, !psr.id !691, !verifier.code !63 */
  $M.273 := $store.i64($M.273, $p471, $i472);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %474 = load i128, i128* %48, align 16, !dbg !671, !psr.id !692, !verifier.code !63 */
  $i473 := $load.i128($M.273, $p47);
  /* call void @llvm.dbg.value(metadata i128 %474, metadata !4962, metadata !DIExpression()), !dbg !4504, !psr.id !4963, !verifier.code !64 */
  call {:cexpr "s40"} boogie_si_record_i128($i473);
  /* call void @llvm.dbg.value(metadata i128 %254, metadata !4964, metadata !DIExpression()), !dbg !4504, !psr.id !4965, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %309, metadata !4966, metadata !DIExpression()), !dbg !4504, !psr.id !4967, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %364, metadata !4968, metadata !DIExpression()), !dbg !4504, !psr.id !4969, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %419, metadata !4970, metadata !DIExpression()), !dbg !4504, !psr.id !4971, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %474, metadata !4972, metadata !DIExpression()), !dbg !4504, !psr.id !4973, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 495, 30} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %475 = mul i64 2, %185, !dbg !705, !psr.id !706, !ValueTainted !243, !verifier.code !63 */
  $i474 := $mul.i64(2, $i184);
  /* call void @llvm.dbg.value(metadata i64 %475, metadata !4976, metadata !DIExpression()), !dbg !4504, !psr.id !4977, !verifier.code !64 */
  call {:cexpr "d0"} boogie_si_record_i64($i474);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 496, 30} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %476 = mul i64 2, %187, !dbg !709, !psr.id !710, !ValueTainted !243, !verifier.code !63 */
  $i475 := $mul.i64(2, $i186);
  /* call void @llvm.dbg.value(metadata i64 %476, metadata !4980, metadata !DIExpression()), !dbg !4504, !psr.id !4981, !verifier.code !64 */
  call {:cexpr "d1"} boogie_si_record_i64($i475);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 497, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %477 = mul i64 38, %189, !dbg !713, !psr.id !714, !ValueTainted !243, !verifier.code !63 */
  $i476 := $mul.i64(38, $i188);
  /* call void @llvm.dbg.value(metadata i64 %477, metadata !4984, metadata !DIExpression()), !dbg !4504, !psr.id !4985, !verifier.code !64 */
  call {:cexpr "d2"} boogie_si_record_i64($i476);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 498, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %478 = mul i64 19, %191, !dbg !717, !psr.id !718, !ValueTainted !243, !verifier.code !63 */
  $i477 := $mul.i64(19, $i190);
  /* call void @llvm.dbg.value(metadata i64 %478, metadata !4988, metadata !DIExpression()), !dbg !4504, !psr.id !4989, !verifier.code !64 */
  call {:cexpr "d3"} boogie_si_record_i64($i477);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 499, 33} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %479 = mul i64 19, %193, !dbg !721, !psr.id !722, !ValueTainted !243, !verifier.code !63 */
  $i478 := $mul.i64(19, $i192);
  /* call void @llvm.dbg.value(metadata i64 %479, metadata !4992, metadata !DIExpression()), !dbg !4504, !psr.id !4993, !verifier.code !64 */
  call {:cexpr "d419"} boogie_si_record_i64($i478);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 500, 30} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %480 = mul i64 2, %479, !dbg !725, !psr.id !726, !ValueTainted !243, !verifier.code !63 */
  $i479 := $mul.i64(2, $i478);
  /* call void @llvm.dbg.value(metadata i64 %480, metadata !4996, metadata !DIExpression()), !dbg !4504, !psr.id !4997, !verifier.code !64 */
  call {:cexpr "d4"} boogie_si_record_i64($i479);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %481 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %185, i64 %185), !dbg !729, !psr.id !730, !ValueTainted !243, !verifier.code !63 */
  call $p480 := FStar_UInt128_mul_wide($i184, $i184);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  /* %482 = bitcast i128* %49 to { i64, i64 }*, !dbg !729, !psr.id !731, !verifier.code !63 */
  $p481 := $bitcast.ref.ref($p48);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  /* %483 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %482, i32 0, i32 0, !dbg !729, !psr.id !732, !verifier.code !63 */
  $p482 := $add.ref($add.ref($p481, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  /* %484 = extractvalue { i64, i64 } %481, 0, !dbg !729, !psr.id !733, !verifier.code !63 */
  $i483 := $extractvalue.i64($p480, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %484, i64* %483, align 16, !dbg !729, !psr.id !734, !verifier.code !63 */
  $M.274 := $store.i64($M.274, $p482, $i483);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  /* %485 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %482, i32 0, i32 1, !dbg !729, !psr.id !735, !verifier.code !63 */
  $p484 := $add.ref($add.ref($p481, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  /* %486 = extractvalue { i64, i64 } %481, 1, !dbg !729, !psr.id !736, !verifier.code !63 */
  $i485 := $extractvalue.i64($p480, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %486, i64* %485, align 8, !dbg !729, !psr.id !737, !verifier.code !63 */
  $M.274 := $store.i64($M.274, $p484, $i485);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  /* %487 = load i128, i128* %49, align 16, !dbg !729, !psr.id !738, !verifier.code !63 */
  $i486 := $load.i128($M.274, $p48);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %488 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %480, i64 %187), !dbg !739, !psr.id !740, !ValueTainted !243, !verifier.code !63 */
  call $p487 := FStar_UInt128_mul_wide($i479, $i186);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  /* %489 = bitcast i128* %50 to { i64, i64 }*, !dbg !739, !psr.id !741, !verifier.code !63 */
  $p488 := $bitcast.ref.ref($p49);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  /* %490 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %489, i32 0, i32 0, !dbg !739, !psr.id !742, !verifier.code !63 */
  $p489 := $add.ref($add.ref($p488, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  /* %491 = extractvalue { i64, i64 } %488, 0, !dbg !739, !psr.id !743, !verifier.code !63 */
  $i490 := $extractvalue.i64($p487, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %491, i64* %490, align 16, !dbg !739, !psr.id !744, !verifier.code !63 */
  $M.275 := $store.i64($M.275, $p489, $i490);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  /* %492 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %489, i32 0, i32 1, !dbg !739, !psr.id !745, !verifier.code !63 */
  $p491 := $add.ref($add.ref($p488, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  /* %493 = extractvalue { i64, i64 } %488, 1, !dbg !739, !psr.id !746, !verifier.code !63 */
  $i492 := $extractvalue.i64($p487, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %493, i64* %492, align 8, !dbg !739, !psr.id !747, !verifier.code !63 */
  $M.275 := $store.i64($M.275, $p491, $i492);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  /* %494 = load i128, i128* %50, align 16, !dbg !739, !psr.id !748, !verifier.code !63 */
  $i493 := $load.i128($M.275, $p49);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %487, i128* %51, align 16, !dbg !749, !psr.id !750, !verifier.code !63 */
  $M.276 := $store.i128($M.276, $p50, $i486);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %495 = bitcast i128* %51 to { i64, i64 }*, !dbg !749, !psr.id !751, !verifier.code !63 */
  $p494 := $bitcast.ref.ref($p50);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %496 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %495, i32 0, i32 0, !dbg !749, !psr.id !752, !verifier.code !63 */
  $p495 := $add.ref($add.ref($p494, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %497 = load i64, i64* %496, align 16, !dbg !749, !psr.id !753, !verifier.code !63 */
  $i496 := $load.i64($M.276, $p495);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %498 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %495, i32 0, i32 1, !dbg !749, !psr.id !754, !verifier.code !63 */
  $p497 := $add.ref($add.ref($p494, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %499 = load i64, i64* %498, align 8, !dbg !749, !psr.id !755, !verifier.code !63 */
  $i498 := $load.i64($M.276, $p497);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %494, i128* %52, align 16, !dbg !749, !psr.id !756, !verifier.code !63 */
  $M.277 := $store.i128($M.277, $p51, $i493);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %500 = bitcast i128* %52 to { i64, i64 }*, !dbg !749, !psr.id !757, !verifier.code !63 */
  $p499 := $bitcast.ref.ref($p51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %501 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %500, i32 0, i32 0, !dbg !749, !psr.id !758, !verifier.code !63 */
  $p500 := $add.ref($add.ref($p499, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %502 = load i64, i64* %501, align 16, !dbg !749, !psr.id !759, !verifier.code !63 */
  $i501 := $load.i64($M.277, $p500);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %503 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %500, i32 0, i32 1, !dbg !749, !psr.id !760, !verifier.code !63 */
  $p502 := $add.ref($add.ref($p499, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %504 = load i64, i64* %503, align 8, !dbg !749, !psr.id !761, !verifier.code !63 */
  $i503 := $load.i64($M.277, $p502);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %505 = call { i64, i64 } @FStar_UInt128_add(i64 %497, i64 %499, i64 %502, i64 %504), !dbg !749, !psr.id !762, !verifier.code !63 */
  call $p504 := FStar_UInt128_add($i496, $i498, $i501, $i503);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %506 = bitcast i128* %53 to { i64, i64 }*, !dbg !749, !psr.id !763, !verifier.code !63 */
  $p505 := $bitcast.ref.ref($p52);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %507 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %506, i32 0, i32 0, !dbg !749, !psr.id !764, !verifier.code !63 */
  $p506 := $add.ref($add.ref($p505, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %508 = extractvalue { i64, i64 } %505, 0, !dbg !749, !psr.id !765, !verifier.code !63 */
  $i507 := $extractvalue.i64($p504, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %508, i64* %507, align 16, !dbg !749, !psr.id !766, !verifier.code !63 */
  $M.278 := $store.i64($M.278, $p506, $i507);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %509 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %506, i32 0, i32 1, !dbg !749, !psr.id !767, !verifier.code !63 */
  $p508 := $add.ref($add.ref($p505, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %510 = extractvalue { i64, i64 } %505, 1, !dbg !749, !psr.id !768, !verifier.code !63 */
  $i509 := $extractvalue.i64($p504, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %510, i64* %509, align 8, !dbg !749, !psr.id !769, !verifier.code !63 */
  $M.278 := $store.i64($M.278, $p508, $i509);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  /* %511 = load i128, i128* %53, align 16, !dbg !749, !psr.id !770, !verifier.code !63 */
  $i510 := $load.i128($M.278, $p52);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %512 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %477, i64 %191), !dbg !771, !psr.id !772, !ValueTainted !243, !verifier.code !63 */
  call $p511 := FStar_UInt128_mul_wide($i476, $i190);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  /* %513 = bitcast i128* %54 to { i64, i64 }*, !dbg !771, !psr.id !773, !verifier.code !63 */
  $p512 := $bitcast.ref.ref($p53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  /* %514 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %513, i32 0, i32 0, !dbg !771, !psr.id !774, !verifier.code !63 */
  $p513 := $add.ref($add.ref($p512, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  /* %515 = extractvalue { i64, i64 } %512, 0, !dbg !771, !psr.id !775, !verifier.code !63 */
  $i514 := $extractvalue.i64($p511, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %515, i64* %514, align 16, !dbg !771, !psr.id !776, !verifier.code !63 */
  $M.279 := $store.i64($M.279, $p513, $i514);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  /* %516 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %513, i32 0, i32 1, !dbg !771, !psr.id !777, !verifier.code !63 */
  $p515 := $add.ref($add.ref($p512, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  /* %517 = extractvalue { i64, i64 } %512, 1, !dbg !771, !psr.id !778, !verifier.code !63 */
  $i516 := $extractvalue.i64($p511, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %517, i64* %516, align 8, !dbg !771, !psr.id !779, !verifier.code !63 */
  $M.279 := $store.i64($M.279, $p515, $i516);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  /* %518 = load i128, i128* %54, align 16, !dbg !771, !psr.id !780, !verifier.code !63 */
  $i517 := $load.i128($M.279, $p53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %511, i128* %55, align 16, !dbg !781, !psr.id !782, !verifier.code !63 */
  $M.280 := $store.i128($M.280, $p54, $i510);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %519 = bitcast i128* %55 to { i64, i64 }*, !dbg !781, !psr.id !783, !verifier.code !63 */
  $p518 := $bitcast.ref.ref($p54);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %520 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %519, i32 0, i32 0, !dbg !781, !psr.id !784, !verifier.code !63 */
  $p519 := $add.ref($add.ref($p518, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %521 = load i64, i64* %520, align 16, !dbg !781, !psr.id !785, !verifier.code !63 */
  $i520 := $load.i64($M.280, $p519);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %522 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %519, i32 0, i32 1, !dbg !781, !psr.id !786, !verifier.code !63 */
  $p521 := $add.ref($add.ref($p518, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %523 = load i64, i64* %522, align 8, !dbg !781, !psr.id !787, !verifier.code !63 */
  $i522 := $load.i64($M.280, $p521);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %518, i128* %56, align 16, !dbg !781, !psr.id !788, !verifier.code !63 */
  $M.281 := $store.i128($M.281, $p55, $i517);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %524 = bitcast i128* %56 to { i64, i64 }*, !dbg !781, !psr.id !789, !verifier.code !63 */
  $p523 := $bitcast.ref.ref($p55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %525 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %524, i32 0, i32 0, !dbg !781, !psr.id !790, !verifier.code !63 */
  $p524 := $add.ref($add.ref($p523, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %526 = load i64, i64* %525, align 16, !dbg !781, !psr.id !791, !verifier.code !63 */
  $i525 := $load.i64($M.281, $p524);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %527 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %524, i32 0, i32 1, !dbg !781, !psr.id !792, !verifier.code !63 */
  $p526 := $add.ref($add.ref($p523, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %528 = load i64, i64* %527, align 8, !dbg !781, !psr.id !793, !verifier.code !63 */
  $i527 := $load.i64($M.281, $p526);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %529 = call { i64, i64 } @FStar_UInt128_add(i64 %521, i64 %523, i64 %526, i64 %528), !dbg !781, !psr.id !794, !verifier.code !63 */
  call $p528 := FStar_UInt128_add($i520, $i522, $i525, $i527);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %530 = bitcast i128* %57 to { i64, i64 }*, !dbg !781, !psr.id !795, !verifier.code !63 */
  $p529 := $bitcast.ref.ref($p56);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %531 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %530, i32 0, i32 0, !dbg !781, !psr.id !796, !verifier.code !63 */
  $p530 := $add.ref($add.ref($p529, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %532 = extractvalue { i64, i64 } %529, 0, !dbg !781, !psr.id !797, !verifier.code !63 */
  $i531 := $extractvalue.i64($p528, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %532, i64* %531, align 16, !dbg !781, !psr.id !798, !verifier.code !63 */
  $M.282 := $store.i64($M.282, $p530, $i531);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %533 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %530, i32 0, i32 1, !dbg !781, !psr.id !799, !verifier.code !63 */
  $p532 := $add.ref($add.ref($p529, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %534 = extractvalue { i64, i64 } %529, 1, !dbg !781, !psr.id !800, !verifier.code !63 */
  $i533 := $extractvalue.i64($p528, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %534, i64* %533, align 8, !dbg !781, !psr.id !801, !verifier.code !63 */
  $M.282 := $store.i64($M.282, $p532, $i533);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  /* %535 = load i128, i128* %57, align 16, !dbg !781, !psr.id !802, !verifier.code !63 */
  $i534 := $load.i128($M.282, $p56);
  /* call void @llvm.dbg.value(metadata i128 %535, metadata !5072, metadata !DIExpression()), !dbg !4504, !psr.id !5073, !verifier.code !64 */
  call {:cexpr "s0"} boogie_si_record_i128($i534);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %536 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %475, i64 %187), !dbg !805, !psr.id !806, !ValueTainted !243, !verifier.code !63 */
  call $p535 := FStar_UInt128_mul_wide($i474, $i186);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  /* %537 = bitcast i128* %58 to { i64, i64 }*, !dbg !805, !psr.id !807, !verifier.code !63 */
  $p536 := $bitcast.ref.ref($p57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  /* %538 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %537, i32 0, i32 0, !dbg !805, !psr.id !808, !verifier.code !63 */
  $p537 := $add.ref($add.ref($p536, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  /* %539 = extractvalue { i64, i64 } %536, 0, !dbg !805, !psr.id !809, !verifier.code !63 */
  $i538 := $extractvalue.i64($p535, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %539, i64* %538, align 16, !dbg !805, !psr.id !810, !verifier.code !63 */
  $M.283 := $store.i64($M.283, $p537, $i538);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  /* %540 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %537, i32 0, i32 1, !dbg !805, !psr.id !811, !verifier.code !63 */
  $p539 := $add.ref($add.ref($p536, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  /* %541 = extractvalue { i64, i64 } %536, 1, !dbg !805, !psr.id !812, !verifier.code !63 */
  $i540 := $extractvalue.i64($p535, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %541, i64* %540, align 8, !dbg !805, !psr.id !813, !verifier.code !63 */
  $M.283 := $store.i64($M.283, $p539, $i540);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  /* %542 = load i128, i128* %58, align 16, !dbg !805, !psr.id !814, !verifier.code !63 */
  $i541 := $load.i128($M.283, $p57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %543 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %480, i64 %189), !dbg !815, !psr.id !816, !ValueTainted !243, !verifier.code !63 */
  call $p542 := FStar_UInt128_mul_wide($i479, $i188);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  /* %544 = bitcast i128* %59 to { i64, i64 }*, !dbg !815, !psr.id !817, !verifier.code !63 */
  $p543 := $bitcast.ref.ref($p58);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  /* %545 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %544, i32 0, i32 0, !dbg !815, !psr.id !818, !verifier.code !63 */
  $p544 := $add.ref($add.ref($p543, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  /* %546 = extractvalue { i64, i64 } %543, 0, !dbg !815, !psr.id !819, !verifier.code !63 */
  $i545 := $extractvalue.i64($p542, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %546, i64* %545, align 16, !dbg !815, !psr.id !820, !verifier.code !63 */
  $M.284 := $store.i64($M.284, $p544, $i545);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  /* %547 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %544, i32 0, i32 1, !dbg !815, !psr.id !821, !verifier.code !63 */
  $p546 := $add.ref($add.ref($p543, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  /* %548 = extractvalue { i64, i64 } %543, 1, !dbg !815, !psr.id !822, !verifier.code !63 */
  $i547 := $extractvalue.i64($p542, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %548, i64* %547, align 8, !dbg !815, !psr.id !823, !verifier.code !63 */
  $M.284 := $store.i64($M.284, $p546, $i547);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  /* %549 = load i128, i128* %59, align 16, !dbg !815, !psr.id !824, !verifier.code !63 */
  $i548 := $load.i128($M.284, $p58);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %542, i128* %60, align 16, !dbg !825, !psr.id !826, !verifier.code !63 */
  $M.285 := $store.i128($M.285, $p59, $i541);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %550 = bitcast i128* %60 to { i64, i64 }*, !dbg !825, !psr.id !827, !verifier.code !63 */
  $p549 := $bitcast.ref.ref($p59);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %551 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %550, i32 0, i32 0, !dbg !825, !psr.id !828, !verifier.code !63 */
  $p550 := $add.ref($add.ref($p549, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %552 = load i64, i64* %551, align 16, !dbg !825, !psr.id !829, !verifier.code !63 */
  $i551 := $load.i64($M.285, $p550);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %553 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %550, i32 0, i32 1, !dbg !825, !psr.id !830, !verifier.code !63 */
  $p552 := $add.ref($add.ref($p549, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %554 = load i64, i64* %553, align 8, !dbg !825, !psr.id !831, !verifier.code !63 */
  $i553 := $load.i64($M.285, $p552);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %549, i128* %61, align 16, !dbg !825, !psr.id !832, !verifier.code !63 */
  $M.286 := $store.i128($M.286, $p60, $i548);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %555 = bitcast i128* %61 to { i64, i64 }*, !dbg !825, !psr.id !833, !verifier.code !63 */
  $p554 := $bitcast.ref.ref($p60);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %556 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %555, i32 0, i32 0, !dbg !825, !psr.id !834, !verifier.code !63 */
  $p555 := $add.ref($add.ref($p554, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %557 = load i64, i64* %556, align 16, !dbg !825, !psr.id !835, !verifier.code !63 */
  $i556 := $load.i64($M.286, $p555);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %558 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %555, i32 0, i32 1, !dbg !825, !psr.id !836, !verifier.code !63 */
  $p557 := $add.ref($add.ref($p554, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %559 = load i64, i64* %558, align 8, !dbg !825, !psr.id !837, !verifier.code !63 */
  $i558 := $load.i64($M.286, $p557);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %560 = call { i64, i64 } @FStar_UInt128_add(i64 %552, i64 %554, i64 %557, i64 %559), !dbg !825, !psr.id !838, !verifier.code !63 */
  call $p559 := FStar_UInt128_add($i551, $i553, $i556, $i558);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %561 = bitcast i128* %62 to { i64, i64 }*, !dbg !825, !psr.id !839, !verifier.code !63 */
  $p560 := $bitcast.ref.ref($p61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %562 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %561, i32 0, i32 0, !dbg !825, !psr.id !840, !verifier.code !63 */
  $p561 := $add.ref($add.ref($p560, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %563 = extractvalue { i64, i64 } %560, 0, !dbg !825, !psr.id !841, !verifier.code !63 */
  $i562 := $extractvalue.i64($p559, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %563, i64* %562, align 16, !dbg !825, !psr.id !842, !verifier.code !63 */
  $M.287 := $store.i64($M.287, $p561, $i562);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %564 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %561, i32 0, i32 1, !dbg !825, !psr.id !843, !verifier.code !63 */
  $p563 := $add.ref($add.ref($p560, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %565 = extractvalue { i64, i64 } %560, 1, !dbg !825, !psr.id !844, !verifier.code !63 */
  $i564 := $extractvalue.i64($p559, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %565, i64* %564, align 8, !dbg !825, !psr.id !845, !verifier.code !63 */
  $M.287 := $store.i64($M.287, $p563, $i564);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  /* %566 = load i128, i128* %62, align 16, !dbg !825, !psr.id !846, !verifier.code !63 */
  $i565 := $load.i128($M.287, $p61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %567 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %478, i64 %191), !dbg !847, !psr.id !848, !ValueTainted !243, !verifier.code !63 */
  call $p566 := FStar_UInt128_mul_wide($i477, $i190);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  /* %568 = bitcast i128* %63 to { i64, i64 }*, !dbg !847, !psr.id !849, !verifier.code !63 */
  $p567 := $bitcast.ref.ref($p62);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  /* %569 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %568, i32 0, i32 0, !dbg !847, !psr.id !850, !verifier.code !63 */
  $p568 := $add.ref($add.ref($p567, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  /* %570 = extractvalue { i64, i64 } %567, 0, !dbg !847, !psr.id !851, !verifier.code !63 */
  $i569 := $extractvalue.i64($p566, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %570, i64* %569, align 16, !dbg !847, !psr.id !852, !verifier.code !63 */
  $M.288 := $store.i64($M.288, $p568, $i569);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  /* %571 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %568, i32 0, i32 1, !dbg !847, !psr.id !853, !verifier.code !63 */
  $p570 := $add.ref($add.ref($p567, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  /* %572 = extractvalue { i64, i64 } %567, 1, !dbg !847, !psr.id !854, !verifier.code !63 */
  $i571 := $extractvalue.i64($p566, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %572, i64* %571, align 8, !dbg !847, !psr.id !855, !verifier.code !63 */
  $M.288 := $store.i64($M.288, $p570, $i571);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  /* %573 = load i128, i128* %63, align 16, !dbg !847, !psr.id !856, !verifier.code !63 */
  $i572 := $load.i128($M.288, $p62);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %566, i128* %64, align 16, !dbg !857, !psr.id !858, !verifier.code !63 */
  $M.289 := $store.i128($M.289, $p63, $i565);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %574 = bitcast i128* %64 to { i64, i64 }*, !dbg !857, !psr.id !859, !verifier.code !63 */
  $p573 := $bitcast.ref.ref($p63);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %575 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %574, i32 0, i32 0, !dbg !857, !psr.id !860, !verifier.code !63 */
  $p574 := $add.ref($add.ref($p573, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %576 = load i64, i64* %575, align 16, !dbg !857, !psr.id !861, !verifier.code !63 */
  $i575 := $load.i64($M.289, $p574);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %577 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %574, i32 0, i32 1, !dbg !857, !psr.id !862, !verifier.code !63 */
  $p576 := $add.ref($add.ref($p573, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %578 = load i64, i64* %577, align 8, !dbg !857, !psr.id !863, !verifier.code !63 */
  $i577 := $load.i64($M.289, $p576);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %573, i128* %65, align 16, !dbg !857, !psr.id !864, !verifier.code !63 */
  $M.290 := $store.i128($M.290, $p64, $i572);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %579 = bitcast i128* %65 to { i64, i64 }*, !dbg !857, !psr.id !865, !verifier.code !63 */
  $p578 := $bitcast.ref.ref($p64);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %580 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %579, i32 0, i32 0, !dbg !857, !psr.id !866, !verifier.code !63 */
  $p579 := $add.ref($add.ref($p578, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %581 = load i64, i64* %580, align 16, !dbg !857, !psr.id !867, !verifier.code !63 */
  $i580 := $load.i64($M.290, $p579);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %582 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %579, i32 0, i32 1, !dbg !857, !psr.id !868, !verifier.code !63 */
  $p581 := $add.ref($add.ref($p578, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %583 = load i64, i64* %582, align 8, !dbg !857, !psr.id !869, !verifier.code !63 */
  $i582 := $load.i64($M.290, $p581);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %584 = call { i64, i64 } @FStar_UInt128_add(i64 %576, i64 %578, i64 %581, i64 %583), !dbg !857, !psr.id !870, !verifier.code !63 */
  call $p583 := FStar_UInt128_add($i575, $i577, $i580, $i582);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %585 = bitcast i128* %66 to { i64, i64 }*, !dbg !857, !psr.id !871, !verifier.code !63 */
  $p584 := $bitcast.ref.ref($p65);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %586 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %585, i32 0, i32 0, !dbg !857, !psr.id !872, !verifier.code !63 */
  $p585 := $add.ref($add.ref($p584, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %587 = extractvalue { i64, i64 } %584, 0, !dbg !857, !psr.id !873, !verifier.code !63 */
  $i586 := $extractvalue.i64($p583, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %587, i64* %586, align 16, !dbg !857, !psr.id !874, !verifier.code !63 */
  $M.291 := $store.i64($M.291, $p585, $i586);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %588 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %585, i32 0, i32 1, !dbg !857, !psr.id !875, !verifier.code !63 */
  $p587 := $add.ref($add.ref($p584, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %589 = extractvalue { i64, i64 } %584, 1, !dbg !857, !psr.id !876, !verifier.code !63 */
  $i588 := $extractvalue.i64($p583, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %589, i64* %588, align 8, !dbg !857, !psr.id !877, !verifier.code !63 */
  $M.291 := $store.i64($M.291, $p587, $i588);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  /* %590 = load i128, i128* %66, align 16, !dbg !857, !psr.id !878, !verifier.code !63 */
  $i589 := $load.i128($M.291, $p65);
  /* call void @llvm.dbg.value(metadata i128 %590, metadata !5148, metadata !DIExpression()), !dbg !4504, !psr.id !5149, !verifier.code !64 */
  call {:cexpr "s1"} boogie_si_record_i128($i589);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %591 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %475, i64 %189), !dbg !881, !psr.id !882, !ValueTainted !243, !verifier.code !63 */
  call $p590 := FStar_UInt128_mul_wide($i474, $i188);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  /* %592 = bitcast i128* %67 to { i64, i64 }*, !dbg !881, !psr.id !883, !verifier.code !63 */
  $p591 := $bitcast.ref.ref($p66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  /* %593 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %592, i32 0, i32 0, !dbg !881, !psr.id !884, !verifier.code !63 */
  $p592 := $add.ref($add.ref($p591, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  /* %594 = extractvalue { i64, i64 } %591, 0, !dbg !881, !psr.id !885, !verifier.code !63 */
  $i593 := $extractvalue.i64($p590, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %594, i64* %593, align 16, !dbg !881, !psr.id !886, !verifier.code !63 */
  $M.292 := $store.i64($M.292, $p592, $i593);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  /* %595 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %592, i32 0, i32 1, !dbg !881, !psr.id !887, !verifier.code !63 */
  $p594 := $add.ref($add.ref($p591, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  /* %596 = extractvalue { i64, i64 } %591, 1, !dbg !881, !psr.id !888, !verifier.code !63 */
  $i595 := $extractvalue.i64($p590, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %596, i64* %595, align 8, !dbg !881, !psr.id !889, !verifier.code !63 */
  $M.292 := $store.i64($M.292, $p594, $i595);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  /* %597 = load i128, i128* %67, align 16, !dbg !881, !psr.id !890, !verifier.code !63 */
  $i596 := $load.i128($M.292, $p66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %598 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %187, i64 %187), !dbg !891, !psr.id !892, !ValueTainted !243, !verifier.code !63 */
  call $p597 := FStar_UInt128_mul_wide($i186, $i186);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  /* %599 = bitcast i128* %68 to { i64, i64 }*, !dbg !891, !psr.id !893, !verifier.code !63 */
  $p598 := $bitcast.ref.ref($p67);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  /* %600 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %599, i32 0, i32 0, !dbg !891, !psr.id !894, !verifier.code !63 */
  $p599 := $add.ref($add.ref($p598, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  /* %601 = extractvalue { i64, i64 } %598, 0, !dbg !891, !psr.id !895, !verifier.code !63 */
  $i600 := $extractvalue.i64($p597, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %601, i64* %600, align 16, !dbg !891, !psr.id !896, !verifier.code !63 */
  $M.293 := $store.i64($M.293, $p599, $i600);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  /* %602 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %599, i32 0, i32 1, !dbg !891, !psr.id !897, !verifier.code !63 */
  $p601 := $add.ref($add.ref($p598, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  /* %603 = extractvalue { i64, i64 } %598, 1, !dbg !891, !psr.id !898, !verifier.code !63 */
  $i602 := $extractvalue.i64($p597, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %603, i64* %602, align 8, !dbg !891, !psr.id !899, !verifier.code !63 */
  $M.293 := $store.i64($M.293, $p601, $i602);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  /* %604 = load i128, i128* %68, align 16, !dbg !891, !psr.id !900, !verifier.code !63 */
  $i603 := $load.i128($M.293, $p67);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %597, i128* %69, align 16, !dbg !901, !psr.id !902, !verifier.code !63 */
  $M.294 := $store.i128($M.294, $p68, $i596);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %605 = bitcast i128* %69 to { i64, i64 }*, !dbg !901, !psr.id !903, !verifier.code !63 */
  $p604 := $bitcast.ref.ref($p68);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %606 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %605, i32 0, i32 0, !dbg !901, !psr.id !904, !verifier.code !63 */
  $p605 := $add.ref($add.ref($p604, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %607 = load i64, i64* %606, align 16, !dbg !901, !psr.id !905, !verifier.code !63 */
  $i606 := $load.i64($M.294, $p605);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %608 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %605, i32 0, i32 1, !dbg !901, !psr.id !906, !verifier.code !63 */
  $p607 := $add.ref($add.ref($p604, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %609 = load i64, i64* %608, align 8, !dbg !901, !psr.id !907, !verifier.code !63 */
  $i608 := $load.i64($M.294, $p607);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %604, i128* %70, align 16, !dbg !901, !psr.id !908, !verifier.code !63 */
  $M.295 := $store.i128($M.295, $p69, $i603);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %610 = bitcast i128* %70 to { i64, i64 }*, !dbg !901, !psr.id !909, !verifier.code !63 */
  $p609 := $bitcast.ref.ref($p69);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %611 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %610, i32 0, i32 0, !dbg !901, !psr.id !910, !verifier.code !63 */
  $p610 := $add.ref($add.ref($p609, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %612 = load i64, i64* %611, align 16, !dbg !901, !psr.id !911, !verifier.code !63 */
  $i611 := $load.i64($M.295, $p610);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %613 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %610, i32 0, i32 1, !dbg !901, !psr.id !912, !verifier.code !63 */
  $p612 := $add.ref($add.ref($p609, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %614 = load i64, i64* %613, align 8, !dbg !901, !psr.id !913, !verifier.code !63 */
  $i613 := $load.i64($M.295, $p612);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %615 = call { i64, i64 } @FStar_UInt128_add(i64 %607, i64 %609, i64 %612, i64 %614), !dbg !901, !psr.id !914, !verifier.code !63 */
  call $p614 := FStar_UInt128_add($i606, $i608, $i611, $i613);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %616 = bitcast i128* %71 to { i64, i64 }*, !dbg !901, !psr.id !915, !verifier.code !63 */
  $p615 := $bitcast.ref.ref($p70);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %617 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %616, i32 0, i32 0, !dbg !901, !psr.id !916, !verifier.code !63 */
  $p616 := $add.ref($add.ref($p615, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %618 = extractvalue { i64, i64 } %615, 0, !dbg !901, !psr.id !917, !verifier.code !63 */
  $i617 := $extractvalue.i64($p614, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %618, i64* %617, align 16, !dbg !901, !psr.id !918, !verifier.code !63 */
  $M.296 := $store.i64($M.296, $p616, $i617);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %619 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %616, i32 0, i32 1, !dbg !901, !psr.id !919, !verifier.code !63 */
  $p618 := $add.ref($add.ref($p615, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %620 = extractvalue { i64, i64 } %615, 1, !dbg !901, !psr.id !920, !verifier.code !63 */
  $i619 := $extractvalue.i64($p614, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %620, i64* %619, align 8, !dbg !901, !psr.id !921, !verifier.code !63 */
  $M.296 := $store.i64($M.296, $p618, $i619);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  /* %621 = load i128, i128* %71, align 16, !dbg !901, !psr.id !922, !verifier.code !63 */
  $i620 := $load.i128($M.296, $p70);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %622 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %480, i64 %191), !dbg !923, !psr.id !924, !ValueTainted !243, !verifier.code !63 */
  call $p621 := FStar_UInt128_mul_wide($i479, $i190);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  /* %623 = bitcast i128* %72 to { i64, i64 }*, !dbg !923, !psr.id !925, !verifier.code !63 */
  $p622 := $bitcast.ref.ref($p71);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  /* %624 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %623, i32 0, i32 0, !dbg !923, !psr.id !926, !verifier.code !63 */
  $p623 := $add.ref($add.ref($p622, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  /* %625 = extractvalue { i64, i64 } %622, 0, !dbg !923, !psr.id !927, !verifier.code !63 */
  $i624 := $extractvalue.i64($p621, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %625, i64* %624, align 16, !dbg !923, !psr.id !928, !verifier.code !63 */
  $M.297 := $store.i64($M.297, $p623, $i624);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  /* %626 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %623, i32 0, i32 1, !dbg !923, !psr.id !929, !verifier.code !63 */
  $p625 := $add.ref($add.ref($p622, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  /* %627 = extractvalue { i64, i64 } %622, 1, !dbg !923, !psr.id !930, !verifier.code !63 */
  $i626 := $extractvalue.i64($p621, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %627, i64* %626, align 8, !dbg !923, !psr.id !931, !verifier.code !63 */
  $M.297 := $store.i64($M.297, $p625, $i626);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  /* %628 = load i128, i128* %72, align 16, !dbg !923, !psr.id !932, !verifier.code !63 */
  $i627 := $load.i128($M.297, $p71);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %621, i128* %73, align 16, !dbg !933, !psr.id !934, !verifier.code !63 */
  $M.298 := $store.i128($M.298, $p72, $i620);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %629 = bitcast i128* %73 to { i64, i64 }*, !dbg !933, !psr.id !935, !verifier.code !63 */
  $p628 := $bitcast.ref.ref($p72);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %630 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %629, i32 0, i32 0, !dbg !933, !psr.id !936, !verifier.code !63 */
  $p629 := $add.ref($add.ref($p628, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %631 = load i64, i64* %630, align 16, !dbg !933, !psr.id !937, !verifier.code !63 */
  $i630 := $load.i64($M.298, $p629);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %632 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %629, i32 0, i32 1, !dbg !933, !psr.id !938, !verifier.code !63 */
  $p631 := $add.ref($add.ref($p628, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %633 = load i64, i64* %632, align 8, !dbg !933, !psr.id !939, !verifier.code !63 */
  $i632 := $load.i64($M.298, $p631);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %628, i128* %74, align 16, !dbg !933, !psr.id !940, !verifier.code !63 */
  $M.299 := $store.i128($M.299, $p73, $i627);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %634 = bitcast i128* %74 to { i64, i64 }*, !dbg !933, !psr.id !941, !verifier.code !63 */
  $p633 := $bitcast.ref.ref($p73);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %635 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %634, i32 0, i32 0, !dbg !933, !psr.id !942, !verifier.code !63 */
  $p634 := $add.ref($add.ref($p633, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %636 = load i64, i64* %635, align 16, !dbg !933, !psr.id !943, !verifier.code !63 */
  $i635 := $load.i64($M.299, $p634);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %637 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %634, i32 0, i32 1, !dbg !933, !psr.id !944, !verifier.code !63 */
  $p636 := $add.ref($add.ref($p633, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %638 = load i64, i64* %637, align 8, !dbg !933, !psr.id !945, !verifier.code !63 */
  $i637 := $load.i64($M.299, $p636);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %639 = call { i64, i64 } @FStar_UInt128_add(i64 %631, i64 %633, i64 %636, i64 %638), !dbg !933, !psr.id !946, !verifier.code !63 */
  call $p638 := FStar_UInt128_add($i630, $i632, $i635, $i637);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %640 = bitcast i128* %75 to { i64, i64 }*, !dbg !933, !psr.id !947, !verifier.code !63 */
  $p639 := $bitcast.ref.ref($p74);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %641 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %640, i32 0, i32 0, !dbg !933, !psr.id !948, !verifier.code !63 */
  $p640 := $add.ref($add.ref($p639, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %642 = extractvalue { i64, i64 } %639, 0, !dbg !933, !psr.id !949, !verifier.code !63 */
  $i641 := $extractvalue.i64($p638, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %642, i64* %641, align 16, !dbg !933, !psr.id !950, !verifier.code !63 */
  $M.300 := $store.i64($M.300, $p640, $i641);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %643 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %640, i32 0, i32 1, !dbg !933, !psr.id !951, !verifier.code !63 */
  $p642 := $add.ref($add.ref($p639, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %644 = extractvalue { i64, i64 } %639, 1, !dbg !933, !psr.id !952, !verifier.code !63 */
  $i643 := $extractvalue.i64($p638, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %644, i64* %643, align 8, !dbg !933, !psr.id !953, !verifier.code !63 */
  $M.300 := $store.i64($M.300, $p642, $i643);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  /* %645 = load i128, i128* %75, align 16, !dbg !933, !psr.id !954, !verifier.code !63 */
  $i644 := $load.i128($M.300, $p74);
  /* call void @llvm.dbg.value(metadata i128 %645, metadata !5224, metadata !DIExpression()), !dbg !4504, !psr.id !5225, !verifier.code !64 */
  call {:cexpr "s2"} boogie_si_record_i128($i644);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %646 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %475, i64 %191), !dbg !957, !psr.id !958, !ValueTainted !243, !verifier.code !63 */
  call $p645 := FStar_UInt128_mul_wide($i474, $i190);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  /* %647 = bitcast i128* %76 to { i64, i64 }*, !dbg !957, !psr.id !959, !verifier.code !63 */
  $p646 := $bitcast.ref.ref($p75);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  /* %648 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %647, i32 0, i32 0, !dbg !957, !psr.id !960, !verifier.code !63 */
  $p647 := $add.ref($add.ref($p646, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  /* %649 = extractvalue { i64, i64 } %646, 0, !dbg !957, !psr.id !961, !verifier.code !63 */
  $i648 := $extractvalue.i64($p645, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %649, i64* %648, align 16, !dbg !957, !psr.id !962, !verifier.code !63 */
  $M.301 := $store.i64($M.301, $p647, $i648);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  /* %650 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %647, i32 0, i32 1, !dbg !957, !psr.id !963, !verifier.code !63 */
  $p649 := $add.ref($add.ref($p646, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  /* %651 = extractvalue { i64, i64 } %646, 1, !dbg !957, !psr.id !964, !verifier.code !63 */
  $i650 := $extractvalue.i64($p645, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %651, i64* %650, align 8, !dbg !957, !psr.id !965, !verifier.code !63 */
  $M.301 := $store.i64($M.301, $p649, $i650);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  /* %652 = load i128, i128* %76, align 16, !dbg !957, !psr.id !966, !verifier.code !63 */
  $i651 := $load.i128($M.301, $p75);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %653 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %476, i64 %189), !dbg !967, !psr.id !968, !ValueTainted !243, !verifier.code !63 */
  call $p652 := FStar_UInt128_mul_wide($i475, $i188);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  /* %654 = bitcast i128* %77 to { i64, i64 }*, !dbg !967, !psr.id !969, !verifier.code !63 */
  $p653 := $bitcast.ref.ref($p76);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  /* %655 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %654, i32 0, i32 0, !dbg !967, !psr.id !970, !verifier.code !63 */
  $p654 := $add.ref($add.ref($p653, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  /* %656 = extractvalue { i64, i64 } %653, 0, !dbg !967, !psr.id !971, !verifier.code !63 */
  $i655 := $extractvalue.i64($p652, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %656, i64* %655, align 16, !dbg !967, !psr.id !972, !verifier.code !63 */
  $M.302 := $store.i64($M.302, $p654, $i655);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  /* %657 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %654, i32 0, i32 1, !dbg !967, !psr.id !973, !verifier.code !63 */
  $p656 := $add.ref($add.ref($p653, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  /* %658 = extractvalue { i64, i64 } %653, 1, !dbg !967, !psr.id !974, !verifier.code !63 */
  $i657 := $extractvalue.i64($p652, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %658, i64* %657, align 8, !dbg !967, !psr.id !975, !verifier.code !63 */
  $M.302 := $store.i64($M.302, $p656, $i657);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  /* %659 = load i128, i128* %77, align 16, !dbg !967, !psr.id !976, !verifier.code !63 */
  $i658 := $load.i128($M.302, $p76);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %652, i128* %78, align 16, !dbg !977, !psr.id !978, !verifier.code !63 */
  $M.303 := $store.i128($M.303, $p77, $i651);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %660 = bitcast i128* %78 to { i64, i64 }*, !dbg !977, !psr.id !979, !verifier.code !63 */
  $p659 := $bitcast.ref.ref($p77);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %661 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %660, i32 0, i32 0, !dbg !977, !psr.id !980, !verifier.code !63 */
  $p660 := $add.ref($add.ref($p659, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %662 = load i64, i64* %661, align 16, !dbg !977, !psr.id !981, !verifier.code !63 */
  $i661 := $load.i64($M.303, $p660);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %663 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %660, i32 0, i32 1, !dbg !977, !psr.id !982, !verifier.code !63 */
  $p662 := $add.ref($add.ref($p659, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %664 = load i64, i64* %663, align 8, !dbg !977, !psr.id !983, !verifier.code !63 */
  $i663 := $load.i64($M.303, $p662);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %659, i128* %79, align 16, !dbg !977, !psr.id !984, !verifier.code !63 */
  $M.304 := $store.i128($M.304, $p78, $i658);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %665 = bitcast i128* %79 to { i64, i64 }*, !dbg !977, !psr.id !985, !verifier.code !63 */
  $p664 := $bitcast.ref.ref($p78);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %666 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %665, i32 0, i32 0, !dbg !977, !psr.id !986, !verifier.code !63 */
  $p665 := $add.ref($add.ref($p664, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %667 = load i64, i64* %666, align 16, !dbg !977, !psr.id !987, !verifier.code !63 */
  $i666 := $load.i64($M.304, $p665);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %668 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %665, i32 0, i32 1, !dbg !977, !psr.id !988, !verifier.code !63 */
  $p667 := $add.ref($add.ref($p664, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %669 = load i64, i64* %668, align 8, !dbg !977, !psr.id !989, !verifier.code !63 */
  $i668 := $load.i64($M.304, $p667);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %670 = call { i64, i64 } @FStar_UInt128_add(i64 %662, i64 %664, i64 %667, i64 %669), !dbg !977, !psr.id !990, !verifier.code !63 */
  call $p669 := FStar_UInt128_add($i661, $i663, $i666, $i668);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %671 = bitcast i128* %80 to { i64, i64 }*, !dbg !977, !psr.id !991, !verifier.code !63 */
  $p670 := $bitcast.ref.ref($p79);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %672 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %671, i32 0, i32 0, !dbg !977, !psr.id !992, !verifier.code !63 */
  $p671 := $add.ref($add.ref($p670, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %673 = extractvalue { i64, i64 } %670, 0, !dbg !977, !psr.id !993, !verifier.code !63 */
  $i672 := $extractvalue.i64($p669, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %673, i64* %672, align 16, !dbg !977, !psr.id !994, !verifier.code !63 */
  $M.305 := $store.i64($M.305, $p671, $i672);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %674 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %671, i32 0, i32 1, !dbg !977, !psr.id !995, !verifier.code !63 */
  $p673 := $add.ref($add.ref($p670, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %675 = extractvalue { i64, i64 } %670, 1, !dbg !977, !psr.id !996, !verifier.code !63 */
  $i674 := $extractvalue.i64($p669, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %675, i64* %674, align 8, !dbg !977, !psr.id !997, !verifier.code !63 */
  $M.305 := $store.i64($M.305, $p673, $i674);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  /* %676 = load i128, i128* %80, align 16, !dbg !977, !psr.id !998, !verifier.code !63 */
  $i675 := $load.i128($M.305, $p79);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %677 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %193, i64 %479), !dbg !999, !psr.id !1000, !ValueTainted !243, !verifier.code !63 */
  call $p676 := FStar_UInt128_mul_wide($i192, $i478);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  /* %678 = bitcast i128* %81 to { i64, i64 }*, !dbg !999, !psr.id !1001, !verifier.code !63 */
  $p677 := $bitcast.ref.ref($p80);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  /* %679 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %678, i32 0, i32 0, !dbg !999, !psr.id !1002, !verifier.code !63 */
  $p678 := $add.ref($add.ref($p677, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  /* %680 = extractvalue { i64, i64 } %677, 0, !dbg !999, !psr.id !1003, !verifier.code !63 */
  $i679 := $extractvalue.i64($p676, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %680, i64* %679, align 16, !dbg !999, !psr.id !1004, !verifier.code !63 */
  $M.306 := $store.i64($M.306, $p678, $i679);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  /* %681 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %678, i32 0, i32 1, !dbg !999, !psr.id !1005, !verifier.code !63 */
  $p680 := $add.ref($add.ref($p677, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  /* %682 = extractvalue { i64, i64 } %677, 1, !dbg !999, !psr.id !1006, !verifier.code !63 */
  $i681 := $extractvalue.i64($p676, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %682, i64* %681, align 8, !dbg !999, !psr.id !1007, !verifier.code !63 */
  $M.306 := $store.i64($M.306, $p680, $i681);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  /* %683 = load i128, i128* %81, align 16, !dbg !999, !psr.id !1008, !verifier.code !63 */
  $i682 := $load.i128($M.306, $p80);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %676, i128* %82, align 16, !dbg !1009, !psr.id !1010, !verifier.code !63 */
  $M.307 := $store.i128($M.307, $p81, $i675);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %684 = bitcast i128* %82 to { i64, i64 }*, !dbg !1009, !psr.id !1011, !verifier.code !63 */
  $p683 := $bitcast.ref.ref($p81);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %685 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %684, i32 0, i32 0, !dbg !1009, !psr.id !1012, !verifier.code !63 */
  $p684 := $add.ref($add.ref($p683, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %686 = load i64, i64* %685, align 16, !dbg !1009, !psr.id !1013, !verifier.code !63 */
  $i685 := $load.i64($M.307, $p684);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %687 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %684, i32 0, i32 1, !dbg !1009, !psr.id !1014, !verifier.code !63 */
  $p686 := $add.ref($add.ref($p683, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %688 = load i64, i64* %687, align 8, !dbg !1009, !psr.id !1015, !verifier.code !63 */
  $i687 := $load.i64($M.307, $p686);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %683, i128* %83, align 16, !dbg !1009, !psr.id !1016, !verifier.code !63 */
  $M.308 := $store.i128($M.308, $p82, $i682);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %689 = bitcast i128* %83 to { i64, i64 }*, !dbg !1009, !psr.id !1017, !verifier.code !63 */
  $p688 := $bitcast.ref.ref($p82);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %690 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %689, i32 0, i32 0, !dbg !1009, !psr.id !1018, !verifier.code !63 */
  $p689 := $add.ref($add.ref($p688, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %691 = load i64, i64* %690, align 16, !dbg !1009, !psr.id !1019, !verifier.code !63 */
  $i690 := $load.i64($M.308, $p689);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %692 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %689, i32 0, i32 1, !dbg !1009, !psr.id !1020, !verifier.code !63 */
  $p691 := $add.ref($add.ref($p688, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %693 = load i64, i64* %692, align 8, !dbg !1009, !psr.id !1021, !verifier.code !63 */
  $i692 := $load.i64($M.308, $p691);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %694 = call { i64, i64 } @FStar_UInt128_add(i64 %686, i64 %688, i64 %691, i64 %693), !dbg !1009, !psr.id !1022, !verifier.code !63 */
  call $p693 := FStar_UInt128_add($i685, $i687, $i690, $i692);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %695 = bitcast i128* %84 to { i64, i64 }*, !dbg !1009, !psr.id !1023, !verifier.code !63 */
  $p694 := $bitcast.ref.ref($p83);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %696 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %695, i32 0, i32 0, !dbg !1009, !psr.id !1024, !verifier.code !63 */
  $p695 := $add.ref($add.ref($p694, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %697 = extractvalue { i64, i64 } %694, 0, !dbg !1009, !psr.id !1025, !verifier.code !63 */
  $i696 := $extractvalue.i64($p693, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %697, i64* %696, align 16, !dbg !1009, !psr.id !1026, !verifier.code !63 */
  $M.309 := $store.i64($M.309, $p695, $i696);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %698 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %695, i32 0, i32 1, !dbg !1009, !psr.id !1027, !verifier.code !63 */
  $p697 := $add.ref($add.ref($p694, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %699 = extractvalue { i64, i64 } %694, 1, !dbg !1009, !psr.id !1028, !verifier.code !63 */
  $i698 := $extractvalue.i64($p693, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %699, i64* %698, align 8, !dbg !1009, !psr.id !1029, !verifier.code !63 */
  $M.309 := $store.i64($M.309, $p697, $i698);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %700 = load i128, i128* %84, align 16, !dbg !1009, !psr.id !1030, !verifier.code !63 */
  $i699 := $load.i128($M.309, $p83);
  /* call void @llvm.dbg.value(metadata i128 %700, metadata !5300, metadata !DIExpression()), !dbg !4504, !psr.id !5301, !verifier.code !64 */
  call {:cexpr "s3"} boogie_si_record_i128($i699);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %701 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %475, i64 %193), !dbg !1033, !psr.id !1034, !ValueTainted !243, !verifier.code !63 */
  call $p700 := FStar_UInt128_mul_wide($i474, $i192);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  /* %702 = bitcast i128* %85 to { i64, i64 }*, !dbg !1033, !psr.id !1035, !verifier.code !63 */
  $p701 := $bitcast.ref.ref($p84);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  /* %703 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %702, i32 0, i32 0, !dbg !1033, !psr.id !1036, !verifier.code !63 */
  $p702 := $add.ref($add.ref($p701, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  /* %704 = extractvalue { i64, i64 } %701, 0, !dbg !1033, !psr.id !1037, !verifier.code !63 */
  $i703 := $extractvalue.i64($p700, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %704, i64* %703, align 16, !dbg !1033, !psr.id !1038, !verifier.code !63 */
  $M.310 := $store.i64($M.310, $p702, $i703);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  /* %705 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %702, i32 0, i32 1, !dbg !1033, !psr.id !1039, !verifier.code !63 */
  $p704 := $add.ref($add.ref($p701, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  /* %706 = extractvalue { i64, i64 } %701, 1, !dbg !1033, !psr.id !1040, !verifier.code !63 */
  $i705 := $extractvalue.i64($p700, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  /* store i64 %706, i64* %705, align 8, !dbg !1033, !psr.id !1041, !verifier.code !63 */
  $M.310 := $store.i64($M.310, $p704, $i705);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  /* %707 = load i128, i128* %85, align 16, !dbg !1033, !psr.id !1042, !verifier.code !63 */
  $i706 := $load.i128($M.310, $p84);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %708 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %476, i64 %191), !dbg !1043, !psr.id !1044, !ValueTainted !243, !verifier.code !63 */
  call $p707 := FStar_UInt128_mul_wide($i475, $i190);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  /* %709 = bitcast i128* %86 to { i64, i64 }*, !dbg !1043, !psr.id !1045, !verifier.code !63 */
  $p708 := $bitcast.ref.ref($p85);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  /* %710 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %709, i32 0, i32 0, !dbg !1043, !psr.id !1046, !verifier.code !63 */
  $p709 := $add.ref($add.ref($p708, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  /* %711 = extractvalue { i64, i64 } %708, 0, !dbg !1043, !psr.id !1047, !verifier.code !63 */
  $i710 := $extractvalue.i64($p707, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %711, i64* %710, align 16, !dbg !1043, !psr.id !1048, !verifier.code !63 */
  $M.311 := $store.i64($M.311, $p709, $i710);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  /* %712 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %709, i32 0, i32 1, !dbg !1043, !psr.id !1049, !verifier.code !63 */
  $p711 := $add.ref($add.ref($p708, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  /* %713 = extractvalue { i64, i64 } %708, 1, !dbg !1043, !psr.id !1050, !verifier.code !63 */
  $i712 := $extractvalue.i64($p707, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %713, i64* %712, align 8, !dbg !1043, !psr.id !1051, !verifier.code !63 */
  $M.311 := $store.i64($M.311, $p711, $i712);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  /* %714 = load i128, i128* %86, align 16, !dbg !1043, !psr.id !1052, !verifier.code !63 */
  $i713 := $load.i128($M.311, $p85);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %707, i128* %87, align 16, !dbg !1053, !psr.id !1054, !verifier.code !63 */
  $M.312 := $store.i128($M.312, $p86, $i706);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %715 = bitcast i128* %87 to { i64, i64 }*, !dbg !1053, !psr.id !1055, !verifier.code !63 */
  $p714 := $bitcast.ref.ref($p86);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %716 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %715, i32 0, i32 0, !dbg !1053, !psr.id !1056, !verifier.code !63 */
  $p715 := $add.ref($add.ref($p714, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %717 = load i64, i64* %716, align 16, !dbg !1053, !psr.id !1057, !verifier.code !63 */
  $i716 := $load.i64($M.312, $p715);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %718 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %715, i32 0, i32 1, !dbg !1053, !psr.id !1058, !verifier.code !63 */
  $p717 := $add.ref($add.ref($p714, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %719 = load i64, i64* %718, align 8, !dbg !1053, !psr.id !1059, !verifier.code !63 */
  $i718 := $load.i64($M.312, $p717);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* store i128 %714, i128* %88, align 16, !dbg !1053, !psr.id !1060, !verifier.code !63 */
  $M.313 := $store.i128($M.313, $p87, $i713);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %720 = bitcast i128* %88 to { i64, i64 }*, !dbg !1053, !psr.id !1061, !verifier.code !63 */
  $p719 := $bitcast.ref.ref($p87);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %721 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %720, i32 0, i32 0, !dbg !1053, !psr.id !1062, !verifier.code !63 */
  $p720 := $add.ref($add.ref($p719, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %722 = load i64, i64* %721, align 16, !dbg !1053, !psr.id !1063, !verifier.code !63 */
  $i721 := $load.i64($M.313, $p720);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %723 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %720, i32 0, i32 1, !dbg !1053, !psr.id !1064, !verifier.code !63 */
  $p722 := $add.ref($add.ref($p719, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %724 = load i64, i64* %723, align 8, !dbg !1053, !psr.id !1065, !verifier.code !63 */
  $i723 := $load.i64($M.313, $p722);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %725 = call { i64, i64 } @FStar_UInt128_add(i64 %717, i64 %719, i64 %722, i64 %724), !dbg !1053, !psr.id !1066, !verifier.code !63 */
  call $p724 := FStar_UInt128_add($i716, $i718, $i721, $i723);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %726 = bitcast i128* %89 to { i64, i64 }*, !dbg !1053, !psr.id !1067, !verifier.code !63 */
  $p725 := $bitcast.ref.ref($p88);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %727 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %726, i32 0, i32 0, !dbg !1053, !psr.id !1068, !verifier.code !63 */
  $p726 := $add.ref($add.ref($p725, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %728 = extractvalue { i64, i64 } %725, 0, !dbg !1053, !psr.id !1069, !verifier.code !63 */
  $i727 := $extractvalue.i64($p724, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %728, i64* %727, align 16, !dbg !1053, !psr.id !1070, !verifier.code !63 */
  $M.314 := $store.i64($M.314, $p726, $i727);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %729 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %726, i32 0, i32 1, !dbg !1053, !psr.id !1071, !verifier.code !63 */
  $p728 := $add.ref($add.ref($p725, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %730 = extractvalue { i64, i64 } %725, 1, !dbg !1053, !psr.id !1072, !verifier.code !63 */
  $i729 := $extractvalue.i64($p724, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* store i64 %730, i64* %729, align 8, !dbg !1053, !psr.id !1073, !verifier.code !63 */
  $M.314 := $store.i64($M.314, $p728, $i729);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  /* %731 = load i128, i128* %89, align 16, !dbg !1053, !psr.id !1074, !verifier.code !63 */
  $i730 := $load.i128($M.314, $p88);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %732 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %189, i64 %189), !dbg !1075, !psr.id !1076, !ValueTainted !243, !verifier.code !63 */
  call $p731 := FStar_UInt128_mul_wide($i188, $i188);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  /* %733 = bitcast i128* %90 to { i64, i64 }*, !dbg !1075, !psr.id !1077, !verifier.code !63 */
  $p732 := $bitcast.ref.ref($p89);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  /* %734 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %733, i32 0, i32 0, !dbg !1075, !psr.id !1078, !verifier.code !63 */
  $p733 := $add.ref($add.ref($p732, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  /* %735 = extractvalue { i64, i64 } %732, 0, !dbg !1075, !psr.id !1079, !verifier.code !63 */
  $i734 := $extractvalue.i64($p731, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %735, i64* %734, align 16, !dbg !1075, !psr.id !1080, !verifier.code !63 */
  $M.315 := $store.i64($M.315, $p733, $i734);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  /* %736 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %733, i32 0, i32 1, !dbg !1075, !psr.id !1081, !verifier.code !63 */
  $p735 := $add.ref($add.ref($p732, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  /* %737 = extractvalue { i64, i64 } %732, 1, !dbg !1075, !psr.id !1082, !verifier.code !63 */
  $i736 := $extractvalue.i64($p731, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  /* store i64 %737, i64* %736, align 8, !dbg !1075, !psr.id !1083, !verifier.code !63 */
  $M.315 := $store.i64($M.315, $p735, $i736);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  /* %738 = load i128, i128* %90, align 16, !dbg !1075, !psr.id !1084, !verifier.code !63 */
  $i737 := $load.i128($M.315, $p89);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %731, i128* %91, align 16, !dbg !1085, !psr.id !1086, !verifier.code !63 */
  $M.316 := $store.i128($M.316, $p90, $i730);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %739 = bitcast i128* %91 to { i64, i64 }*, !dbg !1085, !psr.id !1087, !verifier.code !63 */
  $p738 := $bitcast.ref.ref($p90);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %740 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %739, i32 0, i32 0, !dbg !1085, !psr.id !1088, !verifier.code !63 */
  $p739 := $add.ref($add.ref($p738, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %741 = load i64, i64* %740, align 16, !dbg !1085, !psr.id !1089, !verifier.code !63 */
  $i740 := $load.i64($M.316, $p739);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %742 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %739, i32 0, i32 1, !dbg !1085, !psr.id !1090, !verifier.code !63 */
  $p741 := $add.ref($add.ref($p738, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %743 = load i64, i64* %742, align 8, !dbg !1085, !psr.id !1091, !verifier.code !63 */
  $i742 := $load.i64($M.316, $p741);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* store i128 %738, i128* %92, align 16, !dbg !1085, !psr.id !1092, !verifier.code !63 */
  $M.317 := $store.i128($M.317, $p91, $i737);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %744 = bitcast i128* %92 to { i64, i64 }*, !dbg !1085, !psr.id !1093, !verifier.code !63 */
  $p743 := $bitcast.ref.ref($p91);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %745 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %744, i32 0, i32 0, !dbg !1085, !psr.id !1094, !verifier.code !63 */
  $p744 := $add.ref($add.ref($p743, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %746 = load i64, i64* %745, align 16, !dbg !1085, !psr.id !1095, !verifier.code !63 */
  $i745 := $load.i64($M.317, $p744);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %747 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %744, i32 0, i32 1, !dbg !1085, !psr.id !1096, !verifier.code !63 */
  $p746 := $add.ref($add.ref($p743, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %748 = load i64, i64* %747, align 8, !dbg !1085, !psr.id !1097, !verifier.code !63 */
  $i747 := $load.i64($M.317, $p746);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %749 = call { i64, i64 } @FStar_UInt128_add(i64 %741, i64 %743, i64 %746, i64 %748), !dbg !1085, !psr.id !1098, !verifier.code !63 */
  call $p748 := FStar_UInt128_add($i740, $i742, $i745, $i747);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %750 = bitcast i128* %93 to { i64, i64 }*, !dbg !1085, !psr.id !1099, !verifier.code !63 */
  $p749 := $bitcast.ref.ref($p92);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %751 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %750, i32 0, i32 0, !dbg !1085, !psr.id !1100, !verifier.code !63 */
  $p750 := $add.ref($add.ref($p749, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %752 = extractvalue { i64, i64 } %749, 0, !dbg !1085, !psr.id !1101, !verifier.code !63 */
  $i751 := $extractvalue.i64($p748, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %752, i64* %751, align 16, !dbg !1085, !psr.id !1102, !verifier.code !63 */
  $M.318 := $store.i64($M.318, $p750, $i751);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %753 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %750, i32 0, i32 1, !dbg !1085, !psr.id !1103, !verifier.code !63 */
  $p752 := $add.ref($add.ref($p749, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %754 = extractvalue { i64, i64 } %749, 1, !dbg !1085, !psr.id !1104, !verifier.code !63 */
  $i753 := $extractvalue.i64($p748, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* store i64 %754, i64* %753, align 8, !dbg !1085, !psr.id !1105, !verifier.code !63 */
  $M.318 := $store.i64($M.318, $p752, $i753);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  /* %755 = load i128, i128* %93, align 16, !dbg !1085, !psr.id !1106, !verifier.code !63 */
  $i754 := $load.i128($M.318, $p92);
  /* call void @llvm.dbg.value(metadata i128 %755, metadata !5376, metadata !DIExpression()), !dbg !4504, !psr.id !5377, !verifier.code !64 */
  call {:cexpr "s4"} boogie_si_record_i128($i754);
  /* call void @llvm.dbg.value(metadata i128 %535, metadata !5378, metadata !DIExpression()), !dbg !4504, !psr.id !5379, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %590, metadata !5380, metadata !DIExpression()), !dbg !4504, !psr.id !5381, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %645, metadata !5382, metadata !DIExpression()), !dbg !4504, !psr.id !5383, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %700, metadata !5384, metadata !DIExpression()), !dbg !4504, !psr.id !5385, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %755, metadata !5386, metadata !DIExpression()), !dbg !4504, !psr.id !5387, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  /* %756 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 0), !dbg !1119, !psr.id !1120, !verifier.code !63 */
  call $p755 := FStar_UInt128_uint64_to_uint128(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  /* %757 = bitcast i128* %94 to { i64, i64 }*, !dbg !1119, !psr.id !1121, !verifier.code !63 */
  $p756 := $bitcast.ref.ref($p93);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  /* %758 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %757, i32 0, i32 0, !dbg !1119, !psr.id !1122, !verifier.code !63 */
  $p757 := $add.ref($add.ref($p756, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  /* %759 = extractvalue { i64, i64 } %756, 0, !dbg !1119, !psr.id !1123, !verifier.code !63 */
  $i758 := $extractvalue.i64($p755, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %759, i64* %758, align 16, !dbg !1119, !psr.id !1124, !verifier.code !63 */
  $M.319 := $store.i64($M.319, $p757, $i758);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  /* %760 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %757, i32 0, i32 1, !dbg !1119, !psr.id !1125, !verifier.code !63 */
  $p759 := $add.ref($add.ref($p756, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  /* %761 = extractvalue { i64, i64 } %756, 1, !dbg !1119, !psr.id !1126, !verifier.code !63 */
  $i760 := $extractvalue.i64($p755, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %761, i64* %760, align 8, !dbg !1119, !psr.id !1127, !verifier.code !63 */
  $M.319 := $store.i64($M.319, $p759, $i760);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  /* %762 = load i128, i128* %94, align 16, !dbg !1119, !psr.id !1128, !verifier.code !63 */
  $i761 := $load.i128($M.319, $p93);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* store i128 %254, i128* %95, align 16, !dbg !1129, !psr.id !1130, !verifier.code !63 */
  $M.320 := $store.i128($M.320, $p94, $i253);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %763 = bitcast i128* %95 to { i64, i64 }*, !dbg !1129, !psr.id !1131, !verifier.code !63 */
  $p762 := $bitcast.ref.ref($p94);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %764 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %763, i32 0, i32 0, !dbg !1129, !psr.id !1132, !verifier.code !63 */
  $p763 := $add.ref($add.ref($p762, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %765 = load i64, i64* %764, align 16, !dbg !1129, !psr.id !1133, !verifier.code !63 */
  $i764 := $load.i64($M.320, $p763);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %766 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %763, i32 0, i32 1, !dbg !1129, !psr.id !1134, !verifier.code !63 */
  $p765 := $add.ref($add.ref($p762, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %767 = load i64, i64* %766, align 8, !dbg !1129, !psr.id !1135, !verifier.code !63 */
  $i766 := $load.i64($M.320, $p765);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* store i128 %762, i128* %96, align 16, !dbg !1129, !psr.id !1136, !verifier.code !63 */
  $M.321 := $store.i128($M.321, $p95, $i761);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %768 = bitcast i128* %96 to { i64, i64 }*, !dbg !1129, !psr.id !1137, !verifier.code !63 */
  $p767 := $bitcast.ref.ref($p95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %769 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %768, i32 0, i32 0, !dbg !1129, !psr.id !1138, !verifier.code !63 */
  $p768 := $add.ref($add.ref($p767, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %770 = load i64, i64* %769, align 16, !dbg !1129, !psr.id !1139, !verifier.code !63 */
  $i769 := $load.i64($M.321, $p768);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %771 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %768, i32 0, i32 1, !dbg !1129, !psr.id !1140, !verifier.code !63 */
  $p770 := $add.ref($add.ref($p767, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %772 = load i64, i64* %771, align 8, !dbg !1129, !psr.id !1141, !verifier.code !63 */
  $i771 := $load.i64($M.321, $p770);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %773 = call { i64, i64 } @FStar_UInt128_add(i64 %765, i64 %767, i64 %770, i64 %772), !dbg !1129, !psr.id !1142, !verifier.code !63 */
  call $p772 := FStar_UInt128_add($i764, $i766, $i769, $i771);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %774 = bitcast i128* %97 to { i64, i64 }*, !dbg !1129, !psr.id !1143, !verifier.code !63 */
  $p773 := $bitcast.ref.ref($p96);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %775 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %774, i32 0, i32 0, !dbg !1129, !psr.id !1144, !verifier.code !63 */
  $p774 := $add.ref($add.ref($p773, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %776 = extractvalue { i64, i64 } %773, 0, !dbg !1129, !psr.id !1145, !verifier.code !63 */
  $i775 := $extractvalue.i64($p772, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* store i64 %776, i64* %775, align 16, !dbg !1129, !psr.id !1146, !verifier.code !63 */
  $M.322 := $store.i64($M.322, $p774, $i775);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %777 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %774, i32 0, i32 1, !dbg !1129, !psr.id !1147, !verifier.code !63 */
  $p776 := $add.ref($add.ref($p773, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %778 = extractvalue { i64, i64 } %773, 1, !dbg !1129, !psr.id !1148, !verifier.code !63 */
  $i777 := $extractvalue.i64($p772, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* store i64 %778, i64* %777, align 8, !dbg !1129, !psr.id !1149, !verifier.code !63 */
  $M.322 := $store.i64($M.322, $p776, $i777);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  /* %779 = load i128, i128* %97, align 16, !dbg !1129, !psr.id !1150, !verifier.code !63 */
  $i778 := $load.i128($M.322, $p96);
  /* call void @llvm.dbg.value(metadata i128 %779, metadata !5420, metadata !DIExpression()), !dbg !4504, !psr.id !5421, !verifier.code !64 */
  call {:cexpr "l_"} boogie_si_record_i128($i778);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %779, i128* %98, align 16, !dbg !1153, !psr.id !1154, !verifier.code !63 */
  $M.323 := $store.i128($M.323, $p97, $i778);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  /* %780 = bitcast i128* %98 to { i64, i64 }*, !dbg !1153, !psr.id !1155, !verifier.code !63 */
  $p779 := $bitcast.ref.ref($p97);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  /* %781 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %780, i32 0, i32 0, !dbg !1153, !psr.id !1156, !verifier.code !63 */
  $p780 := $add.ref($add.ref($p779, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  /* %782 = load i64, i64* %781, align 16, !dbg !1153, !psr.id !1157, !verifier.code !63 */
  $i781 := $load.i64($M.323, $p780);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  /* %783 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %780, i32 0, i32 1, !dbg !1153, !psr.id !1158, !verifier.code !63 */
  $p782 := $add.ref($add.ref($p779, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  /* %784 = load i64, i64* %783, align 8, !dbg !1153, !psr.id !1159, !verifier.code !63 */
  $i783 := $load.i64($M.323, $p782);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  /* %785 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %782, i64 %784), !dbg !1153, !psr.id !1160, !verifier.code !63 */
  call $i784 := FStar_UInt128_uint128_to_uint64($i781, $i783);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 56} true;
  assume {:verifier.code 0} true;
  /* %786 = and i64 %785, 2251799813685247, !dbg !1161, !psr.id !1162, !verifier.code !63 */
  $i785 := $and.i64($i784, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %786, metadata !5432, metadata !DIExpression()), !dbg !4504, !psr.id !5433, !verifier.code !64 */
  call {:cexpr "tmp00"} boogie_si_record_i64($i785);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* store i128 %779, i128* %99, align 16, !dbg !1165, !psr.id !1166, !verifier.code !63 */
  $M.324 := $store.i128($M.324, $p98, $i778);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* %787 = bitcast i128* %99 to { i64, i64 }*, !dbg !1165, !psr.id !1167, !verifier.code !63 */
  $p786 := $bitcast.ref.ref($p98);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* %788 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %787, i32 0, i32 0, !dbg !1165, !psr.id !1168, !verifier.code !63 */
  $p787 := $add.ref($add.ref($p786, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* %789 = load i64, i64* %788, align 16, !dbg !1165, !psr.id !1169, !verifier.code !63 */
  $i788 := $load.i64($M.324, $p787);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* %790 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %787, i32 0, i32 1, !dbg !1165, !psr.id !1170, !verifier.code !63 */
  $p789 := $add.ref($add.ref($p786, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* %791 = load i64, i64* %790, align 8, !dbg !1165, !psr.id !1171, !verifier.code !63 */
  $i790 := $load.i64($M.324, $p789);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* %792 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %789, i64 %791, i32 51), !dbg !1165, !psr.id !1172, !verifier.code !63 */
  call $p791 := FStar_UInt128_shift_right($i788, $i790, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* %793 = bitcast i128* %100 to { i64, i64 }*, !dbg !1165, !psr.id !1173, !verifier.code !63 */
  $p792 := $bitcast.ref.ref($p99);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* %794 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %793, i32 0, i32 0, !dbg !1165, !psr.id !1174, !verifier.code !63 */
  $p793 := $add.ref($add.ref($p792, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* %795 = extractvalue { i64, i64 } %792, 0, !dbg !1165, !psr.id !1175, !verifier.code !63 */
  $i794 := $extractvalue.i64($p791, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %795, i64* %794, align 16, !dbg !1165, !psr.id !1176, !verifier.code !63 */
  $M.325 := $store.i64($M.325, $p793, $i794);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* %796 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %793, i32 0, i32 1, !dbg !1165, !psr.id !1177, !verifier.code !63 */
  $p795 := $add.ref($add.ref($p792, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* %797 = extractvalue { i64, i64 } %792, 1, !dbg !1165, !psr.id !1178, !verifier.code !63 */
  $i796 := $extractvalue.i64($p791, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %797, i64* %796, align 8, !dbg !1165, !psr.id !1179, !verifier.code !63 */
  $M.325 := $store.i64($M.325, $p795, $i796);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  /* %798 = load i128, i128* %100, align 16, !dbg !1165, !psr.id !1180, !verifier.code !63 */
  $i797 := $load.i128($M.325, $p99);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  /* store i128 %798, i128* %101, align 16, !dbg !1181, !psr.id !1182, !verifier.code !63 */
  $M.326 := $store.i128($M.326, $p100, $i797);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  /* %799 = bitcast i128* %101 to { i64, i64 }*, !dbg !1181, !psr.id !1183, !verifier.code !63 */
  $p798 := $bitcast.ref.ref($p100);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  /* %800 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %799, i32 0, i32 0, !dbg !1181, !psr.id !1184, !verifier.code !63 */
  $p799 := $add.ref($add.ref($p798, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  /* %801 = load i64, i64* %800, align 16, !dbg !1181, !psr.id !1185, !verifier.code !63 */
  $i800 := $load.i64($M.326, $p799);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  /* %802 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %799, i32 0, i32 1, !dbg !1181, !psr.id !1186, !verifier.code !63 */
  $p801 := $add.ref($add.ref($p798, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  /* %803 = load i64, i64* %802, align 8, !dbg !1181, !psr.id !1187, !verifier.code !63 */
  $i802 := $load.i64($M.326, $p801);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  /* %804 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %801, i64 %803), !dbg !1181, !psr.id !1188, !verifier.code !63 */
  call $i803 := FStar_UInt128_uint128_to_uint64($i800, $i802);
  /* call void @llvm.dbg.value(metadata i64 %804, metadata !5458, metadata !DIExpression()), !dbg !4504, !psr.id !5459, !verifier.code !64 */
  call {:cexpr "c00"} boogie_si_record_i64($i803);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  /* %805 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %804), !dbg !1191, !psr.id !1192, !verifier.code !63 */
  call $p804 := FStar_UInt128_uint64_to_uint128($i803);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  /* %806 = bitcast i128* %102 to { i64, i64 }*, !dbg !1191, !psr.id !1193, !verifier.code !63 */
  $p805 := $bitcast.ref.ref($p101);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  /* %807 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %806, i32 0, i32 0, !dbg !1191, !psr.id !1194, !verifier.code !63 */
  $p806 := $add.ref($add.ref($p805, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  /* %808 = extractvalue { i64, i64 } %805, 0, !dbg !1191, !psr.id !1195, !verifier.code !63 */
  $i807 := $extractvalue.i64($p804, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %808, i64* %807, align 16, !dbg !1191, !psr.id !1196, !verifier.code !63 */
  $M.327 := $store.i64($M.327, $p806, $i807);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  /* %809 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %806, i32 0, i32 1, !dbg !1191, !psr.id !1197, !verifier.code !63 */
  $p808 := $add.ref($add.ref($p805, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  /* %810 = extractvalue { i64, i64 } %805, 1, !dbg !1191, !psr.id !1198, !verifier.code !63 */
  $i809 := $extractvalue.i64($p804, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %810, i64* %809, align 8, !dbg !1191, !psr.id !1199, !verifier.code !63 */
  $M.327 := $store.i64($M.327, $p808, $i809);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  /* %811 = load i128, i128* %102, align 16, !dbg !1191, !psr.id !1200, !verifier.code !63 */
  $i810 := $load.i128($M.327, $p101);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %309, i128* %103, align 16, !dbg !1201, !psr.id !1202, !verifier.code !63 */
  $M.328 := $store.i128($M.328, $p102, $i308);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %812 = bitcast i128* %103 to { i64, i64 }*, !dbg !1201, !psr.id !1203, !verifier.code !63 */
  $p811 := $bitcast.ref.ref($p102);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %813 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %812, i32 0, i32 0, !dbg !1201, !psr.id !1204, !verifier.code !63 */
  $p812 := $add.ref($add.ref($p811, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %814 = load i64, i64* %813, align 16, !dbg !1201, !psr.id !1205, !verifier.code !63 */
  $i813 := $load.i64($M.328, $p812);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %815 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %812, i32 0, i32 1, !dbg !1201, !psr.id !1206, !verifier.code !63 */
  $p814 := $add.ref($add.ref($p811, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %816 = load i64, i64* %815, align 8, !dbg !1201, !psr.id !1207, !verifier.code !63 */
  $i815 := $load.i64($M.328, $p814);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %811, i128* %104, align 16, !dbg !1201, !psr.id !1208, !verifier.code !63 */
  $M.329 := $store.i128($M.329, $p103, $i810);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %817 = bitcast i128* %104 to { i64, i64 }*, !dbg !1201, !psr.id !1209, !verifier.code !63 */
  $p816 := $bitcast.ref.ref($p103);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %818 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %817, i32 0, i32 0, !dbg !1201, !psr.id !1210, !verifier.code !63 */
  $p817 := $add.ref($add.ref($p816, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %819 = load i64, i64* %818, align 16, !dbg !1201, !psr.id !1211, !verifier.code !63 */
  $i818 := $load.i64($M.329, $p817);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %820 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %817, i32 0, i32 1, !dbg !1201, !psr.id !1212, !verifier.code !63 */
  $p819 := $add.ref($add.ref($p816, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %821 = load i64, i64* %820, align 8, !dbg !1201, !psr.id !1213, !verifier.code !63 */
  $i820 := $load.i64($M.329, $p819);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %822 = call { i64, i64 } @FStar_UInt128_add(i64 %814, i64 %816, i64 %819, i64 %821), !dbg !1201, !psr.id !1214, !verifier.code !63 */
  call $p821 := FStar_UInt128_add($i813, $i815, $i818, $i820);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %823 = bitcast i128* %105 to { i64, i64 }*, !dbg !1201, !psr.id !1215, !verifier.code !63 */
  $p822 := $bitcast.ref.ref($p104);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %824 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %823, i32 0, i32 0, !dbg !1201, !psr.id !1216, !verifier.code !63 */
  $p823 := $add.ref($add.ref($p822, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %825 = extractvalue { i64, i64 } %822, 0, !dbg !1201, !psr.id !1217, !verifier.code !63 */
  $i824 := $extractvalue.i64($p821, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %825, i64* %824, align 16, !dbg !1201, !psr.id !1218, !verifier.code !63 */
  $M.330 := $store.i64($M.330, $p823, $i824);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %826 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %823, i32 0, i32 1, !dbg !1201, !psr.id !1219, !verifier.code !63 */
  $p825 := $add.ref($add.ref($p822, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %827 = extractvalue { i64, i64 } %822, 1, !dbg !1201, !psr.id !1220, !verifier.code !63 */
  $i826 := $extractvalue.i64($p821, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %827, i64* %826, align 8, !dbg !1201, !psr.id !1221, !verifier.code !63 */
  $M.330 := $store.i64($M.330, $p825, $i826);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  /* %828 = load i128, i128* %105, align 16, !dbg !1201, !psr.id !1222, !verifier.code !63 */
  $i827 := $load.i128($M.330, $p104);
  /* call void @llvm.dbg.value(metadata i128 %828, metadata !5492, metadata !DIExpression()), !dbg !4504, !psr.id !5493, !verifier.code !64 */
  call {:cexpr "l_0"} boogie_si_record_i128($i827);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %828, i128* %106, align 16, !dbg !1225, !psr.id !1226, !verifier.code !63 */
  $M.331 := $store.i128($M.331, $p105, $i827);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  /* %829 = bitcast i128* %106 to { i64, i64 }*, !dbg !1225, !psr.id !1227, !verifier.code !63 */
  $p828 := $bitcast.ref.ref($p105);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  /* %830 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %829, i32 0, i32 0, !dbg !1225, !psr.id !1228, !verifier.code !63 */
  $p829 := $add.ref($add.ref($p828, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  /* %831 = load i64, i64* %830, align 16, !dbg !1225, !psr.id !1229, !verifier.code !63 */
  $i830 := $load.i64($M.331, $p829);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  /* %832 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %829, i32 0, i32 1, !dbg !1225, !psr.id !1230, !verifier.code !63 */
  $p831 := $add.ref($add.ref($p828, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  /* %833 = load i64, i64* %832, align 8, !dbg !1225, !psr.id !1231, !verifier.code !63 */
  $i832 := $load.i64($M.331, $p831);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  /* %834 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %831, i64 %833), !dbg !1225, !psr.id !1232, !verifier.code !63 */
  call $i833 := FStar_UInt128_uint128_to_uint64($i830, $i832);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 57} true;
  assume {:verifier.code 0} true;
  /* %835 = and i64 %834, 2251799813685247, !dbg !1233, !psr.id !1234, !verifier.code !63 */
  $i834 := $and.i64($i833, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %835, metadata !5504, metadata !DIExpression()), !dbg !4504, !psr.id !5505, !verifier.code !64 */
  call {:cexpr "tmp10"} boogie_si_record_i64($i834);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* store i128 %828, i128* %107, align 16, !dbg !1237, !psr.id !1238, !verifier.code !63 */
  $M.332 := $store.i128($M.332, $p106, $i827);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* %836 = bitcast i128* %107 to { i64, i64 }*, !dbg !1237, !psr.id !1239, !verifier.code !63 */
  $p835 := $bitcast.ref.ref($p106);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* %837 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %836, i32 0, i32 0, !dbg !1237, !psr.id !1240, !verifier.code !63 */
  $p836 := $add.ref($add.ref($p835, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* %838 = load i64, i64* %837, align 16, !dbg !1237, !psr.id !1241, !verifier.code !63 */
  $i837 := $load.i64($M.332, $p836);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* %839 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %836, i32 0, i32 1, !dbg !1237, !psr.id !1242, !verifier.code !63 */
  $p838 := $add.ref($add.ref($p835, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* %840 = load i64, i64* %839, align 8, !dbg !1237, !psr.id !1243, !verifier.code !63 */
  $i839 := $load.i64($M.332, $p838);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* %841 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %838, i64 %840, i32 51), !dbg !1237, !psr.id !1244, !verifier.code !63 */
  call $p840 := FStar_UInt128_shift_right($i837, $i839, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* %842 = bitcast i128* %108 to { i64, i64 }*, !dbg !1237, !psr.id !1245, !verifier.code !63 */
  $p841 := $bitcast.ref.ref($p107);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* %843 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %842, i32 0, i32 0, !dbg !1237, !psr.id !1246, !verifier.code !63 */
  $p842 := $add.ref($add.ref($p841, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* %844 = extractvalue { i64, i64 } %841, 0, !dbg !1237, !psr.id !1247, !verifier.code !63 */
  $i843 := $extractvalue.i64($p840, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %844, i64* %843, align 16, !dbg !1237, !psr.id !1248, !verifier.code !63 */
  $M.333 := $store.i64($M.333, $p842, $i843);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* %845 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %842, i32 0, i32 1, !dbg !1237, !psr.id !1249, !verifier.code !63 */
  $p844 := $add.ref($add.ref($p841, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* %846 = extractvalue { i64, i64 } %841, 1, !dbg !1237, !psr.id !1250, !verifier.code !63 */
  $i845 := $extractvalue.i64($p840, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %846, i64* %845, align 8, !dbg !1237, !psr.id !1251, !verifier.code !63 */
  $M.333 := $store.i64($M.333, $p844, $i845);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  /* %847 = load i128, i128* %108, align 16, !dbg !1237, !psr.id !1252, !verifier.code !63 */
  $i846 := $load.i128($M.333, $p107);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  /* store i128 %847, i128* %109, align 16, !dbg !1253, !psr.id !1254, !verifier.code !63 */
  $M.334 := $store.i128($M.334, $p108, $i846);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  /* %848 = bitcast i128* %109 to { i64, i64 }*, !dbg !1253, !psr.id !1255, !verifier.code !63 */
  $p847 := $bitcast.ref.ref($p108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  /* %849 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %848, i32 0, i32 0, !dbg !1253, !psr.id !1256, !verifier.code !63 */
  $p848 := $add.ref($add.ref($p847, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  /* %850 = load i64, i64* %849, align 16, !dbg !1253, !psr.id !1257, !verifier.code !63 */
  $i849 := $load.i64($M.334, $p848);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  /* %851 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %848, i32 0, i32 1, !dbg !1253, !psr.id !1258, !verifier.code !63 */
  $p850 := $add.ref($add.ref($p847, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  /* %852 = load i64, i64* %851, align 8, !dbg !1253, !psr.id !1259, !verifier.code !63 */
  $i851 := $load.i64($M.334, $p850);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  /* %853 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %850, i64 %852), !dbg !1253, !psr.id !1260, !verifier.code !63 */
  call $i852 := FStar_UInt128_uint128_to_uint64($i849, $i851);
  /* call void @llvm.dbg.value(metadata i64 %853, metadata !5530, metadata !DIExpression()), !dbg !4504, !psr.id !5531, !verifier.code !64 */
  call {:cexpr "c10"} boogie_si_record_i64($i852);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  /* %854 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %853), !dbg !1263, !psr.id !1264, !verifier.code !63 */
  call $p853 := FStar_UInt128_uint64_to_uint128($i852);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  /* %855 = bitcast i128* %110 to { i64, i64 }*, !dbg !1263, !psr.id !1265, !verifier.code !63 */
  $p854 := $bitcast.ref.ref($p109);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  /* %856 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %855, i32 0, i32 0, !dbg !1263, !psr.id !1266, !verifier.code !63 */
  $p855 := $add.ref($add.ref($p854, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  /* %857 = extractvalue { i64, i64 } %854, 0, !dbg !1263, !psr.id !1267, !verifier.code !63 */
  $i856 := $extractvalue.i64($p853, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %857, i64* %856, align 16, !dbg !1263, !psr.id !1268, !verifier.code !63 */
  $M.335 := $store.i64($M.335, $p855, $i856);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  /* %858 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %855, i32 0, i32 1, !dbg !1263, !psr.id !1269, !verifier.code !63 */
  $p857 := $add.ref($add.ref($p854, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  /* %859 = extractvalue { i64, i64 } %854, 1, !dbg !1263, !psr.id !1270, !verifier.code !63 */
  $i858 := $extractvalue.i64($p853, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %859, i64* %858, align 8, !dbg !1263, !psr.id !1271, !verifier.code !63 */
  $M.335 := $store.i64($M.335, $p857, $i858);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  /* %860 = load i128, i128* %110, align 16, !dbg !1263, !psr.id !1272, !verifier.code !63 */
  $i859 := $load.i128($M.335, $p109);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %364, i128* %111, align 16, !dbg !1273, !psr.id !1274, !verifier.code !63 */
  $M.336 := $store.i128($M.336, $p110, $i363);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %861 = bitcast i128* %111 to { i64, i64 }*, !dbg !1273, !psr.id !1275, !verifier.code !63 */
  $p860 := $bitcast.ref.ref($p110);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %862 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %861, i32 0, i32 0, !dbg !1273, !psr.id !1276, !verifier.code !63 */
  $p861 := $add.ref($add.ref($p860, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %863 = load i64, i64* %862, align 16, !dbg !1273, !psr.id !1277, !verifier.code !63 */
  $i862 := $load.i64($M.336, $p861);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %864 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %861, i32 0, i32 1, !dbg !1273, !psr.id !1278, !verifier.code !63 */
  $p863 := $add.ref($add.ref($p860, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %865 = load i64, i64* %864, align 8, !dbg !1273, !psr.id !1279, !verifier.code !63 */
  $i864 := $load.i64($M.336, $p863);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %860, i128* %112, align 16, !dbg !1273, !psr.id !1280, !verifier.code !63 */
  $M.337 := $store.i128($M.337, $p111, $i859);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %866 = bitcast i128* %112 to { i64, i64 }*, !dbg !1273, !psr.id !1281, !verifier.code !63 */
  $p865 := $bitcast.ref.ref($p111);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %867 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %866, i32 0, i32 0, !dbg !1273, !psr.id !1282, !verifier.code !63 */
  $p866 := $add.ref($add.ref($p865, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %868 = load i64, i64* %867, align 16, !dbg !1273, !psr.id !1283, !verifier.code !63 */
  $i867 := $load.i64($M.337, $p866);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %869 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %866, i32 0, i32 1, !dbg !1273, !psr.id !1284, !verifier.code !63 */
  $p868 := $add.ref($add.ref($p865, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %870 = load i64, i64* %869, align 8, !dbg !1273, !psr.id !1285, !verifier.code !63 */
  $i869 := $load.i64($M.337, $p868);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %871 = call { i64, i64 } @FStar_UInt128_add(i64 %863, i64 %865, i64 %868, i64 %870), !dbg !1273, !psr.id !1286, !verifier.code !63 */
  call $p870 := FStar_UInt128_add($i862, $i864, $i867, $i869);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %872 = bitcast i128* %113 to { i64, i64 }*, !dbg !1273, !psr.id !1287, !verifier.code !63 */
  $p871 := $bitcast.ref.ref($p112);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %873 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %872, i32 0, i32 0, !dbg !1273, !psr.id !1288, !verifier.code !63 */
  $p872 := $add.ref($add.ref($p871, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %874 = extractvalue { i64, i64 } %871, 0, !dbg !1273, !psr.id !1289, !verifier.code !63 */
  $i873 := $extractvalue.i64($p870, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %874, i64* %873, align 16, !dbg !1273, !psr.id !1290, !verifier.code !63 */
  $M.338 := $store.i64($M.338, $p872, $i873);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %875 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %872, i32 0, i32 1, !dbg !1273, !psr.id !1291, !verifier.code !63 */
  $p874 := $add.ref($add.ref($p871, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %876 = extractvalue { i64, i64 } %871, 1, !dbg !1273, !psr.id !1292, !verifier.code !63 */
  $i875 := $extractvalue.i64($p870, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %876, i64* %875, align 8, !dbg !1273, !psr.id !1293, !verifier.code !63 */
  $M.338 := $store.i64($M.338, $p874, $i875);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  /* %877 = load i128, i128* %113, align 16, !dbg !1273, !psr.id !1294, !verifier.code !63 */
  $i876 := $load.i128($M.338, $p112);
  /* call void @llvm.dbg.value(metadata i128 %877, metadata !5564, metadata !DIExpression()), !dbg !4504, !psr.id !5565, !verifier.code !64 */
  call {:cexpr "l_1"} boogie_si_record_i128($i876);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %877, i128* %114, align 16, !dbg !1297, !psr.id !1298, !verifier.code !63 */
  $M.339 := $store.i128($M.339, $p113, $i876);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  /* %878 = bitcast i128* %114 to { i64, i64 }*, !dbg !1297, !psr.id !1299, !verifier.code !63 */
  $p877 := $bitcast.ref.ref($p113);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  /* %879 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %878, i32 0, i32 0, !dbg !1297, !psr.id !1300, !verifier.code !63 */
  $p878 := $add.ref($add.ref($p877, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  /* %880 = load i64, i64* %879, align 16, !dbg !1297, !psr.id !1301, !verifier.code !63 */
  $i879 := $load.i64($M.339, $p878);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  /* %881 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %878, i32 0, i32 1, !dbg !1297, !psr.id !1302, !verifier.code !63 */
  $p880 := $add.ref($add.ref($p877, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  /* %882 = load i64, i64* %881, align 8, !dbg !1297, !psr.id !1303, !verifier.code !63 */
  $i881 := $load.i64($M.339, $p880);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  /* %883 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %880, i64 %882), !dbg !1297, !psr.id !1304, !verifier.code !63 */
  call $i882 := FStar_UInt128_uint128_to_uint64($i879, $i881);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 57} true;
  assume {:verifier.code 0} true;
  /* %884 = and i64 %883, 2251799813685247, !dbg !1305, !psr.id !1306, !verifier.code !63 */
  $i883 := $and.i64($i882, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %884, metadata !5576, metadata !DIExpression()), !dbg !4504, !psr.id !5577, !verifier.code !64 */
  call {:cexpr "tmp20"} boogie_si_record_i64($i883);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* store i128 %877, i128* %115, align 16, !dbg !1309, !psr.id !1310, !verifier.code !63 */
  $M.340 := $store.i128($M.340, $p114, $i876);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* %885 = bitcast i128* %115 to { i64, i64 }*, !dbg !1309, !psr.id !1311, !verifier.code !63 */
  $p884 := $bitcast.ref.ref($p114);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* %886 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %885, i32 0, i32 0, !dbg !1309, !psr.id !1312, !verifier.code !63 */
  $p885 := $add.ref($add.ref($p884, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* %887 = load i64, i64* %886, align 16, !dbg !1309, !psr.id !1313, !verifier.code !63 */
  $i886 := $load.i64($M.340, $p885);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* %888 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %885, i32 0, i32 1, !dbg !1309, !psr.id !1314, !verifier.code !63 */
  $p887 := $add.ref($add.ref($p884, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* %889 = load i64, i64* %888, align 8, !dbg !1309, !psr.id !1315, !verifier.code !63 */
  $i888 := $load.i64($M.340, $p887);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* %890 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %887, i64 %889, i32 51), !dbg !1309, !psr.id !1316, !verifier.code !63 */
  call $p889 := FStar_UInt128_shift_right($i886, $i888, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* %891 = bitcast i128* %116 to { i64, i64 }*, !dbg !1309, !psr.id !1317, !verifier.code !63 */
  $p890 := $bitcast.ref.ref($p115);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* %892 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %891, i32 0, i32 0, !dbg !1309, !psr.id !1318, !verifier.code !63 */
  $p891 := $add.ref($add.ref($p890, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* %893 = extractvalue { i64, i64 } %890, 0, !dbg !1309, !psr.id !1319, !verifier.code !63 */
  $i892 := $extractvalue.i64($p889, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %893, i64* %892, align 16, !dbg !1309, !psr.id !1320, !verifier.code !63 */
  $M.341 := $store.i64($M.341, $p891, $i892);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* %894 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %891, i32 0, i32 1, !dbg !1309, !psr.id !1321, !verifier.code !63 */
  $p893 := $add.ref($add.ref($p890, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* %895 = extractvalue { i64, i64 } %890, 1, !dbg !1309, !psr.id !1322, !verifier.code !63 */
  $i894 := $extractvalue.i64($p889, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %895, i64* %894, align 8, !dbg !1309, !psr.id !1323, !verifier.code !63 */
  $M.341 := $store.i64($M.341, $p893, $i894);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  /* %896 = load i128, i128* %116, align 16, !dbg !1309, !psr.id !1324, !verifier.code !63 */
  $i895 := $load.i128($M.341, $p115);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  /* store i128 %896, i128* %117, align 16, !dbg !1325, !psr.id !1326, !verifier.code !63 */
  $M.342 := $store.i128($M.342, $p116, $i895);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  /* %897 = bitcast i128* %117 to { i64, i64 }*, !dbg !1325, !psr.id !1327, !verifier.code !63 */
  $p896 := $bitcast.ref.ref($p116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  /* %898 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %897, i32 0, i32 0, !dbg !1325, !psr.id !1328, !verifier.code !63 */
  $p897 := $add.ref($add.ref($p896, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  /* %899 = load i64, i64* %898, align 16, !dbg !1325, !psr.id !1329, !verifier.code !63 */
  $i898 := $load.i64($M.342, $p897);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  /* %900 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %897, i32 0, i32 1, !dbg !1325, !psr.id !1330, !verifier.code !63 */
  $p899 := $add.ref($add.ref($p896, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  /* %901 = load i64, i64* %900, align 8, !dbg !1325, !psr.id !1331, !verifier.code !63 */
  $i900 := $load.i64($M.342, $p899);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  /* %902 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %899, i64 %901), !dbg !1325, !psr.id !1332, !verifier.code !63 */
  call $i901 := FStar_UInt128_uint128_to_uint64($i898, $i900);
  /* call void @llvm.dbg.value(metadata i64 %902, metadata !5602, metadata !DIExpression()), !dbg !4504, !psr.id !5603, !verifier.code !64 */
  call {:cexpr "c20"} boogie_si_record_i64($i901);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  /* %903 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %902), !dbg !1335, !psr.id !1336, !verifier.code !63 */
  call $p902 := FStar_UInt128_uint64_to_uint128($i901);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  /* %904 = bitcast i128* %118 to { i64, i64 }*, !dbg !1335, !psr.id !1337, !verifier.code !63 */
  $p903 := $bitcast.ref.ref($p117);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  /* %905 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %904, i32 0, i32 0, !dbg !1335, !psr.id !1338, !verifier.code !63 */
  $p904 := $add.ref($add.ref($p903, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  /* %906 = extractvalue { i64, i64 } %903, 0, !dbg !1335, !psr.id !1339, !verifier.code !63 */
  $i905 := $extractvalue.i64($p902, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %906, i64* %905, align 16, !dbg !1335, !psr.id !1340, !verifier.code !63 */
  $M.343 := $store.i64($M.343, $p904, $i905);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  /* %907 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %904, i32 0, i32 1, !dbg !1335, !psr.id !1341, !verifier.code !63 */
  $p906 := $add.ref($add.ref($p903, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  /* %908 = extractvalue { i64, i64 } %903, 1, !dbg !1335, !psr.id !1342, !verifier.code !63 */
  $i907 := $extractvalue.i64($p902, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %908, i64* %907, align 8, !dbg !1335, !psr.id !1343, !verifier.code !63 */
  $M.343 := $store.i64($M.343, $p906, $i907);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  /* %909 = load i128, i128* %118, align 16, !dbg !1335, !psr.id !1344, !verifier.code !63 */
  $i908 := $load.i128($M.343, $p117);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %419, i128* %119, align 16, !dbg !1345, !psr.id !1346, !verifier.code !63 */
  $M.344 := $store.i128($M.344, $p118, $i418);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %910 = bitcast i128* %119 to { i64, i64 }*, !dbg !1345, !psr.id !1347, !verifier.code !63 */
  $p909 := $bitcast.ref.ref($p118);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %911 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %910, i32 0, i32 0, !dbg !1345, !psr.id !1348, !verifier.code !63 */
  $p910 := $add.ref($add.ref($p909, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %912 = load i64, i64* %911, align 16, !dbg !1345, !psr.id !1349, !verifier.code !63 */
  $i911 := $load.i64($M.344, $p910);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %913 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %910, i32 0, i32 1, !dbg !1345, !psr.id !1350, !verifier.code !63 */
  $p912 := $add.ref($add.ref($p909, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %914 = load i64, i64* %913, align 8, !dbg !1345, !psr.id !1351, !verifier.code !63 */
  $i913 := $load.i64($M.344, $p912);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %909, i128* %120, align 16, !dbg !1345, !psr.id !1352, !verifier.code !63 */
  $M.345 := $store.i128($M.345, $p119, $i908);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %915 = bitcast i128* %120 to { i64, i64 }*, !dbg !1345, !psr.id !1353, !verifier.code !63 */
  $p914 := $bitcast.ref.ref($p119);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %916 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %915, i32 0, i32 0, !dbg !1345, !psr.id !1354, !verifier.code !63 */
  $p915 := $add.ref($add.ref($p914, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %917 = load i64, i64* %916, align 16, !dbg !1345, !psr.id !1355, !verifier.code !63 */
  $i916 := $load.i64($M.345, $p915);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %918 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %915, i32 0, i32 1, !dbg !1345, !psr.id !1356, !verifier.code !63 */
  $p917 := $add.ref($add.ref($p914, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %919 = load i64, i64* %918, align 8, !dbg !1345, !psr.id !1357, !verifier.code !63 */
  $i918 := $load.i64($M.345, $p917);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %920 = call { i64, i64 } @FStar_UInt128_add(i64 %912, i64 %914, i64 %917, i64 %919), !dbg !1345, !psr.id !1358, !verifier.code !63 */
  call $p919 := FStar_UInt128_add($i911, $i913, $i916, $i918);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %921 = bitcast i128* %121 to { i64, i64 }*, !dbg !1345, !psr.id !1359, !verifier.code !63 */
  $p920 := $bitcast.ref.ref($p120);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %922 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %921, i32 0, i32 0, !dbg !1345, !psr.id !1360, !verifier.code !63 */
  $p921 := $add.ref($add.ref($p920, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %923 = extractvalue { i64, i64 } %920, 0, !dbg !1345, !psr.id !1361, !verifier.code !63 */
  $i922 := $extractvalue.i64($p919, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %923, i64* %922, align 16, !dbg !1345, !psr.id !1362, !verifier.code !63 */
  $M.346 := $store.i64($M.346, $p921, $i922);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %924 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %921, i32 0, i32 1, !dbg !1345, !psr.id !1363, !verifier.code !63 */
  $p923 := $add.ref($add.ref($p920, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %925 = extractvalue { i64, i64 } %920, 1, !dbg !1345, !psr.id !1364, !verifier.code !63 */
  $i924 := $extractvalue.i64($p919, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %925, i64* %924, align 8, !dbg !1345, !psr.id !1365, !verifier.code !63 */
  $M.346 := $store.i64($M.346, $p923, $i924);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  /* %926 = load i128, i128* %121, align 16, !dbg !1345, !psr.id !1366, !verifier.code !63 */
  $i925 := $load.i128($M.346, $p120);
  /* call void @llvm.dbg.value(metadata i128 %926, metadata !5636, metadata !DIExpression()), !dbg !4504, !psr.id !5637, !verifier.code !64 */
  call {:cexpr "l_2"} boogie_si_record_i128($i925);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %926, i128* %122, align 16, !dbg !1369, !psr.id !1370, !verifier.code !63 */
  $M.347 := $store.i128($M.347, $p121, $i925);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  /* %927 = bitcast i128* %122 to { i64, i64 }*, !dbg !1369, !psr.id !1371, !verifier.code !63 */
  $p926 := $bitcast.ref.ref($p121);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  /* %928 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %927, i32 0, i32 0, !dbg !1369, !psr.id !1372, !verifier.code !63 */
  $p927 := $add.ref($add.ref($p926, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  /* %929 = load i64, i64* %928, align 16, !dbg !1369, !psr.id !1373, !verifier.code !63 */
  $i928 := $load.i64($M.347, $p927);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  /* %930 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %927, i32 0, i32 1, !dbg !1369, !psr.id !1374, !verifier.code !63 */
  $p929 := $add.ref($add.ref($p926, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  /* %931 = load i64, i64* %930, align 8, !dbg !1369, !psr.id !1375, !verifier.code !63 */
  $i930 := $load.i64($M.347, $p929);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  /* %932 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %929, i64 %931), !dbg !1369, !psr.id !1376, !verifier.code !63 */
  call $i931 := FStar_UInt128_uint128_to_uint64($i928, $i930);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 57} true;
  assume {:verifier.code 0} true;
  /* %933 = and i64 %932, 2251799813685247, !dbg !1377, !psr.id !1378, !verifier.code !63 */
  $i932 := $and.i64($i931, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %933, metadata !5648, metadata !DIExpression()), !dbg !4504, !psr.id !5649, !verifier.code !64 */
  call {:cexpr "tmp30"} boogie_si_record_i64($i932);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* store i128 %926, i128* %123, align 16, !dbg !1381, !psr.id !1382, !verifier.code !63 */
  $M.348 := $store.i128($M.348, $p122, $i925);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* %934 = bitcast i128* %123 to { i64, i64 }*, !dbg !1381, !psr.id !1383, !verifier.code !63 */
  $p933 := $bitcast.ref.ref($p122);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* %935 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %934, i32 0, i32 0, !dbg !1381, !psr.id !1384, !verifier.code !63 */
  $p934 := $add.ref($add.ref($p933, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* %936 = load i64, i64* %935, align 16, !dbg !1381, !psr.id !1385, !verifier.code !63 */
  $i935 := $load.i64($M.348, $p934);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* %937 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %934, i32 0, i32 1, !dbg !1381, !psr.id !1386, !verifier.code !63 */
  $p936 := $add.ref($add.ref($p933, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* %938 = load i64, i64* %937, align 8, !dbg !1381, !psr.id !1387, !verifier.code !63 */
  $i937 := $load.i64($M.348, $p936);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* %939 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %936, i64 %938, i32 51), !dbg !1381, !psr.id !1388, !verifier.code !63 */
  call $p938 := FStar_UInt128_shift_right($i935, $i937, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* %940 = bitcast i128* %124 to { i64, i64 }*, !dbg !1381, !psr.id !1389, !verifier.code !63 */
  $p939 := $bitcast.ref.ref($p123);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* %941 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %940, i32 0, i32 0, !dbg !1381, !psr.id !1390, !verifier.code !63 */
  $p940 := $add.ref($add.ref($p939, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* %942 = extractvalue { i64, i64 } %939, 0, !dbg !1381, !psr.id !1391, !verifier.code !63 */
  $i941 := $extractvalue.i64($p938, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %942, i64* %941, align 16, !dbg !1381, !psr.id !1392, !verifier.code !63 */
  $M.349 := $store.i64($M.349, $p940, $i941);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* %943 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %940, i32 0, i32 1, !dbg !1381, !psr.id !1393, !verifier.code !63 */
  $p942 := $add.ref($add.ref($p939, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* %944 = extractvalue { i64, i64 } %939, 1, !dbg !1381, !psr.id !1394, !verifier.code !63 */
  $i943 := $extractvalue.i64($p938, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %944, i64* %943, align 8, !dbg !1381, !psr.id !1395, !verifier.code !63 */
  $M.349 := $store.i64($M.349, $p942, $i943);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  /* %945 = load i128, i128* %124, align 16, !dbg !1381, !psr.id !1396, !verifier.code !63 */
  $i944 := $load.i128($M.349, $p123);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  /* store i128 %945, i128* %125, align 16, !dbg !1397, !psr.id !1398, !verifier.code !63 */
  $M.350 := $store.i128($M.350, $p124, $i944);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  /* %946 = bitcast i128* %125 to { i64, i64 }*, !dbg !1397, !psr.id !1399, !verifier.code !63 */
  $p945 := $bitcast.ref.ref($p124);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  /* %947 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %946, i32 0, i32 0, !dbg !1397, !psr.id !1400, !verifier.code !63 */
  $p946 := $add.ref($add.ref($p945, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  /* %948 = load i64, i64* %947, align 16, !dbg !1397, !psr.id !1401, !verifier.code !63 */
  $i947 := $load.i64($M.350, $p946);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  /* %949 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %946, i32 0, i32 1, !dbg !1397, !psr.id !1402, !verifier.code !63 */
  $p948 := $add.ref($add.ref($p945, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  /* %950 = load i64, i64* %949, align 8, !dbg !1397, !psr.id !1403, !verifier.code !63 */
  $i949 := $load.i64($M.350, $p948);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  /* %951 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %948, i64 %950), !dbg !1397, !psr.id !1404, !verifier.code !63 */
  call $i950 := FStar_UInt128_uint128_to_uint64($i947, $i949);
  /* call void @llvm.dbg.value(metadata i64 %951, metadata !5674, metadata !DIExpression()), !dbg !4504, !psr.id !5675, !verifier.code !64 */
  call {:cexpr "c30"} boogie_si_record_i64($i950);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  /* %952 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %951), !dbg !1407, !psr.id !1408, !verifier.code !63 */
  call $p951 := FStar_UInt128_uint64_to_uint128($i950);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  /* %953 = bitcast i128* %126 to { i64, i64 }*, !dbg !1407, !psr.id !1409, !verifier.code !63 */
  $p952 := $bitcast.ref.ref($p125);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  /* %954 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %953, i32 0, i32 0, !dbg !1407, !psr.id !1410, !verifier.code !63 */
  $p953 := $add.ref($add.ref($p952, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  /* %955 = extractvalue { i64, i64 } %952, 0, !dbg !1407, !psr.id !1411, !verifier.code !63 */
  $i954 := $extractvalue.i64($p951, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %955, i64* %954, align 16, !dbg !1407, !psr.id !1412, !verifier.code !63 */
  $M.351 := $store.i64($M.351, $p953, $i954);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  /* %956 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %953, i32 0, i32 1, !dbg !1407, !psr.id !1413, !verifier.code !63 */
  $p955 := $add.ref($add.ref($p952, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  /* %957 = extractvalue { i64, i64 } %952, 1, !dbg !1407, !psr.id !1414, !verifier.code !63 */
  $i956 := $extractvalue.i64($p951, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %957, i64* %956, align 8, !dbg !1407, !psr.id !1415, !verifier.code !63 */
  $M.351 := $store.i64($M.351, $p955, $i956);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  /* %958 = load i128, i128* %126, align 16, !dbg !1407, !psr.id !1416, !verifier.code !63 */
  $i957 := $load.i128($M.351, $p125);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %474, i128* %127, align 16, !dbg !1417, !psr.id !1418, !verifier.code !63 */
  $M.352 := $store.i128($M.352, $p126, $i473);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %959 = bitcast i128* %127 to { i64, i64 }*, !dbg !1417, !psr.id !1419, !verifier.code !63 */
  $p958 := $bitcast.ref.ref($p126);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %960 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %959, i32 0, i32 0, !dbg !1417, !psr.id !1420, !verifier.code !63 */
  $p959 := $add.ref($add.ref($p958, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %961 = load i64, i64* %960, align 16, !dbg !1417, !psr.id !1421, !verifier.code !63 */
  $i960 := $load.i64($M.352, $p959);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %962 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %959, i32 0, i32 1, !dbg !1417, !psr.id !1422, !verifier.code !63 */
  $p961 := $add.ref($add.ref($p958, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %963 = load i64, i64* %962, align 8, !dbg !1417, !psr.id !1423, !verifier.code !63 */
  $i962 := $load.i64($M.352, $p961);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %958, i128* %128, align 16, !dbg !1417, !psr.id !1424, !verifier.code !63 */
  $M.353 := $store.i128($M.353, $p127, $i957);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %964 = bitcast i128* %128 to { i64, i64 }*, !dbg !1417, !psr.id !1425, !verifier.code !63 */
  $p963 := $bitcast.ref.ref($p127);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %965 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %964, i32 0, i32 0, !dbg !1417, !psr.id !1426, !verifier.code !63 */
  $p964 := $add.ref($add.ref($p963, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %966 = load i64, i64* %965, align 16, !dbg !1417, !psr.id !1427, !verifier.code !63 */
  $i965 := $load.i64($M.353, $p964);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %967 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %964, i32 0, i32 1, !dbg !1417, !psr.id !1428, !verifier.code !63 */
  $p966 := $add.ref($add.ref($p963, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %968 = load i64, i64* %967, align 8, !dbg !1417, !psr.id !1429, !verifier.code !63 */
  $i967 := $load.i64($M.353, $p966);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %969 = call { i64, i64 } @FStar_UInt128_add(i64 %961, i64 %963, i64 %966, i64 %968), !dbg !1417, !psr.id !1430, !verifier.code !63 */
  call $p968 := FStar_UInt128_add($i960, $i962, $i965, $i967);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %970 = bitcast i128* %129 to { i64, i64 }*, !dbg !1417, !psr.id !1431, !verifier.code !63 */
  $p969 := $bitcast.ref.ref($p128);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %971 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %970, i32 0, i32 0, !dbg !1417, !psr.id !1432, !verifier.code !63 */
  $p970 := $add.ref($add.ref($p969, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %972 = extractvalue { i64, i64 } %969, 0, !dbg !1417, !psr.id !1433, !verifier.code !63 */
  $i971 := $extractvalue.i64($p968, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %972, i64* %971, align 16, !dbg !1417, !psr.id !1434, !verifier.code !63 */
  $M.354 := $store.i64($M.354, $p970, $i971);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %973 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %970, i32 0, i32 1, !dbg !1417, !psr.id !1435, !verifier.code !63 */
  $p972 := $add.ref($add.ref($p969, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %974 = extractvalue { i64, i64 } %969, 1, !dbg !1417, !psr.id !1436, !verifier.code !63 */
  $i973 := $extractvalue.i64($p968, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %974, i64* %973, align 8, !dbg !1417, !psr.id !1437, !verifier.code !63 */
  $M.354 := $store.i64($M.354, $p972, $i973);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  /* %975 = load i128, i128* %129, align 16, !dbg !1417, !psr.id !1438, !verifier.code !63 */
  $i974 := $load.i128($M.354, $p128);
  /* call void @llvm.dbg.value(metadata i128 %975, metadata !5708, metadata !DIExpression()), !dbg !4504, !psr.id !5709, !verifier.code !64 */
  call {:cexpr "l_3"} boogie_si_record_i128($i974);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %975, i128* %130, align 16, !dbg !1441, !psr.id !1442, !verifier.code !63 */
  $M.355 := $store.i128($M.355, $p129, $i974);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  /* %976 = bitcast i128* %130 to { i64, i64 }*, !dbg !1441, !psr.id !1443, !verifier.code !63 */
  $p975 := $bitcast.ref.ref($p129);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  /* %977 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %976, i32 0, i32 0, !dbg !1441, !psr.id !1444, !verifier.code !63 */
  $p976 := $add.ref($add.ref($p975, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  /* %978 = load i64, i64* %977, align 16, !dbg !1441, !psr.id !1445, !verifier.code !63 */
  $i977 := $load.i64($M.355, $p976);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  /* %979 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %976, i32 0, i32 1, !dbg !1441, !psr.id !1446, !verifier.code !63 */
  $p978 := $add.ref($add.ref($p975, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  /* %980 = load i64, i64* %979, align 8, !dbg !1441, !psr.id !1447, !verifier.code !63 */
  $i979 := $load.i64($M.355, $p978);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  /* %981 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %978, i64 %980), !dbg !1441, !psr.id !1448, !verifier.code !63 */
  call $i980 := FStar_UInt128_uint128_to_uint64($i977, $i979);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 57} true;
  assume {:verifier.code 0} true;
  /* %982 = and i64 %981, 2251799813685247, !dbg !1449, !psr.id !1450, !verifier.code !63 */
  $i981 := $and.i64($i980, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %982, metadata !5720, metadata !DIExpression()), !dbg !4504, !psr.id !5721, !verifier.code !64 */
  call {:cexpr "tmp40"} boogie_si_record_i64($i981);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* store i128 %975, i128* %131, align 16, !dbg !1453, !psr.id !1454, !verifier.code !63 */
  $M.356 := $store.i128($M.356, $p130, $i974);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* %983 = bitcast i128* %131 to { i64, i64 }*, !dbg !1453, !psr.id !1455, !verifier.code !63 */
  $p982 := $bitcast.ref.ref($p130);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* %984 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %983, i32 0, i32 0, !dbg !1453, !psr.id !1456, !verifier.code !63 */
  $p983 := $add.ref($add.ref($p982, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* %985 = load i64, i64* %984, align 16, !dbg !1453, !psr.id !1457, !verifier.code !63 */
  $i984 := $load.i64($M.356, $p983);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* %986 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %983, i32 0, i32 1, !dbg !1453, !psr.id !1458, !verifier.code !63 */
  $p985 := $add.ref($add.ref($p982, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* %987 = load i64, i64* %986, align 8, !dbg !1453, !psr.id !1459, !verifier.code !63 */
  $i986 := $load.i64($M.356, $p985);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* %988 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %985, i64 %987, i32 51), !dbg !1453, !psr.id !1460, !verifier.code !63 */
  call $p987 := FStar_UInt128_shift_right($i984, $i986, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* %989 = bitcast i128* %132 to { i64, i64 }*, !dbg !1453, !psr.id !1461, !verifier.code !63 */
  $p988 := $bitcast.ref.ref($p131);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* %990 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %989, i32 0, i32 0, !dbg !1453, !psr.id !1462, !verifier.code !63 */
  $p989 := $add.ref($add.ref($p988, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* %991 = extractvalue { i64, i64 } %988, 0, !dbg !1453, !psr.id !1463, !verifier.code !63 */
  $i990 := $extractvalue.i64($p987, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %991, i64* %990, align 16, !dbg !1453, !psr.id !1464, !verifier.code !63 */
  $M.357 := $store.i64($M.357, $p989, $i990);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* %992 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %989, i32 0, i32 1, !dbg !1453, !psr.id !1465, !verifier.code !63 */
  $p991 := $add.ref($add.ref($p988, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* %993 = extractvalue { i64, i64 } %988, 1, !dbg !1453, !psr.id !1466, !verifier.code !63 */
  $i992 := $extractvalue.i64($p987, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %993, i64* %992, align 8, !dbg !1453, !psr.id !1467, !verifier.code !63 */
  $M.357 := $store.i64($M.357, $p991, $i992);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  /* %994 = load i128, i128* %132, align 16, !dbg !1453, !psr.id !1468, !verifier.code !63 */
  $i993 := $load.i128($M.357, $p131);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  /* store i128 %994, i128* %133, align 16, !dbg !1469, !psr.id !1470, !verifier.code !63 */
  $M.358 := $store.i128($M.358, $p132, $i993);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  /* %995 = bitcast i128* %133 to { i64, i64 }*, !dbg !1469, !psr.id !1471, !verifier.code !63 */
  $p994 := $bitcast.ref.ref($p132);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  /* %996 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %995, i32 0, i32 0, !dbg !1469, !psr.id !1472, !verifier.code !63 */
  $p995 := $add.ref($add.ref($p994, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  /* %997 = load i64, i64* %996, align 16, !dbg !1469, !psr.id !1473, !verifier.code !63 */
  $i996 := $load.i64($M.358, $p995);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  /* %998 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %995, i32 0, i32 1, !dbg !1469, !psr.id !1474, !verifier.code !63 */
  $p997 := $add.ref($add.ref($p994, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  /* %999 = load i64, i64* %998, align 8, !dbg !1469, !psr.id !1475, !verifier.code !63 */
  $i998 := $load.i64($M.358, $p997);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  /* %1000 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %997, i64 %999), !dbg !1469, !psr.id !1476, !verifier.code !63 */
  call $i999 := FStar_UInt128_uint128_to_uint64($i996, $i998);
  /* call void @llvm.dbg.value(metadata i64 %1000, metadata !5746, metadata !DIExpression()), !dbg !4504, !psr.id !5747, !verifier.code !64 */
  call {:cexpr "c40"} boogie_si_record_i64($i999);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 547, 30} true;
  assume {:verifier.code 0} true;
  /* %1001 = mul i64 %1000, 19, !dbg !1479, !psr.id !1480, !verifier.code !63 */
  $i1000 := $mul.i64($i999, 19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 547, 24} true;
  assume {:verifier.code 0} true;
  /* %1002 = add i64 %786, %1001, !dbg !1481, !psr.id !1482, !verifier.code !63 */
  $i1001 := $add.i64($i785, $i1000);
  /* call void @llvm.dbg.value(metadata i64 %1002, metadata !5752, metadata !DIExpression()), !dbg !4504, !psr.id !5753, !verifier.code !64 */
  call {:cexpr "l_4"} boogie_si_record_i64($i1001);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 548, 24} true;
  assume {:verifier.code 0} true;
  /* %1003 = and i64 %1002, 2251799813685247, !dbg !1485, !psr.id !1486, !verifier.code !63 */
  $i1002 := $and.i64($i1001, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1003, metadata !5756, metadata !DIExpression()), !dbg !4504, !psr.id !5757, !verifier.code !64 */
  call {:cexpr "tmp0_"} boogie_si_record_i64($i1002);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 549, 22} true;
  assume {:verifier.code 0} true;
  /* %1004 = lshr i64 %1002, 51, !dbg !1489, !psr.id !1490, !verifier.code !63 */
  $i1003 := $lshr.i64($i1001, 51);
  /* call void @llvm.dbg.value(metadata i64 %1004, metadata !5760, metadata !DIExpression()), !dbg !4504, !psr.id !5761, !verifier.code !64 */
  call {:cexpr "c50"} boogie_si_record_i64($i1003);
  /* call void @llvm.dbg.value(metadata i64 %1003, metadata !5762, metadata !DIExpression()), !dbg !4504, !psr.id !5763, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 551, 25} true;
  assume {:verifier.code 0} true;
  /* %1005 = add i64 %835, %1004, !dbg !1495, !psr.id !1496, !verifier.code !63 */
  $i1004 := $add.i64($i834, $i1003);
  /* call void @llvm.dbg.value(metadata i64 %1005, metadata !5766, metadata !DIExpression()), !dbg !4504, !psr.id !5767, !verifier.code !64 */
  call {:cexpr "o111"} boogie_si_record_i64($i1004);
  /* call void @llvm.dbg.value(metadata i64 %884, metadata !5768, metadata !DIExpression()), !dbg !4504, !psr.id !5769, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %933, metadata !5770, metadata !DIExpression()), !dbg !4504, !psr.id !5771, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %982, metadata !5772, metadata !DIExpression()), !dbg !4504, !psr.id !5773, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  /* %1006 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 0), !dbg !1505, !psr.id !1506, !verifier.code !63 */
  call $p1005 := FStar_UInt128_uint64_to_uint128(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  /* %1007 = bitcast i128* %134 to { i64, i64 }*, !dbg !1505, !psr.id !1507, !verifier.code !63 */
  $p1006 := $bitcast.ref.ref($p133);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  /* %1008 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1007, i32 0, i32 0, !dbg !1505, !psr.id !1508, !verifier.code !63 */
  $p1007 := $add.ref($add.ref($p1006, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  /* %1009 = extractvalue { i64, i64 } %1006, 0, !dbg !1505, !psr.id !1509, !verifier.code !63 */
  $i1008 := $extractvalue.i64($p1005, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  /* store i64 %1009, i64* %1008, align 16, !dbg !1505, !psr.id !1510, !verifier.code !63 */
  $M.359 := $store.i64($M.359, $p1007, $i1008);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  /* %1010 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1007, i32 0, i32 1, !dbg !1505, !psr.id !1511, !verifier.code !63 */
  $p1009 := $add.ref($add.ref($p1006, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  /* %1011 = extractvalue { i64, i64 } %1006, 1, !dbg !1505, !psr.id !1512, !verifier.code !63 */
  $i1010 := $extractvalue.i64($p1005, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  /* store i64 %1011, i64* %1010, align 8, !dbg !1505, !psr.id !1513, !verifier.code !63 */
  $M.359 := $store.i64($M.359, $p1009, $i1010);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  /* %1012 = load i128, i128* %134, align 16, !dbg !1505, !psr.id !1514, !verifier.code !63 */
  $i1011 := $load.i128($M.359, $p133);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* store i128 %535, i128* %135, align 16, !dbg !1515, !psr.id !1516, !verifier.code !63 */
  $M.360 := $store.i128($M.360, $p134, $i534);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1013 = bitcast i128* %135 to { i64, i64 }*, !dbg !1515, !psr.id !1517, !verifier.code !63 */
  $p1012 := $bitcast.ref.ref($p134);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1014 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1013, i32 0, i32 0, !dbg !1515, !psr.id !1518, !verifier.code !63 */
  $p1013 := $add.ref($add.ref($p1012, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1015 = load i64, i64* %1014, align 16, !dbg !1515, !psr.id !1519, !verifier.code !63 */
  $i1014 := $load.i64($M.360, $p1013);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1016 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1013, i32 0, i32 1, !dbg !1515, !psr.id !1520, !verifier.code !63 */
  $p1015 := $add.ref($add.ref($p1012, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1017 = load i64, i64* %1016, align 8, !dbg !1515, !psr.id !1521, !verifier.code !63 */
  $i1016 := $load.i64($M.360, $p1015);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* store i128 %1012, i128* %136, align 16, !dbg !1515, !psr.id !1522, !verifier.code !63 */
  $M.361 := $store.i128($M.361, $p135, $i1011);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1018 = bitcast i128* %136 to { i64, i64 }*, !dbg !1515, !psr.id !1523, !verifier.code !63 */
  $p1017 := $bitcast.ref.ref($p135);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1019 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1018, i32 0, i32 0, !dbg !1515, !psr.id !1524, !verifier.code !63 */
  $p1018 := $add.ref($add.ref($p1017, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1020 = load i64, i64* %1019, align 16, !dbg !1515, !psr.id !1525, !verifier.code !63 */
  $i1019 := $load.i64($M.361, $p1018);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1021 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1018, i32 0, i32 1, !dbg !1515, !psr.id !1526, !verifier.code !63 */
  $p1020 := $add.ref($add.ref($p1017, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1022 = load i64, i64* %1021, align 8, !dbg !1515, !psr.id !1527, !verifier.code !63 */
  $i1021 := $load.i64($M.361, $p1020);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1023 = call { i64, i64 } @FStar_UInt128_add(i64 %1015, i64 %1017, i64 %1020, i64 %1022), !dbg !1515, !psr.id !1528, !verifier.code !63 */
  call $p1022 := FStar_UInt128_add($i1014, $i1016, $i1019, $i1021);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1024 = bitcast i128* %137 to { i64, i64 }*, !dbg !1515, !psr.id !1529, !verifier.code !63 */
  $p1023 := $bitcast.ref.ref($p136);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1025 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1024, i32 0, i32 0, !dbg !1515, !psr.id !1530, !verifier.code !63 */
  $p1024 := $add.ref($add.ref($p1023, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1026 = extractvalue { i64, i64 } %1023, 0, !dbg !1515, !psr.id !1531, !verifier.code !63 */
  $i1025 := $extractvalue.i64($p1022, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %1026, i64* %1025, align 16, !dbg !1515, !psr.id !1532, !verifier.code !63 */
  $M.362 := $store.i64($M.362, $p1024, $i1025);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1027 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1024, i32 0, i32 1, !dbg !1515, !psr.id !1533, !verifier.code !63 */
  $p1026 := $add.ref($add.ref($p1023, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1028 = extractvalue { i64, i64 } %1023, 1, !dbg !1515, !psr.id !1534, !verifier.code !63 */
  $i1027 := $extractvalue.i64($p1022, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %1028, i64* %1027, align 8, !dbg !1515, !psr.id !1535, !verifier.code !63 */
  $M.362 := $store.i64($M.362, $p1026, $i1027);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %1029 = load i128, i128* %137, align 16, !dbg !1515, !psr.id !1536, !verifier.code !63 */
  $i1028 := $load.i128($M.362, $p136);
  /* call void @llvm.dbg.value(metadata i128 %1029, metadata !5806, metadata !DIExpression()), !dbg !4504, !psr.id !5807, !verifier.code !64 */
  call {:cexpr "l_5"} boogie_si_record_i128($i1028);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %1029, i128* %138, align 16, !dbg !1539, !psr.id !1540, !verifier.code !63 */
  $M.363 := $store.i128($M.363, $p137, $i1028);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  /* %1030 = bitcast i128* %138 to { i64, i64 }*, !dbg !1539, !psr.id !1541, !verifier.code !63 */
  $p1029 := $bitcast.ref.ref($p137);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  /* %1031 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1030, i32 0, i32 0, !dbg !1539, !psr.id !1542, !verifier.code !63 */
  $p1030 := $add.ref($add.ref($p1029, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  /* %1032 = load i64, i64* %1031, align 16, !dbg !1539, !psr.id !1543, !verifier.code !63 */
  $i1031 := $load.i64($M.363, $p1030);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  /* %1033 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1030, i32 0, i32 1, !dbg !1539, !psr.id !1544, !verifier.code !63 */
  $p1032 := $add.ref($add.ref($p1029, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  /* %1034 = load i64, i64* %1033, align 8, !dbg !1539, !psr.id !1545, !verifier.code !63 */
  $i1033 := $load.i64($M.363, $p1032);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  /* %1035 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1032, i64 %1034), !dbg !1539, !psr.id !1546, !verifier.code !63 */
  call $i1034 := FStar_UInt128_uint128_to_uint64($i1031, $i1033);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 56} true;
  assume {:verifier.code 0} true;
  /* %1036 = and i64 %1035, 2251799813685247, !dbg !1547, !psr.id !1548, !verifier.code !63 */
  $i1035 := $and.i64($i1034, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1036, metadata !5818, metadata !DIExpression()), !dbg !4504, !psr.id !5819, !verifier.code !64 */
  call {:cexpr "tmp0"} boogie_si_record_i64($i1035);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %1029, i128* %139, align 16, !dbg !1551, !psr.id !1552, !verifier.code !63 */
  $M.364 := $store.i128($M.364, $p138, $i1028);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* %1037 = bitcast i128* %139 to { i64, i64 }*, !dbg !1551, !psr.id !1553, !verifier.code !63 */
  $p1036 := $bitcast.ref.ref($p138);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* %1038 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1037, i32 0, i32 0, !dbg !1551, !psr.id !1554, !verifier.code !63 */
  $p1037 := $add.ref($add.ref($p1036, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* %1039 = load i64, i64* %1038, align 16, !dbg !1551, !psr.id !1555, !verifier.code !63 */
  $i1038 := $load.i64($M.364, $p1037);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* %1040 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1037, i32 0, i32 1, !dbg !1551, !psr.id !1556, !verifier.code !63 */
  $p1039 := $add.ref($add.ref($p1036, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* %1041 = load i64, i64* %1040, align 8, !dbg !1551, !psr.id !1557, !verifier.code !63 */
  $i1040 := $load.i64($M.364, $p1039);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* %1042 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1039, i64 %1041, i32 51), !dbg !1551, !psr.id !1558, !verifier.code !63 */
  call $p1041 := FStar_UInt128_shift_right($i1038, $i1040, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* %1043 = bitcast i128* %140 to { i64, i64 }*, !dbg !1551, !psr.id !1559, !verifier.code !63 */
  $p1042 := $bitcast.ref.ref($p139);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* %1044 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1043, i32 0, i32 0, !dbg !1551, !psr.id !1560, !verifier.code !63 */
  $p1043 := $add.ref($add.ref($p1042, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* %1045 = extractvalue { i64, i64 } %1042, 0, !dbg !1551, !psr.id !1561, !verifier.code !63 */
  $i1044 := $extractvalue.i64($p1041, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1045, i64* %1044, align 16, !dbg !1551, !psr.id !1562, !verifier.code !63 */
  $M.365 := $store.i64($M.365, $p1043, $i1044);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* %1046 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1043, i32 0, i32 1, !dbg !1551, !psr.id !1563, !verifier.code !63 */
  $p1045 := $add.ref($add.ref($p1042, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* %1047 = extractvalue { i64, i64 } %1042, 1, !dbg !1551, !psr.id !1564, !verifier.code !63 */
  $i1046 := $extractvalue.i64($p1041, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1047, i64* %1046, align 8, !dbg !1551, !psr.id !1565, !verifier.code !63 */
  $M.365 := $store.i64($M.365, $p1045, $i1046);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  /* %1048 = load i128, i128* %140, align 16, !dbg !1551, !psr.id !1566, !verifier.code !63 */
  $i1047 := $load.i128($M.365, $p139);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %1048, i128* %141, align 16, !dbg !1567, !psr.id !1568, !verifier.code !63 */
  $M.366 := $store.i128($M.366, $p140, $i1047);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  /* %1049 = bitcast i128* %141 to { i64, i64 }*, !dbg !1567, !psr.id !1569, !verifier.code !63 */
  $p1048 := $bitcast.ref.ref($p140);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  /* %1050 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1049, i32 0, i32 0, !dbg !1567, !psr.id !1570, !verifier.code !63 */
  $p1049 := $add.ref($add.ref($p1048, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  /* %1051 = load i64, i64* %1050, align 16, !dbg !1567, !psr.id !1571, !verifier.code !63 */
  $i1050 := $load.i64($M.366, $p1049);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  /* %1052 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1049, i32 0, i32 1, !dbg !1567, !psr.id !1572, !verifier.code !63 */
  $p1051 := $add.ref($add.ref($p1048, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  /* %1053 = load i64, i64* %1052, align 8, !dbg !1567, !psr.id !1573, !verifier.code !63 */
  $i1052 := $load.i64($M.366, $p1051);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  /* %1054 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1051, i64 %1053), !dbg !1567, !psr.id !1574, !verifier.code !63 */
  call $i1053 := FStar_UInt128_uint128_to_uint64($i1050, $i1052);
  /* call void @llvm.dbg.value(metadata i64 %1054, metadata !5844, metadata !DIExpression()), !dbg !4504, !psr.id !5845, !verifier.code !64 */
  call {:cexpr "c0"} boogie_si_record_i64($i1053);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  /* %1055 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %1054), !dbg !1577, !psr.id !1578, !verifier.code !63 */
  call $p1054 := FStar_UInt128_uint64_to_uint128($i1053);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  /* %1056 = bitcast i128* %142 to { i64, i64 }*, !dbg !1577, !psr.id !1579, !verifier.code !63 */
  $p1055 := $bitcast.ref.ref($p141);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  /* %1057 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1056, i32 0, i32 0, !dbg !1577, !psr.id !1580, !verifier.code !63 */
  $p1056 := $add.ref($add.ref($p1055, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  /* %1058 = extractvalue { i64, i64 } %1055, 0, !dbg !1577, !psr.id !1581, !verifier.code !63 */
  $i1057 := $extractvalue.i64($p1054, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %1058, i64* %1057, align 16, !dbg !1577, !psr.id !1582, !verifier.code !63 */
  $M.367 := $store.i64($M.367, $p1056, $i1057);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  /* %1059 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1056, i32 0, i32 1, !dbg !1577, !psr.id !1583, !verifier.code !63 */
  $p1058 := $add.ref($add.ref($p1055, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  /* %1060 = extractvalue { i64, i64 } %1055, 1, !dbg !1577, !psr.id !1584, !verifier.code !63 */
  $i1059 := $extractvalue.i64($p1054, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %1060, i64* %1059, align 8, !dbg !1577, !psr.id !1585, !verifier.code !63 */
  $M.367 := $store.i64($M.367, $p1058, $i1059);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  /* %1061 = load i128, i128* %142, align 16, !dbg !1577, !psr.id !1586, !verifier.code !63 */
  $i1060 := $load.i128($M.367, $p141);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %590, i128* %143, align 16, !dbg !1587, !psr.id !1588, !verifier.code !63 */
  $M.368 := $store.i128($M.368, $p142, $i589);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1062 = bitcast i128* %143 to { i64, i64 }*, !dbg !1587, !psr.id !1589, !verifier.code !63 */
  $p1061 := $bitcast.ref.ref($p142);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1063 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1062, i32 0, i32 0, !dbg !1587, !psr.id !1590, !verifier.code !63 */
  $p1062 := $add.ref($add.ref($p1061, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1064 = load i64, i64* %1063, align 16, !dbg !1587, !psr.id !1591, !verifier.code !63 */
  $i1063 := $load.i64($M.368, $p1062);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1065 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1062, i32 0, i32 1, !dbg !1587, !psr.id !1592, !verifier.code !63 */
  $p1064 := $add.ref($add.ref($p1061, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1066 = load i64, i64* %1065, align 8, !dbg !1587, !psr.id !1593, !verifier.code !63 */
  $i1065 := $load.i64($M.368, $p1064);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1061, i128* %144, align 16, !dbg !1587, !psr.id !1594, !verifier.code !63 */
  $M.369 := $store.i128($M.369, $p143, $i1060);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1067 = bitcast i128* %144 to { i64, i64 }*, !dbg !1587, !psr.id !1595, !verifier.code !63 */
  $p1066 := $bitcast.ref.ref($p143);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1068 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1067, i32 0, i32 0, !dbg !1587, !psr.id !1596, !verifier.code !63 */
  $p1067 := $add.ref($add.ref($p1066, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1069 = load i64, i64* %1068, align 16, !dbg !1587, !psr.id !1597, !verifier.code !63 */
  $i1068 := $load.i64($M.369, $p1067);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1070 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1067, i32 0, i32 1, !dbg !1587, !psr.id !1598, !verifier.code !63 */
  $p1069 := $add.ref($add.ref($p1066, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1071 = load i64, i64* %1070, align 8, !dbg !1587, !psr.id !1599, !verifier.code !63 */
  $i1070 := $load.i64($M.369, $p1069);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1072 = call { i64, i64 } @FStar_UInt128_add(i64 %1064, i64 %1066, i64 %1069, i64 %1071), !dbg !1587, !psr.id !1600, !verifier.code !63 */
  call $p1071 := FStar_UInt128_add($i1063, $i1065, $i1068, $i1070);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1073 = bitcast i128* %145 to { i64, i64 }*, !dbg !1587, !psr.id !1601, !verifier.code !63 */
  $p1072 := $bitcast.ref.ref($p144);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1074 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1073, i32 0, i32 0, !dbg !1587, !psr.id !1602, !verifier.code !63 */
  $p1073 := $add.ref($add.ref($p1072, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1075 = extractvalue { i64, i64 } %1072, 0, !dbg !1587, !psr.id !1603, !verifier.code !63 */
  $i1074 := $extractvalue.i64($p1071, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1075, i64* %1074, align 16, !dbg !1587, !psr.id !1604, !verifier.code !63 */
  $M.370 := $store.i64($M.370, $p1073, $i1074);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1076 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1073, i32 0, i32 1, !dbg !1587, !psr.id !1605, !verifier.code !63 */
  $p1075 := $add.ref($add.ref($p1072, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1077 = extractvalue { i64, i64 } %1072, 1, !dbg !1587, !psr.id !1606, !verifier.code !63 */
  $i1076 := $extractvalue.i64($p1071, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1077, i64* %1076, align 8, !dbg !1587, !psr.id !1607, !verifier.code !63 */
  $M.370 := $store.i64($M.370, $p1075, $i1076);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  /* %1078 = load i128, i128* %145, align 16, !dbg !1587, !psr.id !1608, !verifier.code !63 */
  $i1077 := $load.i128($M.370, $p144);
  /* call void @llvm.dbg.value(metadata i128 %1078, metadata !5878, metadata !DIExpression()), !dbg !4504, !psr.id !5879, !verifier.code !64 */
  call {:cexpr "l_6"} boogie_si_record_i128($i1077);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %1078, i128* %146, align 16, !dbg !1611, !psr.id !1612, !verifier.code !63 */
  $M.371 := $store.i128($M.371, $p145, $i1077);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  /* %1079 = bitcast i128* %146 to { i64, i64 }*, !dbg !1611, !psr.id !1613, !verifier.code !63 */
  $p1078 := $bitcast.ref.ref($p145);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  /* %1080 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1079, i32 0, i32 0, !dbg !1611, !psr.id !1614, !verifier.code !63 */
  $p1079 := $add.ref($add.ref($p1078, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  /* %1081 = load i64, i64* %1080, align 16, !dbg !1611, !psr.id !1615, !verifier.code !63 */
  $i1080 := $load.i64($M.371, $p1079);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  /* %1082 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1079, i32 0, i32 1, !dbg !1611, !psr.id !1616, !verifier.code !63 */
  $p1081 := $add.ref($add.ref($p1078, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  /* %1083 = load i64, i64* %1082, align 8, !dbg !1611, !psr.id !1617, !verifier.code !63 */
  $i1082 := $load.i64($M.371, $p1081);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  /* %1084 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1081, i64 %1083), !dbg !1611, !psr.id !1618, !verifier.code !63 */
  call $i1083 := FStar_UInt128_uint128_to_uint64($i1080, $i1082);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 56} true;
  assume {:verifier.code 0} true;
  /* %1085 = and i64 %1084, 2251799813685247, !dbg !1619, !psr.id !1620, !verifier.code !63 */
  $i1084 := $and.i64($i1083, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1085, metadata !5890, metadata !DIExpression()), !dbg !4504, !psr.id !5891, !verifier.code !64 */
  call {:cexpr "tmp1"} boogie_si_record_i64($i1084);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %1078, i128* %147, align 16, !dbg !1623, !psr.id !1624, !verifier.code !63 */
  $M.372 := $store.i128($M.372, $p146, $i1077);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* %1086 = bitcast i128* %147 to { i64, i64 }*, !dbg !1623, !psr.id !1625, !verifier.code !63 */
  $p1085 := $bitcast.ref.ref($p146);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* %1087 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1086, i32 0, i32 0, !dbg !1623, !psr.id !1626, !verifier.code !63 */
  $p1086 := $add.ref($add.ref($p1085, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* %1088 = load i64, i64* %1087, align 16, !dbg !1623, !psr.id !1627, !verifier.code !63 */
  $i1087 := $load.i64($M.372, $p1086);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* %1089 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1086, i32 0, i32 1, !dbg !1623, !psr.id !1628, !verifier.code !63 */
  $p1088 := $add.ref($add.ref($p1085, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* %1090 = load i64, i64* %1089, align 8, !dbg !1623, !psr.id !1629, !verifier.code !63 */
  $i1089 := $load.i64($M.372, $p1088);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* %1091 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1088, i64 %1090, i32 51), !dbg !1623, !psr.id !1630, !verifier.code !63 */
  call $p1090 := FStar_UInt128_shift_right($i1087, $i1089, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* %1092 = bitcast i128* %148 to { i64, i64 }*, !dbg !1623, !psr.id !1631, !verifier.code !63 */
  $p1091 := $bitcast.ref.ref($p147);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* %1093 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1092, i32 0, i32 0, !dbg !1623, !psr.id !1632, !verifier.code !63 */
  $p1092 := $add.ref($add.ref($p1091, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* %1094 = extractvalue { i64, i64 } %1091, 0, !dbg !1623, !psr.id !1633, !verifier.code !63 */
  $i1093 := $extractvalue.i64($p1090, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1094, i64* %1093, align 16, !dbg !1623, !psr.id !1634, !verifier.code !63 */
  $M.373 := $store.i64($M.373, $p1092, $i1093);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* %1095 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1092, i32 0, i32 1, !dbg !1623, !psr.id !1635, !verifier.code !63 */
  $p1094 := $add.ref($add.ref($p1091, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* %1096 = extractvalue { i64, i64 } %1091, 1, !dbg !1623, !psr.id !1636, !verifier.code !63 */
  $i1095 := $extractvalue.i64($p1090, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1096, i64* %1095, align 8, !dbg !1623, !psr.id !1637, !verifier.code !63 */
  $M.373 := $store.i64($M.373, $p1094, $i1095);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  /* %1097 = load i128, i128* %148, align 16, !dbg !1623, !psr.id !1638, !verifier.code !63 */
  $i1096 := $load.i128($M.373, $p147);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %1097, i128* %149, align 16, !dbg !1639, !psr.id !1640, !verifier.code !63 */
  $M.374 := $store.i128($M.374, $p148, $i1096);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  /* %1098 = bitcast i128* %149 to { i64, i64 }*, !dbg !1639, !psr.id !1641, !verifier.code !63 */
  $p1097 := $bitcast.ref.ref($p148);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  /* %1099 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1098, i32 0, i32 0, !dbg !1639, !psr.id !1642, !verifier.code !63 */
  $p1098 := $add.ref($add.ref($p1097, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  /* %1100 = load i64, i64* %1099, align 16, !dbg !1639, !psr.id !1643, !verifier.code !63 */
  $i1099 := $load.i64($M.374, $p1098);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  /* %1101 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1098, i32 0, i32 1, !dbg !1639, !psr.id !1644, !verifier.code !63 */
  $p1100 := $add.ref($add.ref($p1097, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  /* %1102 = load i64, i64* %1101, align 8, !dbg !1639, !psr.id !1645, !verifier.code !63 */
  $i1101 := $load.i64($M.374, $p1100);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  /* %1103 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1100, i64 %1102), !dbg !1639, !psr.id !1646, !verifier.code !63 */
  call $i1102 := FStar_UInt128_uint128_to_uint64($i1099, $i1101);
  /* call void @llvm.dbg.value(metadata i64 %1103, metadata !5916, metadata !DIExpression()), !dbg !4504, !psr.id !5917, !verifier.code !64 */
  call {:cexpr "c1"} boogie_si_record_i64($i1102);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  /* %1104 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %1103), !dbg !1649, !psr.id !1650, !verifier.code !63 */
  call $p1103 := FStar_UInt128_uint64_to_uint128($i1102);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  /* %1105 = bitcast i128* %150 to { i64, i64 }*, !dbg !1649, !psr.id !1651, !verifier.code !63 */
  $p1104 := $bitcast.ref.ref($p149);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  /* %1106 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1105, i32 0, i32 0, !dbg !1649, !psr.id !1652, !verifier.code !63 */
  $p1105 := $add.ref($add.ref($p1104, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  /* %1107 = extractvalue { i64, i64 } %1104, 0, !dbg !1649, !psr.id !1653, !verifier.code !63 */
  $i1106 := $extractvalue.i64($p1103, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %1107, i64* %1106, align 16, !dbg !1649, !psr.id !1654, !verifier.code !63 */
  $M.375 := $store.i64($M.375, $p1105, $i1106);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  /* %1108 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1105, i32 0, i32 1, !dbg !1649, !psr.id !1655, !verifier.code !63 */
  $p1107 := $add.ref($add.ref($p1104, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  /* %1109 = extractvalue { i64, i64 } %1104, 1, !dbg !1649, !psr.id !1656, !verifier.code !63 */
  $i1108 := $extractvalue.i64($p1103, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %1109, i64* %1108, align 8, !dbg !1649, !psr.id !1657, !verifier.code !63 */
  $M.375 := $store.i64($M.375, $p1107, $i1108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  /* %1110 = load i128, i128* %150, align 16, !dbg !1649, !psr.id !1658, !verifier.code !63 */
  $i1109 := $load.i128($M.375, $p149);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %645, i128* %151, align 16, !dbg !1659, !psr.id !1660, !verifier.code !63 */
  $M.376 := $store.i128($M.376, $p150, $i644);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1111 = bitcast i128* %151 to { i64, i64 }*, !dbg !1659, !psr.id !1661, !verifier.code !63 */
  $p1110 := $bitcast.ref.ref($p150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1112 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1111, i32 0, i32 0, !dbg !1659, !psr.id !1662, !verifier.code !63 */
  $p1111 := $add.ref($add.ref($p1110, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1113 = load i64, i64* %1112, align 16, !dbg !1659, !psr.id !1663, !verifier.code !63 */
  $i1112 := $load.i64($M.376, $p1111);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1114 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1111, i32 0, i32 1, !dbg !1659, !psr.id !1664, !verifier.code !63 */
  $p1113 := $add.ref($add.ref($p1110, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1115 = load i64, i64* %1114, align 8, !dbg !1659, !psr.id !1665, !verifier.code !63 */
  $i1114 := $load.i64($M.376, $p1113);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1110, i128* %152, align 16, !dbg !1659, !psr.id !1666, !verifier.code !63 */
  $M.377 := $store.i128($M.377, $p151, $i1109);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1116 = bitcast i128* %152 to { i64, i64 }*, !dbg !1659, !psr.id !1667, !verifier.code !63 */
  $p1115 := $bitcast.ref.ref($p151);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1117 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1116, i32 0, i32 0, !dbg !1659, !psr.id !1668, !verifier.code !63 */
  $p1116 := $add.ref($add.ref($p1115, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1118 = load i64, i64* %1117, align 16, !dbg !1659, !psr.id !1669, !verifier.code !63 */
  $i1117 := $load.i64($M.377, $p1116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1119 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1116, i32 0, i32 1, !dbg !1659, !psr.id !1670, !verifier.code !63 */
  $p1118 := $add.ref($add.ref($p1115, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1120 = load i64, i64* %1119, align 8, !dbg !1659, !psr.id !1671, !verifier.code !63 */
  $i1119 := $load.i64($M.377, $p1118);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1121 = call { i64, i64 } @FStar_UInt128_add(i64 %1113, i64 %1115, i64 %1118, i64 %1120), !dbg !1659, !psr.id !1672, !verifier.code !63 */
  call $p1120 := FStar_UInt128_add($i1112, $i1114, $i1117, $i1119);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1122 = bitcast i128* %153 to { i64, i64 }*, !dbg !1659, !psr.id !1673, !verifier.code !63 */
  $p1121 := $bitcast.ref.ref($p152);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1123 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1122, i32 0, i32 0, !dbg !1659, !psr.id !1674, !verifier.code !63 */
  $p1122 := $add.ref($add.ref($p1121, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1124 = extractvalue { i64, i64 } %1121, 0, !dbg !1659, !psr.id !1675, !verifier.code !63 */
  $i1123 := $extractvalue.i64($p1120, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1124, i64* %1123, align 16, !dbg !1659, !psr.id !1676, !verifier.code !63 */
  $M.378 := $store.i64($M.378, $p1122, $i1123);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1125 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1122, i32 0, i32 1, !dbg !1659, !psr.id !1677, !verifier.code !63 */
  $p1124 := $add.ref($add.ref($p1121, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1126 = extractvalue { i64, i64 } %1121, 1, !dbg !1659, !psr.id !1678, !verifier.code !63 */
  $i1125 := $extractvalue.i64($p1120, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1126, i64* %1125, align 8, !dbg !1659, !psr.id !1679, !verifier.code !63 */
  $M.378 := $store.i64($M.378, $p1124, $i1125);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  /* %1127 = load i128, i128* %153, align 16, !dbg !1659, !psr.id !1680, !verifier.code !63 */
  $i1126 := $load.i128($M.378, $p152);
  /* call void @llvm.dbg.value(metadata i128 %1127, metadata !5950, metadata !DIExpression()), !dbg !4504, !psr.id !5951, !verifier.code !64 */
  call {:cexpr "l_7"} boogie_si_record_i128($i1126);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %1127, i128* %154, align 16, !dbg !1683, !psr.id !1684, !verifier.code !63 */
  $M.379 := $store.i128($M.379, $p153, $i1126);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  /* %1128 = bitcast i128* %154 to { i64, i64 }*, !dbg !1683, !psr.id !1685, !verifier.code !63 */
  $p1127 := $bitcast.ref.ref($p153);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  /* %1129 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1128, i32 0, i32 0, !dbg !1683, !psr.id !1686, !verifier.code !63 */
  $p1128 := $add.ref($add.ref($p1127, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  /* %1130 = load i64, i64* %1129, align 16, !dbg !1683, !psr.id !1687, !verifier.code !63 */
  $i1129 := $load.i64($M.379, $p1128);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  /* %1131 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1128, i32 0, i32 1, !dbg !1683, !psr.id !1688, !verifier.code !63 */
  $p1130 := $add.ref($add.ref($p1127, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  /* %1132 = load i64, i64* %1131, align 8, !dbg !1683, !psr.id !1689, !verifier.code !63 */
  $i1131 := $load.i64($M.379, $p1130);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  /* %1133 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1130, i64 %1132), !dbg !1683, !psr.id !1690, !verifier.code !63 */
  call $i1132 := FStar_UInt128_uint128_to_uint64($i1129, $i1131);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 56} true;
  assume {:verifier.code 0} true;
  /* %1134 = and i64 %1133, 2251799813685247, !dbg !1691, !psr.id !1692, !verifier.code !63 */
  $i1133 := $and.i64($i1132, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1134, metadata !5962, metadata !DIExpression()), !dbg !4504, !psr.id !5963, !verifier.code !64 */
  call {:cexpr "tmp2"} boogie_si_record_i64($i1133);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %1127, i128* %155, align 16, !dbg !1695, !psr.id !1696, !verifier.code !63 */
  $M.380 := $store.i128($M.380, $p154, $i1126);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* %1135 = bitcast i128* %155 to { i64, i64 }*, !dbg !1695, !psr.id !1697, !verifier.code !63 */
  $p1134 := $bitcast.ref.ref($p154);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* %1136 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1135, i32 0, i32 0, !dbg !1695, !psr.id !1698, !verifier.code !63 */
  $p1135 := $add.ref($add.ref($p1134, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* %1137 = load i64, i64* %1136, align 16, !dbg !1695, !psr.id !1699, !verifier.code !63 */
  $i1136 := $load.i64($M.380, $p1135);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* %1138 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1135, i32 0, i32 1, !dbg !1695, !psr.id !1700, !verifier.code !63 */
  $p1137 := $add.ref($add.ref($p1134, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* %1139 = load i64, i64* %1138, align 8, !dbg !1695, !psr.id !1701, !verifier.code !63 */
  $i1138 := $load.i64($M.380, $p1137);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* %1140 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1137, i64 %1139, i32 51), !dbg !1695, !psr.id !1702, !verifier.code !63 */
  call $p1139 := FStar_UInt128_shift_right($i1136, $i1138, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* %1141 = bitcast i128* %156 to { i64, i64 }*, !dbg !1695, !psr.id !1703, !verifier.code !63 */
  $p1140 := $bitcast.ref.ref($p155);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* %1142 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1141, i32 0, i32 0, !dbg !1695, !psr.id !1704, !verifier.code !63 */
  $p1141 := $add.ref($add.ref($p1140, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* %1143 = extractvalue { i64, i64 } %1140, 0, !dbg !1695, !psr.id !1705, !verifier.code !63 */
  $i1142 := $extractvalue.i64($p1139, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1143, i64* %1142, align 16, !dbg !1695, !psr.id !1706, !verifier.code !63 */
  $M.381 := $store.i64($M.381, $p1141, $i1142);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* %1144 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1141, i32 0, i32 1, !dbg !1695, !psr.id !1707, !verifier.code !63 */
  $p1143 := $add.ref($add.ref($p1140, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* %1145 = extractvalue { i64, i64 } %1140, 1, !dbg !1695, !psr.id !1708, !verifier.code !63 */
  $i1144 := $extractvalue.i64($p1139, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1145, i64* %1144, align 8, !dbg !1695, !psr.id !1709, !verifier.code !63 */
  $M.381 := $store.i64($M.381, $p1143, $i1144);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  /* %1146 = load i128, i128* %156, align 16, !dbg !1695, !psr.id !1710, !verifier.code !63 */
  $i1145 := $load.i128($M.381, $p155);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %1146, i128* %157, align 16, !dbg !1711, !psr.id !1712, !verifier.code !63 */
  $M.382 := $store.i128($M.382, $p156, $i1145);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  /* %1147 = bitcast i128* %157 to { i64, i64 }*, !dbg !1711, !psr.id !1713, !verifier.code !63 */
  $p1146 := $bitcast.ref.ref($p156);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  /* %1148 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1147, i32 0, i32 0, !dbg !1711, !psr.id !1714, !verifier.code !63 */
  $p1147 := $add.ref($add.ref($p1146, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  /* %1149 = load i64, i64* %1148, align 16, !dbg !1711, !psr.id !1715, !verifier.code !63 */
  $i1148 := $load.i64($M.382, $p1147);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  /* %1150 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1147, i32 0, i32 1, !dbg !1711, !psr.id !1716, !verifier.code !63 */
  $p1149 := $add.ref($add.ref($p1146, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  /* %1151 = load i64, i64* %1150, align 8, !dbg !1711, !psr.id !1717, !verifier.code !63 */
  $i1150 := $load.i64($M.382, $p1149);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  /* %1152 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1149, i64 %1151), !dbg !1711, !psr.id !1718, !verifier.code !63 */
  call $i1151 := FStar_UInt128_uint128_to_uint64($i1148, $i1150);
  /* call void @llvm.dbg.value(metadata i64 %1152, metadata !5988, metadata !DIExpression()), !dbg !4504, !psr.id !5989, !verifier.code !64 */
  call {:cexpr "c2"} boogie_si_record_i64($i1151);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  /* %1153 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %1152), !dbg !1721, !psr.id !1722, !verifier.code !63 */
  call $p1152 := FStar_UInt128_uint64_to_uint128($i1151);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  /* %1154 = bitcast i128* %158 to { i64, i64 }*, !dbg !1721, !psr.id !1723, !verifier.code !63 */
  $p1153 := $bitcast.ref.ref($p157);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  /* %1155 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1154, i32 0, i32 0, !dbg !1721, !psr.id !1724, !verifier.code !63 */
  $p1154 := $add.ref($add.ref($p1153, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  /* %1156 = extractvalue { i64, i64 } %1153, 0, !dbg !1721, !psr.id !1725, !verifier.code !63 */
  $i1155 := $extractvalue.i64($p1152, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %1156, i64* %1155, align 16, !dbg !1721, !psr.id !1726, !verifier.code !63 */
  $M.383 := $store.i64($M.383, $p1154, $i1155);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  /* %1157 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1154, i32 0, i32 1, !dbg !1721, !psr.id !1727, !verifier.code !63 */
  $p1156 := $add.ref($add.ref($p1153, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  /* %1158 = extractvalue { i64, i64 } %1153, 1, !dbg !1721, !psr.id !1728, !verifier.code !63 */
  $i1157 := $extractvalue.i64($p1152, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %1158, i64* %1157, align 8, !dbg !1721, !psr.id !1729, !verifier.code !63 */
  $M.383 := $store.i64($M.383, $p1156, $i1157);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  /* %1159 = load i128, i128* %158, align 16, !dbg !1721, !psr.id !1730, !verifier.code !63 */
  $i1158 := $load.i128($M.383, $p157);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %700, i128* %159, align 16, !dbg !1731, !psr.id !1732, !verifier.code !63 */
  $M.384 := $store.i128($M.384, $p158, $i699);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1160 = bitcast i128* %159 to { i64, i64 }*, !dbg !1731, !psr.id !1733, !verifier.code !63 */
  $p1159 := $bitcast.ref.ref($p158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1161 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1160, i32 0, i32 0, !dbg !1731, !psr.id !1734, !verifier.code !63 */
  $p1160 := $add.ref($add.ref($p1159, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1162 = load i64, i64* %1161, align 16, !dbg !1731, !psr.id !1735, !verifier.code !63 */
  $i1161 := $load.i64($M.384, $p1160);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1163 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1160, i32 0, i32 1, !dbg !1731, !psr.id !1736, !verifier.code !63 */
  $p1162 := $add.ref($add.ref($p1159, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1164 = load i64, i64* %1163, align 8, !dbg !1731, !psr.id !1737, !verifier.code !63 */
  $i1163 := $load.i64($M.384, $p1162);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1159, i128* %160, align 16, !dbg !1731, !psr.id !1738, !verifier.code !63 */
  $M.385 := $store.i128($M.385, $p159, $i1158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1165 = bitcast i128* %160 to { i64, i64 }*, !dbg !1731, !psr.id !1739, !verifier.code !63 */
  $p1164 := $bitcast.ref.ref($p159);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1166 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1165, i32 0, i32 0, !dbg !1731, !psr.id !1740, !verifier.code !63 */
  $p1165 := $add.ref($add.ref($p1164, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1167 = load i64, i64* %1166, align 16, !dbg !1731, !psr.id !1741, !verifier.code !63 */
  $i1166 := $load.i64($M.385, $p1165);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1168 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1165, i32 0, i32 1, !dbg !1731, !psr.id !1742, !verifier.code !63 */
  $p1167 := $add.ref($add.ref($p1164, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1169 = load i64, i64* %1168, align 8, !dbg !1731, !psr.id !1743, !verifier.code !63 */
  $i1168 := $load.i64($M.385, $p1167);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1170 = call { i64, i64 } @FStar_UInt128_add(i64 %1162, i64 %1164, i64 %1167, i64 %1169), !dbg !1731, !psr.id !1744, !verifier.code !63 */
  call $p1169 := FStar_UInt128_add($i1161, $i1163, $i1166, $i1168);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1171 = bitcast i128* %161 to { i64, i64 }*, !dbg !1731, !psr.id !1745, !verifier.code !63 */
  $p1170 := $bitcast.ref.ref($p160);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1172 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1171, i32 0, i32 0, !dbg !1731, !psr.id !1746, !verifier.code !63 */
  $p1171 := $add.ref($add.ref($p1170, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1173 = extractvalue { i64, i64 } %1170, 0, !dbg !1731, !psr.id !1747, !verifier.code !63 */
  $i1172 := $extractvalue.i64($p1169, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1173, i64* %1172, align 16, !dbg !1731, !psr.id !1748, !verifier.code !63 */
  $M.386 := $store.i64($M.386, $p1171, $i1172);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1174 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1171, i32 0, i32 1, !dbg !1731, !psr.id !1749, !verifier.code !63 */
  $p1173 := $add.ref($add.ref($p1170, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1175 = extractvalue { i64, i64 } %1170, 1, !dbg !1731, !psr.id !1750, !verifier.code !63 */
  $i1174 := $extractvalue.i64($p1169, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1175, i64* %1174, align 8, !dbg !1731, !psr.id !1751, !verifier.code !63 */
  $M.386 := $store.i64($M.386, $p1173, $i1174);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  /* %1176 = load i128, i128* %161, align 16, !dbg !1731, !psr.id !1752, !verifier.code !63 */
  $i1175 := $load.i128($M.386, $p160);
  /* call void @llvm.dbg.value(metadata i128 %1176, metadata !6022, metadata !DIExpression()), !dbg !4504, !psr.id !6023, !verifier.code !64 */
  call {:cexpr "l_8"} boogie_si_record_i128($i1175);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %1176, i128* %162, align 16, !dbg !1755, !psr.id !1756, !verifier.code !63 */
  $M.387 := $store.i128($M.387, $p161, $i1175);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  /* %1177 = bitcast i128* %162 to { i64, i64 }*, !dbg !1755, !psr.id !1757, !verifier.code !63 */
  $p1176 := $bitcast.ref.ref($p161);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  /* %1178 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1177, i32 0, i32 0, !dbg !1755, !psr.id !1758, !verifier.code !63 */
  $p1177 := $add.ref($add.ref($p1176, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  /* %1179 = load i64, i64* %1178, align 16, !dbg !1755, !psr.id !1759, !verifier.code !63 */
  $i1178 := $load.i64($M.387, $p1177);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  /* %1180 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1177, i32 0, i32 1, !dbg !1755, !psr.id !1760, !verifier.code !63 */
  $p1179 := $add.ref($add.ref($p1176, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  /* %1181 = load i64, i64* %1180, align 8, !dbg !1755, !psr.id !1761, !verifier.code !63 */
  $i1180 := $load.i64($M.387, $p1179);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  /* %1182 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1179, i64 %1181), !dbg !1755, !psr.id !1762, !verifier.code !63 */
  call $i1181 := FStar_UInt128_uint128_to_uint64($i1178, $i1180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 56} true;
  assume {:verifier.code 0} true;
  /* %1183 = and i64 %1182, 2251799813685247, !dbg !1763, !psr.id !1764, !verifier.code !63 */
  $i1182 := $and.i64($i1181, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1183, metadata !6034, metadata !DIExpression()), !dbg !4504, !psr.id !6035, !verifier.code !64 */
  call {:cexpr "tmp3"} boogie_si_record_i64($i1182);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %1176, i128* %163, align 16, !dbg !1767, !psr.id !1768, !verifier.code !63 */
  $M.388 := $store.i128($M.388, $p162, $i1175);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* %1184 = bitcast i128* %163 to { i64, i64 }*, !dbg !1767, !psr.id !1769, !verifier.code !63 */
  $p1183 := $bitcast.ref.ref($p162);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* %1185 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1184, i32 0, i32 0, !dbg !1767, !psr.id !1770, !verifier.code !63 */
  $p1184 := $add.ref($add.ref($p1183, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* %1186 = load i64, i64* %1185, align 16, !dbg !1767, !psr.id !1771, !verifier.code !63 */
  $i1185 := $load.i64($M.388, $p1184);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* %1187 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1184, i32 0, i32 1, !dbg !1767, !psr.id !1772, !verifier.code !63 */
  $p1186 := $add.ref($add.ref($p1183, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* %1188 = load i64, i64* %1187, align 8, !dbg !1767, !psr.id !1773, !verifier.code !63 */
  $i1187 := $load.i64($M.388, $p1186);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* %1189 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1186, i64 %1188, i32 51), !dbg !1767, !psr.id !1774, !verifier.code !63 */
  call $p1188 := FStar_UInt128_shift_right($i1185, $i1187, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* %1190 = bitcast i128* %164 to { i64, i64 }*, !dbg !1767, !psr.id !1775, !verifier.code !63 */
  $p1189 := $bitcast.ref.ref($p163);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* %1191 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1190, i32 0, i32 0, !dbg !1767, !psr.id !1776, !verifier.code !63 */
  $p1190 := $add.ref($add.ref($p1189, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* %1192 = extractvalue { i64, i64 } %1189, 0, !dbg !1767, !psr.id !1777, !verifier.code !63 */
  $i1191 := $extractvalue.i64($p1188, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1192, i64* %1191, align 16, !dbg !1767, !psr.id !1778, !verifier.code !63 */
  $M.389 := $store.i64($M.389, $p1190, $i1191);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* %1193 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1190, i32 0, i32 1, !dbg !1767, !psr.id !1779, !verifier.code !63 */
  $p1192 := $add.ref($add.ref($p1189, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* %1194 = extractvalue { i64, i64 } %1189, 1, !dbg !1767, !psr.id !1780, !verifier.code !63 */
  $i1193 := $extractvalue.i64($p1188, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1194, i64* %1193, align 8, !dbg !1767, !psr.id !1781, !verifier.code !63 */
  $M.389 := $store.i64($M.389, $p1192, $i1193);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  /* %1195 = load i128, i128* %164, align 16, !dbg !1767, !psr.id !1782, !verifier.code !63 */
  $i1194 := $load.i128($M.389, $p163);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %1195, i128* %165, align 16, !dbg !1783, !psr.id !1784, !verifier.code !63 */
  $M.390 := $store.i128($M.390, $p164, $i1194);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  /* %1196 = bitcast i128* %165 to { i64, i64 }*, !dbg !1783, !psr.id !1785, !verifier.code !63 */
  $p1195 := $bitcast.ref.ref($p164);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  /* %1197 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1196, i32 0, i32 0, !dbg !1783, !psr.id !1786, !verifier.code !63 */
  $p1196 := $add.ref($add.ref($p1195, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  /* %1198 = load i64, i64* %1197, align 16, !dbg !1783, !psr.id !1787, !verifier.code !63 */
  $i1197 := $load.i64($M.390, $p1196);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  /* %1199 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1196, i32 0, i32 1, !dbg !1783, !psr.id !1788, !verifier.code !63 */
  $p1198 := $add.ref($add.ref($p1195, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  /* %1200 = load i64, i64* %1199, align 8, !dbg !1783, !psr.id !1789, !verifier.code !63 */
  $i1199 := $load.i64($M.390, $p1198);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  /* %1201 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1198, i64 %1200), !dbg !1783, !psr.id !1790, !verifier.code !63 */
  call $i1200 := FStar_UInt128_uint128_to_uint64($i1197, $i1199);
  /* call void @llvm.dbg.value(metadata i64 %1201, metadata !6060, metadata !DIExpression()), !dbg !4504, !psr.id !6061, !verifier.code !64 */
  call {:cexpr "c3"} boogie_si_record_i64($i1200);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  /* %1202 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %1201), !dbg !1793, !psr.id !1794, !verifier.code !63 */
  call $p1201 := FStar_UInt128_uint64_to_uint128($i1200);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  /* %1203 = bitcast i128* %166 to { i64, i64 }*, !dbg !1793, !psr.id !1795, !verifier.code !63 */
  $p1202 := $bitcast.ref.ref($p165);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  /* %1204 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1203, i32 0, i32 0, !dbg !1793, !psr.id !1796, !verifier.code !63 */
  $p1203 := $add.ref($add.ref($p1202, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  /* %1205 = extractvalue { i64, i64 } %1202, 0, !dbg !1793, !psr.id !1797, !verifier.code !63 */
  $i1204 := $extractvalue.i64($p1201, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %1205, i64* %1204, align 16, !dbg !1793, !psr.id !1798, !verifier.code !63 */
  $M.391 := $store.i64($M.391, $p1203, $i1204);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  /* %1206 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1203, i32 0, i32 1, !dbg !1793, !psr.id !1799, !verifier.code !63 */
  $p1205 := $add.ref($add.ref($p1202, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  /* %1207 = extractvalue { i64, i64 } %1202, 1, !dbg !1793, !psr.id !1800, !verifier.code !63 */
  $i1206 := $extractvalue.i64($p1201, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %1207, i64* %1206, align 8, !dbg !1793, !psr.id !1801, !verifier.code !63 */
  $M.391 := $store.i64($M.391, $p1205, $i1206);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  /* %1208 = load i128, i128* %166, align 16, !dbg !1793, !psr.id !1802, !verifier.code !63 */
  $i1207 := $load.i128($M.391, $p165);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %755, i128* %167, align 16, !dbg !1803, !psr.id !1804, !verifier.code !63 */
  $M.392 := $store.i128($M.392, $p166, $i754);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1209 = bitcast i128* %167 to { i64, i64 }*, !dbg !1803, !psr.id !1805, !verifier.code !63 */
  $p1208 := $bitcast.ref.ref($p166);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1210 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1209, i32 0, i32 0, !dbg !1803, !psr.id !1806, !verifier.code !63 */
  $p1209 := $add.ref($add.ref($p1208, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1211 = load i64, i64* %1210, align 16, !dbg !1803, !psr.id !1807, !verifier.code !63 */
  $i1210 := $load.i64($M.392, $p1209);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1212 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1209, i32 0, i32 1, !dbg !1803, !psr.id !1808, !verifier.code !63 */
  $p1211 := $add.ref($add.ref($p1208, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1213 = load i64, i64* %1212, align 8, !dbg !1803, !psr.id !1809, !verifier.code !63 */
  $i1212 := $load.i64($M.392, $p1211);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1208, i128* %168, align 16, !dbg !1803, !psr.id !1810, !verifier.code !63 */
  $M.393 := $store.i128($M.393, $p167, $i1207);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1214 = bitcast i128* %168 to { i64, i64 }*, !dbg !1803, !psr.id !1811, !verifier.code !63 */
  $p1213 := $bitcast.ref.ref($p167);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1215 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1214, i32 0, i32 0, !dbg !1803, !psr.id !1812, !verifier.code !63 */
  $p1214 := $add.ref($add.ref($p1213, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1216 = load i64, i64* %1215, align 16, !dbg !1803, !psr.id !1813, !verifier.code !63 */
  $i1215 := $load.i64($M.393, $p1214);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1217 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1214, i32 0, i32 1, !dbg !1803, !psr.id !1814, !verifier.code !63 */
  $p1216 := $add.ref($add.ref($p1213, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1218 = load i64, i64* %1217, align 8, !dbg !1803, !psr.id !1815, !verifier.code !63 */
  $i1217 := $load.i64($M.393, $p1216);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1219 = call { i64, i64 } @FStar_UInt128_add(i64 %1211, i64 %1213, i64 %1216, i64 %1218), !dbg !1803, !psr.id !1816, !verifier.code !63 */
  call $p1218 := FStar_UInt128_add($i1210, $i1212, $i1215, $i1217);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1220 = bitcast i128* %169 to { i64, i64 }*, !dbg !1803, !psr.id !1817, !verifier.code !63 */
  $p1219 := $bitcast.ref.ref($p168);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1221 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1220, i32 0, i32 0, !dbg !1803, !psr.id !1818, !verifier.code !63 */
  $p1220 := $add.ref($add.ref($p1219, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1222 = extractvalue { i64, i64 } %1219, 0, !dbg !1803, !psr.id !1819, !verifier.code !63 */
  $i1221 := $extractvalue.i64($p1218, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1222, i64* %1221, align 16, !dbg !1803, !psr.id !1820, !verifier.code !63 */
  $M.394 := $store.i64($M.394, $p1220, $i1221);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1223 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1220, i32 0, i32 1, !dbg !1803, !psr.id !1821, !verifier.code !63 */
  $p1222 := $add.ref($add.ref($p1219, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1224 = extractvalue { i64, i64 } %1219, 1, !dbg !1803, !psr.id !1822, !verifier.code !63 */
  $i1223 := $extractvalue.i64($p1218, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1224, i64* %1223, align 8, !dbg !1803, !psr.id !1823, !verifier.code !63 */
  $M.394 := $store.i64($M.394, $p1222, $i1223);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  /* %1225 = load i128, i128* %169, align 16, !dbg !1803, !psr.id !1824, !verifier.code !63 */
  $i1224 := $load.i128($M.394, $p168);
  /* call void @llvm.dbg.value(metadata i128 %1225, metadata !6094, metadata !DIExpression()), !dbg !4504, !psr.id !6095, !verifier.code !64 */
  call {:cexpr "l_9"} boogie_si_record_i128($i1224);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %1225, i128* %170, align 16, !dbg !1827, !psr.id !1828, !verifier.code !63 */
  $M.395 := $store.i128($M.395, $p169, $i1224);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  /* %1226 = bitcast i128* %170 to { i64, i64 }*, !dbg !1827, !psr.id !1829, !verifier.code !63 */
  $p1225 := $bitcast.ref.ref($p169);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  /* %1227 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1226, i32 0, i32 0, !dbg !1827, !psr.id !1830, !verifier.code !63 */
  $p1226 := $add.ref($add.ref($p1225, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  /* %1228 = load i64, i64* %1227, align 16, !dbg !1827, !psr.id !1831, !verifier.code !63 */
  $i1227 := $load.i64($M.395, $p1226);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  /* %1229 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1226, i32 0, i32 1, !dbg !1827, !psr.id !1832, !verifier.code !63 */
  $p1228 := $add.ref($add.ref($p1225, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  /* %1230 = load i64, i64* %1229, align 8, !dbg !1827, !psr.id !1833, !verifier.code !63 */
  $i1229 := $load.i64($M.395, $p1228);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  /* %1231 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1228, i64 %1230), !dbg !1827, !psr.id !1834, !verifier.code !63 */
  call $i1230 := FStar_UInt128_uint128_to_uint64($i1227, $i1229);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 56} true;
  assume {:verifier.code 0} true;
  /* %1232 = and i64 %1231, 2251799813685247, !dbg !1835, !psr.id !1836, !verifier.code !63 */
  $i1231 := $and.i64($i1230, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1232, metadata !6106, metadata !DIExpression()), !dbg !4504, !psr.id !6107, !verifier.code !64 */
  call {:cexpr "tmp4"} boogie_si_record_i64($i1231);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %1225, i128* %171, align 16, !dbg !1839, !psr.id !1840, !verifier.code !63 */
  $M.396 := $store.i128($M.396, $p170, $i1224);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* %1233 = bitcast i128* %171 to { i64, i64 }*, !dbg !1839, !psr.id !1841, !verifier.code !63 */
  $p1232 := $bitcast.ref.ref($p170);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* %1234 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1233, i32 0, i32 0, !dbg !1839, !psr.id !1842, !verifier.code !63 */
  $p1233 := $add.ref($add.ref($p1232, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* %1235 = load i64, i64* %1234, align 16, !dbg !1839, !psr.id !1843, !verifier.code !63 */
  $i1234 := $load.i64($M.396, $p1233);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* %1236 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1233, i32 0, i32 1, !dbg !1839, !psr.id !1844, !verifier.code !63 */
  $p1235 := $add.ref($add.ref($p1232, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* %1237 = load i64, i64* %1236, align 8, !dbg !1839, !psr.id !1845, !verifier.code !63 */
  $i1236 := $load.i64($M.396, $p1235);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* %1238 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1235, i64 %1237, i32 51), !dbg !1839, !psr.id !1846, !verifier.code !63 */
  call $p1237 := FStar_UInt128_shift_right($i1234, $i1236, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* %1239 = bitcast i128* %172 to { i64, i64 }*, !dbg !1839, !psr.id !1847, !verifier.code !63 */
  $p1238 := $bitcast.ref.ref($p171);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* %1240 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1239, i32 0, i32 0, !dbg !1839, !psr.id !1848, !verifier.code !63 */
  $p1239 := $add.ref($add.ref($p1238, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* %1241 = extractvalue { i64, i64 } %1238, 0, !dbg !1839, !psr.id !1849, !verifier.code !63 */
  $i1240 := $extractvalue.i64($p1237, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1241, i64* %1240, align 16, !dbg !1839, !psr.id !1850, !verifier.code !63 */
  $M.397 := $store.i64($M.397, $p1239, $i1240);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* %1242 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1239, i32 0, i32 1, !dbg !1839, !psr.id !1851, !verifier.code !63 */
  $p1241 := $add.ref($add.ref($p1238, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* %1243 = extractvalue { i64, i64 } %1238, 1, !dbg !1839, !psr.id !1852, !verifier.code !63 */
  $i1242 := $extractvalue.i64($p1237, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1243, i64* %1242, align 8, !dbg !1839, !psr.id !1853, !verifier.code !63 */
  $M.397 := $store.i64($M.397, $p1241, $i1242);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  /* %1244 = load i128, i128* %172, align 16, !dbg !1839, !psr.id !1854, !verifier.code !63 */
  $i1243 := $load.i128($M.397, $p171);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %1244, i128* %173, align 16, !dbg !1855, !psr.id !1856, !verifier.code !63 */
  $M.398 := $store.i128($M.398, $p172, $i1243);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  /* %1245 = bitcast i128* %173 to { i64, i64 }*, !dbg !1855, !psr.id !1857, !verifier.code !63 */
  $p1244 := $bitcast.ref.ref($p172);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  /* %1246 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1245, i32 0, i32 0, !dbg !1855, !psr.id !1858, !verifier.code !63 */
  $p1245 := $add.ref($add.ref($p1244, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  /* %1247 = load i64, i64* %1246, align 16, !dbg !1855, !psr.id !1859, !verifier.code !63 */
  $i1246 := $load.i64($M.398, $p1245);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  /* %1248 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1245, i32 0, i32 1, !dbg !1855, !psr.id !1860, !verifier.code !63 */
  $p1247 := $add.ref($add.ref($p1244, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  /* %1249 = load i64, i64* %1248, align 8, !dbg !1855, !psr.id !1861, !verifier.code !63 */
  $i1248 := $load.i64($M.398, $p1247);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  /* %1250 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1247, i64 %1249), !dbg !1855, !psr.id !1862, !verifier.code !63 */
  call $i1249 := FStar_UInt128_uint128_to_uint64($i1246, $i1248);
  /* call void @llvm.dbg.value(metadata i64 %1250, metadata !6132, metadata !DIExpression()), !dbg !4504, !psr.id !6133, !verifier.code !64 */
  call {:cexpr "c4"} boogie_si_record_i64($i1249);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 571, 29} true;
  assume {:verifier.code 0} true;
  /* %1251 = mul i64 %1250, 19, !dbg !1865, !psr.id !1866, !verifier.code !63 */
  $i1250 := $mul.i64($i1249, 19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 571, 24} true;
  assume {:verifier.code 0} true;
  /* %1252 = add i64 %1036, %1251, !dbg !1867, !psr.id !1868, !verifier.code !63 */
  $i1251 := $add.i64($i1035, $i1250);
  /* call void @llvm.dbg.value(metadata i64 %1252, metadata !6138, metadata !DIExpression()), !dbg !4504, !psr.id !6139, !verifier.code !64 */
  call {:cexpr "l_10"} boogie_si_record_i64($i1251);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 572, 26} true;
  assume {:verifier.code 0} true;
  /* %1253 = and i64 %1252, 2251799813685247, !dbg !1871, !psr.id !1872, !verifier.code !63 */
  $i1252 := $and.i64($i1251, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1253, metadata !6142, metadata !DIExpression()), !dbg !4504, !psr.id !6143, !verifier.code !64 */
  call {:cexpr "tmp0_0"} boogie_si_record_i64($i1252);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 573, 22} true;
  assume {:verifier.code 0} true;
  /* %1254 = lshr i64 %1252, 51, !dbg !1875, !psr.id !1876, !verifier.code !63 */
  $i1253 := $lshr.i64($i1251, 51);
  /* call void @llvm.dbg.value(metadata i64 %1254, metadata !6146, metadata !DIExpression()), !dbg !4504, !psr.id !6147, !verifier.code !64 */
  call {:cexpr "c5"} boogie_si_record_i64($i1253);
  /* call void @llvm.dbg.value(metadata i64 %1253, metadata !6148, metadata !DIExpression()), !dbg !4504, !psr.id !6149, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 575, 24} true;
  assume {:verifier.code 0} true;
  /* %1255 = add i64 %1085, %1254, !dbg !1881, !psr.id !1882, !verifier.code !63 */
  $i1254 := $add.i64($i1084, $i1253);
  /* call void @llvm.dbg.value(metadata i64 %1255, metadata !6152, metadata !DIExpression()), !dbg !4504, !psr.id !6153, !verifier.code !64 */
  call {:cexpr "o211"} boogie_si_record_i64($i1254);
  /* call void @llvm.dbg.value(metadata i64 %1134, metadata !6154, metadata !DIExpression()), !dbg !4504, !psr.id !6155, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1183, metadata !6156, metadata !DIExpression()), !dbg !4504, !psr.id !6157, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1232, metadata !6158, metadata !DIExpression()), !dbg !4504, !psr.id !6159, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1003, metadata !6160, metadata !DIExpression()), !dbg !4504, !psr.id !6161, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1005, metadata !6162, metadata !DIExpression()), !dbg !4504, !psr.id !6163, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %884, metadata !6164, metadata !DIExpression()), !dbg !4504, !psr.id !6165, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %933, metadata !6166, metadata !DIExpression()), !dbg !4504, !psr.id !6167, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %982, metadata !6168, metadata !DIExpression()), !dbg !4504, !psr.id !6169, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1253, metadata !6170, metadata !DIExpression()), !dbg !4504, !psr.id !6171, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1255, metadata !6172, metadata !DIExpression()), !dbg !4504, !psr.id !6173, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1134, metadata !6174, metadata !DIExpression()), !dbg !4504, !psr.id !6175, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1183, metadata !6176, metadata !DIExpression()), !dbg !4504, !psr.id !6177, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1232, metadata !6178, metadata !DIExpression()), !dbg !4504, !psr.id !6179, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 589, 3} true;
  assume {:verifier.code 0} true;
  /* %1256 = getelementptr inbounds i64, i64* %0, i64 0, !dbg !1911, !psr.id !1912, !verifier.code !63 */
  $p1255 := $add.ref($p0, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 589, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1003, i64* %1256, align 8, !dbg !1913, !psr.id !1914, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1255, $i1002);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 590, 3} true;
  assume {:verifier.code 0} true;
  /* %1257 = getelementptr inbounds i64, i64* %0, i64 1, !dbg !1915, !psr.id !1916, !verifier.code !63 */
  $p1256 := $add.ref($p0, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 590, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1005, i64* %1257, align 8, !dbg !1917, !psr.id !1918, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1256, $i1004);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 591, 3} true;
  assume {:verifier.code 0} true;
  /* %1258 = getelementptr inbounds i64, i64* %0, i64 2, !dbg !1919, !psr.id !1920, !verifier.code !63 */
  $p1257 := $add.ref($p0, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 591, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %884, i64* %1258, align 8, !dbg !1921, !psr.id !1922, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1257, $i883);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 592, 3} true;
  assume {:verifier.code 0} true;
  /* %1259 = getelementptr inbounds i64, i64* %0, i64 3, !dbg !1923, !psr.id !1924, !verifier.code !63 */
  $p1258 := $add.ref($p0, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 592, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %933, i64* %1259, align 8, !dbg !1925, !psr.id !1926, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1258, $i932);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 593, 3} true;
  assume {:verifier.code 0} true;
  /* %1260 = getelementptr inbounds i64, i64* %0, i64 4, !dbg !1927, !psr.id !1928, !verifier.code !63 */
  $p1259 := $add.ref($p0, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 593, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %982, i64* %1260, align 8, !dbg !1929, !psr.id !1930, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1259, $i981);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 594, 3} true;
  assume {:verifier.code 0} true;
  /* %1261 = getelementptr inbounds i64, i64* %0, i64 5, !dbg !1931, !psr.id !1932, !verifier.code !63 */
  $p1260 := $add.ref($p0, $mul.ref(5, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 594, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1253, i64* %1261, align 8, !dbg !1933, !psr.id !1934, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1260, $i1252);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 595, 3} true;
  assume {:verifier.code 0} true;
  /* %1262 = getelementptr inbounds i64, i64* %0, i64 6, !dbg !1935, !psr.id !1936, !verifier.code !63 */
  $p1261 := $add.ref($p0, $mul.ref(6, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 595, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1255, i64* %1262, align 8, !dbg !1937, !psr.id !1938, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1261, $i1254);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 596, 3} true;
  assume {:verifier.code 0} true;
  /* %1263 = getelementptr inbounds i64, i64* %0, i64 7, !dbg !1939, !psr.id !1940, !verifier.code !63 */
  $p1262 := $add.ref($p0, $mul.ref(7, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 596, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1134, i64* %1263, align 8, !dbg !1941, !psr.id !1942, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1262, $i1133);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 597, 3} true;
  assume {:verifier.code 0} true;
  /* %1264 = getelementptr inbounds i64, i64* %0, i64 8, !dbg !1943, !psr.id !1944, !verifier.code !63 */
  $p1263 := $add.ref($p0, $mul.ref(8, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 597, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1183, i64* %1264, align 8, !dbg !1945, !psr.id !1946, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1263, $i1182);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 598, 3} true;
  assume {:verifier.code 0} true;
  /* %1265 = getelementptr inbounds i64, i64* %0, i64 9, !dbg !1947, !psr.id !1948, !verifier.code !63 */
  $p1264 := $add.ref($p0, $mul.ref(9, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 598, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1232, i64* %1265, align 8, !dbg !1949, !psr.id !1950, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1264, $i1231);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 599, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !1951, !psr.id !1952, !verifier.code !63 */
  $exn := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_fmul1: ref;
axiom (Hacl_Impl_Curve25519_Field51_fmul1 == $sub.ref(0, 29928));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fmul1($p0: ref, $p1: ref, $i2: i64)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $i49: i64;
  var $p50: ref;
  var $i51: i64;
  var $p52: ref;
  var $i53: i64;
  var $p54: ref;
  var $i55: i64;
  var $p56: ref;
  var $i57: i64;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $i61: i64;
  var $p62: ref;
  var $i63: i64;
  var $i64: i128;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $i68: i64;
  var $p69: ref;
  var $i70: i64;
  var $i71: i128;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $i75: i64;
  var $p76: ref;
  var $i77: i64;
  var $i78: i128;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $i82: i64;
  var $p83: ref;
  var $i84: i64;
  var $i85: i128;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $i89: i64;
  var $p90: ref;
  var $i91: i64;
  var $i92: i128;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $i96: i64;
  var $p97: ref;
  var $i98: i64;
  var $i99: i128;
  var $p100: ref;
  var $p101: ref;
  var $i102: i64;
  var $p103: ref;
  var $i104: i64;
  var $p105: ref;
  var $p106: ref;
  var $i107: i64;
  var $p108: ref;
  var $i109: i64;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $i113: i64;
  var $p114: ref;
  var $i115: i64;
  var $i116: i128;
  var $p117: ref;
  var $p118: ref;
  var $i119: i64;
  var $p120: ref;
  var $i121: i64;
  var $i122: i64;
  var $i123: i64;
  var $p124: ref;
  var $p125: ref;
  var $i126: i64;
  var $p127: ref;
  var $i128: i64;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $i132: i64;
  var $p133: ref;
  var $i134: i64;
  var $i135: i128;
  var $p136: ref;
  var $p137: ref;
  var $i138: i64;
  var $p139: ref;
  var $i140: i64;
  var $i141: i64;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $i145: i64;
  var $p146: ref;
  var $i147: i64;
  var $i148: i128;
  var $p149: ref;
  var $p150: ref;
  var $i151: i64;
  var $p152: ref;
  var $i153: i64;
  var $p154: ref;
  var $p155: ref;
  var $i156: i64;
  var $p157: ref;
  var $i158: i64;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $i162: i64;
  var $p163: ref;
  var $i164: i64;
  var $i165: i128;
  var $p166: ref;
  var $p167: ref;
  var $i168: i64;
  var $p169: ref;
  var $i170: i64;
  var $i171: i64;
  var $i172: i64;
  var $p173: ref;
  var $p174: ref;
  var $i175: i64;
  var $p176: ref;
  var $i177: i64;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $i181: i64;
  var $p182: ref;
  var $i183: i64;
  var $i184: i128;
  var $p185: ref;
  var $p186: ref;
  var $i187: i64;
  var $p188: ref;
  var $i189: i64;
  var $i190: i64;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $i194: i64;
  var $p195: ref;
  var $i196: i64;
  var $i197: i128;
  var $p198: ref;
  var $p199: ref;
  var $i200: i64;
  var $p201: ref;
  var $i202: i64;
  var $p203: ref;
  var $p204: ref;
  var $i205: i64;
  var $p206: ref;
  var $i207: i64;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $i211: i64;
  var $p212: ref;
  var $i213: i64;
  var $i214: i128;
  var $p215: ref;
  var $p216: ref;
  var $i217: i64;
  var $p218: ref;
  var $i219: i64;
  var $i220: i64;
  var $i221: i64;
  var $p222: ref;
  var $p223: ref;
  var $i224: i64;
  var $p225: ref;
  var $i226: i64;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $i230: i64;
  var $p231: ref;
  var $i232: i64;
  var $i233: i128;
  var $p234: ref;
  var $p235: ref;
  var $i236: i64;
  var $p237: ref;
  var $i238: i64;
  var $i239: i64;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $i243: i64;
  var $p244: ref;
  var $i245: i64;
  var $i246: i128;
  var $p247: ref;
  var $p248: ref;
  var $i249: i64;
  var $p250: ref;
  var $i251: i64;
  var $p252: ref;
  var $p253: ref;
  var $i254: i64;
  var $p255: ref;
  var $i256: i64;
  var $p257: ref;
  var $p258: ref;
  var $p259: ref;
  var $i260: i64;
  var $p261: ref;
  var $i262: i64;
  var $i263: i128;
  var $p264: ref;
  var $p265: ref;
  var $i266: i64;
  var $p267: ref;
  var $i268: i64;
  var $i269: i64;
  var $i270: i64;
  var $p271: ref;
  var $p272: ref;
  var $i273: i64;
  var $p274: ref;
  var $i275: i64;
  var $p276: ref;
  var $p277: ref;
  var $p278: ref;
  var $i279: i64;
  var $p280: ref;
  var $i281: i64;
  var $i282: i128;
  var $p283: ref;
  var $p284: ref;
  var $i285: i64;
  var $p286: ref;
  var $i287: i64;
  var $i288: i64;
  var $p289: ref;
  var $p290: ref;
  var $p291: ref;
  var $i292: i64;
  var $p293: ref;
  var $i294: i64;
  var $i295: i128;
  var $p296: ref;
  var $p297: ref;
  var $i298: i64;
  var $p299: ref;
  var $i300: i64;
  var $p301: ref;
  var $p302: ref;
  var $i303: i64;
  var $p304: ref;
  var $i305: i64;
  var $p306: ref;
  var $p307: ref;
  var $p308: ref;
  var $i309: i64;
  var $p310: ref;
  var $i311: i64;
  var $i312: i128;
  var $p313: ref;
  var $p314: ref;
  var $i315: i64;
  var $p316: ref;
  var $i317: i64;
  var $i318: i64;
  var $i319: i64;
  var $p320: ref;
  var $p321: ref;
  var $i322: i64;
  var $p323: ref;
  var $i324: i64;
  var $p325: ref;
  var $p326: ref;
  var $p327: ref;
  var $i328: i64;
  var $p329: ref;
  var $i330: i64;
  var $i331: i128;
  var $p332: ref;
  var $p333: ref;
  var $i334: i64;
  var $p335: ref;
  var $i336: i64;
  var $i337: i64;
  var $i338: i64;
  var $i339: i64;
  var $i340: i64;
  var $i341: i64;
  var $i342: i64;
  var $p343: ref;
  var $p344: ref;
  var $p345: ref;
  var $p346: ref;
  var $p347: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 330, 18} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %4 = alloca i128, align 16, !psr.id !61, !verifier.code !62 */
  call $p3 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %5 = alloca i128, align 16, !psr.id !63, !verifier.code !62 */
  call $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %6 = alloca i128, align 16, !psr.id !64, !verifier.code !62 */
  call $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %7 = alloca i128, align 16, !psr.id !65, !verifier.code !62 */
  call $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %8 = alloca i128, align 16, !psr.id !66, !verifier.code !62 */
  call $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %9 = alloca i128, align 16, !psr.id !67, !verifier.code !62 */
  call $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %10 = alloca i128, align 16, !psr.id !68, !verifier.code !62 */
  call $p9 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %11 = alloca i128, align 16, !psr.id !69, !verifier.code !62 */
  call $p10 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %12 = alloca i128, align 16, !psr.id !70, !verifier.code !62 */
  call $p11 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %13 = alloca i128, align 16, !psr.id !71, !verifier.code !62 */
  call $p12 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %14 = alloca i128, align 16, !psr.id !72, !verifier.code !62 */
  call $p13 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %15 = alloca i128, align 16, !psr.id !73, !verifier.code !62 */
  call $p14 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %16 = alloca i128, align 16, !psr.id !74, !verifier.code !62 */
  call $p15 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %17 = alloca i128, align 16, !psr.id !75, !verifier.code !62 */
  call $p16 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %18 = alloca i128, align 16, !psr.id !76, !verifier.code !62 */
  call $p17 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %19 = alloca i128, align 16, !psr.id !77, !verifier.code !62 */
  call $p18 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %20 = alloca i128, align 16, !psr.id !78, !verifier.code !62 */
  call $p19 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %21 = alloca i128, align 16, !psr.id !79, !verifier.code !62 */
  call $p20 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %22 = alloca i128, align 16, !psr.id !80, !verifier.code !62 */
  call $p21 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %23 = alloca i128, align 16, !psr.id !81, !verifier.code !62 */
  call $p22 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %24 = alloca i128, align 16, !psr.id !82, !verifier.code !62 */
  call $p23 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %25 = alloca i128, align 16, !psr.id !83, !verifier.code !62 */
  call $p24 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %26 = alloca i128, align 16, !psr.id !84, !verifier.code !62 */
  call $p25 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %27 = alloca i128, align 16, !psr.id !85, !verifier.code !62 */
  call $p26 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %28 = alloca i128, align 16, !psr.id !86, !verifier.code !62 */
  call $p27 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %29 = alloca i128, align 16, !psr.id !87, !verifier.code !62 */
  call $p28 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %30 = alloca i128, align 16, !psr.id !88, !verifier.code !62 */
  call $p29 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %31 = alloca i128, align 16, !psr.id !89, !verifier.code !62 */
  call $p30 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %32 = alloca i128, align 16, !psr.id !90, !verifier.code !62 */
  call $p31 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %33 = alloca i128, align 16, !psr.id !91, !verifier.code !62 */
  call $p32 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %34 = alloca i128, align 16, !psr.id !92, !verifier.code !62 */
  call $p33 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %35 = alloca i128, align 16, !psr.id !93, !verifier.code !62 */
  call $p34 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %36 = alloca i128, align 16, !psr.id !94, !verifier.code !62 */
  call $p35 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %37 = alloca i128, align 16, !psr.id !95, !verifier.code !62 */
  call $p36 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %38 = alloca i128, align 16, !psr.id !96, !verifier.code !62 */
  call $p37 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %39 = alloca i128, align 16, !psr.id !97, !verifier.code !62 */
  call $p38 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %40 = alloca i128, align 16, !psr.id !98, !verifier.code !62 */
  call $p39 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %41 = alloca i128, align 16, !psr.id !99, !verifier.code !62 */
  call $p40 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %42 = alloca i128, align 16, !psr.id !100, !verifier.code !62 */
  call $p41 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %43 = alloca i128, align 16, !psr.id !101, !verifier.code !62 */
  call $p42 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %44 = alloca i128, align 16, !psr.id !102, !verifier.code !62 */
  call $p43 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %45 = alloca i128, align 16, !psr.id !103, !verifier.code !62 */
  call $p44 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %46 = alloca i128, align 16, !psr.id !104, !verifier.code !62 */
  call $p45 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %47 = alloca i128, align 16, !psr.id !105, !verifier.code !62 */
  call $p46 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %48 = alloca i128, align 16, !psr.id !106, !verifier.code !62 */
  call $p47 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !6270, metadata !DIExpression()), !dbg !6271, !psr.id !6272, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !6273, metadata !DIExpression()), !dbg !6271, !psr.id !6274, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %2, metadata !6275, metadata !DIExpression()), !dbg !6271, !psr.id !6276, !verifier.code !64 */
  call {:cexpr "Hacl_Impl_Curve25519_Field51_fmul1:arg:f2"} boogie_si_record_i64($i2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 330, 18} true;
  assume {:verifier.code 0} true;
  /* %49 = getelementptr inbounds i64, i64* %1, i64 0, !dbg !114, !psr.id !115, !verifier.code !62 */
  $p48 := $add.ref($p1, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 330, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %50 = load i64, i64* %49, align 8, !dbg !114, !psr.id !116, !ValueTainted !117, !verifier.code !62 */
  $i49 := $load.i64($M.0, $p48);
  /* call void @llvm.dbg.value(metadata i64 %50, metadata !6280, metadata !DIExpression()), !dbg !6271, !psr.id !6281, !verifier.code !64 */
  call {:cexpr "f10"} boogie_si_record_i64($i49);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 331, 18} true;
  assume {:verifier.code 0} true;
  /* %51 = getelementptr inbounds i64, i64* %1, i64 1, !dbg !120, !psr.id !121, !verifier.code !62 */
  $p50 := $add.ref($p1, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 331, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %52 = load i64, i64* %51, align 8, !dbg !120, !psr.id !122, !ValueTainted !117, !verifier.code !62 */
  $i51 := $load.i64($M.0, $p50);
  /* call void @llvm.dbg.value(metadata i64 %52, metadata !6285, metadata !DIExpression()), !dbg !6271, !psr.id !6286, !verifier.code !64 */
  call {:cexpr "f11"} boogie_si_record_i64($i51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 332, 18} true;
  assume {:verifier.code 0} true;
  /* %53 = getelementptr inbounds i64, i64* %1, i64 2, !dbg !125, !psr.id !126, !verifier.code !62 */
  $p52 := $add.ref($p1, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 332, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %54 = load i64, i64* %53, align 8, !dbg !125, !psr.id !127, !ValueTainted !117, !verifier.code !62 */
  $i53 := $load.i64($M.0, $p52);
  /* call void @llvm.dbg.value(metadata i64 %54, metadata !6290, metadata !DIExpression()), !dbg !6271, !psr.id !6291, !verifier.code !64 */
  call {:cexpr "f12"} boogie_si_record_i64($i53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 333, 18} true;
  assume {:verifier.code 0} true;
  /* %55 = getelementptr inbounds i64, i64* %1, i64 3, !dbg !130, !psr.id !131, !verifier.code !62 */
  $p54 := $add.ref($p1, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 333, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %56 = load i64, i64* %55, align 8, !dbg !130, !psr.id !132, !ValueTainted !117, !verifier.code !62 */
  $i55 := $load.i64($M.0, $p54);
  /* call void @llvm.dbg.value(metadata i64 %56, metadata !6295, metadata !DIExpression()), !dbg !6271, !psr.id !6296, !verifier.code !64 */
  call {:cexpr "f13"} boogie_si_record_i64($i55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 334, 18} true;
  assume {:verifier.code 0} true;
  /* %57 = getelementptr inbounds i64, i64* %1, i64 4, !dbg !135, !psr.id !136, !verifier.code !62 */
  $p56 := $add.ref($p1, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 334, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %58 = load i64, i64* %57, align 8, !dbg !135, !psr.id !137, !ValueTainted !117, !verifier.code !62 */
  $i57 := $load.i64($M.0, $p56);
  /* call void @llvm.dbg.value(metadata i64 %58, metadata !6300, metadata !DIExpression()), !dbg !6271, !psr.id !6301, !verifier.code !64 */
  call {:cexpr "f14"} boogie_si_record_i64($i57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %59 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %2, i64 %50), !dbg !140, !psr.id !141, !ValueTainted !117, !verifier.code !62 */
  call $p58 := FStar_UInt128_mul_wide($i2, $i49);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  /* %60 = bitcast i128* %4 to { i64, i64 }*, !dbg !140, !psr.id !142, !verifier.code !62 */
  $p59 := $bitcast.ref.ref($p3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  /* %61 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %60, i32 0, i32 0, !dbg !140, !psr.id !143, !verifier.code !62 */
  $p60 := $add.ref($add.ref($p59, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  /* %62 = extractvalue { i64, i64 } %59, 0, !dbg !140, !psr.id !144, !verifier.code !62 */
  $i61 := $extractvalue.i64($p58, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %62, i64* %61, align 16, !dbg !140, !psr.id !145, !verifier.code !62 */
  $M.399 := $store.i64($M.399, $p60, $i61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  /* %63 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %60, i32 0, i32 1, !dbg !140, !psr.id !146, !verifier.code !62 */
  $p62 := $add.ref($add.ref($p59, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  /* %64 = extractvalue { i64, i64 } %59, 1, !dbg !140, !psr.id !147, !verifier.code !62 */
  $i63 := $extractvalue.i64($p58, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %64, i64* %63, align 8, !dbg !140, !psr.id !148, !verifier.code !62 */
  $M.399 := $store.i64($M.399, $p62, $i63);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  /* %65 = load i128, i128* %4, align 16, !dbg !140, !psr.id !149, !verifier.code !62 */
  $i64 := $load.i128($M.399, $p3);
  /* call void @llvm.dbg.value(metadata i128 %65, metadata !6312, metadata !DIExpression()), !dbg !6271, !psr.id !6313, !verifier.code !64 */
  call {:cexpr "tmp_w0"} boogie_si_record_i128($i64);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %66 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %2, i64 %52), !dbg !152, !psr.id !153, !ValueTainted !117, !verifier.code !62 */
  call $p65 := FStar_UInt128_mul_wide($i2, $i51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  /* %67 = bitcast i128* %5 to { i64, i64 }*, !dbg !152, !psr.id !154, !verifier.code !62 */
  $p66 := $bitcast.ref.ref($p4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  /* %68 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %67, i32 0, i32 0, !dbg !152, !psr.id !155, !verifier.code !62 */
  $p67 := $add.ref($add.ref($p66, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  /* %69 = extractvalue { i64, i64 } %66, 0, !dbg !152, !psr.id !156, !verifier.code !62 */
  $i68 := $extractvalue.i64($p65, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %69, i64* %68, align 16, !dbg !152, !psr.id !157, !verifier.code !62 */
  $M.400 := $store.i64($M.400, $p67, $i68);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  /* %70 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %67, i32 0, i32 1, !dbg !152, !psr.id !158, !verifier.code !62 */
  $p69 := $add.ref($add.ref($p66, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  /* %71 = extractvalue { i64, i64 } %66, 1, !dbg !152, !psr.id !159, !verifier.code !62 */
  $i70 := $extractvalue.i64($p65, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %71, i64* %70, align 8, !dbg !152, !psr.id !160, !verifier.code !62 */
  $M.400 := $store.i64($M.400, $p69, $i70);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  /* %72 = load i128, i128* %5, align 16, !dbg !152, !psr.id !161, !verifier.code !62 */
  $i71 := $load.i128($M.400, $p4);
  /* call void @llvm.dbg.value(metadata i128 %72, metadata !6324, metadata !DIExpression()), !dbg !6271, !psr.id !6325, !verifier.code !64 */
  call {:cexpr "tmp_w1"} boogie_si_record_i128($i71);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %73 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %2, i64 %54), !dbg !164, !psr.id !165, !ValueTainted !117, !verifier.code !62 */
  call $p72 := FStar_UInt128_mul_wide($i2, $i53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  /* %74 = bitcast i128* %6 to { i64, i64 }*, !dbg !164, !psr.id !166, !verifier.code !62 */
  $p73 := $bitcast.ref.ref($p5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  /* %75 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %74, i32 0, i32 0, !dbg !164, !psr.id !167, !verifier.code !62 */
  $p74 := $add.ref($add.ref($p73, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  /* %76 = extractvalue { i64, i64 } %73, 0, !dbg !164, !psr.id !168, !verifier.code !62 */
  $i75 := $extractvalue.i64($p72, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %76, i64* %75, align 16, !dbg !164, !psr.id !169, !verifier.code !62 */
  $M.401 := $store.i64($M.401, $p74, $i75);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  /* %77 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %74, i32 0, i32 1, !dbg !164, !psr.id !170, !verifier.code !62 */
  $p76 := $add.ref($add.ref($p73, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  /* %78 = extractvalue { i64, i64 } %73, 1, !dbg !164, !psr.id !171, !verifier.code !62 */
  $i77 := $extractvalue.i64($p72, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %78, i64* %77, align 8, !dbg !164, !psr.id !172, !verifier.code !62 */
  $M.401 := $store.i64($M.401, $p76, $i77);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  /* %79 = load i128, i128* %6, align 16, !dbg !164, !psr.id !173, !verifier.code !62 */
  $i78 := $load.i128($M.401, $p5);
  /* call void @llvm.dbg.value(metadata i128 %79, metadata !6336, metadata !DIExpression()), !dbg !6271, !psr.id !6337, !verifier.code !64 */
  call {:cexpr "tmp_w2"} boogie_si_record_i128($i78);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %80 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %2, i64 %56), !dbg !176, !psr.id !177, !ValueTainted !117, !verifier.code !62 */
  call $p79 := FStar_UInt128_mul_wide($i2, $i55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  /* %81 = bitcast i128* %7 to { i64, i64 }*, !dbg !176, !psr.id !178, !verifier.code !62 */
  $p80 := $bitcast.ref.ref($p6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  /* %82 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %81, i32 0, i32 0, !dbg !176, !psr.id !179, !verifier.code !62 */
  $p81 := $add.ref($add.ref($p80, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  /* %83 = extractvalue { i64, i64 } %80, 0, !dbg !176, !psr.id !180, !verifier.code !62 */
  $i82 := $extractvalue.i64($p79, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %83, i64* %82, align 16, !dbg !176, !psr.id !181, !verifier.code !62 */
  $M.402 := $store.i64($M.402, $p81, $i82);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  /* %84 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %81, i32 0, i32 1, !dbg !176, !psr.id !182, !verifier.code !62 */
  $p83 := $add.ref($add.ref($p80, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  /* %85 = extractvalue { i64, i64 } %80, 1, !dbg !176, !psr.id !183, !verifier.code !62 */
  $i84 := $extractvalue.i64($p79, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %85, i64* %84, align 8, !dbg !176, !psr.id !184, !verifier.code !62 */
  $M.402 := $store.i64($M.402, $p83, $i84);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  /* %86 = load i128, i128* %7, align 16, !dbg !176, !psr.id !185, !verifier.code !62 */
  $i85 := $load.i128($M.402, $p6);
  /* call void @llvm.dbg.value(metadata i128 %86, metadata !6348, metadata !DIExpression()), !dbg !6271, !psr.id !6349, !verifier.code !64 */
  call {:cexpr "tmp_w3"} boogie_si_record_i128($i85);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %87 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %2, i64 %58), !dbg !188, !psr.id !189, !ValueTainted !117, !verifier.code !62 */
  call $p86 := FStar_UInt128_mul_wide($i2, $i57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  /* %88 = bitcast i128* %8 to { i64, i64 }*, !dbg !188, !psr.id !190, !verifier.code !62 */
  $p87 := $bitcast.ref.ref($p7);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  /* %89 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %88, i32 0, i32 0, !dbg !188, !psr.id !191, !verifier.code !62 */
  $p88 := $add.ref($add.ref($p87, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  /* %90 = extractvalue { i64, i64 } %87, 0, !dbg !188, !psr.id !192, !verifier.code !62 */
  $i89 := $extractvalue.i64($p86, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %90, i64* %89, align 16, !dbg !188, !psr.id !193, !verifier.code !62 */
  $M.403 := $store.i64($M.403, $p88, $i89);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  /* %91 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %88, i32 0, i32 1, !dbg !188, !psr.id !194, !verifier.code !62 */
  $p90 := $add.ref($add.ref($p87, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  /* %92 = extractvalue { i64, i64 } %87, 1, !dbg !188, !psr.id !195, !verifier.code !62 */
  $i91 := $extractvalue.i64($p86, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %92, i64* %91, align 8, !dbg !188, !psr.id !196, !verifier.code !62 */
  $M.403 := $store.i64($M.403, $p90, $i91);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  /* %93 = load i128, i128* %8, align 16, !dbg !188, !psr.id !197, !verifier.code !62 */
  $i92 := $load.i128($M.403, $p7);
  /* call void @llvm.dbg.value(metadata i128 %93, metadata !6360, metadata !DIExpression()), !dbg !6271, !psr.id !6361, !verifier.code !64 */
  call {:cexpr "tmp_w4"} boogie_si_record_i128($i92);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  /* %94 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 0), !dbg !200, !psr.id !201, !verifier.code !62 */
  call $p93 := FStar_UInt128_uint64_to_uint128(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  /* %95 = bitcast i128* %9 to { i64, i64 }*, !dbg !200, !psr.id !202, !verifier.code !62 */
  $p94 := $bitcast.ref.ref($p8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  /* %96 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %95, i32 0, i32 0, !dbg !200, !psr.id !203, !verifier.code !62 */
  $p95 := $add.ref($add.ref($p94, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  /* %97 = extractvalue { i64, i64 } %94, 0, !dbg !200, !psr.id !204, !verifier.code !62 */
  $i96 := $extractvalue.i64($p93, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %97, i64* %96, align 16, !dbg !200, !psr.id !205, !verifier.code !62 */
  $M.404 := $store.i64($M.404, $p95, $i96);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  /* %98 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %95, i32 0, i32 1, !dbg !200, !psr.id !206, !verifier.code !62 */
  $p97 := $add.ref($add.ref($p94, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  /* %99 = extractvalue { i64, i64 } %94, 1, !dbg !200, !psr.id !207, !verifier.code !62 */
  $i98 := $extractvalue.i64($p93, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  /* store i64 %99, i64* %98, align 8, !dbg !200, !psr.id !208, !verifier.code !62 */
  $M.404 := $store.i64($M.404, $p97, $i98);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  /* %100 = load i128, i128* %9, align 16, !dbg !200, !psr.id !209, !verifier.code !62 */
  $i99 := $load.i128($M.404, $p8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* store i128 %65, i128* %10, align 16, !dbg !210, !psr.id !211, !verifier.code !62 */
  $M.405 := $store.i128($M.405, $p9, $i64);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %101 = bitcast i128* %10 to { i64, i64 }*, !dbg !210, !psr.id !212, !verifier.code !62 */
  $p100 := $bitcast.ref.ref($p9);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %102 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %101, i32 0, i32 0, !dbg !210, !psr.id !213, !verifier.code !62 */
  $p101 := $add.ref($add.ref($p100, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %103 = load i64, i64* %102, align 16, !dbg !210, !psr.id !214, !verifier.code !62 */
  $i102 := $load.i64($M.405, $p101);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %104 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %101, i32 0, i32 1, !dbg !210, !psr.id !215, !verifier.code !62 */
  $p103 := $add.ref($add.ref($p100, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %105 = load i64, i64* %104, align 8, !dbg !210, !psr.id !216, !verifier.code !62 */
  $i104 := $load.i64($M.405, $p103);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* store i128 %100, i128* %11, align 16, !dbg !210, !psr.id !217, !verifier.code !62 */
  $M.406 := $store.i128($M.406, $p10, $i99);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %106 = bitcast i128* %11 to { i64, i64 }*, !dbg !210, !psr.id !218, !verifier.code !62 */
  $p105 := $bitcast.ref.ref($p10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %107 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %106, i32 0, i32 0, !dbg !210, !psr.id !219, !verifier.code !62 */
  $p106 := $add.ref($add.ref($p105, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %108 = load i64, i64* %107, align 16, !dbg !210, !psr.id !220, !verifier.code !62 */
  $i107 := $load.i64($M.406, $p106);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %109 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %106, i32 0, i32 1, !dbg !210, !psr.id !221, !verifier.code !62 */
  $p108 := $add.ref($add.ref($p105, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %110 = load i64, i64* %109, align 8, !dbg !210, !psr.id !222, !verifier.code !62 */
  $i109 := $load.i64($M.406, $p108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %111 = call { i64, i64 } @FStar_UInt128_add(i64 %103, i64 %105, i64 %108, i64 %110), !dbg !210, !psr.id !223, !verifier.code !62 */
  call $p110 := FStar_UInt128_add($i102, $i104, $i107, $i109);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %112 = bitcast i128* %12 to { i64, i64 }*, !dbg !210, !psr.id !224, !verifier.code !62 */
  $p111 := $bitcast.ref.ref($p11);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %113 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %112, i32 0, i32 0, !dbg !210, !psr.id !225, !verifier.code !62 */
  $p112 := $add.ref($add.ref($p111, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %114 = extractvalue { i64, i64 } %111, 0, !dbg !210, !psr.id !226, !verifier.code !62 */
  $i113 := $extractvalue.i64($p110, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* store i64 %114, i64* %113, align 16, !dbg !210, !psr.id !227, !verifier.code !62 */
  $M.407 := $store.i64($M.407, $p112, $i113);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %115 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %112, i32 0, i32 1, !dbg !210, !psr.id !228, !verifier.code !62 */
  $p114 := $add.ref($add.ref($p111, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %116 = extractvalue { i64, i64 } %111, 1, !dbg !210, !psr.id !229, !verifier.code !62 */
  $i115 := $extractvalue.i64($p110, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* store i64 %116, i64* %115, align 8, !dbg !210, !psr.id !230, !verifier.code !62 */
  $M.407 := $store.i64($M.407, $p114, $i115);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  /* %117 = load i128, i128* %12, align 16, !dbg !210, !psr.id !231, !verifier.code !62 */
  $i116 := $load.i128($M.407, $p11);
  /* call void @llvm.dbg.value(metadata i128 %117, metadata !6394, metadata !DIExpression()), !dbg !6271, !psr.id !6395, !verifier.code !64 */
  call {:cexpr "l_"} boogie_si_record_i128($i116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %117, i128* %13, align 16, !dbg !234, !psr.id !235, !verifier.code !62 */
  $M.408 := $store.i128($M.408, $p12, $i116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  /* %118 = bitcast i128* %13 to { i64, i64 }*, !dbg !234, !psr.id !236, !verifier.code !62 */
  $p117 := $bitcast.ref.ref($p12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  /* %119 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %118, i32 0, i32 0, !dbg !234, !psr.id !237, !verifier.code !62 */
  $p118 := $add.ref($add.ref($p117, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  /* %120 = load i64, i64* %119, align 16, !dbg !234, !psr.id !238, !verifier.code !62 */
  $i119 := $load.i64($M.408, $p118);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  /* %121 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %118, i32 0, i32 1, !dbg !234, !psr.id !239, !verifier.code !62 */
  $p120 := $add.ref($add.ref($p117, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  /* %122 = load i64, i64* %121, align 8, !dbg !234, !psr.id !240, !verifier.code !62 */
  $i121 := $load.i64($M.408, $p120);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  /* %123 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %120, i64 %122), !dbg !234, !psr.id !241, !verifier.code !62 */
  call $i122 := FStar_UInt128_uint128_to_uint64($i119, $i121);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 55} true;
  assume {:verifier.code 0} true;
  /* %124 = and i64 %123, 2251799813685247, !dbg !242, !psr.id !243, !verifier.code !62 */
  $i123 := $and.i64($i122, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %124, metadata !6406, metadata !DIExpression()), !dbg !6271, !psr.id !6407, !verifier.code !64 */
  call {:cexpr "tmp0"} boogie_si_record_i64($i123);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %117, i128* %14, align 16, !dbg !246, !psr.id !247, !verifier.code !62 */
  $M.409 := $store.i128($M.409, $p13, $i116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* %125 = bitcast i128* %14 to { i64, i64 }*, !dbg !246, !psr.id !248, !verifier.code !62 */
  $p124 := $bitcast.ref.ref($p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* %126 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %125, i32 0, i32 0, !dbg !246, !psr.id !249, !verifier.code !62 */
  $p125 := $add.ref($add.ref($p124, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* %127 = load i64, i64* %126, align 16, !dbg !246, !psr.id !250, !verifier.code !62 */
  $i126 := $load.i64($M.409, $p125);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* %128 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %125, i32 0, i32 1, !dbg !246, !psr.id !251, !verifier.code !62 */
  $p127 := $add.ref($add.ref($p124, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* %129 = load i64, i64* %128, align 8, !dbg !246, !psr.id !252, !verifier.code !62 */
  $i128 := $load.i64($M.409, $p127);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* %130 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %127, i64 %129, i32 51), !dbg !246, !psr.id !253, !verifier.code !62 */
  call $p129 := FStar_UInt128_shift_right($i126, $i128, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* %131 = bitcast i128* %15 to { i64, i64 }*, !dbg !246, !psr.id !254, !verifier.code !62 */
  $p130 := $bitcast.ref.ref($p14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* %132 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %131, i32 0, i32 0, !dbg !246, !psr.id !255, !verifier.code !62 */
  $p131 := $add.ref($add.ref($p130, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* %133 = extractvalue { i64, i64 } %130, 0, !dbg !246, !psr.id !256, !verifier.code !62 */
  $i132 := $extractvalue.i64($p129, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %133, i64* %132, align 16, !dbg !246, !psr.id !257, !verifier.code !62 */
  $M.410 := $store.i64($M.410, $p131, $i132);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* %134 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %131, i32 0, i32 1, !dbg !246, !psr.id !258, !verifier.code !62 */
  $p133 := $add.ref($add.ref($p130, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* %135 = extractvalue { i64, i64 } %130, 1, !dbg !246, !psr.id !259, !verifier.code !62 */
  $i134 := $extractvalue.i64($p129, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %135, i64* %134, align 8, !dbg !246, !psr.id !260, !verifier.code !62 */
  $M.410 := $store.i64($M.410, $p133, $i134);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  /* %136 = load i128, i128* %15, align 16, !dbg !246, !psr.id !261, !verifier.code !62 */
  $i135 := $load.i128($M.410, $p14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %136, i128* %16, align 16, !dbg !262, !psr.id !263, !verifier.code !62 */
  $M.411 := $store.i128($M.411, $p15, $i135);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  /* %137 = bitcast i128* %16 to { i64, i64 }*, !dbg !262, !psr.id !264, !verifier.code !62 */
  $p136 := $bitcast.ref.ref($p15);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  /* %138 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %137, i32 0, i32 0, !dbg !262, !psr.id !265, !verifier.code !62 */
  $p137 := $add.ref($add.ref($p136, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  /* %139 = load i64, i64* %138, align 16, !dbg !262, !psr.id !266, !verifier.code !62 */
  $i138 := $load.i64($M.411, $p137);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  /* %140 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %137, i32 0, i32 1, !dbg !262, !psr.id !267, !verifier.code !62 */
  $p139 := $add.ref($add.ref($p136, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  /* %141 = load i64, i64* %140, align 8, !dbg !262, !psr.id !268, !verifier.code !62 */
  $i140 := $load.i64($M.411, $p139);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  /* %142 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %139, i64 %141), !dbg !262, !psr.id !269, !verifier.code !62 */
  call $i141 := FStar_UInt128_uint128_to_uint64($i138, $i140);
  /* call void @llvm.dbg.value(metadata i64 %142, metadata !6432, metadata !DIExpression()), !dbg !6271, !psr.id !6433, !verifier.code !64 */
  call {:cexpr "c0"} boogie_si_record_i64($i141);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  /* %143 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %142), !dbg !272, !psr.id !273, !verifier.code !62 */
  call $p142 := FStar_UInt128_uint64_to_uint128($i141);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  /* %144 = bitcast i128* %17 to { i64, i64 }*, !dbg !272, !psr.id !274, !verifier.code !62 */
  $p143 := $bitcast.ref.ref($p16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  /* %145 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %144, i32 0, i32 0, !dbg !272, !psr.id !275, !verifier.code !62 */
  $p144 := $add.ref($add.ref($p143, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  /* %146 = extractvalue { i64, i64 } %143, 0, !dbg !272, !psr.id !276, !verifier.code !62 */
  $i145 := $extractvalue.i64($p142, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %146, i64* %145, align 16, !dbg !272, !psr.id !277, !verifier.code !62 */
  $M.412 := $store.i64($M.412, $p144, $i145);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  /* %147 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %144, i32 0, i32 1, !dbg !272, !psr.id !278, !verifier.code !62 */
  $p146 := $add.ref($add.ref($p143, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  /* %148 = extractvalue { i64, i64 } %143, 1, !dbg !272, !psr.id !279, !verifier.code !62 */
  $i147 := $extractvalue.i64($p142, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %148, i64* %147, align 8, !dbg !272, !psr.id !280, !verifier.code !62 */
  $M.412 := $store.i64($M.412, $p146, $i147);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  /* %149 = load i128, i128* %17, align 16, !dbg !272, !psr.id !281, !verifier.code !62 */
  $i148 := $load.i128($M.412, $p16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %72, i128* %18, align 16, !dbg !282, !psr.id !283, !verifier.code !62 */
  $M.413 := $store.i128($M.413, $p17, $i71);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %150 = bitcast i128* %18 to { i64, i64 }*, !dbg !282, !psr.id !284, !verifier.code !62 */
  $p149 := $bitcast.ref.ref($p17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %151 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %150, i32 0, i32 0, !dbg !282, !psr.id !285, !verifier.code !62 */
  $p150 := $add.ref($add.ref($p149, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %152 = load i64, i64* %151, align 16, !dbg !282, !psr.id !286, !verifier.code !62 */
  $i151 := $load.i64($M.413, $p150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %153 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %150, i32 0, i32 1, !dbg !282, !psr.id !287, !verifier.code !62 */
  $p152 := $add.ref($add.ref($p149, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %154 = load i64, i64* %153, align 8, !dbg !282, !psr.id !288, !verifier.code !62 */
  $i153 := $load.i64($M.413, $p152);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %149, i128* %19, align 16, !dbg !282, !psr.id !289, !verifier.code !62 */
  $M.414 := $store.i128($M.414, $p18, $i148);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %155 = bitcast i128* %19 to { i64, i64 }*, !dbg !282, !psr.id !290, !verifier.code !62 */
  $p154 := $bitcast.ref.ref($p18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %156 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %155, i32 0, i32 0, !dbg !282, !psr.id !291, !verifier.code !62 */
  $p155 := $add.ref($add.ref($p154, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %157 = load i64, i64* %156, align 16, !dbg !282, !psr.id !292, !verifier.code !62 */
  $i156 := $load.i64($M.414, $p155);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %158 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %155, i32 0, i32 1, !dbg !282, !psr.id !293, !verifier.code !62 */
  $p157 := $add.ref($add.ref($p154, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %159 = load i64, i64* %158, align 8, !dbg !282, !psr.id !294, !verifier.code !62 */
  $i158 := $load.i64($M.414, $p157);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %160 = call { i64, i64 } @FStar_UInt128_add(i64 %152, i64 %154, i64 %157, i64 %159), !dbg !282, !psr.id !295, !verifier.code !62 */
  call $p159 := FStar_UInt128_add($i151, $i153, $i156, $i158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %161 = bitcast i128* %20 to { i64, i64 }*, !dbg !282, !psr.id !296, !verifier.code !62 */
  $p160 := $bitcast.ref.ref($p19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %162 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %161, i32 0, i32 0, !dbg !282, !psr.id !297, !verifier.code !62 */
  $p161 := $add.ref($add.ref($p160, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %163 = extractvalue { i64, i64 } %160, 0, !dbg !282, !psr.id !298, !verifier.code !62 */
  $i162 := $extractvalue.i64($p159, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %163, i64* %162, align 16, !dbg !282, !psr.id !299, !verifier.code !62 */
  $M.415 := $store.i64($M.415, $p161, $i162);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %164 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %161, i32 0, i32 1, !dbg !282, !psr.id !300, !verifier.code !62 */
  $p163 := $add.ref($add.ref($p160, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %165 = extractvalue { i64, i64 } %160, 1, !dbg !282, !psr.id !301, !verifier.code !62 */
  $i164 := $extractvalue.i64($p159, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %165, i64* %164, align 8, !dbg !282, !psr.id !302, !verifier.code !62 */
  $M.415 := $store.i64($M.415, $p163, $i164);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  /* %166 = load i128, i128* %20, align 16, !dbg !282, !psr.id !303, !verifier.code !62 */
  $i165 := $load.i128($M.415, $p19);
  /* call void @llvm.dbg.value(metadata i128 %166, metadata !6466, metadata !DIExpression()), !dbg !6271, !psr.id !6467, !verifier.code !64 */
  call {:cexpr "l_0"} boogie_si_record_i128($i165);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %166, i128* %21, align 16, !dbg !306, !psr.id !307, !verifier.code !62 */
  $M.416 := $store.i128($M.416, $p20, $i165);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  /* %167 = bitcast i128* %21 to { i64, i64 }*, !dbg !306, !psr.id !308, !verifier.code !62 */
  $p166 := $bitcast.ref.ref($p20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  /* %168 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %167, i32 0, i32 0, !dbg !306, !psr.id !309, !verifier.code !62 */
  $p167 := $add.ref($add.ref($p166, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  /* %169 = load i64, i64* %168, align 16, !dbg !306, !psr.id !310, !verifier.code !62 */
  $i168 := $load.i64($M.416, $p167);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  /* %170 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %167, i32 0, i32 1, !dbg !306, !psr.id !311, !verifier.code !62 */
  $p169 := $add.ref($add.ref($p166, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  /* %171 = load i64, i64* %170, align 8, !dbg !306, !psr.id !312, !verifier.code !62 */
  $i170 := $load.i64($M.416, $p169);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  /* %172 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %169, i64 %171), !dbg !306, !psr.id !313, !verifier.code !62 */
  call $i171 := FStar_UInt128_uint128_to_uint64($i168, $i170);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 56} true;
  assume {:verifier.code 0} true;
  /* %173 = and i64 %172, 2251799813685247, !dbg !314, !psr.id !315, !verifier.code !62 */
  $i172 := $and.i64($i171, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %173, metadata !6478, metadata !DIExpression()), !dbg !6271, !psr.id !6479, !verifier.code !64 */
  call {:cexpr "tmp1"} boogie_si_record_i64($i172);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %166, i128* %22, align 16, !dbg !318, !psr.id !319, !verifier.code !62 */
  $M.417 := $store.i128($M.417, $p21, $i165);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* %174 = bitcast i128* %22 to { i64, i64 }*, !dbg !318, !psr.id !320, !verifier.code !62 */
  $p173 := $bitcast.ref.ref($p21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* %175 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %174, i32 0, i32 0, !dbg !318, !psr.id !321, !verifier.code !62 */
  $p174 := $add.ref($add.ref($p173, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* %176 = load i64, i64* %175, align 16, !dbg !318, !psr.id !322, !verifier.code !62 */
  $i175 := $load.i64($M.417, $p174);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* %177 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %174, i32 0, i32 1, !dbg !318, !psr.id !323, !verifier.code !62 */
  $p176 := $add.ref($add.ref($p173, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* %178 = load i64, i64* %177, align 8, !dbg !318, !psr.id !324, !verifier.code !62 */
  $i177 := $load.i64($M.417, $p176);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* %179 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %176, i64 %178, i32 51), !dbg !318, !psr.id !325, !verifier.code !62 */
  call $p178 := FStar_UInt128_shift_right($i175, $i177, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* %180 = bitcast i128* %23 to { i64, i64 }*, !dbg !318, !psr.id !326, !verifier.code !62 */
  $p179 := $bitcast.ref.ref($p22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* %181 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %180, i32 0, i32 0, !dbg !318, !psr.id !327, !verifier.code !62 */
  $p180 := $add.ref($add.ref($p179, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* %182 = extractvalue { i64, i64 } %179, 0, !dbg !318, !psr.id !328, !verifier.code !62 */
  $i181 := $extractvalue.i64($p178, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %182, i64* %181, align 16, !dbg !318, !psr.id !329, !verifier.code !62 */
  $M.418 := $store.i64($M.418, $p180, $i181);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* %183 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %180, i32 0, i32 1, !dbg !318, !psr.id !330, !verifier.code !62 */
  $p182 := $add.ref($add.ref($p179, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* %184 = extractvalue { i64, i64 } %179, 1, !dbg !318, !psr.id !331, !verifier.code !62 */
  $i183 := $extractvalue.i64($p178, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %184, i64* %183, align 8, !dbg !318, !psr.id !332, !verifier.code !62 */
  $M.418 := $store.i64($M.418, $p182, $i183);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  /* %185 = load i128, i128* %23, align 16, !dbg !318, !psr.id !333, !verifier.code !62 */
  $i184 := $load.i128($M.418, $p22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %185, i128* %24, align 16, !dbg !334, !psr.id !335, !verifier.code !62 */
  $M.419 := $store.i128($M.419, $p23, $i184);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  /* %186 = bitcast i128* %24 to { i64, i64 }*, !dbg !334, !psr.id !336, !verifier.code !62 */
  $p185 := $bitcast.ref.ref($p23);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  /* %187 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %186, i32 0, i32 0, !dbg !334, !psr.id !337, !verifier.code !62 */
  $p186 := $add.ref($add.ref($p185, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  /* %188 = load i64, i64* %187, align 16, !dbg !334, !psr.id !338, !verifier.code !62 */
  $i187 := $load.i64($M.419, $p186);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  /* %189 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %186, i32 0, i32 1, !dbg !334, !psr.id !339, !verifier.code !62 */
  $p188 := $add.ref($add.ref($p185, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  /* %190 = load i64, i64* %189, align 8, !dbg !334, !psr.id !340, !verifier.code !62 */
  $i189 := $load.i64($M.419, $p188);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  /* %191 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %188, i64 %190), !dbg !334, !psr.id !341, !verifier.code !62 */
  call $i190 := FStar_UInt128_uint128_to_uint64($i187, $i189);
  /* call void @llvm.dbg.value(metadata i64 %191, metadata !6504, metadata !DIExpression()), !dbg !6271, !psr.id !6505, !verifier.code !64 */
  call {:cexpr "c1"} boogie_si_record_i64($i190);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  /* %192 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %191), !dbg !344, !psr.id !345, !verifier.code !62 */
  call $p191 := FStar_UInt128_uint64_to_uint128($i190);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  /* %193 = bitcast i128* %25 to { i64, i64 }*, !dbg !344, !psr.id !346, !verifier.code !62 */
  $p192 := $bitcast.ref.ref($p24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  /* %194 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %193, i32 0, i32 0, !dbg !344, !psr.id !347, !verifier.code !62 */
  $p193 := $add.ref($add.ref($p192, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  /* %195 = extractvalue { i64, i64 } %192, 0, !dbg !344, !psr.id !348, !verifier.code !62 */
  $i194 := $extractvalue.i64($p191, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %195, i64* %194, align 16, !dbg !344, !psr.id !349, !verifier.code !62 */
  $M.420 := $store.i64($M.420, $p193, $i194);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  /* %196 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %193, i32 0, i32 1, !dbg !344, !psr.id !350, !verifier.code !62 */
  $p195 := $add.ref($add.ref($p192, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  /* %197 = extractvalue { i64, i64 } %192, 1, !dbg !344, !psr.id !351, !verifier.code !62 */
  $i196 := $extractvalue.i64($p191, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %197, i64* %196, align 8, !dbg !344, !psr.id !352, !verifier.code !62 */
  $M.420 := $store.i64($M.420, $p195, $i196);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  /* %198 = load i128, i128* %25, align 16, !dbg !344, !psr.id !353, !verifier.code !62 */
  $i197 := $load.i128($M.420, $p24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %79, i128* %26, align 16, !dbg !354, !psr.id !355, !verifier.code !62 */
  $M.421 := $store.i128($M.421, $p25, $i78);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %199 = bitcast i128* %26 to { i64, i64 }*, !dbg !354, !psr.id !356, !verifier.code !62 */
  $p198 := $bitcast.ref.ref($p25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %200 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %199, i32 0, i32 0, !dbg !354, !psr.id !357, !verifier.code !62 */
  $p199 := $add.ref($add.ref($p198, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %201 = load i64, i64* %200, align 16, !dbg !354, !psr.id !358, !verifier.code !62 */
  $i200 := $load.i64($M.421, $p199);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %202 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %199, i32 0, i32 1, !dbg !354, !psr.id !359, !verifier.code !62 */
  $p201 := $add.ref($add.ref($p198, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %203 = load i64, i64* %202, align 8, !dbg !354, !psr.id !360, !verifier.code !62 */
  $i202 := $load.i64($M.421, $p201);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %198, i128* %27, align 16, !dbg !354, !psr.id !361, !verifier.code !62 */
  $M.422 := $store.i128($M.422, $p26, $i197);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %204 = bitcast i128* %27 to { i64, i64 }*, !dbg !354, !psr.id !362, !verifier.code !62 */
  $p203 := $bitcast.ref.ref($p26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %205 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %204, i32 0, i32 0, !dbg !354, !psr.id !363, !verifier.code !62 */
  $p204 := $add.ref($add.ref($p203, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %206 = load i64, i64* %205, align 16, !dbg !354, !psr.id !364, !verifier.code !62 */
  $i205 := $load.i64($M.422, $p204);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %207 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %204, i32 0, i32 1, !dbg !354, !psr.id !365, !verifier.code !62 */
  $p206 := $add.ref($add.ref($p203, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %208 = load i64, i64* %207, align 8, !dbg !354, !psr.id !366, !verifier.code !62 */
  $i207 := $load.i64($M.422, $p206);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %209 = call { i64, i64 } @FStar_UInt128_add(i64 %201, i64 %203, i64 %206, i64 %208), !dbg !354, !psr.id !367, !verifier.code !62 */
  call $p208 := FStar_UInt128_add($i200, $i202, $i205, $i207);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %210 = bitcast i128* %28 to { i64, i64 }*, !dbg !354, !psr.id !368, !verifier.code !62 */
  $p209 := $bitcast.ref.ref($p27);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %211 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %210, i32 0, i32 0, !dbg !354, !psr.id !369, !verifier.code !62 */
  $p210 := $add.ref($add.ref($p209, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %212 = extractvalue { i64, i64 } %209, 0, !dbg !354, !psr.id !370, !verifier.code !62 */
  $i211 := $extractvalue.i64($p208, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %212, i64* %211, align 16, !dbg !354, !psr.id !371, !verifier.code !62 */
  $M.423 := $store.i64($M.423, $p210, $i211);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %213 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %210, i32 0, i32 1, !dbg !354, !psr.id !372, !verifier.code !62 */
  $p212 := $add.ref($add.ref($p209, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %214 = extractvalue { i64, i64 } %209, 1, !dbg !354, !psr.id !373, !verifier.code !62 */
  $i213 := $extractvalue.i64($p208, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %214, i64* %213, align 8, !dbg !354, !psr.id !374, !verifier.code !62 */
  $M.423 := $store.i64($M.423, $p212, $i213);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  /* %215 = load i128, i128* %28, align 16, !dbg !354, !psr.id !375, !verifier.code !62 */
  $i214 := $load.i128($M.423, $p27);
  /* call void @llvm.dbg.value(metadata i128 %215, metadata !6538, metadata !DIExpression()), !dbg !6271, !psr.id !6539, !verifier.code !64 */
  call {:cexpr "l_1"} boogie_si_record_i128($i214);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %215, i128* %29, align 16, !dbg !378, !psr.id !379, !verifier.code !62 */
  $M.424 := $store.i128($M.424, $p28, $i214);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  /* %216 = bitcast i128* %29 to { i64, i64 }*, !dbg !378, !psr.id !380, !verifier.code !62 */
  $p215 := $bitcast.ref.ref($p28);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  /* %217 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %216, i32 0, i32 0, !dbg !378, !psr.id !381, !verifier.code !62 */
  $p216 := $add.ref($add.ref($p215, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  /* %218 = load i64, i64* %217, align 16, !dbg !378, !psr.id !382, !verifier.code !62 */
  $i217 := $load.i64($M.424, $p216);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  /* %219 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %216, i32 0, i32 1, !dbg !378, !psr.id !383, !verifier.code !62 */
  $p218 := $add.ref($add.ref($p215, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  /* %220 = load i64, i64* %219, align 8, !dbg !378, !psr.id !384, !verifier.code !62 */
  $i219 := $load.i64($M.424, $p218);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  /* %221 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %218, i64 %220), !dbg !378, !psr.id !385, !verifier.code !62 */
  call $i220 := FStar_UInt128_uint128_to_uint64($i217, $i219);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 56} true;
  assume {:verifier.code 0} true;
  /* %222 = and i64 %221, 2251799813685247, !dbg !386, !psr.id !387, !verifier.code !62 */
  $i221 := $and.i64($i220, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %222, metadata !6550, metadata !DIExpression()), !dbg !6271, !psr.id !6551, !verifier.code !64 */
  call {:cexpr "tmp2"} boogie_si_record_i64($i221);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %215, i128* %30, align 16, !dbg !390, !psr.id !391, !verifier.code !62 */
  $M.425 := $store.i128($M.425, $p29, $i214);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* %223 = bitcast i128* %30 to { i64, i64 }*, !dbg !390, !psr.id !392, !verifier.code !62 */
  $p222 := $bitcast.ref.ref($p29);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* %224 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %223, i32 0, i32 0, !dbg !390, !psr.id !393, !verifier.code !62 */
  $p223 := $add.ref($add.ref($p222, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* %225 = load i64, i64* %224, align 16, !dbg !390, !psr.id !394, !verifier.code !62 */
  $i224 := $load.i64($M.425, $p223);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* %226 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %223, i32 0, i32 1, !dbg !390, !psr.id !395, !verifier.code !62 */
  $p225 := $add.ref($add.ref($p222, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* %227 = load i64, i64* %226, align 8, !dbg !390, !psr.id !396, !verifier.code !62 */
  $i226 := $load.i64($M.425, $p225);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* %228 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %225, i64 %227, i32 51), !dbg !390, !psr.id !397, !verifier.code !62 */
  call $p227 := FStar_UInt128_shift_right($i224, $i226, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* %229 = bitcast i128* %31 to { i64, i64 }*, !dbg !390, !psr.id !398, !verifier.code !62 */
  $p228 := $bitcast.ref.ref($p30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* %230 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %229, i32 0, i32 0, !dbg !390, !psr.id !399, !verifier.code !62 */
  $p229 := $add.ref($add.ref($p228, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* %231 = extractvalue { i64, i64 } %228, 0, !dbg !390, !psr.id !400, !verifier.code !62 */
  $i230 := $extractvalue.i64($p227, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %231, i64* %230, align 16, !dbg !390, !psr.id !401, !verifier.code !62 */
  $M.426 := $store.i64($M.426, $p229, $i230);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* %232 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %229, i32 0, i32 1, !dbg !390, !psr.id !402, !verifier.code !62 */
  $p231 := $add.ref($add.ref($p228, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* %233 = extractvalue { i64, i64 } %228, 1, !dbg !390, !psr.id !403, !verifier.code !62 */
  $i232 := $extractvalue.i64($p227, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %233, i64* %232, align 8, !dbg !390, !psr.id !404, !verifier.code !62 */
  $M.426 := $store.i64($M.426, $p231, $i232);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  /* %234 = load i128, i128* %31, align 16, !dbg !390, !psr.id !405, !verifier.code !62 */
  $i233 := $load.i128($M.426, $p30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %234, i128* %32, align 16, !dbg !406, !psr.id !407, !verifier.code !62 */
  $M.427 := $store.i128($M.427, $p31, $i233);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  /* %235 = bitcast i128* %32 to { i64, i64 }*, !dbg !406, !psr.id !408, !verifier.code !62 */
  $p234 := $bitcast.ref.ref($p31);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  /* %236 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %235, i32 0, i32 0, !dbg !406, !psr.id !409, !verifier.code !62 */
  $p235 := $add.ref($add.ref($p234, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  /* %237 = load i64, i64* %236, align 16, !dbg !406, !psr.id !410, !verifier.code !62 */
  $i236 := $load.i64($M.427, $p235);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  /* %238 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %235, i32 0, i32 1, !dbg !406, !psr.id !411, !verifier.code !62 */
  $p237 := $add.ref($add.ref($p234, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  /* %239 = load i64, i64* %238, align 8, !dbg !406, !psr.id !412, !verifier.code !62 */
  $i238 := $load.i64($M.427, $p237);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  /* %240 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %237, i64 %239), !dbg !406, !psr.id !413, !verifier.code !62 */
  call $i239 := FStar_UInt128_uint128_to_uint64($i236, $i238);
  /* call void @llvm.dbg.value(metadata i64 %240, metadata !6576, metadata !DIExpression()), !dbg !6271, !psr.id !6577, !verifier.code !64 */
  call {:cexpr "c2"} boogie_si_record_i64($i239);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  /* %241 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %240), !dbg !416, !psr.id !417, !verifier.code !62 */
  call $p240 := FStar_UInt128_uint64_to_uint128($i239);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  /* %242 = bitcast i128* %33 to { i64, i64 }*, !dbg !416, !psr.id !418, !verifier.code !62 */
  $p241 := $bitcast.ref.ref($p32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  /* %243 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %242, i32 0, i32 0, !dbg !416, !psr.id !419, !verifier.code !62 */
  $p242 := $add.ref($add.ref($p241, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  /* %244 = extractvalue { i64, i64 } %241, 0, !dbg !416, !psr.id !420, !verifier.code !62 */
  $i243 := $extractvalue.i64($p240, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %244, i64* %243, align 16, !dbg !416, !psr.id !421, !verifier.code !62 */
  $M.428 := $store.i64($M.428, $p242, $i243);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  /* %245 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %242, i32 0, i32 1, !dbg !416, !psr.id !422, !verifier.code !62 */
  $p244 := $add.ref($add.ref($p241, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  /* %246 = extractvalue { i64, i64 } %241, 1, !dbg !416, !psr.id !423, !verifier.code !62 */
  $i245 := $extractvalue.i64($p240, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %246, i64* %245, align 8, !dbg !416, !psr.id !424, !verifier.code !62 */
  $M.428 := $store.i64($M.428, $p244, $i245);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  /* %247 = load i128, i128* %33, align 16, !dbg !416, !psr.id !425, !verifier.code !62 */
  $i246 := $load.i128($M.428, $p32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %86, i128* %34, align 16, !dbg !426, !psr.id !427, !verifier.code !62 */
  $M.429 := $store.i128($M.429, $p33, $i85);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %248 = bitcast i128* %34 to { i64, i64 }*, !dbg !426, !psr.id !428, !verifier.code !62 */
  $p247 := $bitcast.ref.ref($p33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %249 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %248, i32 0, i32 0, !dbg !426, !psr.id !429, !verifier.code !62 */
  $p248 := $add.ref($add.ref($p247, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %250 = load i64, i64* %249, align 16, !dbg !426, !psr.id !430, !verifier.code !62 */
  $i249 := $load.i64($M.429, $p248);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %251 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %248, i32 0, i32 1, !dbg !426, !psr.id !431, !verifier.code !62 */
  $p250 := $add.ref($add.ref($p247, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %252 = load i64, i64* %251, align 8, !dbg !426, !psr.id !432, !verifier.code !62 */
  $i251 := $load.i64($M.429, $p250);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %247, i128* %35, align 16, !dbg !426, !psr.id !433, !verifier.code !62 */
  $M.430 := $store.i128($M.430, $p34, $i246);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %253 = bitcast i128* %35 to { i64, i64 }*, !dbg !426, !psr.id !434, !verifier.code !62 */
  $p252 := $bitcast.ref.ref($p34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %254 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %253, i32 0, i32 0, !dbg !426, !psr.id !435, !verifier.code !62 */
  $p253 := $add.ref($add.ref($p252, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %255 = load i64, i64* %254, align 16, !dbg !426, !psr.id !436, !verifier.code !62 */
  $i254 := $load.i64($M.430, $p253);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %256 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %253, i32 0, i32 1, !dbg !426, !psr.id !437, !verifier.code !62 */
  $p255 := $add.ref($add.ref($p252, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %257 = load i64, i64* %256, align 8, !dbg !426, !psr.id !438, !verifier.code !62 */
  $i256 := $load.i64($M.430, $p255);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %258 = call { i64, i64 } @FStar_UInt128_add(i64 %250, i64 %252, i64 %255, i64 %257), !dbg !426, !psr.id !439, !verifier.code !62 */
  call $p257 := FStar_UInt128_add($i249, $i251, $i254, $i256);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %259 = bitcast i128* %36 to { i64, i64 }*, !dbg !426, !psr.id !440, !verifier.code !62 */
  $p258 := $bitcast.ref.ref($p35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %260 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %259, i32 0, i32 0, !dbg !426, !psr.id !441, !verifier.code !62 */
  $p259 := $add.ref($add.ref($p258, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %261 = extractvalue { i64, i64 } %258, 0, !dbg !426, !psr.id !442, !verifier.code !62 */
  $i260 := $extractvalue.i64($p257, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %261, i64* %260, align 16, !dbg !426, !psr.id !443, !verifier.code !62 */
  $M.431 := $store.i64($M.431, $p259, $i260);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %262 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %259, i32 0, i32 1, !dbg !426, !psr.id !444, !verifier.code !62 */
  $p261 := $add.ref($add.ref($p258, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %263 = extractvalue { i64, i64 } %258, 1, !dbg !426, !psr.id !445, !verifier.code !62 */
  $i262 := $extractvalue.i64($p257, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %263, i64* %262, align 8, !dbg !426, !psr.id !446, !verifier.code !62 */
  $M.431 := $store.i64($M.431, $p261, $i262);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  /* %264 = load i128, i128* %36, align 16, !dbg !426, !psr.id !447, !verifier.code !62 */
  $i263 := $load.i128($M.431, $p35);
  /* call void @llvm.dbg.value(metadata i128 %264, metadata !6610, metadata !DIExpression()), !dbg !6271, !psr.id !6611, !verifier.code !64 */
  call {:cexpr "l_2"} boogie_si_record_i128($i263);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %264, i128* %37, align 16, !dbg !450, !psr.id !451, !verifier.code !62 */
  $M.432 := $store.i128($M.432, $p36, $i263);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  /* %265 = bitcast i128* %37 to { i64, i64 }*, !dbg !450, !psr.id !452, !verifier.code !62 */
  $p264 := $bitcast.ref.ref($p36);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  /* %266 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %265, i32 0, i32 0, !dbg !450, !psr.id !453, !verifier.code !62 */
  $p265 := $add.ref($add.ref($p264, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  /* %267 = load i64, i64* %266, align 16, !dbg !450, !psr.id !454, !verifier.code !62 */
  $i266 := $load.i64($M.432, $p265);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  /* %268 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %265, i32 0, i32 1, !dbg !450, !psr.id !455, !verifier.code !62 */
  $p267 := $add.ref($add.ref($p264, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  /* %269 = load i64, i64* %268, align 8, !dbg !450, !psr.id !456, !verifier.code !62 */
  $i268 := $load.i64($M.432, $p267);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  /* %270 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %267, i64 %269), !dbg !450, !psr.id !457, !verifier.code !62 */
  call $i269 := FStar_UInt128_uint128_to_uint64($i266, $i268);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 56} true;
  assume {:verifier.code 0} true;
  /* %271 = and i64 %270, 2251799813685247, !dbg !458, !psr.id !459, !verifier.code !62 */
  $i270 := $and.i64($i269, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %271, metadata !6622, metadata !DIExpression()), !dbg !6271, !psr.id !6623, !verifier.code !64 */
  call {:cexpr "tmp3"} boogie_si_record_i64($i270);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %264, i128* %38, align 16, !dbg !462, !psr.id !463, !verifier.code !62 */
  $M.433 := $store.i128($M.433, $p37, $i263);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* %272 = bitcast i128* %38 to { i64, i64 }*, !dbg !462, !psr.id !464, !verifier.code !62 */
  $p271 := $bitcast.ref.ref($p37);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* %273 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %272, i32 0, i32 0, !dbg !462, !psr.id !465, !verifier.code !62 */
  $p272 := $add.ref($add.ref($p271, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* %274 = load i64, i64* %273, align 16, !dbg !462, !psr.id !466, !verifier.code !62 */
  $i273 := $load.i64($M.433, $p272);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* %275 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %272, i32 0, i32 1, !dbg !462, !psr.id !467, !verifier.code !62 */
  $p274 := $add.ref($add.ref($p271, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* %276 = load i64, i64* %275, align 8, !dbg !462, !psr.id !468, !verifier.code !62 */
  $i275 := $load.i64($M.433, $p274);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* %277 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %274, i64 %276, i32 51), !dbg !462, !psr.id !469, !verifier.code !62 */
  call $p276 := FStar_UInt128_shift_right($i273, $i275, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* %278 = bitcast i128* %39 to { i64, i64 }*, !dbg !462, !psr.id !470, !verifier.code !62 */
  $p277 := $bitcast.ref.ref($p38);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* %279 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %278, i32 0, i32 0, !dbg !462, !psr.id !471, !verifier.code !62 */
  $p278 := $add.ref($add.ref($p277, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* %280 = extractvalue { i64, i64 } %277, 0, !dbg !462, !psr.id !472, !verifier.code !62 */
  $i279 := $extractvalue.i64($p276, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %280, i64* %279, align 16, !dbg !462, !psr.id !473, !verifier.code !62 */
  $M.434 := $store.i64($M.434, $p278, $i279);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* %281 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %278, i32 0, i32 1, !dbg !462, !psr.id !474, !verifier.code !62 */
  $p280 := $add.ref($add.ref($p277, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* %282 = extractvalue { i64, i64 } %277, 1, !dbg !462, !psr.id !475, !verifier.code !62 */
  $i281 := $extractvalue.i64($p276, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %282, i64* %281, align 8, !dbg !462, !psr.id !476, !verifier.code !62 */
  $M.434 := $store.i64($M.434, $p280, $i281);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  /* %283 = load i128, i128* %39, align 16, !dbg !462, !psr.id !477, !verifier.code !62 */
  $i282 := $load.i128($M.434, $p38);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %283, i128* %40, align 16, !dbg !478, !psr.id !479, !verifier.code !62 */
  $M.435 := $store.i128($M.435, $p39, $i282);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  /* %284 = bitcast i128* %40 to { i64, i64 }*, !dbg !478, !psr.id !480, !verifier.code !62 */
  $p283 := $bitcast.ref.ref($p39);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  /* %285 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %284, i32 0, i32 0, !dbg !478, !psr.id !481, !verifier.code !62 */
  $p284 := $add.ref($add.ref($p283, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  /* %286 = load i64, i64* %285, align 16, !dbg !478, !psr.id !482, !verifier.code !62 */
  $i285 := $load.i64($M.435, $p284);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  /* %287 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %284, i32 0, i32 1, !dbg !478, !psr.id !483, !verifier.code !62 */
  $p286 := $add.ref($add.ref($p283, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  /* %288 = load i64, i64* %287, align 8, !dbg !478, !psr.id !484, !verifier.code !62 */
  $i287 := $load.i64($M.435, $p286);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  /* %289 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %286, i64 %288), !dbg !478, !psr.id !485, !verifier.code !62 */
  call $i288 := FStar_UInt128_uint128_to_uint64($i285, $i287);
  /* call void @llvm.dbg.value(metadata i64 %289, metadata !6648, metadata !DIExpression()), !dbg !6271, !psr.id !6649, !verifier.code !64 */
  call {:cexpr "c3"} boogie_si_record_i64($i288);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  /* %290 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %289), !dbg !488, !psr.id !489, !verifier.code !62 */
  call $p289 := FStar_UInt128_uint64_to_uint128($i288);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  /* %291 = bitcast i128* %41 to { i64, i64 }*, !dbg !488, !psr.id !490, !verifier.code !62 */
  $p290 := $bitcast.ref.ref($p40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  /* %292 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %291, i32 0, i32 0, !dbg !488, !psr.id !491, !verifier.code !62 */
  $p291 := $add.ref($add.ref($p290, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  /* %293 = extractvalue { i64, i64 } %290, 0, !dbg !488, !psr.id !492, !verifier.code !62 */
  $i292 := $extractvalue.i64($p289, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %293, i64* %292, align 16, !dbg !488, !psr.id !493, !verifier.code !62 */
  $M.436 := $store.i64($M.436, $p291, $i292);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  /* %294 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %291, i32 0, i32 1, !dbg !488, !psr.id !494, !verifier.code !62 */
  $p293 := $add.ref($add.ref($p290, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  /* %295 = extractvalue { i64, i64 } %290, 1, !dbg !488, !psr.id !495, !verifier.code !62 */
  $i294 := $extractvalue.i64($p289, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  /* store i64 %295, i64* %294, align 8, !dbg !488, !psr.id !496, !verifier.code !62 */
  $M.436 := $store.i64($M.436, $p293, $i294);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  /* %296 = load i128, i128* %41, align 16, !dbg !488, !psr.id !497, !verifier.code !62 */
  $i295 := $load.i128($M.436, $p40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %93, i128* %42, align 16, !dbg !498, !psr.id !499, !verifier.code !62 */
  $M.437 := $store.i128($M.437, $p41, $i92);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %297 = bitcast i128* %42 to { i64, i64 }*, !dbg !498, !psr.id !500, !verifier.code !62 */
  $p296 := $bitcast.ref.ref($p41);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %298 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %297, i32 0, i32 0, !dbg !498, !psr.id !501, !verifier.code !62 */
  $p297 := $add.ref($add.ref($p296, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %299 = load i64, i64* %298, align 16, !dbg !498, !psr.id !502, !verifier.code !62 */
  $i298 := $load.i64($M.437, $p297);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %300 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %297, i32 0, i32 1, !dbg !498, !psr.id !503, !verifier.code !62 */
  $p299 := $add.ref($add.ref($p296, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %301 = load i64, i64* %300, align 8, !dbg !498, !psr.id !504, !verifier.code !62 */
  $i300 := $load.i64($M.437, $p299);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %296, i128* %43, align 16, !dbg !498, !psr.id !505, !verifier.code !62 */
  $M.438 := $store.i128($M.438, $p42, $i295);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %302 = bitcast i128* %43 to { i64, i64 }*, !dbg !498, !psr.id !506, !verifier.code !62 */
  $p301 := $bitcast.ref.ref($p42);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %303 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %302, i32 0, i32 0, !dbg !498, !psr.id !507, !verifier.code !62 */
  $p302 := $add.ref($add.ref($p301, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %304 = load i64, i64* %303, align 16, !dbg !498, !psr.id !508, !verifier.code !62 */
  $i303 := $load.i64($M.438, $p302);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %305 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %302, i32 0, i32 1, !dbg !498, !psr.id !509, !verifier.code !62 */
  $p304 := $add.ref($add.ref($p301, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %306 = load i64, i64* %305, align 8, !dbg !498, !psr.id !510, !verifier.code !62 */
  $i305 := $load.i64($M.438, $p304);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %307 = call { i64, i64 } @FStar_UInt128_add(i64 %299, i64 %301, i64 %304, i64 %306), !dbg !498, !psr.id !511, !verifier.code !62 */
  call $p306 := FStar_UInt128_add($i298, $i300, $i303, $i305);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %308 = bitcast i128* %44 to { i64, i64 }*, !dbg !498, !psr.id !512, !verifier.code !62 */
  $p307 := $bitcast.ref.ref($p43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %309 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %308, i32 0, i32 0, !dbg !498, !psr.id !513, !verifier.code !62 */
  $p308 := $add.ref($add.ref($p307, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %310 = extractvalue { i64, i64 } %307, 0, !dbg !498, !psr.id !514, !verifier.code !62 */
  $i309 := $extractvalue.i64($p306, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %310, i64* %309, align 16, !dbg !498, !psr.id !515, !verifier.code !62 */
  $M.439 := $store.i64($M.439, $p308, $i309);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %311 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %308, i32 0, i32 1, !dbg !498, !psr.id !516, !verifier.code !62 */
  $p310 := $add.ref($add.ref($p307, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %312 = extractvalue { i64, i64 } %307, 1, !dbg !498, !psr.id !517, !verifier.code !62 */
  $i311 := $extractvalue.i64($p306, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %312, i64* %311, align 8, !dbg !498, !psr.id !518, !verifier.code !62 */
  $M.439 := $store.i64($M.439, $p310, $i311);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  /* %313 = load i128, i128* %44, align 16, !dbg !498, !psr.id !519, !verifier.code !62 */
  $i312 := $load.i128($M.439, $p43);
  /* call void @llvm.dbg.value(metadata i128 %313, metadata !6682, metadata !DIExpression()), !dbg !6271, !psr.id !6683, !verifier.code !64 */
  call {:cexpr "l_3"} boogie_si_record_i128($i312);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %313, i128* %45, align 16, !dbg !522, !psr.id !523, !verifier.code !62 */
  $M.440 := $store.i128($M.440, $p44, $i312);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  /* %314 = bitcast i128* %45 to { i64, i64 }*, !dbg !522, !psr.id !524, !verifier.code !62 */
  $p313 := $bitcast.ref.ref($p44);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  /* %315 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %314, i32 0, i32 0, !dbg !522, !psr.id !525, !verifier.code !62 */
  $p314 := $add.ref($add.ref($p313, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  /* %316 = load i64, i64* %315, align 16, !dbg !522, !psr.id !526, !verifier.code !62 */
  $i315 := $load.i64($M.440, $p314);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  /* %317 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %314, i32 0, i32 1, !dbg !522, !psr.id !527, !verifier.code !62 */
  $p316 := $add.ref($add.ref($p313, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  /* %318 = load i64, i64* %317, align 8, !dbg !522, !psr.id !528, !verifier.code !62 */
  $i317 := $load.i64($M.440, $p316);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  /* %319 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %316, i64 %318), !dbg !522, !psr.id !529, !verifier.code !62 */
  call $i318 := FStar_UInt128_uint128_to_uint64($i315, $i317);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 56} true;
  assume {:verifier.code 0} true;
  /* %320 = and i64 %319, 2251799813685247, !dbg !530, !psr.id !531, !verifier.code !62 */
  $i319 := $and.i64($i318, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %320, metadata !6694, metadata !DIExpression()), !dbg !6271, !psr.id !6695, !verifier.code !64 */
  call {:cexpr "tmp4"} boogie_si_record_i64($i319);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %313, i128* %46, align 16, !dbg !534, !psr.id !535, !verifier.code !62 */
  $M.441 := $store.i128($M.441, $p45, $i312);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* %321 = bitcast i128* %46 to { i64, i64 }*, !dbg !534, !psr.id !536, !verifier.code !62 */
  $p320 := $bitcast.ref.ref($p45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* %322 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %321, i32 0, i32 0, !dbg !534, !psr.id !537, !verifier.code !62 */
  $p321 := $add.ref($add.ref($p320, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* %323 = load i64, i64* %322, align 16, !dbg !534, !psr.id !538, !verifier.code !62 */
  $i322 := $load.i64($M.441, $p321);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* %324 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %321, i32 0, i32 1, !dbg !534, !psr.id !539, !verifier.code !62 */
  $p323 := $add.ref($add.ref($p320, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* %325 = load i64, i64* %324, align 8, !dbg !534, !psr.id !540, !verifier.code !62 */
  $i324 := $load.i64($M.441, $p323);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* %326 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %323, i64 %325, i32 51), !dbg !534, !psr.id !541, !verifier.code !62 */
  call $p325 := FStar_UInt128_shift_right($i322, $i324, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* %327 = bitcast i128* %47 to { i64, i64 }*, !dbg !534, !psr.id !542, !verifier.code !62 */
  $p326 := $bitcast.ref.ref($p46);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* %328 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %327, i32 0, i32 0, !dbg !534, !psr.id !543, !verifier.code !62 */
  $p327 := $add.ref($add.ref($p326, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* %329 = extractvalue { i64, i64 } %326, 0, !dbg !534, !psr.id !544, !verifier.code !62 */
  $i328 := $extractvalue.i64($p325, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %329, i64* %328, align 16, !dbg !534, !psr.id !545, !verifier.code !62 */
  $M.442 := $store.i64($M.442, $p327, $i328);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* %330 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %327, i32 0, i32 1, !dbg !534, !psr.id !546, !verifier.code !62 */
  $p329 := $add.ref($add.ref($p326, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* %331 = extractvalue { i64, i64 } %326, 1, !dbg !534, !psr.id !547, !verifier.code !62 */
  $i330 := $extractvalue.i64($p325, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %331, i64* %330, align 8, !dbg !534, !psr.id !548, !verifier.code !62 */
  $M.442 := $store.i64($M.442, $p329, $i330);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  /* %332 = load i128, i128* %47, align 16, !dbg !534, !psr.id !549, !verifier.code !62 */
  $i331 := $load.i128($M.442, $p46);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %332, i128* %48, align 16, !dbg !550, !psr.id !551, !verifier.code !62 */
  $M.443 := $store.i128($M.443, $p47, $i331);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  /* %333 = bitcast i128* %48 to { i64, i64 }*, !dbg !550, !psr.id !552, !verifier.code !62 */
  $p332 := $bitcast.ref.ref($p47);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  /* %334 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %333, i32 0, i32 0, !dbg !550, !psr.id !553, !verifier.code !62 */
  $p333 := $add.ref($add.ref($p332, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  /* %335 = load i64, i64* %334, align 16, !dbg !550, !psr.id !554, !verifier.code !62 */
  $i334 := $load.i64($M.443, $p333);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  /* %336 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %333, i32 0, i32 1, !dbg !550, !psr.id !555, !verifier.code !62 */
  $p335 := $add.ref($add.ref($p332, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  /* %337 = load i64, i64* %336, align 8, !dbg !550, !psr.id !556, !verifier.code !62 */
  $i336 := $load.i64($M.443, $p335);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  /* %338 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %335, i64 %337), !dbg !550, !psr.id !557, !verifier.code !62 */
  call $i337 := FStar_UInt128_uint128_to_uint64($i334, $i336);
  /* call void @llvm.dbg.value(metadata i64 %338, metadata !6720, metadata !DIExpression()), !dbg !6271, !psr.id !6721, !verifier.code !64 */
  call {:cexpr "c4"} boogie_si_record_i64($i337);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 356, 28} true;
  assume {:verifier.code 0} true;
  /* %339 = mul i64 %338, 19, !dbg !560, !psr.id !561, !verifier.code !62 */
  $i338 := $mul.i64($i337, 19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 356, 23} true;
  assume {:verifier.code 0} true;
  /* %340 = add i64 %124, %339, !dbg !562, !psr.id !563, !verifier.code !62 */
  $i339 := $add.i64($i123, $i338);
  /* call void @llvm.dbg.value(metadata i64 %340, metadata !6726, metadata !DIExpression()), !dbg !6271, !psr.id !6727, !verifier.code !64 */
  call {:cexpr "l_4"} boogie_si_record_i64($i339);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 357, 24} true;
  assume {:verifier.code 0} true;
  /* %341 = and i64 %340, 2251799813685247, !dbg !566, !psr.id !567, !verifier.code !62 */
  $i340 := $and.i64($i339, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %341, metadata !6730, metadata !DIExpression()), !dbg !6271, !psr.id !6731, !verifier.code !64 */
  call {:cexpr "tmp0_"} boogie_si_record_i64($i340);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 358, 21} true;
  assume {:verifier.code 0} true;
  /* %342 = lshr i64 %340, 51, !dbg !570, !psr.id !571, !verifier.code !62 */
  $i341 := $lshr.i64($i339, 51);
  /* call void @llvm.dbg.value(metadata i64 %342, metadata !6734, metadata !DIExpression()), !dbg !6271, !psr.id !6735, !verifier.code !64 */
  call {:cexpr "c5"} boogie_si_record_i64($i341);
  /* call void @llvm.dbg.value(metadata i64 %341, metadata !6736, metadata !DIExpression()), !dbg !6271, !psr.id !6737, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 360, 22} true;
  assume {:verifier.code 0} true;
  /* %343 = add i64 %173, %342, !dbg !576, !psr.id !577, !verifier.code !62 */
  $i342 := $add.i64($i172, $i341);
  /* call void @llvm.dbg.value(metadata i64 %343, metadata !6740, metadata !DIExpression()), !dbg !6271, !psr.id !6741, !verifier.code !64 */
  call {:cexpr "o1"} boogie_si_record_i64($i342);
  /* call void @llvm.dbg.value(metadata i64 %222, metadata !6742, metadata !DIExpression()), !dbg !6271, !psr.id !6743, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %271, metadata !6744, metadata !DIExpression()), !dbg !6271, !psr.id !6745, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %320, metadata !6746, metadata !DIExpression()), !dbg !6271, !psr.id !6747, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 364, 3} true;
  assume {:verifier.code 0} true;
  /* %344 = getelementptr inbounds i64, i64* %0, i64 0, !dbg !586, !psr.id !587, !verifier.code !62 */
  $p343 := $add.ref($p0, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 364, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %341, i64* %344, align 8, !dbg !588, !psr.id !589, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p343, $i340);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 365, 3} true;
  assume {:verifier.code 0} true;
  /* %345 = getelementptr inbounds i64, i64* %0, i64 1, !dbg !590, !psr.id !591, !verifier.code !62 */
  $p344 := $add.ref($p0, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 365, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %343, i64* %345, align 8, !dbg !592, !psr.id !593, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p344, $i342);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 366, 3} true;
  assume {:verifier.code 0} true;
  /* %346 = getelementptr inbounds i64, i64* %0, i64 2, !dbg !594, !psr.id !595, !verifier.code !62 */
  $p345 := $add.ref($p0, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 366, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %222, i64* %346, align 8, !dbg !596, !psr.id !597, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p345, $i221);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 367, 3} true;
  assume {:verifier.code 0} true;
  /* %347 = getelementptr inbounds i64, i64* %0, i64 3, !dbg !598, !psr.id !599, !verifier.code !62 */
  $p346 := $add.ref($p0, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 367, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %271, i64* %347, align 8, !dbg !600, !psr.id !601, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p346, $i270);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 368, 3} true;
  assume {:verifier.code 0} true;
  /* %348 = getelementptr inbounds i64, i64* %0, i64 4, !dbg !602, !psr.id !603, !verifier.code !62 */
  $p347 := $add.ref($p0, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 368, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %320, i64* %348, align 8, !dbg !604, !psr.id !605, !verifier.code !62 */
  $M.0 := $store.i64($M.0, $p347, $i319);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 369, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !606, !psr.id !607, !verifier.code !62 */
  $exn := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_fmul2: ref;
axiom (Hacl_Impl_Curve25519_Field51_fmul2 == $sub.ref(0, 30960));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fmul2($p0: ref, $p1: ref, $p2: ref, $p3: ref)
{
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
  var $p8: ref;
  var $p9: ref;
  var $p10: ref;
  var $p11: ref;
  var $p12: ref;
  var $p13: ref;
  var $p14: ref;
  var $p15: ref;
  var $p16: ref;
  var $p17: ref;
  var $p18: ref;
  var $p19: ref;
  var $p20: ref;
  var $p21: ref;
  var $p22: ref;
  var $p23: ref;
  var $p24: ref;
  var $p25: ref;
  var $p26: ref;
  var $p27: ref;
  var $p28: ref;
  var $p29: ref;
  var $p30: ref;
  var $p31: ref;
  var $p32: ref;
  var $p33: ref;
  var $p34: ref;
  var $p35: ref;
  var $p36: ref;
  var $p37: ref;
  var $p38: ref;
  var $p39: ref;
  var $p40: ref;
  var $p41: ref;
  var $p42: ref;
  var $p43: ref;
  var $p44: ref;
  var $p45: ref;
  var $p46: ref;
  var $p47: ref;
  var $p48: ref;
  var $p49: ref;
  var $p50: ref;
  var $p51: ref;
  var $p52: ref;
  var $p53: ref;
  var $p54: ref;
  var $p55: ref;
  var $p56: ref;
  var $p57: ref;
  var $p58: ref;
  var $p59: ref;
  var $p60: ref;
  var $p61: ref;
  var $p62: ref;
  var $p63: ref;
  var $p64: ref;
  var $p65: ref;
  var $p66: ref;
  var $p67: ref;
  var $p68: ref;
  var $p69: ref;
  var $p70: ref;
  var $p71: ref;
  var $p72: ref;
  var $p73: ref;
  var $p74: ref;
  var $p75: ref;
  var $p76: ref;
  var $p77: ref;
  var $p78: ref;
  var $p79: ref;
  var $p80: ref;
  var $p81: ref;
  var $p82: ref;
  var $p83: ref;
  var $p84: ref;
  var $p85: ref;
  var $p86: ref;
  var $p87: ref;
  var $p88: ref;
  var $p89: ref;
  var $p90: ref;
  var $p91: ref;
  var $p92: ref;
  var $p93: ref;
  var $p94: ref;
  var $p95: ref;
  var $p96: ref;
  var $p97: ref;
  var $p98: ref;
  var $p99: ref;
  var $p100: ref;
  var $p101: ref;
  var $p102: ref;
  var $p103: ref;
  var $p104: ref;
  var $p105: ref;
  var $p106: ref;
  var $p107: ref;
  var $p108: ref;
  var $p109: ref;
  var $p110: ref;
  var $p111: ref;
  var $p112: ref;
  var $p113: ref;
  var $p114: ref;
  var $p115: ref;
  var $p116: ref;
  var $p117: ref;
  var $p118: ref;
  var $p119: ref;
  var $p120: ref;
  var $p121: ref;
  var $p122: ref;
  var $p123: ref;
  var $p124: ref;
  var $p125: ref;
  var $p126: ref;
  var $p127: ref;
  var $p128: ref;
  var $p129: ref;
  var $p130: ref;
  var $p131: ref;
  var $p132: ref;
  var $p133: ref;
  var $p134: ref;
  var $p135: ref;
  var $p136: ref;
  var $p137: ref;
  var $p138: ref;
  var $p139: ref;
  var $p140: ref;
  var $p141: ref;
  var $p142: ref;
  var $p143: ref;
  var $p144: ref;
  var $p145: ref;
  var $p146: ref;
  var $p147: ref;
  var $p148: ref;
  var $p149: ref;
  var $p150: ref;
  var $p151: ref;
  var $p152: ref;
  var $p153: ref;
  var $p154: ref;
  var $p155: ref;
  var $p156: ref;
  var $p157: ref;
  var $p158: ref;
  var $p159: ref;
  var $p160: ref;
  var $p161: ref;
  var $p162: ref;
  var $p163: ref;
  var $p164: ref;
  var $p165: ref;
  var $p166: ref;
  var $p167: ref;
  var $p168: ref;
  var $p169: ref;
  var $p170: ref;
  var $p171: ref;
  var $p172: ref;
  var $p173: ref;
  var $p174: ref;
  var $p175: ref;
  var $p176: ref;
  var $p177: ref;
  var $p178: ref;
  var $p179: ref;
  var $p180: ref;
  var $p181: ref;
  var $p182: ref;
  var $p183: ref;
  var $p184: ref;
  var $p185: ref;
  var $p186: ref;
  var $p187: ref;
  var $p188: ref;
  var $p189: ref;
  var $p190: ref;
  var $p191: ref;
  var $p192: ref;
  var $p193: ref;
  var $p194: ref;
  var $p195: ref;
  var $p196: ref;
  var $p197: ref;
  var $p198: ref;
  var $p199: ref;
  var $p200: ref;
  var $p201: ref;
  var $p202: ref;
  var $p203: ref;
  var $p204: ref;
  var $p205: ref;
  var $p206: ref;
  var $p207: ref;
  var $p208: ref;
  var $p209: ref;
  var $p210: ref;
  var $p211: ref;
  var $p212: ref;
  var $p213: ref;
  var $p214: ref;
  var $p215: ref;
  var $p216: ref;
  var $p217: ref;
  var $p218: ref;
  var $p219: ref;
  var $p220: ref;
  var $p221: ref;
  var $p222: ref;
  var $p223: ref;
  var $p224: ref;
  var $p225: ref;
  var $p226: ref;
  var $p227: ref;
  var $p228: ref;
  var $p229: ref;
  var $p230: ref;
  var $p231: ref;
  var $p232: ref;
  var $p233: ref;
  var $p234: ref;
  var $p235: ref;
  var $p236: ref;
  var $p237: ref;
  var $p238: ref;
  var $p239: ref;
  var $p240: ref;
  var $p241: ref;
  var $p242: ref;
  var $p243: ref;
  var $p244: ref;
  var $p245: ref;
  var $p246: ref;
  var $p247: ref;
  var $p248: ref;
  var $p249: ref;
  var $p250: ref;
  var $p251: ref;
  var $p252: ref;
  var $p253: ref;
  var $p254: ref;
  var $i255: i64;
  var $p256: ref;
  var $i257: i64;
  var $p258: ref;
  var $i259: i64;
  var $p260: ref;
  var $i261: i64;
  var $p262: ref;
  var $i263: i64;
  var $p264: ref;
  var $i265: i64;
  var $p266: ref;
  var $i267: i64;
  var $p268: ref;
  var $i269: i64;
  var $p270: ref;
  var $i271: i64;
  var $p272: ref;
  var $i273: i64;
  var $p274: ref;
  var $i275: i64;
  var $p276: ref;
  var $i277: i64;
  var $p278: ref;
  var $i279: i64;
  var $p280: ref;
  var $i281: i64;
  var $p282: ref;
  var $i283: i64;
  var $p284: ref;
  var $i285: i64;
  var $p286: ref;
  var $i287: i64;
  var $p288: ref;
  var $i289: i64;
  var $p290: ref;
  var $i291: i64;
  var $p292: ref;
  var $i293: i64;
  var $i294: i64;
  var $i295: i64;
  var $i296: i64;
  var $i297: i64;
  var $i298: i64;
  var $i299: i64;
  var $i300: i64;
  var $i301: i64;
  var $p302: ref;
  var $p303: ref;
  var $p304: ref;
  var $i305: i64;
  var $p306: ref;
  var $i307: i64;
  var $i308: i128;
  var $p309: ref;
  var $p310: ref;
  var $p311: ref;
  var $i312: i64;
  var $p313: ref;
  var $i314: i64;
  var $i315: i128;
  var $p316: ref;
  var $p317: ref;
  var $p318: ref;
  var $i319: i64;
  var $p320: ref;
  var $i321: i64;
  var $i322: i128;
  var $p323: ref;
  var $p324: ref;
  var $p325: ref;
  var $i326: i64;
  var $p327: ref;
  var $i328: i64;
  var $i329: i128;
  var $p330: ref;
  var $p331: ref;
  var $p332: ref;
  var $i333: i64;
  var $p334: ref;
  var $i335: i64;
  var $i336: i128;
  var $p337: ref;
  var $p338: ref;
  var $p339: ref;
  var $i340: i64;
  var $p341: ref;
  var $i342: i64;
  var $i343: i128;
  var $p344: ref;
  var $p345: ref;
  var $i346: i64;
  var $p347: ref;
  var $i348: i64;
  var $p349: ref;
  var $p350: ref;
  var $i351: i64;
  var $p352: ref;
  var $i353: i64;
  var $p354: ref;
  var $p355: ref;
  var $p356: ref;
  var $i357: i64;
  var $p358: ref;
  var $i359: i64;
  var $i360: i128;
  var $p361: ref;
  var $p362: ref;
  var $p363: ref;
  var $i364: i64;
  var $p365: ref;
  var $i366: i64;
  var $i367: i128;
  var $p368: ref;
  var $p369: ref;
  var $i370: i64;
  var $p371: ref;
  var $i372: i64;
  var $p373: ref;
  var $p374: ref;
  var $i375: i64;
  var $p376: ref;
  var $i377: i64;
  var $p378: ref;
  var $p379: ref;
  var $p380: ref;
  var $i381: i64;
  var $p382: ref;
  var $i383: i64;
  var $i384: i128;
  var $p385: ref;
  var $p386: ref;
  var $p387: ref;
  var $i388: i64;
  var $p389: ref;
  var $i390: i64;
  var $i391: i128;
  var $p392: ref;
  var $p393: ref;
  var $i394: i64;
  var $p395: ref;
  var $i396: i64;
  var $p397: ref;
  var $p398: ref;
  var $i399: i64;
  var $p400: ref;
  var $i401: i64;
  var $p402: ref;
  var $p403: ref;
  var $p404: ref;
  var $i405: i64;
  var $p406: ref;
  var $i407: i64;
  var $i408: i128;
  var $p409: ref;
  var $p410: ref;
  var $p411: ref;
  var $i412: i64;
  var $p413: ref;
  var $i414: i64;
  var $i415: i128;
  var $p416: ref;
  var $p417: ref;
  var $i418: i64;
  var $p419: ref;
  var $i420: i64;
  var $p421: ref;
  var $p422: ref;
  var $i423: i64;
  var $p424: ref;
  var $i425: i64;
  var $p426: ref;
  var $p427: ref;
  var $p428: ref;
  var $i429: i64;
  var $p430: ref;
  var $i431: i64;
  var $i432: i128;
  var $p433: ref;
  var $p434: ref;
  var $p435: ref;
  var $i436: i64;
  var $p437: ref;
  var $i438: i64;
  var $i439: i128;
  var $p440: ref;
  var $p441: ref;
  var $i442: i64;
  var $p443: ref;
  var $i444: i64;
  var $p445: ref;
  var $p446: ref;
  var $i447: i64;
  var $p448: ref;
  var $i449: i64;
  var $p450: ref;
  var $p451: ref;
  var $p452: ref;
  var $i453: i64;
  var $p454: ref;
  var $i455: i64;
  var $i456: i128;
  var $p457: ref;
  var $p458: ref;
  var $p459: ref;
  var $i460: i64;
  var $p461: ref;
  var $i462: i64;
  var $i463: i128;
  var $p464: ref;
  var $p465: ref;
  var $i466: i64;
  var $p467: ref;
  var $i468: i64;
  var $p469: ref;
  var $p470: ref;
  var $i471: i64;
  var $p472: ref;
  var $i473: i64;
  var $p474: ref;
  var $p475: ref;
  var $p476: ref;
  var $i477: i64;
  var $p478: ref;
  var $i479: i64;
  var $i480: i128;
  var $p481: ref;
  var $p482: ref;
  var $p483: ref;
  var $i484: i64;
  var $p485: ref;
  var $i486: i64;
  var $i487: i128;
  var $p488: ref;
  var $p489: ref;
  var $i490: i64;
  var $p491: ref;
  var $i492: i64;
  var $p493: ref;
  var $p494: ref;
  var $i495: i64;
  var $p496: ref;
  var $i497: i64;
  var $p498: ref;
  var $p499: ref;
  var $p500: ref;
  var $i501: i64;
  var $p502: ref;
  var $i503: i64;
  var $i504: i128;
  var $p505: ref;
  var $p506: ref;
  var $p507: ref;
  var $i508: i64;
  var $p509: ref;
  var $i510: i64;
  var $i511: i128;
  var $p512: ref;
  var $p513: ref;
  var $i514: i64;
  var $p515: ref;
  var $i516: i64;
  var $p517: ref;
  var $p518: ref;
  var $i519: i64;
  var $p520: ref;
  var $i521: i64;
  var $p522: ref;
  var $p523: ref;
  var $p524: ref;
  var $i525: i64;
  var $p526: ref;
  var $i527: i64;
  var $i528: i128;
  var $p529: ref;
  var $p530: ref;
  var $p531: ref;
  var $i532: i64;
  var $p533: ref;
  var $i534: i64;
  var $i535: i128;
  var $p536: ref;
  var $p537: ref;
  var $i538: i64;
  var $p539: ref;
  var $i540: i64;
  var $p541: ref;
  var $p542: ref;
  var $i543: i64;
  var $p544: ref;
  var $i545: i64;
  var $p546: ref;
  var $p547: ref;
  var $p548: ref;
  var $i549: i64;
  var $p550: ref;
  var $i551: i64;
  var $i552: i128;
  var $p553: ref;
  var $p554: ref;
  var $p555: ref;
  var $i556: i64;
  var $p557: ref;
  var $i558: i64;
  var $i559: i128;
  var $p560: ref;
  var $p561: ref;
  var $i562: i64;
  var $p563: ref;
  var $i564: i64;
  var $p565: ref;
  var $p566: ref;
  var $i567: i64;
  var $p568: ref;
  var $i569: i64;
  var $p570: ref;
  var $p571: ref;
  var $p572: ref;
  var $i573: i64;
  var $p574: ref;
  var $i575: i64;
  var $i576: i128;
  var $p577: ref;
  var $p578: ref;
  var $p579: ref;
  var $i580: i64;
  var $p581: ref;
  var $i582: i64;
  var $i583: i128;
  var $p584: ref;
  var $p585: ref;
  var $i586: i64;
  var $p587: ref;
  var $i588: i64;
  var $p589: ref;
  var $p590: ref;
  var $i591: i64;
  var $p592: ref;
  var $i593: i64;
  var $p594: ref;
  var $p595: ref;
  var $p596: ref;
  var $i597: i64;
  var $p598: ref;
  var $i599: i64;
  var $i600: i128;
  var $p601: ref;
  var $p602: ref;
  var $p603: ref;
  var $i604: i64;
  var $p605: ref;
  var $i606: i64;
  var $i607: i128;
  var $p608: ref;
  var $p609: ref;
  var $i610: i64;
  var $p611: ref;
  var $i612: i64;
  var $p613: ref;
  var $p614: ref;
  var $i615: i64;
  var $p616: ref;
  var $i617: i64;
  var $p618: ref;
  var $p619: ref;
  var $p620: ref;
  var $i621: i64;
  var $p622: ref;
  var $i623: i64;
  var $i624: i128;
  var $p625: ref;
  var $p626: ref;
  var $p627: ref;
  var $i628: i64;
  var $p629: ref;
  var $i630: i64;
  var $i631: i128;
  var $p632: ref;
  var $p633: ref;
  var $i634: i64;
  var $p635: ref;
  var $i636: i64;
  var $p637: ref;
  var $p638: ref;
  var $i639: i64;
  var $p640: ref;
  var $i641: i64;
  var $p642: ref;
  var $p643: ref;
  var $p644: ref;
  var $i645: i64;
  var $p646: ref;
  var $i647: i64;
  var $i648: i128;
  var $p649: ref;
  var $p650: ref;
  var $p651: ref;
  var $i652: i64;
  var $p653: ref;
  var $i654: i64;
  var $i655: i128;
  var $p656: ref;
  var $p657: ref;
  var $i658: i64;
  var $p659: ref;
  var $i660: i64;
  var $p661: ref;
  var $p662: ref;
  var $i663: i64;
  var $p664: ref;
  var $i665: i64;
  var $p666: ref;
  var $p667: ref;
  var $p668: ref;
  var $i669: i64;
  var $p670: ref;
  var $i671: i64;
  var $i672: i128;
  var $p673: ref;
  var $p674: ref;
  var $p675: ref;
  var $i676: i64;
  var $p677: ref;
  var $i678: i64;
  var $i679: i128;
  var $p680: ref;
  var $p681: ref;
  var $i682: i64;
  var $p683: ref;
  var $i684: i64;
  var $p685: ref;
  var $p686: ref;
  var $i687: i64;
  var $p688: ref;
  var $i689: i64;
  var $p690: ref;
  var $p691: ref;
  var $p692: ref;
  var $i693: i64;
  var $p694: ref;
  var $i695: i64;
  var $i696: i128;
  var $p697: ref;
  var $p698: ref;
  var $p699: ref;
  var $i700: i64;
  var $p701: ref;
  var $i702: i64;
  var $i703: i128;
  var $p704: ref;
  var $p705: ref;
  var $i706: i64;
  var $p707: ref;
  var $i708: i64;
  var $p709: ref;
  var $p710: ref;
  var $i711: i64;
  var $p712: ref;
  var $i713: i64;
  var $p714: ref;
  var $p715: ref;
  var $p716: ref;
  var $i717: i64;
  var $p718: ref;
  var $i719: i64;
  var $i720: i128;
  var $p721: ref;
  var $p722: ref;
  var $p723: ref;
  var $i724: i64;
  var $p725: ref;
  var $i726: i64;
  var $i727: i128;
  var $p728: ref;
  var $p729: ref;
  var $i730: i64;
  var $p731: ref;
  var $i732: i64;
  var $p733: ref;
  var $p734: ref;
  var $i735: i64;
  var $p736: ref;
  var $i737: i64;
  var $p738: ref;
  var $p739: ref;
  var $p740: ref;
  var $i741: i64;
  var $p742: ref;
  var $i743: i64;
  var $i744: i128;
  var $p745: ref;
  var $p746: ref;
  var $p747: ref;
  var $i748: i64;
  var $p749: ref;
  var $i750: i64;
  var $i751: i128;
  var $p752: ref;
  var $p753: ref;
  var $i754: i64;
  var $p755: ref;
  var $i756: i64;
  var $p757: ref;
  var $p758: ref;
  var $i759: i64;
  var $p760: ref;
  var $i761: i64;
  var $p762: ref;
  var $p763: ref;
  var $p764: ref;
  var $i765: i64;
  var $p766: ref;
  var $i767: i64;
  var $i768: i128;
  var $p769: ref;
  var $p770: ref;
  var $p771: ref;
  var $i772: i64;
  var $p773: ref;
  var $i774: i64;
  var $i775: i128;
  var $p776: ref;
  var $p777: ref;
  var $i778: i64;
  var $p779: ref;
  var $i780: i64;
  var $p781: ref;
  var $p782: ref;
  var $i783: i64;
  var $p784: ref;
  var $i785: i64;
  var $p786: ref;
  var $p787: ref;
  var $p788: ref;
  var $i789: i64;
  var $p790: ref;
  var $i791: i64;
  var $i792: i128;
  var $p793: ref;
  var $p794: ref;
  var $p795: ref;
  var $i796: i64;
  var $p797: ref;
  var $i798: i64;
  var $i799: i128;
  var $p800: ref;
  var $p801: ref;
  var $i802: i64;
  var $p803: ref;
  var $i804: i64;
  var $p805: ref;
  var $p806: ref;
  var $i807: i64;
  var $p808: ref;
  var $i809: i64;
  var $p810: ref;
  var $p811: ref;
  var $p812: ref;
  var $i813: i64;
  var $p814: ref;
  var $i815: i64;
  var $i816: i128;
  var $p817: ref;
  var $p818: ref;
  var $p819: ref;
  var $i820: i64;
  var $p821: ref;
  var $i822: i64;
  var $i823: i128;
  var $p824: ref;
  var $p825: ref;
  var $p826: ref;
  var $i827: i64;
  var $p828: ref;
  var $i829: i64;
  var $i830: i128;
  var $p831: ref;
  var $p832: ref;
  var $p833: ref;
  var $i834: i64;
  var $p835: ref;
  var $i836: i64;
  var $i837: i128;
  var $p838: ref;
  var $p839: ref;
  var $p840: ref;
  var $i841: i64;
  var $p842: ref;
  var $i843: i64;
  var $i844: i128;
  var $p845: ref;
  var $p846: ref;
  var $p847: ref;
  var $i848: i64;
  var $p849: ref;
  var $i850: i64;
  var $i851: i128;
  var $p852: ref;
  var $p853: ref;
  var $p854: ref;
  var $i855: i64;
  var $p856: ref;
  var $i857: i64;
  var $i858: i128;
  var $p859: ref;
  var $p860: ref;
  var $i861: i64;
  var $p862: ref;
  var $i863: i64;
  var $p864: ref;
  var $p865: ref;
  var $i866: i64;
  var $p867: ref;
  var $i868: i64;
  var $p869: ref;
  var $p870: ref;
  var $p871: ref;
  var $i872: i64;
  var $p873: ref;
  var $i874: i64;
  var $i875: i128;
  var $p876: ref;
  var $p877: ref;
  var $p878: ref;
  var $i879: i64;
  var $p880: ref;
  var $i881: i64;
  var $i882: i128;
  var $p883: ref;
  var $p884: ref;
  var $i885: i64;
  var $p886: ref;
  var $i887: i64;
  var $p888: ref;
  var $p889: ref;
  var $i890: i64;
  var $p891: ref;
  var $i892: i64;
  var $p893: ref;
  var $p894: ref;
  var $p895: ref;
  var $i896: i64;
  var $p897: ref;
  var $i898: i64;
  var $i899: i128;
  var $p900: ref;
  var $p901: ref;
  var $p902: ref;
  var $i903: i64;
  var $p904: ref;
  var $i905: i64;
  var $i906: i128;
  var $p907: ref;
  var $p908: ref;
  var $i909: i64;
  var $p910: ref;
  var $i911: i64;
  var $p912: ref;
  var $p913: ref;
  var $i914: i64;
  var $p915: ref;
  var $i916: i64;
  var $p917: ref;
  var $p918: ref;
  var $p919: ref;
  var $i920: i64;
  var $p921: ref;
  var $i922: i64;
  var $i923: i128;
  var $p924: ref;
  var $p925: ref;
  var $p926: ref;
  var $i927: i64;
  var $p928: ref;
  var $i929: i64;
  var $i930: i128;
  var $p931: ref;
  var $p932: ref;
  var $i933: i64;
  var $p934: ref;
  var $i935: i64;
  var $p936: ref;
  var $p937: ref;
  var $i938: i64;
  var $p939: ref;
  var $i940: i64;
  var $p941: ref;
  var $p942: ref;
  var $p943: ref;
  var $i944: i64;
  var $p945: ref;
  var $i946: i64;
  var $i947: i128;
  var $p948: ref;
  var $p949: ref;
  var $p950: ref;
  var $i951: i64;
  var $p952: ref;
  var $i953: i64;
  var $i954: i128;
  var $p955: ref;
  var $p956: ref;
  var $i957: i64;
  var $p958: ref;
  var $i959: i64;
  var $p960: ref;
  var $p961: ref;
  var $i962: i64;
  var $p963: ref;
  var $i964: i64;
  var $p965: ref;
  var $p966: ref;
  var $p967: ref;
  var $i968: i64;
  var $p969: ref;
  var $i970: i64;
  var $i971: i128;
  var $p972: ref;
  var $p973: ref;
  var $p974: ref;
  var $i975: i64;
  var $p976: ref;
  var $i977: i64;
  var $i978: i128;
  var $p979: ref;
  var $p980: ref;
  var $i981: i64;
  var $p982: ref;
  var $i983: i64;
  var $p984: ref;
  var $p985: ref;
  var $i986: i64;
  var $p987: ref;
  var $i988: i64;
  var $p989: ref;
  var $p990: ref;
  var $p991: ref;
  var $i992: i64;
  var $p993: ref;
  var $i994: i64;
  var $i995: i128;
  var $p996: ref;
  var $p997: ref;
  var $p998: ref;
  var $i999: i64;
  var $p1000: ref;
  var $i1001: i64;
  var $i1002: i128;
  var $p1003: ref;
  var $p1004: ref;
  var $i1005: i64;
  var $p1006: ref;
  var $i1007: i64;
  var $p1008: ref;
  var $p1009: ref;
  var $i1010: i64;
  var $p1011: ref;
  var $i1012: i64;
  var $p1013: ref;
  var $p1014: ref;
  var $p1015: ref;
  var $i1016: i64;
  var $p1017: ref;
  var $i1018: i64;
  var $i1019: i128;
  var $p1020: ref;
  var $p1021: ref;
  var $p1022: ref;
  var $i1023: i64;
  var $p1024: ref;
  var $i1025: i64;
  var $i1026: i128;
  var $p1027: ref;
  var $p1028: ref;
  var $i1029: i64;
  var $p1030: ref;
  var $i1031: i64;
  var $p1032: ref;
  var $p1033: ref;
  var $i1034: i64;
  var $p1035: ref;
  var $i1036: i64;
  var $p1037: ref;
  var $p1038: ref;
  var $p1039: ref;
  var $i1040: i64;
  var $p1041: ref;
  var $i1042: i64;
  var $i1043: i128;
  var $p1044: ref;
  var $p1045: ref;
  var $p1046: ref;
  var $i1047: i64;
  var $p1048: ref;
  var $i1049: i64;
  var $i1050: i128;
  var $p1051: ref;
  var $p1052: ref;
  var $i1053: i64;
  var $p1054: ref;
  var $i1055: i64;
  var $p1056: ref;
  var $p1057: ref;
  var $i1058: i64;
  var $p1059: ref;
  var $i1060: i64;
  var $p1061: ref;
  var $p1062: ref;
  var $p1063: ref;
  var $i1064: i64;
  var $p1065: ref;
  var $i1066: i64;
  var $i1067: i128;
  var $p1068: ref;
  var $p1069: ref;
  var $p1070: ref;
  var $i1071: i64;
  var $p1072: ref;
  var $i1073: i64;
  var $i1074: i128;
  var $p1075: ref;
  var $p1076: ref;
  var $i1077: i64;
  var $p1078: ref;
  var $i1079: i64;
  var $p1080: ref;
  var $p1081: ref;
  var $i1082: i64;
  var $p1083: ref;
  var $i1084: i64;
  var $p1085: ref;
  var $p1086: ref;
  var $p1087: ref;
  var $i1088: i64;
  var $p1089: ref;
  var $i1090: i64;
  var $i1091: i128;
  var $p1092: ref;
  var $p1093: ref;
  var $p1094: ref;
  var $i1095: i64;
  var $p1096: ref;
  var $i1097: i64;
  var $i1098: i128;
  var $p1099: ref;
  var $p1100: ref;
  var $i1101: i64;
  var $p1102: ref;
  var $i1103: i64;
  var $p1104: ref;
  var $p1105: ref;
  var $i1106: i64;
  var $p1107: ref;
  var $i1108: i64;
  var $p1109: ref;
  var $p1110: ref;
  var $p1111: ref;
  var $i1112: i64;
  var $p1113: ref;
  var $i1114: i64;
  var $i1115: i128;
  var $p1116: ref;
  var $p1117: ref;
  var $p1118: ref;
  var $i1119: i64;
  var $p1120: ref;
  var $i1121: i64;
  var $i1122: i128;
  var $p1123: ref;
  var $p1124: ref;
  var $i1125: i64;
  var $p1126: ref;
  var $i1127: i64;
  var $p1128: ref;
  var $p1129: ref;
  var $i1130: i64;
  var $p1131: ref;
  var $i1132: i64;
  var $p1133: ref;
  var $p1134: ref;
  var $p1135: ref;
  var $i1136: i64;
  var $p1137: ref;
  var $i1138: i64;
  var $i1139: i128;
  var $p1140: ref;
  var $p1141: ref;
  var $p1142: ref;
  var $i1143: i64;
  var $p1144: ref;
  var $i1145: i64;
  var $i1146: i128;
  var $p1147: ref;
  var $p1148: ref;
  var $i1149: i64;
  var $p1150: ref;
  var $i1151: i64;
  var $p1152: ref;
  var $p1153: ref;
  var $i1154: i64;
  var $p1155: ref;
  var $i1156: i64;
  var $p1157: ref;
  var $p1158: ref;
  var $p1159: ref;
  var $i1160: i64;
  var $p1161: ref;
  var $i1162: i64;
  var $i1163: i128;
  var $p1164: ref;
  var $p1165: ref;
  var $p1166: ref;
  var $i1167: i64;
  var $p1168: ref;
  var $i1169: i64;
  var $i1170: i128;
  var $p1171: ref;
  var $p1172: ref;
  var $i1173: i64;
  var $p1174: ref;
  var $i1175: i64;
  var $p1176: ref;
  var $p1177: ref;
  var $i1178: i64;
  var $p1179: ref;
  var $i1180: i64;
  var $p1181: ref;
  var $p1182: ref;
  var $p1183: ref;
  var $i1184: i64;
  var $p1185: ref;
  var $i1186: i64;
  var $i1187: i128;
  var $p1188: ref;
  var $p1189: ref;
  var $p1190: ref;
  var $i1191: i64;
  var $p1192: ref;
  var $i1193: i64;
  var $i1194: i128;
  var $p1195: ref;
  var $p1196: ref;
  var $i1197: i64;
  var $p1198: ref;
  var $i1199: i64;
  var $p1200: ref;
  var $p1201: ref;
  var $i1202: i64;
  var $p1203: ref;
  var $i1204: i64;
  var $p1205: ref;
  var $p1206: ref;
  var $p1207: ref;
  var $i1208: i64;
  var $p1209: ref;
  var $i1210: i64;
  var $i1211: i128;
  var $p1212: ref;
  var $p1213: ref;
  var $p1214: ref;
  var $i1215: i64;
  var $p1216: ref;
  var $i1217: i64;
  var $i1218: i128;
  var $p1219: ref;
  var $p1220: ref;
  var $i1221: i64;
  var $p1222: ref;
  var $i1223: i64;
  var $p1224: ref;
  var $p1225: ref;
  var $i1226: i64;
  var $p1227: ref;
  var $i1228: i64;
  var $p1229: ref;
  var $p1230: ref;
  var $p1231: ref;
  var $i1232: i64;
  var $p1233: ref;
  var $i1234: i64;
  var $i1235: i128;
  var $p1236: ref;
  var $p1237: ref;
  var $p1238: ref;
  var $i1239: i64;
  var $p1240: ref;
  var $i1241: i64;
  var $i1242: i128;
  var $p1243: ref;
  var $p1244: ref;
  var $i1245: i64;
  var $p1246: ref;
  var $i1247: i64;
  var $p1248: ref;
  var $p1249: ref;
  var $i1250: i64;
  var $p1251: ref;
  var $i1252: i64;
  var $p1253: ref;
  var $p1254: ref;
  var $p1255: ref;
  var $i1256: i64;
  var $p1257: ref;
  var $i1258: i64;
  var $i1259: i128;
  var $p1260: ref;
  var $p1261: ref;
  var $p1262: ref;
  var $i1263: i64;
  var $p1264: ref;
  var $i1265: i64;
  var $i1266: i128;
  var $p1267: ref;
  var $p1268: ref;
  var $i1269: i64;
  var $p1270: ref;
  var $i1271: i64;
  var $p1272: ref;
  var $p1273: ref;
  var $i1274: i64;
  var $p1275: ref;
  var $i1276: i64;
  var $p1277: ref;
  var $p1278: ref;
  var $p1279: ref;
  var $i1280: i64;
  var $p1281: ref;
  var $i1282: i64;
  var $i1283: i128;
  var $p1284: ref;
  var $p1285: ref;
  var $p1286: ref;
  var $i1287: i64;
  var $p1288: ref;
  var $i1289: i64;
  var $i1290: i128;
  var $p1291: ref;
  var $p1292: ref;
  var $i1293: i64;
  var $p1294: ref;
  var $i1295: i64;
  var $p1296: ref;
  var $p1297: ref;
  var $i1298: i64;
  var $p1299: ref;
  var $i1300: i64;
  var $p1301: ref;
  var $p1302: ref;
  var $p1303: ref;
  var $i1304: i64;
  var $p1305: ref;
  var $i1306: i64;
  var $i1307: i128;
  var $p1308: ref;
  var $p1309: ref;
  var $p1310: ref;
  var $i1311: i64;
  var $p1312: ref;
  var $i1313: i64;
  var $i1314: i128;
  var $p1315: ref;
  var $p1316: ref;
  var $i1317: i64;
  var $p1318: ref;
  var $i1319: i64;
  var $p1320: ref;
  var $p1321: ref;
  var $i1322: i64;
  var $p1323: ref;
  var $i1324: i64;
  var $p1325: ref;
  var $p1326: ref;
  var $p1327: ref;
  var $i1328: i64;
  var $p1329: ref;
  var $i1330: i64;
  var $i1331: i128;
  var $p1332: ref;
  var $p1333: ref;
  var $p1334: ref;
  var $i1335: i64;
  var $p1336: ref;
  var $i1337: i64;
  var $i1338: i128;
  var $p1339: ref;
  var $p1340: ref;
  var $i1341: i64;
  var $p1342: ref;
  var $i1343: i64;
  var $p1344: ref;
  var $p1345: ref;
  var $i1346: i64;
  var $p1347: ref;
  var $i1348: i64;
  var $p1349: ref;
  var $p1350: ref;
  var $p1351: ref;
  var $i1352: i64;
  var $p1353: ref;
  var $i1354: i64;
  var $i1355: i128;
  var $p1356: ref;
  var $p1357: ref;
  var $i1358: i64;
  var $p1359: ref;
  var $i1360: i64;
  var $i1361: i64;
  var $i1362: i64;
  var $p1363: ref;
  var $p1364: ref;
  var $i1365: i64;
  var $p1366: ref;
  var $i1367: i64;
  var $p1368: ref;
  var $p1369: ref;
  var $p1370: ref;
  var $i1371: i64;
  var $p1372: ref;
  var $i1373: i64;
  var $i1374: i128;
  var $p1375: ref;
  var $p1376: ref;
  var $i1377: i64;
  var $p1378: ref;
  var $i1379: i64;
  var $i1380: i64;
  var $p1381: ref;
  var $p1382: ref;
  var $p1383: ref;
  var $i1384: i64;
  var $p1385: ref;
  var $i1386: i64;
  var $i1387: i128;
  var $p1388: ref;
  var $p1389: ref;
  var $i1390: i64;
  var $p1391: ref;
  var $i1392: i64;
  var $p1393: ref;
  var $p1394: ref;
  var $i1395: i64;
  var $p1396: ref;
  var $i1397: i64;
  var $p1398: ref;
  var $p1399: ref;
  var $p1400: ref;
  var $i1401: i64;
  var $p1402: ref;
  var $i1403: i64;
  var $i1404: i128;
  var $p1405: ref;
  var $p1406: ref;
  var $i1407: i64;
  var $p1408: ref;
  var $i1409: i64;
  var $i1410: i64;
  var $i1411: i64;
  var $p1412: ref;
  var $p1413: ref;
  var $i1414: i64;
  var $p1415: ref;
  var $i1416: i64;
  var $p1417: ref;
  var $p1418: ref;
  var $p1419: ref;
  var $i1420: i64;
  var $p1421: ref;
  var $i1422: i64;
  var $i1423: i128;
  var $p1424: ref;
  var $p1425: ref;
  var $i1426: i64;
  var $p1427: ref;
  var $i1428: i64;
  var $i1429: i64;
  var $p1430: ref;
  var $p1431: ref;
  var $p1432: ref;
  var $i1433: i64;
  var $p1434: ref;
  var $i1435: i64;
  var $i1436: i128;
  var $p1437: ref;
  var $p1438: ref;
  var $i1439: i64;
  var $p1440: ref;
  var $i1441: i64;
  var $p1442: ref;
  var $p1443: ref;
  var $i1444: i64;
  var $p1445: ref;
  var $i1446: i64;
  var $p1447: ref;
  var $p1448: ref;
  var $p1449: ref;
  var $i1450: i64;
  var $p1451: ref;
  var $i1452: i64;
  var $i1453: i128;
  var $p1454: ref;
  var $p1455: ref;
  var $i1456: i64;
  var $p1457: ref;
  var $i1458: i64;
  var $i1459: i64;
  var $i1460: i64;
  var $p1461: ref;
  var $p1462: ref;
  var $i1463: i64;
  var $p1464: ref;
  var $i1465: i64;
  var $p1466: ref;
  var $p1467: ref;
  var $p1468: ref;
  var $i1469: i64;
  var $p1470: ref;
  var $i1471: i64;
  var $i1472: i128;
  var $p1473: ref;
  var $p1474: ref;
  var $i1475: i64;
  var $p1476: ref;
  var $i1477: i64;
  var $i1478: i64;
  var $p1479: ref;
  var $p1480: ref;
  var $p1481: ref;
  var $i1482: i64;
  var $p1483: ref;
  var $i1484: i64;
  var $i1485: i128;
  var $p1486: ref;
  var $p1487: ref;
  var $i1488: i64;
  var $p1489: ref;
  var $i1490: i64;
  var $p1491: ref;
  var $p1492: ref;
  var $i1493: i64;
  var $p1494: ref;
  var $i1495: i64;
  var $p1496: ref;
  var $p1497: ref;
  var $p1498: ref;
  var $i1499: i64;
  var $p1500: ref;
  var $i1501: i64;
  var $i1502: i128;
  var $p1503: ref;
  var $p1504: ref;
  var $i1505: i64;
  var $p1506: ref;
  var $i1507: i64;
  var $i1508: i64;
  var $i1509: i64;
  var $p1510: ref;
  var $p1511: ref;
  var $i1512: i64;
  var $p1513: ref;
  var $i1514: i64;
  var $p1515: ref;
  var $p1516: ref;
  var $p1517: ref;
  var $i1518: i64;
  var $p1519: ref;
  var $i1520: i64;
  var $i1521: i128;
  var $p1522: ref;
  var $p1523: ref;
  var $i1524: i64;
  var $p1525: ref;
  var $i1526: i64;
  var $i1527: i64;
  var $p1528: ref;
  var $p1529: ref;
  var $p1530: ref;
  var $i1531: i64;
  var $p1532: ref;
  var $i1533: i64;
  var $i1534: i128;
  var $p1535: ref;
  var $p1536: ref;
  var $i1537: i64;
  var $p1538: ref;
  var $i1539: i64;
  var $p1540: ref;
  var $p1541: ref;
  var $i1542: i64;
  var $p1543: ref;
  var $i1544: i64;
  var $p1545: ref;
  var $p1546: ref;
  var $p1547: ref;
  var $i1548: i64;
  var $p1549: ref;
  var $i1550: i64;
  var $i1551: i128;
  var $p1552: ref;
  var $p1553: ref;
  var $i1554: i64;
  var $p1555: ref;
  var $i1556: i64;
  var $i1557: i64;
  var $i1558: i64;
  var $p1559: ref;
  var $p1560: ref;
  var $i1561: i64;
  var $p1562: ref;
  var $i1563: i64;
  var $p1564: ref;
  var $p1565: ref;
  var $p1566: ref;
  var $i1567: i64;
  var $p1568: ref;
  var $i1569: i64;
  var $i1570: i128;
  var $p1571: ref;
  var $p1572: ref;
  var $i1573: i64;
  var $p1574: ref;
  var $i1575: i64;
  var $i1576: i64;
  var $i1577: i64;
  var $i1578: i64;
  var $i1579: i64;
  var $i1580: i64;
  var $i1581: i64;
  var $p1582: ref;
  var $p1583: ref;
  var $p1584: ref;
  var $i1585: i64;
  var $p1586: ref;
  var $i1587: i64;
  var $i1588: i128;
  var $p1589: ref;
  var $p1590: ref;
  var $i1591: i64;
  var $p1592: ref;
  var $i1593: i64;
  var $p1594: ref;
  var $p1595: ref;
  var $i1596: i64;
  var $p1597: ref;
  var $i1598: i64;
  var $p1599: ref;
  var $p1600: ref;
  var $p1601: ref;
  var $i1602: i64;
  var $p1603: ref;
  var $i1604: i64;
  var $i1605: i128;
  var $p1606: ref;
  var $p1607: ref;
  var $i1608: i64;
  var $p1609: ref;
  var $i1610: i64;
  var $i1611: i64;
  var $i1612: i64;
  var $p1613: ref;
  var $p1614: ref;
  var $i1615: i64;
  var $p1616: ref;
  var $i1617: i64;
  var $p1618: ref;
  var $p1619: ref;
  var $p1620: ref;
  var $i1621: i64;
  var $p1622: ref;
  var $i1623: i64;
  var $i1624: i128;
  var $p1625: ref;
  var $p1626: ref;
  var $i1627: i64;
  var $p1628: ref;
  var $i1629: i64;
  var $i1630: i64;
  var $p1631: ref;
  var $p1632: ref;
  var $p1633: ref;
  var $i1634: i64;
  var $p1635: ref;
  var $i1636: i64;
  var $i1637: i128;
  var $p1638: ref;
  var $p1639: ref;
  var $i1640: i64;
  var $p1641: ref;
  var $i1642: i64;
  var $p1643: ref;
  var $p1644: ref;
  var $i1645: i64;
  var $p1646: ref;
  var $i1647: i64;
  var $p1648: ref;
  var $p1649: ref;
  var $p1650: ref;
  var $i1651: i64;
  var $p1652: ref;
  var $i1653: i64;
  var $i1654: i128;
  var $p1655: ref;
  var $p1656: ref;
  var $i1657: i64;
  var $p1658: ref;
  var $i1659: i64;
  var $i1660: i64;
  var $i1661: i64;
  var $p1662: ref;
  var $p1663: ref;
  var $i1664: i64;
  var $p1665: ref;
  var $i1666: i64;
  var $p1667: ref;
  var $p1668: ref;
  var $p1669: ref;
  var $i1670: i64;
  var $p1671: ref;
  var $i1672: i64;
  var $i1673: i128;
  var $p1674: ref;
  var $p1675: ref;
  var $i1676: i64;
  var $p1677: ref;
  var $i1678: i64;
  var $i1679: i64;
  var $p1680: ref;
  var $p1681: ref;
  var $p1682: ref;
  var $i1683: i64;
  var $p1684: ref;
  var $i1685: i64;
  var $i1686: i128;
  var $p1687: ref;
  var $p1688: ref;
  var $i1689: i64;
  var $p1690: ref;
  var $i1691: i64;
  var $p1692: ref;
  var $p1693: ref;
  var $i1694: i64;
  var $p1695: ref;
  var $i1696: i64;
  var $p1697: ref;
  var $p1698: ref;
  var $p1699: ref;
  var $i1700: i64;
  var $p1701: ref;
  var $i1702: i64;
  var $i1703: i128;
  var $p1704: ref;
  var $p1705: ref;
  var $i1706: i64;
  var $p1707: ref;
  var $i1708: i64;
  var $i1709: i64;
  var $i1710: i64;
  var $p1711: ref;
  var $p1712: ref;
  var $i1713: i64;
  var $p1714: ref;
  var $i1715: i64;
  var $p1716: ref;
  var $p1717: ref;
  var $p1718: ref;
  var $i1719: i64;
  var $p1720: ref;
  var $i1721: i64;
  var $i1722: i128;
  var $p1723: ref;
  var $p1724: ref;
  var $i1725: i64;
  var $p1726: ref;
  var $i1727: i64;
  var $i1728: i64;
  var $p1729: ref;
  var $p1730: ref;
  var $p1731: ref;
  var $i1732: i64;
  var $p1733: ref;
  var $i1734: i64;
  var $i1735: i128;
  var $p1736: ref;
  var $p1737: ref;
  var $i1738: i64;
  var $p1739: ref;
  var $i1740: i64;
  var $p1741: ref;
  var $p1742: ref;
  var $i1743: i64;
  var $p1744: ref;
  var $i1745: i64;
  var $p1746: ref;
  var $p1747: ref;
  var $p1748: ref;
  var $i1749: i64;
  var $p1750: ref;
  var $i1751: i64;
  var $i1752: i128;
  var $p1753: ref;
  var $p1754: ref;
  var $i1755: i64;
  var $p1756: ref;
  var $i1757: i64;
  var $i1758: i64;
  var $i1759: i64;
  var $p1760: ref;
  var $p1761: ref;
  var $i1762: i64;
  var $p1763: ref;
  var $i1764: i64;
  var $p1765: ref;
  var $p1766: ref;
  var $p1767: ref;
  var $i1768: i64;
  var $p1769: ref;
  var $i1770: i64;
  var $i1771: i128;
  var $p1772: ref;
  var $p1773: ref;
  var $i1774: i64;
  var $p1775: ref;
  var $i1776: i64;
  var $i1777: i64;
  var $p1778: ref;
  var $p1779: ref;
  var $p1780: ref;
  var $i1781: i64;
  var $p1782: ref;
  var $i1783: i64;
  var $i1784: i128;
  var $p1785: ref;
  var $p1786: ref;
  var $i1787: i64;
  var $p1788: ref;
  var $i1789: i64;
  var $p1790: ref;
  var $p1791: ref;
  var $i1792: i64;
  var $p1793: ref;
  var $i1794: i64;
  var $p1795: ref;
  var $p1796: ref;
  var $p1797: ref;
  var $i1798: i64;
  var $p1799: ref;
  var $i1800: i64;
  var $i1801: i128;
  var $p1802: ref;
  var $p1803: ref;
  var $i1804: i64;
  var $p1805: ref;
  var $i1806: i64;
  var $i1807: i64;
  var $i1808: i64;
  var $p1809: ref;
  var $p1810: ref;
  var $i1811: i64;
  var $p1812: ref;
  var $i1813: i64;
  var $p1814: ref;
  var $p1815: ref;
  var $p1816: ref;
  var $i1817: i64;
  var $p1818: ref;
  var $i1819: i64;
  var $i1820: i128;
  var $p1821: ref;
  var $p1822: ref;
  var $i1823: i64;
  var $p1824: ref;
  var $i1825: i64;
  var $i1826: i64;
  var $i1827: i64;
  var $i1828: i64;
  var $i1829: i64;
  var $i1830: i64;
  var $i1831: i64;
  var $p1832: ref;
  var $p1833: ref;
  var $p1834: ref;
  var $p1835: ref;
  var $p1836: ref;
  var $p1837: ref;
  var $p1838: ref;
  var $p1839: ref;
  var $p1840: ref;
  var $p1841: ref;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 170, 18} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  /* %5 = alloca i128, align 16, !psr.id !62, !verifier.code !63 */
  call $p4 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %6 = alloca i128, align 16, !psr.id !64, !verifier.code !63 */
  call $p5 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %7 = alloca i128, align 16, !psr.id !65, !verifier.code !63 */
  call $p6 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %8 = alloca i128, align 16, !psr.id !66, !verifier.code !63 */
  call $p7 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %9 = alloca i128, align 16, !psr.id !67, !verifier.code !63 */
  call $p8 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %10 = alloca i128, align 16, !psr.id !68, !verifier.code !63 */
  call $p9 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %11 = alloca i128, align 16, !psr.id !69, !verifier.code !63 */
  call $p10 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %12 = alloca i128, align 16, !psr.id !70, !verifier.code !63 */
  call $p11 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %13 = alloca i128, align 16, !psr.id !71, !verifier.code !63 */
  call $p12 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %14 = alloca i128, align 16, !psr.id !72, !verifier.code !63 */
  call $p13 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %15 = alloca i128, align 16, !psr.id !73, !verifier.code !63 */
  call $p14 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %16 = alloca i128, align 16, !psr.id !74, !verifier.code !63 */
  call $p15 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %17 = alloca i128, align 16, !psr.id !75, !verifier.code !63 */
  call $p16 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %18 = alloca i128, align 16, !psr.id !76, !verifier.code !63 */
  call $p17 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %19 = alloca i128, align 16, !psr.id !77, !verifier.code !63 */
  call $p18 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %20 = alloca i128, align 16, !psr.id !78, !verifier.code !63 */
  call $p19 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %21 = alloca i128, align 16, !psr.id !79, !verifier.code !63 */
  call $p20 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %22 = alloca i128, align 16, !psr.id !80, !verifier.code !63 */
  call $p21 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %23 = alloca i128, align 16, !psr.id !81, !verifier.code !63 */
  call $p22 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %24 = alloca i128, align 16, !psr.id !82, !verifier.code !63 */
  call $p23 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %25 = alloca i128, align 16, !psr.id !83, !verifier.code !63 */
  call $p24 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %26 = alloca i128, align 16, !psr.id !84, !verifier.code !63 */
  call $p25 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %27 = alloca i128, align 16, !psr.id !85, !verifier.code !63 */
  call $p26 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %28 = alloca i128, align 16, !psr.id !86, !verifier.code !63 */
  call $p27 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %29 = alloca i128, align 16, !psr.id !87, !verifier.code !63 */
  call $p28 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %30 = alloca i128, align 16, !psr.id !88, !verifier.code !63 */
  call $p29 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %31 = alloca i128, align 16, !psr.id !89, !verifier.code !63 */
  call $p30 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %32 = alloca i128, align 16, !psr.id !90, !verifier.code !63 */
  call $p31 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %33 = alloca i128, align 16, !psr.id !91, !verifier.code !63 */
  call $p32 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %34 = alloca i128, align 16, !psr.id !92, !verifier.code !63 */
  call $p33 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %35 = alloca i128, align 16, !psr.id !93, !verifier.code !63 */
  call $p34 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %36 = alloca i128, align 16, !psr.id !94, !verifier.code !63 */
  call $p35 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %37 = alloca i128, align 16, !psr.id !95, !verifier.code !63 */
  call $p36 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %38 = alloca i128, align 16, !psr.id !96, !verifier.code !63 */
  call $p37 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %39 = alloca i128, align 16, !psr.id !97, !verifier.code !63 */
  call $p38 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %40 = alloca i128, align 16, !psr.id !98, !verifier.code !63 */
  call $p39 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %41 = alloca i128, align 16, !psr.id !99, !verifier.code !63 */
  call $p40 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %42 = alloca i128, align 16, !psr.id !100, !verifier.code !63 */
  call $p41 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %43 = alloca i128, align 16, !psr.id !101, !verifier.code !63 */
  call $p42 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %44 = alloca i128, align 16, !psr.id !102, !verifier.code !63 */
  call $p43 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %45 = alloca i128, align 16, !psr.id !103, !verifier.code !63 */
  call $p44 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %46 = alloca i128, align 16, !psr.id !104, !verifier.code !63 */
  call $p45 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %47 = alloca i128, align 16, !psr.id !105, !verifier.code !63 */
  call $p46 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %48 = alloca i128, align 16, !psr.id !106, !verifier.code !63 */
  call $p47 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %49 = alloca i128, align 16, !psr.id !107, !verifier.code !63 */
  call $p48 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %50 = alloca i128, align 16, !psr.id !108, !verifier.code !63 */
  call $p49 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %51 = alloca i128, align 16, !psr.id !109, !verifier.code !63 */
  call $p50 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %52 = alloca i128, align 16, !psr.id !110, !verifier.code !63 */
  call $p51 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %53 = alloca i128, align 16, !psr.id !111, !verifier.code !63 */
  call $p52 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %54 = alloca i128, align 16, !psr.id !112, !verifier.code !63 */
  call $p53 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %55 = alloca i128, align 16, !psr.id !113, !verifier.code !63 */
  call $p54 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %56 = alloca i128, align 16, !psr.id !114, !verifier.code !63 */
  call $p55 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %57 = alloca i128, align 16, !psr.id !115, !verifier.code !63 */
  call $p56 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %58 = alloca i128, align 16, !psr.id !116, !verifier.code !63 */
  call $p57 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %59 = alloca i128, align 16, !psr.id !117, !verifier.code !63 */
  call $p58 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %60 = alloca i128, align 16, !psr.id !118, !verifier.code !63 */
  call $p59 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %61 = alloca i128, align 16, !psr.id !119, !verifier.code !63 */
  call $p60 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %62 = alloca i128, align 16, !psr.id !120, !verifier.code !63 */
  call $p61 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %63 = alloca i128, align 16, !psr.id !121, !verifier.code !63 */
  call $p62 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %64 = alloca i128, align 16, !psr.id !122, !verifier.code !63 */
  call $p63 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %65 = alloca i128, align 16, !psr.id !123, !verifier.code !63 */
  call $p64 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %66 = alloca i128, align 16, !psr.id !124, !verifier.code !63 */
  call $p65 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %67 = alloca i128, align 16, !psr.id !125, !verifier.code !63 */
  call $p66 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %68 = alloca i128, align 16, !psr.id !126, !verifier.code !63 */
  call $p67 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %69 = alloca i128, align 16, !psr.id !127, !verifier.code !63 */
  call $p68 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %70 = alloca i128, align 16, !psr.id !128, !verifier.code !63 */
  call $p69 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %71 = alloca i128, align 16, !psr.id !129, !verifier.code !63 */
  call $p70 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %72 = alloca i128, align 16, !psr.id !130, !verifier.code !63 */
  call $p71 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %73 = alloca i128, align 16, !psr.id !131, !verifier.code !63 */
  call $p72 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %74 = alloca i128, align 16, !psr.id !132, !verifier.code !63 */
  call $p73 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %75 = alloca i128, align 16, !psr.id !133, !verifier.code !63 */
  call $p74 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %76 = alloca i128, align 16, !psr.id !134, !verifier.code !63 */
  call $p75 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %77 = alloca i128, align 16, !psr.id !135, !verifier.code !63 */
  call $p76 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %78 = alloca i128, align 16, !psr.id !136, !verifier.code !63 */
  call $p77 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %79 = alloca i128, align 16, !psr.id !137, !verifier.code !63 */
  call $p78 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %80 = alloca i128, align 16, !psr.id !138, !verifier.code !63 */
  call $p79 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %81 = alloca i128, align 16, !psr.id !139, !verifier.code !63 */
  call $p80 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %82 = alloca i128, align 16, !psr.id !140, !verifier.code !63 */
  call $p81 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %83 = alloca i128, align 16, !psr.id !141, !verifier.code !63 */
  call $p82 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %84 = alloca i128, align 16, !psr.id !142, !verifier.code !63 */
  call $p83 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %85 = alloca i128, align 16, !psr.id !143, !verifier.code !63 */
  call $p84 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %86 = alloca i128, align 16, !psr.id !144, !verifier.code !63 */
  call $p85 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %87 = alloca i128, align 16, !psr.id !145, !verifier.code !63 */
  call $p86 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %88 = alloca i128, align 16, !psr.id !146, !verifier.code !63 */
  call $p87 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %89 = alloca i128, align 16, !psr.id !147, !verifier.code !63 */
  call $p88 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %90 = alloca i128, align 16, !psr.id !148, !verifier.code !63 */
  call $p89 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %91 = alloca i128, align 16, !psr.id !149, !verifier.code !63 */
  call $p90 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %92 = alloca i128, align 16, !psr.id !150, !verifier.code !63 */
  call $p91 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %93 = alloca i128, align 16, !psr.id !151, !verifier.code !63 */
  call $p92 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %94 = alloca i128, align 16, !psr.id !152, !verifier.code !63 */
  call $p93 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %95 = alloca i128, align 16, !psr.id !153, !verifier.code !63 */
  call $p94 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %96 = alloca i128, align 16, !psr.id !154, !verifier.code !63 */
  call $p95 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %97 = alloca i128, align 16, !psr.id !155, !verifier.code !63 */
  call $p96 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %98 = alloca i128, align 16, !psr.id !156, !verifier.code !63 */
  call $p97 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %99 = alloca i128, align 16, !psr.id !157, !verifier.code !63 */
  call $p98 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %100 = alloca i128, align 16, !psr.id !158, !verifier.code !63 */
  call $p99 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %101 = alloca i128, align 16, !psr.id !159, !verifier.code !63 */
  call $p100 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %102 = alloca i128, align 16, !psr.id !160, !verifier.code !63 */
  call $p101 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %103 = alloca i128, align 16, !psr.id !161, !verifier.code !63 */
  call $p102 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %104 = alloca i128, align 16, !psr.id !162, !verifier.code !63 */
  call $p103 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %105 = alloca i128, align 16, !psr.id !163, !verifier.code !63 */
  call $p104 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %106 = alloca i128, align 16, !psr.id !164, !verifier.code !63 */
  call $p105 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %107 = alloca i128, align 16, !psr.id !165, !verifier.code !63 */
  call $p106 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %108 = alloca i128, align 16, !psr.id !166, !verifier.code !63 */
  call $p107 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %109 = alloca i128, align 16, !psr.id !167, !verifier.code !63 */
  call $p108 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %110 = alloca i128, align 16, !psr.id !168, !verifier.code !63 */
  call $p109 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %111 = alloca i128, align 16, !psr.id !169, !verifier.code !63 */
  call $p110 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %112 = alloca i128, align 16, !psr.id !170, !verifier.code !63 */
  call $p111 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %113 = alloca i128, align 16, !psr.id !171, !verifier.code !63 */
  call $p112 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %114 = alloca i128, align 16, !psr.id !172, !verifier.code !63 */
  call $p113 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %115 = alloca i128, align 16, !psr.id !173, !verifier.code !63 */
  call $p114 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %116 = alloca i128, align 16, !psr.id !174, !verifier.code !63 */
  call $p115 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %117 = alloca i128, align 16, !psr.id !175, !verifier.code !63 */
  call $p116 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %118 = alloca i128, align 16, !psr.id !176, !verifier.code !63 */
  call $p117 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %119 = alloca i128, align 16, !psr.id !177, !verifier.code !63 */
  call $p118 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %120 = alloca i128, align 16, !psr.id !178, !verifier.code !63 */
  call $p119 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %121 = alloca i128, align 16, !psr.id !179, !verifier.code !63 */
  call $p120 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %122 = alloca i128, align 16, !psr.id !180, !verifier.code !63 */
  call $p121 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %123 = alloca i128, align 16, !psr.id !181, !verifier.code !63 */
  call $p122 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %124 = alloca i128, align 16, !psr.id !182, !verifier.code !63 */
  call $p123 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %125 = alloca i128, align 16, !psr.id !183, !verifier.code !63 */
  call $p124 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %126 = alloca i128, align 16, !psr.id !184, !verifier.code !63 */
  call $p125 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %127 = alloca i128, align 16, !psr.id !185, !verifier.code !63 */
  call $p126 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %128 = alloca i128, align 16, !psr.id !186, !verifier.code !63 */
  call $p127 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %129 = alloca i128, align 16, !psr.id !187, !verifier.code !63 */
  call $p128 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %130 = alloca i128, align 16, !psr.id !188, !verifier.code !63 */
  call $p129 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %131 = alloca i128, align 16, !psr.id !189, !verifier.code !63 */
  call $p130 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %132 = alloca i128, align 16, !psr.id !190, !verifier.code !63 */
  call $p131 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %133 = alloca i128, align 16, !psr.id !191, !verifier.code !63 */
  call $p132 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %134 = alloca i128, align 16, !psr.id !192, !verifier.code !63 */
  call $p133 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %135 = alloca i128, align 16, !psr.id !193, !verifier.code !63 */
  call $p134 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %136 = alloca i128, align 16, !psr.id !194, !verifier.code !63 */
  call $p135 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %137 = alloca i128, align 16, !psr.id !195, !verifier.code !63 */
  call $p136 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %138 = alloca i128, align 16, !psr.id !196, !verifier.code !63 */
  call $p137 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %139 = alloca i128, align 16, !psr.id !197, !verifier.code !63 */
  call $p138 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %140 = alloca i128, align 16, !psr.id !198, !verifier.code !63 */
  call $p139 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %141 = alloca i128, align 16, !psr.id !199, !verifier.code !63 */
  call $p140 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %142 = alloca i128, align 16, !psr.id !200, !verifier.code !63 */
  call $p141 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %143 = alloca i128, align 16, !psr.id !201, !verifier.code !63 */
  call $p142 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %144 = alloca i128, align 16, !psr.id !202, !verifier.code !63 */
  call $p143 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %145 = alloca i128, align 16, !psr.id !203, !verifier.code !63 */
  call $p144 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %146 = alloca i128, align 16, !psr.id !204, !verifier.code !63 */
  call $p145 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %147 = alloca i128, align 16, !psr.id !205, !verifier.code !63 */
  call $p146 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %148 = alloca i128, align 16, !psr.id !206, !verifier.code !63 */
  call $p147 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %149 = alloca i128, align 16, !psr.id !207, !verifier.code !63 */
  call $p148 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %150 = alloca i128, align 16, !psr.id !208, !verifier.code !63 */
  call $p149 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %151 = alloca i128, align 16, !psr.id !209, !verifier.code !63 */
  call $p150 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %152 = alloca i128, align 16, !psr.id !210, !verifier.code !63 */
  call $p151 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %153 = alloca i128, align 16, !psr.id !211, !verifier.code !63 */
  call $p152 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %154 = alloca i128, align 16, !psr.id !212, !verifier.code !63 */
  call $p153 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %155 = alloca i128, align 16, !psr.id !213, !verifier.code !63 */
  call $p154 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %156 = alloca i128, align 16, !psr.id !214, !verifier.code !63 */
  call $p155 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %157 = alloca i128, align 16, !psr.id !215, !verifier.code !63 */
  call $p156 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %158 = alloca i128, align 16, !psr.id !216, !verifier.code !63 */
  call $p157 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %159 = alloca i128, align 16, !psr.id !217, !verifier.code !63 */
  call $p158 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %160 = alloca i128, align 16, !psr.id !218, !verifier.code !63 */
  call $p159 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %161 = alloca i128, align 16, !psr.id !219, !verifier.code !63 */
  call $p160 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %162 = alloca i128, align 16, !psr.id !220, !verifier.code !63 */
  call $p161 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %163 = alloca i128, align 16, !psr.id !221, !verifier.code !63 */
  call $p162 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %164 = alloca i128, align 16, !psr.id !222, !verifier.code !63 */
  call $p163 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %165 = alloca i128, align 16, !psr.id !223, !verifier.code !63 */
  call $p164 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %166 = alloca i128, align 16, !psr.id !224, !verifier.code !63 */
  call $p165 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %167 = alloca i128, align 16, !psr.id !225, !verifier.code !63 */
  call $p166 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %168 = alloca i128, align 16, !psr.id !226, !verifier.code !63 */
  call $p167 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %169 = alloca i128, align 16, !psr.id !227, !verifier.code !63 */
  call $p168 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %170 = alloca i128, align 16, !psr.id !228, !verifier.code !63 */
  call $p169 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %171 = alloca i128, align 16, !psr.id !229, !verifier.code !63 */
  call $p170 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %172 = alloca i128, align 16, !psr.id !230, !verifier.code !63 */
  call $p171 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %173 = alloca i128, align 16, !psr.id !231, !verifier.code !63 */
  call $p172 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %174 = alloca i128, align 16, !psr.id !232, !verifier.code !63 */
  call $p173 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %175 = alloca i128, align 16, !psr.id !233, !verifier.code !63 */
  call $p174 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %176 = alloca i128, align 16, !psr.id !234, !verifier.code !63 */
  call $p175 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %177 = alloca i128, align 16, !psr.id !235, !verifier.code !63 */
  call $p176 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %178 = alloca i128, align 16, !psr.id !236, !verifier.code !63 */
  call $p177 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %179 = alloca i128, align 16, !psr.id !237, !verifier.code !63 */
  call $p178 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %180 = alloca i128, align 16, !psr.id !238, !verifier.code !63 */
  call $p179 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %181 = alloca i128, align 16, !psr.id !239, !verifier.code !63 */
  call $p180 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %182 = alloca i128, align 16, !psr.id !240, !verifier.code !63 */
  call $p181 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %183 = alloca i128, align 16, !psr.id !241, !verifier.code !63 */
  call $p182 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %184 = alloca i128, align 16, !psr.id !242, !verifier.code !63 */
  call $p183 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %185 = alloca i128, align 16, !psr.id !243, !verifier.code !63 */
  call $p184 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %186 = alloca i128, align 16, !psr.id !244, !verifier.code !63 */
  call $p185 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %187 = alloca i128, align 16, !psr.id !245, !verifier.code !63 */
  call $p186 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %188 = alloca i128, align 16, !psr.id !246, !verifier.code !63 */
  call $p187 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %189 = alloca i128, align 16, !psr.id !247, !verifier.code !63 */
  call $p188 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %190 = alloca i128, align 16, !psr.id !248, !verifier.code !63 */
  call $p189 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %191 = alloca i128, align 16, !psr.id !249, !verifier.code !63 */
  call $p190 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %192 = alloca i128, align 16, !psr.id !250, !verifier.code !63 */
  call $p191 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %193 = alloca i128, align 16, !psr.id !251, !verifier.code !63 */
  call $p192 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %194 = alloca i128, align 16, !psr.id !252, !verifier.code !63 */
  call $p193 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %195 = alloca i128, align 16, !psr.id !253, !verifier.code !63 */
  call $p194 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %196 = alloca i128, align 16, !psr.id !254, !verifier.code !63 */
  call $p195 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %197 = alloca i128, align 16, !psr.id !255, !verifier.code !63 */
  call $p196 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %198 = alloca i128, align 16, !psr.id !256, !verifier.code !63 */
  call $p197 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %199 = alloca i128, align 16, !psr.id !257, !verifier.code !63 */
  call $p198 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %200 = alloca i128, align 16, !psr.id !258, !verifier.code !63 */
  call $p199 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %201 = alloca i128, align 16, !psr.id !259, !verifier.code !63 */
  call $p200 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %202 = alloca i128, align 16, !psr.id !260, !verifier.code !63 */
  call $p201 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %203 = alloca i128, align 16, !psr.id !261, !verifier.code !63 */
  call $p202 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %204 = alloca i128, align 16, !psr.id !262, !verifier.code !63 */
  call $p203 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %205 = alloca i128, align 16, !psr.id !263, !verifier.code !63 */
  call $p204 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %206 = alloca i128, align 16, !psr.id !264, !verifier.code !63 */
  call $p205 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %207 = alloca i128, align 16, !psr.id !265, !verifier.code !63 */
  call $p206 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %208 = alloca i128, align 16, !psr.id !266, !verifier.code !63 */
  call $p207 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %209 = alloca i128, align 16, !psr.id !267, !verifier.code !63 */
  call $p208 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %210 = alloca i128, align 16, !psr.id !268, !verifier.code !63 */
  call $p209 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %211 = alloca i128, align 16, !psr.id !269, !verifier.code !63 */
  call $p210 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %212 = alloca i128, align 16, !psr.id !270, !verifier.code !63 */
  call $p211 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %213 = alloca i128, align 16, !psr.id !271, !verifier.code !63 */
  call $p212 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %214 = alloca i128, align 16, !psr.id !272, !verifier.code !63 */
  call $p213 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %215 = alloca i128, align 16, !psr.id !273, !verifier.code !63 */
  call $p214 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %216 = alloca i128, align 16, !psr.id !274, !verifier.code !63 */
  call $p215 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %217 = alloca i128, align 16, !psr.id !275, !verifier.code !63 */
  call $p216 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %218 = alloca i128, align 16, !psr.id !276, !verifier.code !63 */
  call $p217 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %219 = alloca i128, align 16, !psr.id !277, !verifier.code !63 */
  call $p218 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %220 = alloca i128, align 16, !psr.id !278, !verifier.code !63 */
  call $p219 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %221 = alloca i128, align 16, !psr.id !279, !verifier.code !63 */
  call $p220 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %222 = alloca i128, align 16, !psr.id !280, !verifier.code !63 */
  call $p221 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %223 = alloca i128, align 16, !psr.id !281, !verifier.code !63 */
  call $p222 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %224 = alloca i128, align 16, !psr.id !282, !verifier.code !63 */
  call $p223 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %225 = alloca i128, align 16, !psr.id !283, !verifier.code !63 */
  call $p224 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %226 = alloca i128, align 16, !psr.id !284, !verifier.code !63 */
  call $p225 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %227 = alloca i128, align 16, !psr.id !285, !verifier.code !63 */
  call $p226 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %228 = alloca i128, align 16, !psr.id !286, !verifier.code !63 */
  call $p227 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %229 = alloca i128, align 16, !psr.id !287, !verifier.code !63 */
  call $p228 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %230 = alloca i128, align 16, !psr.id !288, !verifier.code !63 */
  call $p229 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %231 = alloca i128, align 16, !psr.id !289, !verifier.code !63 */
  call $p230 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %232 = alloca i128, align 16, !psr.id !290, !verifier.code !63 */
  call $p231 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %233 = alloca i128, align 16, !psr.id !291, !verifier.code !63 */
  call $p232 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %234 = alloca i128, align 16, !psr.id !292, !verifier.code !63 */
  call $p233 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %235 = alloca i128, align 16, !psr.id !293, !verifier.code !63 */
  call $p234 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %236 = alloca i128, align 16, !psr.id !294, !verifier.code !63 */
  call $p235 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %237 = alloca i128, align 16, !psr.id !295, !verifier.code !63 */
  call $p236 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %238 = alloca i128, align 16, !psr.id !296, !verifier.code !63 */
  call $p237 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %239 = alloca i128, align 16, !psr.id !297, !verifier.code !63 */
  call $p238 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %240 = alloca i128, align 16, !psr.id !298, !verifier.code !63 */
  call $p239 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %241 = alloca i128, align 16, !psr.id !299, !verifier.code !63 */
  call $p240 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %242 = alloca i128, align 16, !psr.id !300, !verifier.code !63 */
  call $p241 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %243 = alloca i128, align 16, !psr.id !301, !verifier.code !63 */
  call $p242 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %244 = alloca i128, align 16, !psr.id !302, !verifier.code !63 */
  call $p243 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %245 = alloca i128, align 16, !psr.id !303, !verifier.code !63 */
  call $p244 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %246 = alloca i128, align 16, !psr.id !304, !verifier.code !63 */
  call $p245 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %247 = alloca i128, align 16, !psr.id !305, !verifier.code !63 */
  call $p246 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %248 = alloca i128, align 16, !psr.id !306, !verifier.code !63 */
  call $p247 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %249 = alloca i128, align 16, !psr.id !307, !verifier.code !63 */
  call $p248 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %250 = alloca i128, align 16, !psr.id !308, !verifier.code !63 */
  call $p249 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %251 = alloca i128, align 16, !psr.id !309, !verifier.code !63 */
  call $p250 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %252 = alloca i128, align 16, !psr.id !310, !verifier.code !63 */
  call $p251 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %253 = alloca i128, align 16, !psr.id !311, !verifier.code !63 */
  call $p252 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  assume {:verifier.code 0} true;
  /* %254 = alloca i128, align 16, !psr.id !312, !verifier.code !63 */
  call $p253 := $alloc($mul.ref(16, $zext.i32.i64(1)));
  /* call void @llvm.dbg.value(metadata i64* %0, metadata !7021, metadata !DIExpression()), !dbg !7022, !psr.id !7023, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %1, metadata !7024, metadata !DIExpression()), !dbg !7022, !psr.id !7025, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64* %2, metadata !7026, metadata !DIExpression()), !dbg !7022, !psr.id !7027, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128* %3, metadata !7028, metadata !DIExpression()), !dbg !7022, !psr.id !7029, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 170, 18} true;
  assume {:verifier.code 0} true;
  /* %255 = getelementptr inbounds i64, i64* %1, i64 0, !dbg !322, !psr.id !323, !verifier.code !63 */
  $p254 := $add.ref($p1, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 170, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %256 = load i64, i64* %255, align 8, !dbg !322, !psr.id !324, !ValueTainted !325, !verifier.code !63 */
  $i255 := $load.i64($M.0, $p254);
  /* call void @llvm.dbg.value(metadata i64 %256, metadata !7033, metadata !DIExpression()), !dbg !7022, !psr.id !7034, !verifier.code !64 */
  call {:cexpr "f10"} boogie_si_record_i64($i255);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 171, 18} true;
  assume {:verifier.code 0} true;
  /* %257 = getelementptr inbounds i64, i64* %1, i64 1, !dbg !328, !psr.id !329, !verifier.code !63 */
  $p256 := $add.ref($p1, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 171, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %258 = load i64, i64* %257, align 8, !dbg !328, !psr.id !330, !ValueTainted !325, !verifier.code !63 */
  $i257 := $load.i64($M.0, $p256);
  /* call void @llvm.dbg.value(metadata i64 %258, metadata !7038, metadata !DIExpression()), !dbg !7022, !psr.id !7039, !verifier.code !64 */
  call {:cexpr "f11"} boogie_si_record_i64($i257);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 172, 18} true;
  assume {:verifier.code 0} true;
  /* %259 = getelementptr inbounds i64, i64* %1, i64 2, !dbg !333, !psr.id !334, !verifier.code !63 */
  $p258 := $add.ref($p1, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 172, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %260 = load i64, i64* %259, align 8, !dbg !333, !psr.id !335, !ValueTainted !325, !verifier.code !63 */
  $i259 := $load.i64($M.0, $p258);
  /* call void @llvm.dbg.value(metadata i64 %260, metadata !7043, metadata !DIExpression()), !dbg !7022, !psr.id !7044, !verifier.code !64 */
  call {:cexpr "f12"} boogie_si_record_i64($i259);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 173, 18} true;
  assume {:verifier.code 0} true;
  /* %261 = getelementptr inbounds i64, i64* %1, i64 3, !dbg !338, !psr.id !339, !verifier.code !63 */
  $p260 := $add.ref($p1, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 173, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %262 = load i64, i64* %261, align 8, !dbg !338, !psr.id !340, !ValueTainted !325, !verifier.code !63 */
  $i261 := $load.i64($M.0, $p260);
  /* call void @llvm.dbg.value(metadata i64 %262, metadata !7048, metadata !DIExpression()), !dbg !7022, !psr.id !7049, !verifier.code !64 */
  call {:cexpr "f13"} boogie_si_record_i64($i261);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 174, 18} true;
  assume {:verifier.code 0} true;
  /* %263 = getelementptr inbounds i64, i64* %1, i64 4, !dbg !343, !psr.id !344, !verifier.code !63 */
  $p262 := $add.ref($p1, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 174, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %264 = load i64, i64* %263, align 8, !dbg !343, !psr.id !345, !ValueTainted !325, !verifier.code !63 */
  $i263 := $load.i64($M.0, $p262);
  /* call void @llvm.dbg.value(metadata i64 %264, metadata !7053, metadata !DIExpression()), !dbg !7022, !psr.id !7054, !verifier.code !64 */
  call {:cexpr "f14"} boogie_si_record_i64($i263);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 175, 18} true;
  assume {:verifier.code 0} true;
  /* %265 = getelementptr inbounds i64, i64* %2, i64 0, !dbg !348, !psr.id !349, !verifier.code !63 */
  $p264 := $add.ref($p2, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 175, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %266 = load i64, i64* %265, align 8, !dbg !348, !psr.id !350, !ValueTainted !325, !verifier.code !63 */
  $i265 := $load.i64($M.0, $p264);
  /* call void @llvm.dbg.value(metadata i64 %266, metadata !7058, metadata !DIExpression()), !dbg !7022, !psr.id !7059, !verifier.code !64 */
  call {:cexpr "f20"} boogie_si_record_i64($i265);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 176, 18} true;
  assume {:verifier.code 0} true;
  /* %267 = getelementptr inbounds i64, i64* %2, i64 1, !dbg !353, !psr.id !354, !verifier.code !63 */
  $p266 := $add.ref($p2, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 176, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %268 = load i64, i64* %267, align 8, !dbg !353, !psr.id !355, !ValueTainted !325, !verifier.code !63 */
  $i267 := $load.i64($M.0, $p266);
  /* call void @llvm.dbg.value(metadata i64 %268, metadata !7063, metadata !DIExpression()), !dbg !7022, !psr.id !7064, !verifier.code !64 */
  call {:cexpr "f21"} boogie_si_record_i64($i267);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 177, 18} true;
  assume {:verifier.code 0} true;
  /* %269 = getelementptr inbounds i64, i64* %2, i64 2, !dbg !358, !psr.id !359, !verifier.code !63 */
  $p268 := $add.ref($p2, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 177, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %270 = load i64, i64* %269, align 8, !dbg !358, !psr.id !360, !ValueTainted !325, !verifier.code !63 */
  $i269 := $load.i64($M.0, $p268);
  /* call void @llvm.dbg.value(metadata i64 %270, metadata !7068, metadata !DIExpression()), !dbg !7022, !psr.id !7069, !verifier.code !64 */
  call {:cexpr "f22"} boogie_si_record_i64($i269);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 178, 18} true;
  assume {:verifier.code 0} true;
  /* %271 = getelementptr inbounds i64, i64* %2, i64 3, !dbg !363, !psr.id !364, !verifier.code !63 */
  $p270 := $add.ref($p2, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 178, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %272 = load i64, i64* %271, align 8, !dbg !363, !psr.id !365, !ValueTainted !325, !verifier.code !63 */
  $i271 := $load.i64($M.0, $p270);
  /* call void @llvm.dbg.value(metadata i64 %272, metadata !7073, metadata !DIExpression()), !dbg !7022, !psr.id !7074, !verifier.code !64 */
  call {:cexpr "f23"} boogie_si_record_i64($i271);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 179, 18} true;
  assume {:verifier.code 0} true;
  /* %273 = getelementptr inbounds i64, i64* %2, i64 4, !dbg !368, !psr.id !369, !verifier.code !63 */
  $p272 := $add.ref($p2, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 179, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %274 = load i64, i64* %273, align 8, !dbg !368, !psr.id !370, !ValueTainted !325, !verifier.code !63 */
  $i273 := $load.i64($M.0, $p272);
  /* call void @llvm.dbg.value(metadata i64 %274, metadata !7078, metadata !DIExpression()), !dbg !7022, !psr.id !7079, !verifier.code !64 */
  call {:cexpr "f24"} boogie_si_record_i64($i273);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 180, 18} true;
  assume {:verifier.code 0} true;
  /* %275 = getelementptr inbounds i64, i64* %1, i64 5, !dbg !373, !psr.id !374, !verifier.code !63 */
  $p274 := $add.ref($p1, $mul.ref(5, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 180, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %276 = load i64, i64* %275, align 8, !dbg !373, !psr.id !375, !ValueTainted !325, !verifier.code !63 */
  $i275 := $load.i64($M.0, $p274);
  /* call void @llvm.dbg.value(metadata i64 %276, metadata !7083, metadata !DIExpression()), !dbg !7022, !psr.id !7084, !verifier.code !64 */
  call {:cexpr "f30"} boogie_si_record_i64($i275);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 181, 18} true;
  assume {:verifier.code 0} true;
  /* %277 = getelementptr inbounds i64, i64* %1, i64 6, !dbg !378, !psr.id !379, !verifier.code !63 */
  $p276 := $add.ref($p1, $mul.ref(6, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 181, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %278 = load i64, i64* %277, align 8, !dbg !378, !psr.id !380, !ValueTainted !325, !verifier.code !63 */
  $i277 := $load.i64($M.0, $p276);
  /* call void @llvm.dbg.value(metadata i64 %278, metadata !7088, metadata !DIExpression()), !dbg !7022, !psr.id !7089, !verifier.code !64 */
  call {:cexpr "f31"} boogie_si_record_i64($i277);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 182, 18} true;
  assume {:verifier.code 0} true;
  /* %279 = getelementptr inbounds i64, i64* %1, i64 7, !dbg !383, !psr.id !384, !verifier.code !63 */
  $p278 := $add.ref($p1, $mul.ref(7, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 182, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %280 = load i64, i64* %279, align 8, !dbg !383, !psr.id !385, !ValueTainted !325, !verifier.code !63 */
  $i279 := $load.i64($M.0, $p278);
  /* call void @llvm.dbg.value(metadata i64 %280, metadata !7093, metadata !DIExpression()), !dbg !7022, !psr.id !7094, !verifier.code !64 */
  call {:cexpr "f32"} boogie_si_record_i64($i279);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 183, 18} true;
  assume {:verifier.code 0} true;
  /* %281 = getelementptr inbounds i64, i64* %1, i64 8, !dbg !388, !psr.id !389, !verifier.code !63 */
  $p280 := $add.ref($p1, $mul.ref(8, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 183, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %282 = load i64, i64* %281, align 8, !dbg !388, !psr.id !390, !ValueTainted !325, !verifier.code !63 */
  $i281 := $load.i64($M.0, $p280);
  /* call void @llvm.dbg.value(metadata i64 %282, metadata !7098, metadata !DIExpression()), !dbg !7022, !psr.id !7099, !verifier.code !64 */
  call {:cexpr "f33"} boogie_si_record_i64($i281);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 184, 18} true;
  assume {:verifier.code 0} true;
  /* %283 = getelementptr inbounds i64, i64* %1, i64 9, !dbg !393, !psr.id !394, !verifier.code !63 */
  $p282 := $add.ref($p1, $mul.ref(9, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 184, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %284 = load i64, i64* %283, align 8, !dbg !393, !psr.id !395, !ValueTainted !325, !verifier.code !63 */
  $i283 := $load.i64($M.0, $p282);
  /* call void @llvm.dbg.value(metadata i64 %284, metadata !7103, metadata !DIExpression()), !dbg !7022, !psr.id !7104, !verifier.code !64 */
  call {:cexpr "f34"} boogie_si_record_i64($i283);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 185, 18} true;
  assume {:verifier.code 0} true;
  /* %285 = getelementptr inbounds i64, i64* %2, i64 5, !dbg !398, !psr.id !399, !verifier.code !63 */
  $p284 := $add.ref($p2, $mul.ref(5, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 185, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %286 = load i64, i64* %285, align 8, !dbg !398, !psr.id !400, !ValueTainted !325, !verifier.code !63 */
  $i285 := $load.i64($M.0, $p284);
  /* call void @llvm.dbg.value(metadata i64 %286, metadata !7108, metadata !DIExpression()), !dbg !7022, !psr.id !7109, !verifier.code !64 */
  call {:cexpr "f40"} boogie_si_record_i64($i285);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 186, 18} true;
  assume {:verifier.code 0} true;
  /* %287 = getelementptr inbounds i64, i64* %2, i64 6, !dbg !403, !psr.id !404, !verifier.code !63 */
  $p286 := $add.ref($p2, $mul.ref(6, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 186, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %288 = load i64, i64* %287, align 8, !dbg !403, !psr.id !405, !ValueTainted !325, !verifier.code !63 */
  $i287 := $load.i64($M.0, $p286);
  /* call void @llvm.dbg.value(metadata i64 %288, metadata !7113, metadata !DIExpression()), !dbg !7022, !psr.id !7114, !verifier.code !64 */
  call {:cexpr "f41"} boogie_si_record_i64($i287);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 187, 18} true;
  assume {:verifier.code 0} true;
  /* %289 = getelementptr inbounds i64, i64* %2, i64 7, !dbg !408, !psr.id !409, !verifier.code !63 */
  $p288 := $add.ref($p2, $mul.ref(7, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 187, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %290 = load i64, i64* %289, align 8, !dbg !408, !psr.id !410, !ValueTainted !325, !verifier.code !63 */
  $i289 := $load.i64($M.0, $p288);
  /* call void @llvm.dbg.value(metadata i64 %290, metadata !7118, metadata !DIExpression()), !dbg !7022, !psr.id !7119, !verifier.code !64 */
  call {:cexpr "f42"} boogie_si_record_i64($i289);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 188, 18} true;
  assume {:verifier.code 0} true;
  /* %291 = getelementptr inbounds i64, i64* %2, i64 8, !dbg !413, !psr.id !414, !verifier.code !63 */
  $p290 := $add.ref($p2, $mul.ref(8, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 188, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %292 = load i64, i64* %291, align 8, !dbg !413, !psr.id !415, !ValueTainted !325, !verifier.code !63 */
  $i291 := $load.i64($M.0, $p290);
  /* call void @llvm.dbg.value(metadata i64 %292, metadata !7123, metadata !DIExpression()), !dbg !7022, !psr.id !7124, !verifier.code !64 */
  call {:cexpr "f43"} boogie_si_record_i64($i291);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 189, 18} true;
  assume {:verifier.code 0} true;
  /* %293 = getelementptr inbounds i64, i64* %2, i64 9, !dbg !418, !psr.id !419, !verifier.code !63 */
  $p292 := $add.ref($p2, $mul.ref(9, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 189, 18} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %294 = load i64, i64* %293, align 8, !dbg !418, !psr.id !420, !ValueTainted !325, !verifier.code !63 */
  $i293 := $load.i64($M.0, $p292);
  /* call void @llvm.dbg.value(metadata i64 %294, metadata !7128, metadata !DIExpression()), !dbg !7022, !psr.id !7129, !verifier.code !64 */
  call {:cexpr "f44"} boogie_si_record_i64($i293);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 190, 24} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %295 = mul i64 %268, 19, !dbg !423, !psr.id !424, !ValueTainted !325, !verifier.code !63 */
  $i294 := $mul.i64($i267, 19);
  /* call void @llvm.dbg.value(metadata i64 %295, metadata !7132, metadata !DIExpression()), !dbg !7022, !psr.id !7133, !verifier.code !64 */
  call {:cexpr "tmp11"} boogie_si_record_i64($i294);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 191, 24} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %296 = mul i64 %270, 19, !dbg !427, !psr.id !428, !ValueTainted !325, !verifier.code !63 */
  $i295 := $mul.i64($i269, 19);
  /* call void @llvm.dbg.value(metadata i64 %296, metadata !7136, metadata !DIExpression()), !dbg !7022, !psr.id !7137, !verifier.code !64 */
  call {:cexpr "tmp12"} boogie_si_record_i64($i295);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 192, 24} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %297 = mul i64 %272, 19, !dbg !431, !psr.id !432, !ValueTainted !325, !verifier.code !63 */
  $i296 := $mul.i64($i271, 19);
  /* call void @llvm.dbg.value(metadata i64 %297, metadata !7140, metadata !DIExpression()), !dbg !7022, !psr.id !7141, !verifier.code !64 */
  call {:cexpr "tmp13"} boogie_si_record_i64($i296);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 193, 24} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %298 = mul i64 %274, 19, !dbg !435, !psr.id !436, !ValueTainted !325, !verifier.code !63 */
  $i297 := $mul.i64($i273, 19);
  /* call void @llvm.dbg.value(metadata i64 %298, metadata !7144, metadata !DIExpression()), !dbg !7022, !psr.id !7145, !verifier.code !64 */
  call {:cexpr "tmp14"} boogie_si_record_i64($i297);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 194, 24} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %299 = mul i64 %288, 19, !dbg !439, !psr.id !440, !ValueTainted !325, !verifier.code !63 */
  $i298 := $mul.i64($i287, 19);
  /* call void @llvm.dbg.value(metadata i64 %299, metadata !7148, metadata !DIExpression()), !dbg !7022, !psr.id !7149, !verifier.code !64 */
  call {:cexpr "tmp21"} boogie_si_record_i64($i298);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 195, 24} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %300 = mul i64 %290, 19, !dbg !443, !psr.id !444, !ValueTainted !325, !verifier.code !63 */
  $i299 := $mul.i64($i289, 19);
  /* call void @llvm.dbg.value(metadata i64 %300, metadata !7152, metadata !DIExpression()), !dbg !7022, !psr.id !7153, !verifier.code !64 */
  call {:cexpr "tmp22"} boogie_si_record_i64($i299);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 196, 24} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %301 = mul i64 %292, 19, !dbg !447, !psr.id !448, !ValueTainted !325, !verifier.code !63 */
  $i300 := $mul.i64($i291, 19);
  /* call void @llvm.dbg.value(metadata i64 %301, metadata !7156, metadata !DIExpression()), !dbg !7022, !psr.id !7157, !verifier.code !64 */
  call {:cexpr "tmp23"} boogie_si_record_i64($i300);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 197, 24} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %302 = mul i64 %294, 19, !dbg !451, !psr.id !452, !ValueTainted !325, !verifier.code !63 */
  $i301 := $mul.i64($i293, 19);
  /* call void @llvm.dbg.value(metadata i64 %302, metadata !7160, metadata !DIExpression()), !dbg !7022, !psr.id !7161, !verifier.code !64 */
  call {:cexpr "tmp24"} boogie_si_record_i64($i301);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %303 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %256, i64 %266), !dbg !455, !psr.id !456, !ValueTainted !325, !verifier.code !63 */
  call $p302 := FStar_UInt128_mul_wide($i255, $i265);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  /* %304 = bitcast i128* %5 to { i64, i64 }*, !dbg !455, !psr.id !457, !verifier.code !63 */
  $p303 := $bitcast.ref.ref($p4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  /* %305 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %304, i32 0, i32 0, !dbg !455, !psr.id !458, !verifier.code !63 */
  $p304 := $add.ref($add.ref($p303, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  /* %306 = extractvalue { i64, i64 } %303, 0, !dbg !455, !psr.id !459, !verifier.code !63 */
  $i305 := $extractvalue.i64($p302, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %306, i64* %305, align 16, !dbg !455, !psr.id !460, !verifier.code !63 */
  $M.444 := $store.i64($M.444, $p304, $i305);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  /* %307 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %304, i32 0, i32 1, !dbg !455, !psr.id !461, !verifier.code !63 */
  $p306 := $add.ref($add.ref($p303, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  /* %308 = extractvalue { i64, i64 } %303, 1, !dbg !455, !psr.id !462, !verifier.code !63 */
  $i307 := $extractvalue.i64($p302, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %308, i64* %307, align 8, !dbg !455, !psr.id !463, !verifier.code !63 */
  $M.444 := $store.i64($M.444, $p306, $i307);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  /* %309 = load i128, i128* %5, align 16, !dbg !455, !psr.id !464, !verifier.code !63 */
  $i308 := $load.i128($M.444, $p4);
  /* call void @llvm.dbg.value(metadata i128 %309, metadata !7172, metadata !DIExpression()), !dbg !7022, !psr.id !7173, !verifier.code !64 */
  call {:cexpr "o00"} boogie_si_record_i128($i308);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %310 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %256, i64 %268), !dbg !467, !psr.id !468, !ValueTainted !325, !verifier.code !63 */
  call $p309 := FStar_UInt128_mul_wide($i255, $i267);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  /* %311 = bitcast i128* %6 to { i64, i64 }*, !dbg !467, !psr.id !469, !verifier.code !63 */
  $p310 := $bitcast.ref.ref($p5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  /* %312 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %311, i32 0, i32 0, !dbg !467, !psr.id !470, !verifier.code !63 */
  $p311 := $add.ref($add.ref($p310, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  /* %313 = extractvalue { i64, i64 } %310, 0, !dbg !467, !psr.id !471, !verifier.code !63 */
  $i312 := $extractvalue.i64($p309, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %313, i64* %312, align 16, !dbg !467, !psr.id !472, !verifier.code !63 */
  $M.445 := $store.i64($M.445, $p311, $i312);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  /* %314 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %311, i32 0, i32 1, !dbg !467, !psr.id !473, !verifier.code !63 */
  $p313 := $add.ref($add.ref($p310, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  /* %315 = extractvalue { i64, i64 } %310, 1, !dbg !467, !psr.id !474, !verifier.code !63 */
  $i314 := $extractvalue.i64($p309, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %315, i64* %314, align 8, !dbg !467, !psr.id !475, !verifier.code !63 */
  $M.445 := $store.i64($M.445, $p313, $i314);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  /* %316 = load i128, i128* %6, align 16, !dbg !467, !psr.id !476, !verifier.code !63 */
  $i315 := $load.i128($M.445, $p5);
  /* call void @llvm.dbg.value(metadata i128 %316, metadata !7184, metadata !DIExpression()), !dbg !7022, !psr.id !7185, !verifier.code !64 */
  call {:cexpr "o15"} boogie_si_record_i128($i315);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %317 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %256, i64 %270), !dbg !479, !psr.id !480, !ValueTainted !325, !verifier.code !63 */
  call $p316 := FStar_UInt128_mul_wide($i255, $i269);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  /* %318 = bitcast i128* %7 to { i64, i64 }*, !dbg !479, !psr.id !481, !verifier.code !63 */
  $p317 := $bitcast.ref.ref($p6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  /* %319 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %318, i32 0, i32 0, !dbg !479, !psr.id !482, !verifier.code !63 */
  $p318 := $add.ref($add.ref($p317, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  /* %320 = extractvalue { i64, i64 } %317, 0, !dbg !479, !psr.id !483, !verifier.code !63 */
  $i319 := $extractvalue.i64($p316, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %320, i64* %319, align 16, !dbg !479, !psr.id !484, !verifier.code !63 */
  $M.446 := $store.i64($M.446, $p318, $i319);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  /* %321 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %318, i32 0, i32 1, !dbg !479, !psr.id !485, !verifier.code !63 */
  $p320 := $add.ref($add.ref($p317, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  /* %322 = extractvalue { i64, i64 } %317, 1, !dbg !479, !psr.id !486, !verifier.code !63 */
  $i321 := $extractvalue.i64($p316, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %322, i64* %321, align 8, !dbg !479, !psr.id !487, !verifier.code !63 */
  $M.446 := $store.i64($M.446, $p320, $i321);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  /* %323 = load i128, i128* %7, align 16, !dbg !479, !psr.id !488, !verifier.code !63 */
  $i322 := $load.i128($M.446, $p6);
  /* call void @llvm.dbg.value(metadata i128 %323, metadata !7196, metadata !DIExpression()), !dbg !7022, !psr.id !7197, !verifier.code !64 */
  call {:cexpr "o25"} boogie_si_record_i128($i322);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %324 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %256, i64 %272), !dbg !491, !psr.id !492, !ValueTainted !325, !verifier.code !63 */
  call $p323 := FStar_UInt128_mul_wide($i255, $i271);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  /* %325 = bitcast i128* %8 to { i64, i64 }*, !dbg !491, !psr.id !493, !verifier.code !63 */
  $p324 := $bitcast.ref.ref($p7);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  /* %326 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %325, i32 0, i32 0, !dbg !491, !psr.id !494, !verifier.code !63 */
  $p325 := $add.ref($add.ref($p324, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  /* %327 = extractvalue { i64, i64 } %324, 0, !dbg !491, !psr.id !495, !verifier.code !63 */
  $i326 := $extractvalue.i64($p323, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %327, i64* %326, align 16, !dbg !491, !psr.id !496, !verifier.code !63 */
  $M.447 := $store.i64($M.447, $p325, $i326);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  /* %328 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %325, i32 0, i32 1, !dbg !491, !psr.id !497, !verifier.code !63 */
  $p327 := $add.ref($add.ref($p324, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  /* %329 = extractvalue { i64, i64 } %324, 1, !dbg !491, !psr.id !498, !verifier.code !63 */
  $i328 := $extractvalue.i64($p323, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %329, i64* %328, align 8, !dbg !491, !psr.id !499, !verifier.code !63 */
  $M.447 := $store.i64($M.447, $p327, $i328);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  /* %330 = load i128, i128* %8, align 16, !dbg !491, !psr.id !500, !verifier.code !63 */
  $i329 := $load.i128($M.447, $p7);
  /* call void @llvm.dbg.value(metadata i128 %330, metadata !7208, metadata !DIExpression()), !dbg !7022, !psr.id !7209, !verifier.code !64 */
  call {:cexpr "o30"} boogie_si_record_i128($i329);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %331 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %256, i64 %274), !dbg !503, !psr.id !504, !ValueTainted !325, !verifier.code !63 */
  call $p330 := FStar_UInt128_mul_wide($i255, $i273);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  /* %332 = bitcast i128* %9 to { i64, i64 }*, !dbg !503, !psr.id !505, !verifier.code !63 */
  $p331 := $bitcast.ref.ref($p8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  /* %333 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %332, i32 0, i32 0, !dbg !503, !psr.id !506, !verifier.code !63 */
  $p332 := $add.ref($add.ref($p331, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  /* %334 = extractvalue { i64, i64 } %331, 0, !dbg !503, !psr.id !507, !verifier.code !63 */
  $i333 := $extractvalue.i64($p330, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %334, i64* %333, align 16, !dbg !503, !psr.id !508, !verifier.code !63 */
  $M.448 := $store.i64($M.448, $p332, $i333);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  /* %335 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %332, i32 0, i32 1, !dbg !503, !psr.id !509, !verifier.code !63 */
  $p334 := $add.ref($add.ref($p331, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  /* %336 = extractvalue { i64, i64 } %331, 1, !dbg !503, !psr.id !510, !verifier.code !63 */
  $i335 := $extractvalue.i64($p330, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %336, i64* %335, align 8, !dbg !503, !psr.id !511, !verifier.code !63 */
  $M.448 := $store.i64($M.448, $p334, $i335);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  /* %337 = load i128, i128* %9, align 16, !dbg !503, !psr.id !512, !verifier.code !63 */
  $i336 := $load.i128($M.448, $p8);
  /* call void @llvm.dbg.value(metadata i128 %337, metadata !7220, metadata !DIExpression()), !dbg !7022, !psr.id !7221, !verifier.code !64 */
  call {:cexpr "o40"} boogie_si_record_i128($i336);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %338 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %258, i64 %298), !dbg !515, !psr.id !516, !ValueTainted !325, !verifier.code !63 */
  call $p337 := FStar_UInt128_mul_wide($i257, $i297);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  /* %339 = bitcast i128* %10 to { i64, i64 }*, !dbg !515, !psr.id !517, !verifier.code !63 */
  $p338 := $bitcast.ref.ref($p9);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  /* %340 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %339, i32 0, i32 0, !dbg !515, !psr.id !518, !verifier.code !63 */
  $p339 := $add.ref($add.ref($p338, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  /* %341 = extractvalue { i64, i64 } %338, 0, !dbg !515, !psr.id !519, !verifier.code !63 */
  $i340 := $extractvalue.i64($p337, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %341, i64* %340, align 16, !dbg !515, !psr.id !520, !verifier.code !63 */
  $M.449 := $store.i64($M.449, $p339, $i340);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  /* %342 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %339, i32 0, i32 1, !dbg !515, !psr.id !521, !verifier.code !63 */
  $p341 := $add.ref($add.ref($p338, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  /* %343 = extractvalue { i64, i64 } %338, 1, !dbg !515, !psr.id !522, !verifier.code !63 */
  $i342 := $extractvalue.i64($p337, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %343, i64* %342, align 8, !dbg !515, !psr.id !523, !verifier.code !63 */
  $M.449 := $store.i64($M.449, $p341, $i342);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  /* %344 = load i128, i128* %10, align 16, !dbg !515, !psr.id !524, !verifier.code !63 */
  $i343 := $load.i128($M.449, $p9);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %309, i128* %11, align 16, !dbg !525, !psr.id !526, !verifier.code !63 */
  $M.450 := $store.i128($M.450, $p10, $i308);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %345 = bitcast i128* %11 to { i64, i64 }*, !dbg !525, !psr.id !527, !verifier.code !63 */
  $p344 := $bitcast.ref.ref($p10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %346 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %345, i32 0, i32 0, !dbg !525, !psr.id !528, !verifier.code !63 */
  $p345 := $add.ref($add.ref($p344, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %347 = load i64, i64* %346, align 16, !dbg !525, !psr.id !529, !verifier.code !63 */
  $i346 := $load.i64($M.450, $p345);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %348 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %345, i32 0, i32 1, !dbg !525, !psr.id !530, !verifier.code !63 */
  $p347 := $add.ref($add.ref($p344, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %349 = load i64, i64* %348, align 8, !dbg !525, !psr.id !531, !verifier.code !63 */
  $i348 := $load.i64($M.450, $p347);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %344, i128* %12, align 16, !dbg !525, !psr.id !532, !verifier.code !63 */
  $M.451 := $store.i128($M.451, $p11, $i343);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %350 = bitcast i128* %12 to { i64, i64 }*, !dbg !525, !psr.id !533, !verifier.code !63 */
  $p349 := $bitcast.ref.ref($p11);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %351 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %350, i32 0, i32 0, !dbg !525, !psr.id !534, !verifier.code !63 */
  $p350 := $add.ref($add.ref($p349, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %352 = load i64, i64* %351, align 16, !dbg !525, !psr.id !535, !verifier.code !63 */
  $i351 := $load.i64($M.451, $p350);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %353 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %350, i32 0, i32 1, !dbg !525, !psr.id !536, !verifier.code !63 */
  $p352 := $add.ref($add.ref($p349, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %354 = load i64, i64* %353, align 8, !dbg !525, !psr.id !537, !verifier.code !63 */
  $i353 := $load.i64($M.451, $p352);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %355 = call { i64, i64 } @FStar_UInt128_add(i64 %347, i64 %349, i64 %352, i64 %354), !dbg !525, !psr.id !538, !verifier.code !63 */
  call $p354 := FStar_UInt128_add($i346, $i348, $i351, $i353);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %356 = bitcast i128* %13 to { i64, i64 }*, !dbg !525, !psr.id !539, !verifier.code !63 */
  $p355 := $bitcast.ref.ref($p12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %357 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %356, i32 0, i32 0, !dbg !525, !psr.id !540, !verifier.code !63 */
  $p356 := $add.ref($add.ref($p355, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %358 = extractvalue { i64, i64 } %355, 0, !dbg !525, !psr.id !541, !verifier.code !63 */
  $i357 := $extractvalue.i64($p354, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %358, i64* %357, align 16, !dbg !525, !psr.id !542, !verifier.code !63 */
  $M.452 := $store.i64($M.452, $p356, $i357);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %359 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %356, i32 0, i32 1, !dbg !525, !psr.id !543, !verifier.code !63 */
  $p358 := $add.ref($add.ref($p355, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %360 = extractvalue { i64, i64 } %355, 1, !dbg !525, !psr.id !544, !verifier.code !63 */
  $i359 := $extractvalue.i64($p354, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %360, i64* %359, align 8, !dbg !525, !psr.id !545, !verifier.code !63 */
  $M.452 := $store.i64($M.452, $p358, $i359);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  /* %361 = load i128, i128* %13, align 16, !dbg !525, !psr.id !546, !verifier.code !63 */
  $i360 := $load.i128($M.452, $p12);
  /* call void @llvm.dbg.value(metadata i128 %361, metadata !7254, metadata !DIExpression()), !dbg !7022, !psr.id !7255, !verifier.code !64 */
  call {:cexpr "o010"} boogie_si_record_i128($i360);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %362 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %258, i64 %266), !dbg !549, !psr.id !550, !ValueTainted !325, !verifier.code !63 */
  call $p361 := FStar_UInt128_mul_wide($i257, $i265);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  /* %363 = bitcast i128* %14 to { i64, i64 }*, !dbg !549, !psr.id !551, !verifier.code !63 */
  $p362 := $bitcast.ref.ref($p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  /* %364 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %363, i32 0, i32 0, !dbg !549, !psr.id !552, !verifier.code !63 */
  $p363 := $add.ref($add.ref($p362, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  /* %365 = extractvalue { i64, i64 } %362, 0, !dbg !549, !psr.id !553, !verifier.code !63 */
  $i364 := $extractvalue.i64($p361, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %365, i64* %364, align 16, !dbg !549, !psr.id !554, !verifier.code !63 */
  $M.453 := $store.i64($M.453, $p363, $i364);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  /* %366 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %363, i32 0, i32 1, !dbg !549, !psr.id !555, !verifier.code !63 */
  $p365 := $add.ref($add.ref($p362, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  /* %367 = extractvalue { i64, i64 } %362, 1, !dbg !549, !psr.id !556, !verifier.code !63 */
  $i366 := $extractvalue.i64($p361, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %367, i64* %366, align 8, !dbg !549, !psr.id !557, !verifier.code !63 */
  $M.453 := $store.i64($M.453, $p365, $i366);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  /* %368 = load i128, i128* %14, align 16, !dbg !549, !psr.id !558, !verifier.code !63 */
  $i367 := $load.i128($M.453, $p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %316, i128* %15, align 16, !dbg !559, !psr.id !560, !verifier.code !63 */
  $M.454 := $store.i128($M.454, $p14, $i315);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %369 = bitcast i128* %15 to { i64, i64 }*, !dbg !559, !psr.id !561, !verifier.code !63 */
  $p368 := $bitcast.ref.ref($p14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %370 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %369, i32 0, i32 0, !dbg !559, !psr.id !562, !verifier.code !63 */
  $p369 := $add.ref($add.ref($p368, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %371 = load i64, i64* %370, align 16, !dbg !559, !psr.id !563, !verifier.code !63 */
  $i370 := $load.i64($M.454, $p369);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %372 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %369, i32 0, i32 1, !dbg !559, !psr.id !564, !verifier.code !63 */
  $p371 := $add.ref($add.ref($p368, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %373 = load i64, i64* %372, align 8, !dbg !559, !psr.id !565, !verifier.code !63 */
  $i372 := $load.i64($M.454, $p371);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %368, i128* %16, align 16, !dbg !559, !psr.id !566, !verifier.code !63 */
  $M.455 := $store.i128($M.455, $p15, $i367);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %374 = bitcast i128* %16 to { i64, i64 }*, !dbg !559, !psr.id !567, !verifier.code !63 */
  $p373 := $bitcast.ref.ref($p15);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %375 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %374, i32 0, i32 0, !dbg !559, !psr.id !568, !verifier.code !63 */
  $p374 := $add.ref($add.ref($p373, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %376 = load i64, i64* %375, align 16, !dbg !559, !psr.id !569, !verifier.code !63 */
  $i375 := $load.i64($M.455, $p374);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %377 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %374, i32 0, i32 1, !dbg !559, !psr.id !570, !verifier.code !63 */
  $p376 := $add.ref($add.ref($p373, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %378 = load i64, i64* %377, align 8, !dbg !559, !psr.id !571, !verifier.code !63 */
  $i377 := $load.i64($M.455, $p376);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %379 = call { i64, i64 } @FStar_UInt128_add(i64 %371, i64 %373, i64 %376, i64 %378), !dbg !559, !psr.id !572, !verifier.code !63 */
  call $p378 := FStar_UInt128_add($i370, $i372, $i375, $i377);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %380 = bitcast i128* %17 to { i64, i64 }*, !dbg !559, !psr.id !573, !verifier.code !63 */
  $p379 := $bitcast.ref.ref($p16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %381 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %380, i32 0, i32 0, !dbg !559, !psr.id !574, !verifier.code !63 */
  $p380 := $add.ref($add.ref($p379, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %382 = extractvalue { i64, i64 } %379, 0, !dbg !559, !psr.id !575, !verifier.code !63 */
  $i381 := $extractvalue.i64($p378, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %382, i64* %381, align 16, !dbg !559, !psr.id !576, !verifier.code !63 */
  $M.456 := $store.i64($M.456, $p380, $i381);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %383 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %380, i32 0, i32 1, !dbg !559, !psr.id !577, !verifier.code !63 */
  $p382 := $add.ref($add.ref($p379, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %384 = extractvalue { i64, i64 } %379, 1, !dbg !559, !psr.id !578, !verifier.code !63 */
  $i383 := $extractvalue.i64($p378, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %384, i64* %383, align 8, !dbg !559, !psr.id !579, !verifier.code !63 */
  $M.456 := $store.i64($M.456, $p382, $i383);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  /* %385 = load i128, i128* %17, align 16, !dbg !559, !psr.id !580, !verifier.code !63 */
  $i384 := $load.i128($M.456, $p16);
  /* call void @llvm.dbg.value(metadata i128 %385, metadata !7288, metadata !DIExpression()), !dbg !7022, !psr.id !7289, !verifier.code !64 */
  call {:cexpr "o110"} boogie_si_record_i128($i384);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %386 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %258, i64 %268), !dbg !583, !psr.id !584, !ValueTainted !325, !verifier.code !63 */
  call $p385 := FStar_UInt128_mul_wide($i257, $i267);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  /* %387 = bitcast i128* %18 to { i64, i64 }*, !dbg !583, !psr.id !585, !verifier.code !63 */
  $p386 := $bitcast.ref.ref($p17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  /* %388 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %387, i32 0, i32 0, !dbg !583, !psr.id !586, !verifier.code !63 */
  $p387 := $add.ref($add.ref($p386, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  /* %389 = extractvalue { i64, i64 } %386, 0, !dbg !583, !psr.id !587, !verifier.code !63 */
  $i388 := $extractvalue.i64($p385, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %389, i64* %388, align 16, !dbg !583, !psr.id !588, !verifier.code !63 */
  $M.457 := $store.i64($M.457, $p387, $i388);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  /* %390 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %387, i32 0, i32 1, !dbg !583, !psr.id !589, !verifier.code !63 */
  $p389 := $add.ref($add.ref($p386, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  /* %391 = extractvalue { i64, i64 } %386, 1, !dbg !583, !psr.id !590, !verifier.code !63 */
  $i390 := $extractvalue.i64($p385, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %391, i64* %390, align 8, !dbg !583, !psr.id !591, !verifier.code !63 */
  $M.457 := $store.i64($M.457, $p389, $i390);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  /* %392 = load i128, i128* %18, align 16, !dbg !583, !psr.id !592, !verifier.code !63 */
  $i391 := $load.i128($M.457, $p17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %323, i128* %19, align 16, !dbg !593, !psr.id !594, !verifier.code !63 */
  $M.458 := $store.i128($M.458, $p18, $i322);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %393 = bitcast i128* %19 to { i64, i64 }*, !dbg !593, !psr.id !595, !verifier.code !63 */
  $p392 := $bitcast.ref.ref($p18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %394 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %393, i32 0, i32 0, !dbg !593, !psr.id !596, !verifier.code !63 */
  $p393 := $add.ref($add.ref($p392, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %395 = load i64, i64* %394, align 16, !dbg !593, !psr.id !597, !verifier.code !63 */
  $i394 := $load.i64($M.458, $p393);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %396 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %393, i32 0, i32 1, !dbg !593, !psr.id !598, !verifier.code !63 */
  $p395 := $add.ref($add.ref($p392, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %397 = load i64, i64* %396, align 8, !dbg !593, !psr.id !599, !verifier.code !63 */
  $i396 := $load.i64($M.458, $p395);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %392, i128* %20, align 16, !dbg !593, !psr.id !600, !verifier.code !63 */
  $M.459 := $store.i128($M.459, $p19, $i391);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %398 = bitcast i128* %20 to { i64, i64 }*, !dbg !593, !psr.id !601, !verifier.code !63 */
  $p397 := $bitcast.ref.ref($p19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %399 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %398, i32 0, i32 0, !dbg !593, !psr.id !602, !verifier.code !63 */
  $p398 := $add.ref($add.ref($p397, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %400 = load i64, i64* %399, align 16, !dbg !593, !psr.id !603, !verifier.code !63 */
  $i399 := $load.i64($M.459, $p398);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %401 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %398, i32 0, i32 1, !dbg !593, !psr.id !604, !verifier.code !63 */
  $p400 := $add.ref($add.ref($p397, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %402 = load i64, i64* %401, align 8, !dbg !593, !psr.id !605, !verifier.code !63 */
  $i401 := $load.i64($M.459, $p400);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %403 = call { i64, i64 } @FStar_UInt128_add(i64 %395, i64 %397, i64 %400, i64 %402), !dbg !593, !psr.id !606, !verifier.code !63 */
  call $p402 := FStar_UInt128_add($i394, $i396, $i399, $i401);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %404 = bitcast i128* %21 to { i64, i64 }*, !dbg !593, !psr.id !607, !verifier.code !63 */
  $p403 := $bitcast.ref.ref($p20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %405 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %404, i32 0, i32 0, !dbg !593, !psr.id !608, !verifier.code !63 */
  $p404 := $add.ref($add.ref($p403, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %406 = extractvalue { i64, i64 } %403, 0, !dbg !593, !psr.id !609, !verifier.code !63 */
  $i405 := $extractvalue.i64($p402, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %406, i64* %405, align 16, !dbg !593, !psr.id !610, !verifier.code !63 */
  $M.460 := $store.i64($M.460, $p404, $i405);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %407 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %404, i32 0, i32 1, !dbg !593, !psr.id !611, !verifier.code !63 */
  $p406 := $add.ref($add.ref($p403, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %408 = extractvalue { i64, i64 } %403, 1, !dbg !593, !psr.id !612, !verifier.code !63 */
  $i407 := $extractvalue.i64($p402, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %408, i64* %407, align 8, !dbg !593, !psr.id !613, !verifier.code !63 */
  $M.460 := $store.i64($M.460, $p406, $i407);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  /* %409 = load i128, i128* %21, align 16, !dbg !593, !psr.id !614, !verifier.code !63 */
  $i408 := $load.i128($M.460, $p20);
  /* call void @llvm.dbg.value(metadata i128 %409, metadata !7322, metadata !DIExpression()), !dbg !7022, !psr.id !7323, !verifier.code !64 */
  call {:cexpr "o210"} boogie_si_record_i128($i408);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %410 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %258, i64 %270), !dbg !617, !psr.id !618, !ValueTainted !325, !verifier.code !63 */
  call $p409 := FStar_UInt128_mul_wide($i257, $i269);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  /* %411 = bitcast i128* %22 to { i64, i64 }*, !dbg !617, !psr.id !619, !verifier.code !63 */
  $p410 := $bitcast.ref.ref($p21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  /* %412 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %411, i32 0, i32 0, !dbg !617, !psr.id !620, !verifier.code !63 */
  $p411 := $add.ref($add.ref($p410, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  /* %413 = extractvalue { i64, i64 } %410, 0, !dbg !617, !psr.id !621, !verifier.code !63 */
  $i412 := $extractvalue.i64($p409, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %413, i64* %412, align 16, !dbg !617, !psr.id !622, !verifier.code !63 */
  $M.461 := $store.i64($M.461, $p411, $i412);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  /* %414 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %411, i32 0, i32 1, !dbg !617, !psr.id !623, !verifier.code !63 */
  $p413 := $add.ref($add.ref($p410, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  /* %415 = extractvalue { i64, i64 } %410, 1, !dbg !617, !psr.id !624, !verifier.code !63 */
  $i414 := $extractvalue.i64($p409, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %415, i64* %414, align 8, !dbg !617, !psr.id !625, !verifier.code !63 */
  $M.461 := $store.i64($M.461, $p413, $i414);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  /* %416 = load i128, i128* %22, align 16, !dbg !617, !psr.id !626, !verifier.code !63 */
  $i415 := $load.i128($M.461, $p21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %330, i128* %23, align 16, !dbg !627, !psr.id !628, !verifier.code !63 */
  $M.462 := $store.i128($M.462, $p22, $i329);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %417 = bitcast i128* %23 to { i64, i64 }*, !dbg !627, !psr.id !629, !verifier.code !63 */
  $p416 := $bitcast.ref.ref($p22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %418 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %417, i32 0, i32 0, !dbg !627, !psr.id !630, !verifier.code !63 */
  $p417 := $add.ref($add.ref($p416, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %419 = load i64, i64* %418, align 16, !dbg !627, !psr.id !631, !verifier.code !63 */
  $i418 := $load.i64($M.462, $p417);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %420 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %417, i32 0, i32 1, !dbg !627, !psr.id !632, !verifier.code !63 */
  $p419 := $add.ref($add.ref($p416, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %421 = load i64, i64* %420, align 8, !dbg !627, !psr.id !633, !verifier.code !63 */
  $i420 := $load.i64($M.462, $p419);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %416, i128* %24, align 16, !dbg !627, !psr.id !634, !verifier.code !63 */
  $M.463 := $store.i128($M.463, $p23, $i415);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %422 = bitcast i128* %24 to { i64, i64 }*, !dbg !627, !psr.id !635, !verifier.code !63 */
  $p421 := $bitcast.ref.ref($p23);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %423 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %422, i32 0, i32 0, !dbg !627, !psr.id !636, !verifier.code !63 */
  $p422 := $add.ref($add.ref($p421, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %424 = load i64, i64* %423, align 16, !dbg !627, !psr.id !637, !verifier.code !63 */
  $i423 := $load.i64($M.463, $p422);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %425 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %422, i32 0, i32 1, !dbg !627, !psr.id !638, !verifier.code !63 */
  $p424 := $add.ref($add.ref($p421, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %426 = load i64, i64* %425, align 8, !dbg !627, !psr.id !639, !verifier.code !63 */
  $i425 := $load.i64($M.463, $p424);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %427 = call { i64, i64 } @FStar_UInt128_add(i64 %419, i64 %421, i64 %424, i64 %426), !dbg !627, !psr.id !640, !verifier.code !63 */
  call $p426 := FStar_UInt128_add($i418, $i420, $i423, $i425);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %428 = bitcast i128* %25 to { i64, i64 }*, !dbg !627, !psr.id !641, !verifier.code !63 */
  $p427 := $bitcast.ref.ref($p24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %429 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %428, i32 0, i32 0, !dbg !627, !psr.id !642, !verifier.code !63 */
  $p428 := $add.ref($add.ref($p427, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %430 = extractvalue { i64, i64 } %427, 0, !dbg !627, !psr.id !643, !verifier.code !63 */
  $i429 := $extractvalue.i64($p426, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %430, i64* %429, align 16, !dbg !627, !psr.id !644, !verifier.code !63 */
  $M.464 := $store.i64($M.464, $p428, $i429);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %431 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %428, i32 0, i32 1, !dbg !627, !psr.id !645, !verifier.code !63 */
  $p430 := $add.ref($add.ref($p427, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %432 = extractvalue { i64, i64 } %427, 1, !dbg !627, !psr.id !646, !verifier.code !63 */
  $i431 := $extractvalue.i64($p426, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %432, i64* %431, align 8, !dbg !627, !psr.id !647, !verifier.code !63 */
  $M.464 := $store.i64($M.464, $p430, $i431);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  /* %433 = load i128, i128* %25, align 16, !dbg !627, !psr.id !648, !verifier.code !63 */
  $i432 := $load.i128($M.464, $p24);
  /* call void @llvm.dbg.value(metadata i128 %433, metadata !7356, metadata !DIExpression()), !dbg !7022, !psr.id !7357, !verifier.code !64 */
  call {:cexpr "o310"} boogie_si_record_i128($i432);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %434 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %258, i64 %272), !dbg !651, !psr.id !652, !ValueTainted !325, !verifier.code !63 */
  call $p433 := FStar_UInt128_mul_wide($i257, $i271);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  /* %435 = bitcast i128* %26 to { i64, i64 }*, !dbg !651, !psr.id !653, !verifier.code !63 */
  $p434 := $bitcast.ref.ref($p25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  /* %436 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %435, i32 0, i32 0, !dbg !651, !psr.id !654, !verifier.code !63 */
  $p435 := $add.ref($add.ref($p434, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  /* %437 = extractvalue { i64, i64 } %434, 0, !dbg !651, !psr.id !655, !verifier.code !63 */
  $i436 := $extractvalue.i64($p433, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %437, i64* %436, align 16, !dbg !651, !psr.id !656, !verifier.code !63 */
  $M.465 := $store.i64($M.465, $p435, $i436);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  /* %438 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %435, i32 0, i32 1, !dbg !651, !psr.id !657, !verifier.code !63 */
  $p437 := $add.ref($add.ref($p434, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  /* %439 = extractvalue { i64, i64 } %434, 1, !dbg !651, !psr.id !658, !verifier.code !63 */
  $i438 := $extractvalue.i64($p433, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  /* store i64 %439, i64* %438, align 8, !dbg !651, !psr.id !659, !verifier.code !63 */
  $M.465 := $store.i64($M.465, $p437, $i438);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  /* %440 = load i128, i128* %26, align 16, !dbg !651, !psr.id !660, !verifier.code !63 */
  $i439 := $load.i128($M.465, $p25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %337, i128* %27, align 16, !dbg !661, !psr.id !662, !verifier.code !63 */
  $M.466 := $store.i128($M.466, $p26, $i336);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %441 = bitcast i128* %27 to { i64, i64 }*, !dbg !661, !psr.id !663, !verifier.code !63 */
  $p440 := $bitcast.ref.ref($p26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %442 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %441, i32 0, i32 0, !dbg !661, !psr.id !664, !verifier.code !63 */
  $p441 := $add.ref($add.ref($p440, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %443 = load i64, i64* %442, align 16, !dbg !661, !psr.id !665, !verifier.code !63 */
  $i442 := $load.i64($M.466, $p441);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %444 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %441, i32 0, i32 1, !dbg !661, !psr.id !666, !verifier.code !63 */
  $p443 := $add.ref($add.ref($p440, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %445 = load i64, i64* %444, align 8, !dbg !661, !psr.id !667, !verifier.code !63 */
  $i444 := $load.i64($M.466, $p443);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %440, i128* %28, align 16, !dbg !661, !psr.id !668, !verifier.code !63 */
  $M.467 := $store.i128($M.467, $p27, $i439);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %446 = bitcast i128* %28 to { i64, i64 }*, !dbg !661, !psr.id !669, !verifier.code !63 */
  $p445 := $bitcast.ref.ref($p27);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %447 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %446, i32 0, i32 0, !dbg !661, !psr.id !670, !verifier.code !63 */
  $p446 := $add.ref($add.ref($p445, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %448 = load i64, i64* %447, align 16, !dbg !661, !psr.id !671, !verifier.code !63 */
  $i447 := $load.i64($M.467, $p446);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %449 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %446, i32 0, i32 1, !dbg !661, !psr.id !672, !verifier.code !63 */
  $p448 := $add.ref($add.ref($p445, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %450 = load i64, i64* %449, align 8, !dbg !661, !psr.id !673, !verifier.code !63 */
  $i449 := $load.i64($M.467, $p448);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %451 = call { i64, i64 } @FStar_UInt128_add(i64 %443, i64 %445, i64 %448, i64 %450), !dbg !661, !psr.id !674, !verifier.code !63 */
  call $p450 := FStar_UInt128_add($i442, $i444, $i447, $i449);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %452 = bitcast i128* %29 to { i64, i64 }*, !dbg !661, !psr.id !675, !verifier.code !63 */
  $p451 := $bitcast.ref.ref($p28);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %453 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %452, i32 0, i32 0, !dbg !661, !psr.id !676, !verifier.code !63 */
  $p452 := $add.ref($add.ref($p451, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %454 = extractvalue { i64, i64 } %451, 0, !dbg !661, !psr.id !677, !verifier.code !63 */
  $i453 := $extractvalue.i64($p450, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %454, i64* %453, align 16, !dbg !661, !psr.id !678, !verifier.code !63 */
  $M.468 := $store.i64($M.468, $p452, $i453);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %455 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %452, i32 0, i32 1, !dbg !661, !psr.id !679, !verifier.code !63 */
  $p454 := $add.ref($add.ref($p451, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %456 = extractvalue { i64, i64 } %451, 1, !dbg !661, !psr.id !680, !verifier.code !63 */
  $i455 := $extractvalue.i64($p450, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %456, i64* %455, align 8, !dbg !661, !psr.id !681, !verifier.code !63 */
  $M.468 := $store.i64($M.468, $p454, $i455);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  /* %457 = load i128, i128* %29, align 16, !dbg !661, !psr.id !682, !verifier.code !63 */
  $i456 := $load.i128($M.468, $p28);
  /* call void @llvm.dbg.value(metadata i128 %457, metadata !7390, metadata !DIExpression()), !dbg !7022, !psr.id !7391, !verifier.code !64 */
  call {:cexpr "o410"} boogie_si_record_i128($i456);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %458 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %260, i64 %297), !dbg !685, !psr.id !686, !ValueTainted !325, !verifier.code !63 */
  call $p457 := FStar_UInt128_mul_wide($i259, $i296);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  /* %459 = bitcast i128* %30 to { i64, i64 }*, !dbg !685, !psr.id !687, !verifier.code !63 */
  $p458 := $bitcast.ref.ref($p29);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  /* %460 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %459, i32 0, i32 0, !dbg !685, !psr.id !688, !verifier.code !63 */
  $p459 := $add.ref($add.ref($p458, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  /* %461 = extractvalue { i64, i64 } %458, 0, !dbg !685, !psr.id !689, !verifier.code !63 */
  $i460 := $extractvalue.i64($p457, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %461, i64* %460, align 16, !dbg !685, !psr.id !690, !verifier.code !63 */
  $M.469 := $store.i64($M.469, $p459, $i460);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  /* %462 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %459, i32 0, i32 1, !dbg !685, !psr.id !691, !verifier.code !63 */
  $p461 := $add.ref($add.ref($p458, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  /* %463 = extractvalue { i64, i64 } %458, 1, !dbg !685, !psr.id !692, !verifier.code !63 */
  $i462 := $extractvalue.i64($p457, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %463, i64* %462, align 8, !dbg !685, !psr.id !693, !verifier.code !63 */
  $M.469 := $store.i64($M.469, $p461, $i462);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  /* %464 = load i128, i128* %30, align 16, !dbg !685, !psr.id !694, !verifier.code !63 */
  $i463 := $load.i128($M.469, $p29);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %361, i128* %31, align 16, !dbg !695, !psr.id !696, !verifier.code !63 */
  $M.470 := $store.i128($M.470, $p30, $i360);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %465 = bitcast i128* %31 to { i64, i64 }*, !dbg !695, !psr.id !697, !verifier.code !63 */
  $p464 := $bitcast.ref.ref($p30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %466 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %465, i32 0, i32 0, !dbg !695, !psr.id !698, !verifier.code !63 */
  $p465 := $add.ref($add.ref($p464, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %467 = load i64, i64* %466, align 16, !dbg !695, !psr.id !699, !verifier.code !63 */
  $i466 := $load.i64($M.470, $p465);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %468 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %465, i32 0, i32 1, !dbg !695, !psr.id !700, !verifier.code !63 */
  $p467 := $add.ref($add.ref($p464, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %469 = load i64, i64* %468, align 8, !dbg !695, !psr.id !701, !verifier.code !63 */
  $i468 := $load.i64($M.470, $p467);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %464, i128* %32, align 16, !dbg !695, !psr.id !702, !verifier.code !63 */
  $M.471 := $store.i128($M.471, $p31, $i463);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %470 = bitcast i128* %32 to { i64, i64 }*, !dbg !695, !psr.id !703, !verifier.code !63 */
  $p469 := $bitcast.ref.ref($p31);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %471 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %470, i32 0, i32 0, !dbg !695, !psr.id !704, !verifier.code !63 */
  $p470 := $add.ref($add.ref($p469, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %472 = load i64, i64* %471, align 16, !dbg !695, !psr.id !705, !verifier.code !63 */
  $i471 := $load.i64($M.471, $p470);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %473 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %470, i32 0, i32 1, !dbg !695, !psr.id !706, !verifier.code !63 */
  $p472 := $add.ref($add.ref($p469, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %474 = load i64, i64* %473, align 8, !dbg !695, !psr.id !707, !verifier.code !63 */
  $i473 := $load.i64($M.471, $p472);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %475 = call { i64, i64 } @FStar_UInt128_add(i64 %467, i64 %469, i64 %472, i64 %474), !dbg !695, !psr.id !708, !verifier.code !63 */
  call $p474 := FStar_UInt128_add($i466, $i468, $i471, $i473);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %476 = bitcast i128* %33 to { i64, i64 }*, !dbg !695, !psr.id !709, !verifier.code !63 */
  $p475 := $bitcast.ref.ref($p32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %477 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %476, i32 0, i32 0, !dbg !695, !psr.id !710, !verifier.code !63 */
  $p476 := $add.ref($add.ref($p475, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %478 = extractvalue { i64, i64 } %475, 0, !dbg !695, !psr.id !711, !verifier.code !63 */
  $i477 := $extractvalue.i64($p474, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %478, i64* %477, align 16, !dbg !695, !psr.id !712, !verifier.code !63 */
  $M.472 := $store.i64($M.472, $p476, $i477);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %479 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %476, i32 0, i32 1, !dbg !695, !psr.id !713, !verifier.code !63 */
  $p478 := $add.ref($add.ref($p475, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %480 = extractvalue { i64, i64 } %475, 1, !dbg !695, !psr.id !714, !verifier.code !63 */
  $i479 := $extractvalue.i64($p474, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %480, i64* %479, align 8, !dbg !695, !psr.id !715, !verifier.code !63 */
  $M.472 := $store.i64($M.472, $p478, $i479);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  /* %481 = load i128, i128* %33, align 16, !dbg !695, !psr.id !716, !verifier.code !63 */
  $i480 := $load.i128($M.472, $p32);
  /* call void @llvm.dbg.value(metadata i128 %481, metadata !7424, metadata !DIExpression()), !dbg !7022, !psr.id !7425, !verifier.code !64 */
  call {:cexpr "o020"} boogie_si_record_i128($i480);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %482 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %260, i64 %298), !dbg !719, !psr.id !720, !ValueTainted !325, !verifier.code !63 */
  call $p481 := FStar_UInt128_mul_wide($i259, $i297);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  /* %483 = bitcast i128* %34 to { i64, i64 }*, !dbg !719, !psr.id !721, !verifier.code !63 */
  $p482 := $bitcast.ref.ref($p33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  /* %484 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %483, i32 0, i32 0, !dbg !719, !psr.id !722, !verifier.code !63 */
  $p483 := $add.ref($add.ref($p482, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  /* %485 = extractvalue { i64, i64 } %482, 0, !dbg !719, !psr.id !723, !verifier.code !63 */
  $i484 := $extractvalue.i64($p481, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %485, i64* %484, align 16, !dbg !719, !psr.id !724, !verifier.code !63 */
  $M.473 := $store.i64($M.473, $p483, $i484);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  /* %486 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %483, i32 0, i32 1, !dbg !719, !psr.id !725, !verifier.code !63 */
  $p485 := $add.ref($add.ref($p482, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  /* %487 = extractvalue { i64, i64 } %482, 1, !dbg !719, !psr.id !726, !verifier.code !63 */
  $i486 := $extractvalue.i64($p481, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %487, i64* %486, align 8, !dbg !719, !psr.id !727, !verifier.code !63 */
  $M.473 := $store.i64($M.473, $p485, $i486);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  /* %488 = load i128, i128* %34, align 16, !dbg !719, !psr.id !728, !verifier.code !63 */
  $i487 := $load.i128($M.473, $p33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %385, i128* %35, align 16, !dbg !729, !psr.id !730, !verifier.code !63 */
  $M.474 := $store.i128($M.474, $p34, $i384);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %489 = bitcast i128* %35 to { i64, i64 }*, !dbg !729, !psr.id !731, !verifier.code !63 */
  $p488 := $bitcast.ref.ref($p34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %490 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %489, i32 0, i32 0, !dbg !729, !psr.id !732, !verifier.code !63 */
  $p489 := $add.ref($add.ref($p488, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %491 = load i64, i64* %490, align 16, !dbg !729, !psr.id !733, !verifier.code !63 */
  $i490 := $load.i64($M.474, $p489);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %492 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %489, i32 0, i32 1, !dbg !729, !psr.id !734, !verifier.code !63 */
  $p491 := $add.ref($add.ref($p488, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %493 = load i64, i64* %492, align 8, !dbg !729, !psr.id !735, !verifier.code !63 */
  $i492 := $load.i64($M.474, $p491);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %488, i128* %36, align 16, !dbg !729, !psr.id !736, !verifier.code !63 */
  $M.475 := $store.i128($M.475, $p35, $i487);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %494 = bitcast i128* %36 to { i64, i64 }*, !dbg !729, !psr.id !737, !verifier.code !63 */
  $p493 := $bitcast.ref.ref($p35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %495 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %494, i32 0, i32 0, !dbg !729, !psr.id !738, !verifier.code !63 */
  $p494 := $add.ref($add.ref($p493, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %496 = load i64, i64* %495, align 16, !dbg !729, !psr.id !739, !verifier.code !63 */
  $i495 := $load.i64($M.475, $p494);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %497 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %494, i32 0, i32 1, !dbg !729, !psr.id !740, !verifier.code !63 */
  $p496 := $add.ref($add.ref($p493, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %498 = load i64, i64* %497, align 8, !dbg !729, !psr.id !741, !verifier.code !63 */
  $i497 := $load.i64($M.475, $p496);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %499 = call { i64, i64 } @FStar_UInt128_add(i64 %491, i64 %493, i64 %496, i64 %498), !dbg !729, !psr.id !742, !verifier.code !63 */
  call $p498 := FStar_UInt128_add($i490, $i492, $i495, $i497);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %500 = bitcast i128* %37 to { i64, i64 }*, !dbg !729, !psr.id !743, !verifier.code !63 */
  $p499 := $bitcast.ref.ref($p36);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %501 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %500, i32 0, i32 0, !dbg !729, !psr.id !744, !verifier.code !63 */
  $p500 := $add.ref($add.ref($p499, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %502 = extractvalue { i64, i64 } %499, 0, !dbg !729, !psr.id !745, !verifier.code !63 */
  $i501 := $extractvalue.i64($p498, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %502, i64* %501, align 16, !dbg !729, !psr.id !746, !verifier.code !63 */
  $M.476 := $store.i64($M.476, $p500, $i501);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %503 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %500, i32 0, i32 1, !dbg !729, !psr.id !747, !verifier.code !63 */
  $p502 := $add.ref($add.ref($p499, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %504 = extractvalue { i64, i64 } %499, 1, !dbg !729, !psr.id !748, !verifier.code !63 */
  $i503 := $extractvalue.i64($p498, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %504, i64* %503, align 8, !dbg !729, !psr.id !749, !verifier.code !63 */
  $M.476 := $store.i64($M.476, $p502, $i503);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  /* %505 = load i128, i128* %37, align 16, !dbg !729, !psr.id !750, !verifier.code !63 */
  $i504 := $load.i128($M.476, $p36);
  /* call void @llvm.dbg.value(metadata i128 %505, metadata !7458, metadata !DIExpression()), !dbg !7022, !psr.id !7459, !verifier.code !64 */
  call {:cexpr "o120"} boogie_si_record_i128($i504);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %506 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %260, i64 %266), !dbg !753, !psr.id !754, !ValueTainted !325, !verifier.code !63 */
  call $p505 := FStar_UInt128_mul_wide($i259, $i265);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  /* %507 = bitcast i128* %38 to { i64, i64 }*, !dbg !753, !psr.id !755, !verifier.code !63 */
  $p506 := $bitcast.ref.ref($p37);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  /* %508 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %507, i32 0, i32 0, !dbg !753, !psr.id !756, !verifier.code !63 */
  $p507 := $add.ref($add.ref($p506, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  /* %509 = extractvalue { i64, i64 } %506, 0, !dbg !753, !psr.id !757, !verifier.code !63 */
  $i508 := $extractvalue.i64($p505, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %509, i64* %508, align 16, !dbg !753, !psr.id !758, !verifier.code !63 */
  $M.477 := $store.i64($M.477, $p507, $i508);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  /* %510 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %507, i32 0, i32 1, !dbg !753, !psr.id !759, !verifier.code !63 */
  $p509 := $add.ref($add.ref($p506, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  /* %511 = extractvalue { i64, i64 } %506, 1, !dbg !753, !psr.id !760, !verifier.code !63 */
  $i510 := $extractvalue.i64($p505, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %511, i64* %510, align 8, !dbg !753, !psr.id !761, !verifier.code !63 */
  $M.477 := $store.i64($M.477, $p509, $i510);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  /* %512 = load i128, i128* %38, align 16, !dbg !753, !psr.id !762, !verifier.code !63 */
  $i511 := $load.i128($M.477, $p37);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %409, i128* %39, align 16, !dbg !763, !psr.id !764, !verifier.code !63 */
  $M.478 := $store.i128($M.478, $p38, $i408);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %513 = bitcast i128* %39 to { i64, i64 }*, !dbg !763, !psr.id !765, !verifier.code !63 */
  $p512 := $bitcast.ref.ref($p38);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %514 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %513, i32 0, i32 0, !dbg !763, !psr.id !766, !verifier.code !63 */
  $p513 := $add.ref($add.ref($p512, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %515 = load i64, i64* %514, align 16, !dbg !763, !psr.id !767, !verifier.code !63 */
  $i514 := $load.i64($M.478, $p513);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %516 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %513, i32 0, i32 1, !dbg !763, !psr.id !768, !verifier.code !63 */
  $p515 := $add.ref($add.ref($p512, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %517 = load i64, i64* %516, align 8, !dbg !763, !psr.id !769, !verifier.code !63 */
  $i516 := $load.i64($M.478, $p515);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %512, i128* %40, align 16, !dbg !763, !psr.id !770, !verifier.code !63 */
  $M.479 := $store.i128($M.479, $p39, $i511);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %518 = bitcast i128* %40 to { i64, i64 }*, !dbg !763, !psr.id !771, !verifier.code !63 */
  $p517 := $bitcast.ref.ref($p39);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %519 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %518, i32 0, i32 0, !dbg !763, !psr.id !772, !verifier.code !63 */
  $p518 := $add.ref($add.ref($p517, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %520 = load i64, i64* %519, align 16, !dbg !763, !psr.id !773, !verifier.code !63 */
  $i519 := $load.i64($M.479, $p518);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %521 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %518, i32 0, i32 1, !dbg !763, !psr.id !774, !verifier.code !63 */
  $p520 := $add.ref($add.ref($p517, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %522 = load i64, i64* %521, align 8, !dbg !763, !psr.id !775, !verifier.code !63 */
  $i521 := $load.i64($M.479, $p520);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %523 = call { i64, i64 } @FStar_UInt128_add(i64 %515, i64 %517, i64 %520, i64 %522), !dbg !763, !psr.id !776, !verifier.code !63 */
  call $p522 := FStar_UInt128_add($i514, $i516, $i519, $i521);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %524 = bitcast i128* %41 to { i64, i64 }*, !dbg !763, !psr.id !777, !verifier.code !63 */
  $p523 := $bitcast.ref.ref($p40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %525 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %524, i32 0, i32 0, !dbg !763, !psr.id !778, !verifier.code !63 */
  $p524 := $add.ref($add.ref($p523, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %526 = extractvalue { i64, i64 } %523, 0, !dbg !763, !psr.id !779, !verifier.code !63 */
  $i525 := $extractvalue.i64($p522, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %526, i64* %525, align 16, !dbg !763, !psr.id !780, !verifier.code !63 */
  $M.480 := $store.i64($M.480, $p524, $i525);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %527 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %524, i32 0, i32 1, !dbg !763, !psr.id !781, !verifier.code !63 */
  $p526 := $add.ref($add.ref($p523, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %528 = extractvalue { i64, i64 } %523, 1, !dbg !763, !psr.id !782, !verifier.code !63 */
  $i527 := $extractvalue.i64($p522, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %528, i64* %527, align 8, !dbg !763, !psr.id !783, !verifier.code !63 */
  $M.480 := $store.i64($M.480, $p526, $i527);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  /* %529 = load i128, i128* %41, align 16, !dbg !763, !psr.id !784, !verifier.code !63 */
  $i528 := $load.i128($M.480, $p40);
  /* call void @llvm.dbg.value(metadata i128 %529, metadata !7492, metadata !DIExpression()), !dbg !7022, !psr.id !7493, !verifier.code !64 */
  call {:cexpr "o220"} boogie_si_record_i128($i528);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %530 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %260, i64 %268), !dbg !787, !psr.id !788, !ValueTainted !325, !verifier.code !63 */
  call $p529 := FStar_UInt128_mul_wide($i259, $i267);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  /* %531 = bitcast i128* %42 to { i64, i64 }*, !dbg !787, !psr.id !789, !verifier.code !63 */
  $p530 := $bitcast.ref.ref($p41);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  /* %532 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %531, i32 0, i32 0, !dbg !787, !psr.id !790, !verifier.code !63 */
  $p531 := $add.ref($add.ref($p530, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  /* %533 = extractvalue { i64, i64 } %530, 0, !dbg !787, !psr.id !791, !verifier.code !63 */
  $i532 := $extractvalue.i64($p529, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %533, i64* %532, align 16, !dbg !787, !psr.id !792, !verifier.code !63 */
  $M.481 := $store.i64($M.481, $p531, $i532);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  /* %534 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %531, i32 0, i32 1, !dbg !787, !psr.id !793, !verifier.code !63 */
  $p533 := $add.ref($add.ref($p530, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  /* %535 = extractvalue { i64, i64 } %530, 1, !dbg !787, !psr.id !794, !verifier.code !63 */
  $i534 := $extractvalue.i64($p529, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %535, i64* %534, align 8, !dbg !787, !psr.id !795, !verifier.code !63 */
  $M.481 := $store.i64($M.481, $p533, $i534);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  /* %536 = load i128, i128* %42, align 16, !dbg !787, !psr.id !796, !verifier.code !63 */
  $i535 := $load.i128($M.481, $p41);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %433, i128* %43, align 16, !dbg !797, !psr.id !798, !verifier.code !63 */
  $M.482 := $store.i128($M.482, $p42, $i432);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %537 = bitcast i128* %43 to { i64, i64 }*, !dbg !797, !psr.id !799, !verifier.code !63 */
  $p536 := $bitcast.ref.ref($p42);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %538 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %537, i32 0, i32 0, !dbg !797, !psr.id !800, !verifier.code !63 */
  $p537 := $add.ref($add.ref($p536, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %539 = load i64, i64* %538, align 16, !dbg !797, !psr.id !801, !verifier.code !63 */
  $i538 := $load.i64($M.482, $p537);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %540 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %537, i32 0, i32 1, !dbg !797, !psr.id !802, !verifier.code !63 */
  $p539 := $add.ref($add.ref($p536, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %541 = load i64, i64* %540, align 8, !dbg !797, !psr.id !803, !verifier.code !63 */
  $i540 := $load.i64($M.482, $p539);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %536, i128* %44, align 16, !dbg !797, !psr.id !804, !verifier.code !63 */
  $M.483 := $store.i128($M.483, $p43, $i535);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %542 = bitcast i128* %44 to { i64, i64 }*, !dbg !797, !psr.id !805, !verifier.code !63 */
  $p541 := $bitcast.ref.ref($p43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %543 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %542, i32 0, i32 0, !dbg !797, !psr.id !806, !verifier.code !63 */
  $p542 := $add.ref($add.ref($p541, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %544 = load i64, i64* %543, align 16, !dbg !797, !psr.id !807, !verifier.code !63 */
  $i543 := $load.i64($M.483, $p542);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %545 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %542, i32 0, i32 1, !dbg !797, !psr.id !808, !verifier.code !63 */
  $p544 := $add.ref($add.ref($p541, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %546 = load i64, i64* %545, align 8, !dbg !797, !psr.id !809, !verifier.code !63 */
  $i545 := $load.i64($M.483, $p544);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %547 = call { i64, i64 } @FStar_UInt128_add(i64 %539, i64 %541, i64 %544, i64 %546), !dbg !797, !psr.id !810, !verifier.code !63 */
  call $p546 := FStar_UInt128_add($i538, $i540, $i543, $i545);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %548 = bitcast i128* %45 to { i64, i64 }*, !dbg !797, !psr.id !811, !verifier.code !63 */
  $p547 := $bitcast.ref.ref($p44);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %549 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %548, i32 0, i32 0, !dbg !797, !psr.id !812, !verifier.code !63 */
  $p548 := $add.ref($add.ref($p547, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %550 = extractvalue { i64, i64 } %547, 0, !dbg !797, !psr.id !813, !verifier.code !63 */
  $i549 := $extractvalue.i64($p546, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %550, i64* %549, align 16, !dbg !797, !psr.id !814, !verifier.code !63 */
  $M.484 := $store.i64($M.484, $p548, $i549);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %551 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %548, i32 0, i32 1, !dbg !797, !psr.id !815, !verifier.code !63 */
  $p550 := $add.ref($add.ref($p547, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %552 = extractvalue { i64, i64 } %547, 1, !dbg !797, !psr.id !816, !verifier.code !63 */
  $i551 := $extractvalue.i64($p546, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %552, i64* %551, align 8, !dbg !797, !psr.id !817, !verifier.code !63 */
  $M.484 := $store.i64($M.484, $p550, $i551);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  /* %553 = load i128, i128* %45, align 16, !dbg !797, !psr.id !818, !verifier.code !63 */
  $i552 := $load.i128($M.484, $p44);
  /* call void @llvm.dbg.value(metadata i128 %553, metadata !7526, metadata !DIExpression()), !dbg !7022, !psr.id !7527, !verifier.code !64 */
  call {:cexpr "o320"} boogie_si_record_i128($i552);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %554 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %260, i64 %270), !dbg !821, !psr.id !822, !ValueTainted !325, !verifier.code !63 */
  call $p553 := FStar_UInt128_mul_wide($i259, $i269);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  /* %555 = bitcast i128* %46 to { i64, i64 }*, !dbg !821, !psr.id !823, !verifier.code !63 */
  $p554 := $bitcast.ref.ref($p45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  /* %556 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %555, i32 0, i32 0, !dbg !821, !psr.id !824, !verifier.code !63 */
  $p555 := $add.ref($add.ref($p554, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  /* %557 = extractvalue { i64, i64 } %554, 0, !dbg !821, !psr.id !825, !verifier.code !63 */
  $i556 := $extractvalue.i64($p553, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %557, i64* %556, align 16, !dbg !821, !psr.id !826, !verifier.code !63 */
  $M.485 := $store.i64($M.485, $p555, $i556);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  /* %558 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %555, i32 0, i32 1, !dbg !821, !psr.id !827, !verifier.code !63 */
  $p557 := $add.ref($add.ref($p554, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  /* %559 = extractvalue { i64, i64 } %554, 1, !dbg !821, !psr.id !828, !verifier.code !63 */
  $i558 := $extractvalue.i64($p553, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %559, i64* %558, align 8, !dbg !821, !psr.id !829, !verifier.code !63 */
  $M.485 := $store.i64($M.485, $p557, $i558);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  /* %560 = load i128, i128* %46, align 16, !dbg !821, !psr.id !830, !verifier.code !63 */
  $i559 := $load.i128($M.485, $p45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %457, i128* %47, align 16, !dbg !831, !psr.id !832, !verifier.code !63 */
  $M.486 := $store.i128($M.486, $p46, $i456);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %561 = bitcast i128* %47 to { i64, i64 }*, !dbg !831, !psr.id !833, !verifier.code !63 */
  $p560 := $bitcast.ref.ref($p46);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %562 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %561, i32 0, i32 0, !dbg !831, !psr.id !834, !verifier.code !63 */
  $p561 := $add.ref($add.ref($p560, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %563 = load i64, i64* %562, align 16, !dbg !831, !psr.id !835, !verifier.code !63 */
  $i562 := $load.i64($M.486, $p561);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %564 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %561, i32 0, i32 1, !dbg !831, !psr.id !836, !verifier.code !63 */
  $p563 := $add.ref($add.ref($p560, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %565 = load i64, i64* %564, align 8, !dbg !831, !psr.id !837, !verifier.code !63 */
  $i564 := $load.i64($M.486, $p563);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %560, i128* %48, align 16, !dbg !831, !psr.id !838, !verifier.code !63 */
  $M.487 := $store.i128($M.487, $p47, $i559);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %566 = bitcast i128* %48 to { i64, i64 }*, !dbg !831, !psr.id !839, !verifier.code !63 */
  $p565 := $bitcast.ref.ref($p47);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %567 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %566, i32 0, i32 0, !dbg !831, !psr.id !840, !verifier.code !63 */
  $p566 := $add.ref($add.ref($p565, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %568 = load i64, i64* %567, align 16, !dbg !831, !psr.id !841, !verifier.code !63 */
  $i567 := $load.i64($M.487, $p566);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %569 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %566, i32 0, i32 1, !dbg !831, !psr.id !842, !verifier.code !63 */
  $p568 := $add.ref($add.ref($p565, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %570 = load i64, i64* %569, align 8, !dbg !831, !psr.id !843, !verifier.code !63 */
  $i569 := $load.i64($M.487, $p568);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %571 = call { i64, i64 } @FStar_UInt128_add(i64 %563, i64 %565, i64 %568, i64 %570), !dbg !831, !psr.id !844, !verifier.code !63 */
  call $p570 := FStar_UInt128_add($i562, $i564, $i567, $i569);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %572 = bitcast i128* %49 to { i64, i64 }*, !dbg !831, !psr.id !845, !verifier.code !63 */
  $p571 := $bitcast.ref.ref($p48);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %573 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %572, i32 0, i32 0, !dbg !831, !psr.id !846, !verifier.code !63 */
  $p572 := $add.ref($add.ref($p571, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %574 = extractvalue { i64, i64 } %571, 0, !dbg !831, !psr.id !847, !verifier.code !63 */
  $i573 := $extractvalue.i64($p570, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %574, i64* %573, align 16, !dbg !831, !psr.id !848, !verifier.code !63 */
  $M.488 := $store.i64($M.488, $p572, $i573);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %575 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %572, i32 0, i32 1, !dbg !831, !psr.id !849, !verifier.code !63 */
  $p574 := $add.ref($add.ref($p571, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %576 = extractvalue { i64, i64 } %571, 1, !dbg !831, !psr.id !850, !verifier.code !63 */
  $i575 := $extractvalue.i64($p570, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %576, i64* %575, align 8, !dbg !831, !psr.id !851, !verifier.code !63 */
  $M.488 := $store.i64($M.488, $p574, $i575);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  /* %577 = load i128, i128* %49, align 16, !dbg !831, !psr.id !852, !verifier.code !63 */
  $i576 := $load.i128($M.488, $p48);
  /* call void @llvm.dbg.value(metadata i128 %577, metadata !7560, metadata !DIExpression()), !dbg !7022, !psr.id !7561, !verifier.code !64 */
  call {:cexpr "o420"} boogie_si_record_i128($i576);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %578 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %262, i64 %296), !dbg !855, !psr.id !856, !ValueTainted !325, !verifier.code !63 */
  call $p577 := FStar_UInt128_mul_wide($i261, $i295);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  /* %579 = bitcast i128* %50 to { i64, i64 }*, !dbg !855, !psr.id !857, !verifier.code !63 */
  $p578 := $bitcast.ref.ref($p49);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  /* %580 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %579, i32 0, i32 0, !dbg !855, !psr.id !858, !verifier.code !63 */
  $p579 := $add.ref($add.ref($p578, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  /* %581 = extractvalue { i64, i64 } %578, 0, !dbg !855, !psr.id !859, !verifier.code !63 */
  $i580 := $extractvalue.i64($p577, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %581, i64* %580, align 16, !dbg !855, !psr.id !860, !verifier.code !63 */
  $M.489 := $store.i64($M.489, $p579, $i580);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  /* %582 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %579, i32 0, i32 1, !dbg !855, !psr.id !861, !verifier.code !63 */
  $p581 := $add.ref($add.ref($p578, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  /* %583 = extractvalue { i64, i64 } %578, 1, !dbg !855, !psr.id !862, !verifier.code !63 */
  $i582 := $extractvalue.i64($p577, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %583, i64* %582, align 8, !dbg !855, !psr.id !863, !verifier.code !63 */
  $M.489 := $store.i64($M.489, $p581, $i582);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  /* %584 = load i128, i128* %50, align 16, !dbg !855, !psr.id !864, !verifier.code !63 */
  $i583 := $load.i128($M.489, $p49);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %481, i128* %51, align 16, !dbg !865, !psr.id !866, !verifier.code !63 */
  $M.490 := $store.i128($M.490, $p50, $i480);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %585 = bitcast i128* %51 to { i64, i64 }*, !dbg !865, !psr.id !867, !verifier.code !63 */
  $p584 := $bitcast.ref.ref($p50);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %586 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %585, i32 0, i32 0, !dbg !865, !psr.id !868, !verifier.code !63 */
  $p585 := $add.ref($add.ref($p584, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %587 = load i64, i64* %586, align 16, !dbg !865, !psr.id !869, !verifier.code !63 */
  $i586 := $load.i64($M.490, $p585);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %588 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %585, i32 0, i32 1, !dbg !865, !psr.id !870, !verifier.code !63 */
  $p587 := $add.ref($add.ref($p584, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %589 = load i64, i64* %588, align 8, !dbg !865, !psr.id !871, !verifier.code !63 */
  $i588 := $load.i64($M.490, $p587);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %584, i128* %52, align 16, !dbg !865, !psr.id !872, !verifier.code !63 */
  $M.491 := $store.i128($M.491, $p51, $i583);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %590 = bitcast i128* %52 to { i64, i64 }*, !dbg !865, !psr.id !873, !verifier.code !63 */
  $p589 := $bitcast.ref.ref($p51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %591 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %590, i32 0, i32 0, !dbg !865, !psr.id !874, !verifier.code !63 */
  $p590 := $add.ref($add.ref($p589, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %592 = load i64, i64* %591, align 16, !dbg !865, !psr.id !875, !verifier.code !63 */
  $i591 := $load.i64($M.491, $p590);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %593 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %590, i32 0, i32 1, !dbg !865, !psr.id !876, !verifier.code !63 */
  $p592 := $add.ref($add.ref($p589, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %594 = load i64, i64* %593, align 8, !dbg !865, !psr.id !877, !verifier.code !63 */
  $i593 := $load.i64($M.491, $p592);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %595 = call { i64, i64 } @FStar_UInt128_add(i64 %587, i64 %589, i64 %592, i64 %594), !dbg !865, !psr.id !878, !verifier.code !63 */
  call $p594 := FStar_UInt128_add($i586, $i588, $i591, $i593);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %596 = bitcast i128* %53 to { i64, i64 }*, !dbg !865, !psr.id !879, !verifier.code !63 */
  $p595 := $bitcast.ref.ref($p52);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %597 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %596, i32 0, i32 0, !dbg !865, !psr.id !880, !verifier.code !63 */
  $p596 := $add.ref($add.ref($p595, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %598 = extractvalue { i64, i64 } %595, 0, !dbg !865, !psr.id !881, !verifier.code !63 */
  $i597 := $extractvalue.i64($p594, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %598, i64* %597, align 16, !dbg !865, !psr.id !882, !verifier.code !63 */
  $M.492 := $store.i64($M.492, $p596, $i597);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %599 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %596, i32 0, i32 1, !dbg !865, !psr.id !883, !verifier.code !63 */
  $p598 := $add.ref($add.ref($p595, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %600 = extractvalue { i64, i64 } %595, 1, !dbg !865, !psr.id !884, !verifier.code !63 */
  $i599 := $extractvalue.i64($p594, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %600, i64* %599, align 8, !dbg !865, !psr.id !885, !verifier.code !63 */
  $M.492 := $store.i64($M.492, $p598, $i599);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  /* %601 = load i128, i128* %53, align 16, !dbg !865, !psr.id !886, !verifier.code !63 */
  $i600 := $load.i128($M.492, $p52);
  /* call void @llvm.dbg.value(metadata i128 %601, metadata !7594, metadata !DIExpression()), !dbg !7022, !psr.id !7595, !verifier.code !64 */
  call {:cexpr "o030"} boogie_si_record_i128($i600);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %602 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %262, i64 %297), !dbg !889, !psr.id !890, !ValueTainted !325, !verifier.code !63 */
  call $p601 := FStar_UInt128_mul_wide($i261, $i296);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  /* %603 = bitcast i128* %54 to { i64, i64 }*, !dbg !889, !psr.id !891, !verifier.code !63 */
  $p602 := $bitcast.ref.ref($p53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  /* %604 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %603, i32 0, i32 0, !dbg !889, !psr.id !892, !verifier.code !63 */
  $p603 := $add.ref($add.ref($p602, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  /* %605 = extractvalue { i64, i64 } %602, 0, !dbg !889, !psr.id !893, !verifier.code !63 */
  $i604 := $extractvalue.i64($p601, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %605, i64* %604, align 16, !dbg !889, !psr.id !894, !verifier.code !63 */
  $M.493 := $store.i64($M.493, $p603, $i604);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  /* %606 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %603, i32 0, i32 1, !dbg !889, !psr.id !895, !verifier.code !63 */
  $p605 := $add.ref($add.ref($p602, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  /* %607 = extractvalue { i64, i64 } %602, 1, !dbg !889, !psr.id !896, !verifier.code !63 */
  $i606 := $extractvalue.i64($p601, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %607, i64* %606, align 8, !dbg !889, !psr.id !897, !verifier.code !63 */
  $M.493 := $store.i64($M.493, $p605, $i606);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  /* %608 = load i128, i128* %54, align 16, !dbg !889, !psr.id !898, !verifier.code !63 */
  $i607 := $load.i128($M.493, $p53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %505, i128* %55, align 16, !dbg !899, !psr.id !900, !verifier.code !63 */
  $M.494 := $store.i128($M.494, $p54, $i504);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %609 = bitcast i128* %55 to { i64, i64 }*, !dbg !899, !psr.id !901, !verifier.code !63 */
  $p608 := $bitcast.ref.ref($p54);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %610 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %609, i32 0, i32 0, !dbg !899, !psr.id !902, !verifier.code !63 */
  $p609 := $add.ref($add.ref($p608, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %611 = load i64, i64* %610, align 16, !dbg !899, !psr.id !903, !verifier.code !63 */
  $i610 := $load.i64($M.494, $p609);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %612 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %609, i32 0, i32 1, !dbg !899, !psr.id !904, !verifier.code !63 */
  $p611 := $add.ref($add.ref($p608, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %613 = load i64, i64* %612, align 8, !dbg !899, !psr.id !905, !verifier.code !63 */
  $i612 := $load.i64($M.494, $p611);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %608, i128* %56, align 16, !dbg !899, !psr.id !906, !verifier.code !63 */
  $M.495 := $store.i128($M.495, $p55, $i607);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %614 = bitcast i128* %56 to { i64, i64 }*, !dbg !899, !psr.id !907, !verifier.code !63 */
  $p613 := $bitcast.ref.ref($p55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %615 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %614, i32 0, i32 0, !dbg !899, !psr.id !908, !verifier.code !63 */
  $p614 := $add.ref($add.ref($p613, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %616 = load i64, i64* %615, align 16, !dbg !899, !psr.id !909, !verifier.code !63 */
  $i615 := $load.i64($M.495, $p614);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %617 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %614, i32 0, i32 1, !dbg !899, !psr.id !910, !verifier.code !63 */
  $p616 := $add.ref($add.ref($p613, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %618 = load i64, i64* %617, align 8, !dbg !899, !psr.id !911, !verifier.code !63 */
  $i617 := $load.i64($M.495, $p616);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %619 = call { i64, i64 } @FStar_UInt128_add(i64 %611, i64 %613, i64 %616, i64 %618), !dbg !899, !psr.id !912, !verifier.code !63 */
  call $p618 := FStar_UInt128_add($i610, $i612, $i615, $i617);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %620 = bitcast i128* %57 to { i64, i64 }*, !dbg !899, !psr.id !913, !verifier.code !63 */
  $p619 := $bitcast.ref.ref($p56);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %621 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %620, i32 0, i32 0, !dbg !899, !psr.id !914, !verifier.code !63 */
  $p620 := $add.ref($add.ref($p619, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %622 = extractvalue { i64, i64 } %619, 0, !dbg !899, !psr.id !915, !verifier.code !63 */
  $i621 := $extractvalue.i64($p618, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %622, i64* %621, align 16, !dbg !899, !psr.id !916, !verifier.code !63 */
  $M.496 := $store.i64($M.496, $p620, $i621);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %623 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %620, i32 0, i32 1, !dbg !899, !psr.id !917, !verifier.code !63 */
  $p622 := $add.ref($add.ref($p619, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %624 = extractvalue { i64, i64 } %619, 1, !dbg !899, !psr.id !918, !verifier.code !63 */
  $i623 := $extractvalue.i64($p618, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %624, i64* %623, align 8, !dbg !899, !psr.id !919, !verifier.code !63 */
  $M.496 := $store.i64($M.496, $p622, $i623);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  /* %625 = load i128, i128* %57, align 16, !dbg !899, !psr.id !920, !verifier.code !63 */
  $i624 := $load.i128($M.496, $p56);
  /* call void @llvm.dbg.value(metadata i128 %625, metadata !7628, metadata !DIExpression()), !dbg !7022, !psr.id !7629, !verifier.code !64 */
  call {:cexpr "o130"} boogie_si_record_i128($i624);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %626 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %262, i64 %298), !dbg !923, !psr.id !924, !ValueTainted !325, !verifier.code !63 */
  call $p625 := FStar_UInt128_mul_wide($i261, $i297);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  /* %627 = bitcast i128* %58 to { i64, i64 }*, !dbg !923, !psr.id !925, !verifier.code !63 */
  $p626 := $bitcast.ref.ref($p57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  /* %628 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %627, i32 0, i32 0, !dbg !923, !psr.id !926, !verifier.code !63 */
  $p627 := $add.ref($add.ref($p626, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  /* %629 = extractvalue { i64, i64 } %626, 0, !dbg !923, !psr.id !927, !verifier.code !63 */
  $i628 := $extractvalue.i64($p625, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %629, i64* %628, align 16, !dbg !923, !psr.id !928, !verifier.code !63 */
  $M.497 := $store.i64($M.497, $p627, $i628);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  /* %630 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %627, i32 0, i32 1, !dbg !923, !psr.id !929, !verifier.code !63 */
  $p629 := $add.ref($add.ref($p626, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  /* %631 = extractvalue { i64, i64 } %626, 1, !dbg !923, !psr.id !930, !verifier.code !63 */
  $i630 := $extractvalue.i64($p625, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %631, i64* %630, align 8, !dbg !923, !psr.id !931, !verifier.code !63 */
  $M.497 := $store.i64($M.497, $p629, $i630);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  /* %632 = load i128, i128* %58, align 16, !dbg !923, !psr.id !932, !verifier.code !63 */
  $i631 := $load.i128($M.497, $p57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %529, i128* %59, align 16, !dbg !933, !psr.id !934, !verifier.code !63 */
  $M.498 := $store.i128($M.498, $p58, $i528);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %633 = bitcast i128* %59 to { i64, i64 }*, !dbg !933, !psr.id !935, !verifier.code !63 */
  $p632 := $bitcast.ref.ref($p58);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %634 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %633, i32 0, i32 0, !dbg !933, !psr.id !936, !verifier.code !63 */
  $p633 := $add.ref($add.ref($p632, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %635 = load i64, i64* %634, align 16, !dbg !933, !psr.id !937, !verifier.code !63 */
  $i634 := $load.i64($M.498, $p633);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %636 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %633, i32 0, i32 1, !dbg !933, !psr.id !938, !verifier.code !63 */
  $p635 := $add.ref($add.ref($p632, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %637 = load i64, i64* %636, align 8, !dbg !933, !psr.id !939, !verifier.code !63 */
  $i636 := $load.i64($M.498, $p635);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %632, i128* %60, align 16, !dbg !933, !psr.id !940, !verifier.code !63 */
  $M.499 := $store.i128($M.499, $p59, $i631);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %638 = bitcast i128* %60 to { i64, i64 }*, !dbg !933, !psr.id !941, !verifier.code !63 */
  $p637 := $bitcast.ref.ref($p59);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %639 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %638, i32 0, i32 0, !dbg !933, !psr.id !942, !verifier.code !63 */
  $p638 := $add.ref($add.ref($p637, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %640 = load i64, i64* %639, align 16, !dbg !933, !psr.id !943, !verifier.code !63 */
  $i639 := $load.i64($M.499, $p638);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %641 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %638, i32 0, i32 1, !dbg !933, !psr.id !944, !verifier.code !63 */
  $p640 := $add.ref($add.ref($p637, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %642 = load i64, i64* %641, align 8, !dbg !933, !psr.id !945, !verifier.code !63 */
  $i641 := $load.i64($M.499, $p640);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %643 = call { i64, i64 } @FStar_UInt128_add(i64 %635, i64 %637, i64 %640, i64 %642), !dbg !933, !psr.id !946, !verifier.code !63 */
  call $p642 := FStar_UInt128_add($i634, $i636, $i639, $i641);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %644 = bitcast i128* %61 to { i64, i64 }*, !dbg !933, !psr.id !947, !verifier.code !63 */
  $p643 := $bitcast.ref.ref($p60);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %645 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %644, i32 0, i32 0, !dbg !933, !psr.id !948, !verifier.code !63 */
  $p644 := $add.ref($add.ref($p643, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %646 = extractvalue { i64, i64 } %643, 0, !dbg !933, !psr.id !949, !verifier.code !63 */
  $i645 := $extractvalue.i64($p642, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %646, i64* %645, align 16, !dbg !933, !psr.id !950, !verifier.code !63 */
  $M.500 := $store.i64($M.500, $p644, $i645);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %647 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %644, i32 0, i32 1, !dbg !933, !psr.id !951, !verifier.code !63 */
  $p646 := $add.ref($add.ref($p643, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %648 = extractvalue { i64, i64 } %643, 1, !dbg !933, !psr.id !952, !verifier.code !63 */
  $i647 := $extractvalue.i64($p642, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %648, i64* %647, align 8, !dbg !933, !psr.id !953, !verifier.code !63 */
  $M.500 := $store.i64($M.500, $p646, $i647);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  /* %649 = load i128, i128* %61, align 16, !dbg !933, !psr.id !954, !verifier.code !63 */
  $i648 := $load.i128($M.500, $p60);
  /* call void @llvm.dbg.value(metadata i128 %649, metadata !7662, metadata !DIExpression()), !dbg !7022, !psr.id !7663, !verifier.code !64 */
  call {:cexpr "o230"} boogie_si_record_i128($i648);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %650 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %262, i64 %266), !dbg !957, !psr.id !958, !ValueTainted !325, !verifier.code !63 */
  call $p649 := FStar_UInt128_mul_wide($i261, $i265);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  /* %651 = bitcast i128* %62 to { i64, i64 }*, !dbg !957, !psr.id !959, !verifier.code !63 */
  $p650 := $bitcast.ref.ref($p61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  /* %652 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %651, i32 0, i32 0, !dbg !957, !psr.id !960, !verifier.code !63 */
  $p651 := $add.ref($add.ref($p650, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  /* %653 = extractvalue { i64, i64 } %650, 0, !dbg !957, !psr.id !961, !verifier.code !63 */
  $i652 := $extractvalue.i64($p649, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %653, i64* %652, align 16, !dbg !957, !psr.id !962, !verifier.code !63 */
  $M.501 := $store.i64($M.501, $p651, $i652);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  /* %654 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %651, i32 0, i32 1, !dbg !957, !psr.id !963, !verifier.code !63 */
  $p653 := $add.ref($add.ref($p650, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  /* %655 = extractvalue { i64, i64 } %650, 1, !dbg !957, !psr.id !964, !verifier.code !63 */
  $i654 := $extractvalue.i64($p649, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %655, i64* %654, align 8, !dbg !957, !psr.id !965, !verifier.code !63 */
  $M.501 := $store.i64($M.501, $p653, $i654);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  /* %656 = load i128, i128* %62, align 16, !dbg !957, !psr.id !966, !verifier.code !63 */
  $i655 := $load.i128($M.501, $p61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %553, i128* %63, align 16, !dbg !967, !psr.id !968, !verifier.code !63 */
  $M.502 := $store.i128($M.502, $p62, $i552);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %657 = bitcast i128* %63 to { i64, i64 }*, !dbg !967, !psr.id !969, !verifier.code !63 */
  $p656 := $bitcast.ref.ref($p62);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %658 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %657, i32 0, i32 0, !dbg !967, !psr.id !970, !verifier.code !63 */
  $p657 := $add.ref($add.ref($p656, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %659 = load i64, i64* %658, align 16, !dbg !967, !psr.id !971, !verifier.code !63 */
  $i658 := $load.i64($M.502, $p657);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %660 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %657, i32 0, i32 1, !dbg !967, !psr.id !972, !verifier.code !63 */
  $p659 := $add.ref($add.ref($p656, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %661 = load i64, i64* %660, align 8, !dbg !967, !psr.id !973, !verifier.code !63 */
  $i660 := $load.i64($M.502, $p659);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %656, i128* %64, align 16, !dbg !967, !psr.id !974, !verifier.code !63 */
  $M.503 := $store.i128($M.503, $p63, $i655);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %662 = bitcast i128* %64 to { i64, i64 }*, !dbg !967, !psr.id !975, !verifier.code !63 */
  $p661 := $bitcast.ref.ref($p63);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %663 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %662, i32 0, i32 0, !dbg !967, !psr.id !976, !verifier.code !63 */
  $p662 := $add.ref($add.ref($p661, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %664 = load i64, i64* %663, align 16, !dbg !967, !psr.id !977, !verifier.code !63 */
  $i663 := $load.i64($M.503, $p662);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %665 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %662, i32 0, i32 1, !dbg !967, !psr.id !978, !verifier.code !63 */
  $p664 := $add.ref($add.ref($p661, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %666 = load i64, i64* %665, align 8, !dbg !967, !psr.id !979, !verifier.code !63 */
  $i665 := $load.i64($M.503, $p664);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %667 = call { i64, i64 } @FStar_UInt128_add(i64 %659, i64 %661, i64 %664, i64 %666), !dbg !967, !psr.id !980, !verifier.code !63 */
  call $p666 := FStar_UInt128_add($i658, $i660, $i663, $i665);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %668 = bitcast i128* %65 to { i64, i64 }*, !dbg !967, !psr.id !981, !verifier.code !63 */
  $p667 := $bitcast.ref.ref($p64);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %669 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %668, i32 0, i32 0, !dbg !967, !psr.id !982, !verifier.code !63 */
  $p668 := $add.ref($add.ref($p667, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %670 = extractvalue { i64, i64 } %667, 0, !dbg !967, !psr.id !983, !verifier.code !63 */
  $i669 := $extractvalue.i64($p666, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %670, i64* %669, align 16, !dbg !967, !psr.id !984, !verifier.code !63 */
  $M.504 := $store.i64($M.504, $p668, $i669);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %671 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %668, i32 0, i32 1, !dbg !967, !psr.id !985, !verifier.code !63 */
  $p670 := $add.ref($add.ref($p667, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %672 = extractvalue { i64, i64 } %667, 1, !dbg !967, !psr.id !986, !verifier.code !63 */
  $i671 := $extractvalue.i64($p666, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %672, i64* %671, align 8, !dbg !967, !psr.id !987, !verifier.code !63 */
  $M.504 := $store.i64($M.504, $p670, $i671);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  /* %673 = load i128, i128* %65, align 16, !dbg !967, !psr.id !988, !verifier.code !63 */
  $i672 := $load.i128($M.504, $p64);
  /* call void @llvm.dbg.value(metadata i128 %673, metadata !7696, metadata !DIExpression()), !dbg !7022, !psr.id !7697, !verifier.code !64 */
  call {:cexpr "o330"} boogie_si_record_i128($i672);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %674 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %262, i64 %268), !dbg !991, !psr.id !992, !ValueTainted !325, !verifier.code !63 */
  call $p673 := FStar_UInt128_mul_wide($i261, $i267);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  /* %675 = bitcast i128* %66 to { i64, i64 }*, !dbg !991, !psr.id !993, !verifier.code !63 */
  $p674 := $bitcast.ref.ref($p65);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  /* %676 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %675, i32 0, i32 0, !dbg !991, !psr.id !994, !verifier.code !63 */
  $p675 := $add.ref($add.ref($p674, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  /* %677 = extractvalue { i64, i64 } %674, 0, !dbg !991, !psr.id !995, !verifier.code !63 */
  $i676 := $extractvalue.i64($p673, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %677, i64* %676, align 16, !dbg !991, !psr.id !996, !verifier.code !63 */
  $M.505 := $store.i64($M.505, $p675, $i676);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  /* %678 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %675, i32 0, i32 1, !dbg !991, !psr.id !997, !verifier.code !63 */
  $p677 := $add.ref($add.ref($p674, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  /* %679 = extractvalue { i64, i64 } %674, 1, !dbg !991, !psr.id !998, !verifier.code !63 */
  $i678 := $extractvalue.i64($p673, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %679, i64* %678, align 8, !dbg !991, !psr.id !999, !verifier.code !63 */
  $M.505 := $store.i64($M.505, $p677, $i678);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  /* %680 = load i128, i128* %66, align 16, !dbg !991, !psr.id !1000, !verifier.code !63 */
  $i679 := $load.i128($M.505, $p65);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %577, i128* %67, align 16, !dbg !1001, !psr.id !1002, !verifier.code !63 */
  $M.506 := $store.i128($M.506, $p66, $i576);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %681 = bitcast i128* %67 to { i64, i64 }*, !dbg !1001, !psr.id !1003, !verifier.code !63 */
  $p680 := $bitcast.ref.ref($p66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %682 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %681, i32 0, i32 0, !dbg !1001, !psr.id !1004, !verifier.code !63 */
  $p681 := $add.ref($add.ref($p680, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %683 = load i64, i64* %682, align 16, !dbg !1001, !psr.id !1005, !verifier.code !63 */
  $i682 := $load.i64($M.506, $p681);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %684 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %681, i32 0, i32 1, !dbg !1001, !psr.id !1006, !verifier.code !63 */
  $p683 := $add.ref($add.ref($p680, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %685 = load i64, i64* %684, align 8, !dbg !1001, !psr.id !1007, !verifier.code !63 */
  $i684 := $load.i64($M.506, $p683);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %680, i128* %68, align 16, !dbg !1001, !psr.id !1008, !verifier.code !63 */
  $M.507 := $store.i128($M.507, $p67, $i679);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %686 = bitcast i128* %68 to { i64, i64 }*, !dbg !1001, !psr.id !1009, !verifier.code !63 */
  $p685 := $bitcast.ref.ref($p67);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %687 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %686, i32 0, i32 0, !dbg !1001, !psr.id !1010, !verifier.code !63 */
  $p686 := $add.ref($add.ref($p685, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %688 = load i64, i64* %687, align 16, !dbg !1001, !psr.id !1011, !verifier.code !63 */
  $i687 := $load.i64($M.507, $p686);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %689 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %686, i32 0, i32 1, !dbg !1001, !psr.id !1012, !verifier.code !63 */
  $p688 := $add.ref($add.ref($p685, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %690 = load i64, i64* %689, align 8, !dbg !1001, !psr.id !1013, !verifier.code !63 */
  $i689 := $load.i64($M.507, $p688);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %691 = call { i64, i64 } @FStar_UInt128_add(i64 %683, i64 %685, i64 %688, i64 %690), !dbg !1001, !psr.id !1014, !verifier.code !63 */
  call $p690 := FStar_UInt128_add($i682, $i684, $i687, $i689);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %692 = bitcast i128* %69 to { i64, i64 }*, !dbg !1001, !psr.id !1015, !verifier.code !63 */
  $p691 := $bitcast.ref.ref($p68);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %693 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %692, i32 0, i32 0, !dbg !1001, !psr.id !1016, !verifier.code !63 */
  $p692 := $add.ref($add.ref($p691, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %694 = extractvalue { i64, i64 } %691, 0, !dbg !1001, !psr.id !1017, !verifier.code !63 */
  $i693 := $extractvalue.i64($p690, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %694, i64* %693, align 16, !dbg !1001, !psr.id !1018, !verifier.code !63 */
  $M.508 := $store.i64($M.508, $p692, $i693);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %695 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %692, i32 0, i32 1, !dbg !1001, !psr.id !1019, !verifier.code !63 */
  $p694 := $add.ref($add.ref($p691, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %696 = extractvalue { i64, i64 } %691, 1, !dbg !1001, !psr.id !1020, !verifier.code !63 */
  $i695 := $extractvalue.i64($p690, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %696, i64* %695, align 8, !dbg !1001, !psr.id !1021, !verifier.code !63 */
  $M.508 := $store.i64($M.508, $p694, $i695);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  /* %697 = load i128, i128* %69, align 16, !dbg !1001, !psr.id !1022, !verifier.code !63 */
  $i696 := $load.i128($M.508, $p68);
  /* call void @llvm.dbg.value(metadata i128 %697, metadata !7730, metadata !DIExpression()), !dbg !7022, !psr.id !7731, !verifier.code !64 */
  call {:cexpr "o430"} boogie_si_record_i128($i696);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %698 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %264, i64 %295), !dbg !1025, !psr.id !1026, !ValueTainted !325, !verifier.code !63 */
  call $p697 := FStar_UInt128_mul_wide($i263, $i294);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  /* %699 = bitcast i128* %70 to { i64, i64 }*, !dbg !1025, !psr.id !1027, !verifier.code !63 */
  $p698 := $bitcast.ref.ref($p69);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  /* %700 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %699, i32 0, i32 0, !dbg !1025, !psr.id !1028, !verifier.code !63 */
  $p699 := $add.ref($add.ref($p698, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  /* %701 = extractvalue { i64, i64 } %698, 0, !dbg !1025, !psr.id !1029, !verifier.code !63 */
  $i700 := $extractvalue.i64($p697, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %701, i64* %700, align 16, !dbg !1025, !psr.id !1030, !verifier.code !63 */
  $M.509 := $store.i64($M.509, $p699, $i700);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  /* %702 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %699, i32 0, i32 1, !dbg !1025, !psr.id !1031, !verifier.code !63 */
  $p701 := $add.ref($add.ref($p698, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  /* %703 = extractvalue { i64, i64 } %698, 1, !dbg !1025, !psr.id !1032, !verifier.code !63 */
  $i702 := $extractvalue.i64($p697, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %703, i64* %702, align 8, !dbg !1025, !psr.id !1033, !verifier.code !63 */
  $M.509 := $store.i64($M.509, $p701, $i702);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  /* %704 = load i128, i128* %70, align 16, !dbg !1025, !psr.id !1034, !verifier.code !63 */
  $i703 := $load.i128($M.509, $p69);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %601, i128* %71, align 16, !dbg !1035, !psr.id !1036, !verifier.code !63 */
  $M.510 := $store.i128($M.510, $p70, $i600);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %705 = bitcast i128* %71 to { i64, i64 }*, !dbg !1035, !psr.id !1037, !verifier.code !63 */
  $p704 := $bitcast.ref.ref($p70);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %706 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %705, i32 0, i32 0, !dbg !1035, !psr.id !1038, !verifier.code !63 */
  $p705 := $add.ref($add.ref($p704, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %707 = load i64, i64* %706, align 16, !dbg !1035, !psr.id !1039, !verifier.code !63 */
  $i706 := $load.i64($M.510, $p705);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %708 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %705, i32 0, i32 1, !dbg !1035, !psr.id !1040, !verifier.code !63 */
  $p707 := $add.ref($add.ref($p704, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %709 = load i64, i64* %708, align 8, !dbg !1035, !psr.id !1041, !verifier.code !63 */
  $i708 := $load.i64($M.510, $p707);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %704, i128* %72, align 16, !dbg !1035, !psr.id !1042, !verifier.code !63 */
  $M.511 := $store.i128($M.511, $p71, $i703);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %710 = bitcast i128* %72 to { i64, i64 }*, !dbg !1035, !psr.id !1043, !verifier.code !63 */
  $p709 := $bitcast.ref.ref($p71);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %711 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %710, i32 0, i32 0, !dbg !1035, !psr.id !1044, !verifier.code !63 */
  $p710 := $add.ref($add.ref($p709, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %712 = load i64, i64* %711, align 16, !dbg !1035, !psr.id !1045, !verifier.code !63 */
  $i711 := $load.i64($M.511, $p710);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %713 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %710, i32 0, i32 1, !dbg !1035, !psr.id !1046, !verifier.code !63 */
  $p712 := $add.ref($add.ref($p709, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %714 = load i64, i64* %713, align 8, !dbg !1035, !psr.id !1047, !verifier.code !63 */
  $i713 := $load.i64($M.511, $p712);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %715 = call { i64, i64 } @FStar_UInt128_add(i64 %707, i64 %709, i64 %712, i64 %714), !dbg !1035, !psr.id !1048, !verifier.code !63 */
  call $p714 := FStar_UInt128_add($i706, $i708, $i711, $i713);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %716 = bitcast i128* %73 to { i64, i64 }*, !dbg !1035, !psr.id !1049, !verifier.code !63 */
  $p715 := $bitcast.ref.ref($p72);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %717 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %716, i32 0, i32 0, !dbg !1035, !psr.id !1050, !verifier.code !63 */
  $p716 := $add.ref($add.ref($p715, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %718 = extractvalue { i64, i64 } %715, 0, !dbg !1035, !psr.id !1051, !verifier.code !63 */
  $i717 := $extractvalue.i64($p714, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %718, i64* %717, align 16, !dbg !1035, !psr.id !1052, !verifier.code !63 */
  $M.512 := $store.i64($M.512, $p716, $i717);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %719 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %716, i32 0, i32 1, !dbg !1035, !psr.id !1053, !verifier.code !63 */
  $p718 := $add.ref($add.ref($p715, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %720 = extractvalue { i64, i64 } %715, 1, !dbg !1035, !psr.id !1054, !verifier.code !63 */
  $i719 := $extractvalue.i64($p714, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %720, i64* %719, align 8, !dbg !1035, !psr.id !1055, !verifier.code !63 */
  $M.512 := $store.i64($M.512, $p718, $i719);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  /* %721 = load i128, i128* %73, align 16, !dbg !1035, !psr.id !1056, !verifier.code !63 */
  $i720 := $load.i128($M.512, $p72);
  /* call void @llvm.dbg.value(metadata i128 %721, metadata !7764, metadata !DIExpression()), !dbg !7022, !psr.id !7765, !verifier.code !64 */
  call {:cexpr "o040"} boogie_si_record_i128($i720);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %722 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %264, i64 %296), !dbg !1059, !psr.id !1060, !ValueTainted !325, !verifier.code !63 */
  call $p721 := FStar_UInt128_mul_wide($i263, $i295);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  /* %723 = bitcast i128* %74 to { i64, i64 }*, !dbg !1059, !psr.id !1061, !verifier.code !63 */
  $p722 := $bitcast.ref.ref($p73);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  /* %724 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %723, i32 0, i32 0, !dbg !1059, !psr.id !1062, !verifier.code !63 */
  $p723 := $add.ref($add.ref($p722, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  /* %725 = extractvalue { i64, i64 } %722, 0, !dbg !1059, !psr.id !1063, !verifier.code !63 */
  $i724 := $extractvalue.i64($p721, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %725, i64* %724, align 16, !dbg !1059, !psr.id !1064, !verifier.code !63 */
  $M.513 := $store.i64($M.513, $p723, $i724);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  /* %726 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %723, i32 0, i32 1, !dbg !1059, !psr.id !1065, !verifier.code !63 */
  $p725 := $add.ref($add.ref($p722, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  /* %727 = extractvalue { i64, i64 } %722, 1, !dbg !1059, !psr.id !1066, !verifier.code !63 */
  $i726 := $extractvalue.i64($p721, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %727, i64* %726, align 8, !dbg !1059, !psr.id !1067, !verifier.code !63 */
  $M.513 := $store.i64($M.513, $p725, $i726);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  /* %728 = load i128, i128* %74, align 16, !dbg !1059, !psr.id !1068, !verifier.code !63 */
  $i727 := $load.i128($M.513, $p73);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %625, i128* %75, align 16, !dbg !1069, !psr.id !1070, !verifier.code !63 */
  $M.514 := $store.i128($M.514, $p74, $i624);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %729 = bitcast i128* %75 to { i64, i64 }*, !dbg !1069, !psr.id !1071, !verifier.code !63 */
  $p728 := $bitcast.ref.ref($p74);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %730 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %729, i32 0, i32 0, !dbg !1069, !psr.id !1072, !verifier.code !63 */
  $p729 := $add.ref($add.ref($p728, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %731 = load i64, i64* %730, align 16, !dbg !1069, !psr.id !1073, !verifier.code !63 */
  $i730 := $load.i64($M.514, $p729);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %732 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %729, i32 0, i32 1, !dbg !1069, !psr.id !1074, !verifier.code !63 */
  $p731 := $add.ref($add.ref($p728, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %733 = load i64, i64* %732, align 8, !dbg !1069, !psr.id !1075, !verifier.code !63 */
  $i732 := $load.i64($M.514, $p731);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %728, i128* %76, align 16, !dbg !1069, !psr.id !1076, !verifier.code !63 */
  $M.515 := $store.i128($M.515, $p75, $i727);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %734 = bitcast i128* %76 to { i64, i64 }*, !dbg !1069, !psr.id !1077, !verifier.code !63 */
  $p733 := $bitcast.ref.ref($p75);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %735 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %734, i32 0, i32 0, !dbg !1069, !psr.id !1078, !verifier.code !63 */
  $p734 := $add.ref($add.ref($p733, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %736 = load i64, i64* %735, align 16, !dbg !1069, !psr.id !1079, !verifier.code !63 */
  $i735 := $load.i64($M.515, $p734);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %737 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %734, i32 0, i32 1, !dbg !1069, !psr.id !1080, !verifier.code !63 */
  $p736 := $add.ref($add.ref($p733, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %738 = load i64, i64* %737, align 8, !dbg !1069, !psr.id !1081, !verifier.code !63 */
  $i737 := $load.i64($M.515, $p736);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %739 = call { i64, i64 } @FStar_UInt128_add(i64 %731, i64 %733, i64 %736, i64 %738), !dbg !1069, !psr.id !1082, !verifier.code !63 */
  call $p738 := FStar_UInt128_add($i730, $i732, $i735, $i737);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %740 = bitcast i128* %77 to { i64, i64 }*, !dbg !1069, !psr.id !1083, !verifier.code !63 */
  $p739 := $bitcast.ref.ref($p76);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %741 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %740, i32 0, i32 0, !dbg !1069, !psr.id !1084, !verifier.code !63 */
  $p740 := $add.ref($add.ref($p739, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %742 = extractvalue { i64, i64 } %739, 0, !dbg !1069, !psr.id !1085, !verifier.code !63 */
  $i741 := $extractvalue.i64($p738, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %742, i64* %741, align 16, !dbg !1069, !psr.id !1086, !verifier.code !63 */
  $M.516 := $store.i64($M.516, $p740, $i741);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %743 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %740, i32 0, i32 1, !dbg !1069, !psr.id !1087, !verifier.code !63 */
  $p742 := $add.ref($add.ref($p739, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %744 = extractvalue { i64, i64 } %739, 1, !dbg !1069, !psr.id !1088, !verifier.code !63 */
  $i743 := $extractvalue.i64($p738, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %744, i64* %743, align 8, !dbg !1069, !psr.id !1089, !verifier.code !63 */
  $M.516 := $store.i64($M.516, $p742, $i743);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  /* %745 = load i128, i128* %77, align 16, !dbg !1069, !psr.id !1090, !verifier.code !63 */
  $i744 := $load.i128($M.516, $p76);
  /* call void @llvm.dbg.value(metadata i128 %745, metadata !7798, metadata !DIExpression()), !dbg !7022, !psr.id !7799, !verifier.code !64 */
  call {:cexpr "o140"} boogie_si_record_i128($i744);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %746 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %264, i64 %297), !dbg !1093, !psr.id !1094, !ValueTainted !325, !verifier.code !63 */
  call $p745 := FStar_UInt128_mul_wide($i263, $i296);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  /* %747 = bitcast i128* %78 to { i64, i64 }*, !dbg !1093, !psr.id !1095, !verifier.code !63 */
  $p746 := $bitcast.ref.ref($p77);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  /* %748 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %747, i32 0, i32 0, !dbg !1093, !psr.id !1096, !verifier.code !63 */
  $p747 := $add.ref($add.ref($p746, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  /* %749 = extractvalue { i64, i64 } %746, 0, !dbg !1093, !psr.id !1097, !verifier.code !63 */
  $i748 := $extractvalue.i64($p745, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %749, i64* %748, align 16, !dbg !1093, !psr.id !1098, !verifier.code !63 */
  $M.517 := $store.i64($M.517, $p747, $i748);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  /* %750 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %747, i32 0, i32 1, !dbg !1093, !psr.id !1099, !verifier.code !63 */
  $p749 := $add.ref($add.ref($p746, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  /* %751 = extractvalue { i64, i64 } %746, 1, !dbg !1093, !psr.id !1100, !verifier.code !63 */
  $i750 := $extractvalue.i64($p745, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %751, i64* %750, align 8, !dbg !1093, !psr.id !1101, !verifier.code !63 */
  $M.517 := $store.i64($M.517, $p749, $i750);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  /* %752 = load i128, i128* %78, align 16, !dbg !1093, !psr.id !1102, !verifier.code !63 */
  $i751 := $load.i128($M.517, $p77);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %649, i128* %79, align 16, !dbg !1103, !psr.id !1104, !verifier.code !63 */
  $M.518 := $store.i128($M.518, $p78, $i648);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %753 = bitcast i128* %79 to { i64, i64 }*, !dbg !1103, !psr.id !1105, !verifier.code !63 */
  $p752 := $bitcast.ref.ref($p78);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %754 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %753, i32 0, i32 0, !dbg !1103, !psr.id !1106, !verifier.code !63 */
  $p753 := $add.ref($add.ref($p752, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %755 = load i64, i64* %754, align 16, !dbg !1103, !psr.id !1107, !verifier.code !63 */
  $i754 := $load.i64($M.518, $p753);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %756 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %753, i32 0, i32 1, !dbg !1103, !psr.id !1108, !verifier.code !63 */
  $p755 := $add.ref($add.ref($p752, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %757 = load i64, i64* %756, align 8, !dbg !1103, !psr.id !1109, !verifier.code !63 */
  $i756 := $load.i64($M.518, $p755);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %752, i128* %80, align 16, !dbg !1103, !psr.id !1110, !verifier.code !63 */
  $M.519 := $store.i128($M.519, $p79, $i751);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %758 = bitcast i128* %80 to { i64, i64 }*, !dbg !1103, !psr.id !1111, !verifier.code !63 */
  $p757 := $bitcast.ref.ref($p79);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %759 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %758, i32 0, i32 0, !dbg !1103, !psr.id !1112, !verifier.code !63 */
  $p758 := $add.ref($add.ref($p757, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %760 = load i64, i64* %759, align 16, !dbg !1103, !psr.id !1113, !verifier.code !63 */
  $i759 := $load.i64($M.519, $p758);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %761 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %758, i32 0, i32 1, !dbg !1103, !psr.id !1114, !verifier.code !63 */
  $p760 := $add.ref($add.ref($p757, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %762 = load i64, i64* %761, align 8, !dbg !1103, !psr.id !1115, !verifier.code !63 */
  $i761 := $load.i64($M.519, $p760);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %763 = call { i64, i64 } @FStar_UInt128_add(i64 %755, i64 %757, i64 %760, i64 %762), !dbg !1103, !psr.id !1116, !verifier.code !63 */
  call $p762 := FStar_UInt128_add($i754, $i756, $i759, $i761);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %764 = bitcast i128* %81 to { i64, i64 }*, !dbg !1103, !psr.id !1117, !verifier.code !63 */
  $p763 := $bitcast.ref.ref($p80);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %765 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %764, i32 0, i32 0, !dbg !1103, !psr.id !1118, !verifier.code !63 */
  $p764 := $add.ref($add.ref($p763, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %766 = extractvalue { i64, i64 } %763, 0, !dbg !1103, !psr.id !1119, !verifier.code !63 */
  $i765 := $extractvalue.i64($p762, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %766, i64* %765, align 16, !dbg !1103, !psr.id !1120, !verifier.code !63 */
  $M.520 := $store.i64($M.520, $p764, $i765);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %767 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %764, i32 0, i32 1, !dbg !1103, !psr.id !1121, !verifier.code !63 */
  $p766 := $add.ref($add.ref($p763, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %768 = extractvalue { i64, i64 } %763, 1, !dbg !1103, !psr.id !1122, !verifier.code !63 */
  $i767 := $extractvalue.i64($p762, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %768, i64* %767, align 8, !dbg !1103, !psr.id !1123, !verifier.code !63 */
  $M.520 := $store.i64($M.520, $p766, $i767);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  /* %769 = load i128, i128* %81, align 16, !dbg !1103, !psr.id !1124, !verifier.code !63 */
  $i768 := $load.i128($M.520, $p80);
  /* call void @llvm.dbg.value(metadata i128 %769, metadata !7832, metadata !DIExpression()), !dbg !7022, !psr.id !7833, !verifier.code !64 */
  call {:cexpr "o240"} boogie_si_record_i128($i768);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %770 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %264, i64 %298), !dbg !1127, !psr.id !1128, !ValueTainted !325, !verifier.code !63 */
  call $p769 := FStar_UInt128_mul_wide($i263, $i297);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  /* %771 = bitcast i128* %82 to { i64, i64 }*, !dbg !1127, !psr.id !1129, !verifier.code !63 */
  $p770 := $bitcast.ref.ref($p81);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  /* %772 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %771, i32 0, i32 0, !dbg !1127, !psr.id !1130, !verifier.code !63 */
  $p771 := $add.ref($add.ref($p770, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  /* %773 = extractvalue { i64, i64 } %770, 0, !dbg !1127, !psr.id !1131, !verifier.code !63 */
  $i772 := $extractvalue.i64($p769, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %773, i64* %772, align 16, !dbg !1127, !psr.id !1132, !verifier.code !63 */
  $M.521 := $store.i64($M.521, $p771, $i772);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  /* %774 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %771, i32 0, i32 1, !dbg !1127, !psr.id !1133, !verifier.code !63 */
  $p773 := $add.ref($add.ref($p770, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  /* %775 = extractvalue { i64, i64 } %770, 1, !dbg !1127, !psr.id !1134, !verifier.code !63 */
  $i774 := $extractvalue.i64($p769, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %775, i64* %774, align 8, !dbg !1127, !psr.id !1135, !verifier.code !63 */
  $M.521 := $store.i64($M.521, $p773, $i774);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  /* %776 = load i128, i128* %82, align 16, !dbg !1127, !psr.id !1136, !verifier.code !63 */
  $i775 := $load.i128($M.521, $p81);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %673, i128* %83, align 16, !dbg !1137, !psr.id !1138, !verifier.code !63 */
  $M.522 := $store.i128($M.522, $p82, $i672);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %777 = bitcast i128* %83 to { i64, i64 }*, !dbg !1137, !psr.id !1139, !verifier.code !63 */
  $p776 := $bitcast.ref.ref($p82);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %778 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %777, i32 0, i32 0, !dbg !1137, !psr.id !1140, !verifier.code !63 */
  $p777 := $add.ref($add.ref($p776, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %779 = load i64, i64* %778, align 16, !dbg !1137, !psr.id !1141, !verifier.code !63 */
  $i778 := $load.i64($M.522, $p777);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %780 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %777, i32 0, i32 1, !dbg !1137, !psr.id !1142, !verifier.code !63 */
  $p779 := $add.ref($add.ref($p776, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %781 = load i64, i64* %780, align 8, !dbg !1137, !psr.id !1143, !verifier.code !63 */
  $i780 := $load.i64($M.522, $p779);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %776, i128* %84, align 16, !dbg !1137, !psr.id !1144, !verifier.code !63 */
  $M.523 := $store.i128($M.523, $p83, $i775);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %782 = bitcast i128* %84 to { i64, i64 }*, !dbg !1137, !psr.id !1145, !verifier.code !63 */
  $p781 := $bitcast.ref.ref($p83);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %783 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %782, i32 0, i32 0, !dbg !1137, !psr.id !1146, !verifier.code !63 */
  $p782 := $add.ref($add.ref($p781, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %784 = load i64, i64* %783, align 16, !dbg !1137, !psr.id !1147, !verifier.code !63 */
  $i783 := $load.i64($M.523, $p782);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %785 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %782, i32 0, i32 1, !dbg !1137, !psr.id !1148, !verifier.code !63 */
  $p784 := $add.ref($add.ref($p781, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %786 = load i64, i64* %785, align 8, !dbg !1137, !psr.id !1149, !verifier.code !63 */
  $i785 := $load.i64($M.523, $p784);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %787 = call { i64, i64 } @FStar_UInt128_add(i64 %779, i64 %781, i64 %784, i64 %786), !dbg !1137, !psr.id !1150, !verifier.code !63 */
  call $p786 := FStar_UInt128_add($i778, $i780, $i783, $i785);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %788 = bitcast i128* %85 to { i64, i64 }*, !dbg !1137, !psr.id !1151, !verifier.code !63 */
  $p787 := $bitcast.ref.ref($p84);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %789 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %788, i32 0, i32 0, !dbg !1137, !psr.id !1152, !verifier.code !63 */
  $p788 := $add.ref($add.ref($p787, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %790 = extractvalue { i64, i64 } %787, 0, !dbg !1137, !psr.id !1153, !verifier.code !63 */
  $i789 := $extractvalue.i64($p786, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %790, i64* %789, align 16, !dbg !1137, !psr.id !1154, !verifier.code !63 */
  $M.524 := $store.i64($M.524, $p788, $i789);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %791 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %788, i32 0, i32 1, !dbg !1137, !psr.id !1155, !verifier.code !63 */
  $p790 := $add.ref($add.ref($p787, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %792 = extractvalue { i64, i64 } %787, 1, !dbg !1137, !psr.id !1156, !verifier.code !63 */
  $i791 := $extractvalue.i64($p786, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %792, i64* %791, align 8, !dbg !1137, !psr.id !1157, !verifier.code !63 */
  $M.524 := $store.i64($M.524, $p790, $i791);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  /* %793 = load i128, i128* %85, align 16, !dbg !1137, !psr.id !1158, !verifier.code !63 */
  $i792 := $load.i128($M.524, $p84);
  /* call void @llvm.dbg.value(metadata i128 %793, metadata !7866, metadata !DIExpression()), !dbg !7022, !psr.id !7867, !verifier.code !64 */
  call {:cexpr "o340"} boogie_si_record_i128($i792);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %794 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %264, i64 %266), !dbg !1161, !psr.id !1162, !ValueTainted !325, !verifier.code !63 */
  call $p793 := FStar_UInt128_mul_wide($i263, $i265);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  /* %795 = bitcast i128* %86 to { i64, i64 }*, !dbg !1161, !psr.id !1163, !verifier.code !63 */
  $p794 := $bitcast.ref.ref($p85);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  /* %796 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %795, i32 0, i32 0, !dbg !1161, !psr.id !1164, !verifier.code !63 */
  $p795 := $add.ref($add.ref($p794, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  /* %797 = extractvalue { i64, i64 } %794, 0, !dbg !1161, !psr.id !1165, !verifier.code !63 */
  $i796 := $extractvalue.i64($p793, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %797, i64* %796, align 16, !dbg !1161, !psr.id !1166, !verifier.code !63 */
  $M.525 := $store.i64($M.525, $p795, $i796);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  /* %798 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %795, i32 0, i32 1, !dbg !1161, !psr.id !1167, !verifier.code !63 */
  $p797 := $add.ref($add.ref($p794, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  /* %799 = extractvalue { i64, i64 } %794, 1, !dbg !1161, !psr.id !1168, !verifier.code !63 */
  $i798 := $extractvalue.i64($p793, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %799, i64* %798, align 8, !dbg !1161, !psr.id !1169, !verifier.code !63 */
  $M.525 := $store.i64($M.525, $p797, $i798);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  /* %800 = load i128, i128* %86, align 16, !dbg !1161, !psr.id !1170, !verifier.code !63 */
  $i799 := $load.i128($M.525, $p85);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %697, i128* %87, align 16, !dbg !1171, !psr.id !1172, !verifier.code !63 */
  $M.526 := $store.i128($M.526, $p86, $i696);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %801 = bitcast i128* %87 to { i64, i64 }*, !dbg !1171, !psr.id !1173, !verifier.code !63 */
  $p800 := $bitcast.ref.ref($p86);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %802 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %801, i32 0, i32 0, !dbg !1171, !psr.id !1174, !verifier.code !63 */
  $p801 := $add.ref($add.ref($p800, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %803 = load i64, i64* %802, align 16, !dbg !1171, !psr.id !1175, !verifier.code !63 */
  $i802 := $load.i64($M.526, $p801);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %804 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %801, i32 0, i32 1, !dbg !1171, !psr.id !1176, !verifier.code !63 */
  $p803 := $add.ref($add.ref($p800, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %805 = load i64, i64* %804, align 8, !dbg !1171, !psr.id !1177, !verifier.code !63 */
  $i804 := $load.i64($M.526, $p803);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %800, i128* %88, align 16, !dbg !1171, !psr.id !1178, !verifier.code !63 */
  $M.527 := $store.i128($M.527, $p87, $i799);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %806 = bitcast i128* %88 to { i64, i64 }*, !dbg !1171, !psr.id !1179, !verifier.code !63 */
  $p805 := $bitcast.ref.ref($p87);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %807 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %806, i32 0, i32 0, !dbg !1171, !psr.id !1180, !verifier.code !63 */
  $p806 := $add.ref($add.ref($p805, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %808 = load i64, i64* %807, align 16, !dbg !1171, !psr.id !1181, !verifier.code !63 */
  $i807 := $load.i64($M.527, $p806);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %809 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %806, i32 0, i32 1, !dbg !1171, !psr.id !1182, !verifier.code !63 */
  $p808 := $add.ref($add.ref($p805, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %810 = load i64, i64* %809, align 8, !dbg !1171, !psr.id !1183, !verifier.code !63 */
  $i809 := $load.i64($M.527, $p808);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %811 = call { i64, i64 } @FStar_UInt128_add(i64 %803, i64 %805, i64 %808, i64 %810), !dbg !1171, !psr.id !1184, !verifier.code !63 */
  call $p810 := FStar_UInt128_add($i802, $i804, $i807, $i809);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %812 = bitcast i128* %89 to { i64, i64 }*, !dbg !1171, !psr.id !1185, !verifier.code !63 */
  $p811 := $bitcast.ref.ref($p88);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %813 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %812, i32 0, i32 0, !dbg !1171, !psr.id !1186, !verifier.code !63 */
  $p812 := $add.ref($add.ref($p811, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %814 = extractvalue { i64, i64 } %811, 0, !dbg !1171, !psr.id !1187, !verifier.code !63 */
  $i813 := $extractvalue.i64($p810, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %814, i64* %813, align 16, !dbg !1171, !psr.id !1188, !verifier.code !63 */
  $M.528 := $store.i64($M.528, $p812, $i813);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %815 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %812, i32 0, i32 1, !dbg !1171, !psr.id !1189, !verifier.code !63 */
  $p814 := $add.ref($add.ref($p811, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %816 = extractvalue { i64, i64 } %811, 1, !dbg !1171, !psr.id !1190, !verifier.code !63 */
  $i815 := $extractvalue.i64($p810, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %816, i64* %815, align 8, !dbg !1171, !psr.id !1191, !verifier.code !63 */
  $M.528 := $store.i64($M.528, $p814, $i815);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  /* %817 = load i128, i128* %89, align 16, !dbg !1171, !psr.id !1192, !verifier.code !63 */
  $i816 := $load.i128($M.528, $p88);
  /* call void @llvm.dbg.value(metadata i128 %817, metadata !7900, metadata !DIExpression()), !dbg !7022, !psr.id !7901, !verifier.code !64 */
  call {:cexpr "o440"} boogie_si_record_i128($i816);
  /* call void @llvm.dbg.value(metadata i128 %721, metadata !7902, metadata !DIExpression()), !dbg !7022, !psr.id !7903, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %745, metadata !7904, metadata !DIExpression()), !dbg !7022, !psr.id !7905, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %769, metadata !7906, metadata !DIExpression()), !dbg !7022, !psr.id !7907, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %793, metadata !7908, metadata !DIExpression()), !dbg !7022, !psr.id !7909, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %817, metadata !7910, metadata !DIExpression()), !dbg !7022, !psr.id !7911, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %818 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %276, i64 %286), !dbg !1205, !psr.id !1206, !ValueTainted !325, !verifier.code !63 */
  call $p817 := FStar_UInt128_mul_wide($i275, $i285);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  /* %819 = bitcast i128* %90 to { i64, i64 }*, !dbg !1205, !psr.id !1207, !verifier.code !63 */
  $p818 := $bitcast.ref.ref($p89);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  /* %820 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %819, i32 0, i32 0, !dbg !1205, !psr.id !1208, !verifier.code !63 */
  $p819 := $add.ref($add.ref($p818, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  /* %821 = extractvalue { i64, i64 } %818, 0, !dbg !1205, !psr.id !1209, !verifier.code !63 */
  $i820 := $extractvalue.i64($p817, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  /* store i64 %821, i64* %820, align 16, !dbg !1205, !psr.id !1210, !verifier.code !63 */
  $M.529 := $store.i64($M.529, $p819, $i820);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  /* %822 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %819, i32 0, i32 1, !dbg !1205, !psr.id !1211, !verifier.code !63 */
  $p821 := $add.ref($add.ref($p818, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  /* %823 = extractvalue { i64, i64 } %818, 1, !dbg !1205, !psr.id !1212, !verifier.code !63 */
  $i822 := $extractvalue.i64($p817, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  /* store i64 %823, i64* %822, align 8, !dbg !1205, !psr.id !1213, !verifier.code !63 */
  $M.529 := $store.i64($M.529, $p821, $i822);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  /* %824 = load i128, i128* %90, align 16, !dbg !1205, !psr.id !1214, !verifier.code !63 */
  $i823 := $load.i128($M.529, $p89);
  /* call void @llvm.dbg.value(metadata i128 %824, metadata !7922, metadata !DIExpression()), !dbg !7022, !psr.id !7923, !verifier.code !64 */
  call {:cexpr "o0"} boogie_si_record_i128($i823);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %825 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %276, i64 %288), !dbg !1217, !psr.id !1218, !ValueTainted !325, !verifier.code !63 */
  call $p824 := FStar_UInt128_mul_wide($i275, $i287);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  /* %826 = bitcast i128* %91 to { i64, i64 }*, !dbg !1217, !psr.id !1219, !verifier.code !63 */
  $p825 := $bitcast.ref.ref($p90);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  /* %827 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %826, i32 0, i32 0, !dbg !1217, !psr.id !1220, !verifier.code !63 */
  $p826 := $add.ref($add.ref($p825, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  /* %828 = extractvalue { i64, i64 } %825, 0, !dbg !1217, !psr.id !1221, !verifier.code !63 */
  $i827 := $extractvalue.i64($p824, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  /* store i64 %828, i64* %827, align 16, !dbg !1217, !psr.id !1222, !verifier.code !63 */
  $M.530 := $store.i64($M.530, $p826, $i827);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  /* %829 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %826, i32 0, i32 1, !dbg !1217, !psr.id !1223, !verifier.code !63 */
  $p828 := $add.ref($add.ref($p825, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  /* %830 = extractvalue { i64, i64 } %825, 1, !dbg !1217, !psr.id !1224, !verifier.code !63 */
  $i829 := $extractvalue.i64($p824, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  /* store i64 %830, i64* %829, align 8, !dbg !1217, !psr.id !1225, !verifier.code !63 */
  $M.530 := $store.i64($M.530, $p828, $i829);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  /* %831 = load i128, i128* %91, align 16, !dbg !1217, !psr.id !1226, !verifier.code !63 */
  $i830 := $load.i128($M.530, $p90);
  /* call void @llvm.dbg.value(metadata i128 %831, metadata !7934, metadata !DIExpression()), !dbg !7022, !psr.id !7935, !verifier.code !64 */
  call {:cexpr "o1"} boogie_si_record_i128($i830);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %832 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %276, i64 %290), !dbg !1229, !psr.id !1230, !ValueTainted !325, !verifier.code !63 */
  call $p831 := FStar_UInt128_mul_wide($i275, $i289);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  /* %833 = bitcast i128* %92 to { i64, i64 }*, !dbg !1229, !psr.id !1231, !verifier.code !63 */
  $p832 := $bitcast.ref.ref($p91);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  /* %834 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %833, i32 0, i32 0, !dbg !1229, !psr.id !1232, !verifier.code !63 */
  $p833 := $add.ref($add.ref($p832, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  /* %835 = extractvalue { i64, i64 } %832, 0, !dbg !1229, !psr.id !1233, !verifier.code !63 */
  $i834 := $extractvalue.i64($p831, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  /* store i64 %835, i64* %834, align 16, !dbg !1229, !psr.id !1234, !verifier.code !63 */
  $M.531 := $store.i64($M.531, $p833, $i834);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  /* %836 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %833, i32 0, i32 1, !dbg !1229, !psr.id !1235, !verifier.code !63 */
  $p835 := $add.ref($add.ref($p832, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  /* %837 = extractvalue { i64, i64 } %832, 1, !dbg !1229, !psr.id !1236, !verifier.code !63 */
  $i836 := $extractvalue.i64($p831, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  /* store i64 %837, i64* %836, align 8, !dbg !1229, !psr.id !1237, !verifier.code !63 */
  $M.531 := $store.i64($M.531, $p835, $i836);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  /* %838 = load i128, i128* %92, align 16, !dbg !1229, !psr.id !1238, !verifier.code !63 */
  $i837 := $load.i128($M.531, $p91);
  /* call void @llvm.dbg.value(metadata i128 %838, metadata !7946, metadata !DIExpression()), !dbg !7022, !psr.id !7947, !verifier.code !64 */
  call {:cexpr "o2"} boogie_si_record_i128($i837);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %839 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %276, i64 %292), !dbg !1241, !psr.id !1242, !ValueTainted !325, !verifier.code !63 */
  call $p838 := FStar_UInt128_mul_wide($i275, $i291);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  /* %840 = bitcast i128* %93 to { i64, i64 }*, !dbg !1241, !psr.id !1243, !verifier.code !63 */
  $p839 := $bitcast.ref.ref($p92);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  /* %841 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %840, i32 0, i32 0, !dbg !1241, !psr.id !1244, !verifier.code !63 */
  $p840 := $add.ref($add.ref($p839, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  /* %842 = extractvalue { i64, i64 } %839, 0, !dbg !1241, !psr.id !1245, !verifier.code !63 */
  $i841 := $extractvalue.i64($p838, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  /* store i64 %842, i64* %841, align 16, !dbg !1241, !psr.id !1246, !verifier.code !63 */
  $M.532 := $store.i64($M.532, $p840, $i841);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  /* %843 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %840, i32 0, i32 1, !dbg !1241, !psr.id !1247, !verifier.code !63 */
  $p842 := $add.ref($add.ref($p839, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  /* %844 = extractvalue { i64, i64 } %839, 1, !dbg !1241, !psr.id !1248, !verifier.code !63 */
  $i843 := $extractvalue.i64($p838, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  /* store i64 %844, i64* %843, align 8, !dbg !1241, !psr.id !1249, !verifier.code !63 */
  $M.532 := $store.i64($M.532, $p842, $i843);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  /* %845 = load i128, i128* %93, align 16, !dbg !1241, !psr.id !1250, !verifier.code !63 */
  $i844 := $load.i128($M.532, $p92);
  /* call void @llvm.dbg.value(metadata i128 %845, metadata !7958, metadata !DIExpression()), !dbg !7022, !psr.id !7959, !verifier.code !64 */
  call {:cexpr "o3"} boogie_si_record_i128($i844);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %846 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %276, i64 %294), !dbg !1253, !psr.id !1254, !ValueTainted !325, !verifier.code !63 */
  call $p845 := FStar_UInt128_mul_wide($i275, $i293);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  /* %847 = bitcast i128* %94 to { i64, i64 }*, !dbg !1253, !psr.id !1255, !verifier.code !63 */
  $p846 := $bitcast.ref.ref($p93);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  /* %848 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %847, i32 0, i32 0, !dbg !1253, !psr.id !1256, !verifier.code !63 */
  $p847 := $add.ref($add.ref($p846, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  /* %849 = extractvalue { i64, i64 } %846, 0, !dbg !1253, !psr.id !1257, !verifier.code !63 */
  $i848 := $extractvalue.i64($p845, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  /* store i64 %849, i64* %848, align 16, !dbg !1253, !psr.id !1258, !verifier.code !63 */
  $M.533 := $store.i64($M.533, $p847, $i848);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  /* %850 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %847, i32 0, i32 1, !dbg !1253, !psr.id !1259, !verifier.code !63 */
  $p849 := $add.ref($add.ref($p846, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  /* %851 = extractvalue { i64, i64 } %846, 1, !dbg !1253, !psr.id !1260, !verifier.code !63 */
  $i850 := $extractvalue.i64($p845, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  /* store i64 %851, i64* %850, align 8, !dbg !1253, !psr.id !1261, !verifier.code !63 */
  $M.533 := $store.i64($M.533, $p849, $i850);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  /* %852 = load i128, i128* %94, align 16, !dbg !1253, !psr.id !1262, !verifier.code !63 */
  $i851 := $load.i128($M.533, $p93);
  /* call void @llvm.dbg.value(metadata i128 %852, metadata !7970, metadata !DIExpression()), !dbg !7022, !psr.id !7971, !verifier.code !64 */
  call {:cexpr "o4"} boogie_si_record_i128($i851);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %853 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %278, i64 %302), !dbg !1265, !psr.id !1266, !ValueTainted !325, !verifier.code !63 */
  call $p852 := FStar_UInt128_mul_wide($i277, $i301);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  /* %854 = bitcast i128* %95 to { i64, i64 }*, !dbg !1265, !psr.id !1267, !verifier.code !63 */
  $p853 := $bitcast.ref.ref($p94);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  /* %855 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %854, i32 0, i32 0, !dbg !1265, !psr.id !1268, !verifier.code !63 */
  $p854 := $add.ref($add.ref($p853, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  /* %856 = extractvalue { i64, i64 } %853, 0, !dbg !1265, !psr.id !1269, !verifier.code !63 */
  $i855 := $extractvalue.i64($p852, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  /* store i64 %856, i64* %855, align 16, !dbg !1265, !psr.id !1270, !verifier.code !63 */
  $M.534 := $store.i64($M.534, $p854, $i855);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  /* %857 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %854, i32 0, i32 1, !dbg !1265, !psr.id !1271, !verifier.code !63 */
  $p856 := $add.ref($add.ref($p853, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  /* %858 = extractvalue { i64, i64 } %853, 1, !dbg !1265, !psr.id !1272, !verifier.code !63 */
  $i857 := $extractvalue.i64($p852, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  /* store i64 %858, i64* %857, align 8, !dbg !1265, !psr.id !1273, !verifier.code !63 */
  $M.534 := $store.i64($M.534, $p856, $i857);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  /* %859 = load i128, i128* %95, align 16, !dbg !1265, !psr.id !1274, !verifier.code !63 */
  $i858 := $load.i128($M.534, $p94);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %824, i128* %96, align 16, !dbg !1275, !psr.id !1276, !verifier.code !63 */
  $M.535 := $store.i128($M.535, $p95, $i823);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %860 = bitcast i128* %96 to { i64, i64 }*, !dbg !1275, !psr.id !1277, !verifier.code !63 */
  $p859 := $bitcast.ref.ref($p95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %861 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %860, i32 0, i32 0, !dbg !1275, !psr.id !1278, !verifier.code !63 */
  $p860 := $add.ref($add.ref($p859, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %862 = load i64, i64* %861, align 16, !dbg !1275, !psr.id !1279, !verifier.code !63 */
  $i861 := $load.i64($M.535, $p860);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %863 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %860, i32 0, i32 1, !dbg !1275, !psr.id !1280, !verifier.code !63 */
  $p862 := $add.ref($add.ref($p859, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %864 = load i64, i64* %863, align 8, !dbg !1275, !psr.id !1281, !verifier.code !63 */
  $i863 := $load.i64($M.535, $p862);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %859, i128* %97, align 16, !dbg !1275, !psr.id !1282, !verifier.code !63 */
  $M.536 := $store.i128($M.536, $p96, $i858);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %865 = bitcast i128* %97 to { i64, i64 }*, !dbg !1275, !psr.id !1283, !verifier.code !63 */
  $p864 := $bitcast.ref.ref($p96);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %866 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %865, i32 0, i32 0, !dbg !1275, !psr.id !1284, !verifier.code !63 */
  $p865 := $add.ref($add.ref($p864, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %867 = load i64, i64* %866, align 16, !dbg !1275, !psr.id !1285, !verifier.code !63 */
  $i866 := $load.i64($M.536, $p865);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %868 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %865, i32 0, i32 1, !dbg !1275, !psr.id !1286, !verifier.code !63 */
  $p867 := $add.ref($add.ref($p864, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %869 = load i64, i64* %868, align 8, !dbg !1275, !psr.id !1287, !verifier.code !63 */
  $i868 := $load.i64($M.536, $p867);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %870 = call { i64, i64 } @FStar_UInt128_add(i64 %862, i64 %864, i64 %867, i64 %869), !dbg !1275, !psr.id !1288, !verifier.code !63 */
  call $p869 := FStar_UInt128_add($i861, $i863, $i866, $i868);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %871 = bitcast i128* %98 to { i64, i64 }*, !dbg !1275, !psr.id !1289, !verifier.code !63 */
  $p870 := $bitcast.ref.ref($p97);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %872 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %871, i32 0, i32 0, !dbg !1275, !psr.id !1290, !verifier.code !63 */
  $p871 := $add.ref($add.ref($p870, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %873 = extractvalue { i64, i64 } %870, 0, !dbg !1275, !psr.id !1291, !verifier.code !63 */
  $i872 := $extractvalue.i64($p869, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %873, i64* %872, align 16, !dbg !1275, !psr.id !1292, !verifier.code !63 */
  $M.537 := $store.i64($M.537, $p871, $i872);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %874 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %871, i32 0, i32 1, !dbg !1275, !psr.id !1293, !verifier.code !63 */
  $p873 := $add.ref($add.ref($p870, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %875 = extractvalue { i64, i64 } %870, 1, !dbg !1275, !psr.id !1294, !verifier.code !63 */
  $i874 := $extractvalue.i64($p869, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %875, i64* %874, align 8, !dbg !1275, !psr.id !1295, !verifier.code !63 */
  $M.537 := $store.i64($M.537, $p873, $i874);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  /* %876 = load i128, i128* %98, align 16, !dbg !1275, !psr.id !1296, !verifier.code !63 */
  $i875 := $load.i128($M.537, $p97);
  /* call void @llvm.dbg.value(metadata i128 %876, metadata !8004, metadata !DIExpression()), !dbg !7022, !psr.id !8005, !verifier.code !64 */
  call {:cexpr "o01"} boogie_si_record_i128($i875);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %877 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %278, i64 %286), !dbg !1299, !psr.id !1300, !ValueTainted !325, !verifier.code !63 */
  call $p876 := FStar_UInt128_mul_wide($i277, $i285);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  /* %878 = bitcast i128* %99 to { i64, i64 }*, !dbg !1299, !psr.id !1301, !verifier.code !63 */
  $p877 := $bitcast.ref.ref($p98);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  /* %879 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %878, i32 0, i32 0, !dbg !1299, !psr.id !1302, !verifier.code !63 */
  $p878 := $add.ref($add.ref($p877, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  /* %880 = extractvalue { i64, i64 } %877, 0, !dbg !1299, !psr.id !1303, !verifier.code !63 */
  $i879 := $extractvalue.i64($p876, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %880, i64* %879, align 16, !dbg !1299, !psr.id !1304, !verifier.code !63 */
  $M.538 := $store.i64($M.538, $p878, $i879);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  /* %881 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %878, i32 0, i32 1, !dbg !1299, !psr.id !1305, !verifier.code !63 */
  $p880 := $add.ref($add.ref($p877, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  /* %882 = extractvalue { i64, i64 } %877, 1, !dbg !1299, !psr.id !1306, !verifier.code !63 */
  $i881 := $extractvalue.i64($p876, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %882, i64* %881, align 8, !dbg !1299, !psr.id !1307, !verifier.code !63 */
  $M.538 := $store.i64($M.538, $p880, $i881);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  /* %883 = load i128, i128* %99, align 16, !dbg !1299, !psr.id !1308, !verifier.code !63 */
  $i882 := $load.i128($M.538, $p98);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %831, i128* %100, align 16, !dbg !1309, !psr.id !1310, !verifier.code !63 */
  $M.539 := $store.i128($M.539, $p99, $i830);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %884 = bitcast i128* %100 to { i64, i64 }*, !dbg !1309, !psr.id !1311, !verifier.code !63 */
  $p883 := $bitcast.ref.ref($p99);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %885 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %884, i32 0, i32 0, !dbg !1309, !psr.id !1312, !verifier.code !63 */
  $p884 := $add.ref($add.ref($p883, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %886 = load i64, i64* %885, align 16, !dbg !1309, !psr.id !1313, !verifier.code !63 */
  $i885 := $load.i64($M.539, $p884);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %887 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %884, i32 0, i32 1, !dbg !1309, !psr.id !1314, !verifier.code !63 */
  $p886 := $add.ref($add.ref($p883, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %888 = load i64, i64* %887, align 8, !dbg !1309, !psr.id !1315, !verifier.code !63 */
  $i887 := $load.i64($M.539, $p886);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %883, i128* %101, align 16, !dbg !1309, !psr.id !1316, !verifier.code !63 */
  $M.540 := $store.i128($M.540, $p100, $i882);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %889 = bitcast i128* %101 to { i64, i64 }*, !dbg !1309, !psr.id !1317, !verifier.code !63 */
  $p888 := $bitcast.ref.ref($p100);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %890 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %889, i32 0, i32 0, !dbg !1309, !psr.id !1318, !verifier.code !63 */
  $p889 := $add.ref($add.ref($p888, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %891 = load i64, i64* %890, align 16, !dbg !1309, !psr.id !1319, !verifier.code !63 */
  $i890 := $load.i64($M.540, $p889);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %892 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %889, i32 0, i32 1, !dbg !1309, !psr.id !1320, !verifier.code !63 */
  $p891 := $add.ref($add.ref($p888, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %893 = load i64, i64* %892, align 8, !dbg !1309, !psr.id !1321, !verifier.code !63 */
  $i892 := $load.i64($M.540, $p891);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %894 = call { i64, i64 } @FStar_UInt128_add(i64 %886, i64 %888, i64 %891, i64 %893), !dbg !1309, !psr.id !1322, !verifier.code !63 */
  call $p893 := FStar_UInt128_add($i885, $i887, $i890, $i892);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %895 = bitcast i128* %102 to { i64, i64 }*, !dbg !1309, !psr.id !1323, !verifier.code !63 */
  $p894 := $bitcast.ref.ref($p101);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %896 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %895, i32 0, i32 0, !dbg !1309, !psr.id !1324, !verifier.code !63 */
  $p895 := $add.ref($add.ref($p894, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %897 = extractvalue { i64, i64 } %894, 0, !dbg !1309, !psr.id !1325, !verifier.code !63 */
  $i896 := $extractvalue.i64($p893, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %897, i64* %896, align 16, !dbg !1309, !psr.id !1326, !verifier.code !63 */
  $M.541 := $store.i64($M.541, $p895, $i896);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %898 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %895, i32 0, i32 1, !dbg !1309, !psr.id !1327, !verifier.code !63 */
  $p897 := $add.ref($add.ref($p894, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %899 = extractvalue { i64, i64 } %894, 1, !dbg !1309, !psr.id !1328, !verifier.code !63 */
  $i898 := $extractvalue.i64($p893, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %899, i64* %898, align 8, !dbg !1309, !psr.id !1329, !verifier.code !63 */
  $M.541 := $store.i64($M.541, $p897, $i898);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  /* %900 = load i128, i128* %102, align 16, !dbg !1309, !psr.id !1330, !verifier.code !63 */
  $i899 := $load.i128($M.541, $p101);
  /* call void @llvm.dbg.value(metadata i128 %900, metadata !8038, metadata !DIExpression()), !dbg !7022, !psr.id !8039, !verifier.code !64 */
  call {:cexpr "o111"} boogie_si_record_i128($i899);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %901 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %278, i64 %288), !dbg !1333, !psr.id !1334, !ValueTainted !325, !verifier.code !63 */
  call $p900 := FStar_UInt128_mul_wide($i277, $i287);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  /* %902 = bitcast i128* %103 to { i64, i64 }*, !dbg !1333, !psr.id !1335, !verifier.code !63 */
  $p901 := $bitcast.ref.ref($p102);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  /* %903 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %902, i32 0, i32 0, !dbg !1333, !psr.id !1336, !verifier.code !63 */
  $p902 := $add.ref($add.ref($p901, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  /* %904 = extractvalue { i64, i64 } %901, 0, !dbg !1333, !psr.id !1337, !verifier.code !63 */
  $i903 := $extractvalue.i64($p900, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %904, i64* %903, align 16, !dbg !1333, !psr.id !1338, !verifier.code !63 */
  $M.542 := $store.i64($M.542, $p902, $i903);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  /* %905 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %902, i32 0, i32 1, !dbg !1333, !psr.id !1339, !verifier.code !63 */
  $p904 := $add.ref($add.ref($p901, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  /* %906 = extractvalue { i64, i64 } %901, 1, !dbg !1333, !psr.id !1340, !verifier.code !63 */
  $i905 := $extractvalue.i64($p900, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %906, i64* %905, align 8, !dbg !1333, !psr.id !1341, !verifier.code !63 */
  $M.542 := $store.i64($M.542, $p904, $i905);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  /* %907 = load i128, i128* %103, align 16, !dbg !1333, !psr.id !1342, !verifier.code !63 */
  $i906 := $load.i128($M.542, $p102);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %838, i128* %104, align 16, !dbg !1343, !psr.id !1344, !verifier.code !63 */
  $M.543 := $store.i128($M.543, $p103, $i837);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %908 = bitcast i128* %104 to { i64, i64 }*, !dbg !1343, !psr.id !1345, !verifier.code !63 */
  $p907 := $bitcast.ref.ref($p103);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %909 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %908, i32 0, i32 0, !dbg !1343, !psr.id !1346, !verifier.code !63 */
  $p908 := $add.ref($add.ref($p907, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %910 = load i64, i64* %909, align 16, !dbg !1343, !psr.id !1347, !verifier.code !63 */
  $i909 := $load.i64($M.543, $p908);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %911 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %908, i32 0, i32 1, !dbg !1343, !psr.id !1348, !verifier.code !63 */
  $p910 := $add.ref($add.ref($p907, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %912 = load i64, i64* %911, align 8, !dbg !1343, !psr.id !1349, !verifier.code !63 */
  $i911 := $load.i64($M.543, $p910);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %907, i128* %105, align 16, !dbg !1343, !psr.id !1350, !verifier.code !63 */
  $M.544 := $store.i128($M.544, $p104, $i906);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %913 = bitcast i128* %105 to { i64, i64 }*, !dbg !1343, !psr.id !1351, !verifier.code !63 */
  $p912 := $bitcast.ref.ref($p104);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %914 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %913, i32 0, i32 0, !dbg !1343, !psr.id !1352, !verifier.code !63 */
  $p913 := $add.ref($add.ref($p912, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %915 = load i64, i64* %914, align 16, !dbg !1343, !psr.id !1353, !verifier.code !63 */
  $i914 := $load.i64($M.544, $p913);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %916 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %913, i32 0, i32 1, !dbg !1343, !psr.id !1354, !verifier.code !63 */
  $p915 := $add.ref($add.ref($p912, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %917 = load i64, i64* %916, align 8, !dbg !1343, !psr.id !1355, !verifier.code !63 */
  $i916 := $load.i64($M.544, $p915);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %918 = call { i64, i64 } @FStar_UInt128_add(i64 %910, i64 %912, i64 %915, i64 %917), !dbg !1343, !psr.id !1356, !verifier.code !63 */
  call $p917 := FStar_UInt128_add($i909, $i911, $i914, $i916);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %919 = bitcast i128* %106 to { i64, i64 }*, !dbg !1343, !psr.id !1357, !verifier.code !63 */
  $p918 := $bitcast.ref.ref($p105);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %920 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %919, i32 0, i32 0, !dbg !1343, !psr.id !1358, !verifier.code !63 */
  $p919 := $add.ref($add.ref($p918, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %921 = extractvalue { i64, i64 } %918, 0, !dbg !1343, !psr.id !1359, !verifier.code !63 */
  $i920 := $extractvalue.i64($p917, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %921, i64* %920, align 16, !dbg !1343, !psr.id !1360, !verifier.code !63 */
  $M.545 := $store.i64($M.545, $p919, $i920);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %922 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %919, i32 0, i32 1, !dbg !1343, !psr.id !1361, !verifier.code !63 */
  $p921 := $add.ref($add.ref($p918, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %923 = extractvalue { i64, i64 } %918, 1, !dbg !1343, !psr.id !1362, !verifier.code !63 */
  $i922 := $extractvalue.i64($p917, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %923, i64* %922, align 8, !dbg !1343, !psr.id !1363, !verifier.code !63 */
  $M.545 := $store.i64($M.545, $p921, $i922);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  /* %924 = load i128, i128* %106, align 16, !dbg !1343, !psr.id !1364, !verifier.code !63 */
  $i923 := $load.i128($M.545, $p105);
  /* call void @llvm.dbg.value(metadata i128 %924, metadata !8072, metadata !DIExpression()), !dbg !7022, !psr.id !8073, !verifier.code !64 */
  call {:cexpr "o211"} boogie_si_record_i128($i923);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %925 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %278, i64 %290), !dbg !1367, !psr.id !1368, !ValueTainted !325, !verifier.code !63 */
  call $p924 := FStar_UInt128_mul_wide($i277, $i289);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  /* %926 = bitcast i128* %107 to { i64, i64 }*, !dbg !1367, !psr.id !1369, !verifier.code !63 */
  $p925 := $bitcast.ref.ref($p106);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  /* %927 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %926, i32 0, i32 0, !dbg !1367, !psr.id !1370, !verifier.code !63 */
  $p926 := $add.ref($add.ref($p925, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  /* %928 = extractvalue { i64, i64 } %925, 0, !dbg !1367, !psr.id !1371, !verifier.code !63 */
  $i927 := $extractvalue.i64($p924, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  /* store i64 %928, i64* %927, align 16, !dbg !1367, !psr.id !1372, !verifier.code !63 */
  $M.546 := $store.i64($M.546, $p926, $i927);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  /* %929 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %926, i32 0, i32 1, !dbg !1367, !psr.id !1373, !verifier.code !63 */
  $p928 := $add.ref($add.ref($p925, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  /* %930 = extractvalue { i64, i64 } %925, 1, !dbg !1367, !psr.id !1374, !verifier.code !63 */
  $i929 := $extractvalue.i64($p924, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  /* store i64 %930, i64* %929, align 8, !dbg !1367, !psr.id !1375, !verifier.code !63 */
  $M.546 := $store.i64($M.546, $p928, $i929);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  /* %931 = load i128, i128* %107, align 16, !dbg !1367, !psr.id !1376, !verifier.code !63 */
  $i930 := $load.i128($M.546, $p106);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %845, i128* %108, align 16, !dbg !1377, !psr.id !1378, !verifier.code !63 */
  $M.547 := $store.i128($M.547, $p107, $i844);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %932 = bitcast i128* %108 to { i64, i64 }*, !dbg !1377, !psr.id !1379, !verifier.code !63 */
  $p931 := $bitcast.ref.ref($p107);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %933 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %932, i32 0, i32 0, !dbg !1377, !psr.id !1380, !verifier.code !63 */
  $p932 := $add.ref($add.ref($p931, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %934 = load i64, i64* %933, align 16, !dbg !1377, !psr.id !1381, !verifier.code !63 */
  $i933 := $load.i64($M.547, $p932);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %935 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %932, i32 0, i32 1, !dbg !1377, !psr.id !1382, !verifier.code !63 */
  $p934 := $add.ref($add.ref($p931, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %936 = load i64, i64* %935, align 8, !dbg !1377, !psr.id !1383, !verifier.code !63 */
  $i935 := $load.i64($M.547, $p934);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %931, i128* %109, align 16, !dbg !1377, !psr.id !1384, !verifier.code !63 */
  $M.548 := $store.i128($M.548, $p108, $i930);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %937 = bitcast i128* %109 to { i64, i64 }*, !dbg !1377, !psr.id !1385, !verifier.code !63 */
  $p936 := $bitcast.ref.ref($p108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %938 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %937, i32 0, i32 0, !dbg !1377, !psr.id !1386, !verifier.code !63 */
  $p937 := $add.ref($add.ref($p936, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %939 = load i64, i64* %938, align 16, !dbg !1377, !psr.id !1387, !verifier.code !63 */
  $i938 := $load.i64($M.548, $p937);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %940 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %937, i32 0, i32 1, !dbg !1377, !psr.id !1388, !verifier.code !63 */
  $p939 := $add.ref($add.ref($p936, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %941 = load i64, i64* %940, align 8, !dbg !1377, !psr.id !1389, !verifier.code !63 */
  $i940 := $load.i64($M.548, $p939);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %942 = call { i64, i64 } @FStar_UInt128_add(i64 %934, i64 %936, i64 %939, i64 %941), !dbg !1377, !psr.id !1390, !verifier.code !63 */
  call $p941 := FStar_UInt128_add($i933, $i935, $i938, $i940);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %943 = bitcast i128* %110 to { i64, i64 }*, !dbg !1377, !psr.id !1391, !verifier.code !63 */
  $p942 := $bitcast.ref.ref($p109);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %944 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %943, i32 0, i32 0, !dbg !1377, !psr.id !1392, !verifier.code !63 */
  $p943 := $add.ref($add.ref($p942, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %945 = extractvalue { i64, i64 } %942, 0, !dbg !1377, !psr.id !1393, !verifier.code !63 */
  $i944 := $extractvalue.i64($p941, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %945, i64* %944, align 16, !dbg !1377, !psr.id !1394, !verifier.code !63 */
  $M.549 := $store.i64($M.549, $p943, $i944);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %946 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %943, i32 0, i32 1, !dbg !1377, !psr.id !1395, !verifier.code !63 */
  $p945 := $add.ref($add.ref($p942, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %947 = extractvalue { i64, i64 } %942, 1, !dbg !1377, !psr.id !1396, !verifier.code !63 */
  $i946 := $extractvalue.i64($p941, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %947, i64* %946, align 8, !dbg !1377, !psr.id !1397, !verifier.code !63 */
  $M.549 := $store.i64($M.549, $p945, $i946);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  /* %948 = load i128, i128* %110, align 16, !dbg !1377, !psr.id !1398, !verifier.code !63 */
  $i947 := $load.i128($M.549, $p109);
  /* call void @llvm.dbg.value(metadata i128 %948, metadata !8106, metadata !DIExpression()), !dbg !7022, !psr.id !8107, !verifier.code !64 */
  call {:cexpr "o31"} boogie_si_record_i128($i947);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %949 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %278, i64 %292), !dbg !1401, !psr.id !1402, !ValueTainted !325, !verifier.code !63 */
  call $p948 := FStar_UInt128_mul_wide($i277, $i291);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  /* %950 = bitcast i128* %111 to { i64, i64 }*, !dbg !1401, !psr.id !1403, !verifier.code !63 */
  $p949 := $bitcast.ref.ref($p110);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  /* %951 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %950, i32 0, i32 0, !dbg !1401, !psr.id !1404, !verifier.code !63 */
  $p950 := $add.ref($add.ref($p949, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  /* %952 = extractvalue { i64, i64 } %949, 0, !dbg !1401, !psr.id !1405, !verifier.code !63 */
  $i951 := $extractvalue.i64($p948, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  /* store i64 %952, i64* %951, align 16, !dbg !1401, !psr.id !1406, !verifier.code !63 */
  $M.550 := $store.i64($M.550, $p950, $i951);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  /* %953 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %950, i32 0, i32 1, !dbg !1401, !psr.id !1407, !verifier.code !63 */
  $p952 := $add.ref($add.ref($p949, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  /* %954 = extractvalue { i64, i64 } %949, 1, !dbg !1401, !psr.id !1408, !verifier.code !63 */
  $i953 := $extractvalue.i64($p948, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  /* store i64 %954, i64* %953, align 8, !dbg !1401, !psr.id !1409, !verifier.code !63 */
  $M.550 := $store.i64($M.550, $p952, $i953);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  /* %955 = load i128, i128* %111, align 16, !dbg !1401, !psr.id !1410, !verifier.code !63 */
  $i954 := $load.i128($M.550, $p110);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %852, i128* %112, align 16, !dbg !1411, !psr.id !1412, !verifier.code !63 */
  $M.551 := $store.i128($M.551, $p111, $i851);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %956 = bitcast i128* %112 to { i64, i64 }*, !dbg !1411, !psr.id !1413, !verifier.code !63 */
  $p955 := $bitcast.ref.ref($p111);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %957 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %956, i32 0, i32 0, !dbg !1411, !psr.id !1414, !verifier.code !63 */
  $p956 := $add.ref($add.ref($p955, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %958 = load i64, i64* %957, align 16, !dbg !1411, !psr.id !1415, !verifier.code !63 */
  $i957 := $load.i64($M.551, $p956);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %959 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %956, i32 0, i32 1, !dbg !1411, !psr.id !1416, !verifier.code !63 */
  $p958 := $add.ref($add.ref($p955, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %960 = load i64, i64* %959, align 8, !dbg !1411, !psr.id !1417, !verifier.code !63 */
  $i959 := $load.i64($M.551, $p958);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %955, i128* %113, align 16, !dbg !1411, !psr.id !1418, !verifier.code !63 */
  $M.552 := $store.i128($M.552, $p112, $i954);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %961 = bitcast i128* %113 to { i64, i64 }*, !dbg !1411, !psr.id !1419, !verifier.code !63 */
  $p960 := $bitcast.ref.ref($p112);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %962 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %961, i32 0, i32 0, !dbg !1411, !psr.id !1420, !verifier.code !63 */
  $p961 := $add.ref($add.ref($p960, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %963 = load i64, i64* %962, align 16, !dbg !1411, !psr.id !1421, !verifier.code !63 */
  $i962 := $load.i64($M.552, $p961);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %964 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %961, i32 0, i32 1, !dbg !1411, !psr.id !1422, !verifier.code !63 */
  $p963 := $add.ref($add.ref($p960, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %965 = load i64, i64* %964, align 8, !dbg !1411, !psr.id !1423, !verifier.code !63 */
  $i964 := $load.i64($M.552, $p963);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %966 = call { i64, i64 } @FStar_UInt128_add(i64 %958, i64 %960, i64 %963, i64 %965), !dbg !1411, !psr.id !1424, !verifier.code !63 */
  call $p965 := FStar_UInt128_add($i957, $i959, $i962, $i964);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %967 = bitcast i128* %114 to { i64, i64 }*, !dbg !1411, !psr.id !1425, !verifier.code !63 */
  $p966 := $bitcast.ref.ref($p113);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %968 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %967, i32 0, i32 0, !dbg !1411, !psr.id !1426, !verifier.code !63 */
  $p967 := $add.ref($add.ref($p966, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %969 = extractvalue { i64, i64 } %966, 0, !dbg !1411, !psr.id !1427, !verifier.code !63 */
  $i968 := $extractvalue.i64($p965, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %969, i64* %968, align 16, !dbg !1411, !psr.id !1428, !verifier.code !63 */
  $M.553 := $store.i64($M.553, $p967, $i968);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %970 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %967, i32 0, i32 1, !dbg !1411, !psr.id !1429, !verifier.code !63 */
  $p969 := $add.ref($add.ref($p966, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %971 = extractvalue { i64, i64 } %966, 1, !dbg !1411, !psr.id !1430, !verifier.code !63 */
  $i970 := $extractvalue.i64($p965, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %971, i64* %970, align 8, !dbg !1411, !psr.id !1431, !verifier.code !63 */
  $M.553 := $store.i64($M.553, $p969, $i970);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  /* %972 = load i128, i128* %114, align 16, !dbg !1411, !psr.id !1432, !verifier.code !63 */
  $i971 := $load.i128($M.553, $p113);
  /* call void @llvm.dbg.value(metadata i128 %972, metadata !8140, metadata !DIExpression()), !dbg !7022, !psr.id !8141, !verifier.code !64 */
  call {:cexpr "o41"} boogie_si_record_i128($i971);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %973 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %280, i64 %301), !dbg !1435, !psr.id !1436, !ValueTainted !325, !verifier.code !63 */
  call $p972 := FStar_UInt128_mul_wide($i279, $i300);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  /* %974 = bitcast i128* %115 to { i64, i64 }*, !dbg !1435, !psr.id !1437, !verifier.code !63 */
  $p973 := $bitcast.ref.ref($p114);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  /* %975 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %974, i32 0, i32 0, !dbg !1435, !psr.id !1438, !verifier.code !63 */
  $p974 := $add.ref($add.ref($p973, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  /* %976 = extractvalue { i64, i64 } %973, 0, !dbg !1435, !psr.id !1439, !verifier.code !63 */
  $i975 := $extractvalue.i64($p972, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %976, i64* %975, align 16, !dbg !1435, !psr.id !1440, !verifier.code !63 */
  $M.554 := $store.i64($M.554, $p974, $i975);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  /* %977 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %974, i32 0, i32 1, !dbg !1435, !psr.id !1441, !verifier.code !63 */
  $p976 := $add.ref($add.ref($p973, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  /* %978 = extractvalue { i64, i64 } %973, 1, !dbg !1435, !psr.id !1442, !verifier.code !63 */
  $i977 := $extractvalue.i64($p972, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %978, i64* %977, align 8, !dbg !1435, !psr.id !1443, !verifier.code !63 */
  $M.554 := $store.i64($M.554, $p976, $i977);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  /* %979 = load i128, i128* %115, align 16, !dbg !1435, !psr.id !1444, !verifier.code !63 */
  $i978 := $load.i128($M.554, $p114);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %876, i128* %116, align 16, !dbg !1445, !psr.id !1446, !verifier.code !63 */
  $M.555 := $store.i128($M.555, $p115, $i875);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %980 = bitcast i128* %116 to { i64, i64 }*, !dbg !1445, !psr.id !1447, !verifier.code !63 */
  $p979 := $bitcast.ref.ref($p115);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %981 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %980, i32 0, i32 0, !dbg !1445, !psr.id !1448, !verifier.code !63 */
  $p980 := $add.ref($add.ref($p979, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %982 = load i64, i64* %981, align 16, !dbg !1445, !psr.id !1449, !verifier.code !63 */
  $i981 := $load.i64($M.555, $p980);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %983 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %980, i32 0, i32 1, !dbg !1445, !psr.id !1450, !verifier.code !63 */
  $p982 := $add.ref($add.ref($p979, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %984 = load i64, i64* %983, align 8, !dbg !1445, !psr.id !1451, !verifier.code !63 */
  $i983 := $load.i64($M.555, $p982);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %979, i128* %117, align 16, !dbg !1445, !psr.id !1452, !verifier.code !63 */
  $M.556 := $store.i128($M.556, $p116, $i978);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %985 = bitcast i128* %117 to { i64, i64 }*, !dbg !1445, !psr.id !1453, !verifier.code !63 */
  $p984 := $bitcast.ref.ref($p116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %986 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %985, i32 0, i32 0, !dbg !1445, !psr.id !1454, !verifier.code !63 */
  $p985 := $add.ref($add.ref($p984, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %987 = load i64, i64* %986, align 16, !dbg !1445, !psr.id !1455, !verifier.code !63 */
  $i986 := $load.i64($M.556, $p985);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %988 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %985, i32 0, i32 1, !dbg !1445, !psr.id !1456, !verifier.code !63 */
  $p987 := $add.ref($add.ref($p984, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %989 = load i64, i64* %988, align 8, !dbg !1445, !psr.id !1457, !verifier.code !63 */
  $i988 := $load.i64($M.556, $p987);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %990 = call { i64, i64 } @FStar_UInt128_add(i64 %982, i64 %984, i64 %987, i64 %989), !dbg !1445, !psr.id !1458, !verifier.code !63 */
  call $p989 := FStar_UInt128_add($i981, $i983, $i986, $i988);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %991 = bitcast i128* %118 to { i64, i64 }*, !dbg !1445, !psr.id !1459, !verifier.code !63 */
  $p990 := $bitcast.ref.ref($p117);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %992 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %991, i32 0, i32 0, !dbg !1445, !psr.id !1460, !verifier.code !63 */
  $p991 := $add.ref($add.ref($p990, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %993 = extractvalue { i64, i64 } %990, 0, !dbg !1445, !psr.id !1461, !verifier.code !63 */
  $i992 := $extractvalue.i64($p989, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %993, i64* %992, align 16, !dbg !1445, !psr.id !1462, !verifier.code !63 */
  $M.557 := $store.i64($M.557, $p991, $i992);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %994 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %991, i32 0, i32 1, !dbg !1445, !psr.id !1463, !verifier.code !63 */
  $p993 := $add.ref($add.ref($p990, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %995 = extractvalue { i64, i64 } %990, 1, !dbg !1445, !psr.id !1464, !verifier.code !63 */
  $i994 := $extractvalue.i64($p989, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %995, i64* %994, align 8, !dbg !1445, !psr.id !1465, !verifier.code !63 */
  $M.557 := $store.i64($M.557, $p993, $i994);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  /* %996 = load i128, i128* %118, align 16, !dbg !1445, !psr.id !1466, !verifier.code !63 */
  $i995 := $load.i128($M.557, $p117);
  /* call void @llvm.dbg.value(metadata i128 %996, metadata !8174, metadata !DIExpression()), !dbg !7022, !psr.id !8175, !verifier.code !64 */
  call {:cexpr "o02"} boogie_si_record_i128($i995);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %997 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %280, i64 %302), !dbg !1469, !psr.id !1470, !ValueTainted !325, !verifier.code !63 */
  call $p996 := FStar_UInt128_mul_wide($i279, $i301);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  /* %998 = bitcast i128* %119 to { i64, i64 }*, !dbg !1469, !psr.id !1471, !verifier.code !63 */
  $p997 := $bitcast.ref.ref($p118);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  /* %999 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %998, i32 0, i32 0, !dbg !1469, !psr.id !1472, !verifier.code !63 */
  $p998 := $add.ref($add.ref($p997, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  /* %1000 = extractvalue { i64, i64 } %997, 0, !dbg !1469, !psr.id !1473, !verifier.code !63 */
  $i999 := $extractvalue.i64($p996, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %1000, i64* %999, align 16, !dbg !1469, !psr.id !1474, !verifier.code !63 */
  $M.558 := $store.i64($M.558, $p998, $i999);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  /* %1001 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %998, i32 0, i32 1, !dbg !1469, !psr.id !1475, !verifier.code !63 */
  $p1000 := $add.ref($add.ref($p997, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  /* %1002 = extractvalue { i64, i64 } %997, 1, !dbg !1469, !psr.id !1476, !verifier.code !63 */
  $i1001 := $extractvalue.i64($p996, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %1002, i64* %1001, align 8, !dbg !1469, !psr.id !1477, !verifier.code !63 */
  $M.558 := $store.i64($M.558, $p1000, $i1001);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  /* %1003 = load i128, i128* %119, align 16, !dbg !1469, !psr.id !1478, !verifier.code !63 */
  $i1002 := $load.i128($M.558, $p118);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %900, i128* %120, align 16, !dbg !1479, !psr.id !1480, !verifier.code !63 */
  $M.559 := $store.i128($M.559, $p119, $i899);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1004 = bitcast i128* %120 to { i64, i64 }*, !dbg !1479, !psr.id !1481, !verifier.code !63 */
  $p1003 := $bitcast.ref.ref($p119);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1005 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1004, i32 0, i32 0, !dbg !1479, !psr.id !1482, !verifier.code !63 */
  $p1004 := $add.ref($add.ref($p1003, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1006 = load i64, i64* %1005, align 16, !dbg !1479, !psr.id !1483, !verifier.code !63 */
  $i1005 := $load.i64($M.559, $p1004);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1007 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1004, i32 0, i32 1, !dbg !1479, !psr.id !1484, !verifier.code !63 */
  $p1006 := $add.ref($add.ref($p1003, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1008 = load i64, i64* %1007, align 8, !dbg !1479, !psr.id !1485, !verifier.code !63 */
  $i1007 := $load.i64($M.559, $p1006);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %1003, i128* %121, align 16, !dbg !1479, !psr.id !1486, !verifier.code !63 */
  $M.560 := $store.i128($M.560, $p120, $i1002);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1009 = bitcast i128* %121 to { i64, i64 }*, !dbg !1479, !psr.id !1487, !verifier.code !63 */
  $p1008 := $bitcast.ref.ref($p120);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1010 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1009, i32 0, i32 0, !dbg !1479, !psr.id !1488, !verifier.code !63 */
  $p1009 := $add.ref($add.ref($p1008, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1011 = load i64, i64* %1010, align 16, !dbg !1479, !psr.id !1489, !verifier.code !63 */
  $i1010 := $load.i64($M.560, $p1009);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1012 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1009, i32 0, i32 1, !dbg !1479, !psr.id !1490, !verifier.code !63 */
  $p1011 := $add.ref($add.ref($p1008, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1013 = load i64, i64* %1012, align 8, !dbg !1479, !psr.id !1491, !verifier.code !63 */
  $i1012 := $load.i64($M.560, $p1011);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1014 = call { i64, i64 } @FStar_UInt128_add(i64 %1006, i64 %1008, i64 %1011, i64 %1013), !dbg !1479, !psr.id !1492, !verifier.code !63 */
  call $p1013 := FStar_UInt128_add($i1005, $i1007, $i1010, $i1012);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1015 = bitcast i128* %122 to { i64, i64 }*, !dbg !1479, !psr.id !1493, !verifier.code !63 */
  $p1014 := $bitcast.ref.ref($p121);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1016 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1015, i32 0, i32 0, !dbg !1479, !psr.id !1494, !verifier.code !63 */
  $p1015 := $add.ref($add.ref($p1014, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1017 = extractvalue { i64, i64 } %1014, 0, !dbg !1479, !psr.id !1495, !verifier.code !63 */
  $i1016 := $extractvalue.i64($p1013, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %1017, i64* %1016, align 16, !dbg !1479, !psr.id !1496, !verifier.code !63 */
  $M.561 := $store.i64($M.561, $p1015, $i1016);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1018 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1015, i32 0, i32 1, !dbg !1479, !psr.id !1497, !verifier.code !63 */
  $p1017 := $add.ref($add.ref($p1014, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1019 = extractvalue { i64, i64 } %1014, 1, !dbg !1479, !psr.id !1498, !verifier.code !63 */
  $i1018 := $extractvalue.i64($p1013, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %1019, i64* %1018, align 8, !dbg !1479, !psr.id !1499, !verifier.code !63 */
  $M.561 := $store.i64($M.561, $p1017, $i1018);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  /* %1020 = load i128, i128* %122, align 16, !dbg !1479, !psr.id !1500, !verifier.code !63 */
  $i1019 := $load.i128($M.561, $p121);
  /* call void @llvm.dbg.value(metadata i128 %1020, metadata !8208, metadata !DIExpression()), !dbg !7022, !psr.id !8209, !verifier.code !64 */
  call {:cexpr "o121"} boogie_si_record_i128($i1019);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1021 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %280, i64 %286), !dbg !1503, !psr.id !1504, !ValueTainted !325, !verifier.code !63 */
  call $p1020 := FStar_UInt128_mul_wide($i279, $i285);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  /* %1022 = bitcast i128* %123 to { i64, i64 }*, !dbg !1503, !psr.id !1505, !verifier.code !63 */
  $p1021 := $bitcast.ref.ref($p122);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  /* %1023 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1022, i32 0, i32 0, !dbg !1503, !psr.id !1506, !verifier.code !63 */
  $p1022 := $add.ref($add.ref($p1021, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  /* %1024 = extractvalue { i64, i64 } %1021, 0, !dbg !1503, !psr.id !1507, !verifier.code !63 */
  $i1023 := $extractvalue.i64($p1020, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %1024, i64* %1023, align 16, !dbg !1503, !psr.id !1508, !verifier.code !63 */
  $M.562 := $store.i64($M.562, $p1022, $i1023);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  /* %1025 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1022, i32 0, i32 1, !dbg !1503, !psr.id !1509, !verifier.code !63 */
  $p1024 := $add.ref($add.ref($p1021, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  /* %1026 = extractvalue { i64, i64 } %1021, 1, !dbg !1503, !psr.id !1510, !verifier.code !63 */
  $i1025 := $extractvalue.i64($p1020, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %1026, i64* %1025, align 8, !dbg !1503, !psr.id !1511, !verifier.code !63 */
  $M.562 := $store.i64($M.562, $p1024, $i1025);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  /* %1027 = load i128, i128* %123, align 16, !dbg !1503, !psr.id !1512, !verifier.code !63 */
  $i1026 := $load.i128($M.562, $p122);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %924, i128* %124, align 16, !dbg !1513, !psr.id !1514, !verifier.code !63 */
  $M.563 := $store.i128($M.563, $p123, $i923);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1028 = bitcast i128* %124 to { i64, i64 }*, !dbg !1513, !psr.id !1515, !verifier.code !63 */
  $p1027 := $bitcast.ref.ref($p123);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1029 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1028, i32 0, i32 0, !dbg !1513, !psr.id !1516, !verifier.code !63 */
  $p1028 := $add.ref($add.ref($p1027, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1030 = load i64, i64* %1029, align 16, !dbg !1513, !psr.id !1517, !verifier.code !63 */
  $i1029 := $load.i64($M.563, $p1028);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1031 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1028, i32 0, i32 1, !dbg !1513, !psr.id !1518, !verifier.code !63 */
  $p1030 := $add.ref($add.ref($p1027, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1032 = load i64, i64* %1031, align 8, !dbg !1513, !psr.id !1519, !verifier.code !63 */
  $i1031 := $load.i64($M.563, $p1030);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %1027, i128* %125, align 16, !dbg !1513, !psr.id !1520, !verifier.code !63 */
  $M.564 := $store.i128($M.564, $p124, $i1026);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1033 = bitcast i128* %125 to { i64, i64 }*, !dbg !1513, !psr.id !1521, !verifier.code !63 */
  $p1032 := $bitcast.ref.ref($p124);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1034 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1033, i32 0, i32 0, !dbg !1513, !psr.id !1522, !verifier.code !63 */
  $p1033 := $add.ref($add.ref($p1032, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1035 = load i64, i64* %1034, align 16, !dbg !1513, !psr.id !1523, !verifier.code !63 */
  $i1034 := $load.i64($M.564, $p1033);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1036 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1033, i32 0, i32 1, !dbg !1513, !psr.id !1524, !verifier.code !63 */
  $p1035 := $add.ref($add.ref($p1032, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1037 = load i64, i64* %1036, align 8, !dbg !1513, !psr.id !1525, !verifier.code !63 */
  $i1036 := $load.i64($M.564, $p1035);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1038 = call { i64, i64 } @FStar_UInt128_add(i64 %1030, i64 %1032, i64 %1035, i64 %1037), !dbg !1513, !psr.id !1526, !verifier.code !63 */
  call $p1037 := FStar_UInt128_add($i1029, $i1031, $i1034, $i1036);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1039 = bitcast i128* %126 to { i64, i64 }*, !dbg !1513, !psr.id !1527, !verifier.code !63 */
  $p1038 := $bitcast.ref.ref($p125);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1040 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1039, i32 0, i32 0, !dbg !1513, !psr.id !1528, !verifier.code !63 */
  $p1039 := $add.ref($add.ref($p1038, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1041 = extractvalue { i64, i64 } %1038, 0, !dbg !1513, !psr.id !1529, !verifier.code !63 */
  $i1040 := $extractvalue.i64($p1037, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %1041, i64* %1040, align 16, !dbg !1513, !psr.id !1530, !verifier.code !63 */
  $M.565 := $store.i64($M.565, $p1039, $i1040);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1042 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1039, i32 0, i32 1, !dbg !1513, !psr.id !1531, !verifier.code !63 */
  $p1041 := $add.ref($add.ref($p1038, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1043 = extractvalue { i64, i64 } %1038, 1, !dbg !1513, !psr.id !1532, !verifier.code !63 */
  $i1042 := $extractvalue.i64($p1037, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %1043, i64* %1042, align 8, !dbg !1513, !psr.id !1533, !verifier.code !63 */
  $M.565 := $store.i64($M.565, $p1041, $i1042);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  /* %1044 = load i128, i128* %126, align 16, !dbg !1513, !psr.id !1534, !verifier.code !63 */
  $i1043 := $load.i128($M.565, $p125);
  /* call void @llvm.dbg.value(metadata i128 %1044, metadata !8242, metadata !DIExpression()), !dbg !7022, !psr.id !8243, !verifier.code !64 */
  call {:cexpr "o221"} boogie_si_record_i128($i1043);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1045 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %280, i64 %288), !dbg !1537, !psr.id !1538, !ValueTainted !325, !verifier.code !63 */
  call $p1044 := FStar_UInt128_mul_wide($i279, $i287);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  /* %1046 = bitcast i128* %127 to { i64, i64 }*, !dbg !1537, !psr.id !1539, !verifier.code !63 */
  $p1045 := $bitcast.ref.ref($p126);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  /* %1047 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1046, i32 0, i32 0, !dbg !1537, !psr.id !1540, !verifier.code !63 */
  $p1046 := $add.ref($add.ref($p1045, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  /* %1048 = extractvalue { i64, i64 } %1045, 0, !dbg !1537, !psr.id !1541, !verifier.code !63 */
  $i1047 := $extractvalue.i64($p1044, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1048, i64* %1047, align 16, !dbg !1537, !psr.id !1542, !verifier.code !63 */
  $M.566 := $store.i64($M.566, $p1046, $i1047);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  /* %1049 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1046, i32 0, i32 1, !dbg !1537, !psr.id !1543, !verifier.code !63 */
  $p1048 := $add.ref($add.ref($p1045, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  /* %1050 = extractvalue { i64, i64 } %1045, 1, !dbg !1537, !psr.id !1544, !verifier.code !63 */
  $i1049 := $extractvalue.i64($p1044, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1050, i64* %1049, align 8, !dbg !1537, !psr.id !1545, !verifier.code !63 */
  $M.566 := $store.i64($M.566, $p1048, $i1049);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  /* %1051 = load i128, i128* %127, align 16, !dbg !1537, !psr.id !1546, !verifier.code !63 */
  $i1050 := $load.i128($M.566, $p126);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %948, i128* %128, align 16, !dbg !1547, !psr.id !1548, !verifier.code !63 */
  $M.567 := $store.i128($M.567, $p127, $i947);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1052 = bitcast i128* %128 to { i64, i64 }*, !dbg !1547, !psr.id !1549, !verifier.code !63 */
  $p1051 := $bitcast.ref.ref($p127);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1053 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1052, i32 0, i32 0, !dbg !1547, !psr.id !1550, !verifier.code !63 */
  $p1052 := $add.ref($add.ref($p1051, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1054 = load i64, i64* %1053, align 16, !dbg !1547, !psr.id !1551, !verifier.code !63 */
  $i1053 := $load.i64($M.567, $p1052);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1055 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1052, i32 0, i32 1, !dbg !1547, !psr.id !1552, !verifier.code !63 */
  $p1054 := $add.ref($add.ref($p1051, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1056 = load i64, i64* %1055, align 8, !dbg !1547, !psr.id !1553, !verifier.code !63 */
  $i1055 := $load.i64($M.567, $p1054);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1051, i128* %129, align 16, !dbg !1547, !psr.id !1554, !verifier.code !63 */
  $M.568 := $store.i128($M.568, $p128, $i1050);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1057 = bitcast i128* %129 to { i64, i64 }*, !dbg !1547, !psr.id !1555, !verifier.code !63 */
  $p1056 := $bitcast.ref.ref($p128);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1058 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1057, i32 0, i32 0, !dbg !1547, !psr.id !1556, !verifier.code !63 */
  $p1057 := $add.ref($add.ref($p1056, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1059 = load i64, i64* %1058, align 16, !dbg !1547, !psr.id !1557, !verifier.code !63 */
  $i1058 := $load.i64($M.568, $p1057);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1060 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1057, i32 0, i32 1, !dbg !1547, !psr.id !1558, !verifier.code !63 */
  $p1059 := $add.ref($add.ref($p1056, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1061 = load i64, i64* %1060, align 8, !dbg !1547, !psr.id !1559, !verifier.code !63 */
  $i1060 := $load.i64($M.568, $p1059);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1062 = call { i64, i64 } @FStar_UInt128_add(i64 %1054, i64 %1056, i64 %1059, i64 %1061), !dbg !1547, !psr.id !1560, !verifier.code !63 */
  call $p1061 := FStar_UInt128_add($i1053, $i1055, $i1058, $i1060);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1063 = bitcast i128* %130 to { i64, i64 }*, !dbg !1547, !psr.id !1561, !verifier.code !63 */
  $p1062 := $bitcast.ref.ref($p129);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1064 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1063, i32 0, i32 0, !dbg !1547, !psr.id !1562, !verifier.code !63 */
  $p1063 := $add.ref($add.ref($p1062, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1065 = extractvalue { i64, i64 } %1062, 0, !dbg !1547, !psr.id !1563, !verifier.code !63 */
  $i1064 := $extractvalue.i64($p1061, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1065, i64* %1064, align 16, !dbg !1547, !psr.id !1564, !verifier.code !63 */
  $M.569 := $store.i64($M.569, $p1063, $i1064);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1066 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1063, i32 0, i32 1, !dbg !1547, !psr.id !1565, !verifier.code !63 */
  $p1065 := $add.ref($add.ref($p1062, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1067 = extractvalue { i64, i64 } %1062, 1, !dbg !1547, !psr.id !1566, !verifier.code !63 */
  $i1066 := $extractvalue.i64($p1061, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1067, i64* %1066, align 8, !dbg !1547, !psr.id !1567, !verifier.code !63 */
  $M.569 := $store.i64($M.569, $p1065, $i1066);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  /* %1068 = load i128, i128* %130, align 16, !dbg !1547, !psr.id !1568, !verifier.code !63 */
  $i1067 := $load.i128($M.569, $p129);
  /* call void @llvm.dbg.value(metadata i128 %1068, metadata !8276, metadata !DIExpression()), !dbg !7022, !psr.id !8277, !verifier.code !64 */
  call {:cexpr "o32"} boogie_si_record_i128($i1067);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1069 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %280, i64 %290), !dbg !1571, !psr.id !1572, !ValueTainted !325, !verifier.code !63 */
  call $p1068 := FStar_UInt128_mul_wide($i279, $i289);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  /* %1070 = bitcast i128* %131 to { i64, i64 }*, !dbg !1571, !psr.id !1573, !verifier.code !63 */
  $p1069 := $bitcast.ref.ref($p130);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  /* %1071 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1070, i32 0, i32 0, !dbg !1571, !psr.id !1574, !verifier.code !63 */
  $p1070 := $add.ref($add.ref($p1069, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  /* %1072 = extractvalue { i64, i64 } %1069, 0, !dbg !1571, !psr.id !1575, !verifier.code !63 */
  $i1071 := $extractvalue.i64($p1068, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1072, i64* %1071, align 16, !dbg !1571, !psr.id !1576, !verifier.code !63 */
  $M.570 := $store.i64($M.570, $p1070, $i1071);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  /* %1073 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1070, i32 0, i32 1, !dbg !1571, !psr.id !1577, !verifier.code !63 */
  $p1072 := $add.ref($add.ref($p1069, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  /* %1074 = extractvalue { i64, i64 } %1069, 1, !dbg !1571, !psr.id !1578, !verifier.code !63 */
  $i1073 := $extractvalue.i64($p1068, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1074, i64* %1073, align 8, !dbg !1571, !psr.id !1579, !verifier.code !63 */
  $M.570 := $store.i64($M.570, $p1072, $i1073);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  /* %1075 = load i128, i128* %131, align 16, !dbg !1571, !psr.id !1580, !verifier.code !63 */
  $i1074 := $load.i128($M.570, $p130);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %972, i128* %132, align 16, !dbg !1581, !psr.id !1582, !verifier.code !63 */
  $M.571 := $store.i128($M.571, $p131, $i971);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1076 = bitcast i128* %132 to { i64, i64 }*, !dbg !1581, !psr.id !1583, !verifier.code !63 */
  $p1075 := $bitcast.ref.ref($p131);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1077 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1076, i32 0, i32 0, !dbg !1581, !psr.id !1584, !verifier.code !63 */
  $p1076 := $add.ref($add.ref($p1075, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1078 = load i64, i64* %1077, align 16, !dbg !1581, !psr.id !1585, !verifier.code !63 */
  $i1077 := $load.i64($M.571, $p1076);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1079 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1076, i32 0, i32 1, !dbg !1581, !psr.id !1586, !verifier.code !63 */
  $p1078 := $add.ref($add.ref($p1075, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1080 = load i64, i64* %1079, align 8, !dbg !1581, !psr.id !1587, !verifier.code !63 */
  $i1079 := $load.i64($M.571, $p1078);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1075, i128* %133, align 16, !dbg !1581, !psr.id !1588, !verifier.code !63 */
  $M.572 := $store.i128($M.572, $p132, $i1074);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1081 = bitcast i128* %133 to { i64, i64 }*, !dbg !1581, !psr.id !1589, !verifier.code !63 */
  $p1080 := $bitcast.ref.ref($p132);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1082 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1081, i32 0, i32 0, !dbg !1581, !psr.id !1590, !verifier.code !63 */
  $p1081 := $add.ref($add.ref($p1080, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1083 = load i64, i64* %1082, align 16, !dbg !1581, !psr.id !1591, !verifier.code !63 */
  $i1082 := $load.i64($M.572, $p1081);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1084 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1081, i32 0, i32 1, !dbg !1581, !psr.id !1592, !verifier.code !63 */
  $p1083 := $add.ref($add.ref($p1080, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1085 = load i64, i64* %1084, align 8, !dbg !1581, !psr.id !1593, !verifier.code !63 */
  $i1084 := $load.i64($M.572, $p1083);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1086 = call { i64, i64 } @FStar_UInt128_add(i64 %1078, i64 %1080, i64 %1083, i64 %1085), !dbg !1581, !psr.id !1594, !verifier.code !63 */
  call $p1085 := FStar_UInt128_add($i1077, $i1079, $i1082, $i1084);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1087 = bitcast i128* %134 to { i64, i64 }*, !dbg !1581, !psr.id !1595, !verifier.code !63 */
  $p1086 := $bitcast.ref.ref($p133);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1088 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1087, i32 0, i32 0, !dbg !1581, !psr.id !1596, !verifier.code !63 */
  $p1087 := $add.ref($add.ref($p1086, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1089 = extractvalue { i64, i64 } %1086, 0, !dbg !1581, !psr.id !1597, !verifier.code !63 */
  $i1088 := $extractvalue.i64($p1085, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1089, i64* %1088, align 16, !dbg !1581, !psr.id !1598, !verifier.code !63 */
  $M.573 := $store.i64($M.573, $p1087, $i1088);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1090 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1087, i32 0, i32 1, !dbg !1581, !psr.id !1599, !verifier.code !63 */
  $p1089 := $add.ref($add.ref($p1086, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1091 = extractvalue { i64, i64 } %1086, 1, !dbg !1581, !psr.id !1600, !verifier.code !63 */
  $i1090 := $extractvalue.i64($p1085, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1091, i64* %1090, align 8, !dbg !1581, !psr.id !1601, !verifier.code !63 */
  $M.573 := $store.i64($M.573, $p1089, $i1090);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  /* %1092 = load i128, i128* %134, align 16, !dbg !1581, !psr.id !1602, !verifier.code !63 */
  $i1091 := $load.i128($M.573, $p133);
  /* call void @llvm.dbg.value(metadata i128 %1092, metadata !8310, metadata !DIExpression()), !dbg !7022, !psr.id !8311, !verifier.code !64 */
  call {:cexpr "o42"} boogie_si_record_i128($i1091);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1093 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %282, i64 %300), !dbg !1605, !psr.id !1606, !ValueTainted !325, !verifier.code !63 */
  call $p1092 := FStar_UInt128_mul_wide($i281, $i299);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  /* %1094 = bitcast i128* %135 to { i64, i64 }*, !dbg !1605, !psr.id !1607, !verifier.code !63 */
  $p1093 := $bitcast.ref.ref($p134);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  /* %1095 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1094, i32 0, i32 0, !dbg !1605, !psr.id !1608, !verifier.code !63 */
  $p1094 := $add.ref($add.ref($p1093, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  /* %1096 = extractvalue { i64, i64 } %1093, 0, !dbg !1605, !psr.id !1609, !verifier.code !63 */
  $i1095 := $extractvalue.i64($p1092, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1096, i64* %1095, align 16, !dbg !1605, !psr.id !1610, !verifier.code !63 */
  $M.574 := $store.i64($M.574, $p1094, $i1095);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  /* %1097 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1094, i32 0, i32 1, !dbg !1605, !psr.id !1611, !verifier.code !63 */
  $p1096 := $add.ref($add.ref($p1093, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  /* %1098 = extractvalue { i64, i64 } %1093, 1, !dbg !1605, !psr.id !1612, !verifier.code !63 */
  $i1097 := $extractvalue.i64($p1092, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1098, i64* %1097, align 8, !dbg !1605, !psr.id !1613, !verifier.code !63 */
  $M.574 := $store.i64($M.574, $p1096, $i1097);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  /* %1099 = load i128, i128* %135, align 16, !dbg !1605, !psr.id !1614, !verifier.code !63 */
  $i1098 := $load.i128($M.574, $p134);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %996, i128* %136, align 16, !dbg !1615, !psr.id !1616, !verifier.code !63 */
  $M.575 := $store.i128($M.575, $p135, $i995);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1100 = bitcast i128* %136 to { i64, i64 }*, !dbg !1615, !psr.id !1617, !verifier.code !63 */
  $p1099 := $bitcast.ref.ref($p135);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1101 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1100, i32 0, i32 0, !dbg !1615, !psr.id !1618, !verifier.code !63 */
  $p1100 := $add.ref($add.ref($p1099, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1102 = load i64, i64* %1101, align 16, !dbg !1615, !psr.id !1619, !verifier.code !63 */
  $i1101 := $load.i64($M.575, $p1100);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1103 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1100, i32 0, i32 1, !dbg !1615, !psr.id !1620, !verifier.code !63 */
  $p1102 := $add.ref($add.ref($p1099, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1104 = load i64, i64* %1103, align 8, !dbg !1615, !psr.id !1621, !verifier.code !63 */
  $i1103 := $load.i64($M.575, $p1102);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1099, i128* %137, align 16, !dbg !1615, !psr.id !1622, !verifier.code !63 */
  $M.576 := $store.i128($M.576, $p136, $i1098);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1105 = bitcast i128* %137 to { i64, i64 }*, !dbg !1615, !psr.id !1623, !verifier.code !63 */
  $p1104 := $bitcast.ref.ref($p136);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1106 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1105, i32 0, i32 0, !dbg !1615, !psr.id !1624, !verifier.code !63 */
  $p1105 := $add.ref($add.ref($p1104, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1107 = load i64, i64* %1106, align 16, !dbg !1615, !psr.id !1625, !verifier.code !63 */
  $i1106 := $load.i64($M.576, $p1105);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1108 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1105, i32 0, i32 1, !dbg !1615, !psr.id !1626, !verifier.code !63 */
  $p1107 := $add.ref($add.ref($p1104, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1109 = load i64, i64* %1108, align 8, !dbg !1615, !psr.id !1627, !verifier.code !63 */
  $i1108 := $load.i64($M.576, $p1107);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1110 = call { i64, i64 } @FStar_UInt128_add(i64 %1102, i64 %1104, i64 %1107, i64 %1109), !dbg !1615, !psr.id !1628, !verifier.code !63 */
  call $p1109 := FStar_UInt128_add($i1101, $i1103, $i1106, $i1108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1111 = bitcast i128* %138 to { i64, i64 }*, !dbg !1615, !psr.id !1629, !verifier.code !63 */
  $p1110 := $bitcast.ref.ref($p137);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1112 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1111, i32 0, i32 0, !dbg !1615, !psr.id !1630, !verifier.code !63 */
  $p1111 := $add.ref($add.ref($p1110, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1113 = extractvalue { i64, i64 } %1110, 0, !dbg !1615, !psr.id !1631, !verifier.code !63 */
  $i1112 := $extractvalue.i64($p1109, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1113, i64* %1112, align 16, !dbg !1615, !psr.id !1632, !verifier.code !63 */
  $M.577 := $store.i64($M.577, $p1111, $i1112);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1114 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1111, i32 0, i32 1, !dbg !1615, !psr.id !1633, !verifier.code !63 */
  $p1113 := $add.ref($add.ref($p1110, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1115 = extractvalue { i64, i64 } %1110, 1, !dbg !1615, !psr.id !1634, !verifier.code !63 */
  $i1114 := $extractvalue.i64($p1109, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1115, i64* %1114, align 8, !dbg !1615, !psr.id !1635, !verifier.code !63 */
  $M.577 := $store.i64($M.577, $p1113, $i1114);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  /* %1116 = load i128, i128* %138, align 16, !dbg !1615, !psr.id !1636, !verifier.code !63 */
  $i1115 := $load.i128($M.577, $p137);
  /* call void @llvm.dbg.value(metadata i128 %1116, metadata !8344, metadata !DIExpression()), !dbg !7022, !psr.id !8345, !verifier.code !64 */
  call {:cexpr "o03"} boogie_si_record_i128($i1115);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1117 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %282, i64 %301), !dbg !1639, !psr.id !1640, !ValueTainted !325, !verifier.code !63 */
  call $p1116 := FStar_UInt128_mul_wide($i281, $i300);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  /* %1118 = bitcast i128* %139 to { i64, i64 }*, !dbg !1639, !psr.id !1641, !verifier.code !63 */
  $p1117 := $bitcast.ref.ref($p138);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  /* %1119 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1118, i32 0, i32 0, !dbg !1639, !psr.id !1642, !verifier.code !63 */
  $p1118 := $add.ref($add.ref($p1117, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  /* %1120 = extractvalue { i64, i64 } %1117, 0, !dbg !1639, !psr.id !1643, !verifier.code !63 */
  $i1119 := $extractvalue.i64($p1116, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %1120, i64* %1119, align 16, !dbg !1639, !psr.id !1644, !verifier.code !63 */
  $M.578 := $store.i64($M.578, $p1118, $i1119);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  /* %1121 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1118, i32 0, i32 1, !dbg !1639, !psr.id !1645, !verifier.code !63 */
  $p1120 := $add.ref($add.ref($p1117, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  /* %1122 = extractvalue { i64, i64 } %1117, 1, !dbg !1639, !psr.id !1646, !verifier.code !63 */
  $i1121 := $extractvalue.i64($p1116, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %1122, i64* %1121, align 8, !dbg !1639, !psr.id !1647, !verifier.code !63 */
  $M.578 := $store.i64($M.578, $p1120, $i1121);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  /* %1123 = load i128, i128* %139, align 16, !dbg !1639, !psr.id !1648, !verifier.code !63 */
  $i1122 := $load.i128($M.578, $p138);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %1020, i128* %140, align 16, !dbg !1649, !psr.id !1650, !verifier.code !63 */
  $M.579 := $store.i128($M.579, $p139, $i1019);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1124 = bitcast i128* %140 to { i64, i64 }*, !dbg !1649, !psr.id !1651, !verifier.code !63 */
  $p1123 := $bitcast.ref.ref($p139);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1125 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1124, i32 0, i32 0, !dbg !1649, !psr.id !1652, !verifier.code !63 */
  $p1124 := $add.ref($add.ref($p1123, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1126 = load i64, i64* %1125, align 16, !dbg !1649, !psr.id !1653, !verifier.code !63 */
  $i1125 := $load.i64($M.579, $p1124);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1127 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1124, i32 0, i32 1, !dbg !1649, !psr.id !1654, !verifier.code !63 */
  $p1126 := $add.ref($add.ref($p1123, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1128 = load i64, i64* %1127, align 8, !dbg !1649, !psr.id !1655, !verifier.code !63 */
  $i1127 := $load.i64($M.579, $p1126);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %1123, i128* %141, align 16, !dbg !1649, !psr.id !1656, !verifier.code !63 */
  $M.580 := $store.i128($M.580, $p140, $i1122);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1129 = bitcast i128* %141 to { i64, i64 }*, !dbg !1649, !psr.id !1657, !verifier.code !63 */
  $p1128 := $bitcast.ref.ref($p140);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1130 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1129, i32 0, i32 0, !dbg !1649, !psr.id !1658, !verifier.code !63 */
  $p1129 := $add.ref($add.ref($p1128, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1131 = load i64, i64* %1130, align 16, !dbg !1649, !psr.id !1659, !verifier.code !63 */
  $i1130 := $load.i64($M.580, $p1129);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1132 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1129, i32 0, i32 1, !dbg !1649, !psr.id !1660, !verifier.code !63 */
  $p1131 := $add.ref($add.ref($p1128, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1133 = load i64, i64* %1132, align 8, !dbg !1649, !psr.id !1661, !verifier.code !63 */
  $i1132 := $load.i64($M.580, $p1131);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1134 = call { i64, i64 } @FStar_UInt128_add(i64 %1126, i64 %1128, i64 %1131, i64 %1133), !dbg !1649, !psr.id !1662, !verifier.code !63 */
  call $p1133 := FStar_UInt128_add($i1125, $i1127, $i1130, $i1132);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1135 = bitcast i128* %142 to { i64, i64 }*, !dbg !1649, !psr.id !1663, !verifier.code !63 */
  $p1134 := $bitcast.ref.ref($p141);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1136 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1135, i32 0, i32 0, !dbg !1649, !psr.id !1664, !verifier.code !63 */
  $p1135 := $add.ref($add.ref($p1134, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1137 = extractvalue { i64, i64 } %1134, 0, !dbg !1649, !psr.id !1665, !verifier.code !63 */
  $i1136 := $extractvalue.i64($p1133, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %1137, i64* %1136, align 16, !dbg !1649, !psr.id !1666, !verifier.code !63 */
  $M.581 := $store.i64($M.581, $p1135, $i1136);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1138 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1135, i32 0, i32 1, !dbg !1649, !psr.id !1667, !verifier.code !63 */
  $p1137 := $add.ref($add.ref($p1134, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1139 = extractvalue { i64, i64 } %1134, 1, !dbg !1649, !psr.id !1668, !verifier.code !63 */
  $i1138 := $extractvalue.i64($p1133, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %1139, i64* %1138, align 8, !dbg !1649, !psr.id !1669, !verifier.code !63 */
  $M.581 := $store.i64($M.581, $p1137, $i1138);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  /* %1140 = load i128, i128* %142, align 16, !dbg !1649, !psr.id !1670, !verifier.code !63 */
  $i1139 := $load.i128($M.581, $p141);
  /* call void @llvm.dbg.value(metadata i128 %1140, metadata !8378, metadata !DIExpression()), !dbg !7022, !psr.id !8379, !verifier.code !64 */
  call {:cexpr "o131"} boogie_si_record_i128($i1139);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1141 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %282, i64 %302), !dbg !1673, !psr.id !1674, !ValueTainted !325, !verifier.code !63 */
  call $p1140 := FStar_UInt128_mul_wide($i281, $i301);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  /* %1142 = bitcast i128* %143 to { i64, i64 }*, !dbg !1673, !psr.id !1675, !verifier.code !63 */
  $p1141 := $bitcast.ref.ref($p142);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  /* %1143 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1142, i32 0, i32 0, !dbg !1673, !psr.id !1676, !verifier.code !63 */
  $p1142 := $add.ref($add.ref($p1141, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  /* %1144 = extractvalue { i64, i64 } %1141, 0, !dbg !1673, !psr.id !1677, !verifier.code !63 */
  $i1143 := $extractvalue.i64($p1140, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %1144, i64* %1143, align 16, !dbg !1673, !psr.id !1678, !verifier.code !63 */
  $M.582 := $store.i64($M.582, $p1142, $i1143);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  /* %1145 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1142, i32 0, i32 1, !dbg !1673, !psr.id !1679, !verifier.code !63 */
  $p1144 := $add.ref($add.ref($p1141, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  /* %1146 = extractvalue { i64, i64 } %1141, 1, !dbg !1673, !psr.id !1680, !verifier.code !63 */
  $i1145 := $extractvalue.i64($p1140, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %1146, i64* %1145, align 8, !dbg !1673, !psr.id !1681, !verifier.code !63 */
  $M.582 := $store.i64($M.582, $p1144, $i1145);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  /* %1147 = load i128, i128* %143, align 16, !dbg !1673, !psr.id !1682, !verifier.code !63 */
  $i1146 := $load.i128($M.582, $p142);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %1044, i128* %144, align 16, !dbg !1683, !psr.id !1684, !verifier.code !63 */
  $M.583 := $store.i128($M.583, $p143, $i1043);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1148 = bitcast i128* %144 to { i64, i64 }*, !dbg !1683, !psr.id !1685, !verifier.code !63 */
  $p1147 := $bitcast.ref.ref($p143);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1149 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1148, i32 0, i32 0, !dbg !1683, !psr.id !1686, !verifier.code !63 */
  $p1148 := $add.ref($add.ref($p1147, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1150 = load i64, i64* %1149, align 16, !dbg !1683, !psr.id !1687, !verifier.code !63 */
  $i1149 := $load.i64($M.583, $p1148);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1151 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1148, i32 0, i32 1, !dbg !1683, !psr.id !1688, !verifier.code !63 */
  $p1150 := $add.ref($add.ref($p1147, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1152 = load i64, i64* %1151, align 8, !dbg !1683, !psr.id !1689, !verifier.code !63 */
  $i1151 := $load.i64($M.583, $p1150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %1147, i128* %145, align 16, !dbg !1683, !psr.id !1690, !verifier.code !63 */
  $M.584 := $store.i128($M.584, $p144, $i1146);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1153 = bitcast i128* %145 to { i64, i64 }*, !dbg !1683, !psr.id !1691, !verifier.code !63 */
  $p1152 := $bitcast.ref.ref($p144);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1154 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1153, i32 0, i32 0, !dbg !1683, !psr.id !1692, !verifier.code !63 */
  $p1153 := $add.ref($add.ref($p1152, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1155 = load i64, i64* %1154, align 16, !dbg !1683, !psr.id !1693, !verifier.code !63 */
  $i1154 := $load.i64($M.584, $p1153);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1156 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1153, i32 0, i32 1, !dbg !1683, !psr.id !1694, !verifier.code !63 */
  $p1155 := $add.ref($add.ref($p1152, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1157 = load i64, i64* %1156, align 8, !dbg !1683, !psr.id !1695, !verifier.code !63 */
  $i1156 := $load.i64($M.584, $p1155);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1158 = call { i64, i64 } @FStar_UInt128_add(i64 %1150, i64 %1152, i64 %1155, i64 %1157), !dbg !1683, !psr.id !1696, !verifier.code !63 */
  call $p1157 := FStar_UInt128_add($i1149, $i1151, $i1154, $i1156);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1159 = bitcast i128* %146 to { i64, i64 }*, !dbg !1683, !psr.id !1697, !verifier.code !63 */
  $p1158 := $bitcast.ref.ref($p145);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1160 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1159, i32 0, i32 0, !dbg !1683, !psr.id !1698, !verifier.code !63 */
  $p1159 := $add.ref($add.ref($p1158, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1161 = extractvalue { i64, i64 } %1158, 0, !dbg !1683, !psr.id !1699, !verifier.code !63 */
  $i1160 := $extractvalue.i64($p1157, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %1161, i64* %1160, align 16, !dbg !1683, !psr.id !1700, !verifier.code !63 */
  $M.585 := $store.i64($M.585, $p1159, $i1160);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1162 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1159, i32 0, i32 1, !dbg !1683, !psr.id !1701, !verifier.code !63 */
  $p1161 := $add.ref($add.ref($p1158, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1163 = extractvalue { i64, i64 } %1158, 1, !dbg !1683, !psr.id !1702, !verifier.code !63 */
  $i1162 := $extractvalue.i64($p1157, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %1163, i64* %1162, align 8, !dbg !1683, !psr.id !1703, !verifier.code !63 */
  $M.585 := $store.i64($M.585, $p1161, $i1162);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  /* %1164 = load i128, i128* %146, align 16, !dbg !1683, !psr.id !1704, !verifier.code !63 */
  $i1163 := $load.i128($M.585, $p145);
  /* call void @llvm.dbg.value(metadata i128 %1164, metadata !8412, metadata !DIExpression()), !dbg !7022, !psr.id !8413, !verifier.code !64 */
  call {:cexpr "o231"} boogie_si_record_i128($i1163);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1165 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %282, i64 %286), !dbg !1707, !psr.id !1708, !ValueTainted !325, !verifier.code !63 */
  call $p1164 := FStar_UInt128_mul_wide($i281, $i285);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  /* %1166 = bitcast i128* %147 to { i64, i64 }*, !dbg !1707, !psr.id !1709, !verifier.code !63 */
  $p1165 := $bitcast.ref.ref($p146);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  /* %1167 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1166, i32 0, i32 0, !dbg !1707, !psr.id !1710, !verifier.code !63 */
  $p1166 := $add.ref($add.ref($p1165, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  /* %1168 = extractvalue { i64, i64 } %1165, 0, !dbg !1707, !psr.id !1711, !verifier.code !63 */
  $i1167 := $extractvalue.i64($p1164, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1168, i64* %1167, align 16, !dbg !1707, !psr.id !1712, !verifier.code !63 */
  $M.586 := $store.i64($M.586, $p1166, $i1167);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  /* %1169 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1166, i32 0, i32 1, !dbg !1707, !psr.id !1713, !verifier.code !63 */
  $p1168 := $add.ref($add.ref($p1165, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  /* %1170 = extractvalue { i64, i64 } %1165, 1, !dbg !1707, !psr.id !1714, !verifier.code !63 */
  $i1169 := $extractvalue.i64($p1164, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1170, i64* %1169, align 8, !dbg !1707, !psr.id !1715, !verifier.code !63 */
  $M.586 := $store.i64($M.586, $p1168, $i1169);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  /* %1171 = load i128, i128* %147, align 16, !dbg !1707, !psr.id !1716, !verifier.code !63 */
  $i1170 := $load.i128($M.586, $p146);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1068, i128* %148, align 16, !dbg !1717, !psr.id !1718, !verifier.code !63 */
  $M.587 := $store.i128($M.587, $p147, $i1067);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1172 = bitcast i128* %148 to { i64, i64 }*, !dbg !1717, !psr.id !1719, !verifier.code !63 */
  $p1171 := $bitcast.ref.ref($p147);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1173 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1172, i32 0, i32 0, !dbg !1717, !psr.id !1720, !verifier.code !63 */
  $p1172 := $add.ref($add.ref($p1171, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1174 = load i64, i64* %1173, align 16, !dbg !1717, !psr.id !1721, !verifier.code !63 */
  $i1173 := $load.i64($M.587, $p1172);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1175 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1172, i32 0, i32 1, !dbg !1717, !psr.id !1722, !verifier.code !63 */
  $p1174 := $add.ref($add.ref($p1171, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1176 = load i64, i64* %1175, align 8, !dbg !1717, !psr.id !1723, !verifier.code !63 */
  $i1175 := $load.i64($M.587, $p1174);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1171, i128* %149, align 16, !dbg !1717, !psr.id !1724, !verifier.code !63 */
  $M.588 := $store.i128($M.588, $p148, $i1170);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1177 = bitcast i128* %149 to { i64, i64 }*, !dbg !1717, !psr.id !1725, !verifier.code !63 */
  $p1176 := $bitcast.ref.ref($p148);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1178 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1177, i32 0, i32 0, !dbg !1717, !psr.id !1726, !verifier.code !63 */
  $p1177 := $add.ref($add.ref($p1176, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1179 = load i64, i64* %1178, align 16, !dbg !1717, !psr.id !1727, !verifier.code !63 */
  $i1178 := $load.i64($M.588, $p1177);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1180 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1177, i32 0, i32 1, !dbg !1717, !psr.id !1728, !verifier.code !63 */
  $p1179 := $add.ref($add.ref($p1176, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1181 = load i64, i64* %1180, align 8, !dbg !1717, !psr.id !1729, !verifier.code !63 */
  $i1180 := $load.i64($M.588, $p1179);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1182 = call { i64, i64 } @FStar_UInt128_add(i64 %1174, i64 %1176, i64 %1179, i64 %1181), !dbg !1717, !psr.id !1730, !verifier.code !63 */
  call $p1181 := FStar_UInt128_add($i1173, $i1175, $i1178, $i1180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1183 = bitcast i128* %150 to { i64, i64 }*, !dbg !1717, !psr.id !1731, !verifier.code !63 */
  $p1182 := $bitcast.ref.ref($p149);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1184 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1183, i32 0, i32 0, !dbg !1717, !psr.id !1732, !verifier.code !63 */
  $p1183 := $add.ref($add.ref($p1182, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1185 = extractvalue { i64, i64 } %1182, 0, !dbg !1717, !psr.id !1733, !verifier.code !63 */
  $i1184 := $extractvalue.i64($p1181, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1185, i64* %1184, align 16, !dbg !1717, !psr.id !1734, !verifier.code !63 */
  $M.589 := $store.i64($M.589, $p1183, $i1184);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1186 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1183, i32 0, i32 1, !dbg !1717, !psr.id !1735, !verifier.code !63 */
  $p1185 := $add.ref($add.ref($p1182, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1187 = extractvalue { i64, i64 } %1182, 1, !dbg !1717, !psr.id !1736, !verifier.code !63 */
  $i1186 := $extractvalue.i64($p1181, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1187, i64* %1186, align 8, !dbg !1717, !psr.id !1737, !verifier.code !63 */
  $M.589 := $store.i64($M.589, $p1185, $i1186);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  /* %1188 = load i128, i128* %150, align 16, !dbg !1717, !psr.id !1738, !verifier.code !63 */
  $i1187 := $load.i128($M.589, $p149);
  /* call void @llvm.dbg.value(metadata i128 %1188, metadata !8446, metadata !DIExpression()), !dbg !7022, !psr.id !8447, !verifier.code !64 */
  call {:cexpr "o33"} boogie_si_record_i128($i1187);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1189 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %282, i64 %288), !dbg !1741, !psr.id !1742, !ValueTainted !325, !verifier.code !63 */
  call $p1188 := FStar_UInt128_mul_wide($i281, $i287);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  /* %1190 = bitcast i128* %151 to { i64, i64 }*, !dbg !1741, !psr.id !1743, !verifier.code !63 */
  $p1189 := $bitcast.ref.ref($p150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  /* %1191 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1190, i32 0, i32 0, !dbg !1741, !psr.id !1744, !verifier.code !63 */
  $p1190 := $add.ref($add.ref($p1189, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  /* %1192 = extractvalue { i64, i64 } %1189, 0, !dbg !1741, !psr.id !1745, !verifier.code !63 */
  $i1191 := $extractvalue.i64($p1188, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1192, i64* %1191, align 16, !dbg !1741, !psr.id !1746, !verifier.code !63 */
  $M.590 := $store.i64($M.590, $p1190, $i1191);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  /* %1193 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1190, i32 0, i32 1, !dbg !1741, !psr.id !1747, !verifier.code !63 */
  $p1192 := $add.ref($add.ref($p1189, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  /* %1194 = extractvalue { i64, i64 } %1189, 1, !dbg !1741, !psr.id !1748, !verifier.code !63 */
  $i1193 := $extractvalue.i64($p1188, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1194, i64* %1193, align 8, !dbg !1741, !psr.id !1749, !verifier.code !63 */
  $M.590 := $store.i64($M.590, $p1192, $i1193);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  /* %1195 = load i128, i128* %151, align 16, !dbg !1741, !psr.id !1750, !verifier.code !63 */
  $i1194 := $load.i128($M.590, $p150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1092, i128* %152, align 16, !dbg !1751, !psr.id !1752, !verifier.code !63 */
  $M.591 := $store.i128($M.591, $p151, $i1091);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1196 = bitcast i128* %152 to { i64, i64 }*, !dbg !1751, !psr.id !1753, !verifier.code !63 */
  $p1195 := $bitcast.ref.ref($p151);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1197 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1196, i32 0, i32 0, !dbg !1751, !psr.id !1754, !verifier.code !63 */
  $p1196 := $add.ref($add.ref($p1195, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1198 = load i64, i64* %1197, align 16, !dbg !1751, !psr.id !1755, !verifier.code !63 */
  $i1197 := $load.i64($M.591, $p1196);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1199 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1196, i32 0, i32 1, !dbg !1751, !psr.id !1756, !verifier.code !63 */
  $p1198 := $add.ref($add.ref($p1195, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1200 = load i64, i64* %1199, align 8, !dbg !1751, !psr.id !1757, !verifier.code !63 */
  $i1199 := $load.i64($M.591, $p1198);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1195, i128* %153, align 16, !dbg !1751, !psr.id !1758, !verifier.code !63 */
  $M.592 := $store.i128($M.592, $p152, $i1194);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1201 = bitcast i128* %153 to { i64, i64 }*, !dbg !1751, !psr.id !1759, !verifier.code !63 */
  $p1200 := $bitcast.ref.ref($p152);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1202 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1201, i32 0, i32 0, !dbg !1751, !psr.id !1760, !verifier.code !63 */
  $p1201 := $add.ref($add.ref($p1200, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1203 = load i64, i64* %1202, align 16, !dbg !1751, !psr.id !1761, !verifier.code !63 */
  $i1202 := $load.i64($M.592, $p1201);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1204 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1201, i32 0, i32 1, !dbg !1751, !psr.id !1762, !verifier.code !63 */
  $p1203 := $add.ref($add.ref($p1200, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1205 = load i64, i64* %1204, align 8, !dbg !1751, !psr.id !1763, !verifier.code !63 */
  $i1204 := $load.i64($M.592, $p1203);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1206 = call { i64, i64 } @FStar_UInt128_add(i64 %1198, i64 %1200, i64 %1203, i64 %1205), !dbg !1751, !psr.id !1764, !verifier.code !63 */
  call $p1205 := FStar_UInt128_add($i1197, $i1199, $i1202, $i1204);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1207 = bitcast i128* %154 to { i64, i64 }*, !dbg !1751, !psr.id !1765, !verifier.code !63 */
  $p1206 := $bitcast.ref.ref($p153);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1208 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1207, i32 0, i32 0, !dbg !1751, !psr.id !1766, !verifier.code !63 */
  $p1207 := $add.ref($add.ref($p1206, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1209 = extractvalue { i64, i64 } %1206, 0, !dbg !1751, !psr.id !1767, !verifier.code !63 */
  $i1208 := $extractvalue.i64($p1205, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1209, i64* %1208, align 16, !dbg !1751, !psr.id !1768, !verifier.code !63 */
  $M.593 := $store.i64($M.593, $p1207, $i1208);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1210 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1207, i32 0, i32 1, !dbg !1751, !psr.id !1769, !verifier.code !63 */
  $p1209 := $add.ref($add.ref($p1206, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1211 = extractvalue { i64, i64 } %1206, 1, !dbg !1751, !psr.id !1770, !verifier.code !63 */
  $i1210 := $extractvalue.i64($p1205, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1211, i64* %1210, align 8, !dbg !1751, !psr.id !1771, !verifier.code !63 */
  $M.593 := $store.i64($M.593, $p1209, $i1210);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  /* %1212 = load i128, i128* %154, align 16, !dbg !1751, !psr.id !1772, !verifier.code !63 */
  $i1211 := $load.i128($M.593, $p153);
  /* call void @llvm.dbg.value(metadata i128 %1212, metadata !8480, metadata !DIExpression()), !dbg !7022, !psr.id !8481, !verifier.code !64 */
  call {:cexpr "o43"} boogie_si_record_i128($i1211);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1213 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %284, i64 %299), !dbg !1775, !psr.id !1776, !ValueTainted !325, !verifier.code !63 */
  call $p1212 := FStar_UInt128_mul_wide($i283, $i298);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  /* %1214 = bitcast i128* %155 to { i64, i64 }*, !dbg !1775, !psr.id !1777, !verifier.code !63 */
  $p1213 := $bitcast.ref.ref($p154);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  /* %1215 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1214, i32 0, i32 0, !dbg !1775, !psr.id !1778, !verifier.code !63 */
  $p1214 := $add.ref($add.ref($p1213, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  /* %1216 = extractvalue { i64, i64 } %1213, 0, !dbg !1775, !psr.id !1779, !verifier.code !63 */
  $i1215 := $extractvalue.i64($p1212, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1216, i64* %1215, align 16, !dbg !1775, !psr.id !1780, !verifier.code !63 */
  $M.594 := $store.i64($M.594, $p1214, $i1215);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  /* %1217 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1214, i32 0, i32 1, !dbg !1775, !psr.id !1781, !verifier.code !63 */
  $p1216 := $add.ref($add.ref($p1213, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  /* %1218 = extractvalue { i64, i64 } %1213, 1, !dbg !1775, !psr.id !1782, !verifier.code !63 */
  $i1217 := $extractvalue.i64($p1212, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1218, i64* %1217, align 8, !dbg !1775, !psr.id !1783, !verifier.code !63 */
  $M.594 := $store.i64($M.594, $p1216, $i1217);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  /* %1219 = load i128, i128* %155, align 16, !dbg !1775, !psr.id !1784, !verifier.code !63 */
  $i1218 := $load.i128($M.594, $p154);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1116, i128* %156, align 16, !dbg !1785, !psr.id !1786, !verifier.code !63 */
  $M.595 := $store.i128($M.595, $p155, $i1115);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1220 = bitcast i128* %156 to { i64, i64 }*, !dbg !1785, !psr.id !1787, !verifier.code !63 */
  $p1219 := $bitcast.ref.ref($p155);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1221 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1220, i32 0, i32 0, !dbg !1785, !psr.id !1788, !verifier.code !63 */
  $p1220 := $add.ref($add.ref($p1219, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1222 = load i64, i64* %1221, align 16, !dbg !1785, !psr.id !1789, !verifier.code !63 */
  $i1221 := $load.i64($M.595, $p1220);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1223 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1220, i32 0, i32 1, !dbg !1785, !psr.id !1790, !verifier.code !63 */
  $p1222 := $add.ref($add.ref($p1219, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1224 = load i64, i64* %1223, align 8, !dbg !1785, !psr.id !1791, !verifier.code !63 */
  $i1223 := $load.i64($M.595, $p1222);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1219, i128* %157, align 16, !dbg !1785, !psr.id !1792, !verifier.code !63 */
  $M.596 := $store.i128($M.596, $p156, $i1218);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1225 = bitcast i128* %157 to { i64, i64 }*, !dbg !1785, !psr.id !1793, !verifier.code !63 */
  $p1224 := $bitcast.ref.ref($p156);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1226 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1225, i32 0, i32 0, !dbg !1785, !psr.id !1794, !verifier.code !63 */
  $p1225 := $add.ref($add.ref($p1224, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1227 = load i64, i64* %1226, align 16, !dbg !1785, !psr.id !1795, !verifier.code !63 */
  $i1226 := $load.i64($M.596, $p1225);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1228 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1225, i32 0, i32 1, !dbg !1785, !psr.id !1796, !verifier.code !63 */
  $p1227 := $add.ref($add.ref($p1224, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1229 = load i64, i64* %1228, align 8, !dbg !1785, !psr.id !1797, !verifier.code !63 */
  $i1228 := $load.i64($M.596, $p1227);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1230 = call { i64, i64 } @FStar_UInt128_add(i64 %1222, i64 %1224, i64 %1227, i64 %1229), !dbg !1785, !psr.id !1798, !verifier.code !63 */
  call $p1229 := FStar_UInt128_add($i1221, $i1223, $i1226, $i1228);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1231 = bitcast i128* %158 to { i64, i64 }*, !dbg !1785, !psr.id !1799, !verifier.code !63 */
  $p1230 := $bitcast.ref.ref($p157);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1232 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1231, i32 0, i32 0, !dbg !1785, !psr.id !1800, !verifier.code !63 */
  $p1231 := $add.ref($add.ref($p1230, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1233 = extractvalue { i64, i64 } %1230, 0, !dbg !1785, !psr.id !1801, !verifier.code !63 */
  $i1232 := $extractvalue.i64($p1229, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1233, i64* %1232, align 16, !dbg !1785, !psr.id !1802, !verifier.code !63 */
  $M.597 := $store.i64($M.597, $p1231, $i1232);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1234 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1231, i32 0, i32 1, !dbg !1785, !psr.id !1803, !verifier.code !63 */
  $p1233 := $add.ref($add.ref($p1230, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1235 = extractvalue { i64, i64 } %1230, 1, !dbg !1785, !psr.id !1804, !verifier.code !63 */
  $i1234 := $extractvalue.i64($p1229, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1235, i64* %1234, align 8, !dbg !1785, !psr.id !1805, !verifier.code !63 */
  $M.597 := $store.i64($M.597, $p1233, $i1234);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  /* %1236 = load i128, i128* %158, align 16, !dbg !1785, !psr.id !1806, !verifier.code !63 */
  $i1235 := $load.i128($M.597, $p157);
  /* call void @llvm.dbg.value(metadata i128 %1236, metadata !8514, metadata !DIExpression()), !dbg !7022, !psr.id !8515, !verifier.code !64 */
  call {:cexpr "o04"} boogie_si_record_i128($i1235);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1237 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %284, i64 %300), !dbg !1809, !psr.id !1810, !ValueTainted !325, !verifier.code !63 */
  call $p1236 := FStar_UInt128_mul_wide($i283, $i299);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  /* %1238 = bitcast i128* %159 to { i64, i64 }*, !dbg !1809, !psr.id !1811, !verifier.code !63 */
  $p1237 := $bitcast.ref.ref($p158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  /* %1239 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1238, i32 0, i32 0, !dbg !1809, !psr.id !1812, !verifier.code !63 */
  $p1238 := $add.ref($add.ref($p1237, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  /* %1240 = extractvalue { i64, i64 } %1237, 0, !dbg !1809, !psr.id !1813, !verifier.code !63 */
  $i1239 := $extractvalue.i64($p1236, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %1240, i64* %1239, align 16, !dbg !1809, !psr.id !1814, !verifier.code !63 */
  $M.598 := $store.i64($M.598, $p1238, $i1239);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  /* %1241 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1238, i32 0, i32 1, !dbg !1809, !psr.id !1815, !verifier.code !63 */
  $p1240 := $add.ref($add.ref($p1237, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  /* %1242 = extractvalue { i64, i64 } %1237, 1, !dbg !1809, !psr.id !1816, !verifier.code !63 */
  $i1241 := $extractvalue.i64($p1236, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %1242, i64* %1241, align 8, !dbg !1809, !psr.id !1817, !verifier.code !63 */
  $M.598 := $store.i64($M.598, $p1240, $i1241);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  /* %1243 = load i128, i128* %159, align 16, !dbg !1809, !psr.id !1818, !verifier.code !63 */
  $i1242 := $load.i128($M.598, $p158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %1140, i128* %160, align 16, !dbg !1819, !psr.id !1820, !verifier.code !63 */
  $M.599 := $store.i128($M.599, $p159, $i1139);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1244 = bitcast i128* %160 to { i64, i64 }*, !dbg !1819, !psr.id !1821, !verifier.code !63 */
  $p1243 := $bitcast.ref.ref($p159);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1245 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1244, i32 0, i32 0, !dbg !1819, !psr.id !1822, !verifier.code !63 */
  $p1244 := $add.ref($add.ref($p1243, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1246 = load i64, i64* %1245, align 16, !dbg !1819, !psr.id !1823, !verifier.code !63 */
  $i1245 := $load.i64($M.599, $p1244);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1247 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1244, i32 0, i32 1, !dbg !1819, !psr.id !1824, !verifier.code !63 */
  $p1246 := $add.ref($add.ref($p1243, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1248 = load i64, i64* %1247, align 8, !dbg !1819, !psr.id !1825, !verifier.code !63 */
  $i1247 := $load.i64($M.599, $p1246);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %1243, i128* %161, align 16, !dbg !1819, !psr.id !1826, !verifier.code !63 */
  $M.600 := $store.i128($M.600, $p160, $i1242);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1249 = bitcast i128* %161 to { i64, i64 }*, !dbg !1819, !psr.id !1827, !verifier.code !63 */
  $p1248 := $bitcast.ref.ref($p160);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1250 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1249, i32 0, i32 0, !dbg !1819, !psr.id !1828, !verifier.code !63 */
  $p1249 := $add.ref($add.ref($p1248, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1251 = load i64, i64* %1250, align 16, !dbg !1819, !psr.id !1829, !verifier.code !63 */
  $i1250 := $load.i64($M.600, $p1249);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1252 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1249, i32 0, i32 1, !dbg !1819, !psr.id !1830, !verifier.code !63 */
  $p1251 := $add.ref($add.ref($p1248, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1253 = load i64, i64* %1252, align 8, !dbg !1819, !psr.id !1831, !verifier.code !63 */
  $i1252 := $load.i64($M.600, $p1251);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1254 = call { i64, i64 } @FStar_UInt128_add(i64 %1246, i64 %1248, i64 %1251, i64 %1253), !dbg !1819, !psr.id !1832, !verifier.code !63 */
  call $p1253 := FStar_UInt128_add($i1245, $i1247, $i1250, $i1252);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1255 = bitcast i128* %162 to { i64, i64 }*, !dbg !1819, !psr.id !1833, !verifier.code !63 */
  $p1254 := $bitcast.ref.ref($p161);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1256 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1255, i32 0, i32 0, !dbg !1819, !psr.id !1834, !verifier.code !63 */
  $p1255 := $add.ref($add.ref($p1254, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1257 = extractvalue { i64, i64 } %1254, 0, !dbg !1819, !psr.id !1835, !verifier.code !63 */
  $i1256 := $extractvalue.i64($p1253, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %1257, i64* %1256, align 16, !dbg !1819, !psr.id !1836, !verifier.code !63 */
  $M.601 := $store.i64($M.601, $p1255, $i1256);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1258 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1255, i32 0, i32 1, !dbg !1819, !psr.id !1837, !verifier.code !63 */
  $p1257 := $add.ref($add.ref($p1254, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1259 = extractvalue { i64, i64 } %1254, 1, !dbg !1819, !psr.id !1838, !verifier.code !63 */
  $i1258 := $extractvalue.i64($p1253, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %1259, i64* %1258, align 8, !dbg !1819, !psr.id !1839, !verifier.code !63 */
  $M.601 := $store.i64($M.601, $p1257, $i1258);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  /* %1260 = load i128, i128* %162, align 16, !dbg !1819, !psr.id !1840, !verifier.code !63 */
  $i1259 := $load.i128($M.601, $p161);
  /* call void @llvm.dbg.value(metadata i128 %1260, metadata !8548, metadata !DIExpression()), !dbg !7022, !psr.id !8549, !verifier.code !64 */
  call {:cexpr "o141"} boogie_si_record_i128($i1259);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1261 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %284, i64 %301), !dbg !1843, !psr.id !1844, !ValueTainted !325, !verifier.code !63 */
  call $p1260 := FStar_UInt128_mul_wide($i283, $i300);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  /* %1262 = bitcast i128* %163 to { i64, i64 }*, !dbg !1843, !psr.id !1845, !verifier.code !63 */
  $p1261 := $bitcast.ref.ref($p162);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  /* %1263 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1262, i32 0, i32 0, !dbg !1843, !psr.id !1846, !verifier.code !63 */
  $p1262 := $add.ref($add.ref($p1261, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  /* %1264 = extractvalue { i64, i64 } %1261, 0, !dbg !1843, !psr.id !1847, !verifier.code !63 */
  $i1263 := $extractvalue.i64($p1260, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %1264, i64* %1263, align 16, !dbg !1843, !psr.id !1848, !verifier.code !63 */
  $M.602 := $store.i64($M.602, $p1262, $i1263);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  /* %1265 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1262, i32 0, i32 1, !dbg !1843, !psr.id !1849, !verifier.code !63 */
  $p1264 := $add.ref($add.ref($p1261, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  /* %1266 = extractvalue { i64, i64 } %1261, 1, !dbg !1843, !psr.id !1850, !verifier.code !63 */
  $i1265 := $extractvalue.i64($p1260, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  /* store i64 %1266, i64* %1265, align 8, !dbg !1843, !psr.id !1851, !verifier.code !63 */
  $M.602 := $store.i64($M.602, $p1264, $i1265);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  /* %1267 = load i128, i128* %163, align 16, !dbg !1843, !psr.id !1852, !verifier.code !63 */
  $i1266 := $load.i128($M.602, $p162);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %1164, i128* %164, align 16, !dbg !1853, !psr.id !1854, !verifier.code !63 */
  $M.603 := $store.i128($M.603, $p163, $i1163);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1268 = bitcast i128* %164 to { i64, i64 }*, !dbg !1853, !psr.id !1855, !verifier.code !63 */
  $p1267 := $bitcast.ref.ref($p163);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1269 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1268, i32 0, i32 0, !dbg !1853, !psr.id !1856, !verifier.code !63 */
  $p1268 := $add.ref($add.ref($p1267, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1270 = load i64, i64* %1269, align 16, !dbg !1853, !psr.id !1857, !verifier.code !63 */
  $i1269 := $load.i64($M.603, $p1268);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1271 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1268, i32 0, i32 1, !dbg !1853, !psr.id !1858, !verifier.code !63 */
  $p1270 := $add.ref($add.ref($p1267, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1272 = load i64, i64* %1271, align 8, !dbg !1853, !psr.id !1859, !verifier.code !63 */
  $i1271 := $load.i64($M.603, $p1270);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* store i128 %1267, i128* %165, align 16, !dbg !1853, !psr.id !1860, !verifier.code !63 */
  $M.604 := $store.i128($M.604, $p164, $i1266);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1273 = bitcast i128* %165 to { i64, i64 }*, !dbg !1853, !psr.id !1861, !verifier.code !63 */
  $p1272 := $bitcast.ref.ref($p164);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1274 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1273, i32 0, i32 0, !dbg !1853, !psr.id !1862, !verifier.code !63 */
  $p1273 := $add.ref($add.ref($p1272, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1275 = load i64, i64* %1274, align 16, !dbg !1853, !psr.id !1863, !verifier.code !63 */
  $i1274 := $load.i64($M.604, $p1273);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1276 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1273, i32 0, i32 1, !dbg !1853, !psr.id !1864, !verifier.code !63 */
  $p1275 := $add.ref($add.ref($p1272, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1277 = load i64, i64* %1276, align 8, !dbg !1853, !psr.id !1865, !verifier.code !63 */
  $i1276 := $load.i64($M.604, $p1275);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1278 = call { i64, i64 } @FStar_UInt128_add(i64 %1270, i64 %1272, i64 %1275, i64 %1277), !dbg !1853, !psr.id !1866, !verifier.code !63 */
  call $p1277 := FStar_UInt128_add($i1269, $i1271, $i1274, $i1276);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1279 = bitcast i128* %166 to { i64, i64 }*, !dbg !1853, !psr.id !1867, !verifier.code !63 */
  $p1278 := $bitcast.ref.ref($p165);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1280 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1279, i32 0, i32 0, !dbg !1853, !psr.id !1868, !verifier.code !63 */
  $p1279 := $add.ref($add.ref($p1278, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1281 = extractvalue { i64, i64 } %1278, 0, !dbg !1853, !psr.id !1869, !verifier.code !63 */
  $i1280 := $extractvalue.i64($p1277, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %1281, i64* %1280, align 16, !dbg !1853, !psr.id !1870, !verifier.code !63 */
  $M.605 := $store.i64($M.605, $p1279, $i1280);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1282 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1279, i32 0, i32 1, !dbg !1853, !psr.id !1871, !verifier.code !63 */
  $p1281 := $add.ref($add.ref($p1278, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1283 = extractvalue { i64, i64 } %1278, 1, !dbg !1853, !psr.id !1872, !verifier.code !63 */
  $i1282 := $extractvalue.i64($p1277, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* store i64 %1283, i64* %1282, align 8, !dbg !1853, !psr.id !1873, !verifier.code !63 */
  $M.605 := $store.i64($M.605, $p1281, $i1282);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  /* %1284 = load i128, i128* %166, align 16, !dbg !1853, !psr.id !1874, !verifier.code !63 */
  $i1283 := $load.i128($M.605, $p165);
  /* call void @llvm.dbg.value(metadata i128 %1284, metadata !8582, metadata !DIExpression()), !dbg !7022, !psr.id !8583, !verifier.code !64 */
  call {:cexpr "o241"} boogie_si_record_i128($i1283);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1285 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %284, i64 %302), !dbg !1877, !psr.id !1878, !ValueTainted !325, !verifier.code !63 */
  call $p1284 := FStar_UInt128_mul_wide($i283, $i301);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  /* %1286 = bitcast i128* %167 to { i64, i64 }*, !dbg !1877, !psr.id !1879, !verifier.code !63 */
  $p1285 := $bitcast.ref.ref($p166);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  /* %1287 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1286, i32 0, i32 0, !dbg !1877, !psr.id !1880, !verifier.code !63 */
  $p1286 := $add.ref($add.ref($p1285, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  /* %1288 = extractvalue { i64, i64 } %1285, 0, !dbg !1877, !psr.id !1881, !verifier.code !63 */
  $i1287 := $extractvalue.i64($p1284, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1288, i64* %1287, align 16, !dbg !1877, !psr.id !1882, !verifier.code !63 */
  $M.606 := $store.i64($M.606, $p1286, $i1287);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  /* %1289 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1286, i32 0, i32 1, !dbg !1877, !psr.id !1883, !verifier.code !63 */
  $p1288 := $add.ref($add.ref($p1285, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  /* %1290 = extractvalue { i64, i64 } %1285, 1, !dbg !1877, !psr.id !1884, !verifier.code !63 */
  $i1289 := $extractvalue.i64($p1284, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1290, i64* %1289, align 8, !dbg !1877, !psr.id !1885, !verifier.code !63 */
  $M.606 := $store.i64($M.606, $p1288, $i1289);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  /* %1291 = load i128, i128* %167, align 16, !dbg !1877, !psr.id !1886, !verifier.code !63 */
  $i1290 := $load.i128($M.606, $p166);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1188, i128* %168, align 16, !dbg !1887, !psr.id !1888, !verifier.code !63 */
  $M.607 := $store.i128($M.607, $p167, $i1187);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1292 = bitcast i128* %168 to { i64, i64 }*, !dbg !1887, !psr.id !1889, !verifier.code !63 */
  $p1291 := $bitcast.ref.ref($p167);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1293 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1292, i32 0, i32 0, !dbg !1887, !psr.id !1890, !verifier.code !63 */
  $p1292 := $add.ref($add.ref($p1291, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1294 = load i64, i64* %1293, align 16, !dbg !1887, !psr.id !1891, !verifier.code !63 */
  $i1293 := $load.i64($M.607, $p1292);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1295 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1292, i32 0, i32 1, !dbg !1887, !psr.id !1892, !verifier.code !63 */
  $p1294 := $add.ref($add.ref($p1291, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1296 = load i64, i64* %1295, align 8, !dbg !1887, !psr.id !1893, !verifier.code !63 */
  $i1295 := $load.i64($M.607, $p1294);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1291, i128* %169, align 16, !dbg !1887, !psr.id !1894, !verifier.code !63 */
  $M.608 := $store.i128($M.608, $p168, $i1290);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1297 = bitcast i128* %169 to { i64, i64 }*, !dbg !1887, !psr.id !1895, !verifier.code !63 */
  $p1296 := $bitcast.ref.ref($p168);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1298 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1297, i32 0, i32 0, !dbg !1887, !psr.id !1896, !verifier.code !63 */
  $p1297 := $add.ref($add.ref($p1296, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1299 = load i64, i64* %1298, align 16, !dbg !1887, !psr.id !1897, !verifier.code !63 */
  $i1298 := $load.i64($M.608, $p1297);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1300 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1297, i32 0, i32 1, !dbg !1887, !psr.id !1898, !verifier.code !63 */
  $p1299 := $add.ref($add.ref($p1296, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1301 = load i64, i64* %1300, align 8, !dbg !1887, !psr.id !1899, !verifier.code !63 */
  $i1300 := $load.i64($M.608, $p1299);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1302 = call { i64, i64 } @FStar_UInt128_add(i64 %1294, i64 %1296, i64 %1299, i64 %1301), !dbg !1887, !psr.id !1900, !verifier.code !63 */
  call $p1301 := FStar_UInt128_add($i1293, $i1295, $i1298, $i1300);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1303 = bitcast i128* %170 to { i64, i64 }*, !dbg !1887, !psr.id !1901, !verifier.code !63 */
  $p1302 := $bitcast.ref.ref($p169);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1304 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1303, i32 0, i32 0, !dbg !1887, !psr.id !1902, !verifier.code !63 */
  $p1303 := $add.ref($add.ref($p1302, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1305 = extractvalue { i64, i64 } %1302, 0, !dbg !1887, !psr.id !1903, !verifier.code !63 */
  $i1304 := $extractvalue.i64($p1301, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1305, i64* %1304, align 16, !dbg !1887, !psr.id !1904, !verifier.code !63 */
  $M.609 := $store.i64($M.609, $p1303, $i1304);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1306 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1303, i32 0, i32 1, !dbg !1887, !psr.id !1905, !verifier.code !63 */
  $p1305 := $add.ref($add.ref($p1302, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1307 = extractvalue { i64, i64 } %1302, 1, !dbg !1887, !psr.id !1906, !verifier.code !63 */
  $i1306 := $extractvalue.i64($p1301, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1307, i64* %1306, align 8, !dbg !1887, !psr.id !1907, !verifier.code !63 */
  $M.609 := $store.i64($M.609, $p1305, $i1306);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  /* %1308 = load i128, i128* %170, align 16, !dbg !1887, !psr.id !1908, !verifier.code !63 */
  $i1307 := $load.i128($M.609, $p169);
  /* call void @llvm.dbg.value(metadata i128 %1308, metadata !8616, metadata !DIExpression()), !dbg !7022, !psr.id !8617, !verifier.code !64 */
  call {:cexpr "o34"} boogie_si_record_i128($i1307);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  assume {:ValueTainted} true;
  /* %1309 = call { i64, i64 } @FStar_UInt128_mul_wide(i64 %284, i64 %286), !dbg !1911, !psr.id !1912, !ValueTainted !325, !verifier.code !63 */
  call $p1308 := FStar_UInt128_mul_wide($i283, $i285);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  /* %1310 = bitcast i128* %171 to { i64, i64 }*, !dbg !1911, !psr.id !1913, !verifier.code !63 */
  $p1309 := $bitcast.ref.ref($p170);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  /* %1311 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1310, i32 0, i32 0, !dbg !1911, !psr.id !1914, !verifier.code !63 */
  $p1310 := $add.ref($add.ref($p1309, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  /* %1312 = extractvalue { i64, i64 } %1309, 0, !dbg !1911, !psr.id !1915, !verifier.code !63 */
  $i1311 := $extractvalue.i64($p1308, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1312, i64* %1311, align 16, !dbg !1911, !psr.id !1916, !verifier.code !63 */
  $M.610 := $store.i64($M.610, $p1310, $i1311);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  /* %1313 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1310, i32 0, i32 1, !dbg !1911, !psr.id !1917, !verifier.code !63 */
  $p1312 := $add.ref($add.ref($p1309, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  /* %1314 = extractvalue { i64, i64 } %1309, 1, !dbg !1911, !psr.id !1918, !verifier.code !63 */
  $i1313 := $extractvalue.i64($p1308, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  /* store i64 %1314, i64* %1313, align 8, !dbg !1911, !psr.id !1919, !verifier.code !63 */
  $M.610 := $store.i64($M.610, $p1312, $i1313);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  /* %1315 = load i128, i128* %171, align 16, !dbg !1911, !psr.id !1920, !verifier.code !63 */
  $i1314 := $load.i128($M.610, $p170);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1212, i128* %172, align 16, !dbg !1921, !psr.id !1922, !verifier.code !63 */
  $M.611 := $store.i128($M.611, $p171, $i1211);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1316 = bitcast i128* %172 to { i64, i64 }*, !dbg !1921, !psr.id !1923, !verifier.code !63 */
  $p1315 := $bitcast.ref.ref($p171);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1317 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1316, i32 0, i32 0, !dbg !1921, !psr.id !1924, !verifier.code !63 */
  $p1316 := $add.ref($add.ref($p1315, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1318 = load i64, i64* %1317, align 16, !dbg !1921, !psr.id !1925, !verifier.code !63 */
  $i1317 := $load.i64($M.611, $p1316);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1319 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1316, i32 0, i32 1, !dbg !1921, !psr.id !1926, !verifier.code !63 */
  $p1318 := $add.ref($add.ref($p1315, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1320 = load i64, i64* %1319, align 8, !dbg !1921, !psr.id !1927, !verifier.code !63 */
  $i1319 := $load.i64($M.611, $p1318);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1315, i128* %173, align 16, !dbg !1921, !psr.id !1928, !verifier.code !63 */
  $M.612 := $store.i128($M.612, $p172, $i1314);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1321 = bitcast i128* %173 to { i64, i64 }*, !dbg !1921, !psr.id !1929, !verifier.code !63 */
  $p1320 := $bitcast.ref.ref($p172);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1322 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1321, i32 0, i32 0, !dbg !1921, !psr.id !1930, !verifier.code !63 */
  $p1321 := $add.ref($add.ref($p1320, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1323 = load i64, i64* %1322, align 16, !dbg !1921, !psr.id !1931, !verifier.code !63 */
  $i1322 := $load.i64($M.612, $p1321);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1324 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1321, i32 0, i32 1, !dbg !1921, !psr.id !1932, !verifier.code !63 */
  $p1323 := $add.ref($add.ref($p1320, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1325 = load i64, i64* %1324, align 8, !dbg !1921, !psr.id !1933, !verifier.code !63 */
  $i1324 := $load.i64($M.612, $p1323);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1326 = call { i64, i64 } @FStar_UInt128_add(i64 %1318, i64 %1320, i64 %1323, i64 %1325), !dbg !1921, !psr.id !1934, !verifier.code !63 */
  call $p1325 := FStar_UInt128_add($i1317, $i1319, $i1322, $i1324);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1327 = bitcast i128* %174 to { i64, i64 }*, !dbg !1921, !psr.id !1935, !verifier.code !63 */
  $p1326 := $bitcast.ref.ref($p173);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1328 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1327, i32 0, i32 0, !dbg !1921, !psr.id !1936, !verifier.code !63 */
  $p1327 := $add.ref($add.ref($p1326, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1329 = extractvalue { i64, i64 } %1326, 0, !dbg !1921, !psr.id !1937, !verifier.code !63 */
  $i1328 := $extractvalue.i64($p1325, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1329, i64* %1328, align 16, !dbg !1921, !psr.id !1938, !verifier.code !63 */
  $M.613 := $store.i64($M.613, $p1327, $i1328);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1330 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1327, i32 0, i32 1, !dbg !1921, !psr.id !1939, !verifier.code !63 */
  $p1329 := $add.ref($add.ref($p1326, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1331 = extractvalue { i64, i64 } %1326, 1, !dbg !1921, !psr.id !1940, !verifier.code !63 */
  $i1330 := $extractvalue.i64($p1325, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1331, i64* %1330, align 8, !dbg !1921, !psr.id !1941, !verifier.code !63 */
  $M.613 := $store.i64($M.613, $p1329, $i1330);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  /* %1332 = load i128, i128* %174, align 16, !dbg !1921, !psr.id !1942, !verifier.code !63 */
  $i1331 := $load.i128($M.613, $p173);
  /* call void @llvm.dbg.value(metadata i128 %1332, metadata !8650, metadata !DIExpression()), !dbg !7022, !psr.id !8651, !verifier.code !64 */
  call {:cexpr "o44"} boogie_si_record_i128($i1331);
  /* call void @llvm.dbg.value(metadata i128 %1236, metadata !8652, metadata !DIExpression()), !dbg !7022, !psr.id !8653, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %1260, metadata !8654, metadata !DIExpression()), !dbg !7022, !psr.id !8655, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %1284, metadata !8656, metadata !DIExpression()), !dbg !7022, !psr.id !8657, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %1308, metadata !8658, metadata !DIExpression()), !dbg !7022, !psr.id !8659, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i128 %1332, metadata !8660, metadata !DIExpression()), !dbg !7022, !psr.id !8661, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  /* %1333 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 0), !dbg !1955, !psr.id !1956, !verifier.code !63 */
  call $p1332 := FStar_UInt128_uint64_to_uint128(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  /* %1334 = bitcast i128* %175 to { i64, i64 }*, !dbg !1955, !psr.id !1957, !verifier.code !63 */
  $p1333 := $bitcast.ref.ref($p174);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  /* %1335 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1334, i32 0, i32 0, !dbg !1955, !psr.id !1958, !verifier.code !63 */
  $p1334 := $add.ref($add.ref($p1333, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  /* %1336 = extractvalue { i64, i64 } %1333, 0, !dbg !1955, !psr.id !1959, !verifier.code !63 */
  $i1335 := $extractvalue.i64($p1332, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  /* store i64 %1336, i64* %1335, align 16, !dbg !1955, !psr.id !1960, !verifier.code !63 */
  $M.614 := $store.i64($M.614, $p1334, $i1335);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  /* %1337 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1334, i32 0, i32 1, !dbg !1955, !psr.id !1961, !verifier.code !63 */
  $p1336 := $add.ref($add.ref($p1333, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  /* %1338 = extractvalue { i64, i64 } %1333, 1, !dbg !1955, !psr.id !1962, !verifier.code !63 */
  $i1337 := $extractvalue.i64($p1332, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  /* store i64 %1338, i64* %1337, align 8, !dbg !1955, !psr.id !1963, !verifier.code !63 */
  $M.614 := $store.i64($M.614, $p1336, $i1337);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  /* %1339 = load i128, i128* %175, align 16, !dbg !1955, !psr.id !1964, !verifier.code !63 */
  $i1338 := $load.i128($M.614, $p174);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* store i128 %721, i128* %176, align 16, !dbg !1965, !psr.id !1966, !verifier.code !63 */
  $M.615 := $store.i128($M.615, $p175, $i720);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1340 = bitcast i128* %176 to { i64, i64 }*, !dbg !1965, !psr.id !1967, !verifier.code !63 */
  $p1339 := $bitcast.ref.ref($p175);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1341 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1340, i32 0, i32 0, !dbg !1965, !psr.id !1968, !verifier.code !63 */
  $p1340 := $add.ref($add.ref($p1339, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1342 = load i64, i64* %1341, align 16, !dbg !1965, !psr.id !1969, !verifier.code !63 */
  $i1341 := $load.i64($M.615, $p1340);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1343 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1340, i32 0, i32 1, !dbg !1965, !psr.id !1970, !verifier.code !63 */
  $p1342 := $add.ref($add.ref($p1339, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1344 = load i64, i64* %1343, align 8, !dbg !1965, !psr.id !1971, !verifier.code !63 */
  $i1343 := $load.i64($M.615, $p1342);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* store i128 %1339, i128* %177, align 16, !dbg !1965, !psr.id !1972, !verifier.code !63 */
  $M.616 := $store.i128($M.616, $p176, $i1338);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1345 = bitcast i128* %177 to { i64, i64 }*, !dbg !1965, !psr.id !1973, !verifier.code !63 */
  $p1344 := $bitcast.ref.ref($p176);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1346 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1345, i32 0, i32 0, !dbg !1965, !psr.id !1974, !verifier.code !63 */
  $p1345 := $add.ref($add.ref($p1344, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1347 = load i64, i64* %1346, align 16, !dbg !1965, !psr.id !1975, !verifier.code !63 */
  $i1346 := $load.i64($M.616, $p1345);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1348 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1345, i32 0, i32 1, !dbg !1965, !psr.id !1976, !verifier.code !63 */
  $p1347 := $add.ref($add.ref($p1344, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1349 = load i64, i64* %1348, align 8, !dbg !1965, !psr.id !1977, !verifier.code !63 */
  $i1348 := $load.i64($M.616, $p1347);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1350 = call { i64, i64 } @FStar_UInt128_add(i64 %1342, i64 %1344, i64 %1347, i64 %1349), !dbg !1965, !psr.id !1978, !verifier.code !63 */
  call $p1349 := FStar_UInt128_add($i1341, $i1343, $i1346, $i1348);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1351 = bitcast i128* %178 to { i64, i64 }*, !dbg !1965, !psr.id !1979, !verifier.code !63 */
  $p1350 := $bitcast.ref.ref($p177);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1352 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1351, i32 0, i32 0, !dbg !1965, !psr.id !1980, !verifier.code !63 */
  $p1351 := $add.ref($add.ref($p1350, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1353 = extractvalue { i64, i64 } %1350, 0, !dbg !1965, !psr.id !1981, !verifier.code !63 */
  $i1352 := $extractvalue.i64($p1349, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* store i64 %1353, i64* %1352, align 16, !dbg !1965, !psr.id !1982, !verifier.code !63 */
  $M.617 := $store.i64($M.617, $p1351, $i1352);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1354 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1351, i32 0, i32 1, !dbg !1965, !psr.id !1983, !verifier.code !63 */
  $p1353 := $add.ref($add.ref($p1350, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1355 = extractvalue { i64, i64 } %1350, 1, !dbg !1965, !psr.id !1984, !verifier.code !63 */
  $i1354 := $extractvalue.i64($p1349, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* store i64 %1355, i64* %1354, align 8, !dbg !1965, !psr.id !1985, !verifier.code !63 */
  $M.617 := $store.i64($M.617, $p1353, $i1354);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  /* %1356 = load i128, i128* %178, align 16, !dbg !1965, !psr.id !1986, !verifier.code !63 */
  $i1355 := $load.i128($M.617, $p177);
  /* call void @llvm.dbg.value(metadata i128 %1356, metadata !8694, metadata !DIExpression()), !dbg !7022, !psr.id !8695, !verifier.code !64 */
  call {:cexpr "l_"} boogie_si_record_i128($i1355);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %1356, i128* %179, align 16, !dbg !1989, !psr.id !1990, !verifier.code !63 */
  $M.618 := $store.i128($M.618, $p178, $i1355);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  /* %1357 = bitcast i128* %179 to { i64, i64 }*, !dbg !1989, !psr.id !1991, !verifier.code !63 */
  $p1356 := $bitcast.ref.ref($p178);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  /* %1358 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1357, i32 0, i32 0, !dbg !1989, !psr.id !1992, !verifier.code !63 */
  $p1357 := $add.ref($add.ref($p1356, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  /* %1359 = load i64, i64* %1358, align 16, !dbg !1989, !psr.id !1993, !verifier.code !63 */
  $i1358 := $load.i64($M.618, $p1357);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  /* %1360 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1357, i32 0, i32 1, !dbg !1989, !psr.id !1994, !verifier.code !63 */
  $p1359 := $add.ref($add.ref($p1356, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  /* %1361 = load i64, i64* %1360, align 8, !dbg !1989, !psr.id !1995, !verifier.code !63 */
  $i1360 := $load.i64($M.618, $p1359);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  /* %1362 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1359, i64 %1361), !dbg !1989, !psr.id !1996, !verifier.code !63 */
  call $i1361 := FStar_UInt128_uint128_to_uint64($i1358, $i1360);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 56} true;
  assume {:verifier.code 0} true;
  /* %1363 = and i64 %1362, 2251799813685247, !dbg !1997, !psr.id !1998, !verifier.code !63 */
  $i1362 := $and.i64($i1361, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1363, metadata !8706, metadata !DIExpression()), !dbg !7022, !psr.id !8707, !verifier.code !64 */
  call {:cexpr "tmp00"} boogie_si_record_i64($i1362);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* store i128 %1356, i128* %180, align 16, !dbg !2001, !psr.id !2002, !verifier.code !63 */
  $M.619 := $store.i128($M.619, $p179, $i1355);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* %1364 = bitcast i128* %180 to { i64, i64 }*, !dbg !2001, !psr.id !2003, !verifier.code !63 */
  $p1363 := $bitcast.ref.ref($p179);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* %1365 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1364, i32 0, i32 0, !dbg !2001, !psr.id !2004, !verifier.code !63 */
  $p1364 := $add.ref($add.ref($p1363, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* %1366 = load i64, i64* %1365, align 16, !dbg !2001, !psr.id !2005, !verifier.code !63 */
  $i1365 := $load.i64($M.619, $p1364);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* %1367 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1364, i32 0, i32 1, !dbg !2001, !psr.id !2006, !verifier.code !63 */
  $p1366 := $add.ref($add.ref($p1363, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* %1368 = load i64, i64* %1367, align 8, !dbg !2001, !psr.id !2007, !verifier.code !63 */
  $i1367 := $load.i64($M.619, $p1366);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* %1369 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1366, i64 %1368, i32 51), !dbg !2001, !psr.id !2008, !verifier.code !63 */
  call $p1368 := FStar_UInt128_shift_right($i1365, $i1367, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* %1370 = bitcast i128* %181 to { i64, i64 }*, !dbg !2001, !psr.id !2009, !verifier.code !63 */
  $p1369 := $bitcast.ref.ref($p180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* %1371 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1370, i32 0, i32 0, !dbg !2001, !psr.id !2010, !verifier.code !63 */
  $p1370 := $add.ref($add.ref($p1369, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* %1372 = extractvalue { i64, i64 } %1369, 0, !dbg !2001, !psr.id !2011, !verifier.code !63 */
  $i1371 := $extractvalue.i64($p1368, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %1372, i64* %1371, align 16, !dbg !2001, !psr.id !2012, !verifier.code !63 */
  $M.620 := $store.i64($M.620, $p1370, $i1371);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* %1373 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1370, i32 0, i32 1, !dbg !2001, !psr.id !2013, !verifier.code !63 */
  $p1372 := $add.ref($add.ref($p1369, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* %1374 = extractvalue { i64, i64 } %1369, 1, !dbg !2001, !psr.id !2014, !verifier.code !63 */
  $i1373 := $extractvalue.i64($p1368, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %1374, i64* %1373, align 8, !dbg !2001, !psr.id !2015, !verifier.code !63 */
  $M.620 := $store.i64($M.620, $p1372, $i1373);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  /* %1375 = load i128, i128* %181, align 16, !dbg !2001, !psr.id !2016, !verifier.code !63 */
  $i1374 := $load.i128($M.620, $p180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  /* store i128 %1375, i128* %182, align 16, !dbg !2017, !psr.id !2018, !verifier.code !63 */
  $M.621 := $store.i128($M.621, $p181, $i1374);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  /* %1376 = bitcast i128* %182 to { i64, i64 }*, !dbg !2017, !psr.id !2019, !verifier.code !63 */
  $p1375 := $bitcast.ref.ref($p181);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  /* %1377 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1376, i32 0, i32 0, !dbg !2017, !psr.id !2020, !verifier.code !63 */
  $p1376 := $add.ref($add.ref($p1375, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  /* %1378 = load i64, i64* %1377, align 16, !dbg !2017, !psr.id !2021, !verifier.code !63 */
  $i1377 := $load.i64($M.621, $p1376);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  /* %1379 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1376, i32 0, i32 1, !dbg !2017, !psr.id !2022, !verifier.code !63 */
  $p1378 := $add.ref($add.ref($p1375, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  /* %1380 = load i64, i64* %1379, align 8, !dbg !2017, !psr.id !2023, !verifier.code !63 */
  $i1379 := $load.i64($M.621, $p1378);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  /* %1381 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1378, i64 %1380), !dbg !2017, !psr.id !2024, !verifier.code !63 */
  call $i1380 := FStar_UInt128_uint128_to_uint64($i1377, $i1379);
  /* call void @llvm.dbg.value(metadata i64 %1381, metadata !8732, metadata !DIExpression()), !dbg !7022, !psr.id !8733, !verifier.code !64 */
  call {:cexpr "c00"} boogie_si_record_i64($i1380);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  /* %1382 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %1381), !dbg !2027, !psr.id !2028, !verifier.code !63 */
  call $p1381 := FStar_UInt128_uint64_to_uint128($i1380);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  /* %1383 = bitcast i128* %183 to { i64, i64 }*, !dbg !2027, !psr.id !2029, !verifier.code !63 */
  $p1382 := $bitcast.ref.ref($p182);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  /* %1384 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1383, i32 0, i32 0, !dbg !2027, !psr.id !2030, !verifier.code !63 */
  $p1383 := $add.ref($add.ref($p1382, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  /* %1385 = extractvalue { i64, i64 } %1382, 0, !dbg !2027, !psr.id !2031, !verifier.code !63 */
  $i1384 := $extractvalue.i64($p1381, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1385, i64* %1384, align 16, !dbg !2027, !psr.id !2032, !verifier.code !63 */
  $M.622 := $store.i64($M.622, $p1383, $i1384);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  /* %1386 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1383, i32 0, i32 1, !dbg !2027, !psr.id !2033, !verifier.code !63 */
  $p1385 := $add.ref($add.ref($p1382, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  /* %1387 = extractvalue { i64, i64 } %1382, 1, !dbg !2027, !psr.id !2034, !verifier.code !63 */
  $i1386 := $extractvalue.i64($p1381, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1387, i64* %1386, align 8, !dbg !2027, !psr.id !2035, !verifier.code !63 */
  $M.622 := $store.i64($M.622, $p1385, $i1386);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  /* %1388 = load i128, i128* %183, align 16, !dbg !2027, !psr.id !2036, !verifier.code !63 */
  $i1387 := $load.i128($M.622, $p182);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %745, i128* %184, align 16, !dbg !2037, !psr.id !2038, !verifier.code !63 */
  $M.623 := $store.i128($M.623, $p183, $i744);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1389 = bitcast i128* %184 to { i64, i64 }*, !dbg !2037, !psr.id !2039, !verifier.code !63 */
  $p1388 := $bitcast.ref.ref($p183);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1390 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1389, i32 0, i32 0, !dbg !2037, !psr.id !2040, !verifier.code !63 */
  $p1389 := $add.ref($add.ref($p1388, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1391 = load i64, i64* %1390, align 16, !dbg !2037, !psr.id !2041, !verifier.code !63 */
  $i1390 := $load.i64($M.623, $p1389);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1392 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1389, i32 0, i32 1, !dbg !2037, !psr.id !2042, !verifier.code !63 */
  $p1391 := $add.ref($add.ref($p1388, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1393 = load i64, i64* %1392, align 8, !dbg !2037, !psr.id !2043, !verifier.code !63 */
  $i1392 := $load.i64($M.623, $p1391);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1388, i128* %185, align 16, !dbg !2037, !psr.id !2044, !verifier.code !63 */
  $M.624 := $store.i128($M.624, $p184, $i1387);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1394 = bitcast i128* %185 to { i64, i64 }*, !dbg !2037, !psr.id !2045, !verifier.code !63 */
  $p1393 := $bitcast.ref.ref($p184);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1395 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1394, i32 0, i32 0, !dbg !2037, !psr.id !2046, !verifier.code !63 */
  $p1394 := $add.ref($add.ref($p1393, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1396 = load i64, i64* %1395, align 16, !dbg !2037, !psr.id !2047, !verifier.code !63 */
  $i1395 := $load.i64($M.624, $p1394);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1397 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1394, i32 0, i32 1, !dbg !2037, !psr.id !2048, !verifier.code !63 */
  $p1396 := $add.ref($add.ref($p1393, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1398 = load i64, i64* %1397, align 8, !dbg !2037, !psr.id !2049, !verifier.code !63 */
  $i1397 := $load.i64($M.624, $p1396);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1399 = call { i64, i64 } @FStar_UInt128_add(i64 %1391, i64 %1393, i64 %1396, i64 %1398), !dbg !2037, !psr.id !2050, !verifier.code !63 */
  call $p1398 := FStar_UInt128_add($i1390, $i1392, $i1395, $i1397);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1400 = bitcast i128* %186 to { i64, i64 }*, !dbg !2037, !psr.id !2051, !verifier.code !63 */
  $p1399 := $bitcast.ref.ref($p185);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1401 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1400, i32 0, i32 0, !dbg !2037, !psr.id !2052, !verifier.code !63 */
  $p1400 := $add.ref($add.ref($p1399, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1402 = extractvalue { i64, i64 } %1399, 0, !dbg !2037, !psr.id !2053, !verifier.code !63 */
  $i1401 := $extractvalue.i64($p1398, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1402, i64* %1401, align 16, !dbg !2037, !psr.id !2054, !verifier.code !63 */
  $M.625 := $store.i64($M.625, $p1400, $i1401);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1403 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1400, i32 0, i32 1, !dbg !2037, !psr.id !2055, !verifier.code !63 */
  $p1402 := $add.ref($add.ref($p1399, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1404 = extractvalue { i64, i64 } %1399, 1, !dbg !2037, !psr.id !2056, !verifier.code !63 */
  $i1403 := $extractvalue.i64($p1398, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1404, i64* %1403, align 8, !dbg !2037, !psr.id !2057, !verifier.code !63 */
  $M.625 := $store.i64($M.625, $p1402, $i1403);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  /* %1405 = load i128, i128* %186, align 16, !dbg !2037, !psr.id !2058, !verifier.code !63 */
  $i1404 := $load.i128($M.625, $p185);
  /* call void @llvm.dbg.value(metadata i128 %1405, metadata !8766, metadata !DIExpression()), !dbg !7022, !psr.id !8767, !verifier.code !64 */
  call {:cexpr "l_0"} boogie_si_record_i128($i1404);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %1405, i128* %187, align 16, !dbg !2061, !psr.id !2062, !verifier.code !63 */
  $M.626 := $store.i128($M.626, $p186, $i1404);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  /* %1406 = bitcast i128* %187 to { i64, i64 }*, !dbg !2061, !psr.id !2063, !verifier.code !63 */
  $p1405 := $bitcast.ref.ref($p186);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  /* %1407 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1406, i32 0, i32 0, !dbg !2061, !psr.id !2064, !verifier.code !63 */
  $p1406 := $add.ref($add.ref($p1405, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  /* %1408 = load i64, i64* %1407, align 16, !dbg !2061, !psr.id !2065, !verifier.code !63 */
  $i1407 := $load.i64($M.626, $p1406);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  /* %1409 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1406, i32 0, i32 1, !dbg !2061, !psr.id !2066, !verifier.code !63 */
  $p1408 := $add.ref($add.ref($p1405, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  /* %1410 = load i64, i64* %1409, align 8, !dbg !2061, !psr.id !2067, !verifier.code !63 */
  $i1409 := $load.i64($M.626, $p1408);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  /* %1411 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1408, i64 %1410), !dbg !2061, !psr.id !2068, !verifier.code !63 */
  call $i1410 := FStar_UInt128_uint128_to_uint64($i1407, $i1409);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 57} true;
  assume {:verifier.code 0} true;
  /* %1412 = and i64 %1411, 2251799813685247, !dbg !2069, !psr.id !2070, !verifier.code !63 */
  $i1411 := $and.i64($i1410, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1412, metadata !8778, metadata !DIExpression()), !dbg !7022, !psr.id !8779, !verifier.code !64 */
  call {:cexpr "tmp10"} boogie_si_record_i64($i1411);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* store i128 %1405, i128* %188, align 16, !dbg !2073, !psr.id !2074, !verifier.code !63 */
  $M.627 := $store.i128($M.627, $p187, $i1404);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* %1413 = bitcast i128* %188 to { i64, i64 }*, !dbg !2073, !psr.id !2075, !verifier.code !63 */
  $p1412 := $bitcast.ref.ref($p187);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* %1414 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1413, i32 0, i32 0, !dbg !2073, !psr.id !2076, !verifier.code !63 */
  $p1413 := $add.ref($add.ref($p1412, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* %1415 = load i64, i64* %1414, align 16, !dbg !2073, !psr.id !2077, !verifier.code !63 */
  $i1414 := $load.i64($M.627, $p1413);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* %1416 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1413, i32 0, i32 1, !dbg !2073, !psr.id !2078, !verifier.code !63 */
  $p1415 := $add.ref($add.ref($p1412, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* %1417 = load i64, i64* %1416, align 8, !dbg !2073, !psr.id !2079, !verifier.code !63 */
  $i1416 := $load.i64($M.627, $p1415);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* %1418 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1415, i64 %1417, i32 51), !dbg !2073, !psr.id !2080, !verifier.code !63 */
  call $p1417 := FStar_UInt128_shift_right($i1414, $i1416, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* %1419 = bitcast i128* %189 to { i64, i64 }*, !dbg !2073, !psr.id !2081, !verifier.code !63 */
  $p1418 := $bitcast.ref.ref($p188);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* %1420 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1419, i32 0, i32 0, !dbg !2073, !psr.id !2082, !verifier.code !63 */
  $p1419 := $add.ref($add.ref($p1418, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* %1421 = extractvalue { i64, i64 } %1418, 0, !dbg !2073, !psr.id !2083, !verifier.code !63 */
  $i1420 := $extractvalue.i64($p1417, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %1421, i64* %1420, align 16, !dbg !2073, !psr.id !2084, !verifier.code !63 */
  $M.628 := $store.i64($M.628, $p1419, $i1420);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* %1422 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1419, i32 0, i32 1, !dbg !2073, !psr.id !2085, !verifier.code !63 */
  $p1421 := $add.ref($add.ref($p1418, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* %1423 = extractvalue { i64, i64 } %1418, 1, !dbg !2073, !psr.id !2086, !verifier.code !63 */
  $i1422 := $extractvalue.i64($p1417, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %1423, i64* %1422, align 8, !dbg !2073, !psr.id !2087, !verifier.code !63 */
  $M.628 := $store.i64($M.628, $p1421, $i1422);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  /* %1424 = load i128, i128* %189, align 16, !dbg !2073, !psr.id !2088, !verifier.code !63 */
  $i1423 := $load.i128($M.628, $p188);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  /* store i128 %1424, i128* %190, align 16, !dbg !2089, !psr.id !2090, !verifier.code !63 */
  $M.629 := $store.i128($M.629, $p189, $i1423);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  /* %1425 = bitcast i128* %190 to { i64, i64 }*, !dbg !2089, !psr.id !2091, !verifier.code !63 */
  $p1424 := $bitcast.ref.ref($p189);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  /* %1426 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1425, i32 0, i32 0, !dbg !2089, !psr.id !2092, !verifier.code !63 */
  $p1425 := $add.ref($add.ref($p1424, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  /* %1427 = load i64, i64* %1426, align 16, !dbg !2089, !psr.id !2093, !verifier.code !63 */
  $i1426 := $load.i64($M.629, $p1425);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  /* %1428 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1425, i32 0, i32 1, !dbg !2089, !psr.id !2094, !verifier.code !63 */
  $p1427 := $add.ref($add.ref($p1424, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  /* %1429 = load i64, i64* %1428, align 8, !dbg !2089, !psr.id !2095, !verifier.code !63 */
  $i1428 := $load.i64($M.629, $p1427);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  /* %1430 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1427, i64 %1429), !dbg !2089, !psr.id !2096, !verifier.code !63 */
  call $i1429 := FStar_UInt128_uint128_to_uint64($i1426, $i1428);
  /* call void @llvm.dbg.value(metadata i64 %1430, metadata !8804, metadata !DIExpression()), !dbg !7022, !psr.id !8805, !verifier.code !64 */
  call {:cexpr "c10"} boogie_si_record_i64($i1429);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  /* %1431 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %1430), !dbg !2099, !psr.id !2100, !verifier.code !63 */
  call $p1430 := FStar_UInt128_uint64_to_uint128($i1429);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  /* %1432 = bitcast i128* %191 to { i64, i64 }*, !dbg !2099, !psr.id !2101, !verifier.code !63 */
  $p1431 := $bitcast.ref.ref($p190);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  /* %1433 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1432, i32 0, i32 0, !dbg !2099, !psr.id !2102, !verifier.code !63 */
  $p1432 := $add.ref($add.ref($p1431, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  /* %1434 = extractvalue { i64, i64 } %1431, 0, !dbg !2099, !psr.id !2103, !verifier.code !63 */
  $i1433 := $extractvalue.i64($p1430, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1434, i64* %1433, align 16, !dbg !2099, !psr.id !2104, !verifier.code !63 */
  $M.630 := $store.i64($M.630, $p1432, $i1433);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  /* %1435 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1432, i32 0, i32 1, !dbg !2099, !psr.id !2105, !verifier.code !63 */
  $p1434 := $add.ref($add.ref($p1431, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  /* %1436 = extractvalue { i64, i64 } %1431, 1, !dbg !2099, !psr.id !2106, !verifier.code !63 */
  $i1435 := $extractvalue.i64($p1430, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1436, i64* %1435, align 8, !dbg !2099, !psr.id !2107, !verifier.code !63 */
  $M.630 := $store.i64($M.630, $p1434, $i1435);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  /* %1437 = load i128, i128* %191, align 16, !dbg !2099, !psr.id !2108, !verifier.code !63 */
  $i1436 := $load.i128($M.630, $p190);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %769, i128* %192, align 16, !dbg !2109, !psr.id !2110, !verifier.code !63 */
  $M.631 := $store.i128($M.631, $p191, $i768);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1438 = bitcast i128* %192 to { i64, i64 }*, !dbg !2109, !psr.id !2111, !verifier.code !63 */
  $p1437 := $bitcast.ref.ref($p191);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1439 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1438, i32 0, i32 0, !dbg !2109, !psr.id !2112, !verifier.code !63 */
  $p1438 := $add.ref($add.ref($p1437, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1440 = load i64, i64* %1439, align 16, !dbg !2109, !psr.id !2113, !verifier.code !63 */
  $i1439 := $load.i64($M.631, $p1438);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1441 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1438, i32 0, i32 1, !dbg !2109, !psr.id !2114, !verifier.code !63 */
  $p1440 := $add.ref($add.ref($p1437, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1442 = load i64, i64* %1441, align 8, !dbg !2109, !psr.id !2115, !verifier.code !63 */
  $i1441 := $load.i64($M.631, $p1440);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1437, i128* %193, align 16, !dbg !2109, !psr.id !2116, !verifier.code !63 */
  $M.632 := $store.i128($M.632, $p192, $i1436);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1443 = bitcast i128* %193 to { i64, i64 }*, !dbg !2109, !psr.id !2117, !verifier.code !63 */
  $p1442 := $bitcast.ref.ref($p192);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1444 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1443, i32 0, i32 0, !dbg !2109, !psr.id !2118, !verifier.code !63 */
  $p1443 := $add.ref($add.ref($p1442, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1445 = load i64, i64* %1444, align 16, !dbg !2109, !psr.id !2119, !verifier.code !63 */
  $i1444 := $load.i64($M.632, $p1443);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1446 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1443, i32 0, i32 1, !dbg !2109, !psr.id !2120, !verifier.code !63 */
  $p1445 := $add.ref($add.ref($p1442, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1447 = load i64, i64* %1446, align 8, !dbg !2109, !psr.id !2121, !verifier.code !63 */
  $i1446 := $load.i64($M.632, $p1445);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1448 = call { i64, i64 } @FStar_UInt128_add(i64 %1440, i64 %1442, i64 %1445, i64 %1447), !dbg !2109, !psr.id !2122, !verifier.code !63 */
  call $p1447 := FStar_UInt128_add($i1439, $i1441, $i1444, $i1446);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1449 = bitcast i128* %194 to { i64, i64 }*, !dbg !2109, !psr.id !2123, !verifier.code !63 */
  $p1448 := $bitcast.ref.ref($p193);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1450 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1449, i32 0, i32 0, !dbg !2109, !psr.id !2124, !verifier.code !63 */
  $p1449 := $add.ref($add.ref($p1448, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1451 = extractvalue { i64, i64 } %1448, 0, !dbg !2109, !psr.id !2125, !verifier.code !63 */
  $i1450 := $extractvalue.i64($p1447, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1451, i64* %1450, align 16, !dbg !2109, !psr.id !2126, !verifier.code !63 */
  $M.633 := $store.i64($M.633, $p1449, $i1450);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1452 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1449, i32 0, i32 1, !dbg !2109, !psr.id !2127, !verifier.code !63 */
  $p1451 := $add.ref($add.ref($p1448, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1453 = extractvalue { i64, i64 } %1448, 1, !dbg !2109, !psr.id !2128, !verifier.code !63 */
  $i1452 := $extractvalue.i64($p1447, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1453, i64* %1452, align 8, !dbg !2109, !psr.id !2129, !verifier.code !63 */
  $M.633 := $store.i64($M.633, $p1451, $i1452);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  /* %1454 = load i128, i128* %194, align 16, !dbg !2109, !psr.id !2130, !verifier.code !63 */
  $i1453 := $load.i128($M.633, $p193);
  /* call void @llvm.dbg.value(metadata i128 %1454, metadata !8838, metadata !DIExpression()), !dbg !7022, !psr.id !8839, !verifier.code !64 */
  call {:cexpr "l_1"} boogie_si_record_i128($i1453);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %1454, i128* %195, align 16, !dbg !2133, !psr.id !2134, !verifier.code !63 */
  $M.634 := $store.i128($M.634, $p194, $i1453);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  /* %1455 = bitcast i128* %195 to { i64, i64 }*, !dbg !2133, !psr.id !2135, !verifier.code !63 */
  $p1454 := $bitcast.ref.ref($p194);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  /* %1456 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1455, i32 0, i32 0, !dbg !2133, !psr.id !2136, !verifier.code !63 */
  $p1455 := $add.ref($add.ref($p1454, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  /* %1457 = load i64, i64* %1456, align 16, !dbg !2133, !psr.id !2137, !verifier.code !63 */
  $i1456 := $load.i64($M.634, $p1455);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  /* %1458 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1455, i32 0, i32 1, !dbg !2133, !psr.id !2138, !verifier.code !63 */
  $p1457 := $add.ref($add.ref($p1454, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  /* %1459 = load i64, i64* %1458, align 8, !dbg !2133, !psr.id !2139, !verifier.code !63 */
  $i1458 := $load.i64($M.634, $p1457);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  /* %1460 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1457, i64 %1459), !dbg !2133, !psr.id !2140, !verifier.code !63 */
  call $i1459 := FStar_UInt128_uint128_to_uint64($i1456, $i1458);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 57} true;
  assume {:verifier.code 0} true;
  /* %1461 = and i64 %1460, 2251799813685247, !dbg !2141, !psr.id !2142, !verifier.code !63 */
  $i1460 := $and.i64($i1459, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1461, metadata !8850, metadata !DIExpression()), !dbg !7022, !psr.id !8851, !verifier.code !64 */
  call {:cexpr "tmp20"} boogie_si_record_i64($i1460);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* store i128 %1454, i128* %196, align 16, !dbg !2145, !psr.id !2146, !verifier.code !63 */
  $M.635 := $store.i128($M.635, $p195, $i1453);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* %1462 = bitcast i128* %196 to { i64, i64 }*, !dbg !2145, !psr.id !2147, !verifier.code !63 */
  $p1461 := $bitcast.ref.ref($p195);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* %1463 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1462, i32 0, i32 0, !dbg !2145, !psr.id !2148, !verifier.code !63 */
  $p1462 := $add.ref($add.ref($p1461, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* %1464 = load i64, i64* %1463, align 16, !dbg !2145, !psr.id !2149, !verifier.code !63 */
  $i1463 := $load.i64($M.635, $p1462);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* %1465 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1462, i32 0, i32 1, !dbg !2145, !psr.id !2150, !verifier.code !63 */
  $p1464 := $add.ref($add.ref($p1461, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* %1466 = load i64, i64* %1465, align 8, !dbg !2145, !psr.id !2151, !verifier.code !63 */
  $i1465 := $load.i64($M.635, $p1464);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* %1467 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1464, i64 %1466, i32 51), !dbg !2145, !psr.id !2152, !verifier.code !63 */
  call $p1466 := FStar_UInt128_shift_right($i1463, $i1465, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* %1468 = bitcast i128* %197 to { i64, i64 }*, !dbg !2145, !psr.id !2153, !verifier.code !63 */
  $p1467 := $bitcast.ref.ref($p196);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* %1469 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1468, i32 0, i32 0, !dbg !2145, !psr.id !2154, !verifier.code !63 */
  $p1468 := $add.ref($add.ref($p1467, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* %1470 = extractvalue { i64, i64 } %1467, 0, !dbg !2145, !psr.id !2155, !verifier.code !63 */
  $i1469 := $extractvalue.i64($p1466, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %1470, i64* %1469, align 16, !dbg !2145, !psr.id !2156, !verifier.code !63 */
  $M.636 := $store.i64($M.636, $p1468, $i1469);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* %1471 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1468, i32 0, i32 1, !dbg !2145, !psr.id !2157, !verifier.code !63 */
  $p1470 := $add.ref($add.ref($p1467, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* %1472 = extractvalue { i64, i64 } %1467, 1, !dbg !2145, !psr.id !2158, !verifier.code !63 */
  $i1471 := $extractvalue.i64($p1466, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %1472, i64* %1471, align 8, !dbg !2145, !psr.id !2159, !verifier.code !63 */
  $M.636 := $store.i64($M.636, $p1470, $i1471);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  /* %1473 = load i128, i128* %197, align 16, !dbg !2145, !psr.id !2160, !verifier.code !63 */
  $i1472 := $load.i128($M.636, $p196);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  /* store i128 %1473, i128* %198, align 16, !dbg !2161, !psr.id !2162, !verifier.code !63 */
  $M.637 := $store.i128($M.637, $p197, $i1472);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  /* %1474 = bitcast i128* %198 to { i64, i64 }*, !dbg !2161, !psr.id !2163, !verifier.code !63 */
  $p1473 := $bitcast.ref.ref($p197);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  /* %1475 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1474, i32 0, i32 0, !dbg !2161, !psr.id !2164, !verifier.code !63 */
  $p1474 := $add.ref($add.ref($p1473, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  /* %1476 = load i64, i64* %1475, align 16, !dbg !2161, !psr.id !2165, !verifier.code !63 */
  $i1475 := $load.i64($M.637, $p1474);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  /* %1477 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1474, i32 0, i32 1, !dbg !2161, !psr.id !2166, !verifier.code !63 */
  $p1476 := $add.ref($add.ref($p1473, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  /* %1478 = load i64, i64* %1477, align 8, !dbg !2161, !psr.id !2167, !verifier.code !63 */
  $i1477 := $load.i64($M.637, $p1476);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  /* %1479 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1476, i64 %1478), !dbg !2161, !psr.id !2168, !verifier.code !63 */
  call $i1478 := FStar_UInt128_uint128_to_uint64($i1475, $i1477);
  /* call void @llvm.dbg.value(metadata i64 %1479, metadata !8876, metadata !DIExpression()), !dbg !7022, !psr.id !8877, !verifier.code !64 */
  call {:cexpr "c20"} boogie_si_record_i64($i1478);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  /* %1480 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %1479), !dbg !2171, !psr.id !2172, !verifier.code !63 */
  call $p1479 := FStar_UInt128_uint64_to_uint128($i1478);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  /* %1481 = bitcast i128* %199 to { i64, i64 }*, !dbg !2171, !psr.id !2173, !verifier.code !63 */
  $p1480 := $bitcast.ref.ref($p198);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  /* %1482 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1481, i32 0, i32 0, !dbg !2171, !psr.id !2174, !verifier.code !63 */
  $p1481 := $add.ref($add.ref($p1480, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  /* %1483 = extractvalue { i64, i64 } %1480, 0, !dbg !2171, !psr.id !2175, !verifier.code !63 */
  $i1482 := $extractvalue.i64($p1479, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1483, i64* %1482, align 16, !dbg !2171, !psr.id !2176, !verifier.code !63 */
  $M.638 := $store.i64($M.638, $p1481, $i1482);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  /* %1484 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1481, i32 0, i32 1, !dbg !2171, !psr.id !2177, !verifier.code !63 */
  $p1483 := $add.ref($add.ref($p1480, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  /* %1485 = extractvalue { i64, i64 } %1480, 1, !dbg !2171, !psr.id !2178, !verifier.code !63 */
  $i1484 := $extractvalue.i64($p1479, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1485, i64* %1484, align 8, !dbg !2171, !psr.id !2179, !verifier.code !63 */
  $M.638 := $store.i64($M.638, $p1483, $i1484);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  /* %1486 = load i128, i128* %199, align 16, !dbg !2171, !psr.id !2180, !verifier.code !63 */
  $i1485 := $load.i128($M.638, $p198);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %793, i128* %200, align 16, !dbg !2181, !psr.id !2182, !verifier.code !63 */
  $M.639 := $store.i128($M.639, $p199, $i792);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1487 = bitcast i128* %200 to { i64, i64 }*, !dbg !2181, !psr.id !2183, !verifier.code !63 */
  $p1486 := $bitcast.ref.ref($p199);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1488 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1487, i32 0, i32 0, !dbg !2181, !psr.id !2184, !verifier.code !63 */
  $p1487 := $add.ref($add.ref($p1486, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1489 = load i64, i64* %1488, align 16, !dbg !2181, !psr.id !2185, !verifier.code !63 */
  $i1488 := $load.i64($M.639, $p1487);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1490 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1487, i32 0, i32 1, !dbg !2181, !psr.id !2186, !verifier.code !63 */
  $p1489 := $add.ref($add.ref($p1486, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1491 = load i64, i64* %1490, align 8, !dbg !2181, !psr.id !2187, !verifier.code !63 */
  $i1490 := $load.i64($M.639, $p1489);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1486, i128* %201, align 16, !dbg !2181, !psr.id !2188, !verifier.code !63 */
  $M.640 := $store.i128($M.640, $p200, $i1485);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1492 = bitcast i128* %201 to { i64, i64 }*, !dbg !2181, !psr.id !2189, !verifier.code !63 */
  $p1491 := $bitcast.ref.ref($p200);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1493 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1492, i32 0, i32 0, !dbg !2181, !psr.id !2190, !verifier.code !63 */
  $p1492 := $add.ref($add.ref($p1491, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1494 = load i64, i64* %1493, align 16, !dbg !2181, !psr.id !2191, !verifier.code !63 */
  $i1493 := $load.i64($M.640, $p1492);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1495 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1492, i32 0, i32 1, !dbg !2181, !psr.id !2192, !verifier.code !63 */
  $p1494 := $add.ref($add.ref($p1491, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1496 = load i64, i64* %1495, align 8, !dbg !2181, !psr.id !2193, !verifier.code !63 */
  $i1495 := $load.i64($M.640, $p1494);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1497 = call { i64, i64 } @FStar_UInt128_add(i64 %1489, i64 %1491, i64 %1494, i64 %1496), !dbg !2181, !psr.id !2194, !verifier.code !63 */
  call $p1496 := FStar_UInt128_add($i1488, $i1490, $i1493, $i1495);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1498 = bitcast i128* %202 to { i64, i64 }*, !dbg !2181, !psr.id !2195, !verifier.code !63 */
  $p1497 := $bitcast.ref.ref($p201);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1499 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1498, i32 0, i32 0, !dbg !2181, !psr.id !2196, !verifier.code !63 */
  $p1498 := $add.ref($add.ref($p1497, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1500 = extractvalue { i64, i64 } %1497, 0, !dbg !2181, !psr.id !2197, !verifier.code !63 */
  $i1499 := $extractvalue.i64($p1496, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1500, i64* %1499, align 16, !dbg !2181, !psr.id !2198, !verifier.code !63 */
  $M.641 := $store.i64($M.641, $p1498, $i1499);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1501 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1498, i32 0, i32 1, !dbg !2181, !psr.id !2199, !verifier.code !63 */
  $p1500 := $add.ref($add.ref($p1497, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1502 = extractvalue { i64, i64 } %1497, 1, !dbg !2181, !psr.id !2200, !verifier.code !63 */
  $i1501 := $extractvalue.i64($p1496, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1502, i64* %1501, align 8, !dbg !2181, !psr.id !2201, !verifier.code !63 */
  $M.641 := $store.i64($M.641, $p1500, $i1501);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  /* %1503 = load i128, i128* %202, align 16, !dbg !2181, !psr.id !2202, !verifier.code !63 */
  $i1502 := $load.i128($M.641, $p201);
  /* call void @llvm.dbg.value(metadata i128 %1503, metadata !8910, metadata !DIExpression()), !dbg !7022, !psr.id !8911, !verifier.code !64 */
  call {:cexpr "l_2"} boogie_si_record_i128($i1502);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %1503, i128* %203, align 16, !dbg !2205, !psr.id !2206, !verifier.code !63 */
  $M.642 := $store.i128($M.642, $p202, $i1502);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  /* %1504 = bitcast i128* %203 to { i64, i64 }*, !dbg !2205, !psr.id !2207, !verifier.code !63 */
  $p1503 := $bitcast.ref.ref($p202);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  /* %1505 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1504, i32 0, i32 0, !dbg !2205, !psr.id !2208, !verifier.code !63 */
  $p1504 := $add.ref($add.ref($p1503, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  /* %1506 = load i64, i64* %1505, align 16, !dbg !2205, !psr.id !2209, !verifier.code !63 */
  $i1505 := $load.i64($M.642, $p1504);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  /* %1507 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1504, i32 0, i32 1, !dbg !2205, !psr.id !2210, !verifier.code !63 */
  $p1506 := $add.ref($add.ref($p1503, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  /* %1508 = load i64, i64* %1507, align 8, !dbg !2205, !psr.id !2211, !verifier.code !63 */
  $i1507 := $load.i64($M.642, $p1506);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  /* %1509 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1506, i64 %1508), !dbg !2205, !psr.id !2212, !verifier.code !63 */
  call $i1508 := FStar_UInt128_uint128_to_uint64($i1505, $i1507);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 57} true;
  assume {:verifier.code 0} true;
  /* %1510 = and i64 %1509, 2251799813685247, !dbg !2213, !psr.id !2214, !verifier.code !63 */
  $i1509 := $and.i64($i1508, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1510, metadata !8922, metadata !DIExpression()), !dbg !7022, !psr.id !8923, !verifier.code !64 */
  call {:cexpr "tmp30"} boogie_si_record_i64($i1509);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* store i128 %1503, i128* %204, align 16, !dbg !2217, !psr.id !2218, !verifier.code !63 */
  $M.643 := $store.i128($M.643, $p203, $i1502);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* %1511 = bitcast i128* %204 to { i64, i64 }*, !dbg !2217, !psr.id !2219, !verifier.code !63 */
  $p1510 := $bitcast.ref.ref($p203);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* %1512 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1511, i32 0, i32 0, !dbg !2217, !psr.id !2220, !verifier.code !63 */
  $p1511 := $add.ref($add.ref($p1510, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* %1513 = load i64, i64* %1512, align 16, !dbg !2217, !psr.id !2221, !verifier.code !63 */
  $i1512 := $load.i64($M.643, $p1511);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* %1514 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1511, i32 0, i32 1, !dbg !2217, !psr.id !2222, !verifier.code !63 */
  $p1513 := $add.ref($add.ref($p1510, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* %1515 = load i64, i64* %1514, align 8, !dbg !2217, !psr.id !2223, !verifier.code !63 */
  $i1514 := $load.i64($M.643, $p1513);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* %1516 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1513, i64 %1515, i32 51), !dbg !2217, !psr.id !2224, !verifier.code !63 */
  call $p1515 := FStar_UInt128_shift_right($i1512, $i1514, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* %1517 = bitcast i128* %205 to { i64, i64 }*, !dbg !2217, !psr.id !2225, !verifier.code !63 */
  $p1516 := $bitcast.ref.ref($p204);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* %1518 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1517, i32 0, i32 0, !dbg !2217, !psr.id !2226, !verifier.code !63 */
  $p1517 := $add.ref($add.ref($p1516, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* %1519 = extractvalue { i64, i64 } %1516, 0, !dbg !2217, !psr.id !2227, !verifier.code !63 */
  $i1518 := $extractvalue.i64($p1515, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %1519, i64* %1518, align 16, !dbg !2217, !psr.id !2228, !verifier.code !63 */
  $M.644 := $store.i64($M.644, $p1517, $i1518);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* %1520 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1517, i32 0, i32 1, !dbg !2217, !psr.id !2229, !verifier.code !63 */
  $p1519 := $add.ref($add.ref($p1516, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* %1521 = extractvalue { i64, i64 } %1516, 1, !dbg !2217, !psr.id !2230, !verifier.code !63 */
  $i1520 := $extractvalue.i64($p1515, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %1521, i64* %1520, align 8, !dbg !2217, !psr.id !2231, !verifier.code !63 */
  $M.644 := $store.i64($M.644, $p1519, $i1520);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  /* %1522 = load i128, i128* %205, align 16, !dbg !2217, !psr.id !2232, !verifier.code !63 */
  $i1521 := $load.i128($M.644, $p204);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  /* store i128 %1522, i128* %206, align 16, !dbg !2233, !psr.id !2234, !verifier.code !63 */
  $M.645 := $store.i128($M.645, $p205, $i1521);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  /* %1523 = bitcast i128* %206 to { i64, i64 }*, !dbg !2233, !psr.id !2235, !verifier.code !63 */
  $p1522 := $bitcast.ref.ref($p205);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  /* %1524 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1523, i32 0, i32 0, !dbg !2233, !psr.id !2236, !verifier.code !63 */
  $p1523 := $add.ref($add.ref($p1522, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  /* %1525 = load i64, i64* %1524, align 16, !dbg !2233, !psr.id !2237, !verifier.code !63 */
  $i1524 := $load.i64($M.645, $p1523);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  /* %1526 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1523, i32 0, i32 1, !dbg !2233, !psr.id !2238, !verifier.code !63 */
  $p1525 := $add.ref($add.ref($p1522, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  /* %1527 = load i64, i64* %1526, align 8, !dbg !2233, !psr.id !2239, !verifier.code !63 */
  $i1526 := $load.i64($M.645, $p1525);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  /* %1528 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1525, i64 %1527), !dbg !2233, !psr.id !2240, !verifier.code !63 */
  call $i1527 := FStar_UInt128_uint128_to_uint64($i1524, $i1526);
  /* call void @llvm.dbg.value(metadata i64 %1528, metadata !8948, metadata !DIExpression()), !dbg !7022, !psr.id !8949, !verifier.code !64 */
  call {:cexpr "c30"} boogie_si_record_i64($i1527);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  /* %1529 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %1528), !dbg !2243, !psr.id !2244, !verifier.code !63 */
  call $p1528 := FStar_UInt128_uint64_to_uint128($i1527);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  /* %1530 = bitcast i128* %207 to { i64, i64 }*, !dbg !2243, !psr.id !2245, !verifier.code !63 */
  $p1529 := $bitcast.ref.ref($p206);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  /* %1531 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1530, i32 0, i32 0, !dbg !2243, !psr.id !2246, !verifier.code !63 */
  $p1530 := $add.ref($add.ref($p1529, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  /* %1532 = extractvalue { i64, i64 } %1529, 0, !dbg !2243, !psr.id !2247, !verifier.code !63 */
  $i1531 := $extractvalue.i64($p1528, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1532, i64* %1531, align 16, !dbg !2243, !psr.id !2248, !verifier.code !63 */
  $M.646 := $store.i64($M.646, $p1530, $i1531);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  /* %1533 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1530, i32 0, i32 1, !dbg !2243, !psr.id !2249, !verifier.code !63 */
  $p1532 := $add.ref($add.ref($p1529, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  /* %1534 = extractvalue { i64, i64 } %1529, 1, !dbg !2243, !psr.id !2250, !verifier.code !63 */
  $i1533 := $extractvalue.i64($p1528, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1534, i64* %1533, align 8, !dbg !2243, !psr.id !2251, !verifier.code !63 */
  $M.646 := $store.i64($M.646, $p1532, $i1533);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  /* %1535 = load i128, i128* %207, align 16, !dbg !2243, !psr.id !2252, !verifier.code !63 */
  $i1534 := $load.i128($M.646, $p206);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %817, i128* %208, align 16, !dbg !2253, !psr.id !2254, !verifier.code !63 */
  $M.647 := $store.i128($M.647, $p207, $i816);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1536 = bitcast i128* %208 to { i64, i64 }*, !dbg !2253, !psr.id !2255, !verifier.code !63 */
  $p1535 := $bitcast.ref.ref($p207);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1537 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1536, i32 0, i32 0, !dbg !2253, !psr.id !2256, !verifier.code !63 */
  $p1536 := $add.ref($add.ref($p1535, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1538 = load i64, i64* %1537, align 16, !dbg !2253, !psr.id !2257, !verifier.code !63 */
  $i1537 := $load.i64($M.647, $p1536);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1539 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1536, i32 0, i32 1, !dbg !2253, !psr.id !2258, !verifier.code !63 */
  $p1538 := $add.ref($add.ref($p1535, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1540 = load i64, i64* %1539, align 8, !dbg !2253, !psr.id !2259, !verifier.code !63 */
  $i1539 := $load.i64($M.647, $p1538);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1535, i128* %209, align 16, !dbg !2253, !psr.id !2260, !verifier.code !63 */
  $M.648 := $store.i128($M.648, $p208, $i1534);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1541 = bitcast i128* %209 to { i64, i64 }*, !dbg !2253, !psr.id !2261, !verifier.code !63 */
  $p1540 := $bitcast.ref.ref($p208);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1542 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1541, i32 0, i32 0, !dbg !2253, !psr.id !2262, !verifier.code !63 */
  $p1541 := $add.ref($add.ref($p1540, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1543 = load i64, i64* %1542, align 16, !dbg !2253, !psr.id !2263, !verifier.code !63 */
  $i1542 := $load.i64($M.648, $p1541);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1544 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1541, i32 0, i32 1, !dbg !2253, !psr.id !2264, !verifier.code !63 */
  $p1543 := $add.ref($add.ref($p1540, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1545 = load i64, i64* %1544, align 8, !dbg !2253, !psr.id !2265, !verifier.code !63 */
  $i1544 := $load.i64($M.648, $p1543);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1546 = call { i64, i64 } @FStar_UInt128_add(i64 %1538, i64 %1540, i64 %1543, i64 %1545), !dbg !2253, !psr.id !2266, !verifier.code !63 */
  call $p1545 := FStar_UInt128_add($i1537, $i1539, $i1542, $i1544);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1547 = bitcast i128* %210 to { i64, i64 }*, !dbg !2253, !psr.id !2267, !verifier.code !63 */
  $p1546 := $bitcast.ref.ref($p209);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1548 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1547, i32 0, i32 0, !dbg !2253, !psr.id !2268, !verifier.code !63 */
  $p1547 := $add.ref($add.ref($p1546, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1549 = extractvalue { i64, i64 } %1546, 0, !dbg !2253, !psr.id !2269, !verifier.code !63 */
  $i1548 := $extractvalue.i64($p1545, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1549, i64* %1548, align 16, !dbg !2253, !psr.id !2270, !verifier.code !63 */
  $M.649 := $store.i64($M.649, $p1547, $i1548);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1550 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1547, i32 0, i32 1, !dbg !2253, !psr.id !2271, !verifier.code !63 */
  $p1549 := $add.ref($add.ref($p1546, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1551 = extractvalue { i64, i64 } %1546, 1, !dbg !2253, !psr.id !2272, !verifier.code !63 */
  $i1550 := $extractvalue.i64($p1545, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1551, i64* %1550, align 8, !dbg !2253, !psr.id !2273, !verifier.code !63 */
  $M.649 := $store.i64($M.649, $p1549, $i1550);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  /* %1552 = load i128, i128* %210, align 16, !dbg !2253, !psr.id !2274, !verifier.code !63 */
  $i1551 := $load.i128($M.649, $p209);
  /* call void @llvm.dbg.value(metadata i128 %1552, metadata !8982, metadata !DIExpression()), !dbg !7022, !psr.id !8983, !verifier.code !64 */
  call {:cexpr "l_3"} boogie_si_record_i128($i1551);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  /* store i128 %1552, i128* %211, align 16, !dbg !2277, !psr.id !2278, !verifier.code !63 */
  $M.650 := $store.i128($M.650, $p210, $i1551);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  /* %1553 = bitcast i128* %211 to { i64, i64 }*, !dbg !2277, !psr.id !2279, !verifier.code !63 */
  $p1552 := $bitcast.ref.ref($p210);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  /* %1554 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1553, i32 0, i32 0, !dbg !2277, !psr.id !2280, !verifier.code !63 */
  $p1553 := $add.ref($add.ref($p1552, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  /* %1555 = load i64, i64* %1554, align 16, !dbg !2277, !psr.id !2281, !verifier.code !63 */
  $i1554 := $load.i64($M.650, $p1553);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  /* %1556 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1553, i32 0, i32 1, !dbg !2277, !psr.id !2282, !verifier.code !63 */
  $p1555 := $add.ref($add.ref($p1552, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  /* %1557 = load i64, i64* %1556, align 8, !dbg !2277, !psr.id !2283, !verifier.code !63 */
  $i1556 := $load.i64($M.650, $p1555);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  /* %1558 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1555, i64 %1557), !dbg !2277, !psr.id !2284, !verifier.code !63 */
  call $i1557 := FStar_UInt128_uint128_to_uint64($i1554, $i1556);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 57} true;
  assume {:verifier.code 0} true;
  /* %1559 = and i64 %1558, 2251799813685247, !dbg !2285, !psr.id !2286, !verifier.code !63 */
  $i1558 := $and.i64($i1557, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1559, metadata !8994, metadata !DIExpression()), !dbg !7022, !psr.id !8995, !verifier.code !64 */
  call {:cexpr "tmp40"} boogie_si_record_i64($i1558);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* store i128 %1552, i128* %212, align 16, !dbg !2289, !psr.id !2290, !verifier.code !63 */
  $M.651 := $store.i128($M.651, $p211, $i1551);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* %1560 = bitcast i128* %212 to { i64, i64 }*, !dbg !2289, !psr.id !2291, !verifier.code !63 */
  $p1559 := $bitcast.ref.ref($p211);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* %1561 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1560, i32 0, i32 0, !dbg !2289, !psr.id !2292, !verifier.code !63 */
  $p1560 := $add.ref($add.ref($p1559, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* %1562 = load i64, i64* %1561, align 16, !dbg !2289, !psr.id !2293, !verifier.code !63 */
  $i1561 := $load.i64($M.651, $p1560);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* %1563 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1560, i32 0, i32 1, !dbg !2289, !psr.id !2294, !verifier.code !63 */
  $p1562 := $add.ref($add.ref($p1559, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* %1564 = load i64, i64* %1563, align 8, !dbg !2289, !psr.id !2295, !verifier.code !63 */
  $i1563 := $load.i64($M.651, $p1562);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* %1565 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1562, i64 %1564, i32 51), !dbg !2289, !psr.id !2296, !verifier.code !63 */
  call $p1564 := FStar_UInt128_shift_right($i1561, $i1563, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* %1566 = bitcast i128* %213 to { i64, i64 }*, !dbg !2289, !psr.id !2297, !verifier.code !63 */
  $p1565 := $bitcast.ref.ref($p212);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* %1567 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1566, i32 0, i32 0, !dbg !2289, !psr.id !2298, !verifier.code !63 */
  $p1566 := $add.ref($add.ref($p1565, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* %1568 = extractvalue { i64, i64 } %1565, 0, !dbg !2289, !psr.id !2299, !verifier.code !63 */
  $i1567 := $extractvalue.i64($p1564, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %1568, i64* %1567, align 16, !dbg !2289, !psr.id !2300, !verifier.code !63 */
  $M.652 := $store.i64($M.652, $p1566, $i1567);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* %1569 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1566, i32 0, i32 1, !dbg !2289, !psr.id !2301, !verifier.code !63 */
  $p1568 := $add.ref($add.ref($p1565, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* %1570 = extractvalue { i64, i64 } %1565, 1, !dbg !2289, !psr.id !2302, !verifier.code !63 */
  $i1569 := $extractvalue.i64($p1564, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* store i64 %1570, i64* %1569, align 8, !dbg !2289, !psr.id !2303, !verifier.code !63 */
  $M.652 := $store.i64($M.652, $p1568, $i1569);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  /* %1571 = load i128, i128* %213, align 16, !dbg !2289, !psr.id !2304, !verifier.code !63 */
  $i1570 := $load.i128($M.652, $p212);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  /* store i128 %1571, i128* %214, align 16, !dbg !2305, !psr.id !2306, !verifier.code !63 */
  $M.653 := $store.i128($M.653, $p213, $i1570);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  /* %1572 = bitcast i128* %214 to { i64, i64 }*, !dbg !2305, !psr.id !2307, !verifier.code !63 */
  $p1571 := $bitcast.ref.ref($p213);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  /* %1573 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1572, i32 0, i32 0, !dbg !2305, !psr.id !2308, !verifier.code !63 */
  $p1572 := $add.ref($add.ref($p1571, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  /* %1574 = load i64, i64* %1573, align 16, !dbg !2305, !psr.id !2309, !verifier.code !63 */
  $i1573 := $load.i64($M.653, $p1572);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  /* %1575 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1572, i32 0, i32 1, !dbg !2305, !psr.id !2310, !verifier.code !63 */
  $p1574 := $add.ref($add.ref($p1571, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  /* %1576 = load i64, i64* %1575, align 8, !dbg !2305, !psr.id !2311, !verifier.code !63 */
  $i1575 := $load.i64($M.653, $p1574);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  /* %1577 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1574, i64 %1576), !dbg !2305, !psr.id !2312, !verifier.code !63 */
  call $i1576 := FStar_UInt128_uint128_to_uint64($i1573, $i1575);
  /* call void @llvm.dbg.value(metadata i64 %1577, metadata !9020, metadata !DIExpression()), !dbg !7022, !psr.id !9021, !verifier.code !64 */
  call {:cexpr "c40"} boogie_si_record_i64($i1576);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 274, 30} true;
  assume {:verifier.code 0} true;
  /* %1578 = mul i64 %1577, 19, !dbg !2315, !psr.id !2316, !verifier.code !63 */
  $i1577 := $mul.i64($i1576, 19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 274, 24} true;
  assume {:verifier.code 0} true;
  /* %1579 = add i64 %1363, %1578, !dbg !2317, !psr.id !2318, !verifier.code !63 */
  $i1578 := $add.i64($i1362, $i1577);
  /* call void @llvm.dbg.value(metadata i64 %1579, metadata !9026, metadata !DIExpression()), !dbg !7022, !psr.id !9027, !verifier.code !64 */
  call {:cexpr "l_4"} boogie_si_record_i64($i1578);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 275, 24} true;
  assume {:verifier.code 0} true;
  /* %1580 = and i64 %1579, 2251799813685247, !dbg !2321, !psr.id !2322, !verifier.code !63 */
  $i1579 := $and.i64($i1578, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1580, metadata !9030, metadata !DIExpression()), !dbg !7022, !psr.id !9031, !verifier.code !64 */
  call {:cexpr "tmp0_"} boogie_si_record_i64($i1579);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 276, 22} true;
  assume {:verifier.code 0} true;
  /* %1581 = lshr i64 %1579, 51, !dbg !2325, !psr.id !2326, !verifier.code !63 */
  $i1580 := $lshr.i64($i1578, 51);
  /* call void @llvm.dbg.value(metadata i64 %1581, metadata !9034, metadata !DIExpression()), !dbg !7022, !psr.id !9035, !verifier.code !64 */
  call {:cexpr "c50"} boogie_si_record_i64($i1580);
  /* call void @llvm.dbg.value(metadata i64 %1580, metadata !9036, metadata !DIExpression()), !dbg !7022, !psr.id !9037, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 278, 25} true;
  assume {:verifier.code 0} true;
  /* %1582 = add i64 %1412, %1581, !dbg !2331, !psr.id !2332, !verifier.code !63 */
  $i1581 := $add.i64($i1411, $i1580);
  /* call void @llvm.dbg.value(metadata i64 %1582, metadata !9040, metadata !DIExpression()), !dbg !7022, !psr.id !9041, !verifier.code !64 */
  call {:cexpr "o112"} boogie_si_record_i64($i1581);
  /* call void @llvm.dbg.value(metadata i64 %1461, metadata !9042, metadata !DIExpression()), !dbg !7022, !psr.id !9043, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1510, metadata !9044, metadata !DIExpression()), !dbg !7022, !psr.id !9045, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1559, metadata !9046, metadata !DIExpression()), !dbg !7022, !psr.id !9047, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  /* %1583 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 0), !dbg !2341, !psr.id !2342, !verifier.code !63 */
  call $p1582 := FStar_UInt128_uint64_to_uint128(0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  /* %1584 = bitcast i128* %215 to { i64, i64 }*, !dbg !2341, !psr.id !2343, !verifier.code !63 */
  $p1583 := $bitcast.ref.ref($p214);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  /* %1585 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1584, i32 0, i32 0, !dbg !2341, !psr.id !2344, !verifier.code !63 */
  $p1584 := $add.ref($add.ref($p1583, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  /* %1586 = extractvalue { i64, i64 } %1583, 0, !dbg !2341, !psr.id !2345, !verifier.code !63 */
  $i1585 := $extractvalue.i64($p1582, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  /* store i64 %1586, i64* %1585, align 16, !dbg !2341, !psr.id !2346, !verifier.code !63 */
  $M.654 := $store.i64($M.654, $p1584, $i1585);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  /* %1587 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1584, i32 0, i32 1, !dbg !2341, !psr.id !2347, !verifier.code !63 */
  $p1586 := $add.ref($add.ref($p1583, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  /* %1588 = extractvalue { i64, i64 } %1583, 1, !dbg !2341, !psr.id !2348, !verifier.code !63 */
  $i1587 := $extractvalue.i64($p1582, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  /* store i64 %1588, i64* %1587, align 8, !dbg !2341, !psr.id !2349, !verifier.code !63 */
  $M.654 := $store.i64($M.654, $p1586, $i1587);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  /* %1589 = load i128, i128* %215, align 16, !dbg !2341, !psr.id !2350, !verifier.code !63 */
  $i1588 := $load.i128($M.654, $p214);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* store i128 %1236, i128* %216, align 16, !dbg !2351, !psr.id !2352, !verifier.code !63 */
  $M.655 := $store.i128($M.655, $p215, $i1235);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1590 = bitcast i128* %216 to { i64, i64 }*, !dbg !2351, !psr.id !2353, !verifier.code !63 */
  $p1589 := $bitcast.ref.ref($p215);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1591 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1590, i32 0, i32 0, !dbg !2351, !psr.id !2354, !verifier.code !63 */
  $p1590 := $add.ref($add.ref($p1589, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1592 = load i64, i64* %1591, align 16, !dbg !2351, !psr.id !2355, !verifier.code !63 */
  $i1591 := $load.i64($M.655, $p1590);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1593 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1590, i32 0, i32 1, !dbg !2351, !psr.id !2356, !verifier.code !63 */
  $p1592 := $add.ref($add.ref($p1589, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1594 = load i64, i64* %1593, align 8, !dbg !2351, !psr.id !2357, !verifier.code !63 */
  $i1593 := $load.i64($M.655, $p1592);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* store i128 %1589, i128* %217, align 16, !dbg !2351, !psr.id !2358, !verifier.code !63 */
  $M.656 := $store.i128($M.656, $p216, $i1588);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1595 = bitcast i128* %217 to { i64, i64 }*, !dbg !2351, !psr.id !2359, !verifier.code !63 */
  $p1594 := $bitcast.ref.ref($p216);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1596 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1595, i32 0, i32 0, !dbg !2351, !psr.id !2360, !verifier.code !63 */
  $p1595 := $add.ref($add.ref($p1594, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1597 = load i64, i64* %1596, align 16, !dbg !2351, !psr.id !2361, !verifier.code !63 */
  $i1596 := $load.i64($M.656, $p1595);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1598 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1595, i32 0, i32 1, !dbg !2351, !psr.id !2362, !verifier.code !63 */
  $p1597 := $add.ref($add.ref($p1594, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1599 = load i64, i64* %1598, align 8, !dbg !2351, !psr.id !2363, !verifier.code !63 */
  $i1598 := $load.i64($M.656, $p1597);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1600 = call { i64, i64 } @FStar_UInt128_add(i64 %1592, i64 %1594, i64 %1597, i64 %1599), !dbg !2351, !psr.id !2364, !verifier.code !63 */
  call $p1599 := FStar_UInt128_add($i1591, $i1593, $i1596, $i1598);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1601 = bitcast i128* %218 to { i64, i64 }*, !dbg !2351, !psr.id !2365, !verifier.code !63 */
  $p1600 := $bitcast.ref.ref($p217);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1602 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1601, i32 0, i32 0, !dbg !2351, !psr.id !2366, !verifier.code !63 */
  $p1601 := $add.ref($add.ref($p1600, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1603 = extractvalue { i64, i64 } %1600, 0, !dbg !2351, !psr.id !2367, !verifier.code !63 */
  $i1602 := $extractvalue.i64($p1599, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %1603, i64* %1602, align 16, !dbg !2351, !psr.id !2368, !verifier.code !63 */
  $M.657 := $store.i64($M.657, $p1601, $i1602);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1604 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1601, i32 0, i32 1, !dbg !2351, !psr.id !2369, !verifier.code !63 */
  $p1603 := $add.ref($add.ref($p1600, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1605 = extractvalue { i64, i64 } %1600, 1, !dbg !2351, !psr.id !2370, !verifier.code !63 */
  $i1604 := $extractvalue.i64($p1599, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* store i64 %1605, i64* %1604, align 8, !dbg !2351, !psr.id !2371, !verifier.code !63 */
  $M.657 := $store.i64($M.657, $p1603, $i1604);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %1606 = load i128, i128* %218, align 16, !dbg !2351, !psr.id !2372, !verifier.code !63 */
  $i1605 := $load.i128($M.657, $p217);
  /* call void @llvm.dbg.value(metadata i128 %1606, metadata !9080, metadata !DIExpression()), !dbg !7022, !psr.id !9081, !verifier.code !64 */
  call {:cexpr "l_5"} boogie_si_record_i128($i1605);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %1606, i128* %219, align 16, !dbg !2375, !psr.id !2376, !verifier.code !63 */
  $M.658 := $store.i128($M.658, $p218, $i1605);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  /* %1607 = bitcast i128* %219 to { i64, i64 }*, !dbg !2375, !psr.id !2377, !verifier.code !63 */
  $p1606 := $bitcast.ref.ref($p218);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  /* %1608 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1607, i32 0, i32 0, !dbg !2375, !psr.id !2378, !verifier.code !63 */
  $p1607 := $add.ref($add.ref($p1606, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  /* %1609 = load i64, i64* %1608, align 16, !dbg !2375, !psr.id !2379, !verifier.code !63 */
  $i1608 := $load.i64($M.658, $p1607);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  /* %1610 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1607, i32 0, i32 1, !dbg !2375, !psr.id !2380, !verifier.code !63 */
  $p1609 := $add.ref($add.ref($p1606, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  /* %1611 = load i64, i64* %1610, align 8, !dbg !2375, !psr.id !2381, !verifier.code !63 */
  $i1610 := $load.i64($M.658, $p1609);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  /* %1612 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1609, i64 %1611), !dbg !2375, !psr.id !2382, !verifier.code !63 */
  call $i1611 := FStar_UInt128_uint128_to_uint64($i1608, $i1610);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 56} true;
  assume {:verifier.code 0} true;
  /* %1613 = and i64 %1612, 2251799813685247, !dbg !2383, !psr.id !2384, !verifier.code !63 */
  $i1612 := $and.i64($i1611, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1613, metadata !9092, metadata !DIExpression()), !dbg !7022, !psr.id !9093, !verifier.code !64 */
  call {:cexpr "tmp0"} boogie_si_record_i64($i1612);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %1606, i128* %220, align 16, !dbg !2387, !psr.id !2388, !verifier.code !63 */
  $M.659 := $store.i128($M.659, $p219, $i1605);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* %1614 = bitcast i128* %220 to { i64, i64 }*, !dbg !2387, !psr.id !2389, !verifier.code !63 */
  $p1613 := $bitcast.ref.ref($p219);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* %1615 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1614, i32 0, i32 0, !dbg !2387, !psr.id !2390, !verifier.code !63 */
  $p1614 := $add.ref($add.ref($p1613, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* %1616 = load i64, i64* %1615, align 16, !dbg !2387, !psr.id !2391, !verifier.code !63 */
  $i1615 := $load.i64($M.659, $p1614);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* %1617 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1614, i32 0, i32 1, !dbg !2387, !psr.id !2392, !verifier.code !63 */
  $p1616 := $add.ref($add.ref($p1613, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* %1618 = load i64, i64* %1617, align 8, !dbg !2387, !psr.id !2393, !verifier.code !63 */
  $i1617 := $load.i64($M.659, $p1616);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* %1619 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1616, i64 %1618, i32 51), !dbg !2387, !psr.id !2394, !verifier.code !63 */
  call $p1618 := FStar_UInt128_shift_right($i1615, $i1617, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* %1620 = bitcast i128* %221 to { i64, i64 }*, !dbg !2387, !psr.id !2395, !verifier.code !63 */
  $p1619 := $bitcast.ref.ref($p220);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* %1621 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1620, i32 0, i32 0, !dbg !2387, !psr.id !2396, !verifier.code !63 */
  $p1620 := $add.ref($add.ref($p1619, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* %1622 = extractvalue { i64, i64 } %1619, 0, !dbg !2387, !psr.id !2397, !verifier.code !63 */
  $i1621 := $extractvalue.i64($p1618, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1622, i64* %1621, align 16, !dbg !2387, !psr.id !2398, !verifier.code !63 */
  $M.660 := $store.i64($M.660, $p1620, $i1621);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* %1623 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1620, i32 0, i32 1, !dbg !2387, !psr.id !2399, !verifier.code !63 */
  $p1622 := $add.ref($add.ref($p1619, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* %1624 = extractvalue { i64, i64 } %1619, 1, !dbg !2387, !psr.id !2400, !verifier.code !63 */
  $i1623 := $extractvalue.i64($p1618, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1624, i64* %1623, align 8, !dbg !2387, !psr.id !2401, !verifier.code !63 */
  $M.660 := $store.i64($M.660, $p1622, $i1623);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  /* %1625 = load i128, i128* %221, align 16, !dbg !2387, !psr.id !2402, !verifier.code !63 */
  $i1624 := $load.i128($M.660, $p220);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %1625, i128* %222, align 16, !dbg !2403, !psr.id !2404, !verifier.code !63 */
  $M.661 := $store.i128($M.661, $p221, $i1624);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  /* %1626 = bitcast i128* %222 to { i64, i64 }*, !dbg !2403, !psr.id !2405, !verifier.code !63 */
  $p1625 := $bitcast.ref.ref($p221);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  /* %1627 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1626, i32 0, i32 0, !dbg !2403, !psr.id !2406, !verifier.code !63 */
  $p1626 := $add.ref($add.ref($p1625, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  /* %1628 = load i64, i64* %1627, align 16, !dbg !2403, !psr.id !2407, !verifier.code !63 */
  $i1627 := $load.i64($M.661, $p1626);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  /* %1629 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1626, i32 0, i32 1, !dbg !2403, !psr.id !2408, !verifier.code !63 */
  $p1628 := $add.ref($add.ref($p1625, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  /* %1630 = load i64, i64* %1629, align 8, !dbg !2403, !psr.id !2409, !verifier.code !63 */
  $i1629 := $load.i64($M.661, $p1628);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  /* %1631 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1628, i64 %1630), !dbg !2403, !psr.id !2410, !verifier.code !63 */
  call $i1630 := FStar_UInt128_uint128_to_uint64($i1627, $i1629);
  /* call void @llvm.dbg.value(metadata i64 %1631, metadata !9118, metadata !DIExpression()), !dbg !7022, !psr.id !9119, !verifier.code !64 */
  call {:cexpr "c0"} boogie_si_record_i64($i1630);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  /* %1632 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %1631), !dbg !2413, !psr.id !2414, !verifier.code !63 */
  call $p1631 := FStar_UInt128_uint64_to_uint128($i1630);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  /* %1633 = bitcast i128* %223 to { i64, i64 }*, !dbg !2413, !psr.id !2415, !verifier.code !63 */
  $p1632 := $bitcast.ref.ref($p222);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  /* %1634 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1633, i32 0, i32 0, !dbg !2413, !psr.id !2416, !verifier.code !63 */
  $p1633 := $add.ref($add.ref($p1632, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  /* %1635 = extractvalue { i64, i64 } %1632, 0, !dbg !2413, !psr.id !2417, !verifier.code !63 */
  $i1634 := $extractvalue.i64($p1631, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1635, i64* %1634, align 16, !dbg !2413, !psr.id !2418, !verifier.code !63 */
  $M.662 := $store.i64($M.662, $p1633, $i1634);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  /* %1636 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1633, i32 0, i32 1, !dbg !2413, !psr.id !2419, !verifier.code !63 */
  $p1635 := $add.ref($add.ref($p1632, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  /* %1637 = extractvalue { i64, i64 } %1632, 1, !dbg !2413, !psr.id !2420, !verifier.code !63 */
  $i1636 := $extractvalue.i64($p1631, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1637, i64* %1636, align 8, !dbg !2413, !psr.id !2421, !verifier.code !63 */
  $M.662 := $store.i64($M.662, $p1635, $i1636);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  /* %1638 = load i128, i128* %223, align 16, !dbg !2413, !psr.id !2422, !verifier.code !63 */
  $i1637 := $load.i128($M.662, $p222);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1260, i128* %224, align 16, !dbg !2423, !psr.id !2424, !verifier.code !63 */
  $M.663 := $store.i128($M.663, $p223, $i1259);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1639 = bitcast i128* %224 to { i64, i64 }*, !dbg !2423, !psr.id !2425, !verifier.code !63 */
  $p1638 := $bitcast.ref.ref($p223);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1640 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1639, i32 0, i32 0, !dbg !2423, !psr.id !2426, !verifier.code !63 */
  $p1639 := $add.ref($add.ref($p1638, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1641 = load i64, i64* %1640, align 16, !dbg !2423, !psr.id !2427, !verifier.code !63 */
  $i1640 := $load.i64($M.663, $p1639);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1642 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1639, i32 0, i32 1, !dbg !2423, !psr.id !2428, !verifier.code !63 */
  $p1641 := $add.ref($add.ref($p1638, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1643 = load i64, i64* %1642, align 8, !dbg !2423, !psr.id !2429, !verifier.code !63 */
  $i1642 := $load.i64($M.663, $p1641);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1638, i128* %225, align 16, !dbg !2423, !psr.id !2430, !verifier.code !63 */
  $M.664 := $store.i128($M.664, $p224, $i1637);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1644 = bitcast i128* %225 to { i64, i64 }*, !dbg !2423, !psr.id !2431, !verifier.code !63 */
  $p1643 := $bitcast.ref.ref($p224);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1645 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1644, i32 0, i32 0, !dbg !2423, !psr.id !2432, !verifier.code !63 */
  $p1644 := $add.ref($add.ref($p1643, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1646 = load i64, i64* %1645, align 16, !dbg !2423, !psr.id !2433, !verifier.code !63 */
  $i1645 := $load.i64($M.664, $p1644);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1647 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1644, i32 0, i32 1, !dbg !2423, !psr.id !2434, !verifier.code !63 */
  $p1646 := $add.ref($add.ref($p1643, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1648 = load i64, i64* %1647, align 8, !dbg !2423, !psr.id !2435, !verifier.code !63 */
  $i1647 := $load.i64($M.664, $p1646);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1649 = call { i64, i64 } @FStar_UInt128_add(i64 %1641, i64 %1643, i64 %1646, i64 %1648), !dbg !2423, !psr.id !2436, !verifier.code !63 */
  call $p1648 := FStar_UInt128_add($i1640, $i1642, $i1645, $i1647);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1650 = bitcast i128* %226 to { i64, i64 }*, !dbg !2423, !psr.id !2437, !verifier.code !63 */
  $p1649 := $bitcast.ref.ref($p225);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1651 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1650, i32 0, i32 0, !dbg !2423, !psr.id !2438, !verifier.code !63 */
  $p1650 := $add.ref($add.ref($p1649, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1652 = extractvalue { i64, i64 } %1649, 0, !dbg !2423, !psr.id !2439, !verifier.code !63 */
  $i1651 := $extractvalue.i64($p1648, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1652, i64* %1651, align 16, !dbg !2423, !psr.id !2440, !verifier.code !63 */
  $M.665 := $store.i64($M.665, $p1650, $i1651);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1653 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1650, i32 0, i32 1, !dbg !2423, !psr.id !2441, !verifier.code !63 */
  $p1652 := $add.ref($add.ref($p1649, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1654 = extractvalue { i64, i64 } %1649, 1, !dbg !2423, !psr.id !2442, !verifier.code !63 */
  $i1653 := $extractvalue.i64($p1648, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1654, i64* %1653, align 8, !dbg !2423, !psr.id !2443, !verifier.code !63 */
  $M.665 := $store.i64($M.665, $p1652, $i1653);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  /* %1655 = load i128, i128* %226, align 16, !dbg !2423, !psr.id !2444, !verifier.code !63 */
  $i1654 := $load.i128($M.665, $p225);
  /* call void @llvm.dbg.value(metadata i128 %1655, metadata !9152, metadata !DIExpression()), !dbg !7022, !psr.id !9153, !verifier.code !64 */
  call {:cexpr "l_6"} boogie_si_record_i128($i1654);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %1655, i128* %227, align 16, !dbg !2447, !psr.id !2448, !verifier.code !63 */
  $M.666 := $store.i128($M.666, $p226, $i1654);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  /* %1656 = bitcast i128* %227 to { i64, i64 }*, !dbg !2447, !psr.id !2449, !verifier.code !63 */
  $p1655 := $bitcast.ref.ref($p226);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  /* %1657 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1656, i32 0, i32 0, !dbg !2447, !psr.id !2450, !verifier.code !63 */
  $p1656 := $add.ref($add.ref($p1655, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  /* %1658 = load i64, i64* %1657, align 16, !dbg !2447, !psr.id !2451, !verifier.code !63 */
  $i1657 := $load.i64($M.666, $p1656);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  /* %1659 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1656, i32 0, i32 1, !dbg !2447, !psr.id !2452, !verifier.code !63 */
  $p1658 := $add.ref($add.ref($p1655, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  /* %1660 = load i64, i64* %1659, align 8, !dbg !2447, !psr.id !2453, !verifier.code !63 */
  $i1659 := $load.i64($M.666, $p1658);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  /* %1661 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1658, i64 %1660), !dbg !2447, !psr.id !2454, !verifier.code !63 */
  call $i1660 := FStar_UInt128_uint128_to_uint64($i1657, $i1659);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 56} true;
  assume {:verifier.code 0} true;
  /* %1662 = and i64 %1661, 2251799813685247, !dbg !2455, !psr.id !2456, !verifier.code !63 */
  $i1661 := $and.i64($i1660, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1662, metadata !9164, metadata !DIExpression()), !dbg !7022, !psr.id !9165, !verifier.code !64 */
  call {:cexpr "tmp1"} boogie_si_record_i64($i1661);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %1655, i128* %228, align 16, !dbg !2459, !psr.id !2460, !verifier.code !63 */
  $M.667 := $store.i128($M.667, $p227, $i1654);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* %1663 = bitcast i128* %228 to { i64, i64 }*, !dbg !2459, !psr.id !2461, !verifier.code !63 */
  $p1662 := $bitcast.ref.ref($p227);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* %1664 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1663, i32 0, i32 0, !dbg !2459, !psr.id !2462, !verifier.code !63 */
  $p1663 := $add.ref($add.ref($p1662, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* %1665 = load i64, i64* %1664, align 16, !dbg !2459, !psr.id !2463, !verifier.code !63 */
  $i1664 := $load.i64($M.667, $p1663);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* %1666 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1663, i32 0, i32 1, !dbg !2459, !psr.id !2464, !verifier.code !63 */
  $p1665 := $add.ref($add.ref($p1662, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* %1667 = load i64, i64* %1666, align 8, !dbg !2459, !psr.id !2465, !verifier.code !63 */
  $i1666 := $load.i64($M.667, $p1665);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* %1668 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1665, i64 %1667, i32 51), !dbg !2459, !psr.id !2466, !verifier.code !63 */
  call $p1667 := FStar_UInt128_shift_right($i1664, $i1666, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* %1669 = bitcast i128* %229 to { i64, i64 }*, !dbg !2459, !psr.id !2467, !verifier.code !63 */
  $p1668 := $bitcast.ref.ref($p228);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* %1670 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1669, i32 0, i32 0, !dbg !2459, !psr.id !2468, !verifier.code !63 */
  $p1669 := $add.ref($add.ref($p1668, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* %1671 = extractvalue { i64, i64 } %1668, 0, !dbg !2459, !psr.id !2469, !verifier.code !63 */
  $i1670 := $extractvalue.i64($p1667, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1671, i64* %1670, align 16, !dbg !2459, !psr.id !2470, !verifier.code !63 */
  $M.668 := $store.i64($M.668, $p1669, $i1670);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* %1672 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1669, i32 0, i32 1, !dbg !2459, !psr.id !2471, !verifier.code !63 */
  $p1671 := $add.ref($add.ref($p1668, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* %1673 = extractvalue { i64, i64 } %1668, 1, !dbg !2459, !psr.id !2472, !verifier.code !63 */
  $i1672 := $extractvalue.i64($p1667, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1673, i64* %1672, align 8, !dbg !2459, !psr.id !2473, !verifier.code !63 */
  $M.668 := $store.i64($M.668, $p1671, $i1672);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  /* %1674 = load i128, i128* %229, align 16, !dbg !2459, !psr.id !2474, !verifier.code !63 */
  $i1673 := $load.i128($M.668, $p228);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %1674, i128* %230, align 16, !dbg !2475, !psr.id !2476, !verifier.code !63 */
  $M.669 := $store.i128($M.669, $p229, $i1673);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  /* %1675 = bitcast i128* %230 to { i64, i64 }*, !dbg !2475, !psr.id !2477, !verifier.code !63 */
  $p1674 := $bitcast.ref.ref($p229);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  /* %1676 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1675, i32 0, i32 0, !dbg !2475, !psr.id !2478, !verifier.code !63 */
  $p1675 := $add.ref($add.ref($p1674, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  /* %1677 = load i64, i64* %1676, align 16, !dbg !2475, !psr.id !2479, !verifier.code !63 */
  $i1676 := $load.i64($M.669, $p1675);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  /* %1678 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1675, i32 0, i32 1, !dbg !2475, !psr.id !2480, !verifier.code !63 */
  $p1677 := $add.ref($add.ref($p1674, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  /* %1679 = load i64, i64* %1678, align 8, !dbg !2475, !psr.id !2481, !verifier.code !63 */
  $i1678 := $load.i64($M.669, $p1677);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  /* %1680 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1677, i64 %1679), !dbg !2475, !psr.id !2482, !verifier.code !63 */
  call $i1679 := FStar_UInt128_uint128_to_uint64($i1676, $i1678);
  /* call void @llvm.dbg.value(metadata i64 %1680, metadata !9190, metadata !DIExpression()), !dbg !7022, !psr.id !9191, !verifier.code !64 */
  call {:cexpr "c1"} boogie_si_record_i64($i1679);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  /* %1681 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %1680), !dbg !2485, !psr.id !2486, !verifier.code !63 */
  call $p1680 := FStar_UInt128_uint64_to_uint128($i1679);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  /* %1682 = bitcast i128* %231 to { i64, i64 }*, !dbg !2485, !psr.id !2487, !verifier.code !63 */
  $p1681 := $bitcast.ref.ref($p230);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  /* %1683 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1682, i32 0, i32 0, !dbg !2485, !psr.id !2488, !verifier.code !63 */
  $p1682 := $add.ref($add.ref($p1681, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  /* %1684 = extractvalue { i64, i64 } %1681, 0, !dbg !2485, !psr.id !2489, !verifier.code !63 */
  $i1683 := $extractvalue.i64($p1680, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1684, i64* %1683, align 16, !dbg !2485, !psr.id !2490, !verifier.code !63 */
  $M.670 := $store.i64($M.670, $p1682, $i1683);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  /* %1685 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1682, i32 0, i32 1, !dbg !2485, !psr.id !2491, !verifier.code !63 */
  $p1684 := $add.ref($add.ref($p1681, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  /* %1686 = extractvalue { i64, i64 } %1681, 1, !dbg !2485, !psr.id !2492, !verifier.code !63 */
  $i1685 := $extractvalue.i64($p1680, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1686, i64* %1685, align 8, !dbg !2485, !psr.id !2493, !verifier.code !63 */
  $M.670 := $store.i64($M.670, $p1684, $i1685);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  /* %1687 = load i128, i128* %231, align 16, !dbg !2485, !psr.id !2494, !verifier.code !63 */
  $i1686 := $load.i128($M.670, $p230);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1284, i128* %232, align 16, !dbg !2495, !psr.id !2496, !verifier.code !63 */
  $M.671 := $store.i128($M.671, $p231, $i1283);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1688 = bitcast i128* %232 to { i64, i64 }*, !dbg !2495, !psr.id !2497, !verifier.code !63 */
  $p1687 := $bitcast.ref.ref($p231);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1689 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1688, i32 0, i32 0, !dbg !2495, !psr.id !2498, !verifier.code !63 */
  $p1688 := $add.ref($add.ref($p1687, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1690 = load i64, i64* %1689, align 16, !dbg !2495, !psr.id !2499, !verifier.code !63 */
  $i1689 := $load.i64($M.671, $p1688);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1691 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1688, i32 0, i32 1, !dbg !2495, !psr.id !2500, !verifier.code !63 */
  $p1690 := $add.ref($add.ref($p1687, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1692 = load i64, i64* %1691, align 8, !dbg !2495, !psr.id !2501, !verifier.code !63 */
  $i1691 := $load.i64($M.671, $p1690);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1687, i128* %233, align 16, !dbg !2495, !psr.id !2502, !verifier.code !63 */
  $M.672 := $store.i128($M.672, $p232, $i1686);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1693 = bitcast i128* %233 to { i64, i64 }*, !dbg !2495, !psr.id !2503, !verifier.code !63 */
  $p1692 := $bitcast.ref.ref($p232);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1694 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1693, i32 0, i32 0, !dbg !2495, !psr.id !2504, !verifier.code !63 */
  $p1693 := $add.ref($add.ref($p1692, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1695 = load i64, i64* %1694, align 16, !dbg !2495, !psr.id !2505, !verifier.code !63 */
  $i1694 := $load.i64($M.672, $p1693);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1696 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1693, i32 0, i32 1, !dbg !2495, !psr.id !2506, !verifier.code !63 */
  $p1695 := $add.ref($add.ref($p1692, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1697 = load i64, i64* %1696, align 8, !dbg !2495, !psr.id !2507, !verifier.code !63 */
  $i1696 := $load.i64($M.672, $p1695);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1698 = call { i64, i64 } @FStar_UInt128_add(i64 %1690, i64 %1692, i64 %1695, i64 %1697), !dbg !2495, !psr.id !2508, !verifier.code !63 */
  call $p1697 := FStar_UInt128_add($i1689, $i1691, $i1694, $i1696);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1699 = bitcast i128* %234 to { i64, i64 }*, !dbg !2495, !psr.id !2509, !verifier.code !63 */
  $p1698 := $bitcast.ref.ref($p233);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1700 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1699, i32 0, i32 0, !dbg !2495, !psr.id !2510, !verifier.code !63 */
  $p1699 := $add.ref($add.ref($p1698, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1701 = extractvalue { i64, i64 } %1698, 0, !dbg !2495, !psr.id !2511, !verifier.code !63 */
  $i1700 := $extractvalue.i64($p1697, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1701, i64* %1700, align 16, !dbg !2495, !psr.id !2512, !verifier.code !63 */
  $M.673 := $store.i64($M.673, $p1699, $i1700);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1702 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1699, i32 0, i32 1, !dbg !2495, !psr.id !2513, !verifier.code !63 */
  $p1701 := $add.ref($add.ref($p1698, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1703 = extractvalue { i64, i64 } %1698, 1, !dbg !2495, !psr.id !2514, !verifier.code !63 */
  $i1702 := $extractvalue.i64($p1697, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1703, i64* %1702, align 8, !dbg !2495, !psr.id !2515, !verifier.code !63 */
  $M.673 := $store.i64($M.673, $p1701, $i1702);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  /* %1704 = load i128, i128* %234, align 16, !dbg !2495, !psr.id !2516, !verifier.code !63 */
  $i1703 := $load.i128($M.673, $p233);
  /* call void @llvm.dbg.value(metadata i128 %1704, metadata !9224, metadata !DIExpression()), !dbg !7022, !psr.id !9225, !verifier.code !64 */
  call {:cexpr "l_7"} boogie_si_record_i128($i1703);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %1704, i128* %235, align 16, !dbg !2519, !psr.id !2520, !verifier.code !63 */
  $M.674 := $store.i128($M.674, $p234, $i1703);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  /* %1705 = bitcast i128* %235 to { i64, i64 }*, !dbg !2519, !psr.id !2521, !verifier.code !63 */
  $p1704 := $bitcast.ref.ref($p234);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  /* %1706 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1705, i32 0, i32 0, !dbg !2519, !psr.id !2522, !verifier.code !63 */
  $p1705 := $add.ref($add.ref($p1704, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  /* %1707 = load i64, i64* %1706, align 16, !dbg !2519, !psr.id !2523, !verifier.code !63 */
  $i1706 := $load.i64($M.674, $p1705);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  /* %1708 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1705, i32 0, i32 1, !dbg !2519, !psr.id !2524, !verifier.code !63 */
  $p1707 := $add.ref($add.ref($p1704, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  /* %1709 = load i64, i64* %1708, align 8, !dbg !2519, !psr.id !2525, !verifier.code !63 */
  $i1708 := $load.i64($M.674, $p1707);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  /* %1710 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1707, i64 %1709), !dbg !2519, !psr.id !2526, !verifier.code !63 */
  call $i1709 := FStar_UInt128_uint128_to_uint64($i1706, $i1708);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 56} true;
  assume {:verifier.code 0} true;
  /* %1711 = and i64 %1710, 2251799813685247, !dbg !2527, !psr.id !2528, !verifier.code !63 */
  $i1710 := $and.i64($i1709, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1711, metadata !9236, metadata !DIExpression()), !dbg !7022, !psr.id !9237, !verifier.code !64 */
  call {:cexpr "tmp2"} boogie_si_record_i64($i1710);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %1704, i128* %236, align 16, !dbg !2531, !psr.id !2532, !verifier.code !63 */
  $M.675 := $store.i128($M.675, $p235, $i1703);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* %1712 = bitcast i128* %236 to { i64, i64 }*, !dbg !2531, !psr.id !2533, !verifier.code !63 */
  $p1711 := $bitcast.ref.ref($p235);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* %1713 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1712, i32 0, i32 0, !dbg !2531, !psr.id !2534, !verifier.code !63 */
  $p1712 := $add.ref($add.ref($p1711, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* %1714 = load i64, i64* %1713, align 16, !dbg !2531, !psr.id !2535, !verifier.code !63 */
  $i1713 := $load.i64($M.675, $p1712);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* %1715 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1712, i32 0, i32 1, !dbg !2531, !psr.id !2536, !verifier.code !63 */
  $p1714 := $add.ref($add.ref($p1711, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* %1716 = load i64, i64* %1715, align 8, !dbg !2531, !psr.id !2537, !verifier.code !63 */
  $i1715 := $load.i64($M.675, $p1714);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* %1717 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1714, i64 %1716, i32 51), !dbg !2531, !psr.id !2538, !verifier.code !63 */
  call $p1716 := FStar_UInt128_shift_right($i1713, $i1715, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* %1718 = bitcast i128* %237 to { i64, i64 }*, !dbg !2531, !psr.id !2539, !verifier.code !63 */
  $p1717 := $bitcast.ref.ref($p236);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* %1719 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1718, i32 0, i32 0, !dbg !2531, !psr.id !2540, !verifier.code !63 */
  $p1718 := $add.ref($add.ref($p1717, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* %1720 = extractvalue { i64, i64 } %1717, 0, !dbg !2531, !psr.id !2541, !verifier.code !63 */
  $i1719 := $extractvalue.i64($p1716, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1720, i64* %1719, align 16, !dbg !2531, !psr.id !2542, !verifier.code !63 */
  $M.676 := $store.i64($M.676, $p1718, $i1719);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* %1721 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1718, i32 0, i32 1, !dbg !2531, !psr.id !2543, !verifier.code !63 */
  $p1720 := $add.ref($add.ref($p1717, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* %1722 = extractvalue { i64, i64 } %1717, 1, !dbg !2531, !psr.id !2544, !verifier.code !63 */
  $i1721 := $extractvalue.i64($p1716, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1722, i64* %1721, align 8, !dbg !2531, !psr.id !2545, !verifier.code !63 */
  $M.676 := $store.i64($M.676, $p1720, $i1721);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  /* %1723 = load i128, i128* %237, align 16, !dbg !2531, !psr.id !2546, !verifier.code !63 */
  $i1722 := $load.i128($M.676, $p236);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %1723, i128* %238, align 16, !dbg !2547, !psr.id !2548, !verifier.code !63 */
  $M.677 := $store.i128($M.677, $p237, $i1722);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  /* %1724 = bitcast i128* %238 to { i64, i64 }*, !dbg !2547, !psr.id !2549, !verifier.code !63 */
  $p1723 := $bitcast.ref.ref($p237);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  /* %1725 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1724, i32 0, i32 0, !dbg !2547, !psr.id !2550, !verifier.code !63 */
  $p1724 := $add.ref($add.ref($p1723, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  /* %1726 = load i64, i64* %1725, align 16, !dbg !2547, !psr.id !2551, !verifier.code !63 */
  $i1725 := $load.i64($M.677, $p1724);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  /* %1727 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1724, i32 0, i32 1, !dbg !2547, !psr.id !2552, !verifier.code !63 */
  $p1726 := $add.ref($add.ref($p1723, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  /* %1728 = load i64, i64* %1727, align 8, !dbg !2547, !psr.id !2553, !verifier.code !63 */
  $i1727 := $load.i64($M.677, $p1726);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  /* %1729 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1726, i64 %1728), !dbg !2547, !psr.id !2554, !verifier.code !63 */
  call $i1728 := FStar_UInt128_uint128_to_uint64($i1725, $i1727);
  /* call void @llvm.dbg.value(metadata i64 %1729, metadata !9262, metadata !DIExpression()), !dbg !7022, !psr.id !9263, !verifier.code !64 */
  call {:cexpr "c2"} boogie_si_record_i64($i1728);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  /* %1730 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %1729), !dbg !2557, !psr.id !2558, !verifier.code !63 */
  call $p1729 := FStar_UInt128_uint64_to_uint128($i1728);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  /* %1731 = bitcast i128* %239 to { i64, i64 }*, !dbg !2557, !psr.id !2559, !verifier.code !63 */
  $p1730 := $bitcast.ref.ref($p238);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  /* %1732 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1731, i32 0, i32 0, !dbg !2557, !psr.id !2560, !verifier.code !63 */
  $p1731 := $add.ref($add.ref($p1730, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  /* %1733 = extractvalue { i64, i64 } %1730, 0, !dbg !2557, !psr.id !2561, !verifier.code !63 */
  $i1732 := $extractvalue.i64($p1729, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1733, i64* %1732, align 16, !dbg !2557, !psr.id !2562, !verifier.code !63 */
  $M.678 := $store.i64($M.678, $p1731, $i1732);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  /* %1734 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1731, i32 0, i32 1, !dbg !2557, !psr.id !2563, !verifier.code !63 */
  $p1733 := $add.ref($add.ref($p1730, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  /* %1735 = extractvalue { i64, i64 } %1730, 1, !dbg !2557, !psr.id !2564, !verifier.code !63 */
  $i1734 := $extractvalue.i64($p1729, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1735, i64* %1734, align 8, !dbg !2557, !psr.id !2565, !verifier.code !63 */
  $M.678 := $store.i64($M.678, $p1733, $i1734);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  /* %1736 = load i128, i128* %239, align 16, !dbg !2557, !psr.id !2566, !verifier.code !63 */
  $i1735 := $load.i128($M.678, $p238);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1308, i128* %240, align 16, !dbg !2567, !psr.id !2568, !verifier.code !63 */
  $M.679 := $store.i128($M.679, $p239, $i1307);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1737 = bitcast i128* %240 to { i64, i64 }*, !dbg !2567, !psr.id !2569, !verifier.code !63 */
  $p1736 := $bitcast.ref.ref($p239);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1738 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1737, i32 0, i32 0, !dbg !2567, !psr.id !2570, !verifier.code !63 */
  $p1737 := $add.ref($add.ref($p1736, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1739 = load i64, i64* %1738, align 16, !dbg !2567, !psr.id !2571, !verifier.code !63 */
  $i1738 := $load.i64($M.679, $p1737);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1740 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1737, i32 0, i32 1, !dbg !2567, !psr.id !2572, !verifier.code !63 */
  $p1739 := $add.ref($add.ref($p1736, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1741 = load i64, i64* %1740, align 8, !dbg !2567, !psr.id !2573, !verifier.code !63 */
  $i1740 := $load.i64($M.679, $p1739);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1736, i128* %241, align 16, !dbg !2567, !psr.id !2574, !verifier.code !63 */
  $M.680 := $store.i128($M.680, $p240, $i1735);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1742 = bitcast i128* %241 to { i64, i64 }*, !dbg !2567, !psr.id !2575, !verifier.code !63 */
  $p1741 := $bitcast.ref.ref($p240);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1743 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1742, i32 0, i32 0, !dbg !2567, !psr.id !2576, !verifier.code !63 */
  $p1742 := $add.ref($add.ref($p1741, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1744 = load i64, i64* %1743, align 16, !dbg !2567, !psr.id !2577, !verifier.code !63 */
  $i1743 := $load.i64($M.680, $p1742);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1745 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1742, i32 0, i32 1, !dbg !2567, !psr.id !2578, !verifier.code !63 */
  $p1744 := $add.ref($add.ref($p1741, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1746 = load i64, i64* %1745, align 8, !dbg !2567, !psr.id !2579, !verifier.code !63 */
  $i1745 := $load.i64($M.680, $p1744);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1747 = call { i64, i64 } @FStar_UInt128_add(i64 %1739, i64 %1741, i64 %1744, i64 %1746), !dbg !2567, !psr.id !2580, !verifier.code !63 */
  call $p1746 := FStar_UInt128_add($i1738, $i1740, $i1743, $i1745);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1748 = bitcast i128* %242 to { i64, i64 }*, !dbg !2567, !psr.id !2581, !verifier.code !63 */
  $p1747 := $bitcast.ref.ref($p241);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1749 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1748, i32 0, i32 0, !dbg !2567, !psr.id !2582, !verifier.code !63 */
  $p1748 := $add.ref($add.ref($p1747, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1750 = extractvalue { i64, i64 } %1747, 0, !dbg !2567, !psr.id !2583, !verifier.code !63 */
  $i1749 := $extractvalue.i64($p1746, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1750, i64* %1749, align 16, !dbg !2567, !psr.id !2584, !verifier.code !63 */
  $M.681 := $store.i64($M.681, $p1748, $i1749);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1751 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1748, i32 0, i32 1, !dbg !2567, !psr.id !2585, !verifier.code !63 */
  $p1750 := $add.ref($add.ref($p1747, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1752 = extractvalue { i64, i64 } %1747, 1, !dbg !2567, !psr.id !2586, !verifier.code !63 */
  $i1751 := $extractvalue.i64($p1746, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1752, i64* %1751, align 8, !dbg !2567, !psr.id !2587, !verifier.code !63 */
  $M.681 := $store.i64($M.681, $p1750, $i1751);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  /* %1753 = load i128, i128* %242, align 16, !dbg !2567, !psr.id !2588, !verifier.code !63 */
  $i1752 := $load.i128($M.681, $p241);
  /* call void @llvm.dbg.value(metadata i128 %1753, metadata !9296, metadata !DIExpression()), !dbg !7022, !psr.id !9297, !verifier.code !64 */
  call {:cexpr "l_8"} boogie_si_record_i128($i1752);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %1753, i128* %243, align 16, !dbg !2591, !psr.id !2592, !verifier.code !63 */
  $M.682 := $store.i128($M.682, $p242, $i1752);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  /* %1754 = bitcast i128* %243 to { i64, i64 }*, !dbg !2591, !psr.id !2593, !verifier.code !63 */
  $p1753 := $bitcast.ref.ref($p242);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  /* %1755 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1754, i32 0, i32 0, !dbg !2591, !psr.id !2594, !verifier.code !63 */
  $p1754 := $add.ref($add.ref($p1753, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  /* %1756 = load i64, i64* %1755, align 16, !dbg !2591, !psr.id !2595, !verifier.code !63 */
  $i1755 := $load.i64($M.682, $p1754);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  /* %1757 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1754, i32 0, i32 1, !dbg !2591, !psr.id !2596, !verifier.code !63 */
  $p1756 := $add.ref($add.ref($p1753, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  /* %1758 = load i64, i64* %1757, align 8, !dbg !2591, !psr.id !2597, !verifier.code !63 */
  $i1757 := $load.i64($M.682, $p1756);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  /* %1759 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1756, i64 %1758), !dbg !2591, !psr.id !2598, !verifier.code !63 */
  call $i1758 := FStar_UInt128_uint128_to_uint64($i1755, $i1757);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 56} true;
  assume {:verifier.code 0} true;
  /* %1760 = and i64 %1759, 2251799813685247, !dbg !2599, !psr.id !2600, !verifier.code !63 */
  $i1759 := $and.i64($i1758, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1760, metadata !9308, metadata !DIExpression()), !dbg !7022, !psr.id !9309, !verifier.code !64 */
  call {:cexpr "tmp3"} boogie_si_record_i64($i1759);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %1753, i128* %244, align 16, !dbg !2603, !psr.id !2604, !verifier.code !63 */
  $M.683 := $store.i128($M.683, $p243, $i1752);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* %1761 = bitcast i128* %244 to { i64, i64 }*, !dbg !2603, !psr.id !2605, !verifier.code !63 */
  $p1760 := $bitcast.ref.ref($p243);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* %1762 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1761, i32 0, i32 0, !dbg !2603, !psr.id !2606, !verifier.code !63 */
  $p1761 := $add.ref($add.ref($p1760, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* %1763 = load i64, i64* %1762, align 16, !dbg !2603, !psr.id !2607, !verifier.code !63 */
  $i1762 := $load.i64($M.683, $p1761);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* %1764 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1761, i32 0, i32 1, !dbg !2603, !psr.id !2608, !verifier.code !63 */
  $p1763 := $add.ref($add.ref($p1760, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* %1765 = load i64, i64* %1764, align 8, !dbg !2603, !psr.id !2609, !verifier.code !63 */
  $i1764 := $load.i64($M.683, $p1763);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* %1766 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1763, i64 %1765, i32 51), !dbg !2603, !psr.id !2610, !verifier.code !63 */
  call $p1765 := FStar_UInt128_shift_right($i1762, $i1764, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* %1767 = bitcast i128* %245 to { i64, i64 }*, !dbg !2603, !psr.id !2611, !verifier.code !63 */
  $p1766 := $bitcast.ref.ref($p244);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* %1768 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1767, i32 0, i32 0, !dbg !2603, !psr.id !2612, !verifier.code !63 */
  $p1767 := $add.ref($add.ref($p1766, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* %1769 = extractvalue { i64, i64 } %1766, 0, !dbg !2603, !psr.id !2613, !verifier.code !63 */
  $i1768 := $extractvalue.i64($p1765, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1769, i64* %1768, align 16, !dbg !2603, !psr.id !2614, !verifier.code !63 */
  $M.684 := $store.i64($M.684, $p1767, $i1768);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* %1770 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1767, i32 0, i32 1, !dbg !2603, !psr.id !2615, !verifier.code !63 */
  $p1769 := $add.ref($add.ref($p1766, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* %1771 = extractvalue { i64, i64 } %1766, 1, !dbg !2603, !psr.id !2616, !verifier.code !63 */
  $i1770 := $extractvalue.i64($p1765, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1771, i64* %1770, align 8, !dbg !2603, !psr.id !2617, !verifier.code !63 */
  $M.684 := $store.i64($M.684, $p1769, $i1770);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  /* %1772 = load i128, i128* %245, align 16, !dbg !2603, !psr.id !2618, !verifier.code !63 */
  $i1771 := $load.i128($M.684, $p244);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %1772, i128* %246, align 16, !dbg !2619, !psr.id !2620, !verifier.code !63 */
  $M.685 := $store.i128($M.685, $p245, $i1771);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  /* %1773 = bitcast i128* %246 to { i64, i64 }*, !dbg !2619, !psr.id !2621, !verifier.code !63 */
  $p1772 := $bitcast.ref.ref($p245);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  /* %1774 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1773, i32 0, i32 0, !dbg !2619, !psr.id !2622, !verifier.code !63 */
  $p1773 := $add.ref($add.ref($p1772, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  /* %1775 = load i64, i64* %1774, align 16, !dbg !2619, !psr.id !2623, !verifier.code !63 */
  $i1774 := $load.i64($M.685, $p1773);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  /* %1776 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1773, i32 0, i32 1, !dbg !2619, !psr.id !2624, !verifier.code !63 */
  $p1775 := $add.ref($add.ref($p1772, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  /* %1777 = load i64, i64* %1776, align 8, !dbg !2619, !psr.id !2625, !verifier.code !63 */
  $i1776 := $load.i64($M.685, $p1775);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  /* %1778 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1775, i64 %1777), !dbg !2619, !psr.id !2626, !verifier.code !63 */
  call $i1777 := FStar_UInt128_uint128_to_uint64($i1774, $i1776);
  /* call void @llvm.dbg.value(metadata i64 %1778, metadata !9334, metadata !DIExpression()), !dbg !7022, !psr.id !9335, !verifier.code !64 */
  call {:cexpr "c3"} boogie_si_record_i64($i1777);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  /* %1779 = call { i64, i64 } @FStar_UInt128_uint64_to_uint128(i64 %1778), !dbg !2629, !psr.id !2630, !verifier.code !63 */
  call $p1778 := FStar_UInt128_uint64_to_uint128($i1777);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  /* %1780 = bitcast i128* %247 to { i64, i64 }*, !dbg !2629, !psr.id !2631, !verifier.code !63 */
  $p1779 := $bitcast.ref.ref($p246);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  /* %1781 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1780, i32 0, i32 0, !dbg !2629, !psr.id !2632, !verifier.code !63 */
  $p1780 := $add.ref($add.ref($p1779, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  /* %1782 = extractvalue { i64, i64 } %1779, 0, !dbg !2629, !psr.id !2633, !verifier.code !63 */
  $i1781 := $extractvalue.i64($p1778, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1782, i64* %1781, align 16, !dbg !2629, !psr.id !2634, !verifier.code !63 */
  $M.686 := $store.i64($M.686, $p1780, $i1781);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  /* %1783 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1780, i32 0, i32 1, !dbg !2629, !psr.id !2635, !verifier.code !63 */
  $p1782 := $add.ref($add.ref($p1779, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  /* %1784 = extractvalue { i64, i64 } %1779, 1, !dbg !2629, !psr.id !2636, !verifier.code !63 */
  $i1783 := $extractvalue.i64($p1778, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  /* store i64 %1784, i64* %1783, align 8, !dbg !2629, !psr.id !2637, !verifier.code !63 */
  $M.686 := $store.i64($M.686, $p1782, $i1783);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  /* %1785 = load i128, i128* %247, align 16, !dbg !2629, !psr.id !2638, !verifier.code !63 */
  $i1784 := $load.i128($M.686, $p246);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1332, i128* %248, align 16, !dbg !2639, !psr.id !2640, !verifier.code !63 */
  $M.687 := $store.i128($M.687, $p247, $i1331);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1786 = bitcast i128* %248 to { i64, i64 }*, !dbg !2639, !psr.id !2641, !verifier.code !63 */
  $p1785 := $bitcast.ref.ref($p247);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1787 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1786, i32 0, i32 0, !dbg !2639, !psr.id !2642, !verifier.code !63 */
  $p1786 := $add.ref($add.ref($p1785, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1788 = load i64, i64* %1787, align 16, !dbg !2639, !psr.id !2643, !verifier.code !63 */
  $i1787 := $load.i64($M.687, $p1786);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1789 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1786, i32 0, i32 1, !dbg !2639, !psr.id !2644, !verifier.code !63 */
  $p1788 := $add.ref($add.ref($p1785, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1790 = load i64, i64* %1789, align 8, !dbg !2639, !psr.id !2645, !verifier.code !63 */
  $i1789 := $load.i64($M.687, $p1788);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* store i128 %1785, i128* %249, align 16, !dbg !2639, !psr.id !2646, !verifier.code !63 */
  $M.688 := $store.i128($M.688, $p248, $i1784);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1791 = bitcast i128* %249 to { i64, i64 }*, !dbg !2639, !psr.id !2647, !verifier.code !63 */
  $p1790 := $bitcast.ref.ref($p248);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1792 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1791, i32 0, i32 0, !dbg !2639, !psr.id !2648, !verifier.code !63 */
  $p1791 := $add.ref($add.ref($p1790, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1793 = load i64, i64* %1792, align 16, !dbg !2639, !psr.id !2649, !verifier.code !63 */
  $i1792 := $load.i64($M.688, $p1791);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1794 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1791, i32 0, i32 1, !dbg !2639, !psr.id !2650, !verifier.code !63 */
  $p1793 := $add.ref($add.ref($p1790, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1795 = load i64, i64* %1794, align 8, !dbg !2639, !psr.id !2651, !verifier.code !63 */
  $i1794 := $load.i64($M.688, $p1793);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1796 = call { i64, i64 } @FStar_UInt128_add(i64 %1788, i64 %1790, i64 %1793, i64 %1795), !dbg !2639, !psr.id !2652, !verifier.code !63 */
  call $p1795 := FStar_UInt128_add($i1787, $i1789, $i1792, $i1794);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1797 = bitcast i128* %250 to { i64, i64 }*, !dbg !2639, !psr.id !2653, !verifier.code !63 */
  $p1796 := $bitcast.ref.ref($p249);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1798 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1797, i32 0, i32 0, !dbg !2639, !psr.id !2654, !verifier.code !63 */
  $p1797 := $add.ref($add.ref($p1796, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1799 = extractvalue { i64, i64 } %1796, 0, !dbg !2639, !psr.id !2655, !verifier.code !63 */
  $i1798 := $extractvalue.i64($p1795, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1799, i64* %1798, align 16, !dbg !2639, !psr.id !2656, !verifier.code !63 */
  $M.689 := $store.i64($M.689, $p1797, $i1798);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1800 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1797, i32 0, i32 1, !dbg !2639, !psr.id !2657, !verifier.code !63 */
  $p1799 := $add.ref($add.ref($p1796, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1801 = extractvalue { i64, i64 } %1796, 1, !dbg !2639, !psr.id !2658, !verifier.code !63 */
  $i1800 := $extractvalue.i64($p1795, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* store i64 %1801, i64* %1800, align 8, !dbg !2639, !psr.id !2659, !verifier.code !63 */
  $M.689 := $store.i64($M.689, $p1799, $i1800);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  /* %1802 = load i128, i128* %250, align 16, !dbg !2639, !psr.id !2660, !verifier.code !63 */
  $i1801 := $load.i128($M.689, $p249);
  /* call void @llvm.dbg.value(metadata i128 %1802, metadata !9368, metadata !DIExpression()), !dbg !7022, !psr.id !9369, !verifier.code !64 */
  call {:cexpr "l_9"} boogie_si_record_i128($i1801);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  /* store i128 %1802, i128* %251, align 16, !dbg !2663, !psr.id !2664, !verifier.code !63 */
  $M.690 := $store.i128($M.690, $p250, $i1801);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  /* %1803 = bitcast i128* %251 to { i64, i64 }*, !dbg !2663, !psr.id !2665, !verifier.code !63 */
  $p1802 := $bitcast.ref.ref($p250);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  /* %1804 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1803, i32 0, i32 0, !dbg !2663, !psr.id !2666, !verifier.code !63 */
  $p1803 := $add.ref($add.ref($p1802, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  /* %1805 = load i64, i64* %1804, align 16, !dbg !2663, !psr.id !2667, !verifier.code !63 */
  $i1804 := $load.i64($M.690, $p1803);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  /* %1806 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1803, i32 0, i32 1, !dbg !2663, !psr.id !2668, !verifier.code !63 */
  $p1805 := $add.ref($add.ref($p1802, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  /* %1807 = load i64, i64* %1806, align 8, !dbg !2663, !psr.id !2669, !verifier.code !63 */
  $i1806 := $load.i64($M.690, $p1805);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  /* %1808 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1805, i64 %1807), !dbg !2663, !psr.id !2670, !verifier.code !63 */
  call $i1807 := FStar_UInt128_uint128_to_uint64($i1804, $i1806);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 56} true;
  assume {:verifier.code 0} true;
  /* %1809 = and i64 %1808, 2251799813685247, !dbg !2671, !psr.id !2672, !verifier.code !63 */
  $i1808 := $and.i64($i1807, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1809, metadata !9380, metadata !DIExpression()), !dbg !7022, !psr.id !9381, !verifier.code !64 */
  call {:cexpr "tmp4"} boogie_si_record_i64($i1808);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* store i128 %1802, i128* %252, align 16, !dbg !2675, !psr.id !2676, !verifier.code !63 */
  $M.691 := $store.i128($M.691, $p251, $i1801);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* %1810 = bitcast i128* %252 to { i64, i64 }*, !dbg !2675, !psr.id !2677, !verifier.code !63 */
  $p1809 := $bitcast.ref.ref($p251);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* %1811 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1810, i32 0, i32 0, !dbg !2675, !psr.id !2678, !verifier.code !63 */
  $p1810 := $add.ref($add.ref($p1809, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* %1812 = load i64, i64* %1811, align 16, !dbg !2675, !psr.id !2679, !verifier.code !63 */
  $i1811 := $load.i64($M.691, $p1810);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* %1813 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1810, i32 0, i32 1, !dbg !2675, !psr.id !2680, !verifier.code !63 */
  $p1812 := $add.ref($add.ref($p1809, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* %1814 = load i64, i64* %1813, align 8, !dbg !2675, !psr.id !2681, !verifier.code !63 */
  $i1813 := $load.i64($M.691, $p1812);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* %1815 = call { i64, i64 } @FStar_UInt128_shift_right(i64 %1812, i64 %1814, i32 51), !dbg !2675, !psr.id !2682, !verifier.code !63 */
  call $p1814 := FStar_UInt128_shift_right($i1811, $i1813, 51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* %1816 = bitcast i128* %253 to { i64, i64 }*, !dbg !2675, !psr.id !2683, !verifier.code !63 */
  $p1815 := $bitcast.ref.ref($p252);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* %1817 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1816, i32 0, i32 0, !dbg !2675, !psr.id !2684, !verifier.code !63 */
  $p1816 := $add.ref($add.ref($p1815, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* %1818 = extractvalue { i64, i64 } %1815, 0, !dbg !2675, !psr.id !2685, !verifier.code !63 */
  $i1817 := $extractvalue.i64($p1814, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1818, i64* %1817, align 16, !dbg !2675, !psr.id !2686, !verifier.code !63 */
  $M.692 := $store.i64($M.692, $p1816, $i1817);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* %1819 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1816, i32 0, i32 1, !dbg !2675, !psr.id !2687, !verifier.code !63 */
  $p1818 := $add.ref($add.ref($p1815, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* %1820 = extractvalue { i64, i64 } %1815, 1, !dbg !2675, !psr.id !2688, !verifier.code !63 */
  $i1819 := $extractvalue.i64($p1814, 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* store i64 %1820, i64* %1819, align 8, !dbg !2675, !psr.id !2689, !verifier.code !63 */
  $M.692 := $store.i64($M.692, $p1818, $i1819);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  /* %1821 = load i128, i128* %253, align 16, !dbg !2675, !psr.id !2690, !verifier.code !63 */
  $i1820 := $load.i128($M.692, $p252);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  /* store i128 %1821, i128* %254, align 16, !dbg !2691, !psr.id !2692, !verifier.code !63 */
  $M.693 := $store.i128($M.693, $p253, $i1820);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  /* %1822 = bitcast i128* %254 to { i64, i64 }*, !dbg !2691, !psr.id !2693, !verifier.code !63 */
  $p1821 := $bitcast.ref.ref($p253);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  /* %1823 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1822, i32 0, i32 0, !dbg !2691, !psr.id !2694, !verifier.code !63 */
  $p1822 := $add.ref($add.ref($p1821, $mul.ref(0, 16)), $mul.ref(0, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  /* %1824 = load i64, i64* %1823, align 16, !dbg !2691, !psr.id !2695, !verifier.code !63 */
  $i1823 := $load.i64($M.693, $p1822);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  /* %1825 = getelementptr inbounds { i64, i64 }, { i64, i64 }* %1822, i32 0, i32 1, !dbg !2691, !psr.id !2696, !verifier.code !63 */
  $p1824 := $add.ref($add.ref($p1821, $mul.ref(0, 16)), $mul.ref(8, 1));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  /* %1826 = load i64, i64* %1825, align 8, !dbg !2691, !psr.id !2697, !verifier.code !63 */
  $i1825 := $load.i64($M.693, $p1824);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  /* %1827 = call i64 @FStar_UInt128_uint128_to_uint64(i64 %1824, i64 %1826), !dbg !2691, !psr.id !2698, !verifier.code !63 */
  call $i1826 := FStar_UInt128_uint128_to_uint64($i1823, $i1825);
  /* call void @llvm.dbg.value(metadata i64 %1827, metadata !9406, metadata !DIExpression()), !dbg !7022, !psr.id !9407, !verifier.code !64 */
  call {:cexpr "c4"} boogie_si_record_i64($i1826);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 298, 29} true;
  assume {:verifier.code 0} true;
  /* %1828 = mul i64 %1827, 19, !dbg !2701, !psr.id !2702, !verifier.code !63 */
  $i1827 := $mul.i64($i1826, 19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 298, 24} true;
  assume {:verifier.code 0} true;
  /* %1829 = add i64 %1613, %1828, !dbg !2703, !psr.id !2704, !verifier.code !63 */
  $i1828 := $add.i64($i1612, $i1827);
  /* call void @llvm.dbg.value(metadata i64 %1829, metadata !9412, metadata !DIExpression()), !dbg !7022, !psr.id !9413, !verifier.code !64 */
  call {:cexpr "l_10"} boogie_si_record_i64($i1828);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 299, 26} true;
  assume {:verifier.code 0} true;
  /* %1830 = and i64 %1829, 2251799813685247, !dbg !2707, !psr.id !2708, !verifier.code !63 */
  $i1829 := $and.i64($i1828, 2251799813685247);
  /* call void @llvm.dbg.value(metadata i64 %1830, metadata !9416, metadata !DIExpression()), !dbg !7022, !psr.id !9417, !verifier.code !64 */
  call {:cexpr "tmp0_0"} boogie_si_record_i64($i1829);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 300, 22} true;
  assume {:verifier.code 0} true;
  /* %1831 = lshr i64 %1829, 51, !dbg !2711, !psr.id !2712, !verifier.code !63 */
  $i1830 := $lshr.i64($i1828, 51);
  /* call void @llvm.dbg.value(metadata i64 %1831, metadata !9420, metadata !DIExpression()), !dbg !7022, !psr.id !9421, !verifier.code !64 */
  call {:cexpr "c5"} boogie_si_record_i64($i1830);
  /* call void @llvm.dbg.value(metadata i64 %1830, metadata !9422, metadata !DIExpression()), !dbg !7022, !psr.id !9423, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 302, 24} true;
  assume {:verifier.code 0} true;
  /* %1832 = add i64 %1662, %1831, !dbg !2717, !psr.id !2718, !verifier.code !63 */
  $i1831 := $add.i64($i1661, $i1830);
  /* call void @llvm.dbg.value(metadata i64 %1832, metadata !9426, metadata !DIExpression()), !dbg !7022, !psr.id !9427, !verifier.code !64 */
  call {:cexpr "o212"} boogie_si_record_i64($i1831);
  /* call void @llvm.dbg.value(metadata i64 %1711, metadata !9428, metadata !DIExpression()), !dbg !7022, !psr.id !9429, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1760, metadata !9430, metadata !DIExpression()), !dbg !7022, !psr.id !9431, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1809, metadata !9432, metadata !DIExpression()), !dbg !7022, !psr.id !9433, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1580, metadata !9434, metadata !DIExpression()), !dbg !7022, !psr.id !9435, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1582, metadata !9436, metadata !DIExpression()), !dbg !7022, !psr.id !9437, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1461, metadata !9438, metadata !DIExpression()), !dbg !7022, !psr.id !9439, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1510, metadata !9440, metadata !DIExpression()), !dbg !7022, !psr.id !9441, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1559, metadata !9442, metadata !DIExpression()), !dbg !7022, !psr.id !9443, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1830, metadata !9444, metadata !DIExpression()), !dbg !7022, !psr.id !9445, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1832, metadata !9446, metadata !DIExpression()), !dbg !7022, !psr.id !9447, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1711, metadata !9448, metadata !DIExpression()), !dbg !7022, !psr.id !9449, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1760, metadata !9450, metadata !DIExpression()), !dbg !7022, !psr.id !9451, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i64 %1809, metadata !9452, metadata !DIExpression()), !dbg !7022, !psr.id !9453, !verifier.code !64 */
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 316, 3} true;
  assume {:verifier.code 0} true;
  /* %1833 = getelementptr inbounds i64, i64* %0, i64 0, !dbg !2747, !psr.id !2748, !verifier.code !63 */
  $p1832 := $add.ref($p0, $mul.ref(0, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 316, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1580, i64* %1833, align 8, !dbg !2749, !psr.id !2750, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1832, $i1579);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 317, 3} true;
  assume {:verifier.code 0} true;
  /* %1834 = getelementptr inbounds i64, i64* %0, i64 1, !dbg !2751, !psr.id !2752, !verifier.code !63 */
  $p1833 := $add.ref($p0, $mul.ref(1, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 317, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1582, i64* %1834, align 8, !dbg !2753, !psr.id !2754, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1833, $i1581);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 318, 3} true;
  assume {:verifier.code 0} true;
  /* %1835 = getelementptr inbounds i64, i64* %0, i64 2, !dbg !2755, !psr.id !2756, !verifier.code !63 */
  $p1834 := $add.ref($p0, $mul.ref(2, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 318, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1461, i64* %1835, align 8, !dbg !2757, !psr.id !2758, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1834, $i1460);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 319, 3} true;
  assume {:verifier.code 0} true;
  /* %1836 = getelementptr inbounds i64, i64* %0, i64 3, !dbg !2759, !psr.id !2760, !verifier.code !63 */
  $p1835 := $add.ref($p0, $mul.ref(3, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 319, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1510, i64* %1836, align 8, !dbg !2761, !psr.id !2762, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1835, $i1509);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 320, 3} true;
  assume {:verifier.code 0} true;
  /* %1837 = getelementptr inbounds i64, i64* %0, i64 4, !dbg !2763, !psr.id !2764, !verifier.code !63 */
  $p1836 := $add.ref($p0, $mul.ref(4, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 320, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1559, i64* %1837, align 8, !dbg !2765, !psr.id !2766, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1836, $i1558);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 321, 3} true;
  assume {:verifier.code 0} true;
  /* %1838 = getelementptr inbounds i64, i64* %0, i64 5, !dbg !2767, !psr.id !2768, !verifier.code !63 */
  $p1837 := $add.ref($p0, $mul.ref(5, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 321, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1830, i64* %1838, align 8, !dbg !2769, !psr.id !2770, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1837, $i1829);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 322, 3} true;
  assume {:verifier.code 0} true;
  /* %1839 = getelementptr inbounds i64, i64* %0, i64 6, !dbg !2771, !psr.id !2772, !verifier.code !63 */
  $p1838 := $add.ref($p0, $mul.ref(6, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 322, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1832, i64* %1839, align 8, !dbg !2773, !psr.id !2774, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1838, $i1831);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 323, 3} true;
  assume {:verifier.code 0} true;
  /* %1840 = getelementptr inbounds i64, i64* %0, i64 7, !dbg !2775, !psr.id !2776, !verifier.code !63 */
  $p1839 := $add.ref($p0, $mul.ref(7, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 323, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1711, i64* %1840, align 8, !dbg !2777, !psr.id !2778, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1839, $i1710);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 324, 3} true;
  assume {:verifier.code 0} true;
  /* %1841 = getelementptr inbounds i64, i64* %0, i64 8, !dbg !2779, !psr.id !2780, !verifier.code !63 */
  $p1840 := $add.ref($p0, $mul.ref(8, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 324, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1760, i64* %1841, align 8, !dbg !2781, !psr.id !2782, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1840, $i1759);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 325, 3} true;
  assume {:verifier.code 0} true;
  /* %1842 = getelementptr inbounds i64, i64* %0, i64 9, !dbg !2783, !psr.id !2784, !verifier.code !63 */
  $p1841 := $add.ref($p0, $mul.ref(9, 8));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 325, 11} true;
  assume {:verifier.code 0} true;
  /* store i64 %1809, i64* %1842, align 8, !dbg !2785, !psr.id !2786, !verifier.code !63 */
  $M.0 := $store.i64($M.0, $p1841, $i1808);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 326, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !2787, !psr.id !2788, !verifier.code !63 */
  $exn := false;
  return;
}
const Hacl_Curve25519_51_scalarmult_wrapper: ref;
axiom (Hacl_Curve25519_51_scalarmult_wrapper == $sub.ref(0, 31992));
procedure {:entrypoint} Hacl_Curve25519_51_scalarmult_wrapper($p0: ref, $p1: ref, $p2: ref)
{
  var $p3: ref;
  var $p4: ref;
  var $p5: ref;
  var $p6: ref;
  var $p7: ref;
$bb0:
  call $initialize();
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 5, 13} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:Hacl_Curve25519_51_scalarmult_wrapper"} boogie_si_record_ref(Hacl_Curve25519_51_scalarmult_wrapper);
  call {:cexpr "smack:arg:Hacl_Curve25519_51_scalarmult_wrapper:$p0"} boogie_si_record_ref($p0);
  call {:cexpr "smack:arg:Hacl_Curve25519_51_scalarmult_wrapper:$p1"} boogie_si_record_ref($p1);
  call {:cexpr "smack:arg:Hacl_Curve25519_51_scalarmult_wrapper:$p2"} boogie_si_record_ref($p2);
  /* call void @llvm.dbg.value(metadata i8* %0, metadata !9497, metadata !DIExpression()), !dbg !9498, !psr.id !9499, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i8* %1, metadata !9500, metadata !DIExpression()), !dbg !9498, !psr.id !9501, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i8* %2, metadata !9502, metadata !DIExpression()), !dbg !9498, !psr.id !9503, !verifier.code !64 */
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 5, 13} true;
  assume {:verifier.code 0} true;
  /* %4 = call %struct.smack_value* (i8*, ...) bitcast (%struct.smack_value* (...)* @__SMACK_value to %struct.smack_value* (i8*, ...)*)(i8* %0), !dbg !68, !psr.id !69, !verifier.code !63 */
  call {:name $p0} $p3 := __SMACK_value.ref($p0);
  assume $isExternal($p3);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p3);
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 5, 3} true;
  assume {:verifier.code 0} true;
  /* call void @public_in(%struct.smack_value* %4), !dbg !70, !psr.id !71, !verifier.code !63 */
  call public_in($p3);
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 6, 13} true;
  assume {:verifier.code 0} true;
  /* %5 = call %struct.smack_value* (i8*, ...) bitcast (%struct.smack_value* (...)* @__SMACK_value to %struct.smack_value* (i8*, ...)*)(i8* %1), !dbg !72, !psr.id !73, !verifier.code !63 */
  call {:name $p1} $p4 := __SMACK_value.ref($p1);
  assume $isExternal($p4);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p4);
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 6, 3} true;
  assume {:verifier.code 0} true;
  /* call void @public_in(%struct.smack_value* %5), !dbg !74, !psr.id !75, !verifier.code !63 */
  call public_in($p4);
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 7, 13} true;
  assume {:verifier.code 0} true;
  /* %6 = call %struct.smack_value* (i8*, ...) bitcast (%struct.smack_value* (...)* @__SMACK_value to %struct.smack_value* (i8*, ...)*)(i8* %2), !dbg !76, !psr.id !77, !verifier.code !63 */
  call {:name $p2} $p5 := __SMACK_value.ref($p2);
  assume $isExternal($p5);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p5);
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 7, 3} true;
  assume {:verifier.code 0} true;
  /* call void @public_in(%struct.smack_value* %6), !dbg !78, !psr.id !79, !verifier.code !63 */
  call public_in($p5);
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 8, 13} true;
  assume {:verifier.code 1} true;
  /* %7 = call %struct.smack_value* @__SMACK_values(i8* %2, i32 32), !dbg !80, !psr.id !81, !verifier.code !82 */
  call {:name $p2} {:array "$load.i8", $M.220, $p2, 1, 32} $p6 := __SMACK_values($p2, 32);
  assume $isExternal($p6);
  call {:cexpr "smack:ext:__SMACK_values"} boogie_si_record_ref($p6);
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 8, 3} true;
  assume {:verifier.code 0} true;
  /* call void @public_in(%struct.smack_value* %7), !dbg !83, !psr.id !84, !verifier.code !63 */
  call public_in($p6);
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 9, 13} true;
  assume {:verifier.code 1} true;
  /* %8 = call %struct.smack_value* @__SMACK_values(i8* %0, i32 32), !dbg !85, !psr.id !86, !verifier.code !82 */
  call {:name $p0} {:array "$load.i8", $M.228, $p0, 1, 32} $p7 := __SMACK_values($p0, 32);
  assume $isExternal($p7);
  call {:cexpr "smack:ext:__SMACK_values"} boogie_si_record_ref($p7);
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 9, 3} true;
  assume {:verifier.code 0} true;
  /* call void @public_in(%struct.smack_value* %8), !dbg !87, !psr.id !88, !verifier.code !63 */
  call public_in($p7);
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 10, 3} true;
  assume {:verifier.code 0} true;
  /* call void @Hacl_Curve25519_51_scalarmult(i8* %0, i8* %1, i8* %2), !dbg !89, !psr.id !90, !verifier.code !63 */
  call Hacl_Curve25519_51_scalarmult($p0, $p1, $p2);
  assume {:sourceloc "Hacl_Curve25519_51_scalarmult.c", 11, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !91, !psr.id !92, !verifier.code !63 */
  $exn := false;
  return;
}
const __SMACK_value: ref;
axiom (__SMACK_value == $sub.ref(0, 33024));
procedure {:inline 1} __SMACK_value.ref(p.0: ref)
  returns ($r: ref);
const public_in: ref;
axiom (public_in == $sub.ref(0, 34056));
procedure {:inline 1} public_in($p0: ref);
const __SMACK_values: ref;
axiom (__SMACK_values == $sub.ref(0, 35088));
procedure {:inline 1} __SMACK_values($p0: ref, $i1: i32)
  returns ($r: ref);
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0, 36120));
procedure {:inline 1} __SMACK_code.ref($p0: ref);
procedure {:inline 1} __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0, 37152));
procedure {:inline 1} __VERIFIER_assume($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 29} true;
  assume {:verifier.code 1} true;
  /* call void @llvm.dbg.value(metadata i32 %0, metadata !9533, metadata !DIExpression()), !dbg !9534, !verifier.code !64 */
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
  /* call void @llvm.dbg.value(metadata i32 %0, metadata !9535, metadata !DIExpression()), !dbg !9537, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 29} true;
  assume {:verifier.code 1} true;
  /* call void (i8*, ...) @__SMACK_code(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)) #6, !dbg !67, !verifier.code !68 */
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 45, 3} true;
  assume {:verifier.code 1} true;
  /* call void (i8*, ...) @__SMACK_code(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i32 %0), !dbg !69, !verifier.code !68 */
  assume $i0 != $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 46, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !70, !verifier.code !62 */
  $exn := false;
  return;
}
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0, 38184));
procedure {:inline 1} __SMACK_dummy($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 29} true;
  assume {:verifier.code 1} true;
  /* call void @llvm.dbg.value(metadata i32 %0, metadata !9535, metadata !DIExpression()), !dbg !9542, !verifier.code !64 */
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 29} true;
  assume {:verifier.code 1} true;
  /* call void (i8*, ...) @__SMACK_code(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)), !dbg !63, !verifier.code !64 */
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 59} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !65, !verifier.code !62 */
  $exn := false;
  return;
}
const __SMACK_and32: ref;
axiom (__SMACK_and32 == $sub.ref(0, 39216));
procedure {:inline 1} __SMACK_and32($i0: i32, $i1: i32)
  returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i8: i32;
  var $i7: i32;
  var $i4: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i1;
  var $i21: i1;
  var $i23: i32;
  var $i22: i32;
  var $i19: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $i36: i1;
  var $i38: i32;
  var $i37: i32;
  var $i34: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i50: i1;
  var $i51: i1;
  var $i53: i32;
  var $i52: i32;
  var $i49: i32;
  var $i54: i64;
  var $i55: i64;
  var $i56: i32;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i65: i1;
  var $i66: i1;
  var $i68: i32;
  var $i67: i32;
  var $i64: i32;
  var $i69: i64;
  var $i70: i64;
  var $i71: i32;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i80: i1;
  var $i81: i1;
  var $i83: i32;
  var $i82: i32;
  var $i79: i32;
  var $i84: i64;
  var $i85: i64;
  var $i86: i32;
  var $i87: i32;
  var $i88: i64;
  var $i89: i64;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i95: i1;
  var $i96: i1;
  var $i98: i32;
  var $i97: i32;
  var $i94: i32;
  var $i99: i64;
  var $i100: i64;
  var $i101: i32;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i110: i1;
  var $i111: i1;
  var $i113: i32;
  var $i112: i32;
  var $i109: i32;
  var $i114: i64;
  var $i115: i64;
  var $i116: i32;
  var $i117: i32;
  var $i118: i64;
  var $i119: i64;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i125: i1;
  var $i126: i1;
  var $i128: i32;
  var $i127: i32;
  var $i124: i32;
  var $i129: i64;
  var $i130: i64;
  var $i131: i32;
  var $i132: i32;
  var $i133: i64;
  var $i134: i64;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i140: i1;
  var $i141: i1;
  var $i143: i32;
  var $i142: i32;
  var $i139: i32;
  var $i144: i64;
  var $i145: i64;
  var $i146: i32;
  var $i147: i32;
  var $i148: i64;
  var $i149: i64;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i155: i1;
  var $i156: i1;
  var $i158: i32;
  var $i157: i32;
  var $i154: i32;
  var $i159: i64;
  var $i160: i64;
  var $i161: i32;
  var $i162: i32;
  var $i163: i64;
  var $i164: i64;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i170: i1;
  var $i171: i1;
  var $i173: i32;
  var $i172: i32;
  var $i169: i32;
  var $i174: i64;
  var $i175: i64;
  var $i176: i32;
  var $i177: i32;
  var $i178: i64;
  var $i179: i64;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i185: i1;
  var $i186: i1;
  var $i188: i32;
  var $i187: i32;
  var $i184: i32;
  var $i189: i64;
  var $i190: i64;
  var $i191: i32;
  var $i192: i32;
  var $i193: i64;
  var $i194: i64;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $i200: i1;
  var $i201: i1;
  var $i203: i32;
  var $i202: i32;
  var $i199: i32;
  var $i204: i64;
  var $i205: i64;
  var $i206: i32;
  var $i207: i32;
  var $i208: i64;
  var $i209: i64;
  var $i210: i32;
  var $i211: i32;
  var $i212: i32;
  var $i213: i1;
  var $i215: i1;
  var $i216: i1;
  var $i218: i32;
  var $i217: i32;
  var $i214: i32;
  var $i219: i64;
  var $i220: i64;
  var $i221: i32;
  var $i222: i32;
  var $i223: i64;
  var $i224: i64;
  var $i225: i32;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $i230: i1;
  var $i231: i1;
  var $i233: i32;
  var $i232: i32;
  var $i229: i32;
  var $i234: i64;
  var $i235: i64;
  var $i236: i32;
  var $i237: i32;
  var $i238: i64;
  var $i239: i64;
  var $i240: i32;
  var $i241: i32;
  var $i242: i32;
  var $i243: i1;
  var $i245: i1;
  var $i246: i1;
  var $i248: i32;
  var $i247: i32;
  var $i244: i32;
  var $i249: i64;
  var $i250: i64;
  var $i251: i32;
  var $i252: i32;
  var $i253: i64;
  var $i254: i64;
  var $i255: i32;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i260: i1;
  var $i261: i1;
  var $i263: i32;
  var $i262: i32;
  var $i259: i32;
  var $i264: i64;
  var $i265: i64;
  var $i266: i32;
  var $i267: i32;
  var $i268: i64;
  var $i269: i64;
  var $i270: i32;
  var $i271: i32;
  var $i272: i32;
  var $i273: i1;
  var $i275: i1;
  var $i276: i1;
  var $i278: i32;
  var $i277: i32;
  var $i274: i32;
  var $i279: i64;
  var $i280: i64;
  var $i281: i32;
  var $i282: i32;
  var $i283: i64;
  var $i284: i64;
  var $i285: i32;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $i290: i1;
  var $i291: i1;
  var $i293: i32;
  var $i292: i32;
  var $i289: i32;
  var $i294: i64;
  var $i295: i64;
  var $i296: i32;
  var $i297: i32;
  var $i298: i64;
  var $i299: i64;
  var $i300: i32;
  var $i301: i32;
  var $i302: i32;
  var $i303: i1;
  var $i305: i1;
  var $i306: i1;
  var $i308: i32;
  var $i307: i32;
  var $i304: i32;
  var $i309: i64;
  var $i310: i64;
  var $i311: i32;
  var $i312: i32;
  var $i313: i64;
  var $i314: i64;
  var $i315: i32;
  var $i316: i32;
  var $i317: i32;
  var $i318: i1;
  var $i320: i1;
  var $i321: i1;
  var $i323: i32;
  var $i322: i32;
  var $i319: i32;
  var $i324: i64;
  var $i325: i64;
  var $i326: i32;
  var $i327: i32;
  var $i328: i64;
  var $i329: i64;
  var $i330: i32;
  var $i331: i32;
  var $i332: i32;
  var $i333: i1;
  var $i335: i1;
  var $i336: i1;
  var $i338: i32;
  var $i337: i32;
  var $i334: i32;
  var $i339: i64;
  var $i340: i64;
  var $i341: i32;
  var $i342: i32;
  var $i343: i64;
  var $i344: i64;
  var $i345: i32;
  var $i346: i32;
  var $i347: i32;
  var $i348: i1;
  var $i350: i1;
  var $i351: i1;
  var $i353: i32;
  var $i352: i32;
  var $i349: i32;
  var $i354: i64;
  var $i355: i64;
  var $i356: i32;
  var $i357: i32;
  var $i358: i64;
  var $i359: i64;
  var $i360: i32;
  var $i361: i32;
  var $i362: i32;
  var $i363: i1;
  var $i365: i1;
  var $i366: i1;
  var $i368: i32;
  var $i367: i32;
  var $i364: i32;
  var $i369: i64;
  var $i370: i64;
  var $i371: i32;
  var $i372: i32;
  var $i373: i64;
  var $i374: i64;
  var $i375: i32;
  var $i376: i32;
  var $i377: i32;
  var $i378: i1;
  var $i380: i1;
  var $i381: i1;
  var $i383: i32;
  var $i382: i32;
  var $i379: i32;
  var $i384: i64;
  var $i385: i64;
  var $i386: i32;
  var $i387: i32;
  var $i388: i64;
  var $i389: i64;
  var $i390: i32;
  var $i391: i32;
  var $i392: i32;
  var $i393: i1;
  var $i395: i1;
  var $i396: i1;
  var $i398: i32;
  var $i397: i32;
  var $i394: i32;
  var $i399: i64;
  var $i400: i64;
  var $i401: i32;
  var $i402: i32;
  var $i403: i64;
  var $i404: i64;
  var $i405: i32;
  var $i406: i32;
  var $i407: i32;
  var $i408: i1;
  var $i410: i1;
  var $i411: i1;
  var $i413: i32;
  var $i412: i32;
  var $i409: i32;
  var $i414: i64;
  var $i415: i64;
  var $i416: i32;
  var $i417: i32;
  var $i418: i64;
  var $i419: i64;
  var $i420: i32;
  var $i421: i32;
  var $i422: i32;
  var $i423: i1;
  var $i425: i1;
  var $i426: i1;
  var $i428: i32;
  var $i427: i32;
  var $i424: i32;
  var $i429: i64;
  var $i430: i64;
  var $i431: i32;
  var $i432: i32;
  var $i433: i64;
  var $i434: i64;
  var $i435: i32;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $i440: i1;
  var $i441: i1;
  var $i443: i32;
  var $i442: i32;
  var $i439: i32;
  var $i444: i64;
  var $i445: i64;
  var $i446: i32;
  var $i447: i32;
  var $i448: i64;
  var $i449: i64;
  var $i450: i32;
  var $i451: i32;
  var $i452: i32;
  var $i453: i1;
  var $i455: i1;
  var $i456: i1;
  var $i458: i32;
  var $i457: i32;
  var $i454: i32;
  var $i459: i64;
  var $i460: i64;
  var $i461: i32;
  var $i462: i32;
  var $i463: i64;
  var $i464: i64;
  var $i465: i32;
  var $i466: i32;
  var $i467: i32;
  var $i468: i1;
  var $i470: i1;
  var $i471: i1;
  var $i473: i32;
  var $i472: i32;
  var $i469: i32;
  var $i474: i64;
  var $i475: i64;
  var $i476: i32;
  var $i477: i32;
  var $i478: i64;
  var $i479: i64;
  var $i480: i32;
  var $i481: i32;
  var $i482: i32;
  var $i483: i1;
  var $i485: i1;
  var $i486: i1;
  var $i488: i32;
  var $i487: i32;
  var $i484: i32;
  var $i489: i64;
  var $i490: i64;
  var $i491: i32;
  var $i492: i32;
  var $i493: i64;
  var $i494: i64;
  var $i495: i32;
  var $i496: i32;
  var $i497: i32;
  var $i498: i1;
  var $i500: i1;
  var $i501: i1;
  var $i503: i32;
  var $i502: i32;
  var $i499: i32;
  var $i504: i64;
  var $i505: i64;
  var $i506: i32;
  var $i507: i32;
  var $i508: i64;
  var $i509: i64;
  var $i510: i32;
  var $i511: i32;
  var $i512: i32;
  var $i513: i1;
  var $i515: i1;
  var $i516: i1;
  var $i518: i32;
  var $i517: i32;
  var $i514: i32;
  var $i519: i64;
  var $i520: i64;
  var $i521: i32;
  var $i522: i32;
  var $i523: i64;
  var $i524: i64;
  var $i525: i32;
  var $i526: i32;
  var $i527: i32;
  var $i528: i1;
  var $i530: i1;
  var $i531: i1;
  var $i533: i32;
  var $i532: i32;
  var $i529: i32;
  var $i534: i64;
  var $i535: i64;
  var $i536: i32;
  var $i537: i32;
  var $i538: i64;
  var $i539: i64;
  var $i540: i32;
  var $i541: i32;
  var $i542: i32;
  var $i543: i1;
  var $i545: i1;
  var $i546: i1;
  var $i548: i32;
  var $i547: i32;
  var $i544: i32;
  var $i549: i64;
  var $i550: i64;
  var $i551: i32;
  var $i552: i32;
  var $i553: i64;
  var $i554: i64;
  var $i555: i32;
  var $i556: i32;
  var $i557: i32;
  var $i558: i1;
  var $i560: i1;
  var $i561: i1;
  var $i563: i32;
  var $i562: i32;
  var $i559: i32;
  var $i564: i64;
  var $i565: i64;
  var $i566: i32;
  var $i567: i32;
  var $i568: i64;
  var $i569: i64;
  var $i570: i32;
  var $i571: i32;
  var $i572: i32;
  var $i573: i1;
  var $i575: i1;
  var $i576: i1;
  var $i578: i32;
  var $i577: i32;
  var $i574: i32;
  var $i579: i64;
  var $i580: i64;
  var $i581: i32;
  var $i582: i32;
  var $i583: i64;
  var $i584: i64;
  var $i585: i32;
  var $i586: i32;
  var $i587: i32;
  var $i588: i1;
  var $i590: i1;
  var $i591: i1;
  var $i593: i32;
  var $i592: i32;
  var $i589: i32;
  var $i594: i64;
  var $i595: i64;
  var $i596: i32;
  var $i597: i32;
  var $i598: i64;
  var $i599: i64;
  var $i600: i32;
  var $i601: i32;
  var $i602: i32;
  var $i603: i1;
  var $i605: i1;
  var $i606: i1;
  var $i608: i32;
  var $i607: i32;
  var $i604: i32;
  var $i609: i64;
  var $i610: i64;
  var $i611: i32;
  var $i612: i32;
  var $i613: i64;
  var $i614: i64;
  var $i615: i32;
  var $i616: i32;
  var $i617: i32;
  var $i618: i1;
  var $i620: i1;
  var $i621: i1;
  var $i623: i32;
  var $i622: i32;
  var $i619: i32;
  var $i624: i64;
  var $i625: i64;
  var $i626: i32;
  var $i627: i32;
  var $i628: i64;
  var $i629: i64;
  var $i630: i32;
  var $i631: i32;
  var $i632: i32;
  var $i633: i1;
  var $i635: i1;
  var $i636: i1;
  var $i638: i32;
  var $i637: i32;
  var $i634: i32;
  var $i639: i64;
  var $i640: i64;
  var $i641: i32;
  var $i642: i32;
  var $i643: i64;
  var $i644: i64;
  var $i645: i32;
  var $i646: i32;
  var $i647: i32;
  var $i648: i1;
  var $i650: i1;
  var $i651: i1;
  var $i653: i32;
  var $i652: i32;
  var $i649: i32;
  var $i654: i64;
  var $i655: i64;
  var $i656: i32;
  var $i657: i32;
  var $i658: i64;
  var $i659: i64;
  var $i660: i32;
  var $i661: i32;
  var $i662: i32;
  var $i663: i1;
  var $i665: i1;
  var $i666: i1;
  var $i668: i32;
  var $i667: i32;
  var $i664: i32;
  var $i669: i64;
  var $i670: i64;
  var $i671: i32;
  var $i672: i32;
  var $i673: i64;
  var $i674: i64;
  var $i675: i32;
  var $i676: i32;
  var $i677: i32;
  var $i678: i1;
  var $i680: i1;
  var $i681: i1;
  var $i683: i32;
  var $i682: i32;
  var $i679: i32;
  var $i684: i64;
  var $i685: i64;
  var $i686: i32;
  var $i687: i32;
  var $i688: i64;
  var $i689: i64;
  var $i690: i32;
  var $i691: i32;
  var $i692: i32;
  var $i693: i1;
  var $i695: i1;
  var $i696: i1;
  var $i698: i32;
  var $i697: i32;
  var $i694: i32;
  var $i699: i64;
  var $i700: i64;
  var $i701: i32;
  var $i702: i32;
  var $i703: i64;
  var $i704: i64;
  var $i705: i32;
  var $i706: i32;
  var $i707: i32;
  var $i708: i1;
  var $i710: i1;
  var $i711: i1;
  var $i713: i32;
  var $i712: i32;
  var $i709: i32;
  var $i714: i64;
  var $i715: i64;
  var $i716: i32;
  var $i717: i32;
  var $i718: i64;
  var $i719: i64;
  var $i720: i32;
  var $i721: i32;
  var $i722: i32;
  var $i723: i1;
  var $i725: i1;
  var $i726: i1;
  var $i728: i32;
  var $i727: i32;
  var $i724: i32;
  var $i729: i64;
  var $i730: i64;
  var $i731: i32;
  var $i732: i32;
  var $i733: i64;
  var $i734: i64;
  var $i735: i32;
  var $i736: i32;
  var $i737: i32;
  var $i738: i1;
  var $i740: i1;
  var $i741: i1;
  var $i743: i32;
  var $i742: i32;
  var $i739: i32;
  var $i744: i64;
  var $i745: i64;
  var $i746: i32;
  var $i747: i32;
  var $i748: i64;
  var $i749: i64;
  var $i750: i32;
  var $i751: i32;
  var $i752: i32;
  var $i753: i1;
  var $i755: i1;
  var $i756: i1;
  var $i758: i32;
  var $i757: i32;
  var $i754: i32;
  var $i759: i64;
  var $i760: i64;
  var $i761: i32;
  var $i762: i32;
  var $i763: i64;
  var $i764: i64;
  var $i765: i32;
  var $i766: i32;
  var $i767: i32;
  var $i768: i1;
  var $i770: i1;
  var $i771: i1;
  var $i773: i32;
  var $i772: i32;
  var $i769: i32;
  var $i774: i64;
  var $i775: i64;
  var $i776: i32;
  var $i777: i32;
  var $i778: i64;
  var $i779: i64;
  var $i780: i32;
  var $i781: i32;
  var $i782: i32;
  var $i783: i1;
  var $i785: i1;
  var $i786: i1;
  var $i788: i32;
  var $i787: i32;
  var $i784: i32;
  var $i789: i64;
  var $i790: i64;
  var $i791: i32;
  var $i792: i32;
  var $i793: i64;
  var $i794: i64;
  var $i795: i32;
  var $i796: i32;
  var $i797: i32;
  var $i798: i1;
  var $i800: i1;
  var $i801: i1;
  var $i803: i32;
  var $i802: i32;
  var $i799: i32;
  var $i804: i64;
  var $i805: i64;
  var $i806: i32;
  var $i807: i32;
  var $i808: i64;
  var $i809: i64;
  var $i810: i32;
  var $i811: i32;
  var $i812: i32;
  var $i813: i1;
  var $i815: i1;
  var $i816: i1;
  var $i818: i32;
  var $i817: i32;
  var $i814: i32;
  var $i819: i64;
  var $i820: i64;
  var $i821: i32;
  var $i822: i32;
  var $i823: i64;
  var $i824: i64;
  var $i825: i32;
  var $i826: i32;
  var $i827: i32;
  var $i828: i1;
  var $i830: i1;
  var $i831: i1;
  var $i833: i32;
  var $i832: i32;
  var $i829: i32;
  var $i834: i64;
  var $i835: i64;
  var $i836: i32;
  var $i837: i32;
  var $i838: i64;
  var $i839: i64;
  var $i840: i32;
  var $i841: i32;
  var $i842: i32;
  var $i843: i1;
  var $i845: i1;
  var $i846: i1;
  var $i848: i32;
  var $i847: i32;
  var $i844: i32;
  var $i849: i64;
  var $i850: i64;
  var $i851: i32;
  var $i852: i32;
  var $i853: i64;
  var $i854: i64;
  var $i855: i32;
  var $i856: i32;
  var $i857: i32;
  var $i858: i1;
  var $i860: i1;
  var $i861: i1;
  var $i863: i32;
  var $i862: i32;
  var $i859: i32;
  var $i864: i64;
  var $i865: i64;
  var $i866: i32;
  var $i867: i32;
  var $i868: i64;
  var $i869: i64;
  var $i870: i32;
  var $i871: i32;
  var $i872: i32;
  var $i873: i1;
  var $i875: i1;
  var $i876: i1;
  var $i878: i32;
  var $i877: i32;
  var $i874: i32;
  var $i879: i64;
  var $i880: i64;
  var $i881: i32;
  var $i882: i32;
  var $i883: i64;
  var $i884: i64;
  var $i885: i32;
  var $i886: i32;
  var $i887: i32;
  var $i888: i1;
  var $i890: i1;
  var $i891: i1;
  var $i893: i32;
  var $i892: i32;
  var $i889: i32;
  var $i894: i64;
  var $i895: i64;
  var $i896: i32;
  var $i897: i32;
  var $i898: i64;
  var $i899: i64;
  var $i900: i32;
  var $i901: i32;
  var $i902: i32;
  var $i903: i1;
  var $i905: i1;
  var $i906: i1;
  var $i908: i32;
  var $i907: i32;
  var $i904: i32;
  var $i909: i64;
  var $i910: i64;
  var $i911: i32;
  var $i912: i32;
  var $i913: i64;
  var $i914: i64;
  var $i915: i32;
  var $i916: i32;
  var $i917: i32;
  var $i918: i1;
  var $i920: i1;
  var $i921: i1;
  var $i923: i32;
  var $i922: i32;
  var $i919: i32;
  var $i924: i64;
  var $i925: i64;
  var $i926: i32;
  var $i927: i32;
  var $i928: i64;
  var $i929: i64;
  var $i930: i32;
  var $i931: i32;
  var $i932: i32;
  var $i933: i1;
  var $i935: i1;
  var $i936: i1;
  var $i938: i32;
  var $i937: i32;
  var $i934: i32;
  var $i939: i64;
  var $i940: i64;
  var $i941: i32;
  var $i942: i32;
  var $i943: i64;
  var $i944: i64;
  var $i945: i32;
  var $i946: i32;
  var $i947: i32;
  var $i948: i1;
  var $i950: i1;
  var $i951: i1;
  var $i953: i32;
  var $i952: i32;
  var $i949: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 60, 5} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i32 %0, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "__SMACK_and32:arg:a"} boogie_si_record_i32($i0);
  /* call void @llvm.dbg.value(metadata i32 %1, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "__SMACK_and32:arg:b"} boogie_si_record_i32($i1);
  /* call void @llvm.dbg.value(metadata i32 0, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 60, 5} true;
  assume {:verifier.code 0} true;
  /* %3 = add nsw i32 0, 0, !dbg !65, !verifier.code !62 */
  $i2 := $add.i32(0, 0);
  /* call void @llvm.dbg.value(metadata i32 %3, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 61, 9} true;
  assume {:verifier.code 0} true;
  /* %4 = icmp slt i32 %0, 0, !dbg !66, !verifier.code !62 */
  $i3 := $slt.i32($i0, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 61, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %4, label %5, label %12, !dbg !68, !verifier.code !62 */
  $i4 := $i2;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 11} true;
  assume {:verifier.code 0} true;
  /* %6 = icmp slt i32 %1, 0, !dbg !69, !verifier.code !62 */
  $i5 := $slt.i32($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %6, label %9, label %7, !dbg !72, !verifier.code !62 */
  assume {:branchcond $i5} true;
  goto $bb4, $bb6;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 61, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i3 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.1 = phi i32 [ %.0, %11 ], [ %3, %2 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.1, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 7} true;
  assume {:verifier.code 0} true;
  /* %13 = sext i32 %0 to i64, !dbg !79, !verifier.code !62 */
  $i9 := $sext.i32.i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 9} true;
  assume {:verifier.code 0} true;
  /* %14 = srem i64 %13, 2147483648, !dbg !80, !verifier.code !62 */
  $i10 := $srem.i64($i9, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 7} true;
  assume {:verifier.code 0} true;
  /* %15 = trunc i64 %14 to i32, !dbg !79, !verifier.code !62 */
  $i11 := $trunc.i64.i32($i10);
  /* call void @llvm.dbg.value(metadata i32 %15, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 67, 5} true;
  assume {:verifier.code 0} true;
  /* %16 = add nsw i32 %15, %15, !dbg !81, !verifier.code !62 */
  $i12 := $add.i32($i11, $i11);
  /* call void @llvm.dbg.value(metadata i32 %16, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i12);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 68, 7} true;
  assume {:verifier.code 0} true;
  /* %17 = sext i32 %1 to i64, !dbg !82, !verifier.code !62 */
  $i13 := $sext.i32.i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 68, 9} true;
  assume {:verifier.code 0} true;
  /* %18 = srem i64 %17, 2147483648, !dbg !83, !verifier.code !62 */
  $i14 := $srem.i64($i13, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 68, 7} true;
  assume {:verifier.code 0} true;
  /* %19 = trunc i64 %18 to i32, !dbg !82, !verifier.code !62 */
  $i15 := $trunc.i64.i32($i14);
  /* call void @llvm.dbg.value(metadata i32 %19, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i15);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 69, 5} true;
  assume {:verifier.code 0} true;
  /* %20 = add nsw i32 %19, %19, !dbg !84, !verifier.code !62 */
  $i16 := $add.i32($i15, $i15);
  /* call void @llvm.dbg.value(metadata i32 %20, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 71, 5} true;
  assume {:verifier.code 0} true;
  /* %21 = add nsw i32 %.1, %.1, !dbg !85, !verifier.code !62 */
  $i17 := $add.i32($i4, $i4);
  /* call void @llvm.dbg.value(metadata i32 %21, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i17);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 72, 9} true;
  assume {:verifier.code 0} true;
  /* %22 = icmp slt i32 %16, 0, !dbg !86, !verifier.code !62 */
  $i18 := $slt.i32($i12, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 72, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %22, label %23, label %30, !dbg !88, !verifier.code !62 */
  $i19 := $i17;
  assume {:branchcond $i18} true;
  goto $bb10, $bb11;
$bb4:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 15} true;
  assume {:verifier.code 0} true;
  assume ($i5 == 1);
  goto $bb5;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 63, 9} true;
  assume {:verifier.code 0} true;
  /* %10 = add nsw i32 %3, 1, !dbg !75, !verifier.code !62 */
  $i8 := $add.i32($i2, 1);
  /* call void @llvm.dbg.value(metadata i32 %10, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 64, 5} true;
  assume {:verifier.code 0} true;
  /* br label %11, !dbg !77, !verifier.code !62 */
  $i7 := $i8;
  goto $bb9;
$bb6:
  assume !(($i5 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 20} true;
  assume {:verifier.code 0} true;
  /* %8 = icmp sgt i32 %1, 2147483647, !dbg !73, !verifier.code !62 */
  $i6 := $sgt.i32($i1, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %8, label %9, label %11, !dbg !74, !verifier.code !62 */
  $i7 := $i2;
  assume {:branchcond $i6} true;
  goto $bb7, $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 9} true;
  assume {:verifier.code 0} true;
  assume ($i6 == 1);
  goto $bb5;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i6 == 1));
  goto $bb9;
$bb9:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.0 = phi i32 [ %10, %9 ], [ %3, %7 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.0, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 65, 3} true;
  assume {:verifier.code 0} true;
  /* br label %12, !dbg !78, !verifier.code !62 */
  $i4 := $i7;
  goto $bb3;
$bb10:
  assume ($i18 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 11} true;
  assume {:verifier.code 0} true;
  /* %24 = icmp slt i32 %20, 0, !dbg !89, !verifier.code !62 */
  $i20 := $slt.i32($i16, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %24, label %27, label %25, !dbg !92, !verifier.code !62 */
  assume {:branchcond $i20} true;
  goto $bb13, $bb15;
$bb11:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 72, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i18 == 1));
  goto $bb12;
$bb12:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.3 = phi i32 [ %.2, %29 ], [ %21, %12 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.3, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 77, 7} true;
  assume {:verifier.code 0} true;
  /* %31 = sext i32 %16 to i64, !dbg !99, !verifier.code !62 */
  $i24 := $sext.i32.i64($i12);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 77, 9} true;
  assume {:verifier.code 0} true;
  /* %32 = srem i64 %31, 2147483648, !dbg !100, !verifier.code !62 */
  $i25 := $srem.i64($i24, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 77, 7} true;
  assume {:verifier.code 0} true;
  /* %33 = trunc i64 %32 to i32, !dbg !99, !verifier.code !62 */
  $i26 := $trunc.i64.i32($i25);
  /* call void @llvm.dbg.value(metadata i32 %33, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 78, 5} true;
  assume {:verifier.code 0} true;
  /* %34 = add nsw i32 %33, %33, !dbg !101, !verifier.code !62 */
  $i27 := $add.i32($i26, $i26);
  /* call void @llvm.dbg.value(metadata i32 %34, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 79, 7} true;
  assume {:verifier.code 0} true;
  /* %35 = sext i32 %20 to i64, !dbg !102, !verifier.code !62 */
  $i28 := $sext.i32.i64($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 79, 9} true;
  assume {:verifier.code 0} true;
  /* %36 = srem i64 %35, 2147483648, !dbg !103, !verifier.code !62 */
  $i29 := $srem.i64($i28, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 79, 7} true;
  assume {:verifier.code 0} true;
  /* %37 = trunc i64 %36 to i32, !dbg !102, !verifier.code !62 */
  $i30 := $trunc.i64.i32($i29);
  /* call void @llvm.dbg.value(metadata i32 %37, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 80, 5} true;
  assume {:verifier.code 0} true;
  /* %38 = add nsw i32 %37, %37, !dbg !104, !verifier.code !62 */
  $i31 := $add.i32($i30, $i30);
  /* call void @llvm.dbg.value(metadata i32 %38, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 82, 5} true;
  assume {:verifier.code 0} true;
  /* %39 = add nsw i32 %.3, %.3, !dbg !105, !verifier.code !62 */
  $i32 := $add.i32($i19, $i19);
  /* call void @llvm.dbg.value(metadata i32 %39, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 83, 9} true;
  assume {:verifier.code 0} true;
  /* %40 = icmp slt i32 %34, 0, !dbg !106, !verifier.code !62 */
  $i33 := $slt.i32($i27, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 83, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %40, label %41, label %48, !dbg !108, !verifier.code !62 */
  $i34 := $i32;
  assume {:branchcond $i33} true;
  goto $bb19, $bb20;
$bb13:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 15} true;
  assume {:verifier.code 0} true;
  assume ($i20 == 1);
  goto $bb14;
$bb14:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 74, 9} true;
  assume {:verifier.code 0} true;
  /* %28 = add nsw i32 %21, 1, !dbg !95, !verifier.code !62 */
  $i23 := $add.i32($i17, 1);
  /* call void @llvm.dbg.value(metadata i32 %28, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 75, 5} true;
  assume {:verifier.code 0} true;
  /* br label %29, !dbg !97, !verifier.code !62 */
  $i22 := $i23;
  goto $bb18;
$bb15:
  assume !(($i20 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 20} true;
  assume {:verifier.code 0} true;
  /* %26 = icmp sgt i32 %20, 2147483647, !dbg !93, !verifier.code !62 */
  $i21 := $sgt.i32($i16, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %26, label %27, label %29, !dbg !94, !verifier.code !62 */
  $i22 := $i17;
  assume {:branchcond $i21} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 9} true;
  assume {:verifier.code 0} true;
  assume ($i21 == 1);
  goto $bb14;
$bb17:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i21 == 1));
  goto $bb18;
$bb18:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.2 = phi i32 [ %28, %27 ], [ %21, %25 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.2, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 76, 3} true;
  assume {:verifier.code 0} true;
  /* br label %30, !dbg !98, !verifier.code !62 */
  $i19 := $i22;
  goto $bb12;
$bb19:
  assume ($i33 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 11} true;
  assume {:verifier.code 0} true;
  /* %42 = icmp slt i32 %38, 0, !dbg !109, !verifier.code !62 */
  $i35 := $slt.i32($i31, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %42, label %45, label %43, !dbg !112, !verifier.code !62 */
  assume {:branchcond $i35} true;
  goto $bb22, $bb24;
$bb20:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 83, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i33 == 1));
  goto $bb21;
$bb21:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.5 = phi i32 [ %.4, %47 ], [ %39, %30 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.5, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 88, 7} true;
  assume {:verifier.code 0} true;
  /* %49 = sext i32 %34 to i64, !dbg !119, !verifier.code !62 */
  $i39 := $sext.i32.i64($i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 88, 9} true;
  assume {:verifier.code 0} true;
  /* %50 = srem i64 %49, 2147483648, !dbg !120, !verifier.code !62 */
  $i40 := $srem.i64($i39, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 88, 7} true;
  assume {:verifier.code 0} true;
  /* %51 = trunc i64 %50 to i32, !dbg !119, !verifier.code !62 */
  $i41 := $trunc.i64.i32($i40);
  /* call void @llvm.dbg.value(metadata i32 %51, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i41);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 89, 5} true;
  assume {:verifier.code 0} true;
  /* %52 = add nsw i32 %51, %51, !dbg !121, !verifier.code !62 */
  $i42 := $add.i32($i41, $i41);
  /* call void @llvm.dbg.value(metadata i32 %52, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i42);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 90, 7} true;
  assume {:verifier.code 0} true;
  /* %53 = sext i32 %38 to i64, !dbg !122, !verifier.code !62 */
  $i43 := $sext.i32.i64($i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 90, 9} true;
  assume {:verifier.code 0} true;
  /* %54 = srem i64 %53, 2147483648, !dbg !123, !verifier.code !62 */
  $i44 := $srem.i64($i43, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 90, 7} true;
  assume {:verifier.code 0} true;
  /* %55 = trunc i64 %54 to i32, !dbg !122, !verifier.code !62 */
  $i45 := $trunc.i64.i32($i44);
  /* call void @llvm.dbg.value(metadata i32 %55, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i45);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 91, 5} true;
  assume {:verifier.code 0} true;
  /* %56 = add nsw i32 %55, %55, !dbg !124, !verifier.code !62 */
  $i46 := $add.i32($i45, $i45);
  /* call void @llvm.dbg.value(metadata i32 %56, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i46);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 93, 5} true;
  assume {:verifier.code 0} true;
  /* %57 = add nsw i32 %.5, %.5, !dbg !125, !verifier.code !62 */
  $i47 := $add.i32($i34, $i34);
  /* call void @llvm.dbg.value(metadata i32 %57, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i47);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 94, 9} true;
  assume {:verifier.code 0} true;
  /* %58 = icmp slt i32 %52, 0, !dbg !126, !verifier.code !62 */
  $i48 := $slt.i32($i42, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 94, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %58, label %59, label %66, !dbg !128, !verifier.code !62 */
  $i49 := $i47;
  assume {:branchcond $i48} true;
  goto $bb28, $bb29;
$bb22:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 15} true;
  assume {:verifier.code 0} true;
  assume ($i35 == 1);
  goto $bb23;
$bb23:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 85, 9} true;
  assume {:verifier.code 0} true;
  /* %46 = add nsw i32 %39, 1, !dbg !115, !verifier.code !62 */
  $i38 := $add.i32($i32, 1);
  /* call void @llvm.dbg.value(metadata i32 %46, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i38);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 86, 5} true;
  assume {:verifier.code 0} true;
  /* br label %47, !dbg !117, !verifier.code !62 */
  $i37 := $i38;
  goto $bb27;
$bb24:
  assume !(($i35 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 20} true;
  assume {:verifier.code 0} true;
  /* %44 = icmp sgt i32 %38, 2147483647, !dbg !113, !verifier.code !62 */
  $i36 := $sgt.i32($i31, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %44, label %45, label %47, !dbg !114, !verifier.code !62 */
  $i37 := $i32;
  assume {:branchcond $i36} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 9} true;
  assume {:verifier.code 0} true;
  assume ($i36 == 1);
  goto $bb23;
$bb26:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i36 == 1));
  goto $bb27;
$bb27:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.4 = phi i32 [ %46, %45 ], [ %39, %43 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.4, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 87, 3} true;
  assume {:verifier.code 0} true;
  /* br label %48, !dbg !118, !verifier.code !62 */
  $i34 := $i37;
  goto $bb21;
$bb28:
  assume ($i48 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 11} true;
  assume {:verifier.code 0} true;
  /* %60 = icmp slt i32 %56, 0, !dbg !129, !verifier.code !62 */
  $i50 := $slt.i32($i46, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %60, label %63, label %61, !dbg !132, !verifier.code !62 */
  assume {:branchcond $i50} true;
  goto $bb31, $bb33;
$bb29:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 94, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i48 == 1));
  goto $bb30;
$bb30:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.7 = phi i32 [ %.6, %65 ], [ %57, %48 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.7, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 99, 7} true;
  assume {:verifier.code 0} true;
  /* %67 = sext i32 %52 to i64, !dbg !139, !verifier.code !62 */
  $i54 := $sext.i32.i64($i42);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 99, 9} true;
  assume {:verifier.code 0} true;
  /* %68 = srem i64 %67, 2147483648, !dbg !140, !verifier.code !62 */
  $i55 := $srem.i64($i54, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 99, 7} true;
  assume {:verifier.code 0} true;
  /* %69 = trunc i64 %68 to i32, !dbg !139, !verifier.code !62 */
  $i56 := $trunc.i64.i32($i55);
  /* call void @llvm.dbg.value(metadata i32 %69, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i56);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 100, 5} true;
  assume {:verifier.code 0} true;
  /* %70 = add nsw i32 %69, %69, !dbg !141, !verifier.code !62 */
  $i57 := $add.i32($i56, $i56);
  /* call void @llvm.dbg.value(metadata i32 %70, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i57);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 101, 7} true;
  assume {:verifier.code 0} true;
  /* %71 = sext i32 %56 to i64, !dbg !142, !verifier.code !62 */
  $i58 := $sext.i32.i64($i46);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 101, 9} true;
  assume {:verifier.code 0} true;
  /* %72 = srem i64 %71, 2147483648, !dbg !143, !verifier.code !62 */
  $i59 := $srem.i64($i58, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 101, 7} true;
  assume {:verifier.code 0} true;
  /* %73 = trunc i64 %72 to i32, !dbg !142, !verifier.code !62 */
  $i60 := $trunc.i64.i32($i59);
  /* call void @llvm.dbg.value(metadata i32 %73, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i60);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 102, 5} true;
  assume {:verifier.code 0} true;
  /* %74 = add nsw i32 %73, %73, !dbg !144, !verifier.code !62 */
  $i61 := $add.i32($i60, $i60);
  /* call void @llvm.dbg.value(metadata i32 %74, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i61);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 5} true;
  assume {:verifier.code 0} true;
  /* %75 = add nsw i32 %.7, %.7, !dbg !145, !verifier.code !62 */
  $i62 := $add.i32($i49, $i49);
  /* call void @llvm.dbg.value(metadata i32 %75, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i62);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 9} true;
  assume {:verifier.code 0} true;
  /* %76 = icmp slt i32 %70, 0, !dbg !146, !verifier.code !62 */
  $i63 := $slt.i32($i57, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %76, label %77, label %84, !dbg !148, !verifier.code !62 */
  $i64 := $i62;
  assume {:branchcond $i63} true;
  goto $bb37, $bb38;
$bb31:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 15} true;
  assume {:verifier.code 0} true;
  assume ($i50 == 1);
  goto $bb32;
$bb32:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 96, 9} true;
  assume {:verifier.code 0} true;
  /* %64 = add nsw i32 %57, 1, !dbg !135, !verifier.code !62 */
  $i53 := $add.i32($i47, 1);
  /* call void @llvm.dbg.value(metadata i32 %64, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i53);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 97, 5} true;
  assume {:verifier.code 0} true;
  /* br label %65, !dbg !137, !verifier.code !62 */
  $i52 := $i53;
  goto $bb36;
$bb33:
  assume !(($i50 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 20} true;
  assume {:verifier.code 0} true;
  /* %62 = icmp sgt i32 %56, 2147483647, !dbg !133, !verifier.code !62 */
  $i51 := $sgt.i32($i46, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %62, label %63, label %65, !dbg !134, !verifier.code !62 */
  $i52 := $i47;
  assume {:branchcond $i51} true;
  goto $bb34, $bb35;
$bb34:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 9} true;
  assume {:verifier.code 0} true;
  assume ($i51 == 1);
  goto $bb32;
$bb35:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i51 == 1));
  goto $bb36;
$bb36:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.6 = phi i32 [ %64, %63 ], [ %57, %61 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.6, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 98, 3} true;
  assume {:verifier.code 0} true;
  /* br label %66, !dbg !138, !verifier.code !62 */
  $i49 := $i52;
  goto $bb30;
$bb37:
  assume ($i63 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 11} true;
  assume {:verifier.code 0} true;
  /* %78 = icmp slt i32 %74, 0, !dbg !149, !verifier.code !62 */
  $i65 := $slt.i32($i61, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %78, label %81, label %79, !dbg !152, !verifier.code !62 */
  assume {:branchcond $i65} true;
  goto $bb40, $bb42;
$bb38:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i63 == 1));
  goto $bb39;
$bb39:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.9 = phi i32 [ %.8, %83 ], [ %75, %66 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.9, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 110, 7} true;
  assume {:verifier.code 0} true;
  /* %85 = sext i32 %70 to i64, !dbg !159, !verifier.code !62 */
  $i69 := $sext.i32.i64($i57);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 110, 9} true;
  assume {:verifier.code 0} true;
  /* %86 = srem i64 %85, 2147483648, !dbg !160, !verifier.code !62 */
  $i70 := $srem.i64($i69, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 110, 7} true;
  assume {:verifier.code 0} true;
  /* %87 = trunc i64 %86 to i32, !dbg !159, !verifier.code !62 */
  $i71 := $trunc.i64.i32($i70);
  /* call void @llvm.dbg.value(metadata i32 %87, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i71);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 111, 5} true;
  assume {:verifier.code 0} true;
  /* %88 = add nsw i32 %87, %87, !dbg !161, !verifier.code !62 */
  $i72 := $add.i32($i71, $i71);
  /* call void @llvm.dbg.value(metadata i32 %88, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i72);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 112, 7} true;
  assume {:verifier.code 0} true;
  /* %89 = sext i32 %74 to i64, !dbg !162, !verifier.code !62 */
  $i73 := $sext.i32.i64($i61);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 112, 9} true;
  assume {:verifier.code 0} true;
  /* %90 = srem i64 %89, 2147483648, !dbg !163, !verifier.code !62 */
  $i74 := $srem.i64($i73, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 112, 7} true;
  assume {:verifier.code 0} true;
  /* %91 = trunc i64 %90 to i32, !dbg !162, !verifier.code !62 */
  $i75 := $trunc.i64.i32($i74);
  /* call void @llvm.dbg.value(metadata i32 %91, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i75);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 113, 5} true;
  assume {:verifier.code 0} true;
  /* %92 = add nsw i32 %91, %91, !dbg !164, !verifier.code !62 */
  $i76 := $add.i32($i75, $i75);
  /* call void @llvm.dbg.value(metadata i32 %92, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i76);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 5} true;
  assume {:verifier.code 0} true;
  /* %93 = add nsw i32 %.9, %.9, !dbg !165, !verifier.code !62 */
  $i77 := $add.i32($i64, $i64);
  /* call void @llvm.dbg.value(metadata i32 %93, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 9} true;
  assume {:verifier.code 0} true;
  /* %94 = icmp slt i32 %88, 0, !dbg !166, !verifier.code !62 */
  $i78 := $slt.i32($i72, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %94, label %95, label %102, !dbg !168, !verifier.code !62 */
  $i79 := $i77;
  assume {:branchcond $i78} true;
  goto $bb46, $bb47;
$bb40:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 15} true;
  assume {:verifier.code 0} true;
  assume ($i65 == 1);
  goto $bb41;
$bb41:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 107, 9} true;
  assume {:verifier.code 0} true;
  /* %82 = add nsw i32 %75, 1, !dbg !155, !verifier.code !62 */
  $i68 := $add.i32($i62, 1);
  /* call void @llvm.dbg.value(metadata i32 %82, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i68);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 108, 5} true;
  assume {:verifier.code 0} true;
  /* br label %83, !dbg !157, !verifier.code !62 */
  $i67 := $i68;
  goto $bb45;
$bb42:
  assume !(($i65 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 20} true;
  assume {:verifier.code 0} true;
  /* %80 = icmp sgt i32 %74, 2147483647, !dbg !153, !verifier.code !62 */
  $i66 := $sgt.i32($i61, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %80, label %81, label %83, !dbg !154, !verifier.code !62 */
  $i67 := $i62;
  assume {:branchcond $i66} true;
  goto $bb43, $bb44;
$bb43:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 9} true;
  assume {:verifier.code 0} true;
  assume ($i66 == 1);
  goto $bb41;
$bb44:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i66 == 1));
  goto $bb45;
$bb45:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.8 = phi i32 [ %82, %81 ], [ %75, %79 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.8, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 109, 3} true;
  assume {:verifier.code 0} true;
  /* br label %84, !dbg !158, !verifier.code !62 */
  $i64 := $i67;
  goto $bb39;
$bb46:
  assume ($i78 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 11} true;
  assume {:verifier.code 0} true;
  /* %96 = icmp slt i32 %92, 0, !dbg !169, !verifier.code !62 */
  $i80 := $slt.i32($i76, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %96, label %99, label %97, !dbg !172, !verifier.code !62 */
  assume {:branchcond $i80} true;
  goto $bb49, $bb51;
$bb47:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i78 == 1));
  goto $bb48;
$bb48:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.11 = phi i32 [ %.10, %101 ], [ %93, %84 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.11, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 121, 7} true;
  assume {:verifier.code 0} true;
  /* %103 = sext i32 %88 to i64, !dbg !179, !verifier.code !62 */
  $i84 := $sext.i32.i64($i72);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 121, 9} true;
  assume {:verifier.code 0} true;
  /* %104 = srem i64 %103, 2147483648, !dbg !180, !verifier.code !62 */
  $i85 := $srem.i64($i84, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 121, 7} true;
  assume {:verifier.code 0} true;
  /* %105 = trunc i64 %104 to i32, !dbg !179, !verifier.code !62 */
  $i86 := $trunc.i64.i32($i85);
  /* call void @llvm.dbg.value(metadata i32 %105, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i86);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 122, 5} true;
  assume {:verifier.code 0} true;
  /* %106 = add nsw i32 %105, %105, !dbg !181, !verifier.code !62 */
  $i87 := $add.i32($i86, $i86);
  /* call void @llvm.dbg.value(metadata i32 %106, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i87);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 123, 7} true;
  assume {:verifier.code 0} true;
  /* %107 = sext i32 %92 to i64, !dbg !182, !verifier.code !62 */
  $i88 := $sext.i32.i64($i76);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 123, 9} true;
  assume {:verifier.code 0} true;
  /* %108 = srem i64 %107, 2147483648, !dbg !183, !verifier.code !62 */
  $i89 := $srem.i64($i88, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 123, 7} true;
  assume {:verifier.code 0} true;
  /* %109 = trunc i64 %108 to i32, !dbg !182, !verifier.code !62 */
  $i90 := $trunc.i64.i32($i89);
  /* call void @llvm.dbg.value(metadata i32 %109, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i90);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 124, 5} true;
  assume {:verifier.code 0} true;
  /* %110 = add nsw i32 %109, %109, !dbg !184, !verifier.code !62 */
  $i91 := $add.i32($i90, $i90);
  /* call void @llvm.dbg.value(metadata i32 %110, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i91);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 126, 5} true;
  assume {:verifier.code 0} true;
  /* %111 = add nsw i32 %.11, %.11, !dbg !185, !verifier.code !62 */
  $i92 := $add.i32($i79, $i79);
  /* call void @llvm.dbg.value(metadata i32 %111, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 127, 9} true;
  assume {:verifier.code 0} true;
  /* %112 = icmp slt i32 %106, 0, !dbg !186, !verifier.code !62 */
  $i93 := $slt.i32($i87, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 127, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %112, label %113, label %120, !dbg !188, !verifier.code !62 */
  $i94 := $i92;
  assume {:branchcond $i93} true;
  goto $bb55, $bb56;
$bb49:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 15} true;
  assume {:verifier.code 0} true;
  assume ($i80 == 1);
  goto $bb50;
$bb50:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 118, 9} true;
  assume {:verifier.code 0} true;
  /* %100 = add nsw i32 %93, 1, !dbg !175, !verifier.code !62 */
  $i83 := $add.i32($i77, 1);
  /* call void @llvm.dbg.value(metadata i32 %100, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i83);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 119, 5} true;
  assume {:verifier.code 0} true;
  /* br label %101, !dbg !177, !verifier.code !62 */
  $i82 := $i83;
  goto $bb54;
$bb51:
  assume !(($i80 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 20} true;
  assume {:verifier.code 0} true;
  /* %98 = icmp sgt i32 %92, 2147483647, !dbg !173, !verifier.code !62 */
  $i81 := $sgt.i32($i76, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %98, label %99, label %101, !dbg !174, !verifier.code !62 */
  $i82 := $i77;
  assume {:branchcond $i81} true;
  goto $bb52, $bb53;
$bb52:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 9} true;
  assume {:verifier.code 0} true;
  assume ($i81 == 1);
  goto $bb50;
$bb53:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i81 == 1));
  goto $bb54;
$bb54:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.10 = phi i32 [ %100, %99 ], [ %93, %97 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.10, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 120, 3} true;
  assume {:verifier.code 0} true;
  /* br label %102, !dbg !178, !verifier.code !62 */
  $i79 := $i82;
  goto $bb48;
$bb55:
  assume ($i93 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 11} true;
  assume {:verifier.code 0} true;
  /* %114 = icmp slt i32 %110, 0, !dbg !189, !verifier.code !62 */
  $i95 := $slt.i32($i91, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %114, label %117, label %115, !dbg !192, !verifier.code !62 */
  assume {:branchcond $i95} true;
  goto $bb58, $bb60;
$bb56:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 127, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i93 == 1));
  goto $bb57;
$bb57:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.13 = phi i32 [ %.12, %119 ], [ %111, %102 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.13, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 132, 7} true;
  assume {:verifier.code 0} true;
  /* %121 = sext i32 %106 to i64, !dbg !199, !verifier.code !62 */
  $i99 := $sext.i32.i64($i87);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 132, 9} true;
  assume {:verifier.code 0} true;
  /* %122 = srem i64 %121, 2147483648, !dbg !200, !verifier.code !62 */
  $i100 := $srem.i64($i99, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 132, 7} true;
  assume {:verifier.code 0} true;
  /* %123 = trunc i64 %122 to i32, !dbg !199, !verifier.code !62 */
  $i101 := $trunc.i64.i32($i100);
  /* call void @llvm.dbg.value(metadata i32 %123, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i101);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 133, 5} true;
  assume {:verifier.code 0} true;
  /* %124 = add nsw i32 %123, %123, !dbg !201, !verifier.code !62 */
  $i102 := $add.i32($i101, $i101);
  /* call void @llvm.dbg.value(metadata i32 %124, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i102);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 134, 7} true;
  assume {:verifier.code 0} true;
  /* %125 = sext i32 %110 to i64, !dbg !202, !verifier.code !62 */
  $i103 := $sext.i32.i64($i91);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 134, 9} true;
  assume {:verifier.code 0} true;
  /* %126 = srem i64 %125, 2147483648, !dbg !203, !verifier.code !62 */
  $i104 := $srem.i64($i103, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 134, 7} true;
  assume {:verifier.code 0} true;
  /* %127 = trunc i64 %126 to i32, !dbg !202, !verifier.code !62 */
  $i105 := $trunc.i64.i32($i104);
  /* call void @llvm.dbg.value(metadata i32 %127, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i105);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 135, 5} true;
  assume {:verifier.code 0} true;
  /* %128 = add nsw i32 %127, %127, !dbg !204, !verifier.code !62 */
  $i106 := $add.i32($i105, $i105);
  /* call void @llvm.dbg.value(metadata i32 %128, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 137, 5} true;
  assume {:verifier.code 0} true;
  /* %129 = add nsw i32 %.13, %.13, !dbg !205, !verifier.code !62 */
  $i107 := $add.i32($i94, $i94);
  /* call void @llvm.dbg.value(metadata i32 %129, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 9} true;
  assume {:verifier.code 0} true;
  /* %130 = icmp slt i32 %124, 0, !dbg !206, !verifier.code !62 */
  $i108 := $slt.i32($i102, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %130, label %131, label %138, !dbg !208, !verifier.code !62 */
  $i109 := $i107;
  assume {:branchcond $i108} true;
  goto $bb64, $bb65;
$bb58:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 15} true;
  assume {:verifier.code 0} true;
  assume ($i95 == 1);
  goto $bb59;
$bb59:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 129, 9} true;
  assume {:verifier.code 0} true;
  /* %118 = add nsw i32 %111, 1, !dbg !195, !verifier.code !62 */
  $i98 := $add.i32($i92, 1);
  /* call void @llvm.dbg.value(metadata i32 %118, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i98);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 130, 5} true;
  assume {:verifier.code 0} true;
  /* br label %119, !dbg !197, !verifier.code !62 */
  $i97 := $i98;
  goto $bb63;
$bb60:
  assume !(($i95 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 20} true;
  assume {:verifier.code 0} true;
  /* %116 = icmp sgt i32 %110, 2147483647, !dbg !193, !verifier.code !62 */
  $i96 := $sgt.i32($i91, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %116, label %117, label %119, !dbg !194, !verifier.code !62 */
  $i97 := $i92;
  assume {:branchcond $i96} true;
  goto $bb61, $bb62;
$bb61:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 9} true;
  assume {:verifier.code 0} true;
  assume ($i96 == 1);
  goto $bb59;
$bb62:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i96 == 1));
  goto $bb63;
$bb63:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.12 = phi i32 [ %118, %117 ], [ %111, %115 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.12, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 131, 3} true;
  assume {:verifier.code 0} true;
  /* br label %120, !dbg !198, !verifier.code !62 */
  $i94 := $i97;
  goto $bb57;
$bb64:
  assume ($i108 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 11} true;
  assume {:verifier.code 0} true;
  /* %132 = icmp slt i32 %128, 0, !dbg !209, !verifier.code !62 */
  $i110 := $slt.i32($i106, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %132, label %135, label %133, !dbg !212, !verifier.code !62 */
  assume {:branchcond $i110} true;
  goto $bb67, $bb69;
$bb65:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i108 == 1));
  goto $bb66;
$bb66:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.15 = phi i32 [ %.14, %137 ], [ %129, %120 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.15, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 143, 7} true;
  assume {:verifier.code 0} true;
  /* %139 = sext i32 %124 to i64, !dbg !219, !verifier.code !62 */
  $i114 := $sext.i32.i64($i102);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 143, 9} true;
  assume {:verifier.code 0} true;
  /* %140 = srem i64 %139, 2147483648, !dbg !220, !verifier.code !62 */
  $i115 := $srem.i64($i114, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 143, 7} true;
  assume {:verifier.code 0} true;
  /* %141 = trunc i64 %140 to i32, !dbg !219, !verifier.code !62 */
  $i116 := $trunc.i64.i32($i115);
  /* call void @llvm.dbg.value(metadata i32 %141, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i116);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 144, 5} true;
  assume {:verifier.code 0} true;
  /* %142 = add nsw i32 %141, %141, !dbg !221, !verifier.code !62 */
  $i117 := $add.i32($i116, $i116);
  /* call void @llvm.dbg.value(metadata i32 %142, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 7} true;
  assume {:verifier.code 0} true;
  /* %143 = sext i32 %128 to i64, !dbg !222, !verifier.code !62 */
  $i118 := $sext.i32.i64($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 9} true;
  assume {:verifier.code 0} true;
  /* %144 = srem i64 %143, 2147483648, !dbg !223, !verifier.code !62 */
  $i119 := $srem.i64($i118, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 7} true;
  assume {:verifier.code 0} true;
  /* %145 = trunc i64 %144 to i32, !dbg !222, !verifier.code !62 */
  $i120 := $trunc.i64.i32($i119);
  /* call void @llvm.dbg.value(metadata i32 %145, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i120);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 5} true;
  assume {:verifier.code 0} true;
  /* %146 = add nsw i32 %145, %145, !dbg !224, !verifier.code !62 */
  $i121 := $add.i32($i120, $i120);
  /* call void @llvm.dbg.value(metadata i32 %146, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 148, 5} true;
  assume {:verifier.code 0} true;
  /* %147 = add nsw i32 %.15, %.15, !dbg !225, !verifier.code !62 */
  $i122 := $add.i32($i109, $i109);
  /* call void @llvm.dbg.value(metadata i32 %147, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i122);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 149, 9} true;
  assume {:verifier.code 0} true;
  /* %148 = icmp slt i32 %142, 0, !dbg !226, !verifier.code !62 */
  $i123 := $slt.i32($i117, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 149, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %148, label %149, label %156, !dbg !228, !verifier.code !62 */
  $i124 := $i122;
  assume {:branchcond $i123} true;
  goto $bb73, $bb74;
$bb67:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 15} true;
  assume {:verifier.code 0} true;
  assume ($i110 == 1);
  goto $bb68;
$bb68:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 9} true;
  assume {:verifier.code 0} true;
  /* %136 = add nsw i32 %129, 1, !dbg !215, !verifier.code !62 */
  $i113 := $add.i32($i107, 1);
  /* call void @llvm.dbg.value(metadata i32 %136, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 141, 5} true;
  assume {:verifier.code 0} true;
  /* br label %137, !dbg !217, !verifier.code !62 */
  $i112 := $i113;
  goto $bb72;
$bb69:
  assume !(($i110 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 20} true;
  assume {:verifier.code 0} true;
  /* %134 = icmp sgt i32 %128, 2147483647, !dbg !213, !verifier.code !62 */
  $i111 := $sgt.i32($i106, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %134, label %135, label %137, !dbg !214, !verifier.code !62 */
  $i112 := $i107;
  assume {:branchcond $i111} true;
  goto $bb70, $bb71;
$bb70:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 9} true;
  assume {:verifier.code 0} true;
  assume ($i111 == 1);
  goto $bb68;
$bb71:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i111 == 1));
  goto $bb72;
$bb72:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.14 = phi i32 [ %136, %135 ], [ %129, %133 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.14, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 142, 3} true;
  assume {:verifier.code 0} true;
  /* br label %138, !dbg !218, !verifier.code !62 */
  $i109 := $i112;
  goto $bb66;
$bb73:
  assume ($i123 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 11} true;
  assume {:verifier.code 0} true;
  /* %150 = icmp slt i32 %146, 0, !dbg !229, !verifier.code !62 */
  $i125 := $slt.i32($i121, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %150, label %153, label %151, !dbg !232, !verifier.code !62 */
  assume {:branchcond $i125} true;
  goto $bb76, $bb78;
$bb74:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 149, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i123 == 1));
  goto $bb75;
$bb75:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.17 = phi i32 [ %.16, %155 ], [ %147, %138 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.17, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 154, 7} true;
  assume {:verifier.code 0} true;
  /* %157 = sext i32 %142 to i64, !dbg !239, !verifier.code !62 */
  $i129 := $sext.i32.i64($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 154, 9} true;
  assume {:verifier.code 0} true;
  /* %158 = srem i64 %157, 2147483648, !dbg !240, !verifier.code !62 */
  $i130 := $srem.i64($i129, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 154, 7} true;
  assume {:verifier.code 0} true;
  /* %159 = trunc i64 %158 to i32, !dbg !239, !verifier.code !62 */
  $i131 := $trunc.i64.i32($i130);
  /* call void @llvm.dbg.value(metadata i32 %159, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i131);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 155, 5} true;
  assume {:verifier.code 0} true;
  /* %160 = add nsw i32 %159, %159, !dbg !241, !verifier.code !62 */
  $i132 := $add.i32($i131, $i131);
  /* call void @llvm.dbg.value(metadata i32 %160, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 156, 7} true;
  assume {:verifier.code 0} true;
  /* %161 = sext i32 %146 to i64, !dbg !242, !verifier.code !62 */
  $i133 := $sext.i32.i64($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 156, 9} true;
  assume {:verifier.code 0} true;
  /* %162 = srem i64 %161, 2147483648, !dbg !243, !verifier.code !62 */
  $i134 := $srem.i64($i133, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 156, 7} true;
  assume {:verifier.code 0} true;
  /* %163 = trunc i64 %162 to i32, !dbg !242, !verifier.code !62 */
  $i135 := $trunc.i64.i32($i134);
  /* call void @llvm.dbg.value(metadata i32 %163, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 157, 5} true;
  assume {:verifier.code 0} true;
  /* %164 = add nsw i32 %163, %163, !dbg !244, !verifier.code !62 */
  $i136 := $add.i32($i135, $i135);
  /* call void @llvm.dbg.value(metadata i32 %164, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 159, 5} true;
  assume {:verifier.code 0} true;
  /* %165 = add nsw i32 %.17, %.17, !dbg !245, !verifier.code !62 */
  $i137 := $add.i32($i124, $i124);
  /* call void @llvm.dbg.value(metadata i32 %165, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i137);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 160, 9} true;
  assume {:verifier.code 0} true;
  /* %166 = icmp slt i32 %160, 0, !dbg !246, !verifier.code !62 */
  $i138 := $slt.i32($i132, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 160, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %166, label %167, label %174, !dbg !248, !verifier.code !62 */
  $i139 := $i137;
  assume {:branchcond $i138} true;
  goto $bb82, $bb83;
$bb76:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 15} true;
  assume {:verifier.code 0} true;
  assume ($i125 == 1);
  goto $bb77;
$bb77:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 151, 9} true;
  assume {:verifier.code 0} true;
  /* %154 = add nsw i32 %147, 1, !dbg !235, !verifier.code !62 */
  $i128 := $add.i32($i122, 1);
  /* call void @llvm.dbg.value(metadata i32 %154, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 152, 5} true;
  assume {:verifier.code 0} true;
  /* br label %155, !dbg !237, !verifier.code !62 */
  $i127 := $i128;
  goto $bb81;
$bb78:
  assume !(($i125 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 20} true;
  assume {:verifier.code 0} true;
  /* %152 = icmp sgt i32 %146, 2147483647, !dbg !233, !verifier.code !62 */
  $i126 := $sgt.i32($i121, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %152, label %153, label %155, !dbg !234, !verifier.code !62 */
  $i127 := $i122;
  assume {:branchcond $i126} true;
  goto $bb79, $bb80;
$bb79:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 9} true;
  assume {:verifier.code 0} true;
  assume ($i126 == 1);
  goto $bb77;
$bb80:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i126 == 1));
  goto $bb81;
$bb81:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.16 = phi i32 [ %154, %153 ], [ %147, %151 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.16, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 153, 3} true;
  assume {:verifier.code 0} true;
  /* br label %156, !dbg !238, !verifier.code !62 */
  $i124 := $i127;
  goto $bb75;
$bb82:
  assume ($i138 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 11} true;
  assume {:verifier.code 0} true;
  /* %168 = icmp slt i32 %164, 0, !dbg !249, !verifier.code !62 */
  $i140 := $slt.i32($i136, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %168, label %171, label %169, !dbg !252, !verifier.code !62 */
  assume {:branchcond $i140} true;
  goto $bb85, $bb87;
$bb83:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 160, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i138 == 1));
  goto $bb84;
$bb84:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.19 = phi i32 [ %.18, %173 ], [ %165, %156 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.19, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 165, 7} true;
  assume {:verifier.code 0} true;
  /* %175 = sext i32 %160 to i64, !dbg !259, !verifier.code !62 */
  $i144 := $sext.i32.i64($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 165, 9} true;
  assume {:verifier.code 0} true;
  /* %176 = srem i64 %175, 2147483648, !dbg !260, !verifier.code !62 */
  $i145 := $srem.i64($i144, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 165, 7} true;
  assume {:verifier.code 0} true;
  /* %177 = trunc i64 %176 to i32, !dbg !259, !verifier.code !62 */
  $i146 := $trunc.i64.i32($i145);
  /* call void @llvm.dbg.value(metadata i32 %177, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 166, 5} true;
  assume {:verifier.code 0} true;
  /* %178 = add nsw i32 %177, %177, !dbg !261, !verifier.code !62 */
  $i147 := $add.i32($i146, $i146);
  /* call void @llvm.dbg.value(metadata i32 %178, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 167, 7} true;
  assume {:verifier.code 0} true;
  /* %179 = sext i32 %164 to i64, !dbg !262, !verifier.code !62 */
  $i148 := $sext.i32.i64($i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 167, 9} true;
  assume {:verifier.code 0} true;
  /* %180 = srem i64 %179, 2147483648, !dbg !263, !verifier.code !62 */
  $i149 := $srem.i64($i148, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 167, 7} true;
  assume {:verifier.code 0} true;
  /* %181 = trunc i64 %180 to i32, !dbg !262, !verifier.code !62 */
  $i150 := $trunc.i64.i32($i149);
  /* call void @llvm.dbg.value(metadata i32 %181, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 168, 5} true;
  assume {:verifier.code 0} true;
  /* %182 = add nsw i32 %181, %181, !dbg !264, !verifier.code !62 */
  $i151 := $add.i32($i150, $i150);
  /* call void @llvm.dbg.value(metadata i32 %182, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i151);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 170, 5} true;
  assume {:verifier.code 0} true;
  /* %183 = add nsw i32 %.19, %.19, !dbg !265, !verifier.code !62 */
  $i152 := $add.i32($i139, $i139);
  /* call void @llvm.dbg.value(metadata i32 %183, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i152);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 9} true;
  assume {:verifier.code 0} true;
  /* %184 = icmp slt i32 %178, 0, !dbg !266, !verifier.code !62 */
  $i153 := $slt.i32($i147, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %184, label %185, label %192, !dbg !268, !verifier.code !62 */
  $i154 := $i152;
  assume {:branchcond $i153} true;
  goto $bb91, $bb92;
$bb85:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 15} true;
  assume {:verifier.code 0} true;
  assume ($i140 == 1);
  goto $bb86;
$bb86:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 162, 9} true;
  assume {:verifier.code 0} true;
  /* %172 = add nsw i32 %165, 1, !dbg !255, !verifier.code !62 */
  $i143 := $add.i32($i137, 1);
  /* call void @llvm.dbg.value(metadata i32 %172, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 163, 5} true;
  assume {:verifier.code 0} true;
  /* br label %173, !dbg !257, !verifier.code !62 */
  $i142 := $i143;
  goto $bb90;
$bb87:
  assume !(($i140 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 20} true;
  assume {:verifier.code 0} true;
  /* %170 = icmp sgt i32 %164, 2147483647, !dbg !253, !verifier.code !62 */
  $i141 := $sgt.i32($i136, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %170, label %171, label %173, !dbg !254, !verifier.code !62 */
  $i142 := $i137;
  assume {:branchcond $i141} true;
  goto $bb88, $bb89;
$bb88:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 9} true;
  assume {:verifier.code 0} true;
  assume ($i141 == 1);
  goto $bb86;
$bb89:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i141 == 1));
  goto $bb90;
$bb90:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.18 = phi i32 [ %172, %171 ], [ %165, %169 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.18, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 164, 3} true;
  assume {:verifier.code 0} true;
  /* br label %174, !dbg !258, !verifier.code !62 */
  $i139 := $i142;
  goto $bb84;
$bb91:
  assume ($i153 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 11} true;
  assume {:verifier.code 0} true;
  /* %186 = icmp slt i32 %182, 0, !dbg !269, !verifier.code !62 */
  $i155 := $slt.i32($i151, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %186, label %189, label %187, !dbg !272, !verifier.code !62 */
  assume {:branchcond $i155} true;
  goto $bb94, $bb96;
$bb92:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i153 == 1));
  goto $bb93;
$bb93:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.21 = phi i32 [ %.20, %191 ], [ %183, %174 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.21, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 176, 7} true;
  assume {:verifier.code 0} true;
  /* %193 = sext i32 %178 to i64, !dbg !279, !verifier.code !62 */
  $i159 := $sext.i32.i64($i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 176, 9} true;
  assume {:verifier.code 0} true;
  /* %194 = srem i64 %193, 2147483648, !dbg !280, !verifier.code !62 */
  $i160 := $srem.i64($i159, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 176, 7} true;
  assume {:verifier.code 0} true;
  /* %195 = trunc i64 %194 to i32, !dbg !279, !verifier.code !62 */
  $i161 := $trunc.i64.i32($i160);
  /* call void @llvm.dbg.value(metadata i32 %195, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i161);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 177, 5} true;
  assume {:verifier.code 0} true;
  /* %196 = add nsw i32 %195, %195, !dbg !281, !verifier.code !62 */
  $i162 := $add.i32($i161, $i161);
  /* call void @llvm.dbg.value(metadata i32 %196, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i162);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 178, 7} true;
  assume {:verifier.code 0} true;
  /* %197 = sext i32 %182 to i64, !dbg !282, !verifier.code !62 */
  $i163 := $sext.i32.i64($i151);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 178, 9} true;
  assume {:verifier.code 0} true;
  /* %198 = srem i64 %197, 2147483648, !dbg !283, !verifier.code !62 */
  $i164 := $srem.i64($i163, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 178, 7} true;
  assume {:verifier.code 0} true;
  /* %199 = trunc i64 %198 to i32, !dbg !282, !verifier.code !62 */
  $i165 := $trunc.i64.i32($i164);
  /* call void @llvm.dbg.value(metadata i32 %199, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i165);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 179, 5} true;
  assume {:verifier.code 0} true;
  /* %200 = add nsw i32 %199, %199, !dbg !284, !verifier.code !62 */
  $i166 := $add.i32($i165, $i165);
  /* call void @llvm.dbg.value(metadata i32 %200, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i166);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 181, 5} true;
  assume {:verifier.code 0} true;
  /* %201 = add nsw i32 %.21, %.21, !dbg !285, !verifier.code !62 */
  $i167 := $add.i32($i154, $i154);
  /* call void @llvm.dbg.value(metadata i32 %201, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i167);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 182, 9} true;
  assume {:verifier.code 0} true;
  /* %202 = icmp slt i32 %196, 0, !dbg !286, !verifier.code !62 */
  $i168 := $slt.i32($i162, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 182, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %202, label %203, label %210, !dbg !288, !verifier.code !62 */
  $i169 := $i167;
  assume {:branchcond $i168} true;
  goto $bb100, $bb101;
$bb94:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 15} true;
  assume {:verifier.code 0} true;
  assume ($i155 == 1);
  goto $bb95;
$bb95:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 9} true;
  assume {:verifier.code 0} true;
  /* %190 = add nsw i32 %183, 1, !dbg !275, !verifier.code !62 */
  $i158 := $add.i32($i152, 1);
  /* call void @llvm.dbg.value(metadata i32 %190, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i158);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 174, 5} true;
  assume {:verifier.code 0} true;
  /* br label %191, !dbg !277, !verifier.code !62 */
  $i157 := $i158;
  goto $bb99;
$bb96:
  assume !(($i155 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 20} true;
  assume {:verifier.code 0} true;
  /* %188 = icmp sgt i32 %182, 2147483647, !dbg !273, !verifier.code !62 */
  $i156 := $sgt.i32($i151, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %188, label %189, label %191, !dbg !274, !verifier.code !62 */
  $i157 := $i152;
  assume {:branchcond $i156} true;
  goto $bb97, $bb98;
$bb97:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 9} true;
  assume {:verifier.code 0} true;
  assume ($i156 == 1);
  goto $bb95;
$bb98:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i156 == 1));
  goto $bb99;
$bb99:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.20 = phi i32 [ %190, %189 ], [ %183, %187 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.20, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 175, 3} true;
  assume {:verifier.code 0} true;
  /* br label %192, !dbg !278, !verifier.code !62 */
  $i154 := $i157;
  goto $bb93;
$bb100:
  assume ($i168 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 11} true;
  assume {:verifier.code 0} true;
  /* %204 = icmp slt i32 %200, 0, !dbg !289, !verifier.code !62 */
  $i170 := $slt.i32($i166, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %204, label %207, label %205, !dbg !292, !verifier.code !62 */
  assume {:branchcond $i170} true;
  goto $bb103, $bb105;
$bb101:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 182, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i168 == 1));
  goto $bb102;
$bb102:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.23 = phi i32 [ %.22, %209 ], [ %201, %192 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.23, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 187, 7} true;
  assume {:verifier.code 0} true;
  /* %211 = sext i32 %196 to i64, !dbg !299, !verifier.code !62 */
  $i174 := $sext.i32.i64($i162);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 187, 9} true;
  assume {:verifier.code 0} true;
  /* %212 = srem i64 %211, 2147483648, !dbg !300, !verifier.code !62 */
  $i175 := $srem.i64($i174, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 187, 7} true;
  assume {:verifier.code 0} true;
  /* %213 = trunc i64 %212 to i32, !dbg !299, !verifier.code !62 */
  $i176 := $trunc.i64.i32($i175);
  /* call void @llvm.dbg.value(metadata i32 %213, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i176);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 188, 5} true;
  assume {:verifier.code 0} true;
  /* %214 = add nsw i32 %213, %213, !dbg !301, !verifier.code !62 */
  $i177 := $add.i32($i176, $i176);
  /* call void @llvm.dbg.value(metadata i32 %214, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i177);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 189, 7} true;
  assume {:verifier.code 0} true;
  /* %215 = sext i32 %200 to i64, !dbg !302, !verifier.code !62 */
  $i178 := $sext.i32.i64($i166);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 189, 9} true;
  assume {:verifier.code 0} true;
  /* %216 = srem i64 %215, 2147483648, !dbg !303, !verifier.code !62 */
  $i179 := $srem.i64($i178, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 189, 7} true;
  assume {:verifier.code 0} true;
  /* %217 = trunc i64 %216 to i32, !dbg !302, !verifier.code !62 */
  $i180 := $trunc.i64.i32($i179);
  /* call void @llvm.dbg.value(metadata i32 %217, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i180);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 190, 5} true;
  assume {:verifier.code 0} true;
  /* %218 = add nsw i32 %217, %217, !dbg !304, !verifier.code !62 */
  $i181 := $add.i32($i180, $i180);
  /* call void @llvm.dbg.value(metadata i32 %218, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 192, 5} true;
  assume {:verifier.code 0} true;
  /* %219 = add nsw i32 %.23, %.23, !dbg !305, !verifier.code !62 */
  $i182 := $add.i32($i169, $i169);
  /* call void @llvm.dbg.value(metadata i32 %219, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 193, 9} true;
  assume {:verifier.code 0} true;
  /* %220 = icmp slt i32 %214, 0, !dbg !306, !verifier.code !62 */
  $i183 := $slt.i32($i177, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 193, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %220, label %221, label %228, !dbg !308, !verifier.code !62 */
  $i184 := $i182;
  assume {:branchcond $i183} true;
  goto $bb109, $bb110;
$bb103:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 15} true;
  assume {:verifier.code 0} true;
  assume ($i170 == 1);
  goto $bb104;
$bb104:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 184, 9} true;
  assume {:verifier.code 0} true;
  /* %208 = add nsw i32 %201, 1, !dbg !295, !verifier.code !62 */
  $i173 := $add.i32($i167, 1);
  /* call void @llvm.dbg.value(metadata i32 %208, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i173);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 185, 5} true;
  assume {:verifier.code 0} true;
  /* br label %209, !dbg !297, !verifier.code !62 */
  $i172 := $i173;
  goto $bb108;
$bb105:
  assume !(($i170 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 20} true;
  assume {:verifier.code 0} true;
  /* %206 = icmp sgt i32 %200, 2147483647, !dbg !293, !verifier.code !62 */
  $i171 := $sgt.i32($i166, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %206, label %207, label %209, !dbg !294, !verifier.code !62 */
  $i172 := $i167;
  assume {:branchcond $i171} true;
  goto $bb106, $bb107;
$bb106:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 9} true;
  assume {:verifier.code 0} true;
  assume ($i171 == 1);
  goto $bb104;
$bb107:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i171 == 1));
  goto $bb108;
$bb108:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.22 = phi i32 [ %208, %207 ], [ %201, %205 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.22, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 186, 3} true;
  assume {:verifier.code 0} true;
  /* br label %210, !dbg !298, !verifier.code !62 */
  $i169 := $i172;
  goto $bb102;
$bb109:
  assume ($i183 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 11} true;
  assume {:verifier.code 0} true;
  /* %222 = icmp slt i32 %218, 0, !dbg !309, !verifier.code !62 */
  $i185 := $slt.i32($i181, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %222, label %225, label %223, !dbg !312, !verifier.code !62 */
  assume {:branchcond $i185} true;
  goto $bb112, $bb114;
$bb110:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 193, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i183 == 1));
  goto $bb111;
$bb111:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.25 = phi i32 [ %.24, %227 ], [ %219, %210 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.25, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 198, 7} true;
  assume {:verifier.code 0} true;
  /* %229 = sext i32 %214 to i64, !dbg !319, !verifier.code !62 */
  $i189 := $sext.i32.i64($i177);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 198, 9} true;
  assume {:verifier.code 0} true;
  /* %230 = srem i64 %229, 2147483648, !dbg !320, !verifier.code !62 */
  $i190 := $srem.i64($i189, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 198, 7} true;
  assume {:verifier.code 0} true;
  /* %231 = trunc i64 %230 to i32, !dbg !319, !verifier.code !62 */
  $i191 := $trunc.i64.i32($i190);
  /* call void @llvm.dbg.value(metadata i32 %231, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i191);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 199, 5} true;
  assume {:verifier.code 0} true;
  /* %232 = add nsw i32 %231, %231, !dbg !321, !verifier.code !62 */
  $i192 := $add.i32($i191, $i191);
  /* call void @llvm.dbg.value(metadata i32 %232, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i192);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 200, 7} true;
  assume {:verifier.code 0} true;
  /* %233 = sext i32 %218 to i64, !dbg !322, !verifier.code !62 */
  $i193 := $sext.i32.i64($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 200, 9} true;
  assume {:verifier.code 0} true;
  /* %234 = srem i64 %233, 2147483648, !dbg !323, !verifier.code !62 */
  $i194 := $srem.i64($i193, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 200, 7} true;
  assume {:verifier.code 0} true;
  /* %235 = trunc i64 %234 to i32, !dbg !322, !verifier.code !62 */
  $i195 := $trunc.i64.i32($i194);
  /* call void @llvm.dbg.value(metadata i32 %235, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i195);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 201, 5} true;
  assume {:verifier.code 0} true;
  /* %236 = add nsw i32 %235, %235, !dbg !324, !verifier.code !62 */
  $i196 := $add.i32($i195, $i195);
  /* call void @llvm.dbg.value(metadata i32 %236, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i196);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 203, 5} true;
  assume {:verifier.code 0} true;
  /* %237 = add nsw i32 %.25, %.25, !dbg !325, !verifier.code !62 */
  $i197 := $add.i32($i184, $i184);
  /* call void @llvm.dbg.value(metadata i32 %237, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 204, 9} true;
  assume {:verifier.code 0} true;
  /* %238 = icmp slt i32 %232, 0, !dbg !326, !verifier.code !62 */
  $i198 := $slt.i32($i192, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 204, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %238, label %239, label %246, !dbg !328, !verifier.code !62 */
  $i199 := $i197;
  assume {:branchcond $i198} true;
  goto $bb118, $bb119;
$bb112:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 15} true;
  assume {:verifier.code 0} true;
  assume ($i185 == 1);
  goto $bb113;
$bb113:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 195, 9} true;
  assume {:verifier.code 0} true;
  /* %226 = add nsw i32 %219, 1, !dbg !315, !verifier.code !62 */
  $i188 := $add.i32($i182, 1);
  /* call void @llvm.dbg.value(metadata i32 %226, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i188);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 196, 5} true;
  assume {:verifier.code 0} true;
  /* br label %227, !dbg !317, !verifier.code !62 */
  $i187 := $i188;
  goto $bb117;
$bb114:
  assume !(($i185 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 20} true;
  assume {:verifier.code 0} true;
  /* %224 = icmp sgt i32 %218, 2147483647, !dbg !313, !verifier.code !62 */
  $i186 := $sgt.i32($i181, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %224, label %225, label %227, !dbg !314, !verifier.code !62 */
  $i187 := $i182;
  assume {:branchcond $i186} true;
  goto $bb115, $bb116;
$bb115:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 9} true;
  assume {:verifier.code 0} true;
  assume ($i186 == 1);
  goto $bb113;
$bb116:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i186 == 1));
  goto $bb117;
$bb117:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.24 = phi i32 [ %226, %225 ], [ %219, %223 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.24, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 197, 3} true;
  assume {:verifier.code 0} true;
  /* br label %228, !dbg !318, !verifier.code !62 */
  $i184 := $i187;
  goto $bb111;
$bb118:
  assume ($i198 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 11} true;
  assume {:verifier.code 0} true;
  /* %240 = icmp slt i32 %236, 0, !dbg !329, !verifier.code !62 */
  $i200 := $slt.i32($i196, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %240, label %243, label %241, !dbg !332, !verifier.code !62 */
  assume {:branchcond $i200} true;
  goto $bb121, $bb123;
$bb119:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 204, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i198 == 1));
  goto $bb120;
$bb120:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.27 = phi i32 [ %.26, %245 ], [ %237, %228 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.27, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 209, 7} true;
  assume {:verifier.code 0} true;
  /* %247 = sext i32 %232 to i64, !dbg !339, !verifier.code !62 */
  $i204 := $sext.i32.i64($i192);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 209, 9} true;
  assume {:verifier.code 0} true;
  /* %248 = srem i64 %247, 2147483648, !dbg !340, !verifier.code !62 */
  $i205 := $srem.i64($i204, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 209, 7} true;
  assume {:verifier.code 0} true;
  /* %249 = trunc i64 %248 to i32, !dbg !339, !verifier.code !62 */
  $i206 := $trunc.i64.i32($i205);
  /* call void @llvm.dbg.value(metadata i32 %249, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i206);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 210, 5} true;
  assume {:verifier.code 0} true;
  /* %250 = add nsw i32 %249, %249, !dbg !341, !verifier.code !62 */
  $i207 := $add.i32($i206, $i206);
  /* call void @llvm.dbg.value(metadata i32 %250, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i207);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 211, 7} true;
  assume {:verifier.code 0} true;
  /* %251 = sext i32 %236 to i64, !dbg !342, !verifier.code !62 */
  $i208 := $sext.i32.i64($i196);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 211, 9} true;
  assume {:verifier.code 0} true;
  /* %252 = srem i64 %251, 2147483648, !dbg !343, !verifier.code !62 */
  $i209 := $srem.i64($i208, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 211, 7} true;
  assume {:verifier.code 0} true;
  /* %253 = trunc i64 %252 to i32, !dbg !342, !verifier.code !62 */
  $i210 := $trunc.i64.i32($i209);
  /* call void @llvm.dbg.value(metadata i32 %253, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i210);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 212, 5} true;
  assume {:verifier.code 0} true;
  /* %254 = add nsw i32 %253, %253, !dbg !344, !verifier.code !62 */
  $i211 := $add.i32($i210, $i210);
  /* call void @llvm.dbg.value(metadata i32 %254, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 214, 5} true;
  assume {:verifier.code 0} true;
  /* %255 = add nsw i32 %.27, %.27, !dbg !345, !verifier.code !62 */
  $i212 := $add.i32($i199, $i199);
  /* call void @llvm.dbg.value(metadata i32 %255, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i212);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 215, 9} true;
  assume {:verifier.code 0} true;
  /* %256 = icmp slt i32 %250, 0, !dbg !346, !verifier.code !62 */
  $i213 := $slt.i32($i207, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 215, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %256, label %257, label %264, !dbg !348, !verifier.code !62 */
  $i214 := $i212;
  assume {:branchcond $i213} true;
  goto $bb127, $bb128;
$bb121:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 15} true;
  assume {:verifier.code 0} true;
  assume ($i200 == 1);
  goto $bb122;
$bb122:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 206, 9} true;
  assume {:verifier.code 0} true;
  /* %244 = add nsw i32 %237, 1, !dbg !335, !verifier.code !62 */
  $i203 := $add.i32($i197, 1);
  /* call void @llvm.dbg.value(metadata i32 %244, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i203);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 207, 5} true;
  assume {:verifier.code 0} true;
  /* br label %245, !dbg !337, !verifier.code !62 */
  $i202 := $i203;
  goto $bb126;
$bb123:
  assume !(($i200 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 20} true;
  assume {:verifier.code 0} true;
  /* %242 = icmp sgt i32 %236, 2147483647, !dbg !333, !verifier.code !62 */
  $i201 := $sgt.i32($i196, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %242, label %243, label %245, !dbg !334, !verifier.code !62 */
  $i202 := $i197;
  assume {:branchcond $i201} true;
  goto $bb124, $bb125;
$bb124:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 9} true;
  assume {:verifier.code 0} true;
  assume ($i201 == 1);
  goto $bb122;
$bb125:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i201 == 1));
  goto $bb126;
$bb126:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.26 = phi i32 [ %244, %243 ], [ %237, %241 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.26, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 208, 3} true;
  assume {:verifier.code 0} true;
  /* br label %246, !dbg !338, !verifier.code !62 */
  $i199 := $i202;
  goto $bb120;
$bb127:
  assume ($i213 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 11} true;
  assume {:verifier.code 0} true;
  /* %258 = icmp slt i32 %254, 0, !dbg !349, !verifier.code !62 */
  $i215 := $slt.i32($i211, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %258, label %261, label %259, !dbg !352, !verifier.code !62 */
  assume {:branchcond $i215} true;
  goto $bb130, $bb132;
$bb128:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 215, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i213 == 1));
  goto $bb129;
$bb129:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.29 = phi i32 [ %.28, %263 ], [ %255, %246 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.29, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 7} true;
  assume {:verifier.code 0} true;
  /* %265 = sext i32 %250 to i64, !dbg !359, !verifier.code !62 */
  $i219 := $sext.i32.i64($i207);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 9} true;
  assume {:verifier.code 0} true;
  /* %266 = srem i64 %265, 2147483648, !dbg !360, !verifier.code !62 */
  $i220 := $srem.i64($i219, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 7} true;
  assume {:verifier.code 0} true;
  /* %267 = trunc i64 %266 to i32, !dbg !359, !verifier.code !62 */
  $i221 := $trunc.i64.i32($i220);
  /* call void @llvm.dbg.value(metadata i32 %267, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i221);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 5} true;
  assume {:verifier.code 0} true;
  /* %268 = add nsw i32 %267, %267, !dbg !361, !verifier.code !62 */
  $i222 := $add.i32($i221, $i221);
  /* call void @llvm.dbg.value(metadata i32 %268, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 7} true;
  assume {:verifier.code 0} true;
  /* %269 = sext i32 %254 to i64, !dbg !362, !verifier.code !62 */
  $i223 := $sext.i32.i64($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 9} true;
  assume {:verifier.code 0} true;
  /* %270 = srem i64 %269, 2147483648, !dbg !363, !verifier.code !62 */
  $i224 := $srem.i64($i223, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 7} true;
  assume {:verifier.code 0} true;
  /* %271 = trunc i64 %270 to i32, !dbg !362, !verifier.code !62 */
  $i225 := $trunc.i64.i32($i224);
  /* call void @llvm.dbg.value(metadata i32 %271, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i225);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 223, 5} true;
  assume {:verifier.code 0} true;
  /* %272 = add nsw i32 %271, %271, !dbg !364, !verifier.code !62 */
  $i226 := $add.i32($i225, $i225);
  /* call void @llvm.dbg.value(metadata i32 %272, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 225, 5} true;
  assume {:verifier.code 0} true;
  /* %273 = add nsw i32 %.29, %.29, !dbg !365, !verifier.code !62 */
  $i227 := $add.i32($i214, $i214);
  /* call void @llvm.dbg.value(metadata i32 %273, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i227);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 226, 9} true;
  assume {:verifier.code 0} true;
  /* %274 = icmp slt i32 %268, 0, !dbg !366, !verifier.code !62 */
  $i228 := $slt.i32($i222, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 226, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %274, label %275, label %282, !dbg !368, !verifier.code !62 */
  $i229 := $i227;
  assume {:branchcond $i228} true;
  goto $bb136, $bb137;
$bb130:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 15} true;
  assume {:verifier.code 0} true;
  assume ($i215 == 1);
  goto $bb131;
$bb131:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 217, 9} true;
  assume {:verifier.code 0} true;
  /* %262 = add nsw i32 %255, 1, !dbg !355, !verifier.code !62 */
  $i218 := $add.i32($i212, 1);
  /* call void @llvm.dbg.value(metadata i32 %262, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i218);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 218, 5} true;
  assume {:verifier.code 0} true;
  /* br label %263, !dbg !357, !verifier.code !62 */
  $i217 := $i218;
  goto $bb135;
$bb132:
  assume !(($i215 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 20} true;
  assume {:verifier.code 0} true;
  /* %260 = icmp sgt i32 %254, 2147483647, !dbg !353, !verifier.code !62 */
  $i216 := $sgt.i32($i211, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %260, label %261, label %263, !dbg !354, !verifier.code !62 */
  $i217 := $i212;
  assume {:branchcond $i216} true;
  goto $bb133, $bb134;
$bb133:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 9} true;
  assume {:verifier.code 0} true;
  assume ($i216 == 1);
  goto $bb131;
$bb134:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i216 == 1));
  goto $bb135;
$bb135:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.28 = phi i32 [ %262, %261 ], [ %255, %259 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.28, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 219, 3} true;
  assume {:verifier.code 0} true;
  /* br label %264, !dbg !358, !verifier.code !62 */
  $i214 := $i217;
  goto $bb129;
$bb136:
  assume ($i228 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 11} true;
  assume {:verifier.code 0} true;
  /* %276 = icmp slt i32 %272, 0, !dbg !369, !verifier.code !62 */
  $i230 := $slt.i32($i226, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %276, label %279, label %277, !dbg !372, !verifier.code !62 */
  assume {:branchcond $i230} true;
  goto $bb139, $bb141;
$bb137:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 226, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i228 == 1));
  goto $bb138;
$bb138:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.31 = phi i32 [ %.30, %281 ], [ %273, %264 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.31, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 7} true;
  assume {:verifier.code 0} true;
  /* %283 = sext i32 %268 to i64, !dbg !379, !verifier.code !62 */
  $i234 := $sext.i32.i64($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 9} true;
  assume {:verifier.code 0} true;
  /* %284 = srem i64 %283, 2147483648, !dbg !380, !verifier.code !62 */
  $i235 := $srem.i64($i234, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 7} true;
  assume {:verifier.code 0} true;
  /* %285 = trunc i64 %284 to i32, !dbg !379, !verifier.code !62 */
  $i236 := $trunc.i64.i32($i235);
  /* call void @llvm.dbg.value(metadata i32 %285, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i236);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 5} true;
  assume {:verifier.code 0} true;
  /* %286 = add nsw i32 %285, %285, !dbg !381, !verifier.code !62 */
  $i237 := $add.i32($i236, $i236);
  /* call void @llvm.dbg.value(metadata i32 %286, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 7} true;
  assume {:verifier.code 0} true;
  /* %287 = sext i32 %272 to i64, !dbg !382, !verifier.code !62 */
  $i238 := $sext.i32.i64($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 9} true;
  assume {:verifier.code 0} true;
  /* %288 = srem i64 %287, 2147483648, !dbg !383, !verifier.code !62 */
  $i239 := $srem.i64($i238, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 7} true;
  assume {:verifier.code 0} true;
  /* %289 = trunc i64 %288 to i32, !dbg !382, !verifier.code !62 */
  $i240 := $trunc.i64.i32($i239);
  /* call void @llvm.dbg.value(metadata i32 %289, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i240);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 234, 5} true;
  assume {:verifier.code 0} true;
  /* %290 = add nsw i32 %289, %289, !dbg !384, !verifier.code !62 */
  $i241 := $add.i32($i240, $i240);
  /* call void @llvm.dbg.value(metadata i32 %290, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i241);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 236, 5} true;
  assume {:verifier.code 0} true;
  /* %291 = add nsw i32 %.31, %.31, !dbg !385, !verifier.code !62 */
  $i242 := $add.i32($i229, $i229);
  /* call void @llvm.dbg.value(metadata i32 %291, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i242);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 237, 9} true;
  assume {:verifier.code 0} true;
  /* %292 = icmp slt i32 %286, 0, !dbg !386, !verifier.code !62 */
  $i243 := $slt.i32($i237, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 237, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %292, label %293, label %300, !dbg !388, !verifier.code !62 */
  $i244 := $i242;
  assume {:branchcond $i243} true;
  goto $bb145, $bb146;
$bb139:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 15} true;
  assume {:verifier.code 0} true;
  assume ($i230 == 1);
  goto $bb140;
$bb140:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 228, 9} true;
  assume {:verifier.code 0} true;
  /* %280 = add nsw i32 %273, 1, !dbg !375, !verifier.code !62 */
  $i233 := $add.i32($i227, 1);
  /* call void @llvm.dbg.value(metadata i32 %280, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 229, 5} true;
  assume {:verifier.code 0} true;
  /* br label %281, !dbg !377, !verifier.code !62 */
  $i232 := $i233;
  goto $bb144;
$bb141:
  assume !(($i230 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 20} true;
  assume {:verifier.code 0} true;
  /* %278 = icmp sgt i32 %272, 2147483647, !dbg !373, !verifier.code !62 */
  $i231 := $sgt.i32($i226, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %278, label %279, label %281, !dbg !374, !verifier.code !62 */
  $i232 := $i227;
  assume {:branchcond $i231} true;
  goto $bb142, $bb143;
$bb142:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 9} true;
  assume {:verifier.code 0} true;
  assume ($i231 == 1);
  goto $bb140;
$bb143:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i231 == 1));
  goto $bb144;
$bb144:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.30 = phi i32 [ %280, %279 ], [ %273, %277 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.30, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 230, 3} true;
  assume {:verifier.code 0} true;
  /* br label %282, !dbg !378, !verifier.code !62 */
  $i229 := $i232;
  goto $bb138;
$bb145:
  assume ($i243 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 11} true;
  assume {:verifier.code 0} true;
  /* %294 = icmp slt i32 %290, 0, !dbg !389, !verifier.code !62 */
  $i245 := $slt.i32($i241, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %294, label %297, label %295, !dbg !392, !verifier.code !62 */
  assume {:branchcond $i245} true;
  goto $bb148, $bb150;
$bb146:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 237, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i243 == 1));
  goto $bb147;
$bb147:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.33 = phi i32 [ %.32, %299 ], [ %291, %282 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.33, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 7} true;
  assume {:verifier.code 0} true;
  /* %301 = sext i32 %286 to i64, !dbg !399, !verifier.code !62 */
  $i249 := $sext.i32.i64($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 9} true;
  assume {:verifier.code 0} true;
  /* %302 = srem i64 %301, 2147483648, !dbg !400, !verifier.code !62 */
  $i250 := $srem.i64($i249, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 7} true;
  assume {:verifier.code 0} true;
  /* %303 = trunc i64 %302 to i32, !dbg !399, !verifier.code !62 */
  $i251 := $trunc.i64.i32($i250);
  /* call void @llvm.dbg.value(metadata i32 %303, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 243, 5} true;
  assume {:verifier.code 0} true;
  /* %304 = add nsw i32 %303, %303, !dbg !401, !verifier.code !62 */
  $i252 := $add.i32($i251, $i251);
  /* call void @llvm.dbg.value(metadata i32 %304, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 244, 7} true;
  assume {:verifier.code 0} true;
  /* %305 = sext i32 %290 to i64, !dbg !402, !verifier.code !62 */
  $i253 := $sext.i32.i64($i241);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 244, 9} true;
  assume {:verifier.code 0} true;
  /* %306 = srem i64 %305, 2147483648, !dbg !403, !verifier.code !62 */
  $i254 := $srem.i64($i253, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 244, 7} true;
  assume {:verifier.code 0} true;
  /* %307 = trunc i64 %306 to i32, !dbg !402, !verifier.code !62 */
  $i255 := $trunc.i64.i32($i254);
  /* call void @llvm.dbg.value(metadata i32 %307, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i255);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 245, 5} true;
  assume {:verifier.code 0} true;
  /* %308 = add nsw i32 %307, %307, !dbg !404, !verifier.code !62 */
  $i256 := $add.i32($i255, $i255);
  /* call void @llvm.dbg.value(metadata i32 %308, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i256);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 5} true;
  assume {:verifier.code 0} true;
  /* %309 = add nsw i32 %.33, %.33, !dbg !405, !verifier.code !62 */
  $i257 := $add.i32($i244, $i244);
  /* call void @llvm.dbg.value(metadata i32 %309, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i257);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 9} true;
  assume {:verifier.code 0} true;
  /* %310 = icmp slt i32 %304, 0, !dbg !406, !verifier.code !62 */
  $i258 := $slt.i32($i252, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %310, label %311, label %318, !dbg !408, !verifier.code !62 */
  $i259 := $i257;
  assume {:branchcond $i258} true;
  goto $bb154, $bb155;
$bb148:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 15} true;
  assume {:verifier.code 0} true;
  assume ($i245 == 1);
  goto $bb149;
$bb149:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 239, 9} true;
  assume {:verifier.code 0} true;
  /* %298 = add nsw i32 %291, 1, !dbg !395, !verifier.code !62 */
  $i248 := $add.i32($i242, 1);
  /* call void @llvm.dbg.value(metadata i32 %298, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i248);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 240, 5} true;
  assume {:verifier.code 0} true;
  /* br label %299, !dbg !397, !verifier.code !62 */
  $i247 := $i248;
  goto $bb153;
$bb150:
  assume !(($i245 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 20} true;
  assume {:verifier.code 0} true;
  /* %296 = icmp sgt i32 %290, 2147483647, !dbg !393, !verifier.code !62 */
  $i246 := $sgt.i32($i241, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %296, label %297, label %299, !dbg !394, !verifier.code !62 */
  $i247 := $i242;
  assume {:branchcond $i246} true;
  goto $bb151, $bb152;
$bb151:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 9} true;
  assume {:verifier.code 0} true;
  assume ($i246 == 1);
  goto $bb149;
$bb152:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i246 == 1));
  goto $bb153;
$bb153:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.32 = phi i32 [ %298, %297 ], [ %291, %295 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.32, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 241, 3} true;
  assume {:verifier.code 0} true;
  /* br label %300, !dbg !398, !verifier.code !62 */
  $i244 := $i247;
  goto $bb147;
$bb154:
  assume ($i258 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 11} true;
  assume {:verifier.code 0} true;
  /* %312 = icmp slt i32 %308, 0, !dbg !409, !verifier.code !62 */
  $i260 := $slt.i32($i256, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %312, label %315, label %313, !dbg !412, !verifier.code !62 */
  assume {:branchcond $i260} true;
  goto $bb157, $bb159;
$bb155:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i258 == 1));
  goto $bb156;
$bb156:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.35 = phi i32 [ %.34, %317 ], [ %309, %300 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.35, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 7} true;
  assume {:verifier.code 0} true;
  /* %319 = sext i32 %304 to i64, !dbg !419, !verifier.code !62 */
  $i264 := $sext.i32.i64($i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 9} true;
  assume {:verifier.code 0} true;
  /* %320 = srem i64 %319, 2147483648, !dbg !420, !verifier.code !62 */
  $i265 := $srem.i64($i264, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 7} true;
  assume {:verifier.code 0} true;
  /* %321 = trunc i64 %320 to i32, !dbg !419, !verifier.code !62 */
  $i266 := $trunc.i64.i32($i265);
  /* call void @llvm.dbg.value(metadata i32 %321, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 254, 5} true;
  assume {:verifier.code 0} true;
  /* %322 = add nsw i32 %321, %321, !dbg !421, !verifier.code !62 */
  $i267 := $add.i32($i266, $i266);
  /* call void @llvm.dbg.value(metadata i32 %322, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i267);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 255, 7} true;
  assume {:verifier.code 0} true;
  /* %323 = sext i32 %308 to i64, !dbg !422, !verifier.code !62 */
  $i268 := $sext.i32.i64($i256);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 255, 9} true;
  assume {:verifier.code 0} true;
  /* %324 = srem i64 %323, 2147483648, !dbg !423, !verifier.code !62 */
  $i269 := $srem.i64($i268, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 255, 7} true;
  assume {:verifier.code 0} true;
  /* %325 = trunc i64 %324 to i32, !dbg !422, !verifier.code !62 */
  $i270 := $trunc.i64.i32($i269);
  /* call void @llvm.dbg.value(metadata i32 %325, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i270);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 5} true;
  assume {:verifier.code 0} true;
  /* %326 = add nsw i32 %325, %325, !dbg !424, !verifier.code !62 */
  $i271 := $add.i32($i270, $i270);
  /* call void @llvm.dbg.value(metadata i32 %326, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i271);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 5} true;
  assume {:verifier.code 0} true;
  /* %327 = add nsw i32 %.35, %.35, !dbg !425, !verifier.code !62 */
  $i272 := $add.i32($i259, $i259);
  /* call void @llvm.dbg.value(metadata i32 %327, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i272);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 259, 9} true;
  assume {:verifier.code 0} true;
  /* %328 = icmp slt i32 %322, 0, !dbg !426, !verifier.code !62 */
  $i273 := $slt.i32($i267, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 259, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %328, label %329, label %336, !dbg !428, !verifier.code !62 */
  $i274 := $i272;
  assume {:branchcond $i273} true;
  goto $bb163, $bb164;
$bb157:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 15} true;
  assume {:verifier.code 0} true;
  assume ($i260 == 1);
  goto $bb158;
$bb158:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 250, 9} true;
  assume {:verifier.code 0} true;
  /* %316 = add nsw i32 %309, 1, !dbg !415, !verifier.code !62 */
  $i263 := $add.i32($i257, 1);
  /* call void @llvm.dbg.value(metadata i32 %316, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i263);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 251, 5} true;
  assume {:verifier.code 0} true;
  /* br label %317, !dbg !417, !verifier.code !62 */
  $i262 := $i263;
  goto $bb162;
$bb159:
  assume !(($i260 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 20} true;
  assume {:verifier.code 0} true;
  /* %314 = icmp sgt i32 %308, 2147483647, !dbg !413, !verifier.code !62 */
  $i261 := $sgt.i32($i256, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %314, label %315, label %317, !dbg !414, !verifier.code !62 */
  $i262 := $i257;
  assume {:branchcond $i261} true;
  goto $bb160, $bb161;
$bb160:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 9} true;
  assume {:verifier.code 0} true;
  assume ($i261 == 1);
  goto $bb158;
$bb161:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i261 == 1));
  goto $bb162;
$bb162:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.34 = phi i32 [ %316, %315 ], [ %309, %313 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.34, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 3} true;
  assume {:verifier.code 0} true;
  /* br label %318, !dbg !418, !verifier.code !62 */
  $i259 := $i262;
  goto $bb156;
$bb163:
  assume ($i273 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 11} true;
  assume {:verifier.code 0} true;
  /* %330 = icmp slt i32 %326, 0, !dbg !429, !verifier.code !62 */
  $i275 := $slt.i32($i271, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %330, label %333, label %331, !dbg !432, !verifier.code !62 */
  assume {:branchcond $i275} true;
  goto $bb166, $bb168;
$bb164:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 259, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i273 == 1));
  goto $bb165;
$bb165:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.37 = phi i32 [ %.36, %335 ], [ %327, %318 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.37, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 264, 7} true;
  assume {:verifier.code 0} true;
  /* %337 = sext i32 %322 to i64, !dbg !439, !verifier.code !62 */
  $i279 := $sext.i32.i64($i267);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 264, 9} true;
  assume {:verifier.code 0} true;
  /* %338 = srem i64 %337, 2147483648, !dbg !440, !verifier.code !62 */
  $i280 := $srem.i64($i279, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 264, 7} true;
  assume {:verifier.code 0} true;
  /* %339 = trunc i64 %338 to i32, !dbg !439, !verifier.code !62 */
  $i281 := $trunc.i64.i32($i280);
  /* call void @llvm.dbg.value(metadata i32 %339, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i281);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 265, 5} true;
  assume {:verifier.code 0} true;
  /* %340 = add nsw i32 %339, %339, !dbg !441, !verifier.code !62 */
  $i282 := $add.i32($i281, $i281);
  /* call void @llvm.dbg.value(metadata i32 %340, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i282);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 266, 7} true;
  assume {:verifier.code 0} true;
  /* %341 = sext i32 %326 to i64, !dbg !442, !verifier.code !62 */
  $i283 := $sext.i32.i64($i271);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 266, 9} true;
  assume {:verifier.code 0} true;
  /* %342 = srem i64 %341, 2147483648, !dbg !443, !verifier.code !62 */
  $i284 := $srem.i64($i283, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 266, 7} true;
  assume {:verifier.code 0} true;
  /* %343 = trunc i64 %342 to i32, !dbg !442, !verifier.code !62 */
  $i285 := $trunc.i64.i32($i284);
  /* call void @llvm.dbg.value(metadata i32 %343, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i285);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 267, 5} true;
  assume {:verifier.code 0} true;
  /* %344 = add nsw i32 %343, %343, !dbg !444, !verifier.code !62 */
  $i286 := $add.i32($i285, $i285);
  /* call void @llvm.dbg.value(metadata i32 %344, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i286);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 269, 5} true;
  assume {:verifier.code 0} true;
  /* %345 = add nsw i32 %.37, %.37, !dbg !445, !verifier.code !62 */
  $i287 := $add.i32($i274, $i274);
  /* call void @llvm.dbg.value(metadata i32 %345, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 270, 9} true;
  assume {:verifier.code 0} true;
  /* %346 = icmp slt i32 %340, 0, !dbg !446, !verifier.code !62 */
  $i288 := $slt.i32($i282, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 270, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %346, label %347, label %354, !dbg !448, !verifier.code !62 */
  $i289 := $i287;
  assume {:branchcond $i288} true;
  goto $bb172, $bb173;
$bb166:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 15} true;
  assume {:verifier.code 0} true;
  assume ($i275 == 1);
  goto $bb167;
$bb167:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 261, 9} true;
  assume {:verifier.code 0} true;
  /* %334 = add nsw i32 %327, 1, !dbg !435, !verifier.code !62 */
  $i278 := $add.i32($i272, 1);
  /* call void @llvm.dbg.value(metadata i32 %334, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i278);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 262, 5} true;
  assume {:verifier.code 0} true;
  /* br label %335, !dbg !437, !verifier.code !62 */
  $i277 := $i278;
  goto $bb171;
$bb168:
  assume !(($i275 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 20} true;
  assume {:verifier.code 0} true;
  /* %332 = icmp sgt i32 %326, 2147483647, !dbg !433, !verifier.code !62 */
  $i276 := $sgt.i32($i271, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %332, label %333, label %335, !dbg !434, !verifier.code !62 */
  $i277 := $i272;
  assume {:branchcond $i276} true;
  goto $bb169, $bb170;
$bb169:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 9} true;
  assume {:verifier.code 0} true;
  assume ($i276 == 1);
  goto $bb167;
$bb170:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i276 == 1));
  goto $bb171;
$bb171:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.36 = phi i32 [ %334, %333 ], [ %327, %331 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.36, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 263, 3} true;
  assume {:verifier.code 0} true;
  /* br label %336, !dbg !438, !verifier.code !62 */
  $i274 := $i277;
  goto $bb165;
$bb172:
  assume ($i288 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 11} true;
  assume {:verifier.code 0} true;
  /* %348 = icmp slt i32 %344, 0, !dbg !449, !verifier.code !62 */
  $i290 := $slt.i32($i286, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %348, label %351, label %349, !dbg !452, !verifier.code !62 */
  assume {:branchcond $i290} true;
  goto $bb175, $bb177;
$bb173:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 270, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i288 == 1));
  goto $bb174;
$bb174:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.39 = phi i32 [ %.38, %353 ], [ %345, %336 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.39, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 275, 7} true;
  assume {:verifier.code 0} true;
  /* %355 = sext i32 %340 to i64, !dbg !459, !verifier.code !62 */
  $i294 := $sext.i32.i64($i282);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 275, 9} true;
  assume {:verifier.code 0} true;
  /* %356 = srem i64 %355, 2147483648, !dbg !460, !verifier.code !62 */
  $i295 := $srem.i64($i294, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 275, 7} true;
  assume {:verifier.code 0} true;
  /* %357 = trunc i64 %356 to i32, !dbg !459, !verifier.code !62 */
  $i296 := $trunc.i64.i32($i295);
  /* call void @llvm.dbg.value(metadata i32 %357, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i296);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 276, 5} true;
  assume {:verifier.code 0} true;
  /* %358 = add nsw i32 %357, %357, !dbg !461, !verifier.code !62 */
  $i297 := $add.i32($i296, $i296);
  /* call void @llvm.dbg.value(metadata i32 %358, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i297);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 277, 7} true;
  assume {:verifier.code 0} true;
  /* %359 = sext i32 %344 to i64, !dbg !462, !verifier.code !62 */
  $i298 := $sext.i32.i64($i286);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 277, 9} true;
  assume {:verifier.code 0} true;
  /* %360 = srem i64 %359, 2147483648, !dbg !463, !verifier.code !62 */
  $i299 := $srem.i64($i298, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 277, 7} true;
  assume {:verifier.code 0} true;
  /* %361 = trunc i64 %360 to i32, !dbg !462, !verifier.code !62 */
  $i300 := $trunc.i64.i32($i299);
  /* call void @llvm.dbg.value(metadata i32 %361, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i300);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 278, 5} true;
  assume {:verifier.code 0} true;
  /* %362 = add nsw i32 %361, %361, !dbg !464, !verifier.code !62 */
  $i301 := $add.i32($i300, $i300);
  /* call void @llvm.dbg.value(metadata i32 %362, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i301);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 280, 5} true;
  assume {:verifier.code 0} true;
  /* %363 = add nsw i32 %.39, %.39, !dbg !465, !verifier.code !62 */
  $i302 := $add.i32($i289, $i289);
  /* call void @llvm.dbg.value(metadata i32 %363, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i302);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 281, 9} true;
  assume {:verifier.code 0} true;
  /* %364 = icmp slt i32 %358, 0, !dbg !466, !verifier.code !62 */
  $i303 := $slt.i32($i297, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 281, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %364, label %365, label %372, !dbg !468, !verifier.code !62 */
  $i304 := $i302;
  assume {:branchcond $i303} true;
  goto $bb181, $bb182;
$bb175:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 15} true;
  assume {:verifier.code 0} true;
  assume ($i290 == 1);
  goto $bb176;
$bb176:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 272, 9} true;
  assume {:verifier.code 0} true;
  /* %352 = add nsw i32 %345, 1, !dbg !455, !verifier.code !62 */
  $i293 := $add.i32($i287, 1);
  /* call void @llvm.dbg.value(metadata i32 %352, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i293);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 273, 5} true;
  assume {:verifier.code 0} true;
  /* br label %353, !dbg !457, !verifier.code !62 */
  $i292 := $i293;
  goto $bb180;
$bb177:
  assume !(($i290 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 20} true;
  assume {:verifier.code 0} true;
  /* %350 = icmp sgt i32 %344, 2147483647, !dbg !453, !verifier.code !62 */
  $i291 := $sgt.i32($i286, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %350, label %351, label %353, !dbg !454, !verifier.code !62 */
  $i292 := $i287;
  assume {:branchcond $i291} true;
  goto $bb178, $bb179;
$bb178:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 9} true;
  assume {:verifier.code 0} true;
  assume ($i291 == 1);
  goto $bb176;
$bb179:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i291 == 1));
  goto $bb180;
$bb180:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.38 = phi i32 [ %352, %351 ], [ %345, %349 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.38, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 274, 3} true;
  assume {:verifier.code 0} true;
  /* br label %354, !dbg !458, !verifier.code !62 */
  $i289 := $i292;
  goto $bb174;
$bb181:
  assume ($i303 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 11} true;
  assume {:verifier.code 0} true;
  /* %366 = icmp slt i32 %362, 0, !dbg !469, !verifier.code !62 */
  $i305 := $slt.i32($i301, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %366, label %369, label %367, !dbg !472, !verifier.code !62 */
  assume {:branchcond $i305} true;
  goto $bb184, $bb186;
$bb182:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 281, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i303 == 1));
  goto $bb183;
$bb183:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.41 = phi i32 [ %.40, %371 ], [ %363, %354 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.41, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 286, 7} true;
  assume {:verifier.code 0} true;
  /* %373 = sext i32 %358 to i64, !dbg !479, !verifier.code !62 */
  $i309 := $sext.i32.i64($i297);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 286, 9} true;
  assume {:verifier.code 0} true;
  /* %374 = srem i64 %373, 2147483648, !dbg !480, !verifier.code !62 */
  $i310 := $srem.i64($i309, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 286, 7} true;
  assume {:verifier.code 0} true;
  /* %375 = trunc i64 %374 to i32, !dbg !479, !verifier.code !62 */
  $i311 := $trunc.i64.i32($i310);
  /* call void @llvm.dbg.value(metadata i32 %375, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i311);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 287, 5} true;
  assume {:verifier.code 0} true;
  /* %376 = add nsw i32 %375, %375, !dbg !481, !verifier.code !62 */
  $i312 := $add.i32($i311, $i311);
  /* call void @llvm.dbg.value(metadata i32 %376, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i312);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 288, 7} true;
  assume {:verifier.code 0} true;
  /* %377 = sext i32 %362 to i64, !dbg !482, !verifier.code !62 */
  $i313 := $sext.i32.i64($i301);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 288, 9} true;
  assume {:verifier.code 0} true;
  /* %378 = srem i64 %377, 2147483648, !dbg !483, !verifier.code !62 */
  $i314 := $srem.i64($i313, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 288, 7} true;
  assume {:verifier.code 0} true;
  /* %379 = trunc i64 %378 to i32, !dbg !482, !verifier.code !62 */
  $i315 := $trunc.i64.i32($i314);
  /* call void @llvm.dbg.value(metadata i32 %379, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i315);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 289, 5} true;
  assume {:verifier.code 0} true;
  /* %380 = add nsw i32 %379, %379, !dbg !484, !verifier.code !62 */
  $i316 := $add.i32($i315, $i315);
  /* call void @llvm.dbg.value(metadata i32 %380, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 291, 5} true;
  assume {:verifier.code 0} true;
  /* %381 = add nsw i32 %.41, %.41, !dbg !485, !verifier.code !62 */
  $i317 := $add.i32($i304, $i304);
  /* call void @llvm.dbg.value(metadata i32 %381, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i317);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 292, 9} true;
  assume {:verifier.code 0} true;
  /* %382 = icmp slt i32 %376, 0, !dbg !486, !verifier.code !62 */
  $i318 := $slt.i32($i312, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 292, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %382, label %383, label %390, !dbg !488, !verifier.code !62 */
  $i319 := $i317;
  assume {:branchcond $i318} true;
  goto $bb190, $bb191;
$bb184:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 15} true;
  assume {:verifier.code 0} true;
  assume ($i305 == 1);
  goto $bb185;
$bb185:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 283, 9} true;
  assume {:verifier.code 0} true;
  /* %370 = add nsw i32 %363, 1, !dbg !475, !verifier.code !62 */
  $i308 := $add.i32($i302, 1);
  /* call void @llvm.dbg.value(metadata i32 %370, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i308);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 284, 5} true;
  assume {:verifier.code 0} true;
  /* br label %371, !dbg !477, !verifier.code !62 */
  $i307 := $i308;
  goto $bb189;
$bb186:
  assume !(($i305 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 20} true;
  assume {:verifier.code 0} true;
  /* %368 = icmp sgt i32 %362, 2147483647, !dbg !473, !verifier.code !62 */
  $i306 := $sgt.i32($i301, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %368, label %369, label %371, !dbg !474, !verifier.code !62 */
  $i307 := $i302;
  assume {:branchcond $i306} true;
  goto $bb187, $bb188;
$bb187:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 9} true;
  assume {:verifier.code 0} true;
  assume ($i306 == 1);
  goto $bb185;
$bb188:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i306 == 1));
  goto $bb189;
$bb189:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.40 = phi i32 [ %370, %369 ], [ %363, %367 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.40, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 285, 3} true;
  assume {:verifier.code 0} true;
  /* br label %372, !dbg !478, !verifier.code !62 */
  $i304 := $i307;
  goto $bb183;
$bb190:
  assume ($i318 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 11} true;
  assume {:verifier.code 0} true;
  /* %384 = icmp slt i32 %380, 0, !dbg !489, !verifier.code !62 */
  $i320 := $slt.i32($i316, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %384, label %387, label %385, !dbg !492, !verifier.code !62 */
  assume {:branchcond $i320} true;
  goto $bb193, $bb195;
$bb191:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 292, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i318 == 1));
  goto $bb192;
$bb192:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.43 = phi i32 [ %.42, %389 ], [ %381, %372 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.43, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 297, 7} true;
  assume {:verifier.code 0} true;
  /* %391 = sext i32 %376 to i64, !dbg !499, !verifier.code !62 */
  $i324 := $sext.i32.i64($i312);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 297, 9} true;
  assume {:verifier.code 0} true;
  /* %392 = srem i64 %391, 2147483648, !dbg !500, !verifier.code !62 */
  $i325 := $srem.i64($i324, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 297, 7} true;
  assume {:verifier.code 0} true;
  /* %393 = trunc i64 %392 to i32, !dbg !499, !verifier.code !62 */
  $i326 := $trunc.i64.i32($i325);
  /* call void @llvm.dbg.value(metadata i32 %393, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i326);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 298, 5} true;
  assume {:verifier.code 0} true;
  /* %394 = add nsw i32 %393, %393, !dbg !501, !verifier.code !62 */
  $i327 := $add.i32($i326, $i326);
  /* call void @llvm.dbg.value(metadata i32 %394, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 299, 7} true;
  assume {:verifier.code 0} true;
  /* %395 = sext i32 %380 to i64, !dbg !502, !verifier.code !62 */
  $i328 := $sext.i32.i64($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 299, 9} true;
  assume {:verifier.code 0} true;
  /* %396 = srem i64 %395, 2147483648, !dbg !503, !verifier.code !62 */
  $i329 := $srem.i64($i328, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 299, 7} true;
  assume {:verifier.code 0} true;
  /* %397 = trunc i64 %396 to i32, !dbg !502, !verifier.code !62 */
  $i330 := $trunc.i64.i32($i329);
  /* call void @llvm.dbg.value(metadata i32 %397, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i330);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 300, 5} true;
  assume {:verifier.code 0} true;
  /* %398 = add nsw i32 %397, %397, !dbg !504, !verifier.code !62 */
  $i331 := $add.i32($i330, $i330);
  /* call void @llvm.dbg.value(metadata i32 %398, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i331);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 302, 5} true;
  assume {:verifier.code 0} true;
  /* %399 = add nsw i32 %.43, %.43, !dbg !505, !verifier.code !62 */
  $i332 := $add.i32($i319, $i319);
  /* call void @llvm.dbg.value(metadata i32 %399, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i332);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 303, 9} true;
  assume {:verifier.code 0} true;
  /* %400 = icmp slt i32 %394, 0, !dbg !506, !verifier.code !62 */
  $i333 := $slt.i32($i327, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 303, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %400, label %401, label %408, !dbg !508, !verifier.code !62 */
  $i334 := $i332;
  assume {:branchcond $i333} true;
  goto $bb199, $bb200;
$bb193:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 15} true;
  assume {:verifier.code 0} true;
  assume ($i320 == 1);
  goto $bb194;
$bb194:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 294, 9} true;
  assume {:verifier.code 0} true;
  /* %388 = add nsw i32 %381, 1, !dbg !495, !verifier.code !62 */
  $i323 := $add.i32($i317, 1);
  /* call void @llvm.dbg.value(metadata i32 %388, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i323);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 295, 5} true;
  assume {:verifier.code 0} true;
  /* br label %389, !dbg !497, !verifier.code !62 */
  $i322 := $i323;
  goto $bb198;
$bb195:
  assume !(($i320 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 20} true;
  assume {:verifier.code 0} true;
  /* %386 = icmp sgt i32 %380, 2147483647, !dbg !493, !verifier.code !62 */
  $i321 := $sgt.i32($i316, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %386, label %387, label %389, !dbg !494, !verifier.code !62 */
  $i322 := $i317;
  assume {:branchcond $i321} true;
  goto $bb196, $bb197;
$bb196:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 9} true;
  assume {:verifier.code 0} true;
  assume ($i321 == 1);
  goto $bb194;
$bb197:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i321 == 1));
  goto $bb198;
$bb198:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.42 = phi i32 [ %388, %387 ], [ %381, %385 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.42, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 296, 3} true;
  assume {:verifier.code 0} true;
  /* br label %390, !dbg !498, !verifier.code !62 */
  $i319 := $i322;
  goto $bb192;
$bb199:
  assume ($i333 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 11} true;
  assume {:verifier.code 0} true;
  /* %402 = icmp slt i32 %398, 0, !dbg !509, !verifier.code !62 */
  $i335 := $slt.i32($i331, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %402, label %405, label %403, !dbg !512, !verifier.code !62 */
  assume {:branchcond $i335} true;
  goto $bb202, $bb204;
$bb200:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 303, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i333 == 1));
  goto $bb201;
$bb201:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.45 = phi i32 [ %.44, %407 ], [ %399, %390 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.45, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 308, 7} true;
  assume {:verifier.code 0} true;
  /* %409 = sext i32 %394 to i64, !dbg !519, !verifier.code !62 */
  $i339 := $sext.i32.i64($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 308, 9} true;
  assume {:verifier.code 0} true;
  /* %410 = srem i64 %409, 2147483648, !dbg !520, !verifier.code !62 */
  $i340 := $srem.i64($i339, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 308, 7} true;
  assume {:verifier.code 0} true;
  /* %411 = trunc i64 %410 to i32, !dbg !519, !verifier.code !62 */
  $i341 := $trunc.i64.i32($i340);
  /* call void @llvm.dbg.value(metadata i32 %411, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i341);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 309, 5} true;
  assume {:verifier.code 0} true;
  /* %412 = add nsw i32 %411, %411, !dbg !521, !verifier.code !62 */
  $i342 := $add.i32($i341, $i341);
  /* call void @llvm.dbg.value(metadata i32 %412, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 310, 7} true;
  assume {:verifier.code 0} true;
  /* %413 = sext i32 %398 to i64, !dbg !522, !verifier.code !62 */
  $i343 := $sext.i32.i64($i331);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 310, 9} true;
  assume {:verifier.code 0} true;
  /* %414 = srem i64 %413, 2147483648, !dbg !523, !verifier.code !62 */
  $i344 := $srem.i64($i343, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 310, 7} true;
  assume {:verifier.code 0} true;
  /* %415 = trunc i64 %414 to i32, !dbg !522, !verifier.code !62 */
  $i345 := $trunc.i64.i32($i344);
  /* call void @llvm.dbg.value(metadata i32 %415, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 311, 5} true;
  assume {:verifier.code 0} true;
  /* %416 = add nsw i32 %415, %415, !dbg !524, !verifier.code !62 */
  $i346 := $add.i32($i345, $i345);
  /* call void @llvm.dbg.value(metadata i32 %416, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 313, 5} true;
  assume {:verifier.code 0} true;
  /* %417 = add nsw i32 %.45, %.45, !dbg !525, !verifier.code !62 */
  $i347 := $add.i32($i334, $i334);
  /* call void @llvm.dbg.value(metadata i32 %417, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i347);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 314, 9} true;
  assume {:verifier.code 0} true;
  /* %418 = icmp slt i32 %412, 0, !dbg !526, !verifier.code !62 */
  $i348 := $slt.i32($i342, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 314, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %418, label %419, label %426, !dbg !528, !verifier.code !62 */
  $i349 := $i347;
  assume {:branchcond $i348} true;
  goto $bb208, $bb209;
$bb202:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 15} true;
  assume {:verifier.code 0} true;
  assume ($i335 == 1);
  goto $bb203;
$bb203:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 305, 9} true;
  assume {:verifier.code 0} true;
  /* %406 = add nsw i32 %399, 1, !dbg !515, !verifier.code !62 */
  $i338 := $add.i32($i332, 1);
  /* call void @llvm.dbg.value(metadata i32 %406, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 306, 5} true;
  assume {:verifier.code 0} true;
  /* br label %407, !dbg !517, !verifier.code !62 */
  $i337 := $i338;
  goto $bb207;
$bb204:
  assume !(($i335 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 20} true;
  assume {:verifier.code 0} true;
  /* %404 = icmp sgt i32 %398, 2147483647, !dbg !513, !verifier.code !62 */
  $i336 := $sgt.i32($i331, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %404, label %405, label %407, !dbg !514, !verifier.code !62 */
  $i337 := $i332;
  assume {:branchcond $i336} true;
  goto $bb205, $bb206;
$bb205:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 9} true;
  assume {:verifier.code 0} true;
  assume ($i336 == 1);
  goto $bb203;
$bb206:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i336 == 1));
  goto $bb207;
$bb207:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.44 = phi i32 [ %406, %405 ], [ %399, %403 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.44, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 307, 3} true;
  assume {:verifier.code 0} true;
  /* br label %408, !dbg !518, !verifier.code !62 */
  $i334 := $i337;
  goto $bb201;
$bb208:
  assume ($i348 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 11} true;
  assume {:verifier.code 0} true;
  /* %420 = icmp slt i32 %416, 0, !dbg !529, !verifier.code !62 */
  $i350 := $slt.i32($i346, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %420, label %423, label %421, !dbg !532, !verifier.code !62 */
  assume {:branchcond $i350} true;
  goto $bb211, $bb213;
$bb209:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 314, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i348 == 1));
  goto $bb210;
$bb210:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.47 = phi i32 [ %.46, %425 ], [ %417, %408 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.47, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 319, 7} true;
  assume {:verifier.code 0} true;
  /* %427 = sext i32 %412 to i64, !dbg !539, !verifier.code !62 */
  $i354 := $sext.i32.i64($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 319, 9} true;
  assume {:verifier.code 0} true;
  /* %428 = srem i64 %427, 2147483648, !dbg !540, !verifier.code !62 */
  $i355 := $srem.i64($i354, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 319, 7} true;
  assume {:verifier.code 0} true;
  /* %429 = trunc i64 %428 to i32, !dbg !539, !verifier.code !62 */
  $i356 := $trunc.i64.i32($i355);
  /* call void @llvm.dbg.value(metadata i32 %429, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i356);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 320, 5} true;
  assume {:verifier.code 0} true;
  /* %430 = add nsw i32 %429, %429, !dbg !541, !verifier.code !62 */
  $i357 := $add.i32($i356, $i356);
  /* call void @llvm.dbg.value(metadata i32 %430, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i357);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 321, 7} true;
  assume {:verifier.code 0} true;
  /* %431 = sext i32 %416 to i64, !dbg !542, !verifier.code !62 */
  $i358 := $sext.i32.i64($i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 321, 9} true;
  assume {:verifier.code 0} true;
  /* %432 = srem i64 %431, 2147483648, !dbg !543, !verifier.code !62 */
  $i359 := $srem.i64($i358, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 321, 7} true;
  assume {:verifier.code 0} true;
  /* %433 = trunc i64 %432 to i32, !dbg !542, !verifier.code !62 */
  $i360 := $trunc.i64.i32($i359);
  /* call void @llvm.dbg.value(metadata i32 %433, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i360);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 322, 5} true;
  assume {:verifier.code 0} true;
  /* %434 = add nsw i32 %433, %433, !dbg !544, !verifier.code !62 */
  $i361 := $add.i32($i360, $i360);
  /* call void @llvm.dbg.value(metadata i32 %434, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i361);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 324, 5} true;
  assume {:verifier.code 0} true;
  /* %435 = add nsw i32 %.47, %.47, !dbg !545, !verifier.code !62 */
  $i362 := $add.i32($i349, $i349);
  /* call void @llvm.dbg.value(metadata i32 %435, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i362);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 325, 9} true;
  assume {:verifier.code 0} true;
  /* %436 = icmp slt i32 %430, 0, !dbg !546, !verifier.code !62 */
  $i363 := $slt.i32($i357, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 325, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %436, label %437, label %444, !dbg !548, !verifier.code !62 */
  $i364 := $i362;
  assume {:branchcond $i363} true;
  goto $bb217, $bb218;
$bb211:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 15} true;
  assume {:verifier.code 0} true;
  assume ($i350 == 1);
  goto $bb212;
$bb212:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 316, 9} true;
  assume {:verifier.code 0} true;
  /* %424 = add nsw i32 %417, 1, !dbg !535, !verifier.code !62 */
  $i353 := $add.i32($i347, 1);
  /* call void @llvm.dbg.value(metadata i32 %424, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i353);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 317, 5} true;
  assume {:verifier.code 0} true;
  /* br label %425, !dbg !537, !verifier.code !62 */
  $i352 := $i353;
  goto $bb216;
$bb213:
  assume !(($i350 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 20} true;
  assume {:verifier.code 0} true;
  /* %422 = icmp sgt i32 %416, 2147483647, !dbg !533, !verifier.code !62 */
  $i351 := $sgt.i32($i346, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %422, label %423, label %425, !dbg !534, !verifier.code !62 */
  $i352 := $i347;
  assume {:branchcond $i351} true;
  goto $bb214, $bb215;
$bb214:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 9} true;
  assume {:verifier.code 0} true;
  assume ($i351 == 1);
  goto $bb212;
$bb215:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i351 == 1));
  goto $bb216;
$bb216:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.46 = phi i32 [ %424, %423 ], [ %417, %421 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.46, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 318, 3} true;
  assume {:verifier.code 0} true;
  /* br label %426, !dbg !538, !verifier.code !62 */
  $i349 := $i352;
  goto $bb210;
$bb217:
  assume ($i363 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 11} true;
  assume {:verifier.code 0} true;
  /* %438 = icmp slt i32 %434, 0, !dbg !549, !verifier.code !62 */
  $i365 := $slt.i32($i361, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %438, label %441, label %439, !dbg !552, !verifier.code !62 */
  assume {:branchcond $i365} true;
  goto $bb220, $bb222;
$bb218:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 325, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i363 == 1));
  goto $bb219;
$bb219:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.49 = phi i32 [ %.48, %443 ], [ %435, %426 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.49, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 330, 7} true;
  assume {:verifier.code 0} true;
  /* %445 = sext i32 %430 to i64, !dbg !559, !verifier.code !62 */
  $i369 := $sext.i32.i64($i357);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 330, 9} true;
  assume {:verifier.code 0} true;
  /* %446 = srem i64 %445, 2147483648, !dbg !560, !verifier.code !62 */
  $i370 := $srem.i64($i369, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 330, 7} true;
  assume {:verifier.code 0} true;
  /* %447 = trunc i64 %446 to i32, !dbg !559, !verifier.code !62 */
  $i371 := $trunc.i64.i32($i370);
  /* call void @llvm.dbg.value(metadata i32 %447, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 331, 5} true;
  assume {:verifier.code 0} true;
  /* %448 = add nsw i32 %447, %447, !dbg !561, !verifier.code !62 */
  $i372 := $add.i32($i371, $i371);
  /* call void @llvm.dbg.value(metadata i32 %448, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i372);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 332, 7} true;
  assume {:verifier.code 0} true;
  /* %449 = sext i32 %434 to i64, !dbg !562, !verifier.code !62 */
  $i373 := $sext.i32.i64($i361);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 332, 9} true;
  assume {:verifier.code 0} true;
  /* %450 = srem i64 %449, 2147483648, !dbg !563, !verifier.code !62 */
  $i374 := $srem.i64($i373, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 332, 7} true;
  assume {:verifier.code 0} true;
  /* %451 = trunc i64 %450 to i32, !dbg !562, !verifier.code !62 */
  $i375 := $trunc.i64.i32($i374);
  /* call void @llvm.dbg.value(metadata i32 %451, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i375);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 333, 5} true;
  assume {:verifier.code 0} true;
  /* %452 = add nsw i32 %451, %451, !dbg !564, !verifier.code !62 */
  $i376 := $add.i32($i375, $i375);
  /* call void @llvm.dbg.value(metadata i32 %452, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i376);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 335, 5} true;
  assume {:verifier.code 0} true;
  /* %453 = add nsw i32 %.49, %.49, !dbg !565, !verifier.code !62 */
  $i377 := $add.i32($i364, $i364);
  /* call void @llvm.dbg.value(metadata i32 %453, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i377);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 336, 9} true;
  assume {:verifier.code 0} true;
  /* %454 = icmp slt i32 %448, 0, !dbg !566, !verifier.code !62 */
  $i378 := $slt.i32($i372, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 336, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %454, label %455, label %462, !dbg !568, !verifier.code !62 */
  $i379 := $i377;
  assume {:branchcond $i378} true;
  goto $bb226, $bb227;
$bb220:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 15} true;
  assume {:verifier.code 0} true;
  assume ($i365 == 1);
  goto $bb221;
$bb221:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 327, 9} true;
  assume {:verifier.code 0} true;
  /* %442 = add nsw i32 %435, 1, !dbg !555, !verifier.code !62 */
  $i368 := $add.i32($i362, 1);
  /* call void @llvm.dbg.value(metadata i32 %442, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i368);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 328, 5} true;
  assume {:verifier.code 0} true;
  /* br label %443, !dbg !557, !verifier.code !62 */
  $i367 := $i368;
  goto $bb225;
$bb222:
  assume !(($i365 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 20} true;
  assume {:verifier.code 0} true;
  /* %440 = icmp sgt i32 %434, 2147483647, !dbg !553, !verifier.code !62 */
  $i366 := $sgt.i32($i361, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %440, label %441, label %443, !dbg !554, !verifier.code !62 */
  $i367 := $i362;
  assume {:branchcond $i366} true;
  goto $bb223, $bb224;
$bb223:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 9} true;
  assume {:verifier.code 0} true;
  assume ($i366 == 1);
  goto $bb221;
$bb224:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i366 == 1));
  goto $bb225;
$bb225:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.48 = phi i32 [ %442, %441 ], [ %435, %439 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.48, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 329, 3} true;
  assume {:verifier.code 0} true;
  /* br label %444, !dbg !558, !verifier.code !62 */
  $i364 := $i367;
  goto $bb219;
$bb226:
  assume ($i378 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 11} true;
  assume {:verifier.code 0} true;
  /* %456 = icmp slt i32 %452, 0, !dbg !569, !verifier.code !62 */
  $i380 := $slt.i32($i376, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %456, label %459, label %457, !dbg !572, !verifier.code !62 */
  assume {:branchcond $i380} true;
  goto $bb229, $bb231;
$bb227:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 336, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i378 == 1));
  goto $bb228;
$bb228:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.51 = phi i32 [ %.50, %461 ], [ %453, %444 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.51, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 341, 7} true;
  assume {:verifier.code 0} true;
  /* %463 = sext i32 %448 to i64, !dbg !579, !verifier.code !62 */
  $i384 := $sext.i32.i64($i372);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 341, 9} true;
  assume {:verifier.code 0} true;
  /* %464 = srem i64 %463, 2147483648, !dbg !580, !verifier.code !62 */
  $i385 := $srem.i64($i384, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 341, 7} true;
  assume {:verifier.code 0} true;
  /* %465 = trunc i64 %464 to i32, !dbg !579, !verifier.code !62 */
  $i386 := $trunc.i64.i32($i385);
  /* call void @llvm.dbg.value(metadata i32 %465, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i386);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 342, 5} true;
  assume {:verifier.code 0} true;
  /* %466 = add nsw i32 %465, %465, !dbg !581, !verifier.code !62 */
  $i387 := $add.i32($i386, $i386);
  /* call void @llvm.dbg.value(metadata i32 %466, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i387);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 343, 7} true;
  assume {:verifier.code 0} true;
  /* %467 = sext i32 %452 to i64, !dbg !582, !verifier.code !62 */
  $i388 := $sext.i32.i64($i376);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 343, 9} true;
  assume {:verifier.code 0} true;
  /* %468 = srem i64 %467, 2147483648, !dbg !583, !verifier.code !62 */
  $i389 := $srem.i64($i388, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 343, 7} true;
  assume {:verifier.code 0} true;
  /* %469 = trunc i64 %468 to i32, !dbg !582, !verifier.code !62 */
  $i390 := $trunc.i64.i32($i389);
  /* call void @llvm.dbg.value(metadata i32 %469, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i390);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 344, 5} true;
  assume {:verifier.code 0} true;
  /* %470 = add nsw i32 %469, %469, !dbg !584, !verifier.code !62 */
  $i391 := $add.i32($i390, $i390);
  /* call void @llvm.dbg.value(metadata i32 %470, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i391);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 346, 5} true;
  assume {:verifier.code 0} true;
  /* %471 = add nsw i32 %.51, %.51, !dbg !585, !verifier.code !62 */
  $i392 := $add.i32($i379, $i379);
  /* call void @llvm.dbg.value(metadata i32 %471, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i392);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 347, 9} true;
  assume {:verifier.code 0} true;
  /* %472 = icmp slt i32 %466, 0, !dbg !586, !verifier.code !62 */
  $i393 := $slt.i32($i387, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 347, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %472, label %473, label %480, !dbg !588, !verifier.code !62 */
  $i394 := $i392;
  assume {:branchcond $i393} true;
  goto $bb235, $bb236;
$bb229:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 15} true;
  assume {:verifier.code 0} true;
  assume ($i380 == 1);
  goto $bb230;
$bb230:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 338, 9} true;
  assume {:verifier.code 0} true;
  /* %460 = add nsw i32 %453, 1, !dbg !575, !verifier.code !62 */
  $i383 := $add.i32($i377, 1);
  /* call void @llvm.dbg.value(metadata i32 %460, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i383);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 339, 5} true;
  assume {:verifier.code 0} true;
  /* br label %461, !dbg !577, !verifier.code !62 */
  $i382 := $i383;
  goto $bb234;
$bb231:
  assume !(($i380 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 20} true;
  assume {:verifier.code 0} true;
  /* %458 = icmp sgt i32 %452, 2147483647, !dbg !573, !verifier.code !62 */
  $i381 := $sgt.i32($i376, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %458, label %459, label %461, !dbg !574, !verifier.code !62 */
  $i382 := $i377;
  assume {:branchcond $i381} true;
  goto $bb232, $bb233;
$bb232:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 9} true;
  assume {:verifier.code 0} true;
  assume ($i381 == 1);
  goto $bb230;
$bb233:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i381 == 1));
  goto $bb234;
$bb234:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.50 = phi i32 [ %460, %459 ], [ %453, %457 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.50, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 340, 3} true;
  assume {:verifier.code 0} true;
  /* br label %462, !dbg !578, !verifier.code !62 */
  $i379 := $i382;
  goto $bb228;
$bb235:
  assume ($i393 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 11} true;
  assume {:verifier.code 0} true;
  /* %474 = icmp slt i32 %470, 0, !dbg !589, !verifier.code !62 */
  $i395 := $slt.i32($i391, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %474, label %477, label %475, !dbg !592, !verifier.code !62 */
  assume {:branchcond $i395} true;
  goto $bb238, $bb240;
$bb236:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 347, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i393 == 1));
  goto $bb237;
$bb237:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.53 = phi i32 [ %.52, %479 ], [ %471, %462 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.53, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 352, 7} true;
  assume {:verifier.code 0} true;
  /* %481 = sext i32 %466 to i64, !dbg !599, !verifier.code !62 */
  $i399 := $sext.i32.i64($i387);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 352, 9} true;
  assume {:verifier.code 0} true;
  /* %482 = srem i64 %481, 2147483648, !dbg !600, !verifier.code !62 */
  $i400 := $srem.i64($i399, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 352, 7} true;
  assume {:verifier.code 0} true;
  /* %483 = trunc i64 %482 to i32, !dbg !599, !verifier.code !62 */
  $i401 := $trunc.i64.i32($i400);
  /* call void @llvm.dbg.value(metadata i32 %483, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i401);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 353, 5} true;
  assume {:verifier.code 0} true;
  /* %484 = add nsw i32 %483, %483, !dbg !601, !verifier.code !62 */
  $i402 := $add.i32($i401, $i401);
  /* call void @llvm.dbg.value(metadata i32 %484, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i402);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 354, 7} true;
  assume {:verifier.code 0} true;
  /* %485 = sext i32 %470 to i64, !dbg !602, !verifier.code !62 */
  $i403 := $sext.i32.i64($i391);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 354, 9} true;
  assume {:verifier.code 0} true;
  /* %486 = srem i64 %485, 2147483648, !dbg !603, !verifier.code !62 */
  $i404 := $srem.i64($i403, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 354, 7} true;
  assume {:verifier.code 0} true;
  /* %487 = trunc i64 %486 to i32, !dbg !602, !verifier.code !62 */
  $i405 := $trunc.i64.i32($i404);
  /* call void @llvm.dbg.value(metadata i32 %487, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i405);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 355, 5} true;
  assume {:verifier.code 0} true;
  /* %488 = add nsw i32 %487, %487, !dbg !604, !verifier.code !62 */
  $i406 := $add.i32($i405, $i405);
  /* call void @llvm.dbg.value(metadata i32 %488, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i406);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 357, 5} true;
  assume {:verifier.code 0} true;
  /* %489 = add nsw i32 %.53, %.53, !dbg !605, !verifier.code !62 */
  $i407 := $add.i32($i394, $i394);
  /* call void @llvm.dbg.value(metadata i32 %489, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 358, 9} true;
  assume {:verifier.code 0} true;
  /* %490 = icmp slt i32 %484, 0, !dbg !606, !verifier.code !62 */
  $i408 := $slt.i32($i402, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 358, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %490, label %491, label %498, !dbg !608, !verifier.code !62 */
  $i409 := $i407;
  assume {:branchcond $i408} true;
  goto $bb244, $bb245;
$bb238:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 15} true;
  assume {:verifier.code 0} true;
  assume ($i395 == 1);
  goto $bb239;
$bb239:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 349, 9} true;
  assume {:verifier.code 0} true;
  /* %478 = add nsw i32 %471, 1, !dbg !595, !verifier.code !62 */
  $i398 := $add.i32($i392, 1);
  /* call void @llvm.dbg.value(metadata i32 %478, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i398);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 350, 5} true;
  assume {:verifier.code 0} true;
  /* br label %479, !dbg !597, !verifier.code !62 */
  $i397 := $i398;
  goto $bb243;
$bb240:
  assume !(($i395 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 20} true;
  assume {:verifier.code 0} true;
  /* %476 = icmp sgt i32 %470, 2147483647, !dbg !593, !verifier.code !62 */
  $i396 := $sgt.i32($i391, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %476, label %477, label %479, !dbg !594, !verifier.code !62 */
  $i397 := $i392;
  assume {:branchcond $i396} true;
  goto $bb241, $bb242;
$bb241:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 9} true;
  assume {:verifier.code 0} true;
  assume ($i396 == 1);
  goto $bb239;
$bb242:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i396 == 1));
  goto $bb243;
$bb243:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.52 = phi i32 [ %478, %477 ], [ %471, %475 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.52, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 351, 3} true;
  assume {:verifier.code 0} true;
  /* br label %480, !dbg !598, !verifier.code !62 */
  $i394 := $i397;
  goto $bb237;
$bb244:
  assume ($i408 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 11} true;
  assume {:verifier.code 0} true;
  /* %492 = icmp slt i32 %488, 0, !dbg !609, !verifier.code !62 */
  $i410 := $slt.i32($i406, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %492, label %495, label %493, !dbg !612, !verifier.code !62 */
  assume {:branchcond $i410} true;
  goto $bb247, $bb249;
$bb245:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 358, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i408 == 1));
  goto $bb246;
$bb246:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.55 = phi i32 [ %.54, %497 ], [ %489, %480 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.55, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 363, 7} true;
  assume {:verifier.code 0} true;
  /* %499 = sext i32 %484 to i64, !dbg !619, !verifier.code !62 */
  $i414 := $sext.i32.i64($i402);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 363, 9} true;
  assume {:verifier.code 0} true;
  /* %500 = srem i64 %499, 2147483648, !dbg !620, !verifier.code !62 */
  $i415 := $srem.i64($i414, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 363, 7} true;
  assume {:verifier.code 0} true;
  /* %501 = trunc i64 %500 to i32, !dbg !619, !verifier.code !62 */
  $i416 := $trunc.i64.i32($i415);
  /* call void @llvm.dbg.value(metadata i32 %501, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i416);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 364, 5} true;
  assume {:verifier.code 0} true;
  /* %502 = add nsw i32 %501, %501, !dbg !621, !verifier.code !62 */
  $i417 := $add.i32($i416, $i416);
  /* call void @llvm.dbg.value(metadata i32 %502, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i417);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 365, 7} true;
  assume {:verifier.code 0} true;
  /* %503 = sext i32 %488 to i64, !dbg !622, !verifier.code !62 */
  $i418 := $sext.i32.i64($i406);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 365, 9} true;
  assume {:verifier.code 0} true;
  /* %504 = srem i64 %503, 2147483648, !dbg !623, !verifier.code !62 */
  $i419 := $srem.i64($i418, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 365, 7} true;
  assume {:verifier.code 0} true;
  /* %505 = trunc i64 %504 to i32, !dbg !622, !verifier.code !62 */
  $i420 := $trunc.i64.i32($i419);
  /* call void @llvm.dbg.value(metadata i32 %505, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i420);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 366, 5} true;
  assume {:verifier.code 0} true;
  /* %506 = add nsw i32 %505, %505, !dbg !624, !verifier.code !62 */
  $i421 := $add.i32($i420, $i420);
  /* call void @llvm.dbg.value(metadata i32 %506, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i421);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 368, 5} true;
  assume {:verifier.code 0} true;
  /* %507 = add nsw i32 %.55, %.55, !dbg !625, !verifier.code !62 */
  $i422 := $add.i32($i409, $i409);
  /* call void @llvm.dbg.value(metadata i32 %507, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i422);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 369, 9} true;
  assume {:verifier.code 0} true;
  /* %508 = icmp slt i32 %502, 0, !dbg !626, !verifier.code !62 */
  $i423 := $slt.i32($i417, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 369, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %508, label %509, label %516, !dbg !628, !verifier.code !62 */
  $i424 := $i422;
  assume {:branchcond $i423} true;
  goto $bb253, $bb254;
$bb247:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 15} true;
  assume {:verifier.code 0} true;
  assume ($i410 == 1);
  goto $bb248;
$bb248:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 360, 9} true;
  assume {:verifier.code 0} true;
  /* %496 = add nsw i32 %489, 1, !dbg !615, !verifier.code !62 */
  $i413 := $add.i32($i407, 1);
  /* call void @llvm.dbg.value(metadata i32 %496, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i413);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 361, 5} true;
  assume {:verifier.code 0} true;
  /* br label %497, !dbg !617, !verifier.code !62 */
  $i412 := $i413;
  goto $bb252;
$bb249:
  assume !(($i410 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 20} true;
  assume {:verifier.code 0} true;
  /* %494 = icmp sgt i32 %488, 2147483647, !dbg !613, !verifier.code !62 */
  $i411 := $sgt.i32($i406, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %494, label %495, label %497, !dbg !614, !verifier.code !62 */
  $i412 := $i407;
  assume {:branchcond $i411} true;
  goto $bb250, $bb251;
$bb250:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 9} true;
  assume {:verifier.code 0} true;
  assume ($i411 == 1);
  goto $bb248;
$bb251:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i411 == 1));
  goto $bb252;
$bb252:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.54 = phi i32 [ %496, %495 ], [ %489, %493 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.54, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 362, 3} true;
  assume {:verifier.code 0} true;
  /* br label %498, !dbg !618, !verifier.code !62 */
  $i409 := $i412;
  goto $bb246;
$bb253:
  assume ($i423 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 11} true;
  assume {:verifier.code 0} true;
  /* %510 = icmp slt i32 %506, 0, !dbg !629, !verifier.code !62 */
  $i425 := $slt.i32($i421, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %510, label %513, label %511, !dbg !632, !verifier.code !62 */
  assume {:branchcond $i425} true;
  goto $bb256, $bb258;
$bb254:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 369, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i423 == 1));
  goto $bb255;
$bb255:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.57 = phi i32 [ %.56, %515 ], [ %507, %498 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.57, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 374, 7} true;
  assume {:verifier.code 0} true;
  /* %517 = sext i32 %502 to i64, !dbg !639, !verifier.code !62 */
  $i429 := $sext.i32.i64($i417);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 374, 9} true;
  assume {:verifier.code 0} true;
  /* %518 = srem i64 %517, 2147483648, !dbg !640, !verifier.code !62 */
  $i430 := $srem.i64($i429, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 374, 7} true;
  assume {:verifier.code 0} true;
  /* %519 = trunc i64 %518 to i32, !dbg !639, !verifier.code !62 */
  $i431 := $trunc.i64.i32($i430);
  /* call void @llvm.dbg.value(metadata i32 %519, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i431);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 375, 5} true;
  assume {:verifier.code 0} true;
  /* %520 = add nsw i32 %519, %519, !dbg !641, !verifier.code !62 */
  $i432 := $add.i32($i431, $i431);
  /* call void @llvm.dbg.value(metadata i32 %520, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 376, 7} true;
  assume {:verifier.code 0} true;
  /* %521 = sext i32 %506 to i64, !dbg !642, !verifier.code !62 */
  $i433 := $sext.i32.i64($i421);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 376, 9} true;
  assume {:verifier.code 0} true;
  /* %522 = srem i64 %521, 2147483648, !dbg !643, !verifier.code !62 */
  $i434 := $srem.i64($i433, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 376, 7} true;
  assume {:verifier.code 0} true;
  /* %523 = trunc i64 %522 to i32, !dbg !642, !verifier.code !62 */
  $i435 := $trunc.i64.i32($i434);
  /* call void @llvm.dbg.value(metadata i32 %523, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i435);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 377, 5} true;
  assume {:verifier.code 0} true;
  /* %524 = add nsw i32 %523, %523, !dbg !644, !verifier.code !62 */
  $i436 := $add.i32($i435, $i435);
  /* call void @llvm.dbg.value(metadata i32 %524, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 379, 5} true;
  assume {:verifier.code 0} true;
  /* %525 = add nsw i32 %.57, %.57, !dbg !645, !verifier.code !62 */
  $i437 := $add.i32($i424, $i424);
  /* call void @llvm.dbg.value(metadata i32 %525, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i437);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 380, 9} true;
  assume {:verifier.code 0} true;
  /* %526 = icmp slt i32 %520, 0, !dbg !646, !verifier.code !62 */
  $i438 := $slt.i32($i432, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 380, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %526, label %527, label %534, !dbg !648, !verifier.code !62 */
  $i439 := $i437;
  assume {:branchcond $i438} true;
  goto $bb262, $bb263;
$bb256:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 15} true;
  assume {:verifier.code 0} true;
  assume ($i425 == 1);
  goto $bb257;
$bb257:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 371, 9} true;
  assume {:verifier.code 0} true;
  /* %514 = add nsw i32 %507, 1, !dbg !635, !verifier.code !62 */
  $i428 := $add.i32($i422, 1);
  /* call void @llvm.dbg.value(metadata i32 %514, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i428);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 372, 5} true;
  assume {:verifier.code 0} true;
  /* br label %515, !dbg !637, !verifier.code !62 */
  $i427 := $i428;
  goto $bb261;
$bb258:
  assume !(($i425 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 20} true;
  assume {:verifier.code 0} true;
  /* %512 = icmp sgt i32 %506, 2147483647, !dbg !633, !verifier.code !62 */
  $i426 := $sgt.i32($i421, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %512, label %513, label %515, !dbg !634, !verifier.code !62 */
  $i427 := $i422;
  assume {:branchcond $i426} true;
  goto $bb259, $bb260;
$bb259:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 9} true;
  assume {:verifier.code 0} true;
  assume ($i426 == 1);
  goto $bb257;
$bb260:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i426 == 1));
  goto $bb261;
$bb261:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.56 = phi i32 [ %514, %513 ], [ %507, %511 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.56, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 373, 3} true;
  assume {:verifier.code 0} true;
  /* br label %516, !dbg !638, !verifier.code !62 */
  $i424 := $i427;
  goto $bb255;
$bb262:
  assume ($i438 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 11} true;
  assume {:verifier.code 0} true;
  /* %528 = icmp slt i32 %524, 0, !dbg !649, !verifier.code !62 */
  $i440 := $slt.i32($i436, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %528, label %531, label %529, !dbg !652, !verifier.code !62 */
  assume {:branchcond $i440} true;
  goto $bb265, $bb267;
$bb263:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 380, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i438 == 1));
  goto $bb264;
$bb264:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.59 = phi i32 [ %.58, %533 ], [ %525, %516 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.59, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 385, 7} true;
  assume {:verifier.code 0} true;
  /* %535 = sext i32 %520 to i64, !dbg !659, !verifier.code !62 */
  $i444 := $sext.i32.i64($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 385, 9} true;
  assume {:verifier.code 0} true;
  /* %536 = srem i64 %535, 2147483648, !dbg !660, !verifier.code !62 */
  $i445 := $srem.i64($i444, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 385, 7} true;
  assume {:verifier.code 0} true;
  /* %537 = trunc i64 %536 to i32, !dbg !659, !verifier.code !62 */
  $i446 := $trunc.i64.i32($i445);
  /* call void @llvm.dbg.value(metadata i32 %537, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i446);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 386, 5} true;
  assume {:verifier.code 0} true;
  /* %538 = add nsw i32 %537, %537, !dbg !661, !verifier.code !62 */
  $i447 := $add.i32($i446, $i446);
  /* call void @llvm.dbg.value(metadata i32 %538, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i447);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 387, 7} true;
  assume {:verifier.code 0} true;
  /* %539 = sext i32 %524 to i64, !dbg !662, !verifier.code !62 */
  $i448 := $sext.i32.i64($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 387, 9} true;
  assume {:verifier.code 0} true;
  /* %540 = srem i64 %539, 2147483648, !dbg !663, !verifier.code !62 */
  $i449 := $srem.i64($i448, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 387, 7} true;
  assume {:verifier.code 0} true;
  /* %541 = trunc i64 %540 to i32, !dbg !662, !verifier.code !62 */
  $i450 := $trunc.i64.i32($i449);
  /* call void @llvm.dbg.value(metadata i32 %541, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i450);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 388, 5} true;
  assume {:verifier.code 0} true;
  /* %542 = add nsw i32 %541, %541, !dbg !664, !verifier.code !62 */
  $i451 := $add.i32($i450, $i450);
  /* call void @llvm.dbg.value(metadata i32 %542, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i451);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 390, 5} true;
  assume {:verifier.code 0} true;
  /* %543 = add nsw i32 %.59, %.59, !dbg !665, !verifier.code !62 */
  $i452 := $add.i32($i439, $i439);
  /* call void @llvm.dbg.value(metadata i32 %543, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i452);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 391, 9} true;
  assume {:verifier.code 0} true;
  /* %544 = icmp slt i32 %538, 0, !dbg !666, !verifier.code !62 */
  $i453 := $slt.i32($i447, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 391, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %544, label %545, label %552, !dbg !668, !verifier.code !62 */
  $i454 := $i452;
  assume {:branchcond $i453} true;
  goto $bb271, $bb272;
$bb265:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 15} true;
  assume {:verifier.code 0} true;
  assume ($i440 == 1);
  goto $bb266;
$bb266:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 382, 9} true;
  assume {:verifier.code 0} true;
  /* %532 = add nsw i32 %525, 1, !dbg !655, !verifier.code !62 */
  $i443 := $add.i32($i437, 1);
  /* call void @llvm.dbg.value(metadata i32 %532, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i443);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 383, 5} true;
  assume {:verifier.code 0} true;
  /* br label %533, !dbg !657, !verifier.code !62 */
  $i442 := $i443;
  goto $bb270;
$bb267:
  assume !(($i440 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 20} true;
  assume {:verifier.code 0} true;
  /* %530 = icmp sgt i32 %524, 2147483647, !dbg !653, !verifier.code !62 */
  $i441 := $sgt.i32($i436, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %530, label %531, label %533, !dbg !654, !verifier.code !62 */
  $i442 := $i437;
  assume {:branchcond $i441} true;
  goto $bb268, $bb269;
$bb268:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 9} true;
  assume {:verifier.code 0} true;
  assume ($i441 == 1);
  goto $bb266;
$bb269:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i441 == 1));
  goto $bb270;
$bb270:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.58 = phi i32 [ %532, %531 ], [ %525, %529 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.58, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 384, 3} true;
  assume {:verifier.code 0} true;
  /* br label %534, !dbg !658, !verifier.code !62 */
  $i439 := $i442;
  goto $bb264;
$bb271:
  assume ($i453 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 11} true;
  assume {:verifier.code 0} true;
  /* %546 = icmp slt i32 %542, 0, !dbg !669, !verifier.code !62 */
  $i455 := $slt.i32($i451, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %546, label %549, label %547, !dbg !672, !verifier.code !62 */
  assume {:branchcond $i455} true;
  goto $bb274, $bb276;
$bb272:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 391, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i453 == 1));
  goto $bb273;
$bb273:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.61 = phi i32 [ %.60, %551 ], [ %543, %534 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.61, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 396, 7} true;
  assume {:verifier.code 0} true;
  /* %553 = sext i32 %538 to i64, !dbg !679, !verifier.code !62 */
  $i459 := $sext.i32.i64($i447);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 396, 9} true;
  assume {:verifier.code 0} true;
  /* %554 = srem i64 %553, 2147483648, !dbg !680, !verifier.code !62 */
  $i460 := $srem.i64($i459, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 396, 7} true;
  assume {:verifier.code 0} true;
  /* %555 = trunc i64 %554 to i32, !dbg !679, !verifier.code !62 */
  $i461 := $trunc.i64.i32($i460);
  /* call void @llvm.dbg.value(metadata i32 %555, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i461);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 397, 5} true;
  assume {:verifier.code 0} true;
  /* %556 = add nsw i32 %555, %555, !dbg !681, !verifier.code !62 */
  $i462 := $add.i32($i461, $i461);
  /* call void @llvm.dbg.value(metadata i32 %556, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i462);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 398, 7} true;
  assume {:verifier.code 0} true;
  /* %557 = sext i32 %542 to i64, !dbg !682, !verifier.code !62 */
  $i463 := $sext.i32.i64($i451);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 398, 9} true;
  assume {:verifier.code 0} true;
  /* %558 = srem i64 %557, 2147483648, !dbg !683, !verifier.code !62 */
  $i464 := $srem.i64($i463, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 398, 7} true;
  assume {:verifier.code 0} true;
  /* %559 = trunc i64 %558 to i32, !dbg !682, !verifier.code !62 */
  $i465 := $trunc.i64.i32($i464);
  /* call void @llvm.dbg.value(metadata i32 %559, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i465);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 399, 5} true;
  assume {:verifier.code 0} true;
  /* %560 = add nsw i32 %559, %559, !dbg !684, !verifier.code !62 */
  $i466 := $add.i32($i465, $i465);
  /* call void @llvm.dbg.value(metadata i32 %560, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i466);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 401, 5} true;
  assume {:verifier.code 0} true;
  /* %561 = add nsw i32 %.61, %.61, !dbg !685, !verifier.code !62 */
  $i467 := $add.i32($i454, $i454);
  /* call void @llvm.dbg.value(metadata i32 %561, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i467);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 402, 9} true;
  assume {:verifier.code 0} true;
  /* %562 = icmp slt i32 %556, 0, !dbg !686, !verifier.code !62 */
  $i468 := $slt.i32($i462, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 402, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %562, label %563, label %570, !dbg !688, !verifier.code !62 */
  $i469 := $i467;
  assume {:branchcond $i468} true;
  goto $bb280, $bb281;
$bb274:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 15} true;
  assume {:verifier.code 0} true;
  assume ($i455 == 1);
  goto $bb275;
$bb275:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 393, 9} true;
  assume {:verifier.code 0} true;
  /* %550 = add nsw i32 %543, 1, !dbg !675, !verifier.code !62 */
  $i458 := $add.i32($i452, 1);
  /* call void @llvm.dbg.value(metadata i32 %550, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i458);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 394, 5} true;
  assume {:verifier.code 0} true;
  /* br label %551, !dbg !677, !verifier.code !62 */
  $i457 := $i458;
  goto $bb279;
$bb276:
  assume !(($i455 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 20} true;
  assume {:verifier.code 0} true;
  /* %548 = icmp sgt i32 %542, 2147483647, !dbg !673, !verifier.code !62 */
  $i456 := $sgt.i32($i451, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %548, label %549, label %551, !dbg !674, !verifier.code !62 */
  $i457 := $i452;
  assume {:branchcond $i456} true;
  goto $bb277, $bb278;
$bb277:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 9} true;
  assume {:verifier.code 0} true;
  assume ($i456 == 1);
  goto $bb275;
$bb278:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i456 == 1));
  goto $bb279;
$bb279:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.60 = phi i32 [ %550, %549 ], [ %543, %547 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.60, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 395, 3} true;
  assume {:verifier.code 0} true;
  /* br label %552, !dbg !678, !verifier.code !62 */
  $i454 := $i457;
  goto $bb273;
$bb280:
  assume ($i468 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 11} true;
  assume {:verifier.code 0} true;
  /* %564 = icmp slt i32 %560, 0, !dbg !689, !verifier.code !62 */
  $i470 := $slt.i32($i466, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %564, label %567, label %565, !dbg !692, !verifier.code !62 */
  assume {:branchcond $i470} true;
  goto $bb283, $bb285;
$bb281:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 402, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i468 == 1));
  goto $bb282;
$bb282:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.63 = phi i32 [ %.62, %569 ], [ %561, %552 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.63, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 407, 7} true;
  assume {:verifier.code 0} true;
  /* %571 = sext i32 %556 to i64, !dbg !699, !verifier.code !62 */
  $i474 := $sext.i32.i64($i462);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 407, 9} true;
  assume {:verifier.code 0} true;
  /* %572 = srem i64 %571, 2147483648, !dbg !700, !verifier.code !62 */
  $i475 := $srem.i64($i474, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 407, 7} true;
  assume {:verifier.code 0} true;
  /* %573 = trunc i64 %572 to i32, !dbg !699, !verifier.code !62 */
  $i476 := $trunc.i64.i32($i475);
  /* call void @llvm.dbg.value(metadata i32 %573, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i476);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 408, 5} true;
  assume {:verifier.code 0} true;
  /* %574 = add nsw i32 %573, %573, !dbg !701, !verifier.code !62 */
  $i477 := $add.i32($i476, $i476);
  /* call void @llvm.dbg.value(metadata i32 %574, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i477);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 409, 7} true;
  assume {:verifier.code 0} true;
  /* %575 = sext i32 %560 to i64, !dbg !702, !verifier.code !62 */
  $i478 := $sext.i32.i64($i466);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 409, 9} true;
  assume {:verifier.code 0} true;
  /* %576 = srem i64 %575, 2147483648, !dbg !703, !verifier.code !62 */
  $i479 := $srem.i64($i478, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 409, 7} true;
  assume {:verifier.code 0} true;
  /* %577 = trunc i64 %576 to i32, !dbg !702, !verifier.code !62 */
  $i480 := $trunc.i64.i32($i479);
  /* call void @llvm.dbg.value(metadata i32 %577, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i480);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 410, 5} true;
  assume {:verifier.code 0} true;
  /* %578 = add nsw i32 %577, %577, !dbg !704, !verifier.code !62 */
  $i481 := $add.i32($i480, $i480);
  /* call void @llvm.dbg.value(metadata i32 %578, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i481);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 412, 5} true;
  assume {:verifier.code 0} true;
  /* %579 = add nsw i32 %.63, %.63, !dbg !705, !verifier.code !62 */
  $i482 := $add.i32($i469, $i469);
  /* call void @llvm.dbg.value(metadata i32 %579, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i482);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 413, 9} true;
  assume {:verifier.code 0} true;
  /* %580 = icmp slt i32 %574, 0, !dbg !706, !verifier.code !62 */
  $i483 := $slt.i32($i477, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 413, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %580, label %581, label %588, !dbg !708, !verifier.code !62 */
  $i484 := $i482;
  assume {:branchcond $i483} true;
  goto $bb289, $bb290;
$bb283:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 15} true;
  assume {:verifier.code 0} true;
  assume ($i470 == 1);
  goto $bb284;
$bb284:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 404, 9} true;
  assume {:verifier.code 0} true;
  /* %568 = add nsw i32 %561, 1, !dbg !695, !verifier.code !62 */
  $i473 := $add.i32($i467, 1);
  /* call void @llvm.dbg.value(metadata i32 %568, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i473);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 405, 5} true;
  assume {:verifier.code 0} true;
  /* br label %569, !dbg !697, !verifier.code !62 */
  $i472 := $i473;
  goto $bb288;
$bb285:
  assume !(($i470 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 20} true;
  assume {:verifier.code 0} true;
  /* %566 = icmp sgt i32 %560, 2147483647, !dbg !693, !verifier.code !62 */
  $i471 := $sgt.i32($i466, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %566, label %567, label %569, !dbg !694, !verifier.code !62 */
  $i472 := $i467;
  assume {:branchcond $i471} true;
  goto $bb286, $bb287;
$bb286:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 9} true;
  assume {:verifier.code 0} true;
  assume ($i471 == 1);
  goto $bb284;
$bb287:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i471 == 1));
  goto $bb288;
$bb288:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.62 = phi i32 [ %568, %567 ], [ %561, %565 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.62, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 406, 3} true;
  assume {:verifier.code 0} true;
  /* br label %570, !dbg !698, !verifier.code !62 */
  $i469 := $i472;
  goto $bb282;
$bb289:
  assume ($i483 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 11} true;
  assume {:verifier.code 0} true;
  /* %582 = icmp slt i32 %578, 0, !dbg !709, !verifier.code !62 */
  $i485 := $slt.i32($i481, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %582, label %585, label %583, !dbg !712, !verifier.code !62 */
  assume {:branchcond $i485} true;
  goto $bb292, $bb294;
$bb290:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 413, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i483 == 1));
  goto $bb291;
$bb291:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.65 = phi i32 [ %.64, %587 ], [ %579, %570 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.65, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 418, 7} true;
  assume {:verifier.code 0} true;
  /* %589 = sext i32 %574 to i64, !dbg !719, !verifier.code !62 */
  $i489 := $sext.i32.i64($i477);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 418, 9} true;
  assume {:verifier.code 0} true;
  /* %590 = srem i64 %589, 2147483648, !dbg !720, !verifier.code !62 */
  $i490 := $srem.i64($i489, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 418, 7} true;
  assume {:verifier.code 0} true;
  /* %591 = trunc i64 %590 to i32, !dbg !719, !verifier.code !62 */
  $i491 := $trunc.i64.i32($i490);
  /* call void @llvm.dbg.value(metadata i32 %591, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i491);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 419, 5} true;
  assume {:verifier.code 0} true;
  /* %592 = add nsw i32 %591, %591, !dbg !721, !verifier.code !62 */
  $i492 := $add.i32($i491, $i491);
  /* call void @llvm.dbg.value(metadata i32 %592, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i492);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 420, 7} true;
  assume {:verifier.code 0} true;
  /* %593 = sext i32 %578 to i64, !dbg !722, !verifier.code !62 */
  $i493 := $sext.i32.i64($i481);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 420, 9} true;
  assume {:verifier.code 0} true;
  /* %594 = srem i64 %593, 2147483648, !dbg !723, !verifier.code !62 */
  $i494 := $srem.i64($i493, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 420, 7} true;
  assume {:verifier.code 0} true;
  /* %595 = trunc i64 %594 to i32, !dbg !722, !verifier.code !62 */
  $i495 := $trunc.i64.i32($i494);
  /* call void @llvm.dbg.value(metadata i32 %595, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i495);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 421, 5} true;
  assume {:verifier.code 0} true;
  /* %596 = add nsw i32 %595, %595, !dbg !724, !verifier.code !62 */
  $i496 := $add.i32($i495, $i495);
  /* call void @llvm.dbg.value(metadata i32 %596, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i496);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 423, 5} true;
  assume {:verifier.code 0} true;
  /* %597 = add nsw i32 %.65, %.65, !dbg !725, !verifier.code !62 */
  $i497 := $add.i32($i484, $i484);
  /* call void @llvm.dbg.value(metadata i32 %597, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i497);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 9} true;
  assume {:verifier.code 0} true;
  /* %598 = icmp slt i32 %592, 0, !dbg !726, !verifier.code !62 */
  $i498 := $slt.i32($i492, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %598, label %599, label %606, !dbg !728, !verifier.code !62 */
  $i499 := $i497;
  assume {:branchcond $i498} true;
  goto $bb298, $bb299;
$bb292:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 15} true;
  assume {:verifier.code 0} true;
  assume ($i485 == 1);
  goto $bb293;
$bb293:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 415, 9} true;
  assume {:verifier.code 0} true;
  /* %586 = add nsw i32 %579, 1, !dbg !715, !verifier.code !62 */
  $i488 := $add.i32($i482, 1);
  /* call void @llvm.dbg.value(metadata i32 %586, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i488);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 416, 5} true;
  assume {:verifier.code 0} true;
  /* br label %587, !dbg !717, !verifier.code !62 */
  $i487 := $i488;
  goto $bb297;
$bb294:
  assume !(($i485 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 20} true;
  assume {:verifier.code 0} true;
  /* %584 = icmp sgt i32 %578, 2147483647, !dbg !713, !verifier.code !62 */
  $i486 := $sgt.i32($i481, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %584, label %585, label %587, !dbg !714, !verifier.code !62 */
  $i487 := $i482;
  assume {:branchcond $i486} true;
  goto $bb295, $bb296;
$bb295:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 9} true;
  assume {:verifier.code 0} true;
  assume ($i486 == 1);
  goto $bb293;
$bb296:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i486 == 1));
  goto $bb297;
$bb297:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.64 = phi i32 [ %586, %585 ], [ %579, %583 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.64, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 417, 3} true;
  assume {:verifier.code 0} true;
  /* br label %588, !dbg !718, !verifier.code !62 */
  $i484 := $i487;
  goto $bb291;
$bb298:
  assume ($i498 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 11} true;
  assume {:verifier.code 0} true;
  /* %600 = icmp slt i32 %596, 0, !dbg !729, !verifier.code !62 */
  $i500 := $slt.i32($i496, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %600, label %603, label %601, !dbg !732, !verifier.code !62 */
  assume {:branchcond $i500} true;
  goto $bb301, $bb303;
$bb299:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i498 == 1));
  goto $bb300;
$bb300:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.67 = phi i32 [ %.66, %605 ], [ %597, %588 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.67, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 429, 7} true;
  assume {:verifier.code 0} true;
  /* %607 = sext i32 %592 to i64, !dbg !739, !verifier.code !62 */
  $i504 := $sext.i32.i64($i492);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 429, 9} true;
  assume {:verifier.code 0} true;
  /* %608 = srem i64 %607, 2147483648, !dbg !740, !verifier.code !62 */
  $i505 := $srem.i64($i504, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 429, 7} true;
  assume {:verifier.code 0} true;
  /* %609 = trunc i64 %608 to i32, !dbg !739, !verifier.code !62 */
  $i506 := $trunc.i64.i32($i505);
  /* call void @llvm.dbg.value(metadata i32 %609, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i506);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 430, 5} true;
  assume {:verifier.code 0} true;
  /* %610 = add nsw i32 %609, %609, !dbg !741, !verifier.code !62 */
  $i507 := $add.i32($i506, $i506);
  /* call void @llvm.dbg.value(metadata i32 %610, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i507);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 431, 7} true;
  assume {:verifier.code 0} true;
  /* %611 = sext i32 %596 to i64, !dbg !742, !verifier.code !62 */
  $i508 := $sext.i32.i64($i496);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 431, 9} true;
  assume {:verifier.code 0} true;
  /* %612 = srem i64 %611, 2147483648, !dbg !743, !verifier.code !62 */
  $i509 := $srem.i64($i508, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 431, 7} true;
  assume {:verifier.code 0} true;
  /* %613 = trunc i64 %612 to i32, !dbg !742, !verifier.code !62 */
  $i510 := $trunc.i64.i32($i509);
  /* call void @llvm.dbg.value(metadata i32 %613, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i510);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 432, 5} true;
  assume {:verifier.code 0} true;
  /* %614 = add nsw i32 %613, %613, !dbg !744, !verifier.code !62 */
  $i511 := $add.i32($i510, $i510);
  /* call void @llvm.dbg.value(metadata i32 %614, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i511);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 434, 5} true;
  assume {:verifier.code 0} true;
  /* %615 = add nsw i32 %.67, %.67, !dbg !745, !verifier.code !62 */
  $i512 := $add.i32($i499, $i499);
  /* call void @llvm.dbg.value(metadata i32 %615, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i512);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 435, 9} true;
  assume {:verifier.code 0} true;
  /* %616 = icmp slt i32 %610, 0, !dbg !746, !verifier.code !62 */
  $i513 := $slt.i32($i507, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 435, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %616, label %617, label %624, !dbg !748, !verifier.code !62 */
  $i514 := $i512;
  assume {:branchcond $i513} true;
  goto $bb307, $bb308;
$bb301:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 15} true;
  assume {:verifier.code 0} true;
  assume ($i500 == 1);
  goto $bb302;
$bb302:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 426, 9} true;
  assume {:verifier.code 0} true;
  /* %604 = add nsw i32 %597, 1, !dbg !735, !verifier.code !62 */
  $i503 := $add.i32($i497, 1);
  /* call void @llvm.dbg.value(metadata i32 %604, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i503);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 427, 5} true;
  assume {:verifier.code 0} true;
  /* br label %605, !dbg !737, !verifier.code !62 */
  $i502 := $i503;
  goto $bb306;
$bb303:
  assume !(($i500 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 20} true;
  assume {:verifier.code 0} true;
  /* %602 = icmp sgt i32 %596, 2147483647, !dbg !733, !verifier.code !62 */
  $i501 := $sgt.i32($i496, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %602, label %603, label %605, !dbg !734, !verifier.code !62 */
  $i502 := $i497;
  assume {:branchcond $i501} true;
  goto $bb304, $bb305;
$bb304:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 9} true;
  assume {:verifier.code 0} true;
  assume ($i501 == 1);
  goto $bb302;
$bb305:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i501 == 1));
  goto $bb306;
$bb306:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.66 = phi i32 [ %604, %603 ], [ %597, %601 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.66, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 428, 3} true;
  assume {:verifier.code 0} true;
  /* br label %606, !dbg !738, !verifier.code !62 */
  $i499 := $i502;
  goto $bb300;
$bb307:
  assume ($i513 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 11} true;
  assume {:verifier.code 0} true;
  /* %618 = icmp slt i32 %614, 0, !dbg !749, !verifier.code !62 */
  $i515 := $slt.i32($i511, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %618, label %621, label %619, !dbg !752, !verifier.code !62 */
  assume {:branchcond $i515} true;
  goto $bb310, $bb312;
$bb308:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 435, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i513 == 1));
  goto $bb309;
$bb309:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.69 = phi i32 [ %.68, %623 ], [ %615, %606 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.69, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 440, 7} true;
  assume {:verifier.code 0} true;
  /* %625 = sext i32 %610 to i64, !dbg !759, !verifier.code !62 */
  $i519 := $sext.i32.i64($i507);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 440, 9} true;
  assume {:verifier.code 0} true;
  /* %626 = srem i64 %625, 2147483648, !dbg !760, !verifier.code !62 */
  $i520 := $srem.i64($i519, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 440, 7} true;
  assume {:verifier.code 0} true;
  /* %627 = trunc i64 %626 to i32, !dbg !759, !verifier.code !62 */
  $i521 := $trunc.i64.i32($i520);
  /* call void @llvm.dbg.value(metadata i32 %627, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i521);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 441, 5} true;
  assume {:verifier.code 0} true;
  /* %628 = add nsw i32 %627, %627, !dbg !761, !verifier.code !62 */
  $i522 := $add.i32($i521, $i521);
  /* call void @llvm.dbg.value(metadata i32 %628, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i522);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 442, 7} true;
  assume {:verifier.code 0} true;
  /* %629 = sext i32 %614 to i64, !dbg !762, !verifier.code !62 */
  $i523 := $sext.i32.i64($i511);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 442, 9} true;
  assume {:verifier.code 0} true;
  /* %630 = srem i64 %629, 2147483648, !dbg !763, !verifier.code !62 */
  $i524 := $srem.i64($i523, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 442, 7} true;
  assume {:verifier.code 0} true;
  /* %631 = trunc i64 %630 to i32, !dbg !762, !verifier.code !62 */
  $i525 := $trunc.i64.i32($i524);
  /* call void @llvm.dbg.value(metadata i32 %631, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i525);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 443, 5} true;
  assume {:verifier.code 0} true;
  /* %632 = add nsw i32 %631, %631, !dbg !764, !verifier.code !62 */
  $i526 := $add.i32($i525, $i525);
  /* call void @llvm.dbg.value(metadata i32 %632, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i526);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 445, 5} true;
  assume {:verifier.code 0} true;
  /* %633 = add nsw i32 %.69, %.69, !dbg !765, !verifier.code !62 */
  $i527 := $add.i32($i514, $i514);
  /* call void @llvm.dbg.value(metadata i32 %633, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i527);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 9} true;
  assume {:verifier.code 0} true;
  /* %634 = icmp slt i32 %628, 0, !dbg !766, !verifier.code !62 */
  $i528 := $slt.i32($i522, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %634, label %635, label %642, !dbg !768, !verifier.code !62 */
  $i529 := $i527;
  assume {:branchcond $i528} true;
  goto $bb316, $bb317;
$bb310:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 15} true;
  assume {:verifier.code 0} true;
  assume ($i515 == 1);
  goto $bb311;
$bb311:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 437, 9} true;
  assume {:verifier.code 0} true;
  /* %622 = add nsw i32 %615, 1, !dbg !755, !verifier.code !62 */
  $i518 := $add.i32($i512, 1);
  /* call void @llvm.dbg.value(metadata i32 %622, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i518);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 438, 5} true;
  assume {:verifier.code 0} true;
  /* br label %623, !dbg !757, !verifier.code !62 */
  $i517 := $i518;
  goto $bb315;
$bb312:
  assume !(($i515 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 20} true;
  assume {:verifier.code 0} true;
  /* %620 = icmp sgt i32 %614, 2147483647, !dbg !753, !verifier.code !62 */
  $i516 := $sgt.i32($i511, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %620, label %621, label %623, !dbg !754, !verifier.code !62 */
  $i517 := $i512;
  assume {:branchcond $i516} true;
  goto $bb313, $bb314;
$bb313:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 9} true;
  assume {:verifier.code 0} true;
  assume ($i516 == 1);
  goto $bb311;
$bb314:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i516 == 1));
  goto $bb315;
$bb315:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.68 = phi i32 [ %622, %621 ], [ %615, %619 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.68, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 439, 3} true;
  assume {:verifier.code 0} true;
  /* br label %624, !dbg !758, !verifier.code !62 */
  $i514 := $i517;
  goto $bb309;
$bb316:
  assume ($i528 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 11} true;
  assume {:verifier.code 0} true;
  /* %636 = icmp slt i32 %632, 0, !dbg !769, !verifier.code !62 */
  $i530 := $slt.i32($i526, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %636, label %639, label %637, !dbg !772, !verifier.code !62 */
  assume {:branchcond $i530} true;
  goto $bb319, $bb321;
$bb317:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i528 == 1));
  goto $bb318;
$bb318:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.71 = phi i32 [ %.70, %641 ], [ %633, %624 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.71, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 451, 7} true;
  assume {:verifier.code 0} true;
  /* %643 = sext i32 %628 to i64, !dbg !779, !verifier.code !62 */
  $i534 := $sext.i32.i64($i522);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 451, 9} true;
  assume {:verifier.code 0} true;
  /* %644 = srem i64 %643, 2147483648, !dbg !780, !verifier.code !62 */
  $i535 := $srem.i64($i534, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 451, 7} true;
  assume {:verifier.code 0} true;
  /* %645 = trunc i64 %644 to i32, !dbg !779, !verifier.code !62 */
  $i536 := $trunc.i64.i32($i535);
  /* call void @llvm.dbg.value(metadata i32 %645, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i536);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 452, 5} true;
  assume {:verifier.code 0} true;
  /* %646 = add nsw i32 %645, %645, !dbg !781, !verifier.code !62 */
  $i537 := $add.i32($i536, $i536);
  /* call void @llvm.dbg.value(metadata i32 %646, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i537);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 453, 7} true;
  assume {:verifier.code 0} true;
  /* %647 = sext i32 %632 to i64, !dbg !782, !verifier.code !62 */
  $i538 := $sext.i32.i64($i526);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 453, 9} true;
  assume {:verifier.code 0} true;
  /* %648 = srem i64 %647, 2147483648, !dbg !783, !verifier.code !62 */
  $i539 := $srem.i64($i538, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 453, 7} true;
  assume {:verifier.code 0} true;
  /* %649 = trunc i64 %648 to i32, !dbg !782, !verifier.code !62 */
  $i540 := $trunc.i64.i32($i539);
  /* call void @llvm.dbg.value(metadata i32 %649, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i540);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 454, 5} true;
  assume {:verifier.code 0} true;
  /* %650 = add nsw i32 %649, %649, !dbg !784, !verifier.code !62 */
  $i541 := $add.i32($i540, $i540);
  /* call void @llvm.dbg.value(metadata i32 %650, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i541);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 456, 5} true;
  assume {:verifier.code 0} true;
  /* %651 = add nsw i32 %.71, %.71, !dbg !785, !verifier.code !62 */
  $i542 := $add.i32($i529, $i529);
  /* call void @llvm.dbg.value(metadata i32 %651, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i542);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 457, 9} true;
  assume {:verifier.code 0} true;
  /* %652 = icmp slt i32 %646, 0, !dbg !786, !verifier.code !62 */
  $i543 := $slt.i32($i537, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 457, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %652, label %653, label %660, !dbg !788, !verifier.code !62 */
  $i544 := $i542;
  assume {:branchcond $i543} true;
  goto $bb325, $bb326;
$bb319:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 15} true;
  assume {:verifier.code 0} true;
  assume ($i530 == 1);
  goto $bb320;
$bb320:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 448, 9} true;
  assume {:verifier.code 0} true;
  /* %640 = add nsw i32 %633, 1, !dbg !775, !verifier.code !62 */
  $i533 := $add.i32($i527, 1);
  /* call void @llvm.dbg.value(metadata i32 %640, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i533);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 449, 5} true;
  assume {:verifier.code 0} true;
  /* br label %641, !dbg !777, !verifier.code !62 */
  $i532 := $i533;
  goto $bb324;
$bb321:
  assume !(($i530 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 20} true;
  assume {:verifier.code 0} true;
  /* %638 = icmp sgt i32 %632, 2147483647, !dbg !773, !verifier.code !62 */
  $i531 := $sgt.i32($i526, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %638, label %639, label %641, !dbg !774, !verifier.code !62 */
  $i532 := $i527;
  assume {:branchcond $i531} true;
  goto $bb322, $bb323;
$bb322:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 9} true;
  assume {:verifier.code 0} true;
  assume ($i531 == 1);
  goto $bb320;
$bb323:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i531 == 1));
  goto $bb324;
$bb324:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.70 = phi i32 [ %640, %639 ], [ %633, %637 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.70, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 450, 3} true;
  assume {:verifier.code 0} true;
  /* br label %642, !dbg !778, !verifier.code !62 */
  $i529 := $i532;
  goto $bb318;
$bb325:
  assume ($i543 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 11} true;
  assume {:verifier.code 0} true;
  /* %654 = icmp slt i32 %650, 0, !dbg !789, !verifier.code !62 */
  $i545 := $slt.i32($i541, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %654, label %657, label %655, !dbg !792, !verifier.code !62 */
  assume {:branchcond $i545} true;
  goto $bb328, $bb330;
$bb326:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 457, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i543 == 1));
  goto $bb327;
$bb327:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.73 = phi i32 [ %.72, %659 ], [ %651, %642 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.73, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 462, 7} true;
  assume {:verifier.code 0} true;
  /* %661 = sext i32 %646 to i64, !dbg !799, !verifier.code !62 */
  $i549 := $sext.i32.i64($i537);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 462, 9} true;
  assume {:verifier.code 0} true;
  /* %662 = srem i64 %661, 2147483648, !dbg !800, !verifier.code !62 */
  $i550 := $srem.i64($i549, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 462, 7} true;
  assume {:verifier.code 0} true;
  /* %663 = trunc i64 %662 to i32, !dbg !799, !verifier.code !62 */
  $i551 := $trunc.i64.i32($i550);
  /* call void @llvm.dbg.value(metadata i32 %663, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i551);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 463, 5} true;
  assume {:verifier.code 0} true;
  /* %664 = add nsw i32 %663, %663, !dbg !801, !verifier.code !62 */
  $i552 := $add.i32($i551, $i551);
  /* call void @llvm.dbg.value(metadata i32 %664, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i552);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 464, 7} true;
  assume {:verifier.code 0} true;
  /* %665 = sext i32 %650 to i64, !dbg !802, !verifier.code !62 */
  $i553 := $sext.i32.i64($i541);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 464, 9} true;
  assume {:verifier.code 0} true;
  /* %666 = srem i64 %665, 2147483648, !dbg !803, !verifier.code !62 */
  $i554 := $srem.i64($i553, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 464, 7} true;
  assume {:verifier.code 0} true;
  /* %667 = trunc i64 %666 to i32, !dbg !802, !verifier.code !62 */
  $i555 := $trunc.i64.i32($i554);
  /* call void @llvm.dbg.value(metadata i32 %667, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i555);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 465, 5} true;
  assume {:verifier.code 0} true;
  /* %668 = add nsw i32 %667, %667, !dbg !804, !verifier.code !62 */
  $i556 := $add.i32($i555, $i555);
  /* call void @llvm.dbg.value(metadata i32 %668, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i556);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 467, 5} true;
  assume {:verifier.code 0} true;
  /* %669 = add nsw i32 %.73, %.73, !dbg !805, !verifier.code !62 */
  $i557 := $add.i32($i544, $i544);
  /* call void @llvm.dbg.value(metadata i32 %669, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i557);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 9} true;
  assume {:verifier.code 0} true;
  /* %670 = icmp slt i32 %664, 0, !dbg !806, !verifier.code !62 */
  $i558 := $slt.i32($i552, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %670, label %671, label %678, !dbg !808, !verifier.code !62 */
  $i559 := $i557;
  assume {:branchcond $i558} true;
  goto $bb334, $bb335;
$bb328:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 15} true;
  assume {:verifier.code 0} true;
  assume ($i545 == 1);
  goto $bb329;
$bb329:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 459, 9} true;
  assume {:verifier.code 0} true;
  /* %658 = add nsw i32 %651, 1, !dbg !795, !verifier.code !62 */
  $i548 := $add.i32($i542, 1);
  /* call void @llvm.dbg.value(metadata i32 %658, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i548);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 460, 5} true;
  assume {:verifier.code 0} true;
  /* br label %659, !dbg !797, !verifier.code !62 */
  $i547 := $i548;
  goto $bb333;
$bb330:
  assume !(($i545 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 20} true;
  assume {:verifier.code 0} true;
  /* %656 = icmp sgt i32 %650, 2147483647, !dbg !793, !verifier.code !62 */
  $i546 := $sgt.i32($i541, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %656, label %657, label %659, !dbg !794, !verifier.code !62 */
  $i547 := $i542;
  assume {:branchcond $i546} true;
  goto $bb331, $bb332;
$bb331:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 9} true;
  assume {:verifier.code 0} true;
  assume ($i546 == 1);
  goto $bb329;
$bb332:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i546 == 1));
  goto $bb333;
$bb333:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.72 = phi i32 [ %658, %657 ], [ %651, %655 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.72, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 461, 3} true;
  assume {:verifier.code 0} true;
  /* br label %660, !dbg !798, !verifier.code !62 */
  $i544 := $i547;
  goto $bb327;
$bb334:
  assume ($i558 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 11} true;
  assume {:verifier.code 0} true;
  /* %672 = icmp slt i32 %668, 0, !dbg !809, !verifier.code !62 */
  $i560 := $slt.i32($i556, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %672, label %675, label %673, !dbg !812, !verifier.code !62 */
  assume {:branchcond $i560} true;
  goto $bb337, $bb339;
$bb335:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i558 == 1));
  goto $bb336;
$bb336:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.75 = phi i32 [ %.74, %677 ], [ %669, %660 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.75, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 473, 7} true;
  assume {:verifier.code 0} true;
  /* %679 = sext i32 %664 to i64, !dbg !819, !verifier.code !62 */
  $i564 := $sext.i32.i64($i552);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 473, 9} true;
  assume {:verifier.code 0} true;
  /* %680 = srem i64 %679, 2147483648, !dbg !820, !verifier.code !62 */
  $i565 := $srem.i64($i564, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 473, 7} true;
  assume {:verifier.code 0} true;
  /* %681 = trunc i64 %680 to i32, !dbg !819, !verifier.code !62 */
  $i566 := $trunc.i64.i32($i565);
  /* call void @llvm.dbg.value(metadata i32 %681, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i566);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 474, 5} true;
  assume {:verifier.code 0} true;
  /* %682 = add nsw i32 %681, %681, !dbg !821, !verifier.code !62 */
  $i567 := $add.i32($i566, $i566);
  /* call void @llvm.dbg.value(metadata i32 %682, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i567);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 475, 7} true;
  assume {:verifier.code 0} true;
  /* %683 = sext i32 %668 to i64, !dbg !822, !verifier.code !62 */
  $i568 := $sext.i32.i64($i556);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 475, 9} true;
  assume {:verifier.code 0} true;
  /* %684 = srem i64 %683, 2147483648, !dbg !823, !verifier.code !62 */
  $i569 := $srem.i64($i568, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 475, 7} true;
  assume {:verifier.code 0} true;
  /* %685 = trunc i64 %684 to i32, !dbg !822, !verifier.code !62 */
  $i570 := $trunc.i64.i32($i569);
  /* call void @llvm.dbg.value(metadata i32 %685, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i570);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 476, 5} true;
  assume {:verifier.code 0} true;
  /* %686 = add nsw i32 %685, %685, !dbg !824, !verifier.code !62 */
  $i571 := $add.i32($i570, $i570);
  /* call void @llvm.dbg.value(metadata i32 %686, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i571);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 478, 5} true;
  assume {:verifier.code 0} true;
  /* %687 = add nsw i32 %.75, %.75, !dbg !825, !verifier.code !62 */
  $i572 := $add.i32($i559, $i559);
  /* call void @llvm.dbg.value(metadata i32 %687, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i572);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 479, 9} true;
  assume {:verifier.code 0} true;
  /* %688 = icmp slt i32 %682, 0, !dbg !826, !verifier.code !62 */
  $i573 := $slt.i32($i567, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 479, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %688, label %689, label %696, !dbg !828, !verifier.code !62 */
  $i574 := $i572;
  assume {:branchcond $i573} true;
  goto $bb343, $bb344;
$bb337:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 15} true;
  assume {:verifier.code 0} true;
  assume ($i560 == 1);
  goto $bb338;
$bb338:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 470, 9} true;
  assume {:verifier.code 0} true;
  /* %676 = add nsw i32 %669, 1, !dbg !815, !verifier.code !62 */
  $i563 := $add.i32($i557, 1);
  /* call void @llvm.dbg.value(metadata i32 %676, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i563);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 471, 5} true;
  assume {:verifier.code 0} true;
  /* br label %677, !dbg !817, !verifier.code !62 */
  $i562 := $i563;
  goto $bb342;
$bb339:
  assume !(($i560 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 20} true;
  assume {:verifier.code 0} true;
  /* %674 = icmp sgt i32 %668, 2147483647, !dbg !813, !verifier.code !62 */
  $i561 := $sgt.i32($i556, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %674, label %675, label %677, !dbg !814, !verifier.code !62 */
  $i562 := $i557;
  assume {:branchcond $i561} true;
  goto $bb340, $bb341;
$bb340:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 9} true;
  assume {:verifier.code 0} true;
  assume ($i561 == 1);
  goto $bb338;
$bb341:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i561 == 1));
  goto $bb342;
$bb342:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.74 = phi i32 [ %676, %675 ], [ %669, %673 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.74, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 472, 3} true;
  assume {:verifier.code 0} true;
  /* br label %678, !dbg !818, !verifier.code !62 */
  $i559 := $i562;
  goto $bb336;
$bb343:
  assume ($i573 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 11} true;
  assume {:verifier.code 0} true;
  /* %690 = icmp slt i32 %686, 0, !dbg !829, !verifier.code !62 */
  $i575 := $slt.i32($i571, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %690, label %693, label %691, !dbg !832, !verifier.code !62 */
  assume {:branchcond $i575} true;
  goto $bb346, $bb348;
$bb344:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 479, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i573 == 1));
  goto $bb345;
$bb345:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.77 = phi i32 [ %.76, %695 ], [ %687, %678 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.77, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 484, 7} true;
  assume {:verifier.code 0} true;
  /* %697 = sext i32 %682 to i64, !dbg !839, !verifier.code !62 */
  $i579 := $sext.i32.i64($i567);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 484, 9} true;
  assume {:verifier.code 0} true;
  /* %698 = srem i64 %697, 2147483648, !dbg !840, !verifier.code !62 */
  $i580 := $srem.i64($i579, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 484, 7} true;
  assume {:verifier.code 0} true;
  /* %699 = trunc i64 %698 to i32, !dbg !839, !verifier.code !62 */
  $i581 := $trunc.i64.i32($i580);
  /* call void @llvm.dbg.value(metadata i32 %699, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i581);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 485, 5} true;
  assume {:verifier.code 0} true;
  /* %700 = add nsw i32 %699, %699, !dbg !841, !verifier.code !62 */
  $i582 := $add.i32($i581, $i581);
  /* call void @llvm.dbg.value(metadata i32 %700, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i582);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 486, 7} true;
  assume {:verifier.code 0} true;
  /* %701 = sext i32 %686 to i64, !dbg !842, !verifier.code !62 */
  $i583 := $sext.i32.i64($i571);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 486, 9} true;
  assume {:verifier.code 0} true;
  /* %702 = srem i64 %701, 2147483648, !dbg !843, !verifier.code !62 */
  $i584 := $srem.i64($i583, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 486, 7} true;
  assume {:verifier.code 0} true;
  /* %703 = trunc i64 %702 to i32, !dbg !842, !verifier.code !62 */
  $i585 := $trunc.i64.i32($i584);
  /* call void @llvm.dbg.value(metadata i32 %703, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i585);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 487, 5} true;
  assume {:verifier.code 0} true;
  /* %704 = add nsw i32 %703, %703, !dbg !844, !verifier.code !62 */
  $i586 := $add.i32($i585, $i585);
  /* call void @llvm.dbg.value(metadata i32 %704, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i586);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 489, 5} true;
  assume {:verifier.code 0} true;
  /* %705 = add nsw i32 %.77, %.77, !dbg !845, !verifier.code !62 */
  $i587 := $add.i32($i574, $i574);
  /* call void @llvm.dbg.value(metadata i32 %705, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i587);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 9} true;
  assume {:verifier.code 0} true;
  /* %706 = icmp slt i32 %700, 0, !dbg !846, !verifier.code !62 */
  $i588 := $slt.i32($i582, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %706, label %707, label %714, !dbg !848, !verifier.code !62 */
  $i589 := $i587;
  assume {:branchcond $i588} true;
  goto $bb352, $bb353;
$bb346:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 15} true;
  assume {:verifier.code 0} true;
  assume ($i575 == 1);
  goto $bb347;
$bb347:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 481, 9} true;
  assume {:verifier.code 0} true;
  /* %694 = add nsw i32 %687, 1, !dbg !835, !verifier.code !62 */
  $i578 := $add.i32($i572, 1);
  /* call void @llvm.dbg.value(metadata i32 %694, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i578);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 482, 5} true;
  assume {:verifier.code 0} true;
  /* br label %695, !dbg !837, !verifier.code !62 */
  $i577 := $i578;
  goto $bb351;
$bb348:
  assume !(($i575 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 20} true;
  assume {:verifier.code 0} true;
  /* %692 = icmp sgt i32 %686, 2147483647, !dbg !833, !verifier.code !62 */
  $i576 := $sgt.i32($i571, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %692, label %693, label %695, !dbg !834, !verifier.code !62 */
  $i577 := $i572;
  assume {:branchcond $i576} true;
  goto $bb349, $bb350;
$bb349:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 9} true;
  assume {:verifier.code 0} true;
  assume ($i576 == 1);
  goto $bb347;
$bb350:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i576 == 1));
  goto $bb351;
$bb351:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.76 = phi i32 [ %694, %693 ], [ %687, %691 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.76, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 483, 3} true;
  assume {:verifier.code 0} true;
  /* br label %696, !dbg !838, !verifier.code !62 */
  $i574 := $i577;
  goto $bb345;
$bb352:
  assume ($i588 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 11} true;
  assume {:verifier.code 0} true;
  /* %708 = icmp slt i32 %704, 0, !dbg !849, !verifier.code !62 */
  $i590 := $slt.i32($i586, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %708, label %711, label %709, !dbg !852, !verifier.code !62 */
  assume {:branchcond $i590} true;
  goto $bb355, $bb357;
$bb353:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i588 == 1));
  goto $bb354;
$bb354:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.79 = phi i32 [ %.78, %713 ], [ %705, %696 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.79, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 495, 7} true;
  assume {:verifier.code 0} true;
  /* %715 = sext i32 %700 to i64, !dbg !859, !verifier.code !62 */
  $i594 := $sext.i32.i64($i582);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 495, 9} true;
  assume {:verifier.code 0} true;
  /* %716 = srem i64 %715, 2147483648, !dbg !860, !verifier.code !62 */
  $i595 := $srem.i64($i594, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 495, 7} true;
  assume {:verifier.code 0} true;
  /* %717 = trunc i64 %716 to i32, !dbg !859, !verifier.code !62 */
  $i596 := $trunc.i64.i32($i595);
  /* call void @llvm.dbg.value(metadata i32 %717, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i596);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 496, 5} true;
  assume {:verifier.code 0} true;
  /* %718 = add nsw i32 %717, %717, !dbg !861, !verifier.code !62 */
  $i597 := $add.i32($i596, $i596);
  /* call void @llvm.dbg.value(metadata i32 %718, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i597);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 497, 7} true;
  assume {:verifier.code 0} true;
  /* %719 = sext i32 %704 to i64, !dbg !862, !verifier.code !62 */
  $i598 := $sext.i32.i64($i586);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 497, 9} true;
  assume {:verifier.code 0} true;
  /* %720 = srem i64 %719, 2147483648, !dbg !863, !verifier.code !62 */
  $i599 := $srem.i64($i598, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 497, 7} true;
  assume {:verifier.code 0} true;
  /* %721 = trunc i64 %720 to i32, !dbg !862, !verifier.code !62 */
  $i600 := $trunc.i64.i32($i599);
  /* call void @llvm.dbg.value(metadata i32 %721, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i600);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 498, 5} true;
  assume {:verifier.code 0} true;
  /* %722 = add nsw i32 %721, %721, !dbg !864, !verifier.code !62 */
  $i601 := $add.i32($i600, $i600);
  /* call void @llvm.dbg.value(metadata i32 %722, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i601);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 500, 5} true;
  assume {:verifier.code 0} true;
  /* %723 = add nsw i32 %.79, %.79, !dbg !865, !verifier.code !62 */
  $i602 := $add.i32($i589, $i589);
  /* call void @llvm.dbg.value(metadata i32 %723, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i602);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 501, 9} true;
  assume {:verifier.code 0} true;
  /* %724 = icmp slt i32 %718, 0, !dbg !866, !verifier.code !62 */
  $i603 := $slt.i32($i597, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 501, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %724, label %725, label %732, !dbg !868, !verifier.code !62 */
  $i604 := $i602;
  assume {:branchcond $i603} true;
  goto $bb361, $bb362;
$bb355:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 15} true;
  assume {:verifier.code 0} true;
  assume ($i590 == 1);
  goto $bb356;
$bb356:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 492, 9} true;
  assume {:verifier.code 0} true;
  /* %712 = add nsw i32 %705, 1, !dbg !855, !verifier.code !62 */
  $i593 := $add.i32($i587, 1);
  /* call void @llvm.dbg.value(metadata i32 %712, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i593);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 493, 5} true;
  assume {:verifier.code 0} true;
  /* br label %713, !dbg !857, !verifier.code !62 */
  $i592 := $i593;
  goto $bb360;
$bb357:
  assume !(($i590 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 20} true;
  assume {:verifier.code 0} true;
  /* %710 = icmp sgt i32 %704, 2147483647, !dbg !853, !verifier.code !62 */
  $i591 := $sgt.i32($i586, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %710, label %711, label %713, !dbg !854, !verifier.code !62 */
  $i592 := $i587;
  assume {:branchcond $i591} true;
  goto $bb358, $bb359;
$bb358:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 9} true;
  assume {:verifier.code 0} true;
  assume ($i591 == 1);
  goto $bb356;
$bb359:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i591 == 1));
  goto $bb360;
$bb360:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.78 = phi i32 [ %712, %711 ], [ %705, %709 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.78, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 494, 3} true;
  assume {:verifier.code 0} true;
  /* br label %714, !dbg !858, !verifier.code !62 */
  $i589 := $i592;
  goto $bb354;
$bb361:
  assume ($i603 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 11} true;
  assume {:verifier.code 0} true;
  /* %726 = icmp slt i32 %722, 0, !dbg !869, !verifier.code !62 */
  $i605 := $slt.i32($i601, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %726, label %729, label %727, !dbg !872, !verifier.code !62 */
  assume {:branchcond $i605} true;
  goto $bb364, $bb366;
$bb362:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 501, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i603 == 1));
  goto $bb363;
$bb363:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.81 = phi i32 [ %.80, %731 ], [ %723, %714 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.81, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 506, 7} true;
  assume {:verifier.code 0} true;
  /* %733 = sext i32 %718 to i64, !dbg !879, !verifier.code !62 */
  $i609 := $sext.i32.i64($i597);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 506, 9} true;
  assume {:verifier.code 0} true;
  /* %734 = srem i64 %733, 2147483648, !dbg !880, !verifier.code !62 */
  $i610 := $srem.i64($i609, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 506, 7} true;
  assume {:verifier.code 0} true;
  /* %735 = trunc i64 %734 to i32, !dbg !879, !verifier.code !62 */
  $i611 := $trunc.i64.i32($i610);
  /* call void @llvm.dbg.value(metadata i32 %735, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i611);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 507, 5} true;
  assume {:verifier.code 0} true;
  /* %736 = add nsw i32 %735, %735, !dbg !881, !verifier.code !62 */
  $i612 := $add.i32($i611, $i611);
  /* call void @llvm.dbg.value(metadata i32 %736, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i612);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 508, 7} true;
  assume {:verifier.code 0} true;
  /* %737 = sext i32 %722 to i64, !dbg !882, !verifier.code !62 */
  $i613 := $sext.i32.i64($i601);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 508, 9} true;
  assume {:verifier.code 0} true;
  /* %738 = srem i64 %737, 2147483648, !dbg !883, !verifier.code !62 */
  $i614 := $srem.i64($i613, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 508, 7} true;
  assume {:verifier.code 0} true;
  /* %739 = trunc i64 %738 to i32, !dbg !882, !verifier.code !62 */
  $i615 := $trunc.i64.i32($i614);
  /* call void @llvm.dbg.value(metadata i32 %739, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i615);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 509, 5} true;
  assume {:verifier.code 0} true;
  /* %740 = add nsw i32 %739, %739, !dbg !884, !verifier.code !62 */
  $i616 := $add.i32($i615, $i615);
  /* call void @llvm.dbg.value(metadata i32 %740, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i616);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 511, 5} true;
  assume {:verifier.code 0} true;
  /* %741 = add nsw i32 %.81, %.81, !dbg !885, !verifier.code !62 */
  $i617 := $add.i32($i604, $i604);
  /* call void @llvm.dbg.value(metadata i32 %741, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i617);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 9} true;
  assume {:verifier.code 0} true;
  /* %742 = icmp slt i32 %736, 0, !dbg !886, !verifier.code !62 */
  $i618 := $slt.i32($i612, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %742, label %743, label %750, !dbg !888, !verifier.code !62 */
  $i619 := $i617;
  assume {:branchcond $i618} true;
  goto $bb370, $bb371;
$bb364:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 15} true;
  assume {:verifier.code 0} true;
  assume ($i605 == 1);
  goto $bb365;
$bb365:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 503, 9} true;
  assume {:verifier.code 0} true;
  /* %730 = add nsw i32 %723, 1, !dbg !875, !verifier.code !62 */
  $i608 := $add.i32($i602, 1);
  /* call void @llvm.dbg.value(metadata i32 %730, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i608);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 504, 5} true;
  assume {:verifier.code 0} true;
  /* br label %731, !dbg !877, !verifier.code !62 */
  $i607 := $i608;
  goto $bb369;
$bb366:
  assume !(($i605 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 20} true;
  assume {:verifier.code 0} true;
  /* %728 = icmp sgt i32 %722, 2147483647, !dbg !873, !verifier.code !62 */
  $i606 := $sgt.i32($i601, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %728, label %729, label %731, !dbg !874, !verifier.code !62 */
  $i607 := $i602;
  assume {:branchcond $i606} true;
  goto $bb367, $bb368;
$bb367:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 9} true;
  assume {:verifier.code 0} true;
  assume ($i606 == 1);
  goto $bb365;
$bb368:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i606 == 1));
  goto $bb369;
$bb369:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.80 = phi i32 [ %730, %729 ], [ %723, %727 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.80, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 505, 3} true;
  assume {:verifier.code 0} true;
  /* br label %732, !dbg !878, !verifier.code !62 */
  $i604 := $i607;
  goto $bb363;
$bb370:
  assume ($i618 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 11} true;
  assume {:verifier.code 0} true;
  /* %744 = icmp slt i32 %740, 0, !dbg !889, !verifier.code !62 */
  $i620 := $slt.i32($i616, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %744, label %747, label %745, !dbg !892, !verifier.code !62 */
  assume {:branchcond $i620} true;
  goto $bb373, $bb375;
$bb371:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i618 == 1));
  goto $bb372;
$bb372:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.83 = phi i32 [ %.82, %749 ], [ %741, %732 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.83, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 517, 7} true;
  assume {:verifier.code 0} true;
  /* %751 = sext i32 %736 to i64, !dbg !899, !verifier.code !62 */
  $i624 := $sext.i32.i64($i612);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 517, 9} true;
  assume {:verifier.code 0} true;
  /* %752 = srem i64 %751, 2147483648, !dbg !900, !verifier.code !62 */
  $i625 := $srem.i64($i624, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 517, 7} true;
  assume {:verifier.code 0} true;
  /* %753 = trunc i64 %752 to i32, !dbg !899, !verifier.code !62 */
  $i626 := $trunc.i64.i32($i625);
  /* call void @llvm.dbg.value(metadata i32 %753, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i626);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 518, 5} true;
  assume {:verifier.code 0} true;
  /* %754 = add nsw i32 %753, %753, !dbg !901, !verifier.code !62 */
  $i627 := $add.i32($i626, $i626);
  /* call void @llvm.dbg.value(metadata i32 %754, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i627);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 519, 7} true;
  assume {:verifier.code 0} true;
  /* %755 = sext i32 %740 to i64, !dbg !902, !verifier.code !62 */
  $i628 := $sext.i32.i64($i616);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 519, 9} true;
  assume {:verifier.code 0} true;
  /* %756 = srem i64 %755, 2147483648, !dbg !903, !verifier.code !62 */
  $i629 := $srem.i64($i628, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 519, 7} true;
  assume {:verifier.code 0} true;
  /* %757 = trunc i64 %756 to i32, !dbg !902, !verifier.code !62 */
  $i630 := $trunc.i64.i32($i629);
  /* call void @llvm.dbg.value(metadata i32 %757, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i630);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 520, 5} true;
  assume {:verifier.code 0} true;
  /* %758 = add nsw i32 %757, %757, !dbg !904, !verifier.code !62 */
  $i631 := $add.i32($i630, $i630);
  /* call void @llvm.dbg.value(metadata i32 %758, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i631);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 522, 5} true;
  assume {:verifier.code 0} true;
  /* %759 = add nsw i32 %.83, %.83, !dbg !905, !verifier.code !62 */
  $i632 := $add.i32($i619, $i619);
  /* call void @llvm.dbg.value(metadata i32 %759, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i632);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 523, 9} true;
  assume {:verifier.code 0} true;
  /* %760 = icmp slt i32 %754, 0, !dbg !906, !verifier.code !62 */
  $i633 := $slt.i32($i627, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 523, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %760, label %761, label %768, !dbg !908, !verifier.code !62 */
  $i634 := $i632;
  assume {:branchcond $i633} true;
  goto $bb379, $bb380;
$bb373:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 15} true;
  assume {:verifier.code 0} true;
  assume ($i620 == 1);
  goto $bb374;
$bb374:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 514, 9} true;
  assume {:verifier.code 0} true;
  /* %748 = add nsw i32 %741, 1, !dbg !895, !verifier.code !62 */
  $i623 := $add.i32($i617, 1);
  /* call void @llvm.dbg.value(metadata i32 %748, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i623);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 515, 5} true;
  assume {:verifier.code 0} true;
  /* br label %749, !dbg !897, !verifier.code !62 */
  $i622 := $i623;
  goto $bb378;
$bb375:
  assume !(($i620 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 20} true;
  assume {:verifier.code 0} true;
  /* %746 = icmp sgt i32 %740, 2147483647, !dbg !893, !verifier.code !62 */
  $i621 := $sgt.i32($i616, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %746, label %747, label %749, !dbg !894, !verifier.code !62 */
  $i622 := $i617;
  assume {:branchcond $i621} true;
  goto $bb376, $bb377;
$bb376:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 9} true;
  assume {:verifier.code 0} true;
  assume ($i621 == 1);
  goto $bb374;
$bb377:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i621 == 1));
  goto $bb378;
$bb378:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.82 = phi i32 [ %748, %747 ], [ %741, %745 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.82, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 516, 3} true;
  assume {:verifier.code 0} true;
  /* br label %750, !dbg !898, !verifier.code !62 */
  $i619 := $i622;
  goto $bb372;
$bb379:
  assume ($i633 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 11} true;
  assume {:verifier.code 0} true;
  /* %762 = icmp slt i32 %758, 0, !dbg !909, !verifier.code !62 */
  $i635 := $slt.i32($i631, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %762, label %765, label %763, !dbg !912, !verifier.code !62 */
  assume {:branchcond $i635} true;
  goto $bb382, $bb384;
$bb380:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 523, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i633 == 1));
  goto $bb381;
$bb381:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.85 = phi i32 [ %.84, %767 ], [ %759, %750 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.85, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 7} true;
  assume {:verifier.code 0} true;
  /* %769 = sext i32 %754 to i64, !dbg !919, !verifier.code !62 */
  $i639 := $sext.i32.i64($i627);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 9} true;
  assume {:verifier.code 0} true;
  /* %770 = srem i64 %769, 2147483648, !dbg !920, !verifier.code !62 */
  $i640 := $srem.i64($i639, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 7} true;
  assume {:verifier.code 0} true;
  /* %771 = trunc i64 %770 to i32, !dbg !919, !verifier.code !62 */
  $i641 := $trunc.i64.i32($i640);
  /* call void @llvm.dbg.value(metadata i32 %771, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i641);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 529, 5} true;
  assume {:verifier.code 0} true;
  /* %772 = add nsw i32 %771, %771, !dbg !921, !verifier.code !62 */
  $i642 := $add.i32($i641, $i641);
  /* call void @llvm.dbg.value(metadata i32 %772, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i642);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 530, 7} true;
  assume {:verifier.code 0} true;
  /* %773 = sext i32 %758 to i64, !dbg !922, !verifier.code !62 */
  $i643 := $sext.i32.i64($i631);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 530, 9} true;
  assume {:verifier.code 0} true;
  /* %774 = srem i64 %773, 2147483648, !dbg !923, !verifier.code !62 */
  $i644 := $srem.i64($i643, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 530, 7} true;
  assume {:verifier.code 0} true;
  /* %775 = trunc i64 %774 to i32, !dbg !922, !verifier.code !62 */
  $i645 := $trunc.i64.i32($i644);
  /* call void @llvm.dbg.value(metadata i32 %775, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i645);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 531, 5} true;
  assume {:verifier.code 0} true;
  /* %776 = add nsw i32 %775, %775, !dbg !924, !verifier.code !62 */
  $i646 := $add.i32($i645, $i645);
  /* call void @llvm.dbg.value(metadata i32 %776, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i646);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 533, 5} true;
  assume {:verifier.code 0} true;
  /* %777 = add nsw i32 %.85, %.85, !dbg !925, !verifier.code !62 */
  $i647 := $add.i32($i634, $i634);
  /* call void @llvm.dbg.value(metadata i32 %777, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 9} true;
  assume {:verifier.code 0} true;
  /* %778 = icmp slt i32 %772, 0, !dbg !926, !verifier.code !62 */
  $i648 := $slt.i32($i642, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %778, label %779, label %786, !dbg !928, !verifier.code !62 */
  $i649 := $i647;
  assume {:branchcond $i648} true;
  goto $bb388, $bb389;
$bb382:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 15} true;
  assume {:verifier.code 0} true;
  assume ($i635 == 1);
  goto $bb383;
$bb383:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 525, 9} true;
  assume {:verifier.code 0} true;
  /* %766 = add nsw i32 %759, 1, !dbg !915, !verifier.code !62 */
  $i638 := $add.i32($i632, 1);
  /* call void @llvm.dbg.value(metadata i32 %766, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i638);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 526, 5} true;
  assume {:verifier.code 0} true;
  /* br label %767, !dbg !917, !verifier.code !62 */
  $i637 := $i638;
  goto $bb387;
$bb384:
  assume !(($i635 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 20} true;
  assume {:verifier.code 0} true;
  /* %764 = icmp sgt i32 %758, 2147483647, !dbg !913, !verifier.code !62 */
  $i636 := $sgt.i32($i631, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %764, label %765, label %767, !dbg !914, !verifier.code !62 */
  $i637 := $i632;
  assume {:branchcond $i636} true;
  goto $bb385, $bb386;
$bb385:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 9} true;
  assume {:verifier.code 0} true;
  assume ($i636 == 1);
  goto $bb383;
$bb386:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i636 == 1));
  goto $bb387;
$bb387:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.84 = phi i32 [ %766, %765 ], [ %759, %763 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.84, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 527, 3} true;
  assume {:verifier.code 0} true;
  /* br label %768, !dbg !918, !verifier.code !62 */
  $i634 := $i637;
  goto $bb381;
$bb388:
  assume ($i648 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 11} true;
  assume {:verifier.code 0} true;
  /* %780 = icmp slt i32 %776, 0, !dbg !929, !verifier.code !62 */
  $i650 := $slt.i32($i646, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %780, label %783, label %781, !dbg !932, !verifier.code !62 */
  assume {:branchcond $i650} true;
  goto $bb391, $bb393;
$bb389:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i648 == 1));
  goto $bb390;
$bb390:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.87 = phi i32 [ %.86, %785 ], [ %777, %768 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.87, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 7} true;
  assume {:verifier.code 0} true;
  /* %787 = sext i32 %772 to i64, !dbg !939, !verifier.code !62 */
  $i654 := $sext.i32.i64($i642);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 9} true;
  assume {:verifier.code 0} true;
  /* %788 = srem i64 %787, 2147483648, !dbg !940, !verifier.code !62 */
  $i655 := $srem.i64($i654, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 7} true;
  assume {:verifier.code 0} true;
  /* %789 = trunc i64 %788 to i32, !dbg !939, !verifier.code !62 */
  $i656 := $trunc.i64.i32($i655);
  /* call void @llvm.dbg.value(metadata i32 %789, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i656);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 540, 5} true;
  assume {:verifier.code 0} true;
  /* %790 = add nsw i32 %789, %789, !dbg !941, !verifier.code !62 */
  $i657 := $add.i32($i656, $i656);
  /* call void @llvm.dbg.value(metadata i32 %790, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i657);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 541, 7} true;
  assume {:verifier.code 0} true;
  /* %791 = sext i32 %776 to i64, !dbg !942, !verifier.code !62 */
  $i658 := $sext.i32.i64($i646);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 541, 9} true;
  assume {:verifier.code 0} true;
  /* %792 = srem i64 %791, 2147483648, !dbg !943, !verifier.code !62 */
  $i659 := $srem.i64($i658, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 541, 7} true;
  assume {:verifier.code 0} true;
  /* %793 = trunc i64 %792 to i32, !dbg !942, !verifier.code !62 */
  $i660 := $trunc.i64.i32($i659);
  /* call void @llvm.dbg.value(metadata i32 %793, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i660);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 542, 5} true;
  assume {:verifier.code 0} true;
  /* %794 = add nsw i32 %793, %793, !dbg !944, !verifier.code !62 */
  $i661 := $add.i32($i660, $i660);
  /* call void @llvm.dbg.value(metadata i32 %794, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i661);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 544, 5} true;
  assume {:verifier.code 0} true;
  /* %795 = add nsw i32 %.87, %.87, !dbg !945, !verifier.code !62 */
  $i662 := $add.i32($i649, $i649);
  /* call void @llvm.dbg.value(metadata i32 %795, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i662);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 545, 9} true;
  assume {:verifier.code 0} true;
  /* %796 = icmp slt i32 %790, 0, !dbg !946, !verifier.code !62 */
  $i663 := $slt.i32($i657, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 545, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %796, label %797, label %804, !dbg !948, !verifier.code !62 */
  $i664 := $i662;
  assume {:branchcond $i663} true;
  goto $bb397, $bb398;
$bb391:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 15} true;
  assume {:verifier.code 0} true;
  assume ($i650 == 1);
  goto $bb392;
$bb392:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 536, 9} true;
  assume {:verifier.code 0} true;
  /* %784 = add nsw i32 %777, 1, !dbg !935, !verifier.code !62 */
  $i653 := $add.i32($i647, 1);
  /* call void @llvm.dbg.value(metadata i32 %784, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i653);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 537, 5} true;
  assume {:verifier.code 0} true;
  /* br label %785, !dbg !937, !verifier.code !62 */
  $i652 := $i653;
  goto $bb396;
$bb393:
  assume !(($i650 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 20} true;
  assume {:verifier.code 0} true;
  /* %782 = icmp sgt i32 %776, 2147483647, !dbg !933, !verifier.code !62 */
  $i651 := $sgt.i32($i646, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %782, label %783, label %785, !dbg !934, !verifier.code !62 */
  $i652 := $i647;
  assume {:branchcond $i651} true;
  goto $bb394, $bb395;
$bb394:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 9} true;
  assume {:verifier.code 0} true;
  assume ($i651 == 1);
  goto $bb392;
$bb395:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i651 == 1));
  goto $bb396;
$bb396:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.86 = phi i32 [ %784, %783 ], [ %777, %781 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.86, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 538, 3} true;
  assume {:verifier.code 0} true;
  /* br label %786, !dbg !938, !verifier.code !62 */
  $i649 := $i652;
  goto $bb390;
$bb397:
  assume ($i663 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 11} true;
  assume {:verifier.code 0} true;
  /* %798 = icmp slt i32 %794, 0, !dbg !949, !verifier.code !62 */
  $i665 := $slt.i32($i661, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %798, label %801, label %799, !dbg !952, !verifier.code !62 */
  assume {:branchcond $i665} true;
  goto $bb400, $bb402;
$bb398:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 545, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i663 == 1));
  goto $bb399;
$bb399:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.89 = phi i32 [ %.88, %803 ], [ %795, %786 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.89, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 550, 7} true;
  assume {:verifier.code 0} true;
  /* %805 = sext i32 %790 to i64, !dbg !959, !verifier.code !62 */
  $i669 := $sext.i32.i64($i657);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 550, 9} true;
  assume {:verifier.code 0} true;
  /* %806 = srem i64 %805, 2147483648, !dbg !960, !verifier.code !62 */
  $i670 := $srem.i64($i669, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 550, 7} true;
  assume {:verifier.code 0} true;
  /* %807 = trunc i64 %806 to i32, !dbg !959, !verifier.code !62 */
  $i671 := $trunc.i64.i32($i670);
  /* call void @llvm.dbg.value(metadata i32 %807, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i671);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 551, 5} true;
  assume {:verifier.code 0} true;
  /* %808 = add nsw i32 %807, %807, !dbg !961, !verifier.code !62 */
  $i672 := $add.i32($i671, $i671);
  /* call void @llvm.dbg.value(metadata i32 %808, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i672);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 552, 7} true;
  assume {:verifier.code 0} true;
  /* %809 = sext i32 %794 to i64, !dbg !962, !verifier.code !62 */
  $i673 := $sext.i32.i64($i661);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 552, 9} true;
  assume {:verifier.code 0} true;
  /* %810 = srem i64 %809, 2147483648, !dbg !963, !verifier.code !62 */
  $i674 := $srem.i64($i673, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 552, 7} true;
  assume {:verifier.code 0} true;
  /* %811 = trunc i64 %810 to i32, !dbg !962, !verifier.code !62 */
  $i675 := $trunc.i64.i32($i674);
  /* call void @llvm.dbg.value(metadata i32 %811, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i675);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 553, 5} true;
  assume {:verifier.code 0} true;
  /* %812 = add nsw i32 %811, %811, !dbg !964, !verifier.code !62 */
  $i676 := $add.i32($i675, $i675);
  /* call void @llvm.dbg.value(metadata i32 %812, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i676);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 555, 5} true;
  assume {:verifier.code 0} true;
  /* %813 = add nsw i32 %.89, %.89, !dbg !965, !verifier.code !62 */
  $i677 := $add.i32($i664, $i664);
  /* call void @llvm.dbg.value(metadata i32 %813, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i677);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 9} true;
  assume {:verifier.code 0} true;
  /* %814 = icmp slt i32 %808, 0, !dbg !966, !verifier.code !62 */
  $i678 := $slt.i32($i672, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %814, label %815, label %822, !dbg !968, !verifier.code !62 */
  $i679 := $i677;
  assume {:branchcond $i678} true;
  goto $bb406, $bb407;
$bb400:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 15} true;
  assume {:verifier.code 0} true;
  assume ($i665 == 1);
  goto $bb401;
$bb401:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 547, 9} true;
  assume {:verifier.code 0} true;
  /* %802 = add nsw i32 %795, 1, !dbg !955, !verifier.code !62 */
  $i668 := $add.i32($i662, 1);
  /* call void @llvm.dbg.value(metadata i32 %802, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i668);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 5} true;
  assume {:verifier.code 0} true;
  /* br label %803, !dbg !957, !verifier.code !62 */
  $i667 := $i668;
  goto $bb405;
$bb402:
  assume !(($i665 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 20} true;
  assume {:verifier.code 0} true;
  /* %800 = icmp sgt i32 %794, 2147483647, !dbg !953, !verifier.code !62 */
  $i666 := $sgt.i32($i661, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %800, label %801, label %803, !dbg !954, !verifier.code !62 */
  $i667 := $i662;
  assume {:branchcond $i666} true;
  goto $bb403, $bb404;
$bb403:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 9} true;
  assume {:verifier.code 0} true;
  assume ($i666 == 1);
  goto $bb401;
$bb404:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i666 == 1));
  goto $bb405;
$bb405:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.88 = phi i32 [ %802, %801 ], [ %795, %799 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.88, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 549, 3} true;
  assume {:verifier.code 0} true;
  /* br label %804, !dbg !958, !verifier.code !62 */
  $i664 := $i667;
  goto $bb399;
$bb406:
  assume ($i678 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 11} true;
  assume {:verifier.code 0} true;
  /* %816 = icmp slt i32 %812, 0, !dbg !969, !verifier.code !62 */
  $i680 := $slt.i32($i676, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %816, label %819, label %817, !dbg !972, !verifier.code !62 */
  assume {:branchcond $i680} true;
  goto $bb409, $bb411;
$bb407:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i678 == 1));
  goto $bb408;
$bb408:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.91 = phi i32 [ %.90, %821 ], [ %813, %804 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.91, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 561, 7} true;
  assume {:verifier.code 0} true;
  /* %823 = sext i32 %808 to i64, !dbg !979, !verifier.code !62 */
  $i684 := $sext.i32.i64($i672);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 561, 9} true;
  assume {:verifier.code 0} true;
  /* %824 = srem i64 %823, 2147483648, !dbg !980, !verifier.code !62 */
  $i685 := $srem.i64($i684, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 561, 7} true;
  assume {:verifier.code 0} true;
  /* %825 = trunc i64 %824 to i32, !dbg !979, !verifier.code !62 */
  $i686 := $trunc.i64.i32($i685);
  /* call void @llvm.dbg.value(metadata i32 %825, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i686);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 562, 5} true;
  assume {:verifier.code 0} true;
  /* %826 = add nsw i32 %825, %825, !dbg !981, !verifier.code !62 */
  $i687 := $add.i32($i686, $i686);
  /* call void @llvm.dbg.value(metadata i32 %826, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i687);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 563, 7} true;
  assume {:verifier.code 0} true;
  /* %827 = sext i32 %812 to i64, !dbg !982, !verifier.code !62 */
  $i688 := $sext.i32.i64($i676);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 563, 9} true;
  assume {:verifier.code 0} true;
  /* %828 = srem i64 %827, 2147483648, !dbg !983, !verifier.code !62 */
  $i689 := $srem.i64($i688, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 563, 7} true;
  assume {:verifier.code 0} true;
  /* %829 = trunc i64 %828 to i32, !dbg !982, !verifier.code !62 */
  $i690 := $trunc.i64.i32($i689);
  /* call void @llvm.dbg.value(metadata i32 %829, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i690);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 564, 5} true;
  assume {:verifier.code 0} true;
  /* %830 = add nsw i32 %829, %829, !dbg !984, !verifier.code !62 */
  $i691 := $add.i32($i690, $i690);
  /* call void @llvm.dbg.value(metadata i32 %830, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i691);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 566, 5} true;
  assume {:verifier.code 0} true;
  /* %831 = add nsw i32 %.91, %.91, !dbg !985, !verifier.code !62 */
  $i692 := $add.i32($i679, $i679);
  /* call void @llvm.dbg.value(metadata i32 %831, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i692);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 567, 9} true;
  assume {:verifier.code 0} true;
  /* %832 = icmp slt i32 %826, 0, !dbg !986, !verifier.code !62 */
  $i693 := $slt.i32($i687, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 567, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %832, label %833, label %840, !dbg !988, !verifier.code !62 */
  $i694 := $i692;
  assume {:branchcond $i693} true;
  goto $bb415, $bb416;
$bb409:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 15} true;
  assume {:verifier.code 0} true;
  assume ($i680 == 1);
  goto $bb410;
$bb410:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 558, 9} true;
  assume {:verifier.code 0} true;
  /* %820 = add nsw i32 %813, 1, !dbg !975, !verifier.code !62 */
  $i683 := $add.i32($i677, 1);
  /* call void @llvm.dbg.value(metadata i32 %820, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i683);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 559, 5} true;
  assume {:verifier.code 0} true;
  /* br label %821, !dbg !977, !verifier.code !62 */
  $i682 := $i683;
  goto $bb414;
$bb411:
  assume !(($i680 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 20} true;
  assume {:verifier.code 0} true;
  /* %818 = icmp sgt i32 %812, 2147483647, !dbg !973, !verifier.code !62 */
  $i681 := $sgt.i32($i676, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %818, label %819, label %821, !dbg !974, !verifier.code !62 */
  $i682 := $i677;
  assume {:branchcond $i681} true;
  goto $bb412, $bb413;
$bb412:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 9} true;
  assume {:verifier.code 0} true;
  assume ($i681 == 1);
  goto $bb410;
$bb413:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i681 == 1));
  goto $bb414;
$bb414:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.90 = phi i32 [ %820, %819 ], [ %813, %817 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.90, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 560, 3} true;
  assume {:verifier.code 0} true;
  /* br label %822, !dbg !978, !verifier.code !62 */
  $i679 := $i682;
  goto $bb408;
$bb415:
  assume ($i693 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 11} true;
  assume {:verifier.code 0} true;
  /* %834 = icmp slt i32 %830, 0, !dbg !989, !verifier.code !62 */
  $i695 := $slt.i32($i691, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %834, label %837, label %835, !dbg !992, !verifier.code !62 */
  assume {:branchcond $i695} true;
  goto $bb418, $bb420;
$bb416:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 567, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i693 == 1));
  goto $bb417;
$bb417:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.93 = phi i32 [ %.92, %839 ], [ %831, %822 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.93, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 572, 7} true;
  assume {:verifier.code 0} true;
  /* %841 = sext i32 %826 to i64, !dbg !999, !verifier.code !62 */
  $i699 := $sext.i32.i64($i687);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 572, 9} true;
  assume {:verifier.code 0} true;
  /* %842 = srem i64 %841, 2147483648, !dbg !1000, !verifier.code !62 */
  $i700 := $srem.i64($i699, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 572, 7} true;
  assume {:verifier.code 0} true;
  /* %843 = trunc i64 %842 to i32, !dbg !999, !verifier.code !62 */
  $i701 := $trunc.i64.i32($i700);
  /* call void @llvm.dbg.value(metadata i32 %843, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i701);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 573, 5} true;
  assume {:verifier.code 0} true;
  /* %844 = add nsw i32 %843, %843, !dbg !1001, !verifier.code !62 */
  $i702 := $add.i32($i701, $i701);
  /* call void @llvm.dbg.value(metadata i32 %844, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i702);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 574, 7} true;
  assume {:verifier.code 0} true;
  /* %845 = sext i32 %830 to i64, !dbg !1002, !verifier.code !62 */
  $i703 := $sext.i32.i64($i691);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 574, 9} true;
  assume {:verifier.code 0} true;
  /* %846 = srem i64 %845, 2147483648, !dbg !1003, !verifier.code !62 */
  $i704 := $srem.i64($i703, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 574, 7} true;
  assume {:verifier.code 0} true;
  /* %847 = trunc i64 %846 to i32, !dbg !1002, !verifier.code !62 */
  $i705 := $trunc.i64.i32($i704);
  /* call void @llvm.dbg.value(metadata i32 %847, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i705);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 575, 5} true;
  assume {:verifier.code 0} true;
  /* %848 = add nsw i32 %847, %847, !dbg !1004, !verifier.code !62 */
  $i706 := $add.i32($i705, $i705);
  /* call void @llvm.dbg.value(metadata i32 %848, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i706);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 577, 5} true;
  assume {:verifier.code 0} true;
  /* %849 = add nsw i32 %.93, %.93, !dbg !1005, !verifier.code !62 */
  $i707 := $add.i32($i694, $i694);
  /* call void @llvm.dbg.value(metadata i32 %849, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i707);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 9} true;
  assume {:verifier.code 0} true;
  /* %850 = icmp slt i32 %844, 0, !dbg !1006, !verifier.code !62 */
  $i708 := $slt.i32($i702, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %850, label %851, label %858, !dbg !1008, !verifier.code !62 */
  $i709 := $i707;
  assume {:branchcond $i708} true;
  goto $bb424, $bb425;
$bb418:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 15} true;
  assume {:verifier.code 0} true;
  assume ($i695 == 1);
  goto $bb419;
$bb419:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 569, 9} true;
  assume {:verifier.code 0} true;
  /* %838 = add nsw i32 %831, 1, !dbg !995, !verifier.code !62 */
  $i698 := $add.i32($i692, 1);
  /* call void @llvm.dbg.value(metadata i32 %838, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i698);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 570, 5} true;
  assume {:verifier.code 0} true;
  /* br label %839, !dbg !997, !verifier.code !62 */
  $i697 := $i698;
  goto $bb423;
$bb420:
  assume !(($i695 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 20} true;
  assume {:verifier.code 0} true;
  /* %836 = icmp sgt i32 %830, 2147483647, !dbg !993, !verifier.code !62 */
  $i696 := $sgt.i32($i691, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %836, label %837, label %839, !dbg !994, !verifier.code !62 */
  $i697 := $i692;
  assume {:branchcond $i696} true;
  goto $bb421, $bb422;
$bb421:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 9} true;
  assume {:verifier.code 0} true;
  assume ($i696 == 1);
  goto $bb419;
$bb422:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i696 == 1));
  goto $bb423;
$bb423:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.92 = phi i32 [ %838, %837 ], [ %831, %835 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.92, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 571, 3} true;
  assume {:verifier.code 0} true;
  /* br label %840, !dbg !998, !verifier.code !62 */
  $i694 := $i697;
  goto $bb417;
$bb424:
  assume ($i708 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 11} true;
  assume {:verifier.code 0} true;
  /* %852 = icmp slt i32 %848, 0, !dbg !1009, !verifier.code !62 */
  $i710 := $slt.i32($i706, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %852, label %855, label %853, !dbg !1012, !verifier.code !62 */
  assume {:branchcond $i710} true;
  goto $bb427, $bb429;
$bb425:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i708 == 1));
  goto $bb426;
$bb426:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.95 = phi i32 [ %.94, %857 ], [ %849, %840 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.95, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 583, 7} true;
  assume {:verifier.code 0} true;
  /* %859 = sext i32 %844 to i64, !dbg !1019, !verifier.code !62 */
  $i714 := $sext.i32.i64($i702);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 583, 9} true;
  assume {:verifier.code 0} true;
  /* %860 = srem i64 %859, 2147483648, !dbg !1020, !verifier.code !62 */
  $i715 := $srem.i64($i714, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 583, 7} true;
  assume {:verifier.code 0} true;
  /* %861 = trunc i64 %860 to i32, !dbg !1019, !verifier.code !62 */
  $i716 := $trunc.i64.i32($i715);
  /* call void @llvm.dbg.value(metadata i32 %861, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i716);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 584, 5} true;
  assume {:verifier.code 0} true;
  /* %862 = add nsw i32 %861, %861, !dbg !1021, !verifier.code !62 */
  $i717 := $add.i32($i716, $i716);
  /* call void @llvm.dbg.value(metadata i32 %862, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i717);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 585, 7} true;
  assume {:verifier.code 0} true;
  /* %863 = sext i32 %848 to i64, !dbg !1022, !verifier.code !62 */
  $i718 := $sext.i32.i64($i706);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 585, 9} true;
  assume {:verifier.code 0} true;
  /* %864 = srem i64 %863, 2147483648, !dbg !1023, !verifier.code !62 */
  $i719 := $srem.i64($i718, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 585, 7} true;
  assume {:verifier.code 0} true;
  /* %865 = trunc i64 %864 to i32, !dbg !1022, !verifier.code !62 */
  $i720 := $trunc.i64.i32($i719);
  /* call void @llvm.dbg.value(metadata i32 %865, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i720);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 586, 5} true;
  assume {:verifier.code 0} true;
  /* %866 = add nsw i32 %865, %865, !dbg !1024, !verifier.code !62 */
  $i721 := $add.i32($i720, $i720);
  /* call void @llvm.dbg.value(metadata i32 %866, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i721);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 588, 5} true;
  assume {:verifier.code 0} true;
  /* %867 = add nsw i32 %.95, %.95, !dbg !1025, !verifier.code !62 */
  $i722 := $add.i32($i709, $i709);
  /* call void @llvm.dbg.value(metadata i32 %867, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i722);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 589, 9} true;
  assume {:verifier.code 0} true;
  /* %868 = icmp slt i32 %862, 0, !dbg !1026, !verifier.code !62 */
  $i723 := $slt.i32($i717, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 589, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %868, label %869, label %876, !dbg !1028, !verifier.code !62 */
  $i724 := $i722;
  assume {:branchcond $i723} true;
  goto $bb433, $bb434;
$bb427:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 15} true;
  assume {:verifier.code 0} true;
  assume ($i710 == 1);
  goto $bb428;
$bb428:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 580, 9} true;
  assume {:verifier.code 0} true;
  /* %856 = add nsw i32 %849, 1, !dbg !1015, !verifier.code !62 */
  $i713 := $add.i32($i707, 1);
  /* call void @llvm.dbg.value(metadata i32 %856, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i713);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 581, 5} true;
  assume {:verifier.code 0} true;
  /* br label %857, !dbg !1017, !verifier.code !62 */
  $i712 := $i713;
  goto $bb432;
$bb429:
  assume !(($i710 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 20} true;
  assume {:verifier.code 0} true;
  /* %854 = icmp sgt i32 %848, 2147483647, !dbg !1013, !verifier.code !62 */
  $i711 := $sgt.i32($i706, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %854, label %855, label %857, !dbg !1014, !verifier.code !62 */
  $i712 := $i707;
  assume {:branchcond $i711} true;
  goto $bb430, $bb431;
$bb430:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 9} true;
  assume {:verifier.code 0} true;
  assume ($i711 == 1);
  goto $bb428;
$bb431:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i711 == 1));
  goto $bb432;
$bb432:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.94 = phi i32 [ %856, %855 ], [ %849, %853 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.94, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 582, 3} true;
  assume {:verifier.code 0} true;
  /* br label %858, !dbg !1018, !verifier.code !62 */
  $i709 := $i712;
  goto $bb426;
$bb433:
  assume ($i723 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 11} true;
  assume {:verifier.code 0} true;
  /* %870 = icmp slt i32 %866, 0, !dbg !1029, !verifier.code !62 */
  $i725 := $slt.i32($i721, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %870, label %873, label %871, !dbg !1032, !verifier.code !62 */
  assume {:branchcond $i725} true;
  goto $bb436, $bb438;
$bb434:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 589, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i723 == 1));
  goto $bb435;
$bb435:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.97 = phi i32 [ %.96, %875 ], [ %867, %858 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.97, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 594, 7} true;
  assume {:verifier.code 0} true;
  /* %877 = sext i32 %862 to i64, !dbg !1039, !verifier.code !62 */
  $i729 := $sext.i32.i64($i717);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 594, 9} true;
  assume {:verifier.code 0} true;
  /* %878 = srem i64 %877, 2147483648, !dbg !1040, !verifier.code !62 */
  $i730 := $srem.i64($i729, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 594, 7} true;
  assume {:verifier.code 0} true;
  /* %879 = trunc i64 %878 to i32, !dbg !1039, !verifier.code !62 */
  $i731 := $trunc.i64.i32($i730);
  /* call void @llvm.dbg.value(metadata i32 %879, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i731);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 595, 5} true;
  assume {:verifier.code 0} true;
  /* %880 = add nsw i32 %879, %879, !dbg !1041, !verifier.code !62 */
  $i732 := $add.i32($i731, $i731);
  /* call void @llvm.dbg.value(metadata i32 %880, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i732);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 596, 7} true;
  assume {:verifier.code 0} true;
  /* %881 = sext i32 %866 to i64, !dbg !1042, !verifier.code !62 */
  $i733 := $sext.i32.i64($i721);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 596, 9} true;
  assume {:verifier.code 0} true;
  /* %882 = srem i64 %881, 2147483648, !dbg !1043, !verifier.code !62 */
  $i734 := $srem.i64($i733, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 596, 7} true;
  assume {:verifier.code 0} true;
  /* %883 = trunc i64 %882 to i32, !dbg !1042, !verifier.code !62 */
  $i735 := $trunc.i64.i32($i734);
  /* call void @llvm.dbg.value(metadata i32 %883, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i735);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 597, 5} true;
  assume {:verifier.code 0} true;
  /* %884 = add nsw i32 %883, %883, !dbg !1044, !verifier.code !62 */
  $i736 := $add.i32($i735, $i735);
  /* call void @llvm.dbg.value(metadata i32 %884, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i736);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 599, 5} true;
  assume {:verifier.code 0} true;
  /* %885 = add nsw i32 %.97, %.97, !dbg !1045, !verifier.code !62 */
  $i737 := $add.i32($i724, $i724);
  /* call void @llvm.dbg.value(metadata i32 %885, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i737);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 9} true;
  assume {:verifier.code 0} true;
  /* %886 = icmp slt i32 %880, 0, !dbg !1046, !verifier.code !62 */
  $i738 := $slt.i32($i732, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %886, label %887, label %894, !dbg !1048, !verifier.code !62 */
  $i739 := $i737;
  assume {:branchcond $i738} true;
  goto $bb442, $bb443;
$bb436:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 15} true;
  assume {:verifier.code 0} true;
  assume ($i725 == 1);
  goto $bb437;
$bb437:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 591, 9} true;
  assume {:verifier.code 0} true;
  /* %874 = add nsw i32 %867, 1, !dbg !1035, !verifier.code !62 */
  $i728 := $add.i32($i722, 1);
  /* call void @llvm.dbg.value(metadata i32 %874, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i728);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 592, 5} true;
  assume {:verifier.code 0} true;
  /* br label %875, !dbg !1037, !verifier.code !62 */
  $i727 := $i728;
  goto $bb441;
$bb438:
  assume !(($i725 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 20} true;
  assume {:verifier.code 0} true;
  /* %872 = icmp sgt i32 %866, 2147483647, !dbg !1033, !verifier.code !62 */
  $i726 := $sgt.i32($i721, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %872, label %873, label %875, !dbg !1034, !verifier.code !62 */
  $i727 := $i722;
  assume {:branchcond $i726} true;
  goto $bb439, $bb440;
$bb439:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 9} true;
  assume {:verifier.code 0} true;
  assume ($i726 == 1);
  goto $bb437;
$bb440:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i726 == 1));
  goto $bb441;
$bb441:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.96 = phi i32 [ %874, %873 ], [ %867, %871 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.96, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 593, 3} true;
  assume {:verifier.code 0} true;
  /* br label %876, !dbg !1038, !verifier.code !62 */
  $i724 := $i727;
  goto $bb435;
$bb442:
  assume ($i738 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 11} true;
  assume {:verifier.code 0} true;
  /* %888 = icmp slt i32 %884, 0, !dbg !1049, !verifier.code !62 */
  $i740 := $slt.i32($i736, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %888, label %891, label %889, !dbg !1052, !verifier.code !62 */
  assume {:branchcond $i740} true;
  goto $bb445, $bb447;
$bb443:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i738 == 1));
  goto $bb444;
$bb444:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.99 = phi i32 [ %.98, %893 ], [ %885, %876 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.99, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 605, 7} true;
  assume {:verifier.code 0} true;
  /* %895 = sext i32 %880 to i64, !dbg !1059, !verifier.code !62 */
  $i744 := $sext.i32.i64($i732);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 605, 9} true;
  assume {:verifier.code 0} true;
  /* %896 = srem i64 %895, 2147483648, !dbg !1060, !verifier.code !62 */
  $i745 := $srem.i64($i744, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 605, 7} true;
  assume {:verifier.code 0} true;
  /* %897 = trunc i64 %896 to i32, !dbg !1059, !verifier.code !62 */
  $i746 := $trunc.i64.i32($i745);
  /* call void @llvm.dbg.value(metadata i32 %897, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i746);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 606, 5} true;
  assume {:verifier.code 0} true;
  /* %898 = add nsw i32 %897, %897, !dbg !1061, !verifier.code !62 */
  $i747 := $add.i32($i746, $i746);
  /* call void @llvm.dbg.value(metadata i32 %898, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i747);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 607, 7} true;
  assume {:verifier.code 0} true;
  /* %899 = sext i32 %884 to i64, !dbg !1062, !verifier.code !62 */
  $i748 := $sext.i32.i64($i736);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 607, 9} true;
  assume {:verifier.code 0} true;
  /* %900 = srem i64 %899, 2147483648, !dbg !1063, !verifier.code !62 */
  $i749 := $srem.i64($i748, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 607, 7} true;
  assume {:verifier.code 0} true;
  /* %901 = trunc i64 %900 to i32, !dbg !1062, !verifier.code !62 */
  $i750 := $trunc.i64.i32($i749);
  /* call void @llvm.dbg.value(metadata i32 %901, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i750);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 608, 5} true;
  assume {:verifier.code 0} true;
  /* %902 = add nsw i32 %901, %901, !dbg !1064, !verifier.code !62 */
  $i751 := $add.i32($i750, $i750);
  /* call void @llvm.dbg.value(metadata i32 %902, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i751);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 610, 5} true;
  assume {:verifier.code 0} true;
  /* %903 = add nsw i32 %.99, %.99, !dbg !1065, !verifier.code !62 */
  $i752 := $add.i32($i739, $i739);
  /* call void @llvm.dbg.value(metadata i32 %903, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i752);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 611, 9} true;
  assume {:verifier.code 0} true;
  /* %904 = icmp slt i32 %898, 0, !dbg !1066, !verifier.code !62 */
  $i753 := $slt.i32($i747, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 611, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %904, label %905, label %912, !dbg !1068, !verifier.code !62 */
  $i754 := $i752;
  assume {:branchcond $i753} true;
  goto $bb451, $bb452;
$bb445:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 15} true;
  assume {:verifier.code 0} true;
  assume ($i740 == 1);
  goto $bb446;
$bb446:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 602, 9} true;
  assume {:verifier.code 0} true;
  /* %892 = add nsw i32 %885, 1, !dbg !1055, !verifier.code !62 */
  $i743 := $add.i32($i737, 1);
  /* call void @llvm.dbg.value(metadata i32 %892, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i743);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 603, 5} true;
  assume {:verifier.code 0} true;
  /* br label %893, !dbg !1057, !verifier.code !62 */
  $i742 := $i743;
  goto $bb450;
$bb447:
  assume !(($i740 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 20} true;
  assume {:verifier.code 0} true;
  /* %890 = icmp sgt i32 %884, 2147483647, !dbg !1053, !verifier.code !62 */
  $i741 := $sgt.i32($i736, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %890, label %891, label %893, !dbg !1054, !verifier.code !62 */
  $i742 := $i737;
  assume {:branchcond $i741} true;
  goto $bb448, $bb449;
$bb448:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 9} true;
  assume {:verifier.code 0} true;
  assume ($i741 == 1);
  goto $bb446;
$bb449:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i741 == 1));
  goto $bb450;
$bb450:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.98 = phi i32 [ %892, %891 ], [ %885, %889 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.98, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 604, 3} true;
  assume {:verifier.code 0} true;
  /* br label %894, !dbg !1058, !verifier.code !62 */
  $i739 := $i742;
  goto $bb444;
$bb451:
  assume ($i753 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 11} true;
  assume {:verifier.code 0} true;
  /* %906 = icmp slt i32 %902, 0, !dbg !1069, !verifier.code !62 */
  $i755 := $slt.i32($i751, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %906, label %909, label %907, !dbg !1072, !verifier.code !62 */
  assume {:branchcond $i755} true;
  goto $bb454, $bb456;
$bb452:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 611, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i753 == 1));
  goto $bb453;
$bb453:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.101 = phi i32 [ %.100, %911 ], [ %903, %894 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.101, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 616, 7} true;
  assume {:verifier.code 0} true;
  /* %913 = sext i32 %898 to i64, !dbg !1079, !verifier.code !62 */
  $i759 := $sext.i32.i64($i747);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 616, 9} true;
  assume {:verifier.code 0} true;
  /* %914 = srem i64 %913, 2147483648, !dbg !1080, !verifier.code !62 */
  $i760 := $srem.i64($i759, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 616, 7} true;
  assume {:verifier.code 0} true;
  /* %915 = trunc i64 %914 to i32, !dbg !1079, !verifier.code !62 */
  $i761 := $trunc.i64.i32($i760);
  /* call void @llvm.dbg.value(metadata i32 %915, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i761);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 617, 5} true;
  assume {:verifier.code 0} true;
  /* %916 = add nsw i32 %915, %915, !dbg !1081, !verifier.code !62 */
  $i762 := $add.i32($i761, $i761);
  /* call void @llvm.dbg.value(metadata i32 %916, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i762);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 618, 7} true;
  assume {:verifier.code 0} true;
  /* %917 = sext i32 %902 to i64, !dbg !1082, !verifier.code !62 */
  $i763 := $sext.i32.i64($i751);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 618, 9} true;
  assume {:verifier.code 0} true;
  /* %918 = srem i64 %917, 2147483648, !dbg !1083, !verifier.code !62 */
  $i764 := $srem.i64($i763, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 618, 7} true;
  assume {:verifier.code 0} true;
  /* %919 = trunc i64 %918 to i32, !dbg !1082, !verifier.code !62 */
  $i765 := $trunc.i64.i32($i764);
  /* call void @llvm.dbg.value(metadata i32 %919, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i765);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 619, 5} true;
  assume {:verifier.code 0} true;
  /* %920 = add nsw i32 %919, %919, !dbg !1084, !verifier.code !62 */
  $i766 := $add.i32($i765, $i765);
  /* call void @llvm.dbg.value(metadata i32 %920, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i766);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 621, 5} true;
  assume {:verifier.code 0} true;
  /* %921 = add nsw i32 %.101, %.101, !dbg !1085, !verifier.code !62 */
  $i767 := $add.i32($i754, $i754);
  /* call void @llvm.dbg.value(metadata i32 %921, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 9} true;
  assume {:verifier.code 0} true;
  /* %922 = icmp slt i32 %916, 0, !dbg !1086, !verifier.code !62 */
  $i768 := $slt.i32($i762, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %922, label %923, label %930, !dbg !1088, !verifier.code !62 */
  $i769 := $i767;
  assume {:branchcond $i768} true;
  goto $bb460, $bb461;
$bb454:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 15} true;
  assume {:verifier.code 0} true;
  assume ($i755 == 1);
  goto $bb455;
$bb455:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 613, 9} true;
  assume {:verifier.code 0} true;
  /* %910 = add nsw i32 %903, 1, !dbg !1075, !verifier.code !62 */
  $i758 := $add.i32($i752, 1);
  /* call void @llvm.dbg.value(metadata i32 %910, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i758);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 614, 5} true;
  assume {:verifier.code 0} true;
  /* br label %911, !dbg !1077, !verifier.code !62 */
  $i757 := $i758;
  goto $bb459;
$bb456:
  assume !(($i755 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 20} true;
  assume {:verifier.code 0} true;
  /* %908 = icmp sgt i32 %902, 2147483647, !dbg !1073, !verifier.code !62 */
  $i756 := $sgt.i32($i751, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %908, label %909, label %911, !dbg !1074, !verifier.code !62 */
  $i757 := $i752;
  assume {:branchcond $i756} true;
  goto $bb457, $bb458;
$bb457:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 9} true;
  assume {:verifier.code 0} true;
  assume ($i756 == 1);
  goto $bb455;
$bb458:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i756 == 1));
  goto $bb459;
$bb459:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.100 = phi i32 [ %910, %909 ], [ %903, %907 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.100, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 615, 3} true;
  assume {:verifier.code 0} true;
  /* br label %912, !dbg !1078, !verifier.code !62 */
  $i754 := $i757;
  goto $bb453;
$bb460:
  assume ($i768 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 11} true;
  assume {:verifier.code 0} true;
  /* %924 = icmp slt i32 %920, 0, !dbg !1089, !verifier.code !62 */
  $i770 := $slt.i32($i766, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %924, label %927, label %925, !dbg !1092, !verifier.code !62 */
  assume {:branchcond $i770} true;
  goto $bb463, $bb465;
$bb461:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i768 == 1));
  goto $bb462;
$bb462:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.103 = phi i32 [ %.102, %929 ], [ %921, %912 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.103, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 627, 7} true;
  assume {:verifier.code 0} true;
  /* %931 = sext i32 %916 to i64, !dbg !1099, !verifier.code !62 */
  $i774 := $sext.i32.i64($i762);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 627, 9} true;
  assume {:verifier.code 0} true;
  /* %932 = srem i64 %931, 2147483648, !dbg !1100, !verifier.code !62 */
  $i775 := $srem.i64($i774, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 627, 7} true;
  assume {:verifier.code 0} true;
  /* %933 = trunc i64 %932 to i32, !dbg !1099, !verifier.code !62 */
  $i776 := $trunc.i64.i32($i775);
  /* call void @llvm.dbg.value(metadata i32 %933, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i776);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 628, 5} true;
  assume {:verifier.code 0} true;
  /* %934 = add nsw i32 %933, %933, !dbg !1101, !verifier.code !62 */
  $i777 := $add.i32($i776, $i776);
  /* call void @llvm.dbg.value(metadata i32 %934, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i777);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 629, 7} true;
  assume {:verifier.code 0} true;
  /* %935 = sext i32 %920 to i64, !dbg !1102, !verifier.code !62 */
  $i778 := $sext.i32.i64($i766);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 629, 9} true;
  assume {:verifier.code 0} true;
  /* %936 = srem i64 %935, 2147483648, !dbg !1103, !verifier.code !62 */
  $i779 := $srem.i64($i778, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 629, 7} true;
  assume {:verifier.code 0} true;
  /* %937 = trunc i64 %936 to i32, !dbg !1102, !verifier.code !62 */
  $i780 := $trunc.i64.i32($i779);
  /* call void @llvm.dbg.value(metadata i32 %937, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i780);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 630, 5} true;
  assume {:verifier.code 0} true;
  /* %938 = add nsw i32 %937, %937, !dbg !1104, !verifier.code !62 */
  $i781 := $add.i32($i780, $i780);
  /* call void @llvm.dbg.value(metadata i32 %938, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i781);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 632, 5} true;
  assume {:verifier.code 0} true;
  /* %939 = add nsw i32 %.103, %.103, !dbg !1105, !verifier.code !62 */
  $i782 := $add.i32($i769, $i769);
  /* call void @llvm.dbg.value(metadata i32 %939, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i782);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 633, 9} true;
  assume {:verifier.code 0} true;
  /* %940 = icmp slt i32 %934, 0, !dbg !1106, !verifier.code !62 */
  $i783 := $slt.i32($i777, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 633, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %940, label %941, label %948, !dbg !1108, !verifier.code !62 */
  $i784 := $i782;
  assume {:branchcond $i783} true;
  goto $bb469, $bb470;
$bb463:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 15} true;
  assume {:verifier.code 0} true;
  assume ($i770 == 1);
  goto $bb464;
$bb464:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 624, 9} true;
  assume {:verifier.code 0} true;
  /* %928 = add nsw i32 %921, 1, !dbg !1095, !verifier.code !62 */
  $i773 := $add.i32($i767, 1);
  /* call void @llvm.dbg.value(metadata i32 %928, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i773);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 625, 5} true;
  assume {:verifier.code 0} true;
  /* br label %929, !dbg !1097, !verifier.code !62 */
  $i772 := $i773;
  goto $bb468;
$bb465:
  assume !(($i770 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 20} true;
  assume {:verifier.code 0} true;
  /* %926 = icmp sgt i32 %920, 2147483647, !dbg !1093, !verifier.code !62 */
  $i771 := $sgt.i32($i766, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %926, label %927, label %929, !dbg !1094, !verifier.code !62 */
  $i772 := $i767;
  assume {:branchcond $i771} true;
  goto $bb466, $bb467;
$bb466:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 9} true;
  assume {:verifier.code 0} true;
  assume ($i771 == 1);
  goto $bb464;
$bb467:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i771 == 1));
  goto $bb468;
$bb468:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.102 = phi i32 [ %928, %927 ], [ %921, %925 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.102, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 626, 3} true;
  assume {:verifier.code 0} true;
  /* br label %930, !dbg !1098, !verifier.code !62 */
  $i769 := $i772;
  goto $bb462;
$bb469:
  assume ($i783 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 11} true;
  assume {:verifier.code 0} true;
  /* %942 = icmp slt i32 %938, 0, !dbg !1109, !verifier.code !62 */
  $i785 := $slt.i32($i781, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %942, label %945, label %943, !dbg !1112, !verifier.code !62 */
  assume {:branchcond $i785} true;
  goto $bb472, $bb474;
$bb470:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 633, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i783 == 1));
  goto $bb471;
$bb471:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.105 = phi i32 [ %.104, %947 ], [ %939, %930 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.105, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 638, 7} true;
  assume {:verifier.code 0} true;
  /* %949 = sext i32 %934 to i64, !dbg !1119, !verifier.code !62 */
  $i789 := $sext.i32.i64($i777);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 638, 9} true;
  assume {:verifier.code 0} true;
  /* %950 = srem i64 %949, 2147483648, !dbg !1120, !verifier.code !62 */
  $i790 := $srem.i64($i789, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 638, 7} true;
  assume {:verifier.code 0} true;
  /* %951 = trunc i64 %950 to i32, !dbg !1119, !verifier.code !62 */
  $i791 := $trunc.i64.i32($i790);
  /* call void @llvm.dbg.value(metadata i32 %951, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i791);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 639, 5} true;
  assume {:verifier.code 0} true;
  /* %952 = add nsw i32 %951, %951, !dbg !1121, !verifier.code !62 */
  $i792 := $add.i32($i791, $i791);
  /* call void @llvm.dbg.value(metadata i32 %952, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i792);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 640, 7} true;
  assume {:verifier.code 0} true;
  /* %953 = sext i32 %938 to i64, !dbg !1122, !verifier.code !62 */
  $i793 := $sext.i32.i64($i781);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 640, 9} true;
  assume {:verifier.code 0} true;
  /* %954 = srem i64 %953, 2147483648, !dbg !1123, !verifier.code !62 */
  $i794 := $srem.i64($i793, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 640, 7} true;
  assume {:verifier.code 0} true;
  /* %955 = trunc i64 %954 to i32, !dbg !1122, !verifier.code !62 */
  $i795 := $trunc.i64.i32($i794);
  /* call void @llvm.dbg.value(metadata i32 %955, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i795);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 641, 5} true;
  assume {:verifier.code 0} true;
  /* %956 = add nsw i32 %955, %955, !dbg !1124, !verifier.code !62 */
  $i796 := $add.i32($i795, $i795);
  /* call void @llvm.dbg.value(metadata i32 %956, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i796);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 643, 5} true;
  assume {:verifier.code 0} true;
  /* %957 = add nsw i32 %.105, %.105, !dbg !1125, !verifier.code !62 */
  $i797 := $add.i32($i784, $i784);
  /* call void @llvm.dbg.value(metadata i32 %957, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i797);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 9} true;
  assume {:verifier.code 0} true;
  /* %958 = icmp slt i32 %952, 0, !dbg !1126, !verifier.code !62 */
  $i798 := $slt.i32($i792, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %958, label %959, label %966, !dbg !1128, !verifier.code !62 */
  $i799 := $i797;
  assume {:branchcond $i798} true;
  goto $bb478, $bb479;
$bb472:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 15} true;
  assume {:verifier.code 0} true;
  assume ($i785 == 1);
  goto $bb473;
$bb473:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 635, 9} true;
  assume {:verifier.code 0} true;
  /* %946 = add nsw i32 %939, 1, !dbg !1115, !verifier.code !62 */
  $i788 := $add.i32($i782, 1);
  /* call void @llvm.dbg.value(metadata i32 %946, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i788);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 636, 5} true;
  assume {:verifier.code 0} true;
  /* br label %947, !dbg !1117, !verifier.code !62 */
  $i787 := $i788;
  goto $bb477;
$bb474:
  assume !(($i785 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 20} true;
  assume {:verifier.code 0} true;
  /* %944 = icmp sgt i32 %938, 2147483647, !dbg !1113, !verifier.code !62 */
  $i786 := $sgt.i32($i781, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %944, label %945, label %947, !dbg !1114, !verifier.code !62 */
  $i787 := $i782;
  assume {:branchcond $i786} true;
  goto $bb475, $bb476;
$bb475:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 9} true;
  assume {:verifier.code 0} true;
  assume ($i786 == 1);
  goto $bb473;
$bb476:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i786 == 1));
  goto $bb477;
$bb477:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.104 = phi i32 [ %946, %945 ], [ %939, %943 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.104, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 637, 3} true;
  assume {:verifier.code 0} true;
  /* br label %948, !dbg !1118, !verifier.code !62 */
  $i784 := $i787;
  goto $bb471;
$bb478:
  assume ($i798 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 11} true;
  assume {:verifier.code 0} true;
  /* %960 = icmp slt i32 %956, 0, !dbg !1129, !verifier.code !62 */
  $i800 := $slt.i32($i796, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %960, label %963, label %961, !dbg !1132, !verifier.code !62 */
  assume {:branchcond $i800} true;
  goto $bb481, $bb483;
$bb479:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i798 == 1));
  goto $bb480;
$bb480:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.107 = phi i32 [ %.106, %965 ], [ %957, %948 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.107, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 649, 7} true;
  assume {:verifier.code 0} true;
  /* %967 = sext i32 %952 to i64, !dbg !1139, !verifier.code !62 */
  $i804 := $sext.i32.i64($i792);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 649, 9} true;
  assume {:verifier.code 0} true;
  /* %968 = srem i64 %967, 2147483648, !dbg !1140, !verifier.code !62 */
  $i805 := $srem.i64($i804, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 649, 7} true;
  assume {:verifier.code 0} true;
  /* %969 = trunc i64 %968 to i32, !dbg !1139, !verifier.code !62 */
  $i806 := $trunc.i64.i32($i805);
  /* call void @llvm.dbg.value(metadata i32 %969, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i806);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 650, 5} true;
  assume {:verifier.code 0} true;
  /* %970 = add nsw i32 %969, %969, !dbg !1141, !verifier.code !62 */
  $i807 := $add.i32($i806, $i806);
  /* call void @llvm.dbg.value(metadata i32 %970, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i807);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 651, 7} true;
  assume {:verifier.code 0} true;
  /* %971 = sext i32 %956 to i64, !dbg !1142, !verifier.code !62 */
  $i808 := $sext.i32.i64($i796);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 651, 9} true;
  assume {:verifier.code 0} true;
  /* %972 = srem i64 %971, 2147483648, !dbg !1143, !verifier.code !62 */
  $i809 := $srem.i64($i808, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 651, 7} true;
  assume {:verifier.code 0} true;
  /* %973 = trunc i64 %972 to i32, !dbg !1142, !verifier.code !62 */
  $i810 := $trunc.i64.i32($i809);
  /* call void @llvm.dbg.value(metadata i32 %973, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i810);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 652, 5} true;
  assume {:verifier.code 0} true;
  /* %974 = add nsw i32 %973, %973, !dbg !1144, !verifier.code !62 */
  $i811 := $add.i32($i810, $i810);
  /* call void @llvm.dbg.value(metadata i32 %974, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i811);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 654, 5} true;
  assume {:verifier.code 0} true;
  /* %975 = add nsw i32 %.107, %.107, !dbg !1145, !verifier.code !62 */
  $i812 := $add.i32($i799, $i799);
  /* call void @llvm.dbg.value(metadata i32 %975, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i812);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 655, 9} true;
  assume {:verifier.code 0} true;
  /* %976 = icmp slt i32 %970, 0, !dbg !1146, !verifier.code !62 */
  $i813 := $slt.i32($i807, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 655, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %976, label %977, label %984, !dbg !1148, !verifier.code !62 */
  $i814 := $i812;
  assume {:branchcond $i813} true;
  goto $bb487, $bb488;
$bb481:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 15} true;
  assume {:verifier.code 0} true;
  assume ($i800 == 1);
  goto $bb482;
$bb482:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 646, 9} true;
  assume {:verifier.code 0} true;
  /* %964 = add nsw i32 %957, 1, !dbg !1135, !verifier.code !62 */
  $i803 := $add.i32($i797, 1);
  /* call void @llvm.dbg.value(metadata i32 %964, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i803);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 647, 5} true;
  assume {:verifier.code 0} true;
  /* br label %965, !dbg !1137, !verifier.code !62 */
  $i802 := $i803;
  goto $bb486;
$bb483:
  assume !(($i800 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 20} true;
  assume {:verifier.code 0} true;
  /* %962 = icmp sgt i32 %956, 2147483647, !dbg !1133, !verifier.code !62 */
  $i801 := $sgt.i32($i796, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %962, label %963, label %965, !dbg !1134, !verifier.code !62 */
  $i802 := $i797;
  assume {:branchcond $i801} true;
  goto $bb484, $bb485;
$bb484:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 9} true;
  assume {:verifier.code 0} true;
  assume ($i801 == 1);
  goto $bb482;
$bb485:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i801 == 1));
  goto $bb486;
$bb486:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.106 = phi i32 [ %964, %963 ], [ %957, %961 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.106, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 648, 3} true;
  assume {:verifier.code 0} true;
  /* br label %966, !dbg !1138, !verifier.code !62 */
  $i799 := $i802;
  goto $bb480;
$bb487:
  assume ($i813 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 11} true;
  assume {:verifier.code 0} true;
  /* %978 = icmp slt i32 %974, 0, !dbg !1149, !verifier.code !62 */
  $i815 := $slt.i32($i811, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %978, label %981, label %979, !dbg !1152, !verifier.code !62 */
  assume {:branchcond $i815} true;
  goto $bb490, $bb492;
$bb488:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 655, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i813 == 1));
  goto $bb489;
$bb489:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.109 = phi i32 [ %.108, %983 ], [ %975, %966 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.109, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 660, 7} true;
  assume {:verifier.code 0} true;
  /* %985 = sext i32 %970 to i64, !dbg !1159, !verifier.code !62 */
  $i819 := $sext.i32.i64($i807);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 660, 9} true;
  assume {:verifier.code 0} true;
  /* %986 = srem i64 %985, 2147483648, !dbg !1160, !verifier.code !62 */
  $i820 := $srem.i64($i819, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 660, 7} true;
  assume {:verifier.code 0} true;
  /* %987 = trunc i64 %986 to i32, !dbg !1159, !verifier.code !62 */
  $i821 := $trunc.i64.i32($i820);
  /* call void @llvm.dbg.value(metadata i32 %987, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i821);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 661, 5} true;
  assume {:verifier.code 0} true;
  /* %988 = add nsw i32 %987, %987, !dbg !1161, !verifier.code !62 */
  $i822 := $add.i32($i821, $i821);
  /* call void @llvm.dbg.value(metadata i32 %988, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i822);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 662, 7} true;
  assume {:verifier.code 0} true;
  /* %989 = sext i32 %974 to i64, !dbg !1162, !verifier.code !62 */
  $i823 := $sext.i32.i64($i811);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 662, 9} true;
  assume {:verifier.code 0} true;
  /* %990 = srem i64 %989, 2147483648, !dbg !1163, !verifier.code !62 */
  $i824 := $srem.i64($i823, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 662, 7} true;
  assume {:verifier.code 0} true;
  /* %991 = trunc i64 %990 to i32, !dbg !1162, !verifier.code !62 */
  $i825 := $trunc.i64.i32($i824);
  /* call void @llvm.dbg.value(metadata i32 %991, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i825);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 663, 5} true;
  assume {:verifier.code 0} true;
  /* %992 = add nsw i32 %991, %991, !dbg !1164, !verifier.code !62 */
  $i826 := $add.i32($i825, $i825);
  /* call void @llvm.dbg.value(metadata i32 %992, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i826);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 665, 5} true;
  assume {:verifier.code 0} true;
  /* %993 = add nsw i32 %.109, %.109, !dbg !1165, !verifier.code !62 */
  $i827 := $add.i32($i814, $i814);
  /* call void @llvm.dbg.value(metadata i32 %993, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i827);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 9} true;
  assume {:verifier.code 0} true;
  /* %994 = icmp slt i32 %988, 0, !dbg !1166, !verifier.code !62 */
  $i828 := $slt.i32($i822, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %994, label %995, label %1002, !dbg !1168, !verifier.code !62 */
  $i829 := $i827;
  assume {:branchcond $i828} true;
  goto $bb496, $bb497;
$bb490:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 15} true;
  assume {:verifier.code 0} true;
  assume ($i815 == 1);
  goto $bb491;
$bb491:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 657, 9} true;
  assume {:verifier.code 0} true;
  /* %982 = add nsw i32 %975, 1, !dbg !1155, !verifier.code !62 */
  $i818 := $add.i32($i812, 1);
  /* call void @llvm.dbg.value(metadata i32 %982, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i818);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 658, 5} true;
  assume {:verifier.code 0} true;
  /* br label %983, !dbg !1157, !verifier.code !62 */
  $i817 := $i818;
  goto $bb495;
$bb492:
  assume !(($i815 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 20} true;
  assume {:verifier.code 0} true;
  /* %980 = icmp sgt i32 %974, 2147483647, !dbg !1153, !verifier.code !62 */
  $i816 := $sgt.i32($i811, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %980, label %981, label %983, !dbg !1154, !verifier.code !62 */
  $i817 := $i812;
  assume {:branchcond $i816} true;
  goto $bb493, $bb494;
$bb493:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 9} true;
  assume {:verifier.code 0} true;
  assume ($i816 == 1);
  goto $bb491;
$bb494:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i816 == 1));
  goto $bb495;
$bb495:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.108 = phi i32 [ %982, %981 ], [ %975, %979 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.108, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 659, 3} true;
  assume {:verifier.code 0} true;
  /* br label %984, !dbg !1158, !verifier.code !62 */
  $i814 := $i817;
  goto $bb489;
$bb496:
  assume ($i828 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 11} true;
  assume {:verifier.code 0} true;
  /* %996 = icmp slt i32 %992, 0, !dbg !1169, !verifier.code !62 */
  $i830 := $slt.i32($i826, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %996, label %999, label %997, !dbg !1172, !verifier.code !62 */
  assume {:branchcond $i830} true;
  goto $bb499, $bb501;
$bb497:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i828 == 1));
  goto $bb498;
$bb498:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.111 = phi i32 [ %.110, %1001 ], [ %993, %984 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.111, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 671, 7} true;
  assume {:verifier.code 0} true;
  /* %1003 = sext i32 %988 to i64, !dbg !1179, !verifier.code !62 */
  $i834 := $sext.i32.i64($i822);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 671, 9} true;
  assume {:verifier.code 0} true;
  /* %1004 = srem i64 %1003, 2147483648, !dbg !1180, !verifier.code !62 */
  $i835 := $srem.i64($i834, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 671, 7} true;
  assume {:verifier.code 0} true;
  /* %1005 = trunc i64 %1004 to i32, !dbg !1179, !verifier.code !62 */
  $i836 := $trunc.i64.i32($i835);
  /* call void @llvm.dbg.value(metadata i32 %1005, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i836);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 672, 5} true;
  assume {:verifier.code 0} true;
  /* %1006 = add nsw i32 %1005, %1005, !dbg !1181, !verifier.code !62 */
  $i837 := $add.i32($i836, $i836);
  /* call void @llvm.dbg.value(metadata i32 %1006, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i837);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 673, 7} true;
  assume {:verifier.code 0} true;
  /* %1007 = sext i32 %992 to i64, !dbg !1182, !verifier.code !62 */
  $i838 := $sext.i32.i64($i826);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 673, 9} true;
  assume {:verifier.code 0} true;
  /* %1008 = srem i64 %1007, 2147483648, !dbg !1183, !verifier.code !62 */
  $i839 := $srem.i64($i838, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 673, 7} true;
  assume {:verifier.code 0} true;
  /* %1009 = trunc i64 %1008 to i32, !dbg !1182, !verifier.code !62 */
  $i840 := $trunc.i64.i32($i839);
  /* call void @llvm.dbg.value(metadata i32 %1009, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i840);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 674, 5} true;
  assume {:verifier.code 0} true;
  /* %1010 = add nsw i32 %1009, %1009, !dbg !1184, !verifier.code !62 */
  $i841 := $add.i32($i840, $i840);
  /* call void @llvm.dbg.value(metadata i32 %1010, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i841);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 676, 5} true;
  assume {:verifier.code 0} true;
  /* %1011 = add nsw i32 %.111, %.111, !dbg !1185, !verifier.code !62 */
  $i842 := $add.i32($i829, $i829);
  /* call void @llvm.dbg.value(metadata i32 %1011, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i842);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 677, 9} true;
  assume {:verifier.code 0} true;
  /* %1012 = icmp slt i32 %1006, 0, !dbg !1186, !verifier.code !62 */
  $i843 := $slt.i32($i837, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 677, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %1012, label %1013, label %1020, !dbg !1188, !verifier.code !62 */
  $i844 := $i842;
  assume {:branchcond $i843} true;
  goto $bb505, $bb506;
$bb499:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 15} true;
  assume {:verifier.code 0} true;
  assume ($i830 == 1);
  goto $bb500;
$bb500:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 668, 9} true;
  assume {:verifier.code 0} true;
  /* %1000 = add nsw i32 %993, 1, !dbg !1175, !verifier.code !62 */
  $i833 := $add.i32($i827, 1);
  /* call void @llvm.dbg.value(metadata i32 %1000, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i833);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 669, 5} true;
  assume {:verifier.code 0} true;
  /* br label %1001, !dbg !1177, !verifier.code !62 */
  $i832 := $i833;
  goto $bb504;
$bb501:
  assume !(($i830 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 20} true;
  assume {:verifier.code 0} true;
  /* %998 = icmp sgt i32 %992, 2147483647, !dbg !1173, !verifier.code !62 */
  $i831 := $sgt.i32($i826, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %998, label %999, label %1001, !dbg !1174, !verifier.code !62 */
  $i832 := $i827;
  assume {:branchcond $i831} true;
  goto $bb502, $bb503;
$bb502:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 9} true;
  assume {:verifier.code 0} true;
  assume ($i831 == 1);
  goto $bb500;
$bb503:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i831 == 1));
  goto $bb504;
$bb504:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.110 = phi i32 [ %1000, %999 ], [ %993, %997 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.110, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 670, 3} true;
  assume {:verifier.code 0} true;
  /* br label %1002, !dbg !1178, !verifier.code !62 */
  $i829 := $i832;
  goto $bb498;
$bb505:
  assume ($i843 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 11} true;
  assume {:verifier.code 0} true;
  /* %1014 = icmp slt i32 %1010, 0, !dbg !1189, !verifier.code !62 */
  $i845 := $slt.i32($i841, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %1014, label %1017, label %1015, !dbg !1192, !verifier.code !62 */
  assume {:branchcond $i845} true;
  goto $bb508, $bb510;
$bb506:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 677, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i843 == 1));
  goto $bb507;
$bb507:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.113 = phi i32 [ %.112, %1019 ], [ %1011, %1002 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.113, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 682, 7} true;
  assume {:verifier.code 0} true;
  /* %1021 = sext i32 %1006 to i64, !dbg !1199, !verifier.code !62 */
  $i849 := $sext.i32.i64($i837);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 682, 9} true;
  assume {:verifier.code 0} true;
  /* %1022 = srem i64 %1021, 2147483648, !dbg !1200, !verifier.code !62 */
  $i850 := $srem.i64($i849, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 682, 7} true;
  assume {:verifier.code 0} true;
  /* %1023 = trunc i64 %1022 to i32, !dbg !1199, !verifier.code !62 */
  $i851 := $trunc.i64.i32($i850);
  /* call void @llvm.dbg.value(metadata i32 %1023, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i851);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 683, 5} true;
  assume {:verifier.code 0} true;
  /* %1024 = add nsw i32 %1023, %1023, !dbg !1201, !verifier.code !62 */
  $i852 := $add.i32($i851, $i851);
  /* call void @llvm.dbg.value(metadata i32 %1024, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i852);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 684, 7} true;
  assume {:verifier.code 0} true;
  /* %1025 = sext i32 %1010 to i64, !dbg !1202, !verifier.code !62 */
  $i853 := $sext.i32.i64($i841);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 684, 9} true;
  assume {:verifier.code 0} true;
  /* %1026 = srem i64 %1025, 2147483648, !dbg !1203, !verifier.code !62 */
  $i854 := $srem.i64($i853, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 684, 7} true;
  assume {:verifier.code 0} true;
  /* %1027 = trunc i64 %1026 to i32, !dbg !1202, !verifier.code !62 */
  $i855 := $trunc.i64.i32($i854);
  /* call void @llvm.dbg.value(metadata i32 %1027, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i855);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 685, 5} true;
  assume {:verifier.code 0} true;
  /* %1028 = add nsw i32 %1027, %1027, !dbg !1204, !verifier.code !62 */
  $i856 := $add.i32($i855, $i855);
  /* call void @llvm.dbg.value(metadata i32 %1028, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i856);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 687, 5} true;
  assume {:verifier.code 0} true;
  /* %1029 = add nsw i32 %.113, %.113, !dbg !1205, !verifier.code !62 */
  $i857 := $add.i32($i844, $i844);
  /* call void @llvm.dbg.value(metadata i32 %1029, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i857);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 9} true;
  assume {:verifier.code 0} true;
  /* %1030 = icmp slt i32 %1024, 0, !dbg !1206, !verifier.code !62 */
  $i858 := $slt.i32($i852, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %1030, label %1031, label %1038, !dbg !1208, !verifier.code !62 */
  $i859 := $i857;
  assume {:branchcond $i858} true;
  goto $bb514, $bb515;
$bb508:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 15} true;
  assume {:verifier.code 0} true;
  assume ($i845 == 1);
  goto $bb509;
$bb509:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 679, 9} true;
  assume {:verifier.code 0} true;
  /* %1018 = add nsw i32 %1011, 1, !dbg !1195, !verifier.code !62 */
  $i848 := $add.i32($i842, 1);
  /* call void @llvm.dbg.value(metadata i32 %1018, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i848);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 680, 5} true;
  assume {:verifier.code 0} true;
  /* br label %1019, !dbg !1197, !verifier.code !62 */
  $i847 := $i848;
  goto $bb513;
$bb510:
  assume !(($i845 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 20} true;
  assume {:verifier.code 0} true;
  /* %1016 = icmp sgt i32 %1010, 2147483647, !dbg !1193, !verifier.code !62 */
  $i846 := $sgt.i32($i841, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %1016, label %1017, label %1019, !dbg !1194, !verifier.code !62 */
  $i847 := $i842;
  assume {:branchcond $i846} true;
  goto $bb511, $bb512;
$bb511:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 9} true;
  assume {:verifier.code 0} true;
  assume ($i846 == 1);
  goto $bb509;
$bb512:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i846 == 1));
  goto $bb513;
$bb513:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.112 = phi i32 [ %1018, %1017 ], [ %1011, %1015 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.112, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 681, 3} true;
  assume {:verifier.code 0} true;
  /* br label %1020, !dbg !1198, !verifier.code !62 */
  $i844 := $i847;
  goto $bb507;
$bb514:
  assume ($i858 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 11} true;
  assume {:verifier.code 0} true;
  /* %1032 = icmp slt i32 %1028, 0, !dbg !1209, !verifier.code !62 */
  $i860 := $slt.i32($i856, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %1032, label %1035, label %1033, !dbg !1212, !verifier.code !62 */
  assume {:branchcond $i860} true;
  goto $bb517, $bb519;
$bb515:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i858 == 1));
  goto $bb516;
$bb516:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.115 = phi i32 [ %.114, %1037 ], [ %1029, %1020 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.115, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 693, 7} true;
  assume {:verifier.code 0} true;
  /* %1039 = sext i32 %1024 to i64, !dbg !1219, !verifier.code !62 */
  $i864 := $sext.i32.i64($i852);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 693, 9} true;
  assume {:verifier.code 0} true;
  /* %1040 = srem i64 %1039, 2147483648, !dbg !1220, !verifier.code !62 */
  $i865 := $srem.i64($i864, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 693, 7} true;
  assume {:verifier.code 0} true;
  /* %1041 = trunc i64 %1040 to i32, !dbg !1219, !verifier.code !62 */
  $i866 := $trunc.i64.i32($i865);
  /* call void @llvm.dbg.value(metadata i32 %1041, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i866);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 694, 5} true;
  assume {:verifier.code 0} true;
  /* %1042 = add nsw i32 %1041, %1041, !dbg !1221, !verifier.code !62 */
  $i867 := $add.i32($i866, $i866);
  /* call void @llvm.dbg.value(metadata i32 %1042, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i867);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 695, 7} true;
  assume {:verifier.code 0} true;
  /* %1043 = sext i32 %1028 to i64, !dbg !1222, !verifier.code !62 */
  $i868 := $sext.i32.i64($i856);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 695, 9} true;
  assume {:verifier.code 0} true;
  /* %1044 = srem i64 %1043, 2147483648, !dbg !1223, !verifier.code !62 */
  $i869 := $srem.i64($i868, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 695, 7} true;
  assume {:verifier.code 0} true;
  /* %1045 = trunc i64 %1044 to i32, !dbg !1222, !verifier.code !62 */
  $i870 := $trunc.i64.i32($i869);
  /* call void @llvm.dbg.value(metadata i32 %1045, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i870);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 696, 5} true;
  assume {:verifier.code 0} true;
  /* %1046 = add nsw i32 %1045, %1045, !dbg !1224, !verifier.code !62 */
  $i871 := $add.i32($i870, $i870);
  /* call void @llvm.dbg.value(metadata i32 %1046, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i871);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 698, 5} true;
  assume {:verifier.code 0} true;
  /* %1047 = add nsw i32 %.115, %.115, !dbg !1225, !verifier.code !62 */
  $i872 := $add.i32($i859, $i859);
  /* call void @llvm.dbg.value(metadata i32 %1047, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i872);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 699, 9} true;
  assume {:verifier.code 0} true;
  /* %1048 = icmp slt i32 %1042, 0, !dbg !1226, !verifier.code !62 */
  $i873 := $slt.i32($i867, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 699, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %1048, label %1049, label %1056, !dbg !1228, !verifier.code !62 */
  $i874 := $i872;
  assume {:branchcond $i873} true;
  goto $bb523, $bb524;
$bb517:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 15} true;
  assume {:verifier.code 0} true;
  assume ($i860 == 1);
  goto $bb518;
$bb518:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 690, 9} true;
  assume {:verifier.code 0} true;
  /* %1036 = add nsw i32 %1029, 1, !dbg !1215, !verifier.code !62 */
  $i863 := $add.i32($i857, 1);
  /* call void @llvm.dbg.value(metadata i32 %1036, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i863);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 691, 5} true;
  assume {:verifier.code 0} true;
  /* br label %1037, !dbg !1217, !verifier.code !62 */
  $i862 := $i863;
  goto $bb522;
$bb519:
  assume !(($i860 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 20} true;
  assume {:verifier.code 0} true;
  /* %1034 = icmp sgt i32 %1028, 2147483647, !dbg !1213, !verifier.code !62 */
  $i861 := $sgt.i32($i856, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %1034, label %1035, label %1037, !dbg !1214, !verifier.code !62 */
  $i862 := $i857;
  assume {:branchcond $i861} true;
  goto $bb520, $bb521;
$bb520:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 9} true;
  assume {:verifier.code 0} true;
  assume ($i861 == 1);
  goto $bb518;
$bb521:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i861 == 1));
  goto $bb522;
$bb522:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.114 = phi i32 [ %1036, %1035 ], [ %1029, %1033 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.114, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 692, 3} true;
  assume {:verifier.code 0} true;
  /* br label %1038, !dbg !1218, !verifier.code !62 */
  $i859 := $i862;
  goto $bb516;
$bb523:
  assume ($i873 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 11} true;
  assume {:verifier.code 0} true;
  /* %1050 = icmp slt i32 %1046, 0, !dbg !1229, !verifier.code !62 */
  $i875 := $slt.i32($i871, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %1050, label %1053, label %1051, !dbg !1232, !verifier.code !62 */
  assume {:branchcond $i875} true;
  goto $bb526, $bb528;
$bb524:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 699, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i873 == 1));
  goto $bb525;
$bb525:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.117 = phi i32 [ %.116, %1055 ], [ %1047, %1038 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.117, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 704, 7} true;
  assume {:verifier.code 0} true;
  /* %1057 = sext i32 %1042 to i64, !dbg !1239, !verifier.code !62 */
  $i879 := $sext.i32.i64($i867);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 704, 9} true;
  assume {:verifier.code 0} true;
  /* %1058 = srem i64 %1057, 2147483648, !dbg !1240, !verifier.code !62 */
  $i880 := $srem.i64($i879, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 704, 7} true;
  assume {:verifier.code 0} true;
  /* %1059 = trunc i64 %1058 to i32, !dbg !1239, !verifier.code !62 */
  $i881 := $trunc.i64.i32($i880);
  /* call void @llvm.dbg.value(metadata i32 %1059, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i881);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 705, 5} true;
  assume {:verifier.code 0} true;
  /* %1060 = add nsw i32 %1059, %1059, !dbg !1241, !verifier.code !62 */
  $i882 := $add.i32($i881, $i881);
  /* call void @llvm.dbg.value(metadata i32 %1060, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i882);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 706, 7} true;
  assume {:verifier.code 0} true;
  /* %1061 = sext i32 %1046 to i64, !dbg !1242, !verifier.code !62 */
  $i883 := $sext.i32.i64($i871);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 706, 9} true;
  assume {:verifier.code 0} true;
  /* %1062 = srem i64 %1061, 2147483648, !dbg !1243, !verifier.code !62 */
  $i884 := $srem.i64($i883, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 706, 7} true;
  assume {:verifier.code 0} true;
  /* %1063 = trunc i64 %1062 to i32, !dbg !1242, !verifier.code !62 */
  $i885 := $trunc.i64.i32($i884);
  /* call void @llvm.dbg.value(metadata i32 %1063, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i885);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 707, 5} true;
  assume {:verifier.code 0} true;
  /* %1064 = add nsw i32 %1063, %1063, !dbg !1244, !verifier.code !62 */
  $i886 := $add.i32($i885, $i885);
  /* call void @llvm.dbg.value(metadata i32 %1064, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i886);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 709, 5} true;
  assume {:verifier.code 0} true;
  /* %1065 = add nsw i32 %.117, %.117, !dbg !1245, !verifier.code !62 */
  $i887 := $add.i32($i874, $i874);
  /* call void @llvm.dbg.value(metadata i32 %1065, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i887);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 9} true;
  assume {:verifier.code 0} true;
  /* %1066 = icmp slt i32 %1060, 0, !dbg !1246, !verifier.code !62 */
  $i888 := $slt.i32($i882, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %1066, label %1067, label %1074, !dbg !1248, !verifier.code !62 */
  $i889 := $i887;
  assume {:branchcond $i888} true;
  goto $bb532, $bb533;
$bb526:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 15} true;
  assume {:verifier.code 0} true;
  assume ($i875 == 1);
  goto $bb527;
$bb527:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 701, 9} true;
  assume {:verifier.code 0} true;
  /* %1054 = add nsw i32 %1047, 1, !dbg !1235, !verifier.code !62 */
  $i878 := $add.i32($i872, 1);
  /* call void @llvm.dbg.value(metadata i32 %1054, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i878);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 702, 5} true;
  assume {:verifier.code 0} true;
  /* br label %1055, !dbg !1237, !verifier.code !62 */
  $i877 := $i878;
  goto $bb531;
$bb528:
  assume !(($i875 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 20} true;
  assume {:verifier.code 0} true;
  /* %1052 = icmp sgt i32 %1046, 2147483647, !dbg !1233, !verifier.code !62 */
  $i876 := $sgt.i32($i871, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %1052, label %1053, label %1055, !dbg !1234, !verifier.code !62 */
  $i877 := $i872;
  assume {:branchcond $i876} true;
  goto $bb529, $bb530;
$bb529:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 9} true;
  assume {:verifier.code 0} true;
  assume ($i876 == 1);
  goto $bb527;
$bb530:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i876 == 1));
  goto $bb531;
$bb531:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.116 = phi i32 [ %1054, %1053 ], [ %1047, %1051 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.116, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 703, 3} true;
  assume {:verifier.code 0} true;
  /* br label %1056, !dbg !1238, !verifier.code !62 */
  $i874 := $i877;
  goto $bb525;
$bb532:
  assume ($i888 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 11} true;
  assume {:verifier.code 0} true;
  /* %1068 = icmp slt i32 %1064, 0, !dbg !1249, !verifier.code !62 */
  $i890 := $slt.i32($i886, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %1068, label %1071, label %1069, !dbg !1252, !verifier.code !62 */
  assume {:branchcond $i890} true;
  goto $bb535, $bb537;
$bb533:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i888 == 1));
  goto $bb534;
$bb534:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.119 = phi i32 [ %.118, %1073 ], [ %1065, %1056 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.119, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 715, 7} true;
  assume {:verifier.code 0} true;
  /* %1075 = sext i32 %1060 to i64, !dbg !1259, !verifier.code !62 */
  $i894 := $sext.i32.i64($i882);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 715, 9} true;
  assume {:verifier.code 0} true;
  /* %1076 = srem i64 %1075, 2147483648, !dbg !1260, !verifier.code !62 */
  $i895 := $srem.i64($i894, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 715, 7} true;
  assume {:verifier.code 0} true;
  /* %1077 = trunc i64 %1076 to i32, !dbg !1259, !verifier.code !62 */
  $i896 := $trunc.i64.i32($i895);
  /* call void @llvm.dbg.value(metadata i32 %1077, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i896);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 716, 5} true;
  assume {:verifier.code 0} true;
  /* %1078 = add nsw i32 %1077, %1077, !dbg !1261, !verifier.code !62 */
  $i897 := $add.i32($i896, $i896);
  /* call void @llvm.dbg.value(metadata i32 %1078, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i897);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 717, 7} true;
  assume {:verifier.code 0} true;
  /* %1079 = sext i32 %1064 to i64, !dbg !1262, !verifier.code !62 */
  $i898 := $sext.i32.i64($i886);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 717, 9} true;
  assume {:verifier.code 0} true;
  /* %1080 = srem i64 %1079, 2147483648, !dbg !1263, !verifier.code !62 */
  $i899 := $srem.i64($i898, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 717, 7} true;
  assume {:verifier.code 0} true;
  /* %1081 = trunc i64 %1080 to i32, !dbg !1262, !verifier.code !62 */
  $i900 := $trunc.i64.i32($i899);
  /* call void @llvm.dbg.value(metadata i32 %1081, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i900);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 718, 5} true;
  assume {:verifier.code 0} true;
  /* %1082 = add nsw i32 %1081, %1081, !dbg !1264, !verifier.code !62 */
  $i901 := $add.i32($i900, $i900);
  /* call void @llvm.dbg.value(metadata i32 %1082, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i901);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 720, 5} true;
  assume {:verifier.code 0} true;
  /* %1083 = add nsw i32 %.119, %.119, !dbg !1265, !verifier.code !62 */
  $i902 := $add.i32($i889, $i889);
  /* call void @llvm.dbg.value(metadata i32 %1083, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i902);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 721, 9} true;
  assume {:verifier.code 0} true;
  /* %1084 = icmp slt i32 %1078, 0, !dbg !1266, !verifier.code !62 */
  $i903 := $slt.i32($i897, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 721, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %1084, label %1085, label %1092, !dbg !1268, !verifier.code !62 */
  $i904 := $i902;
  assume {:branchcond $i903} true;
  goto $bb541, $bb542;
$bb535:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 15} true;
  assume {:verifier.code 0} true;
  assume ($i890 == 1);
  goto $bb536;
$bb536:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 712, 9} true;
  assume {:verifier.code 0} true;
  /* %1072 = add nsw i32 %1065, 1, !dbg !1255, !verifier.code !62 */
  $i893 := $add.i32($i887, 1);
  /* call void @llvm.dbg.value(metadata i32 %1072, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i893);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 713, 5} true;
  assume {:verifier.code 0} true;
  /* br label %1073, !dbg !1257, !verifier.code !62 */
  $i892 := $i893;
  goto $bb540;
$bb537:
  assume !(($i890 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 20} true;
  assume {:verifier.code 0} true;
  /* %1070 = icmp sgt i32 %1064, 2147483647, !dbg !1253, !verifier.code !62 */
  $i891 := $sgt.i32($i886, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %1070, label %1071, label %1073, !dbg !1254, !verifier.code !62 */
  $i892 := $i887;
  assume {:branchcond $i891} true;
  goto $bb538, $bb539;
$bb538:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 9} true;
  assume {:verifier.code 0} true;
  assume ($i891 == 1);
  goto $bb536;
$bb539:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i891 == 1));
  goto $bb540;
$bb540:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.118 = phi i32 [ %1072, %1071 ], [ %1065, %1069 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.118, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 714, 3} true;
  assume {:verifier.code 0} true;
  /* br label %1074, !dbg !1258, !verifier.code !62 */
  $i889 := $i892;
  goto $bb534;
$bb541:
  assume ($i903 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 11} true;
  assume {:verifier.code 0} true;
  /* %1086 = icmp slt i32 %1082, 0, !dbg !1269, !verifier.code !62 */
  $i905 := $slt.i32($i901, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %1086, label %1089, label %1087, !dbg !1272, !verifier.code !62 */
  assume {:branchcond $i905} true;
  goto $bb544, $bb546;
$bb542:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 721, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i903 == 1));
  goto $bb543;
$bb543:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.121 = phi i32 [ %.120, %1091 ], [ %1083, %1074 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.121, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 726, 7} true;
  assume {:verifier.code 0} true;
  /* %1093 = sext i32 %1078 to i64, !dbg !1279, !verifier.code !62 */
  $i909 := $sext.i32.i64($i897);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 726, 9} true;
  assume {:verifier.code 0} true;
  /* %1094 = srem i64 %1093, 2147483648, !dbg !1280, !verifier.code !62 */
  $i910 := $srem.i64($i909, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 726, 7} true;
  assume {:verifier.code 0} true;
  /* %1095 = trunc i64 %1094 to i32, !dbg !1279, !verifier.code !62 */
  $i911 := $trunc.i64.i32($i910);
  /* call void @llvm.dbg.value(metadata i32 %1095, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i911);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 727, 5} true;
  assume {:verifier.code 0} true;
  /* %1096 = add nsw i32 %1095, %1095, !dbg !1281, !verifier.code !62 */
  $i912 := $add.i32($i911, $i911);
  /* call void @llvm.dbg.value(metadata i32 %1096, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i912);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 728, 7} true;
  assume {:verifier.code 0} true;
  /* %1097 = sext i32 %1082 to i64, !dbg !1282, !verifier.code !62 */
  $i913 := $sext.i32.i64($i901);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 728, 9} true;
  assume {:verifier.code 0} true;
  /* %1098 = srem i64 %1097, 2147483648, !dbg !1283, !verifier.code !62 */
  $i914 := $srem.i64($i913, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 728, 7} true;
  assume {:verifier.code 0} true;
  /* %1099 = trunc i64 %1098 to i32, !dbg !1282, !verifier.code !62 */
  $i915 := $trunc.i64.i32($i914);
  /* call void @llvm.dbg.value(metadata i32 %1099, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i915);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 729, 5} true;
  assume {:verifier.code 0} true;
  /* %1100 = add nsw i32 %1099, %1099, !dbg !1284, !verifier.code !62 */
  $i916 := $add.i32($i915, $i915);
  /* call void @llvm.dbg.value(metadata i32 %1100, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i916);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 731, 5} true;
  assume {:verifier.code 0} true;
  /* %1101 = add nsw i32 %.121, %.121, !dbg !1285, !verifier.code !62 */
  $i917 := $add.i32($i904, $i904);
  /* call void @llvm.dbg.value(metadata i32 %1101, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i917);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 9} true;
  assume {:verifier.code 0} true;
  /* %1102 = icmp slt i32 %1096, 0, !dbg !1286, !verifier.code !62 */
  $i918 := $slt.i32($i912, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %1102, label %1103, label %1110, !dbg !1288, !verifier.code !62 */
  $i919 := $i917;
  assume {:branchcond $i918} true;
  goto $bb550, $bb551;
$bb544:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 15} true;
  assume {:verifier.code 0} true;
  assume ($i905 == 1);
  goto $bb545;
$bb545:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 723, 9} true;
  assume {:verifier.code 0} true;
  /* %1090 = add nsw i32 %1083, 1, !dbg !1275, !verifier.code !62 */
  $i908 := $add.i32($i902, 1);
  /* call void @llvm.dbg.value(metadata i32 %1090, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i908);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 724, 5} true;
  assume {:verifier.code 0} true;
  /* br label %1091, !dbg !1277, !verifier.code !62 */
  $i907 := $i908;
  goto $bb549;
$bb546:
  assume !(($i905 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 20} true;
  assume {:verifier.code 0} true;
  /* %1088 = icmp sgt i32 %1082, 2147483647, !dbg !1273, !verifier.code !62 */
  $i906 := $sgt.i32($i901, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %1088, label %1089, label %1091, !dbg !1274, !verifier.code !62 */
  $i907 := $i902;
  assume {:branchcond $i906} true;
  goto $bb547, $bb548;
$bb547:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 9} true;
  assume {:verifier.code 0} true;
  assume ($i906 == 1);
  goto $bb545;
$bb548:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i906 == 1));
  goto $bb549;
$bb549:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.120 = phi i32 [ %1090, %1089 ], [ %1083, %1087 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.120, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 725, 3} true;
  assume {:verifier.code 0} true;
  /* br label %1092, !dbg !1278, !verifier.code !62 */
  $i904 := $i907;
  goto $bb543;
$bb550:
  assume ($i918 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 11} true;
  assume {:verifier.code 0} true;
  /* %1104 = icmp slt i32 %1100, 0, !dbg !1289, !verifier.code !62 */
  $i920 := $slt.i32($i916, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %1104, label %1107, label %1105, !dbg !1292, !verifier.code !62 */
  assume {:branchcond $i920} true;
  goto $bb553, $bb555;
$bb551:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i918 == 1));
  goto $bb552;
$bb552:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.123 = phi i32 [ %.122, %1109 ], [ %1101, %1092 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.123, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 737, 7} true;
  assume {:verifier.code 0} true;
  /* %1111 = sext i32 %1096 to i64, !dbg !1299, !verifier.code !62 */
  $i924 := $sext.i32.i64($i912);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 737, 9} true;
  assume {:verifier.code 0} true;
  /* %1112 = srem i64 %1111, 2147483648, !dbg !1300, !verifier.code !62 */
  $i925 := $srem.i64($i924, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 737, 7} true;
  assume {:verifier.code 0} true;
  /* %1113 = trunc i64 %1112 to i32, !dbg !1299, !verifier.code !62 */
  $i926 := $trunc.i64.i32($i925);
  /* call void @llvm.dbg.value(metadata i32 %1113, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i926);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 738, 5} true;
  assume {:verifier.code 0} true;
  /* %1114 = add nsw i32 %1113, %1113, !dbg !1301, !verifier.code !62 */
  $i927 := $add.i32($i926, $i926);
  /* call void @llvm.dbg.value(metadata i32 %1114, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i927);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 739, 7} true;
  assume {:verifier.code 0} true;
  /* %1115 = sext i32 %1100 to i64, !dbg !1302, !verifier.code !62 */
  $i928 := $sext.i32.i64($i916);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 739, 9} true;
  assume {:verifier.code 0} true;
  /* %1116 = srem i64 %1115, 2147483648, !dbg !1303, !verifier.code !62 */
  $i929 := $srem.i64($i928, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 739, 7} true;
  assume {:verifier.code 0} true;
  /* %1117 = trunc i64 %1116 to i32, !dbg !1302, !verifier.code !62 */
  $i930 := $trunc.i64.i32($i929);
  /* call void @llvm.dbg.value(metadata i32 %1117, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i930);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 740, 5} true;
  assume {:verifier.code 0} true;
  /* %1118 = add nsw i32 %1117, %1117, !dbg !1304, !verifier.code !62 */
  $i931 := $add.i32($i930, $i930);
  /* call void @llvm.dbg.value(metadata i32 %1118, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i931);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 742, 5} true;
  assume {:verifier.code 0} true;
  /* %1119 = add nsw i32 %.123, %.123, !dbg !1305, !verifier.code !62 */
  $i932 := $add.i32($i919, $i919);
  /* call void @llvm.dbg.value(metadata i32 %1119, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i932);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 743, 9} true;
  assume {:verifier.code 0} true;
  /* %1120 = icmp slt i32 %1114, 0, !dbg !1306, !verifier.code !62 */
  $i933 := $slt.i32($i927, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 743, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %1120, label %1121, label %1128, !dbg !1308, !verifier.code !62 */
  $i934 := $i932;
  assume {:branchcond $i933} true;
  goto $bb559, $bb560;
$bb553:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 15} true;
  assume {:verifier.code 0} true;
  assume ($i920 == 1);
  goto $bb554;
$bb554:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 734, 9} true;
  assume {:verifier.code 0} true;
  /* %1108 = add nsw i32 %1101, 1, !dbg !1295, !verifier.code !62 */
  $i923 := $add.i32($i917, 1);
  /* call void @llvm.dbg.value(metadata i32 %1108, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i923);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 735, 5} true;
  assume {:verifier.code 0} true;
  /* br label %1109, !dbg !1297, !verifier.code !62 */
  $i922 := $i923;
  goto $bb558;
$bb555:
  assume !(($i920 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 20} true;
  assume {:verifier.code 0} true;
  /* %1106 = icmp sgt i32 %1100, 2147483647, !dbg !1293, !verifier.code !62 */
  $i921 := $sgt.i32($i916, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %1106, label %1107, label %1109, !dbg !1294, !verifier.code !62 */
  $i922 := $i917;
  assume {:branchcond $i921} true;
  goto $bb556, $bb557;
$bb556:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 9} true;
  assume {:verifier.code 0} true;
  assume ($i921 == 1);
  goto $bb554;
$bb557:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i921 == 1));
  goto $bb558;
$bb558:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.122 = phi i32 [ %1108, %1107 ], [ %1101, %1105 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.122, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 736, 3} true;
  assume {:verifier.code 0} true;
  /* br label %1110, !dbg !1298, !verifier.code !62 */
  $i919 := $i922;
  goto $bb552;
$bb559:
  assume ($i933 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 11} true;
  assume {:verifier.code 0} true;
  /* %1122 = icmp slt i32 %1118, 0, !dbg !1309, !verifier.code !62 */
  $i935 := $slt.i32($i931, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %1122, label %1125, label %1123, !dbg !1312, !verifier.code !62 */
  assume {:branchcond $i935} true;
  goto $bb562, $bb564;
$bb560:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 743, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i933 == 1));
  goto $bb561;
$bb561:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.125 = phi i32 [ %.124, %1127 ], [ %1119, %1110 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.125, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 748, 7} true;
  assume {:verifier.code 0} true;
  /* %1129 = sext i32 %1114 to i64, !dbg !1319, !verifier.code !62 */
  $i939 := $sext.i32.i64($i927);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 748, 9} true;
  assume {:verifier.code 0} true;
  /* %1130 = srem i64 %1129, 2147483648, !dbg !1320, !verifier.code !62 */
  $i940 := $srem.i64($i939, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 748, 7} true;
  assume {:verifier.code 0} true;
  /* %1131 = trunc i64 %1130 to i32, !dbg !1319, !verifier.code !62 */
  $i941 := $trunc.i64.i32($i940);
  /* call void @llvm.dbg.value(metadata i32 %1131, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i941);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 749, 5} true;
  assume {:verifier.code 0} true;
  /* %1132 = add nsw i32 %1131, %1131, !dbg !1321, !verifier.code !62 */
  $i942 := $add.i32($i941, $i941);
  /* call void @llvm.dbg.value(metadata i32 %1132, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i942);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 750, 7} true;
  assume {:verifier.code 0} true;
  /* %1133 = sext i32 %1118 to i64, !dbg !1322, !verifier.code !62 */
  $i943 := $sext.i32.i64($i931);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 750, 9} true;
  assume {:verifier.code 0} true;
  /* %1134 = srem i64 %1133, 2147483648, !dbg !1323, !verifier.code !62 */
  $i944 := $srem.i64($i943, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 750, 7} true;
  assume {:verifier.code 0} true;
  /* %1135 = trunc i64 %1134 to i32, !dbg !1322, !verifier.code !62 */
  $i945 := $trunc.i64.i32($i944);
  /* call void @llvm.dbg.value(metadata i32 %1135, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i945);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 751, 5} true;
  assume {:verifier.code 0} true;
  /* %1136 = add nsw i32 %1135, %1135, !dbg !1324, !verifier.code !62 */
  $i946 := $add.i32($i945, $i945);
  /* call void @llvm.dbg.value(metadata i32 %1136, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i946);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 753, 5} true;
  assume {:verifier.code 0} true;
  /* %1137 = add nsw i32 %.125, %.125, !dbg !1325, !verifier.code !62 */
  $i947 := $add.i32($i934, $i934);
  /* call void @llvm.dbg.value(metadata i32 %1137, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i947);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 754, 9} true;
  assume {:verifier.code 0} true;
  /* %1138 = icmp slt i32 %1132, 0, !dbg !1326, !verifier.code !62 */
  $i948 := $slt.i32($i942, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 754, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %1138, label %1139, label %1146, !dbg !1328, !verifier.code !62 */
  $i949 := $i947;
  assume {:branchcond $i948} true;
  goto $bb568, $bb569;
$bb562:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 15} true;
  assume {:verifier.code 0} true;
  assume ($i935 == 1);
  goto $bb563;
$bb563:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 745, 9} true;
  assume {:verifier.code 0} true;
  /* %1126 = add nsw i32 %1119, 1, !dbg !1315, !verifier.code !62 */
  $i938 := $add.i32($i932, 1);
  /* call void @llvm.dbg.value(metadata i32 %1126, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i938);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 746, 5} true;
  assume {:verifier.code 0} true;
  /* br label %1127, !dbg !1317, !verifier.code !62 */
  $i937 := $i938;
  goto $bb567;
$bb564:
  assume !(($i935 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 20} true;
  assume {:verifier.code 0} true;
  /* %1124 = icmp sgt i32 %1118, 2147483647, !dbg !1313, !verifier.code !62 */
  $i936 := $sgt.i32($i931, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %1124, label %1125, label %1127, !dbg !1314, !verifier.code !62 */
  $i937 := $i932;
  assume {:branchcond $i936} true;
  goto $bb565, $bb566;
$bb565:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 9} true;
  assume {:verifier.code 0} true;
  assume ($i936 == 1);
  goto $bb563;
$bb566:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i936 == 1));
  goto $bb567;
$bb567:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.124 = phi i32 [ %1126, %1125 ], [ %1119, %1123 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.124, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 747, 3} true;
  assume {:verifier.code 0} true;
  /* br label %1128, !dbg !1318, !verifier.code !62 */
  $i934 := $i937;
  goto $bb561;
$bb568:
  assume ($i948 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 11} true;
  assume {:verifier.code 0} true;
  /* %1140 = icmp slt i32 %1136, 0, !dbg !1329, !verifier.code !62 */
  $i950 := $slt.i32($i946, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %1140, label %1143, label %1141, !dbg !1332, !verifier.code !62 */
  assume {:branchcond $i950} true;
  goto $bb571, $bb573;
$bb569:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 754, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i948 == 1));
  goto $bb570;
$bb570:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.127 = phi i32 [ %.126, %1145 ], [ %1137, %1128 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.127, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 %1132, metadata !9548, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_LLVM_convert, 64, DW_ATE_signed, DW_OP_constu, 2147483648, DW_OP_mod, DW_OP_LLVM_convert, 64, DW_ATE_unsigned, DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !9549, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 undef, metadata !9548, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 %1136, metadata !9550, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_LLVM_convert, 64, DW_ATE_signed, DW_OP_constu, 2147483648, DW_OP_mod, DW_OP_LLVM_convert, 64, DW_ATE_unsigned, DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !9549, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 undef, metadata !9550, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 764, 3} true;
  assume {:verifier.code 0} true;
  /* ret i32 %.127, !dbg !1339, !verifier.code !62 */
  $r := $i949;
  $exn := false;
  return;
$bb571:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 15} true;
  assume {:verifier.code 0} true;
  assume ($i950 == 1);
  goto $bb572;
$bb572:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 756, 9} true;
  assume {:verifier.code 0} true;
  /* %1144 = add nsw i32 %1137, 1, !dbg !1335, !verifier.code !62 */
  $i953 := $add.i32($i947, 1);
  /* call void @llvm.dbg.value(metadata i32 %1144, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i953);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 757, 5} true;
  assume {:verifier.code 0} true;
  /* br label %1145, !dbg !1337, !verifier.code !62 */
  $i952 := $i953;
  goto $bb576;
$bb573:
  assume !(($i950 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 20} true;
  assume {:verifier.code 0} true;
  /* %1142 = icmp sgt i32 %1136, 2147483647, !dbg !1333, !verifier.code !62 */
  $i951 := $sgt.i32($i946, 2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %1142, label %1143, label %1145, !dbg !1334, !verifier.code !62 */
  $i952 := $i947;
  assume {:branchcond $i951} true;
  goto $bb574, $bb575;
$bb574:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 9} true;
  assume {:verifier.code 0} true;
  assume ($i951 == 1);
  goto $bb572;
$bb575:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i951 == 1));
  goto $bb576;
$bb576:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.126 = phi i32 [ %1144, %1143 ], [ %1137, %1141 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.126, metadata !9551, metadata !DIExpression()), !dbg !9549, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 758, 3} true;
  assume {:verifier.code 0} true;
  /* br label %1146, !dbg !1338, !verifier.code !62 */
  $i949 := $i952;
  goto $bb570;
}
const __SMACK_and64: ref;
axiom (__SMACK_and64 == $sub.ref(0, 40248));
procedure {:inline 1} __SMACK_and64($i0: i64, $i1: i64)
  returns ($r: i64)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 65} true;
  assume {:verifier.code 1} true;
  /* call void @llvm.dbg.value(metadata i64 %0, metadata !10830, metadata !DIExpression()), !dbg !10831, !verifier.code !64 */
  call {:cexpr "__SMACK_and64:arg:a"} boogie_si_record_i64($i0);
  /* call void @llvm.dbg.value(metadata i64 %1, metadata !10832, metadata !DIExpression()), !dbg !10831, !verifier.code !64 */
  call {:cexpr "__SMACK_and64:arg:b"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 65} true;
  assume {:verifier.code 1} true;
  /* %3 = trunc i64 %0 to i32, !dbg !64, !verifier.code !65 */
  $i2 := $trunc.i64.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 68} true;
  assume {:verifier.code 1} true;
  /* %4 = trunc i64 %1 to i32, !dbg !66, !verifier.code !65 */
  $i3 := $trunc.i64.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 51} true;
  assume {:verifier.code 1} true;
  /* %5 = call i32 @__SMACK_and32(i32 %3, i32 %4), !dbg !67, !verifier.code !65 */
  call $i4 := __SMACK_and32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_and32"} boogie_si_record_i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 45} true;
  assume {:verifier.code 0} true;
  /* %6 = sext i32 %5 to i64, !dbg !68, !verifier.code !62 */
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 38} true;
  assume {:verifier.code 0} true;
  /* ret i64 %6, !dbg !69, !verifier.code !62 */
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_and16: ref;
axiom (__SMACK_and16 == $sub.ref(0, 41280));
procedure {:inline 1} __SMACK_and16($i0: i16, $i1: i16)
  returns ($r: i16)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $i13: i16;
  var $i8: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $i42: i16;
  var $i37: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i16;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i16;
  var $i64: i32;
  var $i65: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i16;
  var $i71: i16;
  var $i66: i16;
  var $i75: i32;
  var $i76: i32;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i16;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i16;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i16;
  var $i93: i32;
  var $i94: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i101: i32;
  var $i102: i32;
  var $i103: i16;
  var $i100: i16;
  var $i95: i16;
  var $i104: i32;
  var $i105: i32;
  var $i106: i16;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i16;
  var $i111: i32;
  var $i112: i32;
  var $i113: i16;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i16;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i16;
  var $i122: i32;
  var $i123: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i130: i32;
  var $i131: i32;
  var $i132: i16;
  var $i129: i16;
  var $i124: i16;
  var $i133: i32;
  var $i134: i32;
  var $i135: i16;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i16;
  var $i140: i32;
  var $i141: i32;
  var $i142: i16;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i16;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i16;
  var $i151: i32;
  var $i152: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i1;
  var $i159: i32;
  var $i160: i32;
  var $i161: i16;
  var $i158: i16;
  var $i153: i16;
  var $i162: i32;
  var $i163: i32;
  var $i164: i16;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i16;
  var $i169: i32;
  var $i170: i32;
  var $i171: i16;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i16;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i16;
  var $i180: i32;
  var $i181: i1;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i188: i32;
  var $i189: i32;
  var $i190: i16;
  var $i187: i16;
  var $i182: i16;
  var $i191: i32;
  var $i192: i32;
  var $i193: i16;
  var $i194: i32;
  var $i195: i32;
  var $i196: i32;
  var $i197: i16;
  var $i198: i32;
  var $i199: i32;
  var $i200: i16;
  var $i201: i32;
  var $i202: i32;
  var $i203: i32;
  var $i204: i16;
  var $i205: i32;
  var $i206: i32;
  var $i207: i32;
  var $i208: i16;
  var $i209: i32;
  var $i210: i1;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i215: i1;
  var $i217: i32;
  var $i218: i32;
  var $i219: i16;
  var $i216: i16;
  var $i211: i16;
  var $i220: i32;
  var $i221: i32;
  var $i222: i16;
  var $i223: i32;
  var $i224: i32;
  var $i225: i32;
  var $i226: i16;
  var $i227: i32;
  var $i228: i32;
  var $i229: i16;
  var $i230: i32;
  var $i231: i32;
  var $i232: i32;
  var $i233: i16;
  var $i234: i32;
  var $i235: i32;
  var $i236: i32;
  var $i237: i16;
  var $i238: i32;
  var $i239: i1;
  var $i241: i32;
  var $i242: i1;
  var $i243: i32;
  var $i244: i1;
  var $i246: i32;
  var $i247: i32;
  var $i248: i16;
  var $i245: i16;
  var $i240: i16;
  var $i249: i32;
  var $i250: i32;
  var $i251: i16;
  var $i252: i32;
  var $i253: i32;
  var $i254: i32;
  var $i255: i16;
  var $i256: i32;
  var $i257: i32;
  var $i258: i16;
  var $i259: i32;
  var $i260: i32;
  var $i261: i32;
  var $i262: i16;
  var $i263: i32;
  var $i264: i32;
  var $i265: i32;
  var $i266: i16;
  var $i267: i32;
  var $i268: i1;
  var $i270: i32;
  var $i271: i1;
  var $i272: i32;
  var $i273: i1;
  var $i275: i32;
  var $i276: i32;
  var $i277: i16;
  var $i274: i16;
  var $i269: i16;
  var $i278: i32;
  var $i279: i32;
  var $i280: i16;
  var $i281: i32;
  var $i282: i32;
  var $i283: i32;
  var $i284: i16;
  var $i285: i32;
  var $i286: i32;
  var $i287: i16;
  var $i288: i32;
  var $i289: i32;
  var $i290: i32;
  var $i291: i16;
  var $i292: i32;
  var $i293: i32;
  var $i294: i32;
  var $i295: i16;
  var $i296: i32;
  var $i297: i1;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i304: i32;
  var $i305: i32;
  var $i306: i16;
  var $i303: i16;
  var $i298: i16;
  var $i307: i32;
  var $i308: i32;
  var $i309: i16;
  var $i310: i32;
  var $i311: i32;
  var $i312: i32;
  var $i313: i16;
  var $i314: i32;
  var $i315: i32;
  var $i316: i16;
  var $i317: i32;
  var $i318: i32;
  var $i319: i32;
  var $i320: i16;
  var $i321: i32;
  var $i322: i32;
  var $i323: i32;
  var $i324: i16;
  var $i325: i32;
  var $i326: i1;
  var $i328: i32;
  var $i329: i1;
  var $i330: i32;
  var $i331: i1;
  var $i333: i32;
  var $i334: i32;
  var $i335: i16;
  var $i332: i16;
  var $i327: i16;
  var $i336: i32;
  var $i337: i32;
  var $i338: i16;
  var $i339: i32;
  var $i340: i32;
  var $i341: i32;
  var $i342: i16;
  var $i343: i32;
  var $i344: i32;
  var $i345: i16;
  var $i346: i32;
  var $i347: i32;
  var $i348: i32;
  var $i349: i16;
  var $i350: i32;
  var $i351: i32;
  var $i352: i32;
  var $i353: i16;
  var $i354: i32;
  var $i355: i1;
  var $i357: i32;
  var $i358: i1;
  var $i359: i32;
  var $i360: i1;
  var $i362: i32;
  var $i363: i32;
  var $i364: i16;
  var $i361: i16;
  var $i356: i16;
  var $i365: i32;
  var $i366: i32;
  var $i367: i16;
  var $i368: i32;
  var $i369: i32;
  var $i370: i32;
  var $i371: i16;
  var $i372: i32;
  var $i373: i32;
  var $i374: i16;
  var $i375: i32;
  var $i376: i32;
  var $i377: i32;
  var $i378: i16;
  var $i379: i32;
  var $i380: i32;
  var $i381: i32;
  var $i382: i16;
  var $i383: i32;
  var $i384: i1;
  var $i386: i32;
  var $i387: i1;
  var $i388: i32;
  var $i389: i1;
  var $i391: i32;
  var $i392: i32;
  var $i393: i16;
  var $i390: i16;
  var $i385: i16;
  var $i394: i32;
  var $i395: i32;
  var $i396: i16;
  var $i397: i32;
  var $i398: i32;
  var $i399: i32;
  var $i400: i16;
  var $i401: i32;
  var $i402: i32;
  var $i403: i16;
  var $i404: i32;
  var $i405: i32;
  var $i406: i32;
  var $i407: i16;
  var $i408: i32;
  var $i409: i32;
  var $i410: i32;
  var $i411: i16;
  var $i412: i32;
  var $i413: i1;
  var $i415: i32;
  var $i416: i1;
  var $i417: i32;
  var $i418: i1;
  var $i420: i32;
  var $i421: i32;
  var $i422: i16;
  var $i419: i16;
  var $i414: i16;
  var $i423: i32;
  var $i424: i32;
  var $i425: i16;
  var $i426: i32;
  var $i427: i32;
  var $i428: i32;
  var $i429: i16;
  var $i430: i32;
  var $i431: i32;
  var $i432: i16;
  var $i433: i32;
  var $i434: i32;
  var $i435: i32;
  var $i436: i16;
  var $i437: i32;
  var $i438: i32;
  var $i439: i32;
  var $i440: i16;
  var $i441: i32;
  var $i442: i1;
  var $i444: i32;
  var $i445: i1;
  var $i446: i32;
  var $i447: i1;
  var $i449: i32;
  var $i450: i32;
  var $i451: i16;
  var $i448: i16;
  var $i443: i16;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 8} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i16 %0, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_i16($i0);
  /* call void @llvm.dbg.value(metadata i16 %1, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_i16($i1);
  /* call void @llvm.dbg.value(metadata i16 0, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 8} true;
  assume {:verifier.code 0} true;
  /* %3 = sext i16 0 to i32, !dbg !65, !verifier.code !62 */
  $i2 := $sext.i16.i32(0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 5} true;
  assume {:verifier.code 0} true;
  /* %4 = sext i16 0 to i32, !dbg !66, !verifier.code !62 */
  $i3 := $sext.i16.i32(0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 5} true;
  assume {:verifier.code 0} true;
  /* %5 = add nsw i32 %4, %3, !dbg !66, !verifier.code !62 */
  $i4 := $add.i32($i3, $i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 5} true;
  assume {:verifier.code 0} true;
  /* %6 = trunc i32 %5 to i16, !dbg !66, !verifier.code !62 */
  $i5 := $trunc.i32.i16($i4);
  /* call void @llvm.dbg.value(metadata i16 %6, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 7} true;
  assume {:verifier.code 0} true;
  /* %7 = sext i16 %0 to i32, !dbg !67, !verifier.code !62 */
  $i6 := $sext.i16.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 9} true;
  assume {:verifier.code 0} true;
  /* %8 = icmp slt i32 %7, 0, !dbg !69, !verifier.code !62 */
  $i7 := $slt.i32($i6, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %8, label %9, label %20, !dbg !70, !verifier.code !62 */
  $i8 := $i5;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 9} true;
  assume {:verifier.code 0} true;
  /* %10 = sext i16 %1 to i32, !dbg !71, !verifier.code !62 */
  $i9 := $sext.i16.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 11} true;
  assume {:verifier.code 0} true;
  /* %11 = icmp slt i32 %10, 0, !dbg !74, !verifier.code !62 */
  $i10 := $slt.i32($i9, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %11, label %15, label %12, !dbg !75, !verifier.code !62 */
  assume {:branchcond $i10} true;
  goto $bb4, $bb6;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.1 = phi i16 [ %.0, %19 ], [ %6, %2 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.1, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 778, 7} true;
  assume {:verifier.code 0} true;
  /* %21 = sext i16 %0 to i32, !dbg !83, !verifier.code !62 */
  $i17 := $sext.i16.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 778, 9} true;
  assume {:verifier.code 0} true;
  /* %22 = srem i32 %21, 32768, !dbg !84, !verifier.code !62 */
  $i18 := $srem.i32($i17, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 778, 7} true;
  assume {:verifier.code 0} true;
  /* %23 = trunc i32 %22 to i16, !dbg !83, !verifier.code !62 */
  $i19 := $trunc.i32.i16($i18);
  /* call void @llvm.dbg.value(metadata i16 %23, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 779, 8} true;
  assume {:verifier.code 0} true;
  /* %24 = sext i16 %23 to i32, !dbg !85, !verifier.code !62 */
  $i20 := $sext.i16.i32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 779, 5} true;
  assume {:verifier.code 0} true;
  /* %25 = sext i16 %23 to i32, !dbg !86, !verifier.code !62 */
  $i21 := $sext.i16.i32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 779, 5} true;
  assume {:verifier.code 0} true;
  /* %26 = add nsw i32 %25, %24, !dbg !86, !verifier.code !62 */
  $i22 := $add.i32($i21, $i20);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 779, 5} true;
  assume {:verifier.code 0} true;
  /* %27 = trunc i32 %26 to i16, !dbg !86, !verifier.code !62 */
  $i23 := $trunc.i32.i16($i22);
  /* call void @llvm.dbg.value(metadata i16 %27, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 780, 7} true;
  assume {:verifier.code 0} true;
  /* %28 = sext i16 %1 to i32, !dbg !87, !verifier.code !62 */
  $i24 := $sext.i16.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 780, 9} true;
  assume {:verifier.code 0} true;
  /* %29 = srem i32 %28, 32768, !dbg !88, !verifier.code !62 */
  $i25 := $srem.i32($i24, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 780, 7} true;
  assume {:verifier.code 0} true;
  /* %30 = trunc i32 %29 to i16, !dbg !87, !verifier.code !62 */
  $i26 := $trunc.i32.i16($i25);
  /* call void @llvm.dbg.value(metadata i16 %30, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 781, 8} true;
  assume {:verifier.code 0} true;
  /* %31 = sext i16 %30 to i32, !dbg !89, !verifier.code !62 */
  $i27 := $sext.i16.i32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 781, 5} true;
  assume {:verifier.code 0} true;
  /* %32 = sext i16 %30 to i32, !dbg !90, !verifier.code !62 */
  $i28 := $sext.i16.i32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 781, 5} true;
  assume {:verifier.code 0} true;
  /* %33 = add nsw i32 %32, %31, !dbg !90, !verifier.code !62 */
  $i29 := $add.i32($i28, $i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 781, 5} true;
  assume {:verifier.code 0} true;
  /* %34 = trunc i32 %33 to i16, !dbg !90, !verifier.code !62 */
  $i30 := $trunc.i32.i16($i29);
  /* call void @llvm.dbg.value(metadata i16 %34, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 783, 8} true;
  assume {:verifier.code 0} true;
  /* %35 = sext i16 %.1 to i32, !dbg !91, !verifier.code !62 */
  $i31 := $sext.i16.i32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 783, 5} true;
  assume {:verifier.code 0} true;
  /* %36 = sext i16 %.1 to i32, !dbg !92, !verifier.code !62 */
  $i32 := $sext.i16.i32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 783, 5} true;
  assume {:verifier.code 0} true;
  /* %37 = add nsw i32 %36, %35, !dbg !92, !verifier.code !62 */
  $i33 := $add.i32($i32, $i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 783, 5} true;
  assume {:verifier.code 0} true;
  /* %38 = trunc i32 %37 to i16, !dbg !92, !verifier.code !62 */
  $i34 := $trunc.i32.i16($i33);
  /* call void @llvm.dbg.value(metadata i16 %38, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 7} true;
  assume {:verifier.code 0} true;
  /* %39 = sext i16 %27 to i32, !dbg !93, !verifier.code !62 */
  $i35 := $sext.i16.i32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 9} true;
  assume {:verifier.code 0} true;
  /* %40 = icmp slt i32 %39, 0, !dbg !95, !verifier.code !62 */
  $i36 := $slt.i32($i35, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %40, label %41, label %52, !dbg !96, !verifier.code !62 */
  $i37 := $i34;
  assume {:branchcond $i36} true;
  goto $bb10, $bb11;
$bb4:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 15} true;
  assume {:verifier.code 0} true;
  assume ($i10 == 1);
  goto $bb5;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 775, 9} true;
  assume {:verifier.code 0} true;
  /* %16 = sext i16 %6 to i32, !dbg !79, !verifier.code !62 */
  $i14 := $sext.i16.i32($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 775, 9} true;
  assume {:verifier.code 0} true;
  /* %17 = add nsw i32 %16, 1, !dbg !79, !verifier.code !62 */
  $i15 := $add.i32($i14, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 775, 9} true;
  assume {:verifier.code 0} true;
  /* %18 = trunc i32 %17 to i16, !dbg !79, !verifier.code !62 */
  $i16 := $trunc.i32.i16($i15);
  /* call void @llvm.dbg.value(metadata i16 %18, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 776, 5} true;
  assume {:verifier.code 0} true;
  /* br label %19, !dbg !81, !verifier.code !62 */
  $i13 := $i16;
  goto $bb9;
$bb6:
  assume !(($i10 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 18} true;
  assume {:verifier.code 0} true;
  /* %13 = sext i16 %1 to i32, !dbg !76, !verifier.code !62 */
  $i11 := $sext.i16.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 20} true;
  assume {:verifier.code 0} true;
  /* %14 = icmp sgt i32 %13, 32767, !dbg !77, !verifier.code !62 */
  $i12 := $sgt.i32($i11, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %14, label %15, label %19, !dbg !78, !verifier.code !62 */
  $i13 := $i5;
  assume {:branchcond $i12} true;
  goto $bb7, $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 9} true;
  assume {:verifier.code 0} true;
  assume ($i12 == 1);
  goto $bb5;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i12 == 1));
  goto $bb9;
$bb9:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.0 = phi i16 [ %18, %15 ], [ %6, %12 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.0, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 777, 3} true;
  assume {:verifier.code 0} true;
  /* br label %20, !dbg !82, !verifier.code !62 */
  $i8 := $i13;
  goto $bb3;
$bb10:
  assume ($i36 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 9} true;
  assume {:verifier.code 0} true;
  /* %42 = sext i16 %34 to i32, !dbg !97, !verifier.code !62 */
  $i38 := $sext.i16.i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 11} true;
  assume {:verifier.code 0} true;
  /* %43 = icmp slt i32 %42, 0, !dbg !100, !verifier.code !62 */
  $i39 := $slt.i32($i38, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %43, label %47, label %44, !dbg !101, !verifier.code !62 */
  assume {:branchcond $i39} true;
  goto $bb13, $bb15;
$bb11:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i36 == 1));
  goto $bb12;
$bb12:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.3 = phi i16 [ %.2, %51 ], [ %38, %20 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.3, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 789, 7} true;
  assume {:verifier.code 0} true;
  /* %53 = sext i16 %27 to i32, !dbg !109, !verifier.code !62 */
  $i46 := $sext.i16.i32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 789, 9} true;
  assume {:verifier.code 0} true;
  /* %54 = srem i32 %53, 32768, !dbg !110, !verifier.code !62 */
  $i47 := $srem.i32($i46, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 789, 7} true;
  assume {:verifier.code 0} true;
  /* %55 = trunc i32 %54 to i16, !dbg !109, !verifier.code !62 */
  $i48 := $trunc.i32.i16($i47);
  /* call void @llvm.dbg.value(metadata i16 %55, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 790, 8} true;
  assume {:verifier.code 0} true;
  /* %56 = sext i16 %55 to i32, !dbg !111, !verifier.code !62 */
  $i49 := $sext.i16.i32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 790, 5} true;
  assume {:verifier.code 0} true;
  /* %57 = sext i16 %55 to i32, !dbg !112, !verifier.code !62 */
  $i50 := $sext.i16.i32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 790, 5} true;
  assume {:verifier.code 0} true;
  /* %58 = add nsw i32 %57, %56, !dbg !112, !verifier.code !62 */
  $i51 := $add.i32($i50, $i49);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 790, 5} true;
  assume {:verifier.code 0} true;
  /* %59 = trunc i32 %58 to i16, !dbg !112, !verifier.code !62 */
  $i52 := $trunc.i32.i16($i51);
  /* call void @llvm.dbg.value(metadata i16 %59, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 791, 7} true;
  assume {:verifier.code 0} true;
  /* %60 = sext i16 %34 to i32, !dbg !113, !verifier.code !62 */
  $i53 := $sext.i16.i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 791, 9} true;
  assume {:verifier.code 0} true;
  /* %61 = srem i32 %60, 32768, !dbg !114, !verifier.code !62 */
  $i54 := $srem.i32($i53, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 791, 7} true;
  assume {:verifier.code 0} true;
  /* %62 = trunc i32 %61 to i16, !dbg !113, !verifier.code !62 */
  $i55 := $trunc.i32.i16($i54);
  /* call void @llvm.dbg.value(metadata i16 %62, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 792, 8} true;
  assume {:verifier.code 0} true;
  /* %63 = sext i16 %62 to i32, !dbg !115, !verifier.code !62 */
  $i56 := $sext.i16.i32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 792, 5} true;
  assume {:verifier.code 0} true;
  /* %64 = sext i16 %62 to i32, !dbg !116, !verifier.code !62 */
  $i57 := $sext.i16.i32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 792, 5} true;
  assume {:verifier.code 0} true;
  /* %65 = add nsw i32 %64, %63, !dbg !116, !verifier.code !62 */
  $i58 := $add.i32($i57, $i56);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 792, 5} true;
  assume {:verifier.code 0} true;
  /* %66 = trunc i32 %65 to i16, !dbg !116, !verifier.code !62 */
  $i59 := $trunc.i32.i16($i58);
  /* call void @llvm.dbg.value(metadata i16 %66, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 794, 8} true;
  assume {:verifier.code 0} true;
  /* %67 = sext i16 %.3 to i32, !dbg !117, !verifier.code !62 */
  $i60 := $sext.i16.i32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 794, 5} true;
  assume {:verifier.code 0} true;
  /* %68 = sext i16 %.3 to i32, !dbg !118, !verifier.code !62 */
  $i61 := $sext.i16.i32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 794, 5} true;
  assume {:verifier.code 0} true;
  /* %69 = add nsw i32 %68, %67, !dbg !118, !verifier.code !62 */
  $i62 := $add.i32($i61, $i60);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 794, 5} true;
  assume {:verifier.code 0} true;
  /* %70 = trunc i32 %69 to i16, !dbg !118, !verifier.code !62 */
  $i63 := $trunc.i32.i16($i62);
  /* call void @llvm.dbg.value(metadata i16 %70, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i63);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 795, 7} true;
  assume {:verifier.code 0} true;
  /* %71 = sext i16 %59 to i32, !dbg !119, !verifier.code !62 */
  $i64 := $sext.i16.i32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 795, 9} true;
  assume {:verifier.code 0} true;
  /* %72 = icmp slt i32 %71, 0, !dbg !121, !verifier.code !62 */
  $i65 := $slt.i32($i64, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 795, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %72, label %73, label %84, !dbg !122, !verifier.code !62 */
  $i66 := $i63;
  assume {:branchcond $i65} true;
  goto $bb19, $bb20;
$bb13:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 15} true;
  assume {:verifier.code 0} true;
  assume ($i39 == 1);
  goto $bb14;
$bb14:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 786, 9} true;
  assume {:verifier.code 0} true;
  /* %48 = sext i16 %38 to i32, !dbg !105, !verifier.code !62 */
  $i43 := $sext.i16.i32($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 786, 9} true;
  assume {:verifier.code 0} true;
  /* %49 = add nsw i32 %48, 1, !dbg !105, !verifier.code !62 */
  $i44 := $add.i32($i43, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 786, 9} true;
  assume {:verifier.code 0} true;
  /* %50 = trunc i32 %49 to i16, !dbg !105, !verifier.code !62 */
  $i45 := $trunc.i32.i16($i44);
  /* call void @llvm.dbg.value(metadata i16 %50, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i45);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 787, 5} true;
  assume {:verifier.code 0} true;
  /* br label %51, !dbg !107, !verifier.code !62 */
  $i42 := $i45;
  goto $bb18;
$bb15:
  assume !(($i39 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 18} true;
  assume {:verifier.code 0} true;
  /* %45 = sext i16 %34 to i32, !dbg !102, !verifier.code !62 */
  $i40 := $sext.i16.i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 20} true;
  assume {:verifier.code 0} true;
  /* %46 = icmp sgt i32 %45, 32767, !dbg !103, !verifier.code !62 */
  $i41 := $sgt.i32($i40, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %46, label %47, label %51, !dbg !104, !verifier.code !62 */
  $i42 := $i34;
  assume {:branchcond $i41} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 9} true;
  assume {:verifier.code 0} true;
  assume ($i41 == 1);
  goto $bb14;
$bb17:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i41 == 1));
  goto $bb18;
$bb18:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.2 = phi i16 [ %50, %47 ], [ %38, %44 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.2, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 788, 3} true;
  assume {:verifier.code 0} true;
  /* br label %52, !dbg !108, !verifier.code !62 */
  $i37 := $i42;
  goto $bb12;
$bb19:
  assume ($i65 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 9} true;
  assume {:verifier.code 0} true;
  /* %74 = sext i16 %66 to i32, !dbg !123, !verifier.code !62 */
  $i67 := $sext.i16.i32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 11} true;
  assume {:verifier.code 0} true;
  /* %75 = icmp slt i32 %74, 0, !dbg !126, !verifier.code !62 */
  $i68 := $slt.i32($i67, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %75, label %79, label %76, !dbg !127, !verifier.code !62 */
  assume {:branchcond $i68} true;
  goto $bb22, $bb24;
$bb20:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 795, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i65 == 1));
  goto $bb21;
$bb21:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.5 = phi i16 [ %.4, %83 ], [ %70, %52 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.5, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 800, 7} true;
  assume {:verifier.code 0} true;
  /* %85 = sext i16 %59 to i32, !dbg !135, !verifier.code !62 */
  $i75 := $sext.i16.i32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 800, 9} true;
  assume {:verifier.code 0} true;
  /* %86 = srem i32 %85, 32768, !dbg !136, !verifier.code !62 */
  $i76 := $srem.i32($i75, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 800, 7} true;
  assume {:verifier.code 0} true;
  /* %87 = trunc i32 %86 to i16, !dbg !135, !verifier.code !62 */
  $i77 := $trunc.i32.i16($i76);
  /* call void @llvm.dbg.value(metadata i16 %87, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 801, 8} true;
  assume {:verifier.code 0} true;
  /* %88 = sext i16 %87 to i32, !dbg !137, !verifier.code !62 */
  $i78 := $sext.i16.i32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 801, 5} true;
  assume {:verifier.code 0} true;
  /* %89 = sext i16 %87 to i32, !dbg !138, !verifier.code !62 */
  $i79 := $sext.i16.i32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 801, 5} true;
  assume {:verifier.code 0} true;
  /* %90 = add nsw i32 %89, %88, !dbg !138, !verifier.code !62 */
  $i80 := $add.i32($i79, $i78);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 801, 5} true;
  assume {:verifier.code 0} true;
  /* %91 = trunc i32 %90 to i16, !dbg !138, !verifier.code !62 */
  $i81 := $trunc.i32.i16($i80);
  /* call void @llvm.dbg.value(metadata i16 %91, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 802, 7} true;
  assume {:verifier.code 0} true;
  /* %92 = sext i16 %66 to i32, !dbg !139, !verifier.code !62 */
  $i82 := $sext.i16.i32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 802, 9} true;
  assume {:verifier.code 0} true;
  /* %93 = srem i32 %92, 32768, !dbg !140, !verifier.code !62 */
  $i83 := $srem.i32($i82, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 802, 7} true;
  assume {:verifier.code 0} true;
  /* %94 = trunc i32 %93 to i16, !dbg !139, !verifier.code !62 */
  $i84 := $trunc.i32.i16($i83);
  /* call void @llvm.dbg.value(metadata i16 %94, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 803, 8} true;
  assume {:verifier.code 0} true;
  /* %95 = sext i16 %94 to i32, !dbg !141, !verifier.code !62 */
  $i85 := $sext.i16.i32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 803, 5} true;
  assume {:verifier.code 0} true;
  /* %96 = sext i16 %94 to i32, !dbg !142, !verifier.code !62 */
  $i86 := $sext.i16.i32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 803, 5} true;
  assume {:verifier.code 0} true;
  /* %97 = add nsw i32 %96, %95, !dbg !142, !verifier.code !62 */
  $i87 := $add.i32($i86, $i85);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 803, 5} true;
  assume {:verifier.code 0} true;
  /* %98 = trunc i32 %97 to i16, !dbg !142, !verifier.code !62 */
  $i88 := $trunc.i32.i16($i87);
  /* call void @llvm.dbg.value(metadata i16 %98, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 8} true;
  assume {:verifier.code 0} true;
  /* %99 = sext i16 %.5 to i32, !dbg !143, !verifier.code !62 */
  $i89 := $sext.i16.i32($i66);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 5} true;
  assume {:verifier.code 0} true;
  /* %100 = sext i16 %.5 to i32, !dbg !144, !verifier.code !62 */
  $i90 := $sext.i16.i32($i66);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 5} true;
  assume {:verifier.code 0} true;
  /* %101 = add nsw i32 %100, %99, !dbg !144, !verifier.code !62 */
  $i91 := $add.i32($i90, $i89);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 5} true;
  assume {:verifier.code 0} true;
  /* %102 = trunc i32 %101 to i16, !dbg !144, !verifier.code !62 */
  $i92 := $trunc.i32.i16($i91);
  /* call void @llvm.dbg.value(metadata i16 %102, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 7} true;
  assume {:verifier.code 0} true;
  /* %103 = sext i16 %91 to i32, !dbg !145, !verifier.code !62 */
  $i93 := $sext.i16.i32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 9} true;
  assume {:verifier.code 0} true;
  /* %104 = icmp slt i32 %103, 0, !dbg !147, !verifier.code !62 */
  $i94 := $slt.i32($i93, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %104, label %105, label %116, !dbg !148, !verifier.code !62 */
  $i95 := $i92;
  assume {:branchcond $i94} true;
  goto $bb28, $bb29;
$bb22:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 15} true;
  assume {:verifier.code 0} true;
  assume ($i68 == 1);
  goto $bb23;
$bb23:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 797, 9} true;
  assume {:verifier.code 0} true;
  /* %80 = sext i16 %70 to i32, !dbg !131, !verifier.code !62 */
  $i72 := $sext.i16.i32($i63);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 797, 9} true;
  assume {:verifier.code 0} true;
  /* %81 = add nsw i32 %80, 1, !dbg !131, !verifier.code !62 */
  $i73 := $add.i32($i72, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 797, 9} true;
  assume {:verifier.code 0} true;
  /* %82 = trunc i32 %81 to i16, !dbg !131, !verifier.code !62 */
  $i74 := $trunc.i32.i16($i73);
  /* call void @llvm.dbg.value(metadata i16 %82, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i74);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 798, 5} true;
  assume {:verifier.code 0} true;
  /* br label %83, !dbg !133, !verifier.code !62 */
  $i71 := $i74;
  goto $bb27;
$bb24:
  assume !(($i68 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 18} true;
  assume {:verifier.code 0} true;
  /* %77 = sext i16 %66 to i32, !dbg !128, !verifier.code !62 */
  $i69 := $sext.i16.i32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 20} true;
  assume {:verifier.code 0} true;
  /* %78 = icmp sgt i32 %77, 32767, !dbg !129, !verifier.code !62 */
  $i70 := $sgt.i32($i69, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %78, label %79, label %83, !dbg !130, !verifier.code !62 */
  $i71 := $i63;
  assume {:branchcond $i70} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 9} true;
  assume {:verifier.code 0} true;
  assume ($i70 == 1);
  goto $bb23;
$bb26:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i70 == 1));
  goto $bb27;
$bb27:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.4 = phi i16 [ %82, %79 ], [ %70, %76 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.4, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 799, 3} true;
  assume {:verifier.code 0} true;
  /* br label %84, !dbg !134, !verifier.code !62 */
  $i66 := $i71;
  goto $bb21;
$bb28:
  assume ($i94 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 9} true;
  assume {:verifier.code 0} true;
  /* %106 = sext i16 %98 to i32, !dbg !149, !verifier.code !62 */
  $i96 := $sext.i16.i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 11} true;
  assume {:verifier.code 0} true;
  /* %107 = icmp slt i32 %106, 0, !dbg !152, !verifier.code !62 */
  $i97 := $slt.i32($i96, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %107, label %111, label %108, !dbg !153, !verifier.code !62 */
  assume {:branchcond $i97} true;
  goto $bb31, $bb33;
$bb29:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i94 == 1));
  goto $bb30;
$bb30:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.7 = phi i16 [ %.6, %115 ], [ %102, %84 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.7, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 811, 7} true;
  assume {:verifier.code 0} true;
  /* %117 = sext i16 %91 to i32, !dbg !161, !verifier.code !62 */
  $i104 := $sext.i16.i32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 811, 9} true;
  assume {:verifier.code 0} true;
  /* %118 = srem i32 %117, 32768, !dbg !162, !verifier.code !62 */
  $i105 := $srem.i32($i104, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 811, 7} true;
  assume {:verifier.code 0} true;
  /* %119 = trunc i32 %118 to i16, !dbg !161, !verifier.code !62 */
  $i106 := $trunc.i32.i16($i105);
  /* call void @llvm.dbg.value(metadata i16 %119, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 812, 8} true;
  assume {:verifier.code 0} true;
  /* %120 = sext i16 %119 to i32, !dbg !163, !verifier.code !62 */
  $i107 := $sext.i16.i32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 812, 5} true;
  assume {:verifier.code 0} true;
  /* %121 = sext i16 %119 to i32, !dbg !164, !verifier.code !62 */
  $i108 := $sext.i16.i32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 812, 5} true;
  assume {:verifier.code 0} true;
  /* %122 = add nsw i32 %121, %120, !dbg !164, !verifier.code !62 */
  $i109 := $add.i32($i108, $i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 812, 5} true;
  assume {:verifier.code 0} true;
  /* %123 = trunc i32 %122 to i16, !dbg !164, !verifier.code !62 */
  $i110 := $trunc.i32.i16($i109);
  /* call void @llvm.dbg.value(metadata i16 %123, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 813, 7} true;
  assume {:verifier.code 0} true;
  /* %124 = sext i16 %98 to i32, !dbg !165, !verifier.code !62 */
  $i111 := $sext.i16.i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 813, 9} true;
  assume {:verifier.code 0} true;
  /* %125 = srem i32 %124, 32768, !dbg !166, !verifier.code !62 */
  $i112 := $srem.i32($i111, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 813, 7} true;
  assume {:verifier.code 0} true;
  /* %126 = trunc i32 %125 to i16, !dbg !165, !verifier.code !62 */
  $i113 := $trunc.i32.i16($i112);
  /* call void @llvm.dbg.value(metadata i16 %126, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 814, 8} true;
  assume {:verifier.code 0} true;
  /* %127 = sext i16 %126 to i32, !dbg !167, !verifier.code !62 */
  $i114 := $sext.i16.i32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 814, 5} true;
  assume {:verifier.code 0} true;
  /* %128 = sext i16 %126 to i32, !dbg !168, !verifier.code !62 */
  $i115 := $sext.i16.i32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 814, 5} true;
  assume {:verifier.code 0} true;
  /* %129 = add nsw i32 %128, %127, !dbg !168, !verifier.code !62 */
  $i116 := $add.i32($i115, $i114);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 814, 5} true;
  assume {:verifier.code 0} true;
  /* %130 = trunc i32 %129 to i16, !dbg !168, !verifier.code !62 */
  $i117 := $trunc.i32.i16($i116);
  /* call void @llvm.dbg.value(metadata i16 %130, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 816, 8} true;
  assume {:verifier.code 0} true;
  /* %131 = sext i16 %.7 to i32, !dbg !169, !verifier.code !62 */
  $i118 := $sext.i16.i32($i95);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 816, 5} true;
  assume {:verifier.code 0} true;
  /* %132 = sext i16 %.7 to i32, !dbg !170, !verifier.code !62 */
  $i119 := $sext.i16.i32($i95);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 816, 5} true;
  assume {:verifier.code 0} true;
  /* %133 = add nsw i32 %132, %131, !dbg !170, !verifier.code !62 */
  $i120 := $add.i32($i119, $i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 816, 5} true;
  assume {:verifier.code 0} true;
  /* %134 = trunc i32 %133 to i16, !dbg !170, !verifier.code !62 */
  $i121 := $trunc.i32.i16($i120);
  /* call void @llvm.dbg.value(metadata i16 %134, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 817, 7} true;
  assume {:verifier.code 0} true;
  /* %135 = sext i16 %123 to i32, !dbg !171, !verifier.code !62 */
  $i122 := $sext.i16.i32($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 817, 9} true;
  assume {:verifier.code 0} true;
  /* %136 = icmp slt i32 %135, 0, !dbg !173, !verifier.code !62 */
  $i123 := $slt.i32($i122, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 817, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %136, label %137, label %148, !dbg !174, !verifier.code !62 */
  $i124 := $i121;
  assume {:branchcond $i123} true;
  goto $bb37, $bb38;
$bb31:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 15} true;
  assume {:verifier.code 0} true;
  assume ($i97 == 1);
  goto $bb32;
$bb32:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 808, 9} true;
  assume {:verifier.code 0} true;
  /* %112 = sext i16 %102 to i32, !dbg !157, !verifier.code !62 */
  $i101 := $sext.i16.i32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 808, 9} true;
  assume {:verifier.code 0} true;
  /* %113 = add nsw i32 %112, 1, !dbg !157, !verifier.code !62 */
  $i102 := $add.i32($i101, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 808, 9} true;
  assume {:verifier.code 0} true;
  /* %114 = trunc i32 %113 to i16, !dbg !157, !verifier.code !62 */
  $i103 := $trunc.i32.i16($i102);
  /* call void @llvm.dbg.value(metadata i16 %114, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 809, 5} true;
  assume {:verifier.code 0} true;
  /* br label %115, !dbg !159, !verifier.code !62 */
  $i100 := $i103;
  goto $bb36;
$bb33:
  assume !(($i97 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 18} true;
  assume {:verifier.code 0} true;
  /* %109 = sext i16 %98 to i32, !dbg !154, !verifier.code !62 */
  $i98 := $sext.i16.i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 20} true;
  assume {:verifier.code 0} true;
  /* %110 = icmp sgt i32 %109, 32767, !dbg !155, !verifier.code !62 */
  $i99 := $sgt.i32($i98, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %110, label %111, label %115, !dbg !156, !verifier.code !62 */
  $i100 := $i92;
  assume {:branchcond $i99} true;
  goto $bb34, $bb35;
$bb34:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 9} true;
  assume {:verifier.code 0} true;
  assume ($i99 == 1);
  goto $bb32;
$bb35:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i99 == 1));
  goto $bb36;
$bb36:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.6 = phi i16 [ %114, %111 ], [ %102, %108 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.6, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 810, 3} true;
  assume {:verifier.code 0} true;
  /* br label %116, !dbg !160, !verifier.code !62 */
  $i95 := $i100;
  goto $bb30;
$bb37:
  assume ($i123 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 9} true;
  assume {:verifier.code 0} true;
  /* %138 = sext i16 %130 to i32, !dbg !175, !verifier.code !62 */
  $i125 := $sext.i16.i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 11} true;
  assume {:verifier.code 0} true;
  /* %139 = icmp slt i32 %138, 0, !dbg !178, !verifier.code !62 */
  $i126 := $slt.i32($i125, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %139, label %143, label %140, !dbg !179, !verifier.code !62 */
  assume {:branchcond $i126} true;
  goto $bb40, $bb42;
$bb38:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 817, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i123 == 1));
  goto $bb39;
$bb39:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.9 = phi i16 [ %.8, %147 ], [ %134, %116 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.9, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 822, 7} true;
  assume {:verifier.code 0} true;
  /* %149 = sext i16 %123 to i32, !dbg !187, !verifier.code !62 */
  $i133 := $sext.i16.i32($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 822, 9} true;
  assume {:verifier.code 0} true;
  /* %150 = srem i32 %149, 32768, !dbg !188, !verifier.code !62 */
  $i134 := $srem.i32($i133, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 822, 7} true;
  assume {:verifier.code 0} true;
  /* %151 = trunc i32 %150 to i16, !dbg !187, !verifier.code !62 */
  $i135 := $trunc.i32.i16($i134);
  /* call void @llvm.dbg.value(metadata i16 %151, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 823, 8} true;
  assume {:verifier.code 0} true;
  /* %152 = sext i16 %151 to i32, !dbg !189, !verifier.code !62 */
  $i136 := $sext.i16.i32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 823, 5} true;
  assume {:verifier.code 0} true;
  /* %153 = sext i16 %151 to i32, !dbg !190, !verifier.code !62 */
  $i137 := $sext.i16.i32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 823, 5} true;
  assume {:verifier.code 0} true;
  /* %154 = add nsw i32 %153, %152, !dbg !190, !verifier.code !62 */
  $i138 := $add.i32($i137, $i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 823, 5} true;
  assume {:verifier.code 0} true;
  /* %155 = trunc i32 %154 to i16, !dbg !190, !verifier.code !62 */
  $i139 := $trunc.i32.i16($i138);
  /* call void @llvm.dbg.value(metadata i16 %155, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 824, 7} true;
  assume {:verifier.code 0} true;
  /* %156 = sext i16 %130 to i32, !dbg !191, !verifier.code !62 */
  $i140 := $sext.i16.i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 824, 9} true;
  assume {:verifier.code 0} true;
  /* %157 = srem i32 %156, 32768, !dbg !192, !verifier.code !62 */
  $i141 := $srem.i32($i140, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 824, 7} true;
  assume {:verifier.code 0} true;
  /* %158 = trunc i32 %157 to i16, !dbg !191, !verifier.code !62 */
  $i142 := $trunc.i32.i16($i141);
  /* call void @llvm.dbg.value(metadata i16 %158, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 825, 8} true;
  assume {:verifier.code 0} true;
  /* %159 = sext i16 %158 to i32, !dbg !193, !verifier.code !62 */
  $i143 := $sext.i16.i32($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 825, 5} true;
  assume {:verifier.code 0} true;
  /* %160 = sext i16 %158 to i32, !dbg !194, !verifier.code !62 */
  $i144 := $sext.i16.i32($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 825, 5} true;
  assume {:verifier.code 0} true;
  /* %161 = add nsw i32 %160, %159, !dbg !194, !verifier.code !62 */
  $i145 := $add.i32($i144, $i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 825, 5} true;
  assume {:verifier.code 0} true;
  /* %162 = trunc i32 %161 to i16, !dbg !194, !verifier.code !62 */
  $i146 := $trunc.i32.i16($i145);
  /* call void @llvm.dbg.value(metadata i16 %162, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 8} true;
  assume {:verifier.code 0} true;
  /* %163 = sext i16 %.9 to i32, !dbg !195, !verifier.code !62 */
  $i147 := $sext.i16.i32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 5} true;
  assume {:verifier.code 0} true;
  /* %164 = sext i16 %.9 to i32, !dbg !196, !verifier.code !62 */
  $i148 := $sext.i16.i32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 5} true;
  assume {:verifier.code 0} true;
  /* %165 = add nsw i32 %164, %163, !dbg !196, !verifier.code !62 */
  $i149 := $add.i32($i148, $i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 5} true;
  assume {:verifier.code 0} true;
  /* %166 = trunc i32 %165 to i16, !dbg !196, !verifier.code !62 */
  $i150 := $trunc.i32.i16($i149);
  /* call void @llvm.dbg.value(metadata i16 %166, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 7} true;
  assume {:verifier.code 0} true;
  /* %167 = sext i16 %155 to i32, !dbg !197, !verifier.code !62 */
  $i151 := $sext.i16.i32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 9} true;
  assume {:verifier.code 0} true;
  /* %168 = icmp slt i32 %167, 0, !dbg !199, !verifier.code !62 */
  $i152 := $slt.i32($i151, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %168, label %169, label %180, !dbg !200, !verifier.code !62 */
  $i153 := $i150;
  assume {:branchcond $i152} true;
  goto $bb46, $bb47;
$bb40:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 15} true;
  assume {:verifier.code 0} true;
  assume ($i126 == 1);
  goto $bb41;
$bb41:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 819, 9} true;
  assume {:verifier.code 0} true;
  /* %144 = sext i16 %134 to i32, !dbg !183, !verifier.code !62 */
  $i130 := $sext.i16.i32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 819, 9} true;
  assume {:verifier.code 0} true;
  /* %145 = add nsw i32 %144, 1, !dbg !183, !verifier.code !62 */
  $i131 := $add.i32($i130, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 819, 9} true;
  assume {:verifier.code 0} true;
  /* %146 = trunc i32 %145 to i16, !dbg !183, !verifier.code !62 */
  $i132 := $trunc.i32.i16($i131);
  /* call void @llvm.dbg.value(metadata i16 %146, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 820, 5} true;
  assume {:verifier.code 0} true;
  /* br label %147, !dbg !185, !verifier.code !62 */
  $i129 := $i132;
  goto $bb45;
$bb42:
  assume !(($i126 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 18} true;
  assume {:verifier.code 0} true;
  /* %141 = sext i16 %130 to i32, !dbg !180, !verifier.code !62 */
  $i127 := $sext.i16.i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 20} true;
  assume {:verifier.code 0} true;
  /* %142 = icmp sgt i32 %141, 32767, !dbg !181, !verifier.code !62 */
  $i128 := $sgt.i32($i127, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %142, label %143, label %147, !dbg !182, !verifier.code !62 */
  $i129 := $i121;
  assume {:branchcond $i128} true;
  goto $bb43, $bb44;
$bb43:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 9} true;
  assume {:verifier.code 0} true;
  assume ($i128 == 1);
  goto $bb41;
$bb44:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i128 == 1));
  goto $bb45;
$bb45:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.8 = phi i16 [ %146, %143 ], [ %134, %140 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.8, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 821, 3} true;
  assume {:verifier.code 0} true;
  /* br label %148, !dbg !186, !verifier.code !62 */
  $i124 := $i129;
  goto $bb39;
$bb46:
  assume ($i152 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 9} true;
  assume {:verifier.code 0} true;
  /* %170 = sext i16 %162 to i32, !dbg !201, !verifier.code !62 */
  $i154 := $sext.i16.i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 11} true;
  assume {:verifier.code 0} true;
  /* %171 = icmp slt i32 %170, 0, !dbg !204, !verifier.code !62 */
  $i155 := $slt.i32($i154, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %171, label %175, label %172, !dbg !205, !verifier.code !62 */
  assume {:branchcond $i155} true;
  goto $bb49, $bb51;
$bb47:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i152 == 1));
  goto $bb48;
$bb48:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.11 = phi i16 [ %.10, %179 ], [ %166, %148 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.11, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 833, 7} true;
  assume {:verifier.code 0} true;
  /* %181 = sext i16 %155 to i32, !dbg !213, !verifier.code !62 */
  $i162 := $sext.i16.i32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 833, 9} true;
  assume {:verifier.code 0} true;
  /* %182 = srem i32 %181, 32768, !dbg !214, !verifier.code !62 */
  $i163 := $srem.i32($i162, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 833, 7} true;
  assume {:verifier.code 0} true;
  /* %183 = trunc i32 %182 to i16, !dbg !213, !verifier.code !62 */
  $i164 := $trunc.i32.i16($i163);
  /* call void @llvm.dbg.value(metadata i16 %183, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 834, 8} true;
  assume {:verifier.code 0} true;
  /* %184 = sext i16 %183 to i32, !dbg !215, !verifier.code !62 */
  $i165 := $sext.i16.i32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 834, 5} true;
  assume {:verifier.code 0} true;
  /* %185 = sext i16 %183 to i32, !dbg !216, !verifier.code !62 */
  $i166 := $sext.i16.i32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 834, 5} true;
  assume {:verifier.code 0} true;
  /* %186 = add nsw i32 %185, %184, !dbg !216, !verifier.code !62 */
  $i167 := $add.i32($i166, $i165);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 834, 5} true;
  assume {:verifier.code 0} true;
  /* %187 = trunc i32 %186 to i16, !dbg !216, !verifier.code !62 */
  $i168 := $trunc.i32.i16($i167);
  /* call void @llvm.dbg.value(metadata i16 %187, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 835, 7} true;
  assume {:verifier.code 0} true;
  /* %188 = sext i16 %162 to i32, !dbg !217, !verifier.code !62 */
  $i169 := $sext.i16.i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 835, 9} true;
  assume {:verifier.code 0} true;
  /* %189 = srem i32 %188, 32768, !dbg !218, !verifier.code !62 */
  $i170 := $srem.i32($i169, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 835, 7} true;
  assume {:verifier.code 0} true;
  /* %190 = trunc i32 %189 to i16, !dbg !217, !verifier.code !62 */
  $i171 := $trunc.i32.i16($i170);
  /* call void @llvm.dbg.value(metadata i16 %190, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 836, 8} true;
  assume {:verifier.code 0} true;
  /* %191 = sext i16 %190 to i32, !dbg !219, !verifier.code !62 */
  $i172 := $sext.i16.i32($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 836, 5} true;
  assume {:verifier.code 0} true;
  /* %192 = sext i16 %190 to i32, !dbg !220, !verifier.code !62 */
  $i173 := $sext.i16.i32($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 836, 5} true;
  assume {:verifier.code 0} true;
  /* %193 = add nsw i32 %192, %191, !dbg !220, !verifier.code !62 */
  $i174 := $add.i32($i173, $i172);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 836, 5} true;
  assume {:verifier.code 0} true;
  /* %194 = trunc i32 %193 to i16, !dbg !220, !verifier.code !62 */
  $i175 := $trunc.i32.i16($i174);
  /* call void @llvm.dbg.value(metadata i16 %194, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 838, 8} true;
  assume {:verifier.code 0} true;
  /* %195 = sext i16 %.11 to i32, !dbg !221, !verifier.code !62 */
  $i176 := $sext.i16.i32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 838, 5} true;
  assume {:verifier.code 0} true;
  /* %196 = sext i16 %.11 to i32, !dbg !222, !verifier.code !62 */
  $i177 := $sext.i16.i32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 838, 5} true;
  assume {:verifier.code 0} true;
  /* %197 = add nsw i32 %196, %195, !dbg !222, !verifier.code !62 */
  $i178 := $add.i32($i177, $i176);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 838, 5} true;
  assume {:verifier.code 0} true;
  /* %198 = trunc i32 %197 to i16, !dbg !222, !verifier.code !62 */
  $i179 := $trunc.i32.i16($i178);
  /* call void @llvm.dbg.value(metadata i16 %198, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i179);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 839, 7} true;
  assume {:verifier.code 0} true;
  /* %199 = sext i16 %187 to i32, !dbg !223, !verifier.code !62 */
  $i180 := $sext.i16.i32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 839, 9} true;
  assume {:verifier.code 0} true;
  /* %200 = icmp slt i32 %199, 0, !dbg !225, !verifier.code !62 */
  $i181 := $slt.i32($i180, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 839, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %200, label %201, label %212, !dbg !226, !verifier.code !62 */
  $i182 := $i179;
  assume {:branchcond $i181} true;
  goto $bb55, $bb56;
$bb49:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 15} true;
  assume {:verifier.code 0} true;
  assume ($i155 == 1);
  goto $bb50;
$bb50:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 830, 9} true;
  assume {:verifier.code 0} true;
  /* %176 = sext i16 %166 to i32, !dbg !209, !verifier.code !62 */
  $i159 := $sext.i16.i32($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 830, 9} true;
  assume {:verifier.code 0} true;
  /* %177 = add nsw i32 %176, 1, !dbg !209, !verifier.code !62 */
  $i160 := $add.i32($i159, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 830, 9} true;
  assume {:verifier.code 0} true;
  /* %178 = trunc i32 %177 to i16, !dbg !209, !verifier.code !62 */
  $i161 := $trunc.i32.i16($i160);
  /* call void @llvm.dbg.value(metadata i16 %178, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i161);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 831, 5} true;
  assume {:verifier.code 0} true;
  /* br label %179, !dbg !211, !verifier.code !62 */
  $i158 := $i161;
  goto $bb54;
$bb51:
  assume !(($i155 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 18} true;
  assume {:verifier.code 0} true;
  /* %173 = sext i16 %162 to i32, !dbg !206, !verifier.code !62 */
  $i156 := $sext.i16.i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 20} true;
  assume {:verifier.code 0} true;
  /* %174 = icmp sgt i32 %173, 32767, !dbg !207, !verifier.code !62 */
  $i157 := $sgt.i32($i156, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %174, label %175, label %179, !dbg !208, !verifier.code !62 */
  $i158 := $i150;
  assume {:branchcond $i157} true;
  goto $bb52, $bb53;
$bb52:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 9} true;
  assume {:verifier.code 0} true;
  assume ($i157 == 1);
  goto $bb50;
$bb53:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i157 == 1));
  goto $bb54;
$bb54:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.10 = phi i16 [ %178, %175 ], [ %166, %172 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.10, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 832, 3} true;
  assume {:verifier.code 0} true;
  /* br label %180, !dbg !212, !verifier.code !62 */
  $i153 := $i158;
  goto $bb48;
$bb55:
  assume ($i181 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 9} true;
  assume {:verifier.code 0} true;
  /* %202 = sext i16 %194 to i32, !dbg !227, !verifier.code !62 */
  $i183 := $sext.i16.i32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 11} true;
  assume {:verifier.code 0} true;
  /* %203 = icmp slt i32 %202, 0, !dbg !230, !verifier.code !62 */
  $i184 := $slt.i32($i183, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %203, label %207, label %204, !dbg !231, !verifier.code !62 */
  assume {:branchcond $i184} true;
  goto $bb58, $bb60;
$bb56:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 839, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i181 == 1));
  goto $bb57;
$bb57:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.13 = phi i16 [ %.12, %211 ], [ %198, %180 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.13, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 844, 7} true;
  assume {:verifier.code 0} true;
  /* %213 = sext i16 %187 to i32, !dbg !239, !verifier.code !62 */
  $i191 := $sext.i16.i32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 844, 9} true;
  assume {:verifier.code 0} true;
  /* %214 = srem i32 %213, 32768, !dbg !240, !verifier.code !62 */
  $i192 := $srem.i32($i191, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 844, 7} true;
  assume {:verifier.code 0} true;
  /* %215 = trunc i32 %214 to i16, !dbg !239, !verifier.code !62 */
  $i193 := $trunc.i32.i16($i192);
  /* call void @llvm.dbg.value(metadata i16 %215, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 845, 8} true;
  assume {:verifier.code 0} true;
  /* %216 = sext i16 %215 to i32, !dbg !241, !verifier.code !62 */
  $i194 := $sext.i16.i32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 845, 5} true;
  assume {:verifier.code 0} true;
  /* %217 = sext i16 %215 to i32, !dbg !242, !verifier.code !62 */
  $i195 := $sext.i16.i32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 845, 5} true;
  assume {:verifier.code 0} true;
  /* %218 = add nsw i32 %217, %216, !dbg !242, !verifier.code !62 */
  $i196 := $add.i32($i195, $i194);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 845, 5} true;
  assume {:verifier.code 0} true;
  /* %219 = trunc i32 %218 to i16, !dbg !242, !verifier.code !62 */
  $i197 := $trunc.i32.i16($i196);
  /* call void @llvm.dbg.value(metadata i16 %219, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 846, 7} true;
  assume {:verifier.code 0} true;
  /* %220 = sext i16 %194 to i32, !dbg !243, !verifier.code !62 */
  $i198 := $sext.i16.i32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 846, 9} true;
  assume {:verifier.code 0} true;
  /* %221 = srem i32 %220, 32768, !dbg !244, !verifier.code !62 */
  $i199 := $srem.i32($i198, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 846, 7} true;
  assume {:verifier.code 0} true;
  /* %222 = trunc i32 %221 to i16, !dbg !243, !verifier.code !62 */
  $i200 := $trunc.i32.i16($i199);
  /* call void @llvm.dbg.value(metadata i16 %222, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 847, 8} true;
  assume {:verifier.code 0} true;
  /* %223 = sext i16 %222 to i32, !dbg !245, !verifier.code !62 */
  $i201 := $sext.i16.i32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 847, 5} true;
  assume {:verifier.code 0} true;
  /* %224 = sext i16 %222 to i32, !dbg !246, !verifier.code !62 */
  $i202 := $sext.i16.i32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 847, 5} true;
  assume {:verifier.code 0} true;
  /* %225 = add nsw i32 %224, %223, !dbg !246, !verifier.code !62 */
  $i203 := $add.i32($i202, $i201);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 847, 5} true;
  assume {:verifier.code 0} true;
  /* %226 = trunc i32 %225 to i16, !dbg !246, !verifier.code !62 */
  $i204 := $trunc.i32.i16($i203);
  /* call void @llvm.dbg.value(metadata i16 %226, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 8} true;
  assume {:verifier.code 0} true;
  /* %227 = sext i16 %.13 to i32, !dbg !247, !verifier.code !62 */
  $i205 := $sext.i16.i32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 5} true;
  assume {:verifier.code 0} true;
  /* %228 = sext i16 %.13 to i32, !dbg !248, !verifier.code !62 */
  $i206 := $sext.i16.i32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 5} true;
  assume {:verifier.code 0} true;
  /* %229 = add nsw i32 %228, %227, !dbg !248, !verifier.code !62 */
  $i207 := $add.i32($i206, $i205);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 5} true;
  assume {:verifier.code 0} true;
  /* %230 = trunc i32 %229 to i16, !dbg !248, !verifier.code !62 */
  $i208 := $trunc.i32.i16($i207);
  /* call void @llvm.dbg.value(metadata i16 %230, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 7} true;
  assume {:verifier.code 0} true;
  /* %231 = sext i16 %219 to i32, !dbg !249, !verifier.code !62 */
  $i209 := $sext.i16.i32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 9} true;
  assume {:verifier.code 0} true;
  /* %232 = icmp slt i32 %231, 0, !dbg !251, !verifier.code !62 */
  $i210 := $slt.i32($i209, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %232, label %233, label %244, !dbg !252, !verifier.code !62 */
  $i211 := $i208;
  assume {:branchcond $i210} true;
  goto $bb64, $bb65;
$bb58:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 15} true;
  assume {:verifier.code 0} true;
  assume ($i184 == 1);
  goto $bb59;
$bb59:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 841, 9} true;
  assume {:verifier.code 0} true;
  /* %208 = sext i16 %198 to i32, !dbg !235, !verifier.code !62 */
  $i188 := $sext.i16.i32($i179);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 841, 9} true;
  assume {:verifier.code 0} true;
  /* %209 = add nsw i32 %208, 1, !dbg !235, !verifier.code !62 */
  $i189 := $add.i32($i188, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 841, 9} true;
  assume {:verifier.code 0} true;
  /* %210 = trunc i32 %209 to i16, !dbg !235, !verifier.code !62 */
  $i190 := $trunc.i32.i16($i189);
  /* call void @llvm.dbg.value(metadata i16 %210, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i190);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 842, 5} true;
  assume {:verifier.code 0} true;
  /* br label %211, !dbg !237, !verifier.code !62 */
  $i187 := $i190;
  goto $bb63;
$bb60:
  assume !(($i184 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 18} true;
  assume {:verifier.code 0} true;
  /* %205 = sext i16 %194 to i32, !dbg !232, !verifier.code !62 */
  $i185 := $sext.i16.i32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 20} true;
  assume {:verifier.code 0} true;
  /* %206 = icmp sgt i32 %205, 32767, !dbg !233, !verifier.code !62 */
  $i186 := $sgt.i32($i185, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %206, label %207, label %211, !dbg !234, !verifier.code !62 */
  $i187 := $i179;
  assume {:branchcond $i186} true;
  goto $bb61, $bb62;
$bb61:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 9} true;
  assume {:verifier.code 0} true;
  assume ($i186 == 1);
  goto $bb59;
$bb62:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i186 == 1));
  goto $bb63;
$bb63:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.12 = phi i16 [ %210, %207 ], [ %198, %204 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.12, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 843, 3} true;
  assume {:verifier.code 0} true;
  /* br label %212, !dbg !238, !verifier.code !62 */
  $i182 := $i187;
  goto $bb57;
$bb64:
  assume ($i210 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 9} true;
  assume {:verifier.code 0} true;
  /* %234 = sext i16 %226 to i32, !dbg !253, !verifier.code !62 */
  $i212 := $sext.i16.i32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 11} true;
  assume {:verifier.code 0} true;
  /* %235 = icmp slt i32 %234, 0, !dbg !256, !verifier.code !62 */
  $i213 := $slt.i32($i212, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %235, label %239, label %236, !dbg !257, !verifier.code !62 */
  assume {:branchcond $i213} true;
  goto $bb67, $bb69;
$bb65:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i210 == 1));
  goto $bb66;
$bb66:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.15 = phi i16 [ %.14, %243 ], [ %230, %212 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.15, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 855, 7} true;
  assume {:verifier.code 0} true;
  /* %245 = sext i16 %219 to i32, !dbg !265, !verifier.code !62 */
  $i220 := $sext.i16.i32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 855, 9} true;
  assume {:verifier.code 0} true;
  /* %246 = srem i32 %245, 32768, !dbg !266, !verifier.code !62 */
  $i221 := $srem.i32($i220, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 855, 7} true;
  assume {:verifier.code 0} true;
  /* %247 = trunc i32 %246 to i16, !dbg !265, !verifier.code !62 */
  $i222 := $trunc.i32.i16($i221);
  /* call void @llvm.dbg.value(metadata i16 %247, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 856, 8} true;
  assume {:verifier.code 0} true;
  /* %248 = sext i16 %247 to i32, !dbg !267, !verifier.code !62 */
  $i223 := $sext.i16.i32($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 856, 5} true;
  assume {:verifier.code 0} true;
  /* %249 = sext i16 %247 to i32, !dbg !268, !verifier.code !62 */
  $i224 := $sext.i16.i32($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 856, 5} true;
  assume {:verifier.code 0} true;
  /* %250 = add nsw i32 %249, %248, !dbg !268, !verifier.code !62 */
  $i225 := $add.i32($i224, $i223);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 856, 5} true;
  assume {:verifier.code 0} true;
  /* %251 = trunc i32 %250 to i16, !dbg !268, !verifier.code !62 */
  $i226 := $trunc.i32.i16($i225);
  /* call void @llvm.dbg.value(metadata i16 %251, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 857, 7} true;
  assume {:verifier.code 0} true;
  /* %252 = sext i16 %226 to i32, !dbg !269, !verifier.code !62 */
  $i227 := $sext.i16.i32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 857, 9} true;
  assume {:verifier.code 0} true;
  /* %253 = srem i32 %252, 32768, !dbg !270, !verifier.code !62 */
  $i228 := $srem.i32($i227, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 857, 7} true;
  assume {:verifier.code 0} true;
  /* %254 = trunc i32 %253 to i16, !dbg !269, !verifier.code !62 */
  $i229 := $trunc.i32.i16($i228);
  /* call void @llvm.dbg.value(metadata i16 %254, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 858, 8} true;
  assume {:verifier.code 0} true;
  /* %255 = sext i16 %254 to i32, !dbg !271, !verifier.code !62 */
  $i230 := $sext.i16.i32($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 858, 5} true;
  assume {:verifier.code 0} true;
  /* %256 = sext i16 %254 to i32, !dbg !272, !verifier.code !62 */
  $i231 := $sext.i16.i32($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 858, 5} true;
  assume {:verifier.code 0} true;
  /* %257 = add nsw i32 %256, %255, !dbg !272, !verifier.code !62 */
  $i232 := $add.i32($i231, $i230);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 858, 5} true;
  assume {:verifier.code 0} true;
  /* %258 = trunc i32 %257 to i16, !dbg !272, !verifier.code !62 */
  $i233 := $trunc.i32.i16($i232);
  /* call void @llvm.dbg.value(metadata i16 %258, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 860, 8} true;
  assume {:verifier.code 0} true;
  /* %259 = sext i16 %.15 to i32, !dbg !273, !verifier.code !62 */
  $i234 := $sext.i16.i32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 860, 5} true;
  assume {:verifier.code 0} true;
  /* %260 = sext i16 %.15 to i32, !dbg !274, !verifier.code !62 */
  $i235 := $sext.i16.i32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 860, 5} true;
  assume {:verifier.code 0} true;
  /* %261 = add nsw i32 %260, %259, !dbg !274, !verifier.code !62 */
  $i236 := $add.i32($i235, $i234);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 860, 5} true;
  assume {:verifier.code 0} true;
  /* %262 = trunc i32 %261 to i16, !dbg !274, !verifier.code !62 */
  $i237 := $trunc.i32.i16($i236);
  /* call void @llvm.dbg.value(metadata i16 %262, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 861, 7} true;
  assume {:verifier.code 0} true;
  /* %263 = sext i16 %251 to i32, !dbg !275, !verifier.code !62 */
  $i238 := $sext.i16.i32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 861, 9} true;
  assume {:verifier.code 0} true;
  /* %264 = icmp slt i32 %263, 0, !dbg !277, !verifier.code !62 */
  $i239 := $slt.i32($i238, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 861, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %264, label %265, label %276, !dbg !278, !verifier.code !62 */
  $i240 := $i237;
  assume {:branchcond $i239} true;
  goto $bb73, $bb74;
$bb67:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 15} true;
  assume {:verifier.code 0} true;
  assume ($i213 == 1);
  goto $bb68;
$bb68:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 852, 9} true;
  assume {:verifier.code 0} true;
  /* %240 = sext i16 %230 to i32, !dbg !261, !verifier.code !62 */
  $i217 := $sext.i16.i32($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 852, 9} true;
  assume {:verifier.code 0} true;
  /* %241 = add nsw i32 %240, 1, !dbg !261, !verifier.code !62 */
  $i218 := $add.i32($i217, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 852, 9} true;
  assume {:verifier.code 0} true;
  /* %242 = trunc i32 %241 to i16, !dbg !261, !verifier.code !62 */
  $i219 := $trunc.i32.i16($i218);
  /* call void @llvm.dbg.value(metadata i16 %242, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 853, 5} true;
  assume {:verifier.code 0} true;
  /* br label %243, !dbg !263, !verifier.code !62 */
  $i216 := $i219;
  goto $bb72;
$bb69:
  assume !(($i213 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 18} true;
  assume {:verifier.code 0} true;
  /* %237 = sext i16 %226 to i32, !dbg !258, !verifier.code !62 */
  $i214 := $sext.i16.i32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 20} true;
  assume {:verifier.code 0} true;
  /* %238 = icmp sgt i32 %237, 32767, !dbg !259, !verifier.code !62 */
  $i215 := $sgt.i32($i214, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %238, label %239, label %243, !dbg !260, !verifier.code !62 */
  $i216 := $i208;
  assume {:branchcond $i215} true;
  goto $bb70, $bb71;
$bb70:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 9} true;
  assume {:verifier.code 0} true;
  assume ($i215 == 1);
  goto $bb68;
$bb71:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i215 == 1));
  goto $bb72;
$bb72:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.14 = phi i16 [ %242, %239 ], [ %230, %236 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.14, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 854, 3} true;
  assume {:verifier.code 0} true;
  /* br label %244, !dbg !264, !verifier.code !62 */
  $i211 := $i216;
  goto $bb66;
$bb73:
  assume ($i239 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 9} true;
  assume {:verifier.code 0} true;
  /* %266 = sext i16 %258 to i32, !dbg !279, !verifier.code !62 */
  $i241 := $sext.i16.i32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 11} true;
  assume {:verifier.code 0} true;
  /* %267 = icmp slt i32 %266, 0, !dbg !282, !verifier.code !62 */
  $i242 := $slt.i32($i241, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %267, label %271, label %268, !dbg !283, !verifier.code !62 */
  assume {:branchcond $i242} true;
  goto $bb76, $bb78;
$bb74:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 861, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i239 == 1));
  goto $bb75;
$bb75:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.17 = phi i16 [ %.16, %275 ], [ %262, %244 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.17, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 866, 7} true;
  assume {:verifier.code 0} true;
  /* %277 = sext i16 %251 to i32, !dbg !291, !verifier.code !62 */
  $i249 := $sext.i16.i32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 866, 9} true;
  assume {:verifier.code 0} true;
  /* %278 = srem i32 %277, 32768, !dbg !292, !verifier.code !62 */
  $i250 := $srem.i32($i249, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 866, 7} true;
  assume {:verifier.code 0} true;
  /* %279 = trunc i32 %278 to i16, !dbg !291, !verifier.code !62 */
  $i251 := $trunc.i32.i16($i250);
  /* call void @llvm.dbg.value(metadata i16 %279, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 867, 8} true;
  assume {:verifier.code 0} true;
  /* %280 = sext i16 %279 to i32, !dbg !293, !verifier.code !62 */
  $i252 := $sext.i16.i32($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 867, 5} true;
  assume {:verifier.code 0} true;
  /* %281 = sext i16 %279 to i32, !dbg !294, !verifier.code !62 */
  $i253 := $sext.i16.i32($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 867, 5} true;
  assume {:verifier.code 0} true;
  /* %282 = add nsw i32 %281, %280, !dbg !294, !verifier.code !62 */
  $i254 := $add.i32($i253, $i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 867, 5} true;
  assume {:verifier.code 0} true;
  /* %283 = trunc i32 %282 to i16, !dbg !294, !verifier.code !62 */
  $i255 := $trunc.i32.i16($i254);
  /* call void @llvm.dbg.value(metadata i16 %283, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i255);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 868, 7} true;
  assume {:verifier.code 0} true;
  /* %284 = sext i16 %258 to i32, !dbg !295, !verifier.code !62 */
  $i256 := $sext.i16.i32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 868, 9} true;
  assume {:verifier.code 0} true;
  /* %285 = srem i32 %284, 32768, !dbg !296, !verifier.code !62 */
  $i257 := $srem.i32($i256, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 868, 7} true;
  assume {:verifier.code 0} true;
  /* %286 = trunc i32 %285 to i16, !dbg !295, !verifier.code !62 */
  $i258 := $trunc.i32.i16($i257);
  /* call void @llvm.dbg.value(metadata i16 %286, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i258);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 869, 8} true;
  assume {:verifier.code 0} true;
  /* %287 = sext i16 %286 to i32, !dbg !297, !verifier.code !62 */
  $i259 := $sext.i16.i32($i258);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 869, 5} true;
  assume {:verifier.code 0} true;
  /* %288 = sext i16 %286 to i32, !dbg !298, !verifier.code !62 */
  $i260 := $sext.i16.i32($i258);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 869, 5} true;
  assume {:verifier.code 0} true;
  /* %289 = add nsw i32 %288, %287, !dbg !298, !verifier.code !62 */
  $i261 := $add.i32($i260, $i259);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 869, 5} true;
  assume {:verifier.code 0} true;
  /* %290 = trunc i32 %289 to i16, !dbg !298, !verifier.code !62 */
  $i262 := $trunc.i32.i16($i261);
  /* call void @llvm.dbg.value(metadata i16 %290, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 8} true;
  assume {:verifier.code 0} true;
  /* %291 = sext i16 %.17 to i32, !dbg !299, !verifier.code !62 */
  $i263 := $sext.i16.i32($i240);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 5} true;
  assume {:verifier.code 0} true;
  /* %292 = sext i16 %.17 to i32, !dbg !300, !verifier.code !62 */
  $i264 := $sext.i16.i32($i240);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 5} true;
  assume {:verifier.code 0} true;
  /* %293 = add nsw i32 %292, %291, !dbg !300, !verifier.code !62 */
  $i265 := $add.i32($i264, $i263);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 5} true;
  assume {:verifier.code 0} true;
  /* %294 = trunc i32 %293 to i16, !dbg !300, !verifier.code !62 */
  $i266 := $trunc.i32.i16($i265);
  /* call void @llvm.dbg.value(metadata i16 %294, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 7} true;
  assume {:verifier.code 0} true;
  /* %295 = sext i16 %283 to i32, !dbg !301, !verifier.code !62 */
  $i267 := $sext.i16.i32($i255);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 9} true;
  assume {:verifier.code 0} true;
  /* %296 = icmp slt i32 %295, 0, !dbg !303, !verifier.code !62 */
  $i268 := $slt.i32($i267, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %296, label %297, label %308, !dbg !304, !verifier.code !62 */
  $i269 := $i266;
  assume {:branchcond $i268} true;
  goto $bb82, $bb83;
$bb76:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 15} true;
  assume {:verifier.code 0} true;
  assume ($i242 == 1);
  goto $bb77;
$bb77:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 863, 9} true;
  assume {:verifier.code 0} true;
  /* %272 = sext i16 %262 to i32, !dbg !287, !verifier.code !62 */
  $i246 := $sext.i16.i32($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 863, 9} true;
  assume {:verifier.code 0} true;
  /* %273 = add nsw i32 %272, 1, !dbg !287, !verifier.code !62 */
  $i247 := $add.i32($i246, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 863, 9} true;
  assume {:verifier.code 0} true;
  /* %274 = trunc i32 %273 to i16, !dbg !287, !verifier.code !62 */
  $i248 := $trunc.i32.i16($i247);
  /* call void @llvm.dbg.value(metadata i16 %274, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i248);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 864, 5} true;
  assume {:verifier.code 0} true;
  /* br label %275, !dbg !289, !verifier.code !62 */
  $i245 := $i248;
  goto $bb81;
$bb78:
  assume !(($i242 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 18} true;
  assume {:verifier.code 0} true;
  /* %269 = sext i16 %258 to i32, !dbg !284, !verifier.code !62 */
  $i243 := $sext.i16.i32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 20} true;
  assume {:verifier.code 0} true;
  /* %270 = icmp sgt i32 %269, 32767, !dbg !285, !verifier.code !62 */
  $i244 := $sgt.i32($i243, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %270, label %271, label %275, !dbg !286, !verifier.code !62 */
  $i245 := $i237;
  assume {:branchcond $i244} true;
  goto $bb79, $bb80;
$bb79:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 9} true;
  assume {:verifier.code 0} true;
  assume ($i244 == 1);
  goto $bb77;
$bb80:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i244 == 1));
  goto $bb81;
$bb81:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.16 = phi i16 [ %274, %271 ], [ %262, %268 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.16, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 865, 3} true;
  assume {:verifier.code 0} true;
  /* br label %276, !dbg !290, !verifier.code !62 */
  $i240 := $i245;
  goto $bb75;
$bb82:
  assume ($i268 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 9} true;
  assume {:verifier.code 0} true;
  /* %298 = sext i16 %290 to i32, !dbg !305, !verifier.code !62 */
  $i270 := $sext.i16.i32($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 11} true;
  assume {:verifier.code 0} true;
  /* %299 = icmp slt i32 %298, 0, !dbg !308, !verifier.code !62 */
  $i271 := $slt.i32($i270, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %299, label %303, label %300, !dbg !309, !verifier.code !62 */
  assume {:branchcond $i271} true;
  goto $bb85, $bb87;
$bb83:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i268 == 1));
  goto $bb84;
$bb84:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.19 = phi i16 [ %.18, %307 ], [ %294, %276 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.19, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 877, 7} true;
  assume {:verifier.code 0} true;
  /* %309 = sext i16 %283 to i32, !dbg !317, !verifier.code !62 */
  $i278 := $sext.i16.i32($i255);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 877, 9} true;
  assume {:verifier.code 0} true;
  /* %310 = srem i32 %309, 32768, !dbg !318, !verifier.code !62 */
  $i279 := $srem.i32($i278, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 877, 7} true;
  assume {:verifier.code 0} true;
  /* %311 = trunc i32 %310 to i16, !dbg !317, !verifier.code !62 */
  $i280 := $trunc.i32.i16($i279);
  /* call void @llvm.dbg.value(metadata i16 %311, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i280);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 878, 8} true;
  assume {:verifier.code 0} true;
  /* %312 = sext i16 %311 to i32, !dbg !319, !verifier.code !62 */
  $i281 := $sext.i16.i32($i280);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 878, 5} true;
  assume {:verifier.code 0} true;
  /* %313 = sext i16 %311 to i32, !dbg !320, !verifier.code !62 */
  $i282 := $sext.i16.i32($i280);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 878, 5} true;
  assume {:verifier.code 0} true;
  /* %314 = add nsw i32 %313, %312, !dbg !320, !verifier.code !62 */
  $i283 := $add.i32($i282, $i281);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 878, 5} true;
  assume {:verifier.code 0} true;
  /* %315 = trunc i32 %314 to i16, !dbg !320, !verifier.code !62 */
  $i284 := $trunc.i32.i16($i283);
  /* call void @llvm.dbg.value(metadata i16 %315, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i284);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 879, 7} true;
  assume {:verifier.code 0} true;
  /* %316 = sext i16 %290 to i32, !dbg !321, !verifier.code !62 */
  $i285 := $sext.i16.i32($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 879, 9} true;
  assume {:verifier.code 0} true;
  /* %317 = srem i32 %316, 32768, !dbg !322, !verifier.code !62 */
  $i286 := $srem.i32($i285, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 879, 7} true;
  assume {:verifier.code 0} true;
  /* %318 = trunc i32 %317 to i16, !dbg !321, !verifier.code !62 */
  $i287 := $trunc.i32.i16($i286);
  /* call void @llvm.dbg.value(metadata i16 %318, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 880, 8} true;
  assume {:verifier.code 0} true;
  /* %319 = sext i16 %318 to i32, !dbg !323, !verifier.code !62 */
  $i288 := $sext.i16.i32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 880, 5} true;
  assume {:verifier.code 0} true;
  /* %320 = sext i16 %318 to i32, !dbg !324, !verifier.code !62 */
  $i289 := $sext.i16.i32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 880, 5} true;
  assume {:verifier.code 0} true;
  /* %321 = add nsw i32 %320, %319, !dbg !324, !verifier.code !62 */
  $i290 := $add.i32($i289, $i288);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 880, 5} true;
  assume {:verifier.code 0} true;
  /* %322 = trunc i32 %321 to i16, !dbg !324, !verifier.code !62 */
  $i291 := $trunc.i32.i16($i290);
  /* call void @llvm.dbg.value(metadata i16 %322, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 882, 8} true;
  assume {:verifier.code 0} true;
  /* %323 = sext i16 %.19 to i32, !dbg !325, !verifier.code !62 */
  $i292 := $sext.i16.i32($i269);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 882, 5} true;
  assume {:verifier.code 0} true;
  /* %324 = sext i16 %.19 to i32, !dbg !326, !verifier.code !62 */
  $i293 := $sext.i16.i32($i269);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 882, 5} true;
  assume {:verifier.code 0} true;
  /* %325 = add nsw i32 %324, %323, !dbg !326, !verifier.code !62 */
  $i294 := $add.i32($i293, $i292);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 882, 5} true;
  assume {:verifier.code 0} true;
  /* %326 = trunc i32 %325 to i16, !dbg !326, !verifier.code !62 */
  $i295 := $trunc.i32.i16($i294);
  /* call void @llvm.dbg.value(metadata i16 %326, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i295);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 883, 7} true;
  assume {:verifier.code 0} true;
  /* %327 = sext i16 %315 to i32, !dbg !327, !verifier.code !62 */
  $i296 := $sext.i16.i32($i284);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 883, 9} true;
  assume {:verifier.code 0} true;
  /* %328 = icmp slt i32 %327, 0, !dbg !329, !verifier.code !62 */
  $i297 := $slt.i32($i296, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 883, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %328, label %329, label %340, !dbg !330, !verifier.code !62 */
  $i298 := $i295;
  assume {:branchcond $i297} true;
  goto $bb91, $bb92;
$bb85:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 15} true;
  assume {:verifier.code 0} true;
  assume ($i271 == 1);
  goto $bb86;
$bb86:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 874, 9} true;
  assume {:verifier.code 0} true;
  /* %304 = sext i16 %294 to i32, !dbg !313, !verifier.code !62 */
  $i275 := $sext.i16.i32($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 874, 9} true;
  assume {:verifier.code 0} true;
  /* %305 = add nsw i32 %304, 1, !dbg !313, !verifier.code !62 */
  $i276 := $add.i32($i275, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 874, 9} true;
  assume {:verifier.code 0} true;
  /* %306 = trunc i32 %305 to i16, !dbg !313, !verifier.code !62 */
  $i277 := $trunc.i32.i16($i276);
  /* call void @llvm.dbg.value(metadata i16 %306, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i277);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 875, 5} true;
  assume {:verifier.code 0} true;
  /* br label %307, !dbg !315, !verifier.code !62 */
  $i274 := $i277;
  goto $bb90;
$bb87:
  assume !(($i271 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 18} true;
  assume {:verifier.code 0} true;
  /* %301 = sext i16 %290 to i32, !dbg !310, !verifier.code !62 */
  $i272 := $sext.i16.i32($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 20} true;
  assume {:verifier.code 0} true;
  /* %302 = icmp sgt i32 %301, 32767, !dbg !311, !verifier.code !62 */
  $i273 := $sgt.i32($i272, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %302, label %303, label %307, !dbg !312, !verifier.code !62 */
  $i274 := $i266;
  assume {:branchcond $i273} true;
  goto $bb88, $bb89;
$bb88:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 9} true;
  assume {:verifier.code 0} true;
  assume ($i273 == 1);
  goto $bb86;
$bb89:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i273 == 1));
  goto $bb90;
$bb90:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.18 = phi i16 [ %306, %303 ], [ %294, %300 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.18, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 876, 3} true;
  assume {:verifier.code 0} true;
  /* br label %308, !dbg !316, !verifier.code !62 */
  $i269 := $i274;
  goto $bb84;
$bb91:
  assume ($i297 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 9} true;
  assume {:verifier.code 0} true;
  /* %330 = sext i16 %322 to i32, !dbg !331, !verifier.code !62 */
  $i299 := $sext.i16.i32($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 11} true;
  assume {:verifier.code 0} true;
  /* %331 = icmp slt i32 %330, 0, !dbg !334, !verifier.code !62 */
  $i300 := $slt.i32($i299, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %331, label %335, label %332, !dbg !335, !verifier.code !62 */
  assume {:branchcond $i300} true;
  goto $bb94, $bb96;
$bb92:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 883, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i297 == 1));
  goto $bb93;
$bb93:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.21 = phi i16 [ %.20, %339 ], [ %326, %308 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.21, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 888, 7} true;
  assume {:verifier.code 0} true;
  /* %341 = sext i16 %315 to i32, !dbg !343, !verifier.code !62 */
  $i307 := $sext.i16.i32($i284);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 888, 9} true;
  assume {:verifier.code 0} true;
  /* %342 = srem i32 %341, 32768, !dbg !344, !verifier.code !62 */
  $i308 := $srem.i32($i307, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 888, 7} true;
  assume {:verifier.code 0} true;
  /* %343 = trunc i32 %342 to i16, !dbg !343, !verifier.code !62 */
  $i309 := $trunc.i32.i16($i308);
  /* call void @llvm.dbg.value(metadata i16 %343, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 889, 8} true;
  assume {:verifier.code 0} true;
  /* %344 = sext i16 %343 to i32, !dbg !345, !verifier.code !62 */
  $i310 := $sext.i16.i32($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 889, 5} true;
  assume {:verifier.code 0} true;
  /* %345 = sext i16 %343 to i32, !dbg !346, !verifier.code !62 */
  $i311 := $sext.i16.i32($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 889, 5} true;
  assume {:verifier.code 0} true;
  /* %346 = add nsw i32 %345, %344, !dbg !346, !verifier.code !62 */
  $i312 := $add.i32($i311, $i310);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 889, 5} true;
  assume {:verifier.code 0} true;
  /* %347 = trunc i32 %346 to i16, !dbg !346, !verifier.code !62 */
  $i313 := $trunc.i32.i16($i312);
  /* call void @llvm.dbg.value(metadata i16 %347, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 890, 7} true;
  assume {:verifier.code 0} true;
  /* %348 = sext i16 %322 to i32, !dbg !347, !verifier.code !62 */
  $i314 := $sext.i16.i32($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 890, 9} true;
  assume {:verifier.code 0} true;
  /* %349 = srem i32 %348, 32768, !dbg !348, !verifier.code !62 */
  $i315 := $srem.i32($i314, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 890, 7} true;
  assume {:verifier.code 0} true;
  /* %350 = trunc i32 %349 to i16, !dbg !347, !verifier.code !62 */
  $i316 := $trunc.i32.i16($i315);
  /* call void @llvm.dbg.value(metadata i16 %350, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 891, 8} true;
  assume {:verifier.code 0} true;
  /* %351 = sext i16 %350 to i32, !dbg !349, !verifier.code !62 */
  $i317 := $sext.i16.i32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 891, 5} true;
  assume {:verifier.code 0} true;
  /* %352 = sext i16 %350 to i32, !dbg !350, !verifier.code !62 */
  $i318 := $sext.i16.i32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 891, 5} true;
  assume {:verifier.code 0} true;
  /* %353 = add nsw i32 %352, %351, !dbg !350, !verifier.code !62 */
  $i319 := $add.i32($i318, $i317);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 891, 5} true;
  assume {:verifier.code 0} true;
  /* %354 = trunc i32 %353 to i16, !dbg !350, !verifier.code !62 */
  $i320 := $trunc.i32.i16($i319);
  /* call void @llvm.dbg.value(metadata i16 %354, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 8} true;
  assume {:verifier.code 0} true;
  /* %355 = sext i16 %.21 to i32, !dbg !351, !verifier.code !62 */
  $i321 := $sext.i16.i32($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 5} true;
  assume {:verifier.code 0} true;
  /* %356 = sext i16 %.21 to i32, !dbg !352, !verifier.code !62 */
  $i322 := $sext.i16.i32($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 5} true;
  assume {:verifier.code 0} true;
  /* %357 = add nsw i32 %356, %355, !dbg !352, !verifier.code !62 */
  $i323 := $add.i32($i322, $i321);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 5} true;
  assume {:verifier.code 0} true;
  /* %358 = trunc i32 %357 to i16, !dbg !352, !verifier.code !62 */
  $i324 := $trunc.i32.i16($i323);
  /* call void @llvm.dbg.value(metadata i16 %358, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i324);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 7} true;
  assume {:verifier.code 0} true;
  /* %359 = sext i16 %347 to i32, !dbg !353, !verifier.code !62 */
  $i325 := $sext.i16.i32($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 9} true;
  assume {:verifier.code 0} true;
  /* %360 = icmp slt i32 %359, 0, !dbg !355, !verifier.code !62 */
  $i326 := $slt.i32($i325, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %360, label %361, label %372, !dbg !356, !verifier.code !62 */
  $i327 := $i324;
  assume {:branchcond $i326} true;
  goto $bb100, $bb101;
$bb94:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 15} true;
  assume {:verifier.code 0} true;
  assume ($i300 == 1);
  goto $bb95;
$bb95:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 885, 9} true;
  assume {:verifier.code 0} true;
  /* %336 = sext i16 %326 to i32, !dbg !339, !verifier.code !62 */
  $i304 := $sext.i16.i32($i295);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 885, 9} true;
  assume {:verifier.code 0} true;
  /* %337 = add nsw i32 %336, 1, !dbg !339, !verifier.code !62 */
  $i305 := $add.i32($i304, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 885, 9} true;
  assume {:verifier.code 0} true;
  /* %338 = trunc i32 %337 to i16, !dbg !339, !verifier.code !62 */
  $i306 := $trunc.i32.i16($i305);
  /* call void @llvm.dbg.value(metadata i16 %338, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i306);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 886, 5} true;
  assume {:verifier.code 0} true;
  /* br label %339, !dbg !341, !verifier.code !62 */
  $i303 := $i306;
  goto $bb99;
$bb96:
  assume !(($i300 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 18} true;
  assume {:verifier.code 0} true;
  /* %333 = sext i16 %322 to i32, !dbg !336, !verifier.code !62 */
  $i301 := $sext.i16.i32($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 20} true;
  assume {:verifier.code 0} true;
  /* %334 = icmp sgt i32 %333, 32767, !dbg !337, !verifier.code !62 */
  $i302 := $sgt.i32($i301, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %334, label %335, label %339, !dbg !338, !verifier.code !62 */
  $i303 := $i295;
  assume {:branchcond $i302} true;
  goto $bb97, $bb98;
$bb97:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 9} true;
  assume {:verifier.code 0} true;
  assume ($i302 == 1);
  goto $bb95;
$bb98:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i302 == 1));
  goto $bb99;
$bb99:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.20 = phi i16 [ %338, %335 ], [ %326, %332 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.20, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 887, 3} true;
  assume {:verifier.code 0} true;
  /* br label %340, !dbg !342, !verifier.code !62 */
  $i298 := $i303;
  goto $bb93;
$bb100:
  assume ($i326 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 9} true;
  assume {:verifier.code 0} true;
  /* %362 = sext i16 %354 to i32, !dbg !357, !verifier.code !62 */
  $i328 := $sext.i16.i32($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 11} true;
  assume {:verifier.code 0} true;
  /* %363 = icmp slt i32 %362, 0, !dbg !360, !verifier.code !62 */
  $i329 := $slt.i32($i328, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %363, label %367, label %364, !dbg !361, !verifier.code !62 */
  assume {:branchcond $i329} true;
  goto $bb103, $bb105;
$bb101:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i326 == 1));
  goto $bb102;
$bb102:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.23 = phi i16 [ %.22, %371 ], [ %358, %340 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.23, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 899, 7} true;
  assume {:verifier.code 0} true;
  /* %373 = sext i16 %347 to i32, !dbg !369, !verifier.code !62 */
  $i336 := $sext.i16.i32($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 899, 9} true;
  assume {:verifier.code 0} true;
  /* %374 = srem i32 %373, 32768, !dbg !370, !verifier.code !62 */
  $i337 := $srem.i32($i336, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 899, 7} true;
  assume {:verifier.code 0} true;
  /* %375 = trunc i32 %374 to i16, !dbg !369, !verifier.code !62 */
  $i338 := $trunc.i32.i16($i337);
  /* call void @llvm.dbg.value(metadata i16 %375, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 900, 8} true;
  assume {:verifier.code 0} true;
  /* %376 = sext i16 %375 to i32, !dbg !371, !verifier.code !62 */
  $i339 := $sext.i16.i32($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 900, 5} true;
  assume {:verifier.code 0} true;
  /* %377 = sext i16 %375 to i32, !dbg !372, !verifier.code !62 */
  $i340 := $sext.i16.i32($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 900, 5} true;
  assume {:verifier.code 0} true;
  /* %378 = add nsw i32 %377, %376, !dbg !372, !verifier.code !62 */
  $i341 := $add.i32($i340, $i339);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 900, 5} true;
  assume {:verifier.code 0} true;
  /* %379 = trunc i32 %378 to i16, !dbg !372, !verifier.code !62 */
  $i342 := $trunc.i32.i16($i341);
  /* call void @llvm.dbg.value(metadata i16 %379, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 901, 7} true;
  assume {:verifier.code 0} true;
  /* %380 = sext i16 %354 to i32, !dbg !373, !verifier.code !62 */
  $i343 := $sext.i16.i32($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 901, 9} true;
  assume {:verifier.code 0} true;
  /* %381 = srem i32 %380, 32768, !dbg !374, !verifier.code !62 */
  $i344 := $srem.i32($i343, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 901, 7} true;
  assume {:verifier.code 0} true;
  /* %382 = trunc i32 %381 to i16, !dbg !373, !verifier.code !62 */
  $i345 := $trunc.i32.i16($i344);
  /* call void @llvm.dbg.value(metadata i16 %382, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 902, 8} true;
  assume {:verifier.code 0} true;
  /* %383 = sext i16 %382 to i32, !dbg !375, !verifier.code !62 */
  $i346 := $sext.i16.i32($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 902, 5} true;
  assume {:verifier.code 0} true;
  /* %384 = sext i16 %382 to i32, !dbg !376, !verifier.code !62 */
  $i347 := $sext.i16.i32($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 902, 5} true;
  assume {:verifier.code 0} true;
  /* %385 = add nsw i32 %384, %383, !dbg !376, !verifier.code !62 */
  $i348 := $add.i32($i347, $i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 902, 5} true;
  assume {:verifier.code 0} true;
  /* %386 = trunc i32 %385 to i16, !dbg !376, !verifier.code !62 */
  $i349 := $trunc.i32.i16($i348);
  /* call void @llvm.dbg.value(metadata i16 %386, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 904, 8} true;
  assume {:verifier.code 0} true;
  /* %387 = sext i16 %.23 to i32, !dbg !377, !verifier.code !62 */
  $i350 := $sext.i16.i32($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 904, 5} true;
  assume {:verifier.code 0} true;
  /* %388 = sext i16 %.23 to i32, !dbg !378, !verifier.code !62 */
  $i351 := $sext.i16.i32($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 904, 5} true;
  assume {:verifier.code 0} true;
  /* %389 = add nsw i32 %388, %387, !dbg !378, !verifier.code !62 */
  $i352 := $add.i32($i351, $i350);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 904, 5} true;
  assume {:verifier.code 0} true;
  /* %390 = trunc i32 %389 to i16, !dbg !378, !verifier.code !62 */
  $i353 := $trunc.i32.i16($i352);
  /* call void @llvm.dbg.value(metadata i16 %390, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i353);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 905, 7} true;
  assume {:verifier.code 0} true;
  /* %391 = sext i16 %379 to i32, !dbg !379, !verifier.code !62 */
  $i354 := $sext.i16.i32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 905, 9} true;
  assume {:verifier.code 0} true;
  /* %392 = icmp slt i32 %391, 0, !dbg !381, !verifier.code !62 */
  $i355 := $slt.i32($i354, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 905, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %392, label %393, label %404, !dbg !382, !verifier.code !62 */
  $i356 := $i353;
  assume {:branchcond $i355} true;
  goto $bb109, $bb110;
$bb103:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 15} true;
  assume {:verifier.code 0} true;
  assume ($i329 == 1);
  goto $bb104;
$bb104:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 896, 9} true;
  assume {:verifier.code 0} true;
  /* %368 = sext i16 %358 to i32, !dbg !365, !verifier.code !62 */
  $i333 := $sext.i16.i32($i324);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 896, 9} true;
  assume {:verifier.code 0} true;
  /* %369 = add nsw i32 %368, 1, !dbg !365, !verifier.code !62 */
  $i334 := $add.i32($i333, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 896, 9} true;
  assume {:verifier.code 0} true;
  /* %370 = trunc i32 %369 to i16, !dbg !365, !verifier.code !62 */
  $i335 := $trunc.i32.i16($i334);
  /* call void @llvm.dbg.value(metadata i16 %370, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i335);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 897, 5} true;
  assume {:verifier.code 0} true;
  /* br label %371, !dbg !367, !verifier.code !62 */
  $i332 := $i335;
  goto $bb108;
$bb105:
  assume !(($i329 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 18} true;
  assume {:verifier.code 0} true;
  /* %365 = sext i16 %354 to i32, !dbg !362, !verifier.code !62 */
  $i330 := $sext.i16.i32($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 20} true;
  assume {:verifier.code 0} true;
  /* %366 = icmp sgt i32 %365, 32767, !dbg !363, !verifier.code !62 */
  $i331 := $sgt.i32($i330, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %366, label %367, label %371, !dbg !364, !verifier.code !62 */
  $i332 := $i324;
  assume {:branchcond $i331} true;
  goto $bb106, $bb107;
$bb106:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 9} true;
  assume {:verifier.code 0} true;
  assume ($i331 == 1);
  goto $bb104;
$bb107:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i331 == 1));
  goto $bb108;
$bb108:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.22 = phi i16 [ %370, %367 ], [ %358, %364 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.22, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 898, 3} true;
  assume {:verifier.code 0} true;
  /* br label %372, !dbg !368, !verifier.code !62 */
  $i327 := $i332;
  goto $bb102;
$bb109:
  assume ($i355 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 9} true;
  assume {:verifier.code 0} true;
  /* %394 = sext i16 %386 to i32, !dbg !383, !verifier.code !62 */
  $i357 := $sext.i16.i32($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 11} true;
  assume {:verifier.code 0} true;
  /* %395 = icmp slt i32 %394, 0, !dbg !386, !verifier.code !62 */
  $i358 := $slt.i32($i357, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %395, label %399, label %396, !dbg !387, !verifier.code !62 */
  assume {:branchcond $i358} true;
  goto $bb112, $bb114;
$bb110:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 905, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i355 == 1));
  goto $bb111;
$bb111:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.25 = phi i16 [ %.24, %403 ], [ %390, %372 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.25, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 910, 7} true;
  assume {:verifier.code 0} true;
  /* %405 = sext i16 %379 to i32, !dbg !395, !verifier.code !62 */
  $i365 := $sext.i16.i32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 910, 9} true;
  assume {:verifier.code 0} true;
  /* %406 = srem i32 %405, 32768, !dbg !396, !verifier.code !62 */
  $i366 := $srem.i32($i365, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 910, 7} true;
  assume {:verifier.code 0} true;
  /* %407 = trunc i32 %406 to i16, !dbg !395, !verifier.code !62 */
  $i367 := $trunc.i32.i16($i366);
  /* call void @llvm.dbg.value(metadata i16 %407, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i367);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 911, 8} true;
  assume {:verifier.code 0} true;
  /* %408 = sext i16 %407 to i32, !dbg !397, !verifier.code !62 */
  $i368 := $sext.i16.i32($i367);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 911, 5} true;
  assume {:verifier.code 0} true;
  /* %409 = sext i16 %407 to i32, !dbg !398, !verifier.code !62 */
  $i369 := $sext.i16.i32($i367);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 911, 5} true;
  assume {:verifier.code 0} true;
  /* %410 = add nsw i32 %409, %408, !dbg !398, !verifier.code !62 */
  $i370 := $add.i32($i369, $i368);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 911, 5} true;
  assume {:verifier.code 0} true;
  /* %411 = trunc i32 %410 to i16, !dbg !398, !verifier.code !62 */
  $i371 := $trunc.i32.i16($i370);
  /* call void @llvm.dbg.value(metadata i16 %411, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 912, 7} true;
  assume {:verifier.code 0} true;
  /* %412 = sext i16 %386 to i32, !dbg !399, !verifier.code !62 */
  $i372 := $sext.i16.i32($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 912, 9} true;
  assume {:verifier.code 0} true;
  /* %413 = srem i32 %412, 32768, !dbg !400, !verifier.code !62 */
  $i373 := $srem.i32($i372, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 912, 7} true;
  assume {:verifier.code 0} true;
  /* %414 = trunc i32 %413 to i16, !dbg !399, !verifier.code !62 */
  $i374 := $trunc.i32.i16($i373);
  /* call void @llvm.dbg.value(metadata i16 %414, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i374);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 913, 8} true;
  assume {:verifier.code 0} true;
  /* %415 = sext i16 %414 to i32, !dbg !401, !verifier.code !62 */
  $i375 := $sext.i16.i32($i374);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 913, 5} true;
  assume {:verifier.code 0} true;
  /* %416 = sext i16 %414 to i32, !dbg !402, !verifier.code !62 */
  $i376 := $sext.i16.i32($i374);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 913, 5} true;
  assume {:verifier.code 0} true;
  /* %417 = add nsw i32 %416, %415, !dbg !402, !verifier.code !62 */
  $i377 := $add.i32($i376, $i375);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 913, 5} true;
  assume {:verifier.code 0} true;
  /* %418 = trunc i32 %417 to i16, !dbg !402, !verifier.code !62 */
  $i378 := $trunc.i32.i16($i377);
  /* call void @llvm.dbg.value(metadata i16 %418, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i378);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 8} true;
  assume {:verifier.code 0} true;
  /* %419 = sext i16 %.25 to i32, !dbg !403, !verifier.code !62 */
  $i379 := $sext.i16.i32($i356);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 5} true;
  assume {:verifier.code 0} true;
  /* %420 = sext i16 %.25 to i32, !dbg !404, !verifier.code !62 */
  $i380 := $sext.i16.i32($i356);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 5} true;
  assume {:verifier.code 0} true;
  /* %421 = add nsw i32 %420, %419, !dbg !404, !verifier.code !62 */
  $i381 := $add.i32($i380, $i379);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 5} true;
  assume {:verifier.code 0} true;
  /* %422 = trunc i32 %421 to i16, !dbg !404, !verifier.code !62 */
  $i382 := $trunc.i32.i16($i381);
  /* call void @llvm.dbg.value(metadata i16 %422, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i382);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 7} true;
  assume {:verifier.code 0} true;
  /* %423 = sext i16 %411 to i32, !dbg !405, !verifier.code !62 */
  $i383 := $sext.i16.i32($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 9} true;
  assume {:verifier.code 0} true;
  /* %424 = icmp slt i32 %423, 0, !dbg !407, !verifier.code !62 */
  $i384 := $slt.i32($i383, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %424, label %425, label %436, !dbg !408, !verifier.code !62 */
  $i385 := $i382;
  assume {:branchcond $i384} true;
  goto $bb118, $bb119;
$bb112:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 15} true;
  assume {:verifier.code 0} true;
  assume ($i358 == 1);
  goto $bb113;
$bb113:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 907, 9} true;
  assume {:verifier.code 0} true;
  /* %400 = sext i16 %390 to i32, !dbg !391, !verifier.code !62 */
  $i362 := $sext.i16.i32($i353);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 907, 9} true;
  assume {:verifier.code 0} true;
  /* %401 = add nsw i32 %400, 1, !dbg !391, !verifier.code !62 */
  $i363 := $add.i32($i362, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 907, 9} true;
  assume {:verifier.code 0} true;
  /* %402 = trunc i32 %401 to i16, !dbg !391, !verifier.code !62 */
  $i364 := $trunc.i32.i16($i363);
  /* call void @llvm.dbg.value(metadata i16 %402, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i364);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 908, 5} true;
  assume {:verifier.code 0} true;
  /* br label %403, !dbg !393, !verifier.code !62 */
  $i361 := $i364;
  goto $bb117;
$bb114:
  assume !(($i358 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 18} true;
  assume {:verifier.code 0} true;
  /* %397 = sext i16 %386 to i32, !dbg !388, !verifier.code !62 */
  $i359 := $sext.i16.i32($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 20} true;
  assume {:verifier.code 0} true;
  /* %398 = icmp sgt i32 %397, 32767, !dbg !389, !verifier.code !62 */
  $i360 := $sgt.i32($i359, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %398, label %399, label %403, !dbg !390, !verifier.code !62 */
  $i361 := $i353;
  assume {:branchcond $i360} true;
  goto $bb115, $bb116;
$bb115:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 9} true;
  assume {:verifier.code 0} true;
  assume ($i360 == 1);
  goto $bb113;
$bb116:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i360 == 1));
  goto $bb117;
$bb117:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.24 = phi i16 [ %402, %399 ], [ %390, %396 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.24, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 909, 3} true;
  assume {:verifier.code 0} true;
  /* br label %404, !dbg !394, !verifier.code !62 */
  $i356 := $i361;
  goto $bb111;
$bb118:
  assume ($i384 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 9} true;
  assume {:verifier.code 0} true;
  /* %426 = sext i16 %418 to i32, !dbg !409, !verifier.code !62 */
  $i386 := $sext.i16.i32($i378);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 11} true;
  assume {:verifier.code 0} true;
  /* %427 = icmp slt i32 %426, 0, !dbg !412, !verifier.code !62 */
  $i387 := $slt.i32($i386, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %427, label %431, label %428, !dbg !413, !verifier.code !62 */
  assume {:branchcond $i387} true;
  goto $bb121, $bb123;
$bb119:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i384 == 1));
  goto $bb120;
$bb120:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.27 = phi i16 [ %.26, %435 ], [ %422, %404 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.27, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 921, 7} true;
  assume {:verifier.code 0} true;
  /* %437 = sext i16 %411 to i32, !dbg !421, !verifier.code !62 */
  $i394 := $sext.i16.i32($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 921, 9} true;
  assume {:verifier.code 0} true;
  /* %438 = srem i32 %437, 32768, !dbg !422, !verifier.code !62 */
  $i395 := $srem.i32($i394, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 921, 7} true;
  assume {:verifier.code 0} true;
  /* %439 = trunc i32 %438 to i16, !dbg !421, !verifier.code !62 */
  $i396 := $trunc.i32.i16($i395);
  /* call void @llvm.dbg.value(metadata i16 %439, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i396);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 922, 8} true;
  assume {:verifier.code 0} true;
  /* %440 = sext i16 %439 to i32, !dbg !423, !verifier.code !62 */
  $i397 := $sext.i16.i32($i396);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 922, 5} true;
  assume {:verifier.code 0} true;
  /* %441 = sext i16 %439 to i32, !dbg !424, !verifier.code !62 */
  $i398 := $sext.i16.i32($i396);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 922, 5} true;
  assume {:verifier.code 0} true;
  /* %442 = add nsw i32 %441, %440, !dbg !424, !verifier.code !62 */
  $i399 := $add.i32($i398, $i397);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 922, 5} true;
  assume {:verifier.code 0} true;
  /* %443 = trunc i32 %442 to i16, !dbg !424, !verifier.code !62 */
  $i400 := $trunc.i32.i16($i399);
  /* call void @llvm.dbg.value(metadata i16 %443, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i400);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 923, 7} true;
  assume {:verifier.code 0} true;
  /* %444 = sext i16 %418 to i32, !dbg !425, !verifier.code !62 */
  $i401 := $sext.i16.i32($i378);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 923, 9} true;
  assume {:verifier.code 0} true;
  /* %445 = srem i32 %444, 32768, !dbg !426, !verifier.code !62 */
  $i402 := $srem.i32($i401, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 923, 7} true;
  assume {:verifier.code 0} true;
  /* %446 = trunc i32 %445 to i16, !dbg !425, !verifier.code !62 */
  $i403 := $trunc.i32.i16($i402);
  /* call void @llvm.dbg.value(metadata i16 %446, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 924, 8} true;
  assume {:verifier.code 0} true;
  /* %447 = sext i16 %446 to i32, !dbg !427, !verifier.code !62 */
  $i404 := $sext.i16.i32($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 924, 5} true;
  assume {:verifier.code 0} true;
  /* %448 = sext i16 %446 to i32, !dbg !428, !verifier.code !62 */
  $i405 := $sext.i16.i32($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 924, 5} true;
  assume {:verifier.code 0} true;
  /* %449 = add nsw i32 %448, %447, !dbg !428, !verifier.code !62 */
  $i406 := $add.i32($i405, $i404);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 924, 5} true;
  assume {:verifier.code 0} true;
  /* %450 = trunc i32 %449 to i16, !dbg !428, !verifier.code !62 */
  $i407 := $trunc.i32.i16($i406);
  /* call void @llvm.dbg.value(metadata i16 %450, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 926, 8} true;
  assume {:verifier.code 0} true;
  /* %451 = sext i16 %.27 to i32, !dbg !429, !verifier.code !62 */
  $i408 := $sext.i16.i32($i385);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 926, 5} true;
  assume {:verifier.code 0} true;
  /* %452 = sext i16 %.27 to i32, !dbg !430, !verifier.code !62 */
  $i409 := $sext.i16.i32($i385);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 926, 5} true;
  assume {:verifier.code 0} true;
  /* %453 = add nsw i32 %452, %451, !dbg !430, !verifier.code !62 */
  $i410 := $add.i32($i409, $i408);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 926, 5} true;
  assume {:verifier.code 0} true;
  /* %454 = trunc i32 %453 to i16, !dbg !430, !verifier.code !62 */
  $i411 := $trunc.i32.i16($i410);
  /* call void @llvm.dbg.value(metadata i16 %454, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i411);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 7} true;
  assume {:verifier.code 0} true;
  /* %455 = sext i16 %443 to i32, !dbg !431, !verifier.code !62 */
  $i412 := $sext.i16.i32($i400);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 9} true;
  assume {:verifier.code 0} true;
  /* %456 = icmp slt i32 %455, 0, !dbg !433, !verifier.code !62 */
  $i413 := $slt.i32($i412, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %456, label %457, label %468, !dbg !434, !verifier.code !62 */
  $i414 := $i411;
  assume {:branchcond $i413} true;
  goto $bb127, $bb128;
$bb121:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 15} true;
  assume {:verifier.code 0} true;
  assume ($i387 == 1);
  goto $bb122;
$bb122:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 918, 9} true;
  assume {:verifier.code 0} true;
  /* %432 = sext i16 %422 to i32, !dbg !417, !verifier.code !62 */
  $i391 := $sext.i16.i32($i382);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 918, 9} true;
  assume {:verifier.code 0} true;
  /* %433 = add nsw i32 %432, 1, !dbg !417, !verifier.code !62 */
  $i392 := $add.i32($i391, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 918, 9} true;
  assume {:verifier.code 0} true;
  /* %434 = trunc i32 %433 to i16, !dbg !417, !verifier.code !62 */
  $i393 := $trunc.i32.i16($i392);
  /* call void @llvm.dbg.value(metadata i16 %434, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i393);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 919, 5} true;
  assume {:verifier.code 0} true;
  /* br label %435, !dbg !419, !verifier.code !62 */
  $i390 := $i393;
  goto $bb126;
$bb123:
  assume !(($i387 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 18} true;
  assume {:verifier.code 0} true;
  /* %429 = sext i16 %418 to i32, !dbg !414, !verifier.code !62 */
  $i388 := $sext.i16.i32($i378);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 20} true;
  assume {:verifier.code 0} true;
  /* %430 = icmp sgt i32 %429, 32767, !dbg !415, !verifier.code !62 */
  $i389 := $sgt.i32($i388, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %430, label %431, label %435, !dbg !416, !verifier.code !62 */
  $i390 := $i382;
  assume {:branchcond $i389} true;
  goto $bb124, $bb125;
$bb124:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 9} true;
  assume {:verifier.code 0} true;
  assume ($i389 == 1);
  goto $bb122;
$bb125:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i389 == 1));
  goto $bb126;
$bb126:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.26 = phi i16 [ %434, %431 ], [ %422, %428 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.26, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 920, 3} true;
  assume {:verifier.code 0} true;
  /* br label %436, !dbg !420, !verifier.code !62 */
  $i385 := $i390;
  goto $bb120;
$bb127:
  assume ($i413 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 9} true;
  assume {:verifier.code 0} true;
  /* %458 = sext i16 %450 to i32, !dbg !435, !verifier.code !62 */
  $i415 := $sext.i16.i32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 11} true;
  assume {:verifier.code 0} true;
  /* %459 = icmp slt i32 %458, 0, !dbg !438, !verifier.code !62 */
  $i416 := $slt.i32($i415, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %459, label %463, label %460, !dbg !439, !verifier.code !62 */
  assume {:branchcond $i416} true;
  goto $bb130, $bb132;
$bb128:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i413 == 1));
  goto $bb129;
$bb129:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.29 = phi i16 [ %.28, %467 ], [ %454, %436 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.29, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 932, 7} true;
  assume {:verifier.code 0} true;
  /* %469 = sext i16 %443 to i32, !dbg !447, !verifier.code !62 */
  $i423 := $sext.i16.i32($i400);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 932, 9} true;
  assume {:verifier.code 0} true;
  /* %470 = srem i32 %469, 32768, !dbg !448, !verifier.code !62 */
  $i424 := $srem.i32($i423, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 932, 7} true;
  assume {:verifier.code 0} true;
  /* %471 = trunc i32 %470 to i16, !dbg !447, !verifier.code !62 */
  $i425 := $trunc.i32.i16($i424);
  /* call void @llvm.dbg.value(metadata i16 %471, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i425);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 933, 8} true;
  assume {:verifier.code 0} true;
  /* %472 = sext i16 %471 to i32, !dbg !449, !verifier.code !62 */
  $i426 := $sext.i16.i32($i425);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 933, 5} true;
  assume {:verifier.code 0} true;
  /* %473 = sext i16 %471 to i32, !dbg !450, !verifier.code !62 */
  $i427 := $sext.i16.i32($i425);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 933, 5} true;
  assume {:verifier.code 0} true;
  /* %474 = add nsw i32 %473, %472, !dbg !450, !verifier.code !62 */
  $i428 := $add.i32($i427, $i426);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 933, 5} true;
  assume {:verifier.code 0} true;
  /* %475 = trunc i32 %474 to i16, !dbg !450, !verifier.code !62 */
  $i429 := $trunc.i32.i16($i428);
  /* call void @llvm.dbg.value(metadata i16 %475, metadata !10841, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i16($i429);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 934, 7} true;
  assume {:verifier.code 0} true;
  /* %476 = sext i16 %450 to i32, !dbg !451, !verifier.code !62 */
  $i430 := $sext.i16.i32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 934, 9} true;
  assume {:verifier.code 0} true;
  /* %477 = srem i32 %476, 32768, !dbg !452, !verifier.code !62 */
  $i431 := $srem.i32($i430, 32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 934, 7} true;
  assume {:verifier.code 0} true;
  /* %478 = trunc i32 %477 to i16, !dbg !451, !verifier.code !62 */
  $i432 := $trunc.i32.i16($i431);
  /* call void @llvm.dbg.value(metadata i16 %478, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 935, 8} true;
  assume {:verifier.code 0} true;
  /* %479 = sext i16 %478 to i32, !dbg !453, !verifier.code !62 */
  $i433 := $sext.i16.i32($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 935, 5} true;
  assume {:verifier.code 0} true;
  /* %480 = sext i16 %478 to i32, !dbg !454, !verifier.code !62 */
  $i434 := $sext.i16.i32($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 935, 5} true;
  assume {:verifier.code 0} true;
  /* %481 = add nsw i32 %480, %479, !dbg !454, !verifier.code !62 */
  $i435 := $add.i32($i434, $i433);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 935, 5} true;
  assume {:verifier.code 0} true;
  /* %482 = trunc i32 %481 to i16, !dbg !454, !verifier.code !62 */
  $i436 := $trunc.i32.i16($i435);
  /* call void @llvm.dbg.value(metadata i16 %482, metadata !10843, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i16($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 937, 8} true;
  assume {:verifier.code 0} true;
  /* %483 = sext i16 %.29 to i32, !dbg !455, !verifier.code !62 */
  $i437 := $sext.i16.i32($i414);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 937, 5} true;
  assume {:verifier.code 0} true;
  /* %484 = sext i16 %.29 to i32, !dbg !456, !verifier.code !62 */
  $i438 := $sext.i16.i32($i414);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 937, 5} true;
  assume {:verifier.code 0} true;
  /* %485 = add nsw i32 %484, %483, !dbg !456, !verifier.code !62 */
  $i439 := $add.i32($i438, $i437);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 937, 5} true;
  assume {:verifier.code 0} true;
  /* %486 = trunc i32 %485 to i16, !dbg !456, !verifier.code !62 */
  $i440 := $trunc.i32.i16($i439);
  /* call void @llvm.dbg.value(metadata i16 %486, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i440);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 7} true;
  assume {:verifier.code 0} true;
  /* %487 = sext i16 %475 to i32, !dbg !457, !verifier.code !62 */
  $i441 := $sext.i16.i32($i429);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 9} true;
  assume {:verifier.code 0} true;
  /* %488 = icmp slt i32 %487, 0, !dbg !459, !verifier.code !62 */
  $i442 := $slt.i32($i441, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %488, label %489, label %500, !dbg !460, !verifier.code !62 */
  $i443 := $i440;
  assume {:branchcond $i442} true;
  goto $bb136, $bb137;
$bb130:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 15} true;
  assume {:verifier.code 0} true;
  assume ($i416 == 1);
  goto $bb131;
$bb131:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 929, 9} true;
  assume {:verifier.code 0} true;
  /* %464 = sext i16 %454 to i32, !dbg !443, !verifier.code !62 */
  $i420 := $sext.i16.i32($i411);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 929, 9} true;
  assume {:verifier.code 0} true;
  /* %465 = add nsw i32 %464, 1, !dbg !443, !verifier.code !62 */
  $i421 := $add.i32($i420, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 929, 9} true;
  assume {:verifier.code 0} true;
  /* %466 = trunc i32 %465 to i16, !dbg !443, !verifier.code !62 */
  $i422 := $trunc.i32.i16($i421);
  /* call void @llvm.dbg.value(metadata i16 %466, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i422);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 930, 5} true;
  assume {:verifier.code 0} true;
  /* br label %467, !dbg !445, !verifier.code !62 */
  $i419 := $i422;
  goto $bb135;
$bb132:
  assume !(($i416 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 18} true;
  assume {:verifier.code 0} true;
  /* %461 = sext i16 %450 to i32, !dbg !440, !verifier.code !62 */
  $i417 := $sext.i16.i32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 20} true;
  assume {:verifier.code 0} true;
  /* %462 = icmp sgt i32 %461, 32767, !dbg !441, !verifier.code !62 */
  $i418 := $sgt.i32($i417, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %462, label %463, label %467, !dbg !442, !verifier.code !62 */
  $i419 := $i411;
  assume {:branchcond $i418} true;
  goto $bb133, $bb134;
$bb133:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 9} true;
  assume {:verifier.code 0} true;
  assume ($i418 == 1);
  goto $bb131;
$bb134:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i418 == 1));
  goto $bb135;
$bb135:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.28 = phi i16 [ %466, %463 ], [ %454, %460 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.28, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 931, 3} true;
  assume {:verifier.code 0} true;
  /* br label %468, !dbg !446, !verifier.code !62 */
  $i414 := $i419;
  goto $bb129;
$bb136:
  assume ($i442 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 9} true;
  assume {:verifier.code 0} true;
  /* %490 = sext i16 %482 to i32, !dbg !461, !verifier.code !62 */
  $i444 := $sext.i16.i32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 11} true;
  assume {:verifier.code 0} true;
  /* %491 = icmp slt i32 %490, 0, !dbg !464, !verifier.code !62 */
  $i445 := $slt.i32($i444, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %491, label %495, label %492, !dbg !465, !verifier.code !62 */
  assume {:branchcond $i445} true;
  goto $bb139, $bb141;
$bb137:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i442 == 1));
  goto $bb138;
$bb138:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.31 = phi i16 [ %.30, %499 ], [ %486, %468 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.31, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i16 %475, metadata !10841, metadata !DIExpression(DW_OP_LLVM_convert, 16, DW_ATE_signed, DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_constu, 32768, DW_OP_mod, DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_LLVM_convert, 16, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !10842, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 undef, metadata !10841, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_LLVM_convert, 16, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !10842, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i16 %482, metadata !10843, metadata !DIExpression(DW_OP_LLVM_convert, 16, DW_ATE_signed, DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_constu, 32768, DW_OP_mod, DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_LLVM_convert, 16, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !10842, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 undef, metadata !10843, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_LLVM_convert, 16, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 948, 3} true;
  assume {:verifier.code 0} true;
  /* ret i16 %.31, !dbg !473, !verifier.code !62 */
  $r := $i443;
  $exn := false;
  return;
$bb139:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 15} true;
  assume {:verifier.code 0} true;
  assume ($i445 == 1);
  goto $bb140;
$bb140:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 940, 9} true;
  assume {:verifier.code 0} true;
  /* %496 = sext i16 %486 to i32, !dbg !469, !verifier.code !62 */
  $i449 := $sext.i16.i32($i440);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 940, 9} true;
  assume {:verifier.code 0} true;
  /* %497 = add nsw i32 %496, 1, !dbg !469, !verifier.code !62 */
  $i450 := $add.i32($i449, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 940, 9} true;
  assume {:verifier.code 0} true;
  /* %498 = trunc i32 %497 to i16, !dbg !469, !verifier.code !62 */
  $i451 := $trunc.i32.i16($i450);
  /* call void @llvm.dbg.value(metadata i16 %498, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i16($i451);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 941, 5} true;
  assume {:verifier.code 0} true;
  /* br label %499, !dbg !471, !verifier.code !62 */
  $i448 := $i451;
  goto $bb144;
$bb141:
  assume !(($i445 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 18} true;
  assume {:verifier.code 0} true;
  /* %493 = sext i16 %482 to i32, !dbg !466, !verifier.code !62 */
  $i446 := $sext.i16.i32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 20} true;
  assume {:verifier.code 0} true;
  /* %494 = icmp sgt i32 %493, 32767, !dbg !467, !verifier.code !62 */
  $i447 := $sgt.i32($i446, 32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %494, label %495, label %499, !dbg !468, !verifier.code !62 */
  $i448 := $i440;
  assume {:branchcond $i447} true;
  goto $bb142, $bb143;
$bb142:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 9} true;
  assume {:verifier.code 0} true;
  assume ($i447 == 1);
  goto $bb140;
$bb143:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i447 == 1));
  goto $bb144;
$bb144:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.30 = phi i16 [ %498, %495 ], [ %486, %492 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i16 %.30, metadata !10844, metadata !DIExpression()), !dbg !10842, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 942, 3} true;
  assume {:verifier.code 0} true;
  /* br label %500, !dbg !472, !verifier.code !62 */
  $i443 := $i448;
  goto $bb138;
}
const __SMACK_and8: ref;
axiom (__SMACK_and8 == $sub.ref(0, 42312));
procedure {:inline 1} __SMACK_and8($i0: i8, $i1: i8)
  returns ($r: i8)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i13: i8;
  var $i8: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $i42: i8;
  var $i37: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $i71: i8;
  var $i66: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i8;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $i100: i8;
  var $i95: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i8;
  var $i111: i32;
  var $i112: i32;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i130: i32;
  var $i131: i32;
  var $i132: i8;
  var $i129: i8;
  var $i124: i8;
  var $i133: i32;
  var $i134: i32;
  var $i135: i8;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i8;
  var $i140: i32;
  var $i141: i32;
  var $i142: i8;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i8;
  var $i151: i32;
  var $i152: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i1;
  var $i159: i32;
  var $i160: i32;
  var $i161: i8;
  var $i158: i8;
  var $i153: i8;
  var $i162: i32;
  var $i163: i32;
  var $i164: i8;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i8;
  var $i169: i32;
  var $i170: i32;
  var $i171: i8;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i8;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i188: i32;
  var $i189: i32;
  var $i190: i8;
  var $i187: i8;
  var $i182: i8;
  var $i191: i32;
  var $i192: i32;
  var $i193: i8;
  var $i194: i32;
  var $i195: i32;
  var $i196: i32;
  var $i197: i8;
  var $i198: i32;
  var $i199: i32;
  var $i200: i8;
  var $i201: i32;
  var $i202: i32;
  var $i203: i32;
  var $i204: i8;
  var $i205: i32;
  var $i206: i32;
  var $i207: i32;
  var $i208: i8;
  var $i209: i32;
  var $i210: i1;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i215: i1;
  var $i217: i32;
  var $i218: i32;
  var $i219: i8;
  var $i216: i8;
  var $i211: i8;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 8} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i8 %0, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "__SMACK_and8:arg:a"} boogie_si_record_i8($i0);
  /* call void @llvm.dbg.value(metadata i8 %1, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "__SMACK_and8:arg:b"} boogie_si_record_i8($i1);
  /* call void @llvm.dbg.value(metadata i8 0, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 8} true;
  assume {:verifier.code 0} true;
  /* %3 = sext i8 0 to i32, !dbg !65, !verifier.code !62 */
  $i2 := $sext.i8.i32(0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 5} true;
  assume {:verifier.code 0} true;
  /* %4 = sext i8 0 to i32, !dbg !66, !verifier.code !62 */
  $i3 := $sext.i8.i32(0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 5} true;
  assume {:verifier.code 0} true;
  /* %5 = add nsw i32 %4, %3, !dbg !66, !verifier.code !62 */
  $i4 := $add.i32($i3, $i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 5} true;
  assume {:verifier.code 0} true;
  /* %6 = trunc i32 %5 to i8, !dbg !66, !verifier.code !62 */
  $i5 := $trunc.i32.i8($i4);
  /* call void @llvm.dbg.value(metadata i8 %6, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 7} true;
  assume {:verifier.code 0} true;
  /* %7 = sext i8 %0 to i32, !dbg !67, !verifier.code !62 */
  $i6 := $sext.i8.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 9} true;
  assume {:verifier.code 0} true;
  /* %8 = icmp slt i32 %7, 0, !dbg !69, !verifier.code !62 */
  $i7 := $slt.i32($i6, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %8, label %9, label %20, !dbg !70, !verifier.code !62 */
  $i8 := $i5;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 9} true;
  assume {:verifier.code 0} true;
  /* %10 = sext i8 %1 to i32, !dbg !71, !verifier.code !62 */
  $i9 := $sext.i8.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 11} true;
  assume {:verifier.code 0} true;
  /* %11 = icmp slt i32 %10, 0, !dbg !74, !verifier.code !62 */
  $i10 := $slt.i32($i9, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %11, label %15, label %12, !dbg !75, !verifier.code !62 */
  assume {:branchcond $i10} true;
  goto $bb4, $bb6;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i7 == 1));
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.1 = phi i8 [ %.0, %19 ], [ %6, %2 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.1, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 960, 7} true;
  assume {:verifier.code 0} true;
  /* %21 = sext i8 %0 to i32, !dbg !83, !verifier.code !62 */
  $i17 := $sext.i8.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 960, 9} true;
  assume {:verifier.code 0} true;
  /* %22 = srem i32 %21, 128, !dbg !84, !verifier.code !62 */
  $i18 := $srem.i32($i17, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 960, 7} true;
  assume {:verifier.code 0} true;
  /* %23 = trunc i32 %22 to i8, !dbg !83, !verifier.code !62 */
  $i19 := $trunc.i32.i8($i18);
  /* call void @llvm.dbg.value(metadata i8 %23, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 961, 8} true;
  assume {:verifier.code 0} true;
  /* %24 = sext i8 %23 to i32, !dbg !85, !verifier.code !62 */
  $i20 := $sext.i8.i32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 961, 5} true;
  assume {:verifier.code 0} true;
  /* %25 = sext i8 %23 to i32, !dbg !86, !verifier.code !62 */
  $i21 := $sext.i8.i32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 961, 5} true;
  assume {:verifier.code 0} true;
  /* %26 = add nsw i32 %25, %24, !dbg !86, !verifier.code !62 */
  $i22 := $add.i32($i21, $i20);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 961, 5} true;
  assume {:verifier.code 0} true;
  /* %27 = trunc i32 %26 to i8, !dbg !86, !verifier.code !62 */
  $i23 := $trunc.i32.i8($i22);
  /* call void @llvm.dbg.value(metadata i8 %27, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 962, 7} true;
  assume {:verifier.code 0} true;
  /* %28 = sext i8 %1 to i32, !dbg !87, !verifier.code !62 */
  $i24 := $sext.i8.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 962, 9} true;
  assume {:verifier.code 0} true;
  /* %29 = srem i32 %28, 128, !dbg !88, !verifier.code !62 */
  $i25 := $srem.i32($i24, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 962, 7} true;
  assume {:verifier.code 0} true;
  /* %30 = trunc i32 %29 to i8, !dbg !87, !verifier.code !62 */
  $i26 := $trunc.i32.i8($i25);
  /* call void @llvm.dbg.value(metadata i8 %30, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 963, 8} true;
  assume {:verifier.code 0} true;
  /* %31 = sext i8 %30 to i32, !dbg !89, !verifier.code !62 */
  $i27 := $sext.i8.i32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 963, 5} true;
  assume {:verifier.code 0} true;
  /* %32 = sext i8 %30 to i32, !dbg !90, !verifier.code !62 */
  $i28 := $sext.i8.i32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 963, 5} true;
  assume {:verifier.code 0} true;
  /* %33 = add nsw i32 %32, %31, !dbg !90, !verifier.code !62 */
  $i29 := $add.i32($i28, $i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 963, 5} true;
  assume {:verifier.code 0} true;
  /* %34 = trunc i32 %33 to i8, !dbg !90, !verifier.code !62 */
  $i30 := $trunc.i32.i8($i29);
  /* call void @llvm.dbg.value(metadata i8 %34, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 965, 8} true;
  assume {:verifier.code 0} true;
  /* %35 = sext i8 %.1 to i32, !dbg !91, !verifier.code !62 */
  $i31 := $sext.i8.i32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 965, 5} true;
  assume {:verifier.code 0} true;
  /* %36 = sext i8 %.1 to i32, !dbg !92, !verifier.code !62 */
  $i32 := $sext.i8.i32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 965, 5} true;
  assume {:verifier.code 0} true;
  /* %37 = add nsw i32 %36, %35, !dbg !92, !verifier.code !62 */
  $i33 := $add.i32($i32, $i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 965, 5} true;
  assume {:verifier.code 0} true;
  /* %38 = trunc i32 %37 to i8, !dbg !92, !verifier.code !62 */
  $i34 := $trunc.i32.i8($i33);
  /* call void @llvm.dbg.value(metadata i8 %38, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 7} true;
  assume {:verifier.code 0} true;
  /* %39 = sext i8 %27 to i32, !dbg !93, !verifier.code !62 */
  $i35 := $sext.i8.i32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 9} true;
  assume {:verifier.code 0} true;
  /* %40 = icmp slt i32 %39, 0, !dbg !95, !verifier.code !62 */
  $i36 := $slt.i32($i35, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %40, label %41, label %52, !dbg !96, !verifier.code !62 */
  $i37 := $i34;
  assume {:branchcond $i36} true;
  goto $bb10, $bb11;
$bb4:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 15} true;
  assume {:verifier.code 0} true;
  assume ($i10 == 1);
  goto $bb5;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 957, 9} true;
  assume {:verifier.code 0} true;
  /* %16 = sext i8 %6 to i32, !dbg !79, !verifier.code !62 */
  $i14 := $sext.i8.i32($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 957, 9} true;
  assume {:verifier.code 0} true;
  /* %17 = add nsw i32 %16, 1, !dbg !79, !verifier.code !62 */
  $i15 := $add.i32($i14, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 957, 9} true;
  assume {:verifier.code 0} true;
  /* %18 = trunc i32 %17 to i8, !dbg !79, !verifier.code !62 */
  $i16 := $trunc.i32.i8($i15);
  /* call void @llvm.dbg.value(metadata i8 %18, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 958, 5} true;
  assume {:verifier.code 0} true;
  /* br label %19, !dbg !81, !verifier.code !62 */
  $i13 := $i16;
  goto $bb9;
$bb6:
  assume !(($i10 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 18} true;
  assume {:verifier.code 0} true;
  /* %13 = sext i8 %1 to i32, !dbg !76, !verifier.code !62 */
  $i11 := $sext.i8.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 20} true;
  assume {:verifier.code 0} true;
  /* %14 = icmp sgt i32 %13, 127, !dbg !77, !verifier.code !62 */
  $i12 := $sgt.i32($i11, 127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %14, label %15, label %19, !dbg !78, !verifier.code !62 */
  $i13 := $i5;
  assume {:branchcond $i12} true;
  goto $bb7, $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 9} true;
  assume {:verifier.code 0} true;
  assume ($i12 == 1);
  goto $bb5;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i12 == 1));
  goto $bb9;
$bb9:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.0 = phi i8 [ %18, %15 ], [ %6, %12 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.0, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 959, 3} true;
  assume {:verifier.code 0} true;
  /* br label %20, !dbg !82, !verifier.code !62 */
  $i8 := $i13;
  goto $bb3;
$bb10:
  assume ($i36 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 9} true;
  assume {:verifier.code 0} true;
  /* %42 = sext i8 %34 to i32, !dbg !97, !verifier.code !62 */
  $i38 := $sext.i8.i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 11} true;
  assume {:verifier.code 0} true;
  /* %43 = icmp slt i32 %42, 0, !dbg !100, !verifier.code !62 */
  $i39 := $slt.i32($i38, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %43, label %47, label %44, !dbg !101, !verifier.code !62 */
  assume {:branchcond $i39} true;
  goto $bb13, $bb15;
$bb11:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i36 == 1));
  goto $bb12;
$bb12:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.3 = phi i8 [ %.2, %51 ], [ %38, %20 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.3, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 971, 7} true;
  assume {:verifier.code 0} true;
  /* %53 = sext i8 %27 to i32, !dbg !109, !verifier.code !62 */
  $i46 := $sext.i8.i32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 971, 9} true;
  assume {:verifier.code 0} true;
  /* %54 = srem i32 %53, 128, !dbg !110, !verifier.code !62 */
  $i47 := $srem.i32($i46, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 971, 7} true;
  assume {:verifier.code 0} true;
  /* %55 = trunc i32 %54 to i8, !dbg !109, !verifier.code !62 */
  $i48 := $trunc.i32.i8($i47);
  /* call void @llvm.dbg.value(metadata i8 %55, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 972, 8} true;
  assume {:verifier.code 0} true;
  /* %56 = sext i8 %55 to i32, !dbg !111, !verifier.code !62 */
  $i49 := $sext.i8.i32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 972, 5} true;
  assume {:verifier.code 0} true;
  /* %57 = sext i8 %55 to i32, !dbg !112, !verifier.code !62 */
  $i50 := $sext.i8.i32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 972, 5} true;
  assume {:verifier.code 0} true;
  /* %58 = add nsw i32 %57, %56, !dbg !112, !verifier.code !62 */
  $i51 := $add.i32($i50, $i49);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 972, 5} true;
  assume {:verifier.code 0} true;
  /* %59 = trunc i32 %58 to i8, !dbg !112, !verifier.code !62 */
  $i52 := $trunc.i32.i8($i51);
  /* call void @llvm.dbg.value(metadata i8 %59, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 973, 7} true;
  assume {:verifier.code 0} true;
  /* %60 = sext i8 %34 to i32, !dbg !113, !verifier.code !62 */
  $i53 := $sext.i8.i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 973, 9} true;
  assume {:verifier.code 0} true;
  /* %61 = srem i32 %60, 128, !dbg !114, !verifier.code !62 */
  $i54 := $srem.i32($i53, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 973, 7} true;
  assume {:verifier.code 0} true;
  /* %62 = trunc i32 %61 to i8, !dbg !113, !verifier.code !62 */
  $i55 := $trunc.i32.i8($i54);
  /* call void @llvm.dbg.value(metadata i8 %62, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 974, 8} true;
  assume {:verifier.code 0} true;
  /* %63 = sext i8 %62 to i32, !dbg !115, !verifier.code !62 */
  $i56 := $sext.i8.i32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 974, 5} true;
  assume {:verifier.code 0} true;
  /* %64 = sext i8 %62 to i32, !dbg !116, !verifier.code !62 */
  $i57 := $sext.i8.i32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 974, 5} true;
  assume {:verifier.code 0} true;
  /* %65 = add nsw i32 %64, %63, !dbg !116, !verifier.code !62 */
  $i58 := $add.i32($i57, $i56);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 974, 5} true;
  assume {:verifier.code 0} true;
  /* %66 = trunc i32 %65 to i8, !dbg !116, !verifier.code !62 */
  $i59 := $trunc.i32.i8($i58);
  /* call void @llvm.dbg.value(metadata i8 %66, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 976, 8} true;
  assume {:verifier.code 0} true;
  /* %67 = sext i8 %.3 to i32, !dbg !117, !verifier.code !62 */
  $i60 := $sext.i8.i32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 976, 5} true;
  assume {:verifier.code 0} true;
  /* %68 = sext i8 %.3 to i32, !dbg !118, !verifier.code !62 */
  $i61 := $sext.i8.i32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 976, 5} true;
  assume {:verifier.code 0} true;
  /* %69 = add nsw i32 %68, %67, !dbg !118, !verifier.code !62 */
  $i62 := $add.i32($i61, $i60);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 976, 5} true;
  assume {:verifier.code 0} true;
  /* %70 = trunc i32 %69 to i8, !dbg !118, !verifier.code !62 */
  $i63 := $trunc.i32.i8($i62);
  /* call void @llvm.dbg.value(metadata i8 %70, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i63);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 977, 7} true;
  assume {:verifier.code 0} true;
  /* %71 = sext i8 %59 to i32, !dbg !119, !verifier.code !62 */
  $i64 := $sext.i8.i32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 977, 9} true;
  assume {:verifier.code 0} true;
  /* %72 = icmp slt i32 %71, 0, !dbg !121, !verifier.code !62 */
  $i65 := $slt.i32($i64, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 977, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %72, label %73, label %84, !dbg !122, !verifier.code !62 */
  $i66 := $i63;
  assume {:branchcond $i65} true;
  goto $bb19, $bb20;
$bb13:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 15} true;
  assume {:verifier.code 0} true;
  assume ($i39 == 1);
  goto $bb14;
$bb14:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 968, 9} true;
  assume {:verifier.code 0} true;
  /* %48 = sext i8 %38 to i32, !dbg !105, !verifier.code !62 */
  $i43 := $sext.i8.i32($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 968, 9} true;
  assume {:verifier.code 0} true;
  /* %49 = add nsw i32 %48, 1, !dbg !105, !verifier.code !62 */
  $i44 := $add.i32($i43, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 968, 9} true;
  assume {:verifier.code 0} true;
  /* %50 = trunc i32 %49 to i8, !dbg !105, !verifier.code !62 */
  $i45 := $trunc.i32.i8($i44);
  /* call void @llvm.dbg.value(metadata i8 %50, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i45);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 969, 5} true;
  assume {:verifier.code 0} true;
  /* br label %51, !dbg !107, !verifier.code !62 */
  $i42 := $i45;
  goto $bb18;
$bb15:
  assume !(($i39 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 18} true;
  assume {:verifier.code 0} true;
  /* %45 = sext i8 %34 to i32, !dbg !102, !verifier.code !62 */
  $i40 := $sext.i8.i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 20} true;
  assume {:verifier.code 0} true;
  /* %46 = icmp sgt i32 %45, 127, !dbg !103, !verifier.code !62 */
  $i41 := $sgt.i32($i40, 127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %46, label %47, label %51, !dbg !104, !verifier.code !62 */
  $i42 := $i34;
  assume {:branchcond $i41} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 9} true;
  assume {:verifier.code 0} true;
  assume ($i41 == 1);
  goto $bb14;
$bb17:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i41 == 1));
  goto $bb18;
$bb18:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.2 = phi i8 [ %50, %47 ], [ %38, %44 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.2, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 970, 3} true;
  assume {:verifier.code 0} true;
  /* br label %52, !dbg !108, !verifier.code !62 */
  $i37 := $i42;
  goto $bb12;
$bb19:
  assume ($i65 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 9} true;
  assume {:verifier.code 0} true;
  /* %74 = sext i8 %66 to i32, !dbg !123, !verifier.code !62 */
  $i67 := $sext.i8.i32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 11} true;
  assume {:verifier.code 0} true;
  /* %75 = icmp slt i32 %74, 0, !dbg !126, !verifier.code !62 */
  $i68 := $slt.i32($i67, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %75, label %79, label %76, !dbg !127, !verifier.code !62 */
  assume {:branchcond $i68} true;
  goto $bb22, $bb24;
$bb20:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 977, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i65 == 1));
  goto $bb21;
$bb21:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.5 = phi i8 [ %.4, %83 ], [ %70, %52 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.5, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 982, 7} true;
  assume {:verifier.code 0} true;
  /* %85 = sext i8 %59 to i32, !dbg !135, !verifier.code !62 */
  $i75 := $sext.i8.i32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 982, 9} true;
  assume {:verifier.code 0} true;
  /* %86 = srem i32 %85, 128, !dbg !136, !verifier.code !62 */
  $i76 := $srem.i32($i75, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 982, 7} true;
  assume {:verifier.code 0} true;
  /* %87 = trunc i32 %86 to i8, !dbg !135, !verifier.code !62 */
  $i77 := $trunc.i32.i8($i76);
  /* call void @llvm.dbg.value(metadata i8 %87, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 983, 8} true;
  assume {:verifier.code 0} true;
  /* %88 = sext i8 %87 to i32, !dbg !137, !verifier.code !62 */
  $i78 := $sext.i8.i32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 983, 5} true;
  assume {:verifier.code 0} true;
  /* %89 = sext i8 %87 to i32, !dbg !138, !verifier.code !62 */
  $i79 := $sext.i8.i32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 983, 5} true;
  assume {:verifier.code 0} true;
  /* %90 = add nsw i32 %89, %88, !dbg !138, !verifier.code !62 */
  $i80 := $add.i32($i79, $i78);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 983, 5} true;
  assume {:verifier.code 0} true;
  /* %91 = trunc i32 %90 to i8, !dbg !138, !verifier.code !62 */
  $i81 := $trunc.i32.i8($i80);
  /* call void @llvm.dbg.value(metadata i8 %91, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 984, 7} true;
  assume {:verifier.code 0} true;
  /* %92 = sext i8 %66 to i32, !dbg !139, !verifier.code !62 */
  $i82 := $sext.i8.i32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 984, 9} true;
  assume {:verifier.code 0} true;
  /* %93 = srem i32 %92, 128, !dbg !140, !verifier.code !62 */
  $i83 := $srem.i32($i82, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 984, 7} true;
  assume {:verifier.code 0} true;
  /* %94 = trunc i32 %93 to i8, !dbg !139, !verifier.code !62 */
  $i84 := $trunc.i32.i8($i83);
  /* call void @llvm.dbg.value(metadata i8 %94, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 985, 8} true;
  assume {:verifier.code 0} true;
  /* %95 = sext i8 %94 to i32, !dbg !141, !verifier.code !62 */
  $i85 := $sext.i8.i32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 985, 5} true;
  assume {:verifier.code 0} true;
  /* %96 = sext i8 %94 to i32, !dbg !142, !verifier.code !62 */
  $i86 := $sext.i8.i32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 985, 5} true;
  assume {:verifier.code 0} true;
  /* %97 = add nsw i32 %96, %95, !dbg !142, !verifier.code !62 */
  $i87 := $add.i32($i86, $i85);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 985, 5} true;
  assume {:verifier.code 0} true;
  /* %98 = trunc i32 %97 to i8, !dbg !142, !verifier.code !62 */
  $i88 := $trunc.i32.i8($i87);
  /* call void @llvm.dbg.value(metadata i8 %98, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 8} true;
  assume {:verifier.code 0} true;
  /* %99 = sext i8 %.5 to i32, !dbg !143, !verifier.code !62 */
  $i89 := $sext.i8.i32($i66);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 5} true;
  assume {:verifier.code 0} true;
  /* %100 = sext i8 %.5 to i32, !dbg !144, !verifier.code !62 */
  $i90 := $sext.i8.i32($i66);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 5} true;
  assume {:verifier.code 0} true;
  /* %101 = add nsw i32 %100, %99, !dbg !144, !verifier.code !62 */
  $i91 := $add.i32($i90, $i89);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 5} true;
  assume {:verifier.code 0} true;
  /* %102 = trunc i32 %101 to i8, !dbg !144, !verifier.code !62 */
  $i92 := $trunc.i32.i8($i91);
  /* call void @llvm.dbg.value(metadata i8 %102, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 7} true;
  assume {:verifier.code 0} true;
  /* %103 = sext i8 %91 to i32, !dbg !145, !verifier.code !62 */
  $i93 := $sext.i8.i32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 9} true;
  assume {:verifier.code 0} true;
  /* %104 = icmp slt i32 %103, 0, !dbg !147, !verifier.code !62 */
  $i94 := $slt.i32($i93, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %104, label %105, label %116, !dbg !148, !verifier.code !62 */
  $i95 := $i92;
  assume {:branchcond $i94} true;
  goto $bb28, $bb29;
$bb22:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 15} true;
  assume {:verifier.code 0} true;
  assume ($i68 == 1);
  goto $bb23;
$bb23:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 979, 9} true;
  assume {:verifier.code 0} true;
  /* %80 = sext i8 %70 to i32, !dbg !131, !verifier.code !62 */
  $i72 := $sext.i8.i32($i63);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 979, 9} true;
  assume {:verifier.code 0} true;
  /* %81 = add nsw i32 %80, 1, !dbg !131, !verifier.code !62 */
  $i73 := $add.i32($i72, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 979, 9} true;
  assume {:verifier.code 0} true;
  /* %82 = trunc i32 %81 to i8, !dbg !131, !verifier.code !62 */
  $i74 := $trunc.i32.i8($i73);
  /* call void @llvm.dbg.value(metadata i8 %82, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i74);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 980, 5} true;
  assume {:verifier.code 0} true;
  /* br label %83, !dbg !133, !verifier.code !62 */
  $i71 := $i74;
  goto $bb27;
$bb24:
  assume !(($i68 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 18} true;
  assume {:verifier.code 0} true;
  /* %77 = sext i8 %66 to i32, !dbg !128, !verifier.code !62 */
  $i69 := $sext.i8.i32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 20} true;
  assume {:verifier.code 0} true;
  /* %78 = icmp sgt i32 %77, 127, !dbg !129, !verifier.code !62 */
  $i70 := $sgt.i32($i69, 127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %78, label %79, label %83, !dbg !130, !verifier.code !62 */
  $i71 := $i63;
  assume {:branchcond $i70} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 9} true;
  assume {:verifier.code 0} true;
  assume ($i70 == 1);
  goto $bb23;
$bb26:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i70 == 1));
  goto $bb27;
$bb27:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.4 = phi i8 [ %82, %79 ], [ %70, %76 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.4, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 981, 3} true;
  assume {:verifier.code 0} true;
  /* br label %84, !dbg !134, !verifier.code !62 */
  $i66 := $i71;
  goto $bb21;
$bb28:
  assume ($i94 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 9} true;
  assume {:verifier.code 0} true;
  /* %106 = sext i8 %98 to i32, !dbg !149, !verifier.code !62 */
  $i96 := $sext.i8.i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 11} true;
  assume {:verifier.code 0} true;
  /* %107 = icmp slt i32 %106, 0, !dbg !152, !verifier.code !62 */
  $i97 := $slt.i32($i96, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %107, label %111, label %108, !dbg !153, !verifier.code !62 */
  assume {:branchcond $i97} true;
  goto $bb31, $bb33;
$bb29:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i94 == 1));
  goto $bb30;
$bb30:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.7 = phi i8 [ %.6, %115 ], [ %102, %84 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.7, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 993, 7} true;
  assume {:verifier.code 0} true;
  /* %117 = sext i8 %91 to i32, !dbg !161, !verifier.code !62 */
  $i104 := $sext.i8.i32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 993, 9} true;
  assume {:verifier.code 0} true;
  /* %118 = srem i32 %117, 128, !dbg !162, !verifier.code !62 */
  $i105 := $srem.i32($i104, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 993, 7} true;
  assume {:verifier.code 0} true;
  /* %119 = trunc i32 %118 to i8, !dbg !161, !verifier.code !62 */
  $i106 := $trunc.i32.i8($i105);
  /* call void @llvm.dbg.value(metadata i8 %119, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 994, 8} true;
  assume {:verifier.code 0} true;
  /* %120 = sext i8 %119 to i32, !dbg !163, !verifier.code !62 */
  $i107 := $sext.i8.i32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 994, 5} true;
  assume {:verifier.code 0} true;
  /* %121 = sext i8 %119 to i32, !dbg !164, !verifier.code !62 */
  $i108 := $sext.i8.i32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 994, 5} true;
  assume {:verifier.code 0} true;
  /* %122 = add nsw i32 %121, %120, !dbg !164, !verifier.code !62 */
  $i109 := $add.i32($i108, $i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 994, 5} true;
  assume {:verifier.code 0} true;
  /* %123 = trunc i32 %122 to i8, !dbg !164, !verifier.code !62 */
  $i110 := $trunc.i32.i8($i109);
  /* call void @llvm.dbg.value(metadata i8 %123, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 995, 7} true;
  assume {:verifier.code 0} true;
  /* %124 = sext i8 %98 to i32, !dbg !165, !verifier.code !62 */
  $i111 := $sext.i8.i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 995, 9} true;
  assume {:verifier.code 0} true;
  /* %125 = srem i32 %124, 128, !dbg !166, !verifier.code !62 */
  $i112 := $srem.i32($i111, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 995, 7} true;
  assume {:verifier.code 0} true;
  /* %126 = trunc i32 %125 to i8, !dbg !165, !verifier.code !62 */
  $i113 := $trunc.i32.i8($i112);
  /* call void @llvm.dbg.value(metadata i8 %126, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 996, 8} true;
  assume {:verifier.code 0} true;
  /* %127 = sext i8 %126 to i32, !dbg !167, !verifier.code !62 */
  $i114 := $sext.i8.i32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 996, 5} true;
  assume {:verifier.code 0} true;
  /* %128 = sext i8 %126 to i32, !dbg !168, !verifier.code !62 */
  $i115 := $sext.i8.i32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 996, 5} true;
  assume {:verifier.code 0} true;
  /* %129 = add nsw i32 %128, %127, !dbg !168, !verifier.code !62 */
  $i116 := $add.i32($i115, $i114);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 996, 5} true;
  assume {:verifier.code 0} true;
  /* %130 = trunc i32 %129 to i8, !dbg !168, !verifier.code !62 */
  $i117 := $trunc.i32.i8($i116);
  /* call void @llvm.dbg.value(metadata i8 %130, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 998, 8} true;
  assume {:verifier.code 0} true;
  /* %131 = sext i8 %.7 to i32, !dbg !169, !verifier.code !62 */
  $i118 := $sext.i8.i32($i95);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 998, 5} true;
  assume {:verifier.code 0} true;
  /* %132 = sext i8 %.7 to i32, !dbg !170, !verifier.code !62 */
  $i119 := $sext.i8.i32($i95);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 998, 5} true;
  assume {:verifier.code 0} true;
  /* %133 = add nsw i32 %132, %131, !dbg !170, !verifier.code !62 */
  $i120 := $add.i32($i119, $i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 998, 5} true;
  assume {:verifier.code 0} true;
  /* %134 = trunc i32 %133 to i8, !dbg !170, !verifier.code !62 */
  $i121 := $trunc.i32.i8($i120);
  /* call void @llvm.dbg.value(metadata i8 %134, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 999, 7} true;
  assume {:verifier.code 0} true;
  /* %135 = sext i8 %123 to i32, !dbg !171, !verifier.code !62 */
  $i122 := $sext.i8.i32($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 999, 9} true;
  assume {:verifier.code 0} true;
  /* %136 = icmp slt i32 %135, 0, !dbg !173, !verifier.code !62 */
  $i123 := $slt.i32($i122, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 999, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %136, label %137, label %148, !dbg !174, !verifier.code !62 */
  $i124 := $i121;
  assume {:branchcond $i123} true;
  goto $bb37, $bb38;
$bb31:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 15} true;
  assume {:verifier.code 0} true;
  assume ($i97 == 1);
  goto $bb32;
$bb32:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 990, 9} true;
  assume {:verifier.code 0} true;
  /* %112 = sext i8 %102 to i32, !dbg !157, !verifier.code !62 */
  $i101 := $sext.i8.i32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 990, 9} true;
  assume {:verifier.code 0} true;
  /* %113 = add nsw i32 %112, 1, !dbg !157, !verifier.code !62 */
  $i102 := $add.i32($i101, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 990, 9} true;
  assume {:verifier.code 0} true;
  /* %114 = trunc i32 %113 to i8, !dbg !157, !verifier.code !62 */
  $i103 := $trunc.i32.i8($i102);
  /* call void @llvm.dbg.value(metadata i8 %114, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 991, 5} true;
  assume {:verifier.code 0} true;
  /* br label %115, !dbg !159, !verifier.code !62 */
  $i100 := $i103;
  goto $bb36;
$bb33:
  assume !(($i97 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 18} true;
  assume {:verifier.code 0} true;
  /* %109 = sext i8 %98 to i32, !dbg !154, !verifier.code !62 */
  $i98 := $sext.i8.i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 20} true;
  assume {:verifier.code 0} true;
  /* %110 = icmp sgt i32 %109, 127, !dbg !155, !verifier.code !62 */
  $i99 := $sgt.i32($i98, 127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %110, label %111, label %115, !dbg !156, !verifier.code !62 */
  $i100 := $i92;
  assume {:branchcond $i99} true;
  goto $bb34, $bb35;
$bb34:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 9} true;
  assume {:verifier.code 0} true;
  assume ($i99 == 1);
  goto $bb32;
$bb35:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i99 == 1));
  goto $bb36;
$bb36:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.6 = phi i8 [ %114, %111 ], [ %102, %108 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.6, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 992, 3} true;
  assume {:verifier.code 0} true;
  /* br label %116, !dbg !160, !verifier.code !62 */
  $i95 := $i100;
  goto $bb30;
$bb37:
  assume ($i123 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 9} true;
  assume {:verifier.code 0} true;
  /* %138 = sext i8 %130 to i32, !dbg !175, !verifier.code !62 */
  $i125 := $sext.i8.i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 11} true;
  assume {:verifier.code 0} true;
  /* %139 = icmp slt i32 %138, 0, !dbg !178, !verifier.code !62 */
  $i126 := $slt.i32($i125, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %139, label %143, label %140, !dbg !179, !verifier.code !62 */
  assume {:branchcond $i126} true;
  goto $bb40, $bb42;
$bb38:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 999, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i123 == 1));
  goto $bb39;
$bb39:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.9 = phi i8 [ %.8, %147 ], [ %134, %116 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.9, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1004, 7} true;
  assume {:verifier.code 0} true;
  /* %149 = sext i8 %123 to i32, !dbg !187, !verifier.code !62 */
  $i133 := $sext.i8.i32($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1004, 9} true;
  assume {:verifier.code 0} true;
  /* %150 = srem i32 %149, 128, !dbg !188, !verifier.code !62 */
  $i134 := $srem.i32($i133, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1004, 7} true;
  assume {:verifier.code 0} true;
  /* %151 = trunc i32 %150 to i8, !dbg !187, !verifier.code !62 */
  $i135 := $trunc.i32.i8($i134);
  /* call void @llvm.dbg.value(metadata i8 %151, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1005, 8} true;
  assume {:verifier.code 0} true;
  /* %152 = sext i8 %151 to i32, !dbg !189, !verifier.code !62 */
  $i136 := $sext.i8.i32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1005, 5} true;
  assume {:verifier.code 0} true;
  /* %153 = sext i8 %151 to i32, !dbg !190, !verifier.code !62 */
  $i137 := $sext.i8.i32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1005, 5} true;
  assume {:verifier.code 0} true;
  /* %154 = add nsw i32 %153, %152, !dbg !190, !verifier.code !62 */
  $i138 := $add.i32($i137, $i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1005, 5} true;
  assume {:verifier.code 0} true;
  /* %155 = trunc i32 %154 to i8, !dbg !190, !verifier.code !62 */
  $i139 := $trunc.i32.i8($i138);
  /* call void @llvm.dbg.value(metadata i8 %155, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1006, 7} true;
  assume {:verifier.code 0} true;
  /* %156 = sext i8 %130 to i32, !dbg !191, !verifier.code !62 */
  $i140 := $sext.i8.i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1006, 9} true;
  assume {:verifier.code 0} true;
  /* %157 = srem i32 %156, 128, !dbg !192, !verifier.code !62 */
  $i141 := $srem.i32($i140, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1006, 7} true;
  assume {:verifier.code 0} true;
  /* %158 = trunc i32 %157 to i8, !dbg !191, !verifier.code !62 */
  $i142 := $trunc.i32.i8($i141);
  /* call void @llvm.dbg.value(metadata i8 %158, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1007, 8} true;
  assume {:verifier.code 0} true;
  /* %159 = sext i8 %158 to i32, !dbg !193, !verifier.code !62 */
  $i143 := $sext.i8.i32($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1007, 5} true;
  assume {:verifier.code 0} true;
  /* %160 = sext i8 %158 to i32, !dbg !194, !verifier.code !62 */
  $i144 := $sext.i8.i32($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1007, 5} true;
  assume {:verifier.code 0} true;
  /* %161 = add nsw i32 %160, %159, !dbg !194, !verifier.code !62 */
  $i145 := $add.i32($i144, $i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1007, 5} true;
  assume {:verifier.code 0} true;
  /* %162 = trunc i32 %161 to i8, !dbg !194, !verifier.code !62 */
  $i146 := $trunc.i32.i8($i145);
  /* call void @llvm.dbg.value(metadata i8 %162, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 8} true;
  assume {:verifier.code 0} true;
  /* %163 = sext i8 %.9 to i32, !dbg !195, !verifier.code !62 */
  $i147 := $sext.i8.i32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 5} true;
  assume {:verifier.code 0} true;
  /* %164 = sext i8 %.9 to i32, !dbg !196, !verifier.code !62 */
  $i148 := $sext.i8.i32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 5} true;
  assume {:verifier.code 0} true;
  /* %165 = add nsw i32 %164, %163, !dbg !196, !verifier.code !62 */
  $i149 := $add.i32($i148, $i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 5} true;
  assume {:verifier.code 0} true;
  /* %166 = trunc i32 %165 to i8, !dbg !196, !verifier.code !62 */
  $i150 := $trunc.i32.i8($i149);
  /* call void @llvm.dbg.value(metadata i8 %166, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 7} true;
  assume {:verifier.code 0} true;
  /* %167 = sext i8 %155 to i32, !dbg !197, !verifier.code !62 */
  $i151 := $sext.i8.i32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 9} true;
  assume {:verifier.code 0} true;
  /* %168 = icmp slt i32 %167, 0, !dbg !199, !verifier.code !62 */
  $i152 := $slt.i32($i151, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %168, label %169, label %180, !dbg !200, !verifier.code !62 */
  $i153 := $i150;
  assume {:branchcond $i152} true;
  goto $bb46, $bb47;
$bb40:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 15} true;
  assume {:verifier.code 0} true;
  assume ($i126 == 1);
  goto $bb41;
$bb41:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1001, 9} true;
  assume {:verifier.code 0} true;
  /* %144 = sext i8 %134 to i32, !dbg !183, !verifier.code !62 */
  $i130 := $sext.i8.i32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1001, 9} true;
  assume {:verifier.code 0} true;
  /* %145 = add nsw i32 %144, 1, !dbg !183, !verifier.code !62 */
  $i131 := $add.i32($i130, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1001, 9} true;
  assume {:verifier.code 0} true;
  /* %146 = trunc i32 %145 to i8, !dbg !183, !verifier.code !62 */
  $i132 := $trunc.i32.i8($i131);
  /* call void @llvm.dbg.value(metadata i8 %146, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1002, 5} true;
  assume {:verifier.code 0} true;
  /* br label %147, !dbg !185, !verifier.code !62 */
  $i129 := $i132;
  goto $bb45;
$bb42:
  assume !(($i126 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 18} true;
  assume {:verifier.code 0} true;
  /* %141 = sext i8 %130 to i32, !dbg !180, !verifier.code !62 */
  $i127 := $sext.i8.i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 20} true;
  assume {:verifier.code 0} true;
  /* %142 = icmp sgt i32 %141, 127, !dbg !181, !verifier.code !62 */
  $i128 := $sgt.i32($i127, 127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %142, label %143, label %147, !dbg !182, !verifier.code !62 */
  $i129 := $i121;
  assume {:branchcond $i128} true;
  goto $bb43, $bb44;
$bb43:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 9} true;
  assume {:verifier.code 0} true;
  assume ($i128 == 1);
  goto $bb41;
$bb44:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i128 == 1));
  goto $bb45;
$bb45:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.8 = phi i8 [ %146, %143 ], [ %134, %140 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.8, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1003, 3} true;
  assume {:verifier.code 0} true;
  /* br label %148, !dbg !186, !verifier.code !62 */
  $i124 := $i129;
  goto $bb39;
$bb46:
  assume ($i152 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 9} true;
  assume {:verifier.code 0} true;
  /* %170 = sext i8 %162 to i32, !dbg !201, !verifier.code !62 */
  $i154 := $sext.i8.i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 11} true;
  assume {:verifier.code 0} true;
  /* %171 = icmp slt i32 %170, 0, !dbg !204, !verifier.code !62 */
  $i155 := $slt.i32($i154, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %171, label %175, label %172, !dbg !205, !verifier.code !62 */
  assume {:branchcond $i155} true;
  goto $bb49, $bb51;
$bb47:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i152 == 1));
  goto $bb48;
$bb48:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.11 = phi i8 [ %.10, %179 ], [ %166, %148 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.11, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1015, 7} true;
  assume {:verifier.code 0} true;
  /* %181 = sext i8 %155 to i32, !dbg !213, !verifier.code !62 */
  $i162 := $sext.i8.i32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1015, 9} true;
  assume {:verifier.code 0} true;
  /* %182 = srem i32 %181, 128, !dbg !214, !verifier.code !62 */
  $i163 := $srem.i32($i162, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1015, 7} true;
  assume {:verifier.code 0} true;
  /* %183 = trunc i32 %182 to i8, !dbg !213, !verifier.code !62 */
  $i164 := $trunc.i32.i8($i163);
  /* call void @llvm.dbg.value(metadata i8 %183, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1016, 8} true;
  assume {:verifier.code 0} true;
  /* %184 = sext i8 %183 to i32, !dbg !215, !verifier.code !62 */
  $i165 := $sext.i8.i32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1016, 5} true;
  assume {:verifier.code 0} true;
  /* %185 = sext i8 %183 to i32, !dbg !216, !verifier.code !62 */
  $i166 := $sext.i8.i32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1016, 5} true;
  assume {:verifier.code 0} true;
  /* %186 = add nsw i32 %185, %184, !dbg !216, !verifier.code !62 */
  $i167 := $add.i32($i166, $i165);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1016, 5} true;
  assume {:verifier.code 0} true;
  /* %187 = trunc i32 %186 to i8, !dbg !216, !verifier.code !62 */
  $i168 := $trunc.i32.i8($i167);
  /* call void @llvm.dbg.value(metadata i8 %187, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1017, 7} true;
  assume {:verifier.code 0} true;
  /* %188 = sext i8 %162 to i32, !dbg !217, !verifier.code !62 */
  $i169 := $sext.i8.i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1017, 9} true;
  assume {:verifier.code 0} true;
  /* %189 = srem i32 %188, 128, !dbg !218, !verifier.code !62 */
  $i170 := $srem.i32($i169, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1017, 7} true;
  assume {:verifier.code 0} true;
  /* %190 = trunc i32 %189 to i8, !dbg !217, !verifier.code !62 */
  $i171 := $trunc.i32.i8($i170);
  /* call void @llvm.dbg.value(metadata i8 %190, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1018, 8} true;
  assume {:verifier.code 0} true;
  /* %191 = sext i8 %190 to i32, !dbg !219, !verifier.code !62 */
  $i172 := $sext.i8.i32($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1018, 5} true;
  assume {:verifier.code 0} true;
  /* %192 = sext i8 %190 to i32, !dbg !220, !verifier.code !62 */
  $i173 := $sext.i8.i32($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1018, 5} true;
  assume {:verifier.code 0} true;
  /* %193 = add nsw i32 %192, %191, !dbg !220, !verifier.code !62 */
  $i174 := $add.i32($i173, $i172);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1018, 5} true;
  assume {:verifier.code 0} true;
  /* %194 = trunc i32 %193 to i8, !dbg !220, !verifier.code !62 */
  $i175 := $trunc.i32.i8($i174);
  /* call void @llvm.dbg.value(metadata i8 %194, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1020, 8} true;
  assume {:verifier.code 0} true;
  /* %195 = sext i8 %.11 to i32, !dbg !221, !verifier.code !62 */
  $i176 := $sext.i8.i32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1020, 5} true;
  assume {:verifier.code 0} true;
  /* %196 = sext i8 %.11 to i32, !dbg !222, !verifier.code !62 */
  $i177 := $sext.i8.i32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1020, 5} true;
  assume {:verifier.code 0} true;
  /* %197 = add nsw i32 %196, %195, !dbg !222, !verifier.code !62 */
  $i178 := $add.i32($i177, $i176);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1020, 5} true;
  assume {:verifier.code 0} true;
  /* %198 = trunc i32 %197 to i8, !dbg !222, !verifier.code !62 */
  $i179 := $trunc.i32.i8($i178);
  /* call void @llvm.dbg.value(metadata i8 %198, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i179);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 7} true;
  assume {:verifier.code 0} true;
  /* %199 = sext i8 %187 to i32, !dbg !223, !verifier.code !62 */
  $i180 := $sext.i8.i32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 9} true;
  assume {:verifier.code 0} true;
  /* %200 = icmp slt i32 %199, 0, !dbg !225, !verifier.code !62 */
  $i181 := $slt.i32($i180, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %200, label %201, label %212, !dbg !226, !verifier.code !62 */
  $i182 := $i179;
  assume {:branchcond $i181} true;
  goto $bb55, $bb56;
$bb49:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 15} true;
  assume {:verifier.code 0} true;
  assume ($i155 == 1);
  goto $bb50;
$bb50:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1012, 9} true;
  assume {:verifier.code 0} true;
  /* %176 = sext i8 %166 to i32, !dbg !209, !verifier.code !62 */
  $i159 := $sext.i8.i32($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1012, 9} true;
  assume {:verifier.code 0} true;
  /* %177 = add nsw i32 %176, 1, !dbg !209, !verifier.code !62 */
  $i160 := $add.i32($i159, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1012, 9} true;
  assume {:verifier.code 0} true;
  /* %178 = trunc i32 %177 to i8, !dbg !209, !verifier.code !62 */
  $i161 := $trunc.i32.i8($i160);
  /* call void @llvm.dbg.value(metadata i8 %178, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i161);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1013, 5} true;
  assume {:verifier.code 0} true;
  /* br label %179, !dbg !211, !verifier.code !62 */
  $i158 := $i161;
  goto $bb54;
$bb51:
  assume !(($i155 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 18} true;
  assume {:verifier.code 0} true;
  /* %173 = sext i8 %162 to i32, !dbg !206, !verifier.code !62 */
  $i156 := $sext.i8.i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 20} true;
  assume {:verifier.code 0} true;
  /* %174 = icmp sgt i32 %173, 127, !dbg !207, !verifier.code !62 */
  $i157 := $sgt.i32($i156, 127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %174, label %175, label %179, !dbg !208, !verifier.code !62 */
  $i158 := $i150;
  assume {:branchcond $i157} true;
  goto $bb52, $bb53;
$bb52:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 9} true;
  assume {:verifier.code 0} true;
  assume ($i157 == 1);
  goto $bb50;
$bb53:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i157 == 1));
  goto $bb54;
$bb54:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.10 = phi i8 [ %178, %175 ], [ %166, %172 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.10, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1014, 3} true;
  assume {:verifier.code 0} true;
  /* br label %180, !dbg !212, !verifier.code !62 */
  $i153 := $i158;
  goto $bb48;
$bb55:
  assume ($i181 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 9} true;
  assume {:verifier.code 0} true;
  /* %202 = sext i8 %194 to i32, !dbg !227, !verifier.code !62 */
  $i183 := $sext.i8.i32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 11} true;
  assume {:verifier.code 0} true;
  /* %203 = icmp slt i32 %202, 0, !dbg !230, !verifier.code !62 */
  $i184 := $slt.i32($i183, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %203, label %207, label %204, !dbg !231, !verifier.code !62 */
  assume {:branchcond $i184} true;
  goto $bb58, $bb60;
$bb56:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i181 == 1));
  goto $bb57;
$bb57:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.13 = phi i8 [ %.12, %211 ], [ %198, %180 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.13, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1026, 7} true;
  assume {:verifier.code 0} true;
  /* %213 = sext i8 %187 to i32, !dbg !239, !verifier.code !62 */
  $i191 := $sext.i8.i32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1026, 9} true;
  assume {:verifier.code 0} true;
  /* %214 = srem i32 %213, 128, !dbg !240, !verifier.code !62 */
  $i192 := $srem.i32($i191, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1026, 7} true;
  assume {:verifier.code 0} true;
  /* %215 = trunc i32 %214 to i8, !dbg !239, !verifier.code !62 */
  $i193 := $trunc.i32.i8($i192);
  /* call void @llvm.dbg.value(metadata i8 %215, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1027, 8} true;
  assume {:verifier.code 0} true;
  /* %216 = sext i8 %215 to i32, !dbg !241, !verifier.code !62 */
  $i194 := $sext.i8.i32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1027, 5} true;
  assume {:verifier.code 0} true;
  /* %217 = sext i8 %215 to i32, !dbg !242, !verifier.code !62 */
  $i195 := $sext.i8.i32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1027, 5} true;
  assume {:verifier.code 0} true;
  /* %218 = add nsw i32 %217, %216, !dbg !242, !verifier.code !62 */
  $i196 := $add.i32($i195, $i194);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1027, 5} true;
  assume {:verifier.code 0} true;
  /* %219 = trunc i32 %218 to i8, !dbg !242, !verifier.code !62 */
  $i197 := $trunc.i32.i8($i196);
  /* call void @llvm.dbg.value(metadata i8 %219, metadata !11257, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i8($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1028, 7} true;
  assume {:verifier.code 0} true;
  /* %220 = sext i8 %194 to i32, !dbg !243, !verifier.code !62 */
  $i198 := $sext.i8.i32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1028, 9} true;
  assume {:verifier.code 0} true;
  /* %221 = srem i32 %220, 128, !dbg !244, !verifier.code !62 */
  $i199 := $srem.i32($i198, 128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1028, 7} true;
  assume {:verifier.code 0} true;
  /* %222 = trunc i32 %221 to i8, !dbg !243, !verifier.code !62 */
  $i200 := $trunc.i32.i8($i199);
  /* call void @llvm.dbg.value(metadata i8 %222, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1029, 8} true;
  assume {:verifier.code 0} true;
  /* %223 = sext i8 %222 to i32, !dbg !245, !verifier.code !62 */
  $i201 := $sext.i8.i32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1029, 5} true;
  assume {:verifier.code 0} true;
  /* %224 = sext i8 %222 to i32, !dbg !246, !verifier.code !62 */
  $i202 := $sext.i8.i32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1029, 5} true;
  assume {:verifier.code 0} true;
  /* %225 = add nsw i32 %224, %223, !dbg !246, !verifier.code !62 */
  $i203 := $add.i32($i202, $i201);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1029, 5} true;
  assume {:verifier.code 0} true;
  /* %226 = trunc i32 %225 to i8, !dbg !246, !verifier.code !62 */
  $i204 := $trunc.i32.i8($i203);
  /* call void @llvm.dbg.value(metadata i8 %226, metadata !11259, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i8($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1031, 8} true;
  assume {:verifier.code 0} true;
  /* %227 = sext i8 %.13 to i32, !dbg !247, !verifier.code !62 */
  $i205 := $sext.i8.i32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1031, 5} true;
  assume {:verifier.code 0} true;
  /* %228 = sext i8 %.13 to i32, !dbg !248, !verifier.code !62 */
  $i206 := $sext.i8.i32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1031, 5} true;
  assume {:verifier.code 0} true;
  /* %229 = add nsw i32 %228, %227, !dbg !248, !verifier.code !62 */
  $i207 := $add.i32($i206, $i205);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1031, 5} true;
  assume {:verifier.code 0} true;
  /* %230 = trunc i32 %229 to i8, !dbg !248, !verifier.code !62 */
  $i208 := $trunc.i32.i8($i207);
  /* call void @llvm.dbg.value(metadata i8 %230, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 7} true;
  assume {:verifier.code 0} true;
  /* %231 = sext i8 %219 to i32, !dbg !249, !verifier.code !62 */
  $i209 := $sext.i8.i32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 9} true;
  assume {:verifier.code 0} true;
  /* %232 = icmp slt i32 %231, 0, !dbg !251, !verifier.code !62 */
  $i210 := $slt.i32($i209, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %232, label %233, label %244, !dbg !252, !verifier.code !62 */
  $i211 := $i208;
  assume {:branchcond $i210} true;
  goto $bb64, $bb65;
$bb58:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 15} true;
  assume {:verifier.code 0} true;
  assume ($i184 == 1);
  goto $bb59;
$bb59:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1023, 9} true;
  assume {:verifier.code 0} true;
  /* %208 = sext i8 %198 to i32, !dbg !235, !verifier.code !62 */
  $i188 := $sext.i8.i32($i179);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1023, 9} true;
  assume {:verifier.code 0} true;
  /* %209 = add nsw i32 %208, 1, !dbg !235, !verifier.code !62 */
  $i189 := $add.i32($i188, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1023, 9} true;
  assume {:verifier.code 0} true;
  /* %210 = trunc i32 %209 to i8, !dbg !235, !verifier.code !62 */
  $i190 := $trunc.i32.i8($i189);
  /* call void @llvm.dbg.value(metadata i8 %210, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i190);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1024, 5} true;
  assume {:verifier.code 0} true;
  /* br label %211, !dbg !237, !verifier.code !62 */
  $i187 := $i190;
  goto $bb63;
$bb60:
  assume !(($i184 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 18} true;
  assume {:verifier.code 0} true;
  /* %205 = sext i8 %194 to i32, !dbg !232, !verifier.code !62 */
  $i185 := $sext.i8.i32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 20} true;
  assume {:verifier.code 0} true;
  /* %206 = icmp sgt i32 %205, 127, !dbg !233, !verifier.code !62 */
  $i186 := $sgt.i32($i185, 127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %206, label %207, label %211, !dbg !234, !verifier.code !62 */
  $i187 := $i179;
  assume {:branchcond $i186} true;
  goto $bb61, $bb62;
$bb61:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 9} true;
  assume {:verifier.code 0} true;
  assume ($i186 == 1);
  goto $bb59;
$bb62:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i186 == 1));
  goto $bb63;
$bb63:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.12 = phi i8 [ %210, %207 ], [ %198, %204 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.12, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1025, 3} true;
  assume {:verifier.code 0} true;
  /* br label %212, !dbg !238, !verifier.code !62 */
  $i182 := $i187;
  goto $bb57;
$bb64:
  assume ($i210 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 9} true;
  assume {:verifier.code 0} true;
  /* %234 = sext i8 %226 to i32, !dbg !253, !verifier.code !62 */
  $i212 := $sext.i8.i32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 11} true;
  assume {:verifier.code 0} true;
  /* %235 = icmp slt i32 %234, 0, !dbg !256, !verifier.code !62 */
  $i213 := $slt.i32($i212, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 15} true;
  assume {:verifier.code 0} true;
  /* br i1 %235, label %239, label %236, !dbg !257, !verifier.code !62 */
  assume {:branchcond $i213} true;
  goto $bb67, $bb69;
$bb65:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 7} true;
  assume {:verifier.code 0} true;
  assume !(($i210 == 1));
  goto $bb66;
$bb66:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.15 = phi i8 [ %.14, %243 ], [ %230, %212 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.15, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i8 %219, metadata !11257, metadata !DIExpression(DW_OP_LLVM_convert, 8, DW_ATE_signed, DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_constu, 128, DW_OP_mod, DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_LLVM_convert, 8, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !11258, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 undef, metadata !11257, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_LLVM_convert, 8, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !11258, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i8 %226, metadata !11259, metadata !DIExpression(DW_OP_LLVM_convert, 8, DW_ATE_signed, DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_constu, 128, DW_OP_mod, DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_LLVM_convert, 8, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !11258, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 undef, metadata !11259, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_LLVM_convert, 8, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1042, 3} true;
  assume {:verifier.code 0} true;
  /* ret i8 %.15, !dbg !265, !verifier.code !62 */
  $r := $i211;
  $exn := false;
  return;
$bb67:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 15} true;
  assume {:verifier.code 0} true;
  assume ($i213 == 1);
  goto $bb68;
$bb68:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1034, 9} true;
  assume {:verifier.code 0} true;
  /* %240 = sext i8 %230 to i32, !dbg !261, !verifier.code !62 */
  $i217 := $sext.i8.i32($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1034, 9} true;
  assume {:verifier.code 0} true;
  /* %241 = add nsw i32 %240, 1, !dbg !261, !verifier.code !62 */
  $i218 := $add.i32($i217, 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1034, 9} true;
  assume {:verifier.code 0} true;
  /* %242 = trunc i32 %241 to i8, !dbg !261, !verifier.code !62 */
  $i219 := $trunc.i32.i8($i218);
  /* call void @llvm.dbg.value(metadata i8 %242, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i8($i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1035, 5} true;
  assume {:verifier.code 0} true;
  /* br label %243, !dbg !263, !verifier.code !62 */
  $i216 := $i219;
  goto $bb72;
$bb69:
  assume !(($i213 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 18} true;
  assume {:verifier.code 0} true;
  /* %237 = sext i8 %226 to i32, !dbg !258, !verifier.code !62 */
  $i214 := $sext.i8.i32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 20} true;
  assume {:verifier.code 0} true;
  /* %238 = icmp sgt i32 %237, 127, !dbg !259, !verifier.code !62 */
  $i215 := $sgt.i32($i214, 127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 9} true;
  assume {:verifier.code 0} true;
  /* br i1 %238, label %239, label %243, !dbg !260, !verifier.code !62 */
  $i216 := $i208;
  assume {:branchcond $i215} true;
  goto $bb70, $bb71;
$bb70:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 9} true;
  assume {:verifier.code 0} true;
  assume ($i215 == 1);
  goto $bb68;
$bb71:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 9} true;
  assume {:verifier.code 0} true;
  assume !(($i215 == 1));
  goto $bb72;
$bb72:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.14 = phi i8 [ %242, %239 ], [ %230, %236 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i8 %.14, metadata !11260, metadata !DIExpression()), !dbg !11258, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1036, 3} true;
  assume {:verifier.code 0} true;
  /* br label %244, !dbg !264, !verifier.code !62 */
  $i211 := $i216;
  goto $bb66;
}
const __SMACK_or32: ref;
axiom (__SMACK_or32 == $sub.ref(0, 43344));
procedure {:inline 1} __SMACK_or32($i0: i32, $i1: i32)
  returns ($r: i32)
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i1;
  var $i8: i32;
  var $i7: i32;
  var $i5: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i21: i1;
  var $i23: i32;
  var $i22: i32;
  var $i20: i32;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i36: i1;
  var $i38: i32;
  var $i37: i32;
  var $i35: i32;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i32;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i51: i1;
  var $i53: i32;
  var $i52: i32;
  var $i50: i32;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $i57: i32;
  var $i58: i32;
  var $i59: i64;
  var $i60: i64;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i66: i1;
  var $i68: i32;
  var $i67: i32;
  var $i65: i32;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i32;
  var $i73: i32;
  var $i74: i64;
  var $i75: i64;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i81: i1;
  var $i83: i32;
  var $i82: i32;
  var $i80: i32;
  var $i84: i32;
  var $i85: i64;
  var $i86: i64;
  var $i87: i32;
  var $i88: i32;
  var $i89: i64;
  var $i90: i64;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i96: i1;
  var $i98: i32;
  var $i97: i32;
  var $i95: i32;
  var $i99: i32;
  var $i100: i64;
  var $i101: i64;
  var $i102: i32;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i111: i1;
  var $i113: i32;
  var $i112: i32;
  var $i110: i32;
  var $i114: i32;
  var $i115: i64;
  var $i116: i64;
  var $i117: i32;
  var $i118: i32;
  var $i119: i64;
  var $i120: i64;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i126: i1;
  var $i128: i32;
  var $i127: i32;
  var $i125: i32;
  var $i129: i32;
  var $i130: i64;
  var $i131: i64;
  var $i132: i32;
  var $i133: i32;
  var $i134: i64;
  var $i135: i64;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i141: i1;
  var $i143: i32;
  var $i142: i32;
  var $i140: i32;
  var $i144: i32;
  var $i145: i64;
  var $i146: i64;
  var $i147: i32;
  var $i148: i32;
  var $i149: i64;
  var $i150: i64;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i156: i1;
  var $i158: i32;
  var $i157: i32;
  var $i155: i32;
  var $i159: i32;
  var $i160: i64;
  var $i161: i64;
  var $i162: i32;
  var $i163: i32;
  var $i164: i64;
  var $i165: i64;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i171: i1;
  var $i173: i32;
  var $i172: i32;
  var $i170: i32;
  var $i174: i32;
  var $i175: i64;
  var $i176: i64;
  var $i177: i32;
  var $i178: i32;
  var $i179: i64;
  var $i180: i64;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i186: i1;
  var $i188: i32;
  var $i187: i32;
  var $i185: i32;
  var $i189: i32;
  var $i190: i64;
  var $i191: i64;
  var $i192: i32;
  var $i193: i32;
  var $i194: i64;
  var $i195: i64;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i201: i1;
  var $i203: i32;
  var $i202: i32;
  var $i200: i32;
  var $i204: i32;
  var $i205: i64;
  var $i206: i64;
  var $i207: i32;
  var $i208: i32;
  var $i209: i64;
  var $i210: i64;
  var $i211: i32;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i216: i1;
  var $i218: i32;
  var $i217: i32;
  var $i215: i32;
  var $i219: i32;
  var $i220: i64;
  var $i221: i64;
  var $i222: i32;
  var $i223: i32;
  var $i224: i64;
  var $i225: i64;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $i229: i32;
  var $i231: i1;
  var $i233: i32;
  var $i232: i32;
  var $i230: i32;
  var $i234: i32;
  var $i235: i64;
  var $i236: i64;
  var $i237: i32;
  var $i238: i32;
  var $i239: i64;
  var $i240: i64;
  var $i241: i32;
  var $i242: i32;
  var $i243: i1;
  var $i244: i32;
  var $i246: i1;
  var $i248: i32;
  var $i247: i32;
  var $i245: i32;
  var $i249: i32;
  var $i250: i64;
  var $i251: i64;
  var $i252: i32;
  var $i253: i32;
  var $i254: i64;
  var $i255: i64;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i261: i1;
  var $i263: i32;
  var $i262: i32;
  var $i260: i32;
  var $i264: i32;
  var $i265: i64;
  var $i266: i64;
  var $i267: i32;
  var $i268: i32;
  var $i269: i64;
  var $i270: i64;
  var $i271: i32;
  var $i272: i32;
  var $i273: i1;
  var $i274: i32;
  var $i276: i1;
  var $i278: i32;
  var $i277: i32;
  var $i275: i32;
  var $i279: i32;
  var $i280: i64;
  var $i281: i64;
  var $i282: i32;
  var $i283: i32;
  var $i284: i64;
  var $i285: i64;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $i289: i32;
  var $i291: i1;
  var $i293: i32;
  var $i292: i32;
  var $i290: i32;
  var $i294: i32;
  var $i295: i64;
  var $i296: i64;
  var $i297: i32;
  var $i298: i32;
  var $i299: i64;
  var $i300: i64;
  var $i301: i32;
  var $i302: i32;
  var $i303: i1;
  var $i304: i32;
  var $i306: i1;
  var $i308: i32;
  var $i307: i32;
  var $i305: i32;
  var $i309: i32;
  var $i310: i64;
  var $i311: i64;
  var $i312: i32;
  var $i313: i32;
  var $i314: i64;
  var $i315: i64;
  var $i316: i32;
  var $i317: i32;
  var $i318: i1;
  var $i319: i32;
  var $i321: i1;
  var $i323: i32;
  var $i322: i32;
  var $i320: i32;
  var $i324: i32;
  var $i325: i64;
  var $i326: i64;
  var $i327: i32;
  var $i328: i32;
  var $i329: i64;
  var $i330: i64;
  var $i331: i32;
  var $i332: i32;
  var $i333: i1;
  var $i334: i32;
  var $i336: i1;
  var $i338: i32;
  var $i337: i32;
  var $i335: i32;
  var $i339: i32;
  var $i340: i64;
  var $i341: i64;
  var $i342: i32;
  var $i343: i32;
  var $i344: i64;
  var $i345: i64;
  var $i346: i32;
  var $i347: i32;
  var $i348: i1;
  var $i349: i32;
  var $i351: i1;
  var $i353: i32;
  var $i352: i32;
  var $i350: i32;
  var $i354: i32;
  var $i355: i64;
  var $i356: i64;
  var $i357: i32;
  var $i358: i32;
  var $i359: i64;
  var $i360: i64;
  var $i361: i32;
  var $i362: i32;
  var $i363: i1;
  var $i364: i32;
  var $i366: i1;
  var $i368: i32;
  var $i367: i32;
  var $i365: i32;
  var $i369: i32;
  var $i370: i64;
  var $i371: i64;
  var $i372: i32;
  var $i373: i32;
  var $i374: i64;
  var $i375: i64;
  var $i376: i32;
  var $i377: i32;
  var $i378: i1;
  var $i379: i32;
  var $i381: i1;
  var $i383: i32;
  var $i382: i32;
  var $i380: i32;
  var $i384: i32;
  var $i385: i64;
  var $i386: i64;
  var $i387: i32;
  var $i388: i32;
  var $i389: i64;
  var $i390: i64;
  var $i391: i32;
  var $i392: i32;
  var $i393: i1;
  var $i394: i32;
  var $i396: i1;
  var $i398: i32;
  var $i397: i32;
  var $i395: i32;
  var $i399: i32;
  var $i400: i64;
  var $i401: i64;
  var $i402: i32;
  var $i403: i32;
  var $i404: i64;
  var $i405: i64;
  var $i406: i32;
  var $i407: i32;
  var $i408: i1;
  var $i409: i32;
  var $i411: i1;
  var $i413: i32;
  var $i412: i32;
  var $i410: i32;
  var $i414: i32;
  var $i415: i64;
  var $i416: i64;
  var $i417: i32;
  var $i418: i32;
  var $i419: i64;
  var $i420: i64;
  var $i421: i32;
  var $i422: i32;
  var $i423: i1;
  var $i424: i32;
  var $i426: i1;
  var $i428: i32;
  var $i427: i32;
  var $i425: i32;
  var $i429: i32;
  var $i430: i64;
  var $i431: i64;
  var $i432: i32;
  var $i433: i32;
  var $i434: i64;
  var $i435: i64;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $i439: i32;
  var $i441: i1;
  var $i443: i32;
  var $i442: i32;
  var $i440: i32;
  var $i444: i32;
  var $i445: i64;
  var $i446: i64;
  var $i447: i32;
  var $i448: i32;
  var $i449: i64;
  var $i450: i64;
  var $i451: i32;
  var $i452: i32;
  var $i453: i1;
  var $i454: i32;
  var $i456: i1;
  var $i458: i32;
  var $i457: i32;
  var $i455: i32;
  var $i459: i32;
  var $i460: i64;
  var $i461: i64;
  var $i462: i32;
  var $i463: i32;
  var $i464: i64;
  var $i465: i64;
  var $i466: i32;
  var $i467: i32;
  var $i468: i1;
  var $i469: i32;
  var $i471: i1;
  var $i473: i32;
  var $i472: i32;
  var $i470: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1048, 5} true;
  assume {:verifier.code 0} true;
  /* call void @llvm.dbg.value(metadata i32 %0, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "__SMACK_or32:arg:a"} boogie_si_record_i32($i0);
  /* call void @llvm.dbg.value(metadata i32 %1, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "__SMACK_or32:arg:b"} boogie_si_record_i32($i1);
  /* call void @llvm.dbg.value(metadata i32 0, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1048, 5} true;
  assume {:verifier.code 0} true;
  /* %3 = add nsw i32 0, 0, !dbg !65, !verifier.code !62 */
  $i2 := $add.i32(0, 0);
  /* call void @llvm.dbg.value(metadata i32 %3, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1049, 9} true;
  assume {:verifier.code 0} true;
  /* %4 = icmp slt i32 %0, 0, !dbg !66, !verifier.code !62 */
  $i3 := $slt.i32($i0, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1049, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %4, label %5, label %7, !dbg !68, !verifier.code !62 */
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1050, 7} true;
  assume {:verifier.code 0} true;
  /* %6 = add nsw i32 %3, 1, !dbg !69, !verifier.code !62 */
  $i4 := $add.i32($i2, 1);
  /* call void @llvm.dbg.value(metadata i32 %6, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1051, 3} true;
  assume {:verifier.code 0} true;
  /* br label %12, !dbg !71, !verifier.code !62 */
  $i5 := $i4;
  goto $bb3;
$bb2:
  assume !(($i3 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1051, 16} true;
  assume {:verifier.code 0} true;
  /* %8 = icmp slt i32 %1, 0, !dbg !72, !verifier.code !62 */
  $i6 := $slt.i32($i1, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1051, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %8, label %9, label %11, !dbg !74, !verifier.code !62 */
  $i7 := $i2;
  assume {:branchcond $i6} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.1 = phi i32 [ %6, %5 ], [ %.0, %11 ], !dbg !78, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.1, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1054, 5} true;
  assume {:verifier.code 0} true;
  /* %13 = add nsw i32 %0, %0, !dbg !79, !verifier.code !62 */
  $i9 := $add.i32($i0, $i0);
  /* call void @llvm.dbg.value(metadata i32 %13, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1055, 7} true;
  assume {:verifier.code 0} true;
  /* %14 = sext i32 %13 to i64, !dbg !80, !verifier.code !62 */
  $i10 := $sext.i32.i64($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1055, 9} true;
  assume {:verifier.code 0} true;
  /* %15 = srem i64 %14, 2147483648, !dbg !81, !verifier.code !62 */
  $i11 := $srem.i64($i10, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1055, 7} true;
  assume {:verifier.code 0} true;
  /* %16 = trunc i64 %15 to i32, !dbg !80, !verifier.code !62 */
  $i12 := $trunc.i64.i32($i11);
  /* call void @llvm.dbg.value(metadata i32 %16, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i12);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1056, 5} true;
  assume {:verifier.code 0} true;
  /* %17 = add nsw i32 %1, %1, !dbg !82, !verifier.code !62 */
  $i13 := $add.i32($i1, $i1);
  /* call void @llvm.dbg.value(metadata i32 %17, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i13);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1057, 7} true;
  assume {:verifier.code 0} true;
  /* %18 = sext i32 %17 to i64, !dbg !83, !verifier.code !62 */
  $i14 := $sext.i32.i64($i13);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1057, 9} true;
  assume {:verifier.code 0} true;
  /* %19 = srem i64 %18, 2147483648, !dbg !84, !verifier.code !62 */
  $i15 := $srem.i64($i14, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1057, 7} true;
  assume {:verifier.code 0} true;
  /* %20 = trunc i64 %19 to i32, !dbg !83, !verifier.code !62 */
  $i16 := $trunc.i64.i32($i15);
  /* call void @llvm.dbg.value(metadata i32 %20, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1059, 5} true;
  assume {:verifier.code 0} true;
  /* %21 = add nsw i32 %.1, %.1, !dbg !85, !verifier.code !62 */
  $i17 := $add.i32($i5, $i5);
  /* call void @llvm.dbg.value(metadata i32 %21, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i17);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1060, 9} true;
  assume {:verifier.code 0} true;
  /* %22 = icmp slt i32 %16, 0, !dbg !86, !verifier.code !62 */
  $i18 := $slt.i32($i12, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1060, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %22, label %23, label %25, !dbg !88, !verifier.code !62 */
  assume {:branchcond $i18} true;
  goto $bb7, $bb8;
$bb4:
  assume ($i6 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1052, 7} true;
  assume {:verifier.code 0} true;
  /* %10 = add nsw i32 %3, 1, !dbg !75, !verifier.code !62 */
  $i8 := $add.i32($i2, 1);
  /* call void @llvm.dbg.value(metadata i32 %10, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1053, 3} true;
  assume {:verifier.code 0} true;
  /* br label %11, !dbg !77, !verifier.code !62 */
  $i7 := $i8;
  goto $bb6;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1051, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i6 == 1));
  goto $bb6;
$bb6:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.0 = phi i32 [ %10, %9 ], [ %3, %7 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.0, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %12, !verifier.code !62 */
  $i5 := $i7;
  goto $bb3;
$bb7:
  assume ($i18 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1061, 7} true;
  assume {:verifier.code 0} true;
  /* %24 = add nsw i32 %21, 1, !dbg !89, !verifier.code !62 */
  $i19 := $add.i32($i17, 1);
  /* call void @llvm.dbg.value(metadata i32 %24, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1062, 3} true;
  assume {:verifier.code 0} true;
  /* br label %30, !dbg !91, !verifier.code !62 */
  $i20 := $i19;
  goto $bb9;
$bb8:
  assume !(($i18 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1062, 16} true;
  assume {:verifier.code 0} true;
  /* %26 = icmp slt i32 %20, 0, !dbg !92, !verifier.code !62 */
  $i21 := $slt.i32($i16, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1062, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %26, label %27, label %29, !dbg !94, !verifier.code !62 */
  $i22 := $i17;
  assume {:branchcond $i21} true;
  goto $bb10, $bb11;
$bb9:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.3 = phi i32 [ %24, %23 ], [ %.2, %29 ], !dbg !98, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.3, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1065, 5} true;
  assume {:verifier.code 0} true;
  /* %31 = add nsw i32 %16, %16, !dbg !99, !verifier.code !62 */
  $i24 := $add.i32($i12, $i12);
  /* call void @llvm.dbg.value(metadata i32 %31, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i24);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1066, 7} true;
  assume {:verifier.code 0} true;
  /* %32 = sext i32 %31 to i64, !dbg !100, !verifier.code !62 */
  $i25 := $sext.i32.i64($i24);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1066, 9} true;
  assume {:verifier.code 0} true;
  /* %33 = srem i64 %32, 2147483648, !dbg !101, !verifier.code !62 */
  $i26 := $srem.i64($i25, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1066, 7} true;
  assume {:verifier.code 0} true;
  /* %34 = trunc i64 %33 to i32, !dbg !100, !verifier.code !62 */
  $i27 := $trunc.i64.i32($i26);
  /* call void @llvm.dbg.value(metadata i32 %34, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1067, 5} true;
  assume {:verifier.code 0} true;
  /* %35 = add nsw i32 %20, %20, !dbg !102, !verifier.code !62 */
  $i28 := $add.i32($i16, $i16);
  /* call void @llvm.dbg.value(metadata i32 %35, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i28);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1068, 7} true;
  assume {:verifier.code 0} true;
  /* %36 = sext i32 %35 to i64, !dbg !103, !verifier.code !62 */
  $i29 := $sext.i32.i64($i28);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1068, 9} true;
  assume {:verifier.code 0} true;
  /* %37 = srem i64 %36, 2147483648, !dbg !104, !verifier.code !62 */
  $i30 := $srem.i64($i29, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1068, 7} true;
  assume {:verifier.code 0} true;
  /* %38 = trunc i64 %37 to i32, !dbg !103, !verifier.code !62 */
  $i31 := $trunc.i64.i32($i30);
  /* call void @llvm.dbg.value(metadata i32 %38, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1070, 5} true;
  assume {:verifier.code 0} true;
  /* %39 = add nsw i32 %.3, %.3, !dbg !105, !verifier.code !62 */
  $i32 := $add.i32($i20, $i20);
  /* call void @llvm.dbg.value(metadata i32 %39, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1071, 9} true;
  assume {:verifier.code 0} true;
  /* %40 = icmp slt i32 %34, 0, !dbg !106, !verifier.code !62 */
  $i33 := $slt.i32($i27, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1071, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %40, label %41, label %43, !dbg !108, !verifier.code !62 */
  assume {:branchcond $i33} true;
  goto $bb13, $bb14;
$bb10:
  assume ($i21 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1063, 7} true;
  assume {:verifier.code 0} true;
  /* %28 = add nsw i32 %21, 1, !dbg !95, !verifier.code !62 */
  $i23 := $add.i32($i17, 1);
  /* call void @llvm.dbg.value(metadata i32 %28, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1064, 3} true;
  assume {:verifier.code 0} true;
  /* br label %29, !dbg !97, !verifier.code !62 */
  $i22 := $i23;
  goto $bb12;
$bb11:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1062, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i21 == 1));
  goto $bb12;
$bb12:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.2 = phi i32 [ %28, %27 ], [ %21, %25 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.2, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %30, !verifier.code !62 */
  $i20 := $i22;
  goto $bb9;
$bb13:
  assume ($i33 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1072, 7} true;
  assume {:verifier.code 0} true;
  /* %42 = add nsw i32 %39, 1, !dbg !109, !verifier.code !62 */
  $i34 := $add.i32($i32, 1);
  /* call void @llvm.dbg.value(metadata i32 %42, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1073, 3} true;
  assume {:verifier.code 0} true;
  /* br label %48, !dbg !111, !verifier.code !62 */
  $i35 := $i34;
  goto $bb15;
$bb14:
  assume !(($i33 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1073, 16} true;
  assume {:verifier.code 0} true;
  /* %44 = icmp slt i32 %38, 0, !dbg !112, !verifier.code !62 */
  $i36 := $slt.i32($i31, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1073, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %44, label %45, label %47, !dbg !114, !verifier.code !62 */
  $i37 := $i32;
  assume {:branchcond $i36} true;
  goto $bb16, $bb17;
$bb15:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.5 = phi i32 [ %42, %41 ], [ %.4, %47 ], !dbg !118, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.5, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1076, 5} true;
  assume {:verifier.code 0} true;
  /* %49 = add nsw i32 %34, %34, !dbg !119, !verifier.code !62 */
  $i39 := $add.i32($i27, $i27);
  /* call void @llvm.dbg.value(metadata i32 %49, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i39);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1077, 7} true;
  assume {:verifier.code 0} true;
  /* %50 = sext i32 %49 to i64, !dbg !120, !verifier.code !62 */
  $i40 := $sext.i32.i64($i39);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1077, 9} true;
  assume {:verifier.code 0} true;
  /* %51 = srem i64 %50, 2147483648, !dbg !121, !verifier.code !62 */
  $i41 := $srem.i64($i40, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1077, 7} true;
  assume {:verifier.code 0} true;
  /* %52 = trunc i64 %51 to i32, !dbg !120, !verifier.code !62 */
  $i42 := $trunc.i64.i32($i41);
  /* call void @llvm.dbg.value(metadata i32 %52, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i42);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1078, 5} true;
  assume {:verifier.code 0} true;
  /* %53 = add nsw i32 %38, %38, !dbg !122, !verifier.code !62 */
  $i43 := $add.i32($i31, $i31);
  /* call void @llvm.dbg.value(metadata i32 %53, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i43);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1079, 7} true;
  assume {:verifier.code 0} true;
  /* %54 = sext i32 %53 to i64, !dbg !123, !verifier.code !62 */
  $i44 := $sext.i32.i64($i43);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1079, 9} true;
  assume {:verifier.code 0} true;
  /* %55 = srem i64 %54, 2147483648, !dbg !124, !verifier.code !62 */
  $i45 := $srem.i64($i44, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1079, 7} true;
  assume {:verifier.code 0} true;
  /* %56 = trunc i64 %55 to i32, !dbg !123, !verifier.code !62 */
  $i46 := $trunc.i64.i32($i45);
  /* call void @llvm.dbg.value(metadata i32 %56, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i46);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1081, 5} true;
  assume {:verifier.code 0} true;
  /* %57 = add nsw i32 %.5, %.5, !dbg !125, !verifier.code !62 */
  $i47 := $add.i32($i35, $i35);
  /* call void @llvm.dbg.value(metadata i32 %57, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i47);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1082, 9} true;
  assume {:verifier.code 0} true;
  /* %58 = icmp slt i32 %52, 0, !dbg !126, !verifier.code !62 */
  $i48 := $slt.i32($i42, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1082, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %58, label %59, label %61, !dbg !128, !verifier.code !62 */
  assume {:branchcond $i48} true;
  goto $bb19, $bb20;
$bb16:
  assume ($i36 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1074, 7} true;
  assume {:verifier.code 0} true;
  /* %46 = add nsw i32 %39, 1, !dbg !115, !verifier.code !62 */
  $i38 := $add.i32($i32, 1);
  /* call void @llvm.dbg.value(metadata i32 %46, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i38);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1075, 3} true;
  assume {:verifier.code 0} true;
  /* br label %47, !dbg !117, !verifier.code !62 */
  $i37 := $i38;
  goto $bb18;
$bb17:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1073, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i36 == 1));
  goto $bb18;
$bb18:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.4 = phi i32 [ %46, %45 ], [ %39, %43 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.4, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %48, !verifier.code !62 */
  $i35 := $i37;
  goto $bb15;
$bb19:
  assume ($i48 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1083, 7} true;
  assume {:verifier.code 0} true;
  /* %60 = add nsw i32 %57, 1, !dbg !129, !verifier.code !62 */
  $i49 := $add.i32($i47, 1);
  /* call void @llvm.dbg.value(metadata i32 %60, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i49);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1084, 3} true;
  assume {:verifier.code 0} true;
  /* br label %66, !dbg !131, !verifier.code !62 */
  $i50 := $i49;
  goto $bb21;
$bb20:
  assume !(($i48 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1084, 16} true;
  assume {:verifier.code 0} true;
  /* %62 = icmp slt i32 %56, 0, !dbg !132, !verifier.code !62 */
  $i51 := $slt.i32($i46, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1084, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %62, label %63, label %65, !dbg !134, !verifier.code !62 */
  $i52 := $i47;
  assume {:branchcond $i51} true;
  goto $bb22, $bb23;
$bb21:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.7 = phi i32 [ %60, %59 ], [ %.6, %65 ], !dbg !138, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.7, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1087, 5} true;
  assume {:verifier.code 0} true;
  /* %67 = add nsw i32 %52, %52, !dbg !139, !verifier.code !62 */
  $i54 := $add.i32($i42, $i42);
  /* call void @llvm.dbg.value(metadata i32 %67, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i54);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1088, 7} true;
  assume {:verifier.code 0} true;
  /* %68 = sext i32 %67 to i64, !dbg !140, !verifier.code !62 */
  $i55 := $sext.i32.i64($i54);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1088, 9} true;
  assume {:verifier.code 0} true;
  /* %69 = srem i64 %68, 2147483648, !dbg !141, !verifier.code !62 */
  $i56 := $srem.i64($i55, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1088, 7} true;
  assume {:verifier.code 0} true;
  /* %70 = trunc i64 %69 to i32, !dbg !140, !verifier.code !62 */
  $i57 := $trunc.i64.i32($i56);
  /* call void @llvm.dbg.value(metadata i32 %70, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i57);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1089, 5} true;
  assume {:verifier.code 0} true;
  /* %71 = add nsw i32 %56, %56, !dbg !142, !verifier.code !62 */
  $i58 := $add.i32($i46, $i46);
  /* call void @llvm.dbg.value(metadata i32 %71, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i58);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1090, 7} true;
  assume {:verifier.code 0} true;
  /* %72 = sext i32 %71 to i64, !dbg !143, !verifier.code !62 */
  $i59 := $sext.i32.i64($i58);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1090, 9} true;
  assume {:verifier.code 0} true;
  /* %73 = srem i64 %72, 2147483648, !dbg !144, !verifier.code !62 */
  $i60 := $srem.i64($i59, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1090, 7} true;
  assume {:verifier.code 0} true;
  /* %74 = trunc i64 %73 to i32, !dbg !143, !verifier.code !62 */
  $i61 := $trunc.i64.i32($i60);
  /* call void @llvm.dbg.value(metadata i32 %74, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i61);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1092, 5} true;
  assume {:verifier.code 0} true;
  /* %75 = add nsw i32 %.7, %.7, !dbg !145, !verifier.code !62 */
  $i62 := $add.i32($i50, $i50);
  /* call void @llvm.dbg.value(metadata i32 %75, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i62);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1093, 9} true;
  assume {:verifier.code 0} true;
  /* %76 = icmp slt i32 %70, 0, !dbg !146, !verifier.code !62 */
  $i63 := $slt.i32($i57, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1093, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %76, label %77, label %79, !dbg !148, !verifier.code !62 */
  assume {:branchcond $i63} true;
  goto $bb25, $bb26;
$bb22:
  assume ($i51 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1085, 7} true;
  assume {:verifier.code 0} true;
  /* %64 = add nsw i32 %57, 1, !dbg !135, !verifier.code !62 */
  $i53 := $add.i32($i47, 1);
  /* call void @llvm.dbg.value(metadata i32 %64, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i53);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1086, 3} true;
  assume {:verifier.code 0} true;
  /* br label %65, !dbg !137, !verifier.code !62 */
  $i52 := $i53;
  goto $bb24;
$bb23:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1084, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i51 == 1));
  goto $bb24;
$bb24:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.6 = phi i32 [ %64, %63 ], [ %57, %61 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.6, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %66, !verifier.code !62 */
  $i50 := $i52;
  goto $bb21;
$bb25:
  assume ($i63 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1094, 7} true;
  assume {:verifier.code 0} true;
  /* %78 = add nsw i32 %75, 1, !dbg !149, !verifier.code !62 */
  $i64 := $add.i32($i62, 1);
  /* call void @llvm.dbg.value(metadata i32 %78, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1095, 3} true;
  assume {:verifier.code 0} true;
  /* br label %84, !dbg !151, !verifier.code !62 */
  $i65 := $i64;
  goto $bb27;
$bb26:
  assume !(($i63 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1095, 16} true;
  assume {:verifier.code 0} true;
  /* %80 = icmp slt i32 %74, 0, !dbg !152, !verifier.code !62 */
  $i66 := $slt.i32($i61, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1095, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %80, label %81, label %83, !dbg !154, !verifier.code !62 */
  $i67 := $i62;
  assume {:branchcond $i66} true;
  goto $bb28, $bb29;
$bb27:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.9 = phi i32 [ %78, %77 ], [ %.8, %83 ], !dbg !158, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.9, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1098, 5} true;
  assume {:verifier.code 0} true;
  /* %85 = add nsw i32 %70, %70, !dbg !159, !verifier.code !62 */
  $i69 := $add.i32($i57, $i57);
  /* call void @llvm.dbg.value(metadata i32 %85, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i69);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1099, 7} true;
  assume {:verifier.code 0} true;
  /* %86 = sext i32 %85 to i64, !dbg !160, !verifier.code !62 */
  $i70 := $sext.i32.i64($i69);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1099, 9} true;
  assume {:verifier.code 0} true;
  /* %87 = srem i64 %86, 2147483648, !dbg !161, !verifier.code !62 */
  $i71 := $srem.i64($i70, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1099, 7} true;
  assume {:verifier.code 0} true;
  /* %88 = trunc i64 %87 to i32, !dbg !160, !verifier.code !62 */
  $i72 := $trunc.i64.i32($i71);
  /* call void @llvm.dbg.value(metadata i32 %88, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i72);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1100, 5} true;
  assume {:verifier.code 0} true;
  /* %89 = add nsw i32 %74, %74, !dbg !162, !verifier.code !62 */
  $i73 := $add.i32($i61, $i61);
  /* call void @llvm.dbg.value(metadata i32 %89, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i73);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1101, 7} true;
  assume {:verifier.code 0} true;
  /* %90 = sext i32 %89 to i64, !dbg !163, !verifier.code !62 */
  $i74 := $sext.i32.i64($i73);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1101, 9} true;
  assume {:verifier.code 0} true;
  /* %91 = srem i64 %90, 2147483648, !dbg !164, !verifier.code !62 */
  $i75 := $srem.i64($i74, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1101, 7} true;
  assume {:verifier.code 0} true;
  /* %92 = trunc i64 %91 to i32, !dbg !163, !verifier.code !62 */
  $i76 := $trunc.i64.i32($i75);
  /* call void @llvm.dbg.value(metadata i32 %92, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i76);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1103, 5} true;
  assume {:verifier.code 0} true;
  /* %93 = add nsw i32 %.9, %.9, !dbg !165, !verifier.code !62 */
  $i77 := $add.i32($i65, $i65);
  /* call void @llvm.dbg.value(metadata i32 %93, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1104, 9} true;
  assume {:verifier.code 0} true;
  /* %94 = icmp slt i32 %88, 0, !dbg !166, !verifier.code !62 */
  $i78 := $slt.i32($i72, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1104, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %94, label %95, label %97, !dbg !168, !verifier.code !62 */
  assume {:branchcond $i78} true;
  goto $bb31, $bb32;
$bb28:
  assume ($i66 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1096, 7} true;
  assume {:verifier.code 0} true;
  /* %82 = add nsw i32 %75, 1, !dbg !155, !verifier.code !62 */
  $i68 := $add.i32($i62, 1);
  /* call void @llvm.dbg.value(metadata i32 %82, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i68);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1097, 3} true;
  assume {:verifier.code 0} true;
  /* br label %83, !dbg !157, !verifier.code !62 */
  $i67 := $i68;
  goto $bb30;
$bb29:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1095, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i66 == 1));
  goto $bb30;
$bb30:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.8 = phi i32 [ %82, %81 ], [ %75, %79 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.8, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %84, !verifier.code !62 */
  $i65 := $i67;
  goto $bb27;
$bb31:
  assume ($i78 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1105, 7} true;
  assume {:verifier.code 0} true;
  /* %96 = add nsw i32 %93, 1, !dbg !169, !verifier.code !62 */
  $i79 := $add.i32($i77, 1);
  /* call void @llvm.dbg.value(metadata i32 %96, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i79);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1106, 3} true;
  assume {:verifier.code 0} true;
  /* br label %102, !dbg !171, !verifier.code !62 */
  $i80 := $i79;
  goto $bb33;
$bb32:
  assume !(($i78 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1106, 16} true;
  assume {:verifier.code 0} true;
  /* %98 = icmp slt i32 %92, 0, !dbg !172, !verifier.code !62 */
  $i81 := $slt.i32($i76, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1106, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %98, label %99, label %101, !dbg !174, !verifier.code !62 */
  $i82 := $i77;
  assume {:branchcond $i81} true;
  goto $bb34, $bb35;
$bb33:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.11 = phi i32 [ %96, %95 ], [ %.10, %101 ], !dbg !178, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.11, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1109, 5} true;
  assume {:verifier.code 0} true;
  /* %103 = add nsw i32 %88, %88, !dbg !179, !verifier.code !62 */
  $i84 := $add.i32($i72, $i72);
  /* call void @llvm.dbg.value(metadata i32 %103, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1110, 7} true;
  assume {:verifier.code 0} true;
  /* %104 = sext i32 %103 to i64, !dbg !180, !verifier.code !62 */
  $i85 := $sext.i32.i64($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1110, 9} true;
  assume {:verifier.code 0} true;
  /* %105 = srem i64 %104, 2147483648, !dbg !181, !verifier.code !62 */
  $i86 := $srem.i64($i85, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1110, 7} true;
  assume {:verifier.code 0} true;
  /* %106 = trunc i64 %105 to i32, !dbg !180, !verifier.code !62 */
  $i87 := $trunc.i64.i32($i86);
  /* call void @llvm.dbg.value(metadata i32 %106, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i87);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1111, 5} true;
  assume {:verifier.code 0} true;
  /* %107 = add nsw i32 %92, %92, !dbg !182, !verifier.code !62 */
  $i88 := $add.i32($i76, $i76);
  /* call void @llvm.dbg.value(metadata i32 %107, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1112, 7} true;
  assume {:verifier.code 0} true;
  /* %108 = sext i32 %107 to i64, !dbg !183, !verifier.code !62 */
  $i89 := $sext.i32.i64($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1112, 9} true;
  assume {:verifier.code 0} true;
  /* %109 = srem i64 %108, 2147483648, !dbg !184, !verifier.code !62 */
  $i90 := $srem.i64($i89, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1112, 7} true;
  assume {:verifier.code 0} true;
  /* %110 = trunc i64 %109 to i32, !dbg !183, !verifier.code !62 */
  $i91 := $trunc.i64.i32($i90);
  /* call void @llvm.dbg.value(metadata i32 %110, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i91);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1114, 5} true;
  assume {:verifier.code 0} true;
  /* %111 = add nsw i32 %.11, %.11, !dbg !185, !verifier.code !62 */
  $i92 := $add.i32($i80, $i80);
  /* call void @llvm.dbg.value(metadata i32 %111, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1115, 9} true;
  assume {:verifier.code 0} true;
  /* %112 = icmp slt i32 %106, 0, !dbg !186, !verifier.code !62 */
  $i93 := $slt.i32($i87, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1115, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %112, label %113, label %115, !dbg !188, !verifier.code !62 */
  assume {:branchcond $i93} true;
  goto $bb37, $bb38;
$bb34:
  assume ($i81 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1107, 7} true;
  assume {:verifier.code 0} true;
  /* %100 = add nsw i32 %93, 1, !dbg !175, !verifier.code !62 */
  $i83 := $add.i32($i77, 1);
  /* call void @llvm.dbg.value(metadata i32 %100, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i83);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1108, 3} true;
  assume {:verifier.code 0} true;
  /* br label %101, !dbg !177, !verifier.code !62 */
  $i82 := $i83;
  goto $bb36;
$bb35:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1106, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i81 == 1));
  goto $bb36;
$bb36:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.10 = phi i32 [ %100, %99 ], [ %93, %97 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.10, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %102, !verifier.code !62 */
  $i80 := $i82;
  goto $bb33;
$bb37:
  assume ($i93 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1116, 7} true;
  assume {:verifier.code 0} true;
  /* %114 = add nsw i32 %111, 1, !dbg !189, !verifier.code !62 */
  $i94 := $add.i32($i92, 1);
  /* call void @llvm.dbg.value(metadata i32 %114, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i94);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1117, 3} true;
  assume {:verifier.code 0} true;
  /* br label %120, !dbg !191, !verifier.code !62 */
  $i95 := $i94;
  goto $bb39;
$bb38:
  assume !(($i93 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1117, 16} true;
  assume {:verifier.code 0} true;
  /* %116 = icmp slt i32 %110, 0, !dbg !192, !verifier.code !62 */
  $i96 := $slt.i32($i91, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1117, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %116, label %117, label %119, !dbg !194, !verifier.code !62 */
  $i97 := $i92;
  assume {:branchcond $i96} true;
  goto $bb40, $bb41;
$bb39:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.13 = phi i32 [ %114, %113 ], [ %.12, %119 ], !dbg !198, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.13, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1120, 5} true;
  assume {:verifier.code 0} true;
  /* %121 = add nsw i32 %106, %106, !dbg !199, !verifier.code !62 */
  $i99 := $add.i32($i87, $i87);
  /* call void @llvm.dbg.value(metadata i32 %121, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i99);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1121, 7} true;
  assume {:verifier.code 0} true;
  /* %122 = sext i32 %121 to i64, !dbg !200, !verifier.code !62 */
  $i100 := $sext.i32.i64($i99);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1121, 9} true;
  assume {:verifier.code 0} true;
  /* %123 = srem i64 %122, 2147483648, !dbg !201, !verifier.code !62 */
  $i101 := $srem.i64($i100, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1121, 7} true;
  assume {:verifier.code 0} true;
  /* %124 = trunc i64 %123 to i32, !dbg !200, !verifier.code !62 */
  $i102 := $trunc.i64.i32($i101);
  /* call void @llvm.dbg.value(metadata i32 %124, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i102);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1122, 5} true;
  assume {:verifier.code 0} true;
  /* %125 = add nsw i32 %110, %110, !dbg !202, !verifier.code !62 */
  $i103 := $add.i32($i91, $i91);
  /* call void @llvm.dbg.value(metadata i32 %125, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1123, 7} true;
  assume {:verifier.code 0} true;
  /* %126 = sext i32 %125 to i64, !dbg !203, !verifier.code !62 */
  $i104 := $sext.i32.i64($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1123, 9} true;
  assume {:verifier.code 0} true;
  /* %127 = srem i64 %126, 2147483648, !dbg !204, !verifier.code !62 */
  $i105 := $srem.i64($i104, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1123, 7} true;
  assume {:verifier.code 0} true;
  /* %128 = trunc i64 %127 to i32, !dbg !203, !verifier.code !62 */
  $i106 := $trunc.i64.i32($i105);
  /* call void @llvm.dbg.value(metadata i32 %128, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1125, 5} true;
  assume {:verifier.code 0} true;
  /* %129 = add nsw i32 %.13, %.13, !dbg !205, !verifier.code !62 */
  $i107 := $add.i32($i95, $i95);
  /* call void @llvm.dbg.value(metadata i32 %129, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1126, 9} true;
  assume {:verifier.code 0} true;
  /* %130 = icmp slt i32 %124, 0, !dbg !206, !verifier.code !62 */
  $i108 := $slt.i32($i102, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1126, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %130, label %131, label %133, !dbg !208, !verifier.code !62 */
  assume {:branchcond $i108} true;
  goto $bb43, $bb44;
$bb40:
  assume ($i96 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1118, 7} true;
  assume {:verifier.code 0} true;
  /* %118 = add nsw i32 %111, 1, !dbg !195, !verifier.code !62 */
  $i98 := $add.i32($i92, 1);
  /* call void @llvm.dbg.value(metadata i32 %118, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i98);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1119, 3} true;
  assume {:verifier.code 0} true;
  /* br label %119, !dbg !197, !verifier.code !62 */
  $i97 := $i98;
  goto $bb42;
$bb41:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1117, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i96 == 1));
  goto $bb42;
$bb42:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.12 = phi i32 [ %118, %117 ], [ %111, %115 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.12, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %120, !verifier.code !62 */
  $i95 := $i97;
  goto $bb39;
$bb43:
  assume ($i108 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1127, 7} true;
  assume {:verifier.code 0} true;
  /* %132 = add nsw i32 %129, 1, !dbg !209, !verifier.code !62 */
  $i109 := $add.i32($i107, 1);
  /* call void @llvm.dbg.value(metadata i32 %132, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i109);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 3} true;
  assume {:verifier.code 0} true;
  /* br label %138, !dbg !211, !verifier.code !62 */
  $i110 := $i109;
  goto $bb45;
$bb44:
  assume !(($i108 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 16} true;
  assume {:verifier.code 0} true;
  /* %134 = icmp slt i32 %128, 0, !dbg !212, !verifier.code !62 */
  $i111 := $slt.i32($i106, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %134, label %135, label %137, !dbg !214, !verifier.code !62 */
  $i112 := $i107;
  assume {:branchcond $i111} true;
  goto $bb46, $bb47;
$bb45:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.15 = phi i32 [ %132, %131 ], [ %.14, %137 ], !dbg !218, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.15, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1131, 5} true;
  assume {:verifier.code 0} true;
  /* %139 = add nsw i32 %124, %124, !dbg !219, !verifier.code !62 */
  $i114 := $add.i32($i102, $i102);
  /* call void @llvm.dbg.value(metadata i32 %139, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i114);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1132, 7} true;
  assume {:verifier.code 0} true;
  /* %140 = sext i32 %139 to i64, !dbg !220, !verifier.code !62 */
  $i115 := $sext.i32.i64($i114);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1132, 9} true;
  assume {:verifier.code 0} true;
  /* %141 = srem i64 %140, 2147483648, !dbg !221, !verifier.code !62 */
  $i116 := $srem.i64($i115, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1132, 7} true;
  assume {:verifier.code 0} true;
  /* %142 = trunc i64 %141 to i32, !dbg !220, !verifier.code !62 */
  $i117 := $trunc.i64.i32($i116);
  /* call void @llvm.dbg.value(metadata i32 %142, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1133, 5} true;
  assume {:verifier.code 0} true;
  /* %143 = add nsw i32 %128, %128, !dbg !222, !verifier.code !62 */
  $i118 := $add.i32($i106, $i106);
  /* call void @llvm.dbg.value(metadata i32 %143, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1134, 7} true;
  assume {:verifier.code 0} true;
  /* %144 = sext i32 %143 to i64, !dbg !223, !verifier.code !62 */
  $i119 := $sext.i32.i64($i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1134, 9} true;
  assume {:verifier.code 0} true;
  /* %145 = srem i64 %144, 2147483648, !dbg !224, !verifier.code !62 */
  $i120 := $srem.i64($i119, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1134, 7} true;
  assume {:verifier.code 0} true;
  /* %146 = trunc i64 %145 to i32, !dbg !223, !verifier.code !62 */
  $i121 := $trunc.i64.i32($i120);
  /* call void @llvm.dbg.value(metadata i32 %146, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1136, 5} true;
  assume {:verifier.code 0} true;
  /* %147 = add nsw i32 %.15, %.15, !dbg !225, !verifier.code !62 */
  $i122 := $add.i32($i110, $i110);
  /* call void @llvm.dbg.value(metadata i32 %147, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i122);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1137, 9} true;
  assume {:verifier.code 0} true;
  /* %148 = icmp slt i32 %142, 0, !dbg !226, !verifier.code !62 */
  $i123 := $slt.i32($i117, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1137, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %148, label %149, label %151, !dbg !228, !verifier.code !62 */
  assume {:branchcond $i123} true;
  goto $bb49, $bb50;
$bb46:
  assume ($i111 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1129, 7} true;
  assume {:verifier.code 0} true;
  /* %136 = add nsw i32 %129, 1, !dbg !215, !verifier.code !62 */
  $i113 := $add.i32($i107, 1);
  /* call void @llvm.dbg.value(metadata i32 %136, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1130, 3} true;
  assume {:verifier.code 0} true;
  /* br label %137, !dbg !217, !verifier.code !62 */
  $i112 := $i113;
  goto $bb48;
$bb47:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i111 == 1));
  goto $bb48;
$bb48:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.14 = phi i32 [ %136, %135 ], [ %129, %133 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.14, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %138, !verifier.code !62 */
  $i110 := $i112;
  goto $bb45;
$bb49:
  assume ($i123 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1138, 7} true;
  assume {:verifier.code 0} true;
  /* %150 = add nsw i32 %147, 1, !dbg !229, !verifier.code !62 */
  $i124 := $add.i32($i122, 1);
  /* call void @llvm.dbg.value(metadata i32 %150, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1139, 3} true;
  assume {:verifier.code 0} true;
  /* br label %156, !dbg !231, !verifier.code !62 */
  $i125 := $i124;
  goto $bb51;
$bb50:
  assume !(($i123 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1139, 16} true;
  assume {:verifier.code 0} true;
  /* %152 = icmp slt i32 %146, 0, !dbg !232, !verifier.code !62 */
  $i126 := $slt.i32($i121, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1139, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %152, label %153, label %155, !dbg !234, !verifier.code !62 */
  $i127 := $i122;
  assume {:branchcond $i126} true;
  goto $bb52, $bb53;
$bb51:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.17 = phi i32 [ %150, %149 ], [ %.16, %155 ], !dbg !238, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.17, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1142, 5} true;
  assume {:verifier.code 0} true;
  /* %157 = add nsw i32 %142, %142, !dbg !239, !verifier.code !62 */
  $i129 := $add.i32($i117, $i117);
  /* call void @llvm.dbg.value(metadata i32 %157, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i129);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1143, 7} true;
  assume {:verifier.code 0} true;
  /* %158 = sext i32 %157 to i64, !dbg !240, !verifier.code !62 */
  $i130 := $sext.i32.i64($i129);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1143, 9} true;
  assume {:verifier.code 0} true;
  /* %159 = srem i64 %158, 2147483648, !dbg !241, !verifier.code !62 */
  $i131 := $srem.i64($i130, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1143, 7} true;
  assume {:verifier.code 0} true;
  /* %160 = trunc i64 %159 to i32, !dbg !240, !verifier.code !62 */
  $i132 := $trunc.i64.i32($i131);
  /* call void @llvm.dbg.value(metadata i32 %160, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1144, 5} true;
  assume {:verifier.code 0} true;
  /* %161 = add nsw i32 %146, %146, !dbg !242, !verifier.code !62 */
  $i133 := $add.i32($i121, $i121);
  /* call void @llvm.dbg.value(metadata i32 %161, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i133);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1145, 7} true;
  assume {:verifier.code 0} true;
  /* %162 = sext i32 %161 to i64, !dbg !243, !verifier.code !62 */
  $i134 := $sext.i32.i64($i133);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1145, 9} true;
  assume {:verifier.code 0} true;
  /* %163 = srem i64 %162, 2147483648, !dbg !244, !verifier.code !62 */
  $i135 := $srem.i64($i134, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1145, 7} true;
  assume {:verifier.code 0} true;
  /* %164 = trunc i64 %163 to i32, !dbg !243, !verifier.code !62 */
  $i136 := $trunc.i64.i32($i135);
  /* call void @llvm.dbg.value(metadata i32 %164, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1147, 5} true;
  assume {:verifier.code 0} true;
  /* %165 = add nsw i32 %.17, %.17, !dbg !245, !verifier.code !62 */
  $i137 := $add.i32($i125, $i125);
  /* call void @llvm.dbg.value(metadata i32 %165, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i137);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1148, 9} true;
  assume {:verifier.code 0} true;
  /* %166 = icmp slt i32 %160, 0, !dbg !246, !verifier.code !62 */
  $i138 := $slt.i32($i132, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1148, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %166, label %167, label %169, !dbg !248, !verifier.code !62 */
  assume {:branchcond $i138} true;
  goto $bb55, $bb56;
$bb52:
  assume ($i126 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1140, 7} true;
  assume {:verifier.code 0} true;
  /* %154 = add nsw i32 %147, 1, !dbg !235, !verifier.code !62 */
  $i128 := $add.i32($i122, 1);
  /* call void @llvm.dbg.value(metadata i32 %154, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1141, 3} true;
  assume {:verifier.code 0} true;
  /* br label %155, !dbg !237, !verifier.code !62 */
  $i127 := $i128;
  goto $bb54;
$bb53:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1139, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i126 == 1));
  goto $bb54;
$bb54:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.16 = phi i32 [ %154, %153 ], [ %147, %151 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.16, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %156, !verifier.code !62 */
  $i125 := $i127;
  goto $bb51;
$bb55:
  assume ($i138 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1149, 7} true;
  assume {:verifier.code 0} true;
  /* %168 = add nsw i32 %165, 1, !dbg !249, !verifier.code !62 */
  $i139 := $add.i32($i137, 1);
  /* call void @llvm.dbg.value(metadata i32 %168, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1150, 3} true;
  assume {:verifier.code 0} true;
  /* br label %174, !dbg !251, !verifier.code !62 */
  $i140 := $i139;
  goto $bb57;
$bb56:
  assume !(($i138 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1150, 16} true;
  assume {:verifier.code 0} true;
  /* %170 = icmp slt i32 %164, 0, !dbg !252, !verifier.code !62 */
  $i141 := $slt.i32($i136, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1150, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %170, label %171, label %173, !dbg !254, !verifier.code !62 */
  $i142 := $i137;
  assume {:branchcond $i141} true;
  goto $bb58, $bb59;
$bb57:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.19 = phi i32 [ %168, %167 ], [ %.18, %173 ], !dbg !258, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.19, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1153, 5} true;
  assume {:verifier.code 0} true;
  /* %175 = add nsw i32 %160, %160, !dbg !259, !verifier.code !62 */
  $i144 := $add.i32($i132, $i132);
  /* call void @llvm.dbg.value(metadata i32 %175, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i144);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1154, 7} true;
  assume {:verifier.code 0} true;
  /* %176 = sext i32 %175 to i64, !dbg !260, !verifier.code !62 */
  $i145 := $sext.i32.i64($i144);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1154, 9} true;
  assume {:verifier.code 0} true;
  /* %177 = srem i64 %176, 2147483648, !dbg !261, !verifier.code !62 */
  $i146 := $srem.i64($i145, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1154, 7} true;
  assume {:verifier.code 0} true;
  /* %178 = trunc i64 %177 to i32, !dbg !260, !verifier.code !62 */
  $i147 := $trunc.i64.i32($i146);
  /* call void @llvm.dbg.value(metadata i32 %178, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1155, 5} true;
  assume {:verifier.code 0} true;
  /* %179 = add nsw i32 %164, %164, !dbg !262, !verifier.code !62 */
  $i148 := $add.i32($i136, $i136);
  /* call void @llvm.dbg.value(metadata i32 %179, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i148);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1156, 7} true;
  assume {:verifier.code 0} true;
  /* %180 = sext i32 %179 to i64, !dbg !263, !verifier.code !62 */
  $i149 := $sext.i32.i64($i148);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1156, 9} true;
  assume {:verifier.code 0} true;
  /* %181 = srem i64 %180, 2147483648, !dbg !264, !verifier.code !62 */
  $i150 := $srem.i64($i149, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1156, 7} true;
  assume {:verifier.code 0} true;
  /* %182 = trunc i64 %181 to i32, !dbg !263, !verifier.code !62 */
  $i151 := $trunc.i64.i32($i150);
  /* call void @llvm.dbg.value(metadata i32 %182, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i151);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1158, 5} true;
  assume {:verifier.code 0} true;
  /* %183 = add nsw i32 %.19, %.19, !dbg !265, !verifier.code !62 */
  $i152 := $add.i32($i140, $i140);
  /* call void @llvm.dbg.value(metadata i32 %183, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i152);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1159, 9} true;
  assume {:verifier.code 0} true;
  /* %184 = icmp slt i32 %178, 0, !dbg !266, !verifier.code !62 */
  $i153 := $slt.i32($i147, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1159, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %184, label %185, label %187, !dbg !268, !verifier.code !62 */
  assume {:branchcond $i153} true;
  goto $bb61, $bb62;
$bb58:
  assume ($i141 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1151, 7} true;
  assume {:verifier.code 0} true;
  /* %172 = add nsw i32 %165, 1, !dbg !255, !verifier.code !62 */
  $i143 := $add.i32($i137, 1);
  /* call void @llvm.dbg.value(metadata i32 %172, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1152, 3} true;
  assume {:verifier.code 0} true;
  /* br label %173, !dbg !257, !verifier.code !62 */
  $i142 := $i143;
  goto $bb60;
$bb59:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1150, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i141 == 1));
  goto $bb60;
$bb60:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.18 = phi i32 [ %172, %171 ], [ %165, %169 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.18, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %174, !verifier.code !62 */
  $i140 := $i142;
  goto $bb57;
$bb61:
  assume ($i153 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1160, 7} true;
  assume {:verifier.code 0} true;
  /* %186 = add nsw i32 %183, 1, !dbg !269, !verifier.code !62 */
  $i154 := $add.i32($i152, 1);
  /* call void @llvm.dbg.value(metadata i32 %186, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i154);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1161, 3} true;
  assume {:verifier.code 0} true;
  /* br label %192, !dbg !271, !verifier.code !62 */
  $i155 := $i154;
  goto $bb63;
$bb62:
  assume !(($i153 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1161, 16} true;
  assume {:verifier.code 0} true;
  /* %188 = icmp slt i32 %182, 0, !dbg !272, !verifier.code !62 */
  $i156 := $slt.i32($i151, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1161, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %188, label %189, label %191, !dbg !274, !verifier.code !62 */
  $i157 := $i152;
  assume {:branchcond $i156} true;
  goto $bb64, $bb65;
$bb63:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.21 = phi i32 [ %186, %185 ], [ %.20, %191 ], !dbg !278, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.21, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1164, 5} true;
  assume {:verifier.code 0} true;
  /* %193 = add nsw i32 %178, %178, !dbg !279, !verifier.code !62 */
  $i159 := $add.i32($i147, $i147);
  /* call void @llvm.dbg.value(metadata i32 %193, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i159);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1165, 7} true;
  assume {:verifier.code 0} true;
  /* %194 = sext i32 %193 to i64, !dbg !280, !verifier.code !62 */
  $i160 := $sext.i32.i64($i159);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1165, 9} true;
  assume {:verifier.code 0} true;
  /* %195 = srem i64 %194, 2147483648, !dbg !281, !verifier.code !62 */
  $i161 := $srem.i64($i160, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1165, 7} true;
  assume {:verifier.code 0} true;
  /* %196 = trunc i64 %195 to i32, !dbg !280, !verifier.code !62 */
  $i162 := $trunc.i64.i32($i161);
  /* call void @llvm.dbg.value(metadata i32 %196, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i162);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1166, 5} true;
  assume {:verifier.code 0} true;
  /* %197 = add nsw i32 %182, %182, !dbg !282, !verifier.code !62 */
  $i163 := $add.i32($i151, $i151);
  /* call void @llvm.dbg.value(metadata i32 %197, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i163);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1167, 7} true;
  assume {:verifier.code 0} true;
  /* %198 = sext i32 %197 to i64, !dbg !283, !verifier.code !62 */
  $i164 := $sext.i32.i64($i163);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1167, 9} true;
  assume {:verifier.code 0} true;
  /* %199 = srem i64 %198, 2147483648, !dbg !284, !verifier.code !62 */
  $i165 := $srem.i64($i164, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1167, 7} true;
  assume {:verifier.code 0} true;
  /* %200 = trunc i64 %199 to i32, !dbg !283, !verifier.code !62 */
  $i166 := $trunc.i64.i32($i165);
  /* call void @llvm.dbg.value(metadata i32 %200, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i166);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1169, 5} true;
  assume {:verifier.code 0} true;
  /* %201 = add nsw i32 %.21, %.21, !dbg !285, !verifier.code !62 */
  $i167 := $add.i32($i155, $i155);
  /* call void @llvm.dbg.value(metadata i32 %201, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i167);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1170, 9} true;
  assume {:verifier.code 0} true;
  /* %202 = icmp slt i32 %196, 0, !dbg !286, !verifier.code !62 */
  $i168 := $slt.i32($i162, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1170, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %202, label %203, label %205, !dbg !288, !verifier.code !62 */
  assume {:branchcond $i168} true;
  goto $bb67, $bb68;
$bb64:
  assume ($i156 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1162, 7} true;
  assume {:verifier.code 0} true;
  /* %190 = add nsw i32 %183, 1, !dbg !275, !verifier.code !62 */
  $i158 := $add.i32($i152, 1);
  /* call void @llvm.dbg.value(metadata i32 %190, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i158);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1163, 3} true;
  assume {:verifier.code 0} true;
  /* br label %191, !dbg !277, !verifier.code !62 */
  $i157 := $i158;
  goto $bb66;
$bb65:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1161, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i156 == 1));
  goto $bb66;
$bb66:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.20 = phi i32 [ %190, %189 ], [ %183, %187 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.20, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %192, !verifier.code !62 */
  $i155 := $i157;
  goto $bb63;
$bb67:
  assume ($i168 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1171, 7} true;
  assume {:verifier.code 0} true;
  /* %204 = add nsw i32 %201, 1, !dbg !289, !verifier.code !62 */
  $i169 := $add.i32($i167, 1);
  /* call void @llvm.dbg.value(metadata i32 %204, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i169);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1172, 3} true;
  assume {:verifier.code 0} true;
  /* br label %210, !dbg !291, !verifier.code !62 */
  $i170 := $i169;
  goto $bb69;
$bb68:
  assume !(($i168 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1172, 16} true;
  assume {:verifier.code 0} true;
  /* %206 = icmp slt i32 %200, 0, !dbg !292, !verifier.code !62 */
  $i171 := $slt.i32($i166, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1172, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %206, label %207, label %209, !dbg !294, !verifier.code !62 */
  $i172 := $i167;
  assume {:branchcond $i171} true;
  goto $bb70, $bb71;
$bb69:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.23 = phi i32 [ %204, %203 ], [ %.22, %209 ], !dbg !298, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.23, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1175, 5} true;
  assume {:verifier.code 0} true;
  /* %211 = add nsw i32 %196, %196, !dbg !299, !verifier.code !62 */
  $i174 := $add.i32($i162, $i162);
  /* call void @llvm.dbg.value(metadata i32 %211, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i174);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1176, 7} true;
  assume {:verifier.code 0} true;
  /* %212 = sext i32 %211 to i64, !dbg !300, !verifier.code !62 */
  $i175 := $sext.i32.i64($i174);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1176, 9} true;
  assume {:verifier.code 0} true;
  /* %213 = srem i64 %212, 2147483648, !dbg !301, !verifier.code !62 */
  $i176 := $srem.i64($i175, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1176, 7} true;
  assume {:verifier.code 0} true;
  /* %214 = trunc i64 %213 to i32, !dbg !300, !verifier.code !62 */
  $i177 := $trunc.i64.i32($i176);
  /* call void @llvm.dbg.value(metadata i32 %214, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i177);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1177, 5} true;
  assume {:verifier.code 0} true;
  /* %215 = add nsw i32 %200, %200, !dbg !302, !verifier.code !62 */
  $i178 := $add.i32($i166, $i166);
  /* call void @llvm.dbg.value(metadata i32 %215, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i178);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1178, 7} true;
  assume {:verifier.code 0} true;
  /* %216 = sext i32 %215 to i64, !dbg !303, !verifier.code !62 */
  $i179 := $sext.i32.i64($i178);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1178, 9} true;
  assume {:verifier.code 0} true;
  /* %217 = srem i64 %216, 2147483648, !dbg !304, !verifier.code !62 */
  $i180 := $srem.i64($i179, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1178, 7} true;
  assume {:verifier.code 0} true;
  /* %218 = trunc i64 %217 to i32, !dbg !303, !verifier.code !62 */
  $i181 := $trunc.i64.i32($i180);
  /* call void @llvm.dbg.value(metadata i32 %218, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1180, 5} true;
  assume {:verifier.code 0} true;
  /* %219 = add nsw i32 %.23, %.23, !dbg !305, !verifier.code !62 */
  $i182 := $add.i32($i170, $i170);
  /* call void @llvm.dbg.value(metadata i32 %219, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1181, 9} true;
  assume {:verifier.code 0} true;
  /* %220 = icmp slt i32 %214, 0, !dbg !306, !verifier.code !62 */
  $i183 := $slt.i32($i177, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1181, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %220, label %221, label %223, !dbg !308, !verifier.code !62 */
  assume {:branchcond $i183} true;
  goto $bb73, $bb74;
$bb70:
  assume ($i171 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1173, 7} true;
  assume {:verifier.code 0} true;
  /* %208 = add nsw i32 %201, 1, !dbg !295, !verifier.code !62 */
  $i173 := $add.i32($i167, 1);
  /* call void @llvm.dbg.value(metadata i32 %208, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i173);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1174, 3} true;
  assume {:verifier.code 0} true;
  /* br label %209, !dbg !297, !verifier.code !62 */
  $i172 := $i173;
  goto $bb72;
$bb71:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1172, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i171 == 1));
  goto $bb72;
$bb72:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.22 = phi i32 [ %208, %207 ], [ %201, %205 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.22, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %210, !verifier.code !62 */
  $i170 := $i172;
  goto $bb69;
$bb73:
  assume ($i183 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1182, 7} true;
  assume {:verifier.code 0} true;
  /* %222 = add nsw i32 %219, 1, !dbg !309, !verifier.code !62 */
  $i184 := $add.i32($i182, 1);
  /* call void @llvm.dbg.value(metadata i32 %222, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i184);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1183, 3} true;
  assume {:verifier.code 0} true;
  /* br label %228, !dbg !311, !verifier.code !62 */
  $i185 := $i184;
  goto $bb75;
$bb74:
  assume !(($i183 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1183, 16} true;
  assume {:verifier.code 0} true;
  /* %224 = icmp slt i32 %218, 0, !dbg !312, !verifier.code !62 */
  $i186 := $slt.i32($i181, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1183, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %224, label %225, label %227, !dbg !314, !verifier.code !62 */
  $i187 := $i182;
  assume {:branchcond $i186} true;
  goto $bb76, $bb77;
$bb75:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.25 = phi i32 [ %222, %221 ], [ %.24, %227 ], !dbg !318, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.25, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1186, 5} true;
  assume {:verifier.code 0} true;
  /* %229 = add nsw i32 %214, %214, !dbg !319, !verifier.code !62 */
  $i189 := $add.i32($i177, $i177);
  /* call void @llvm.dbg.value(metadata i32 %229, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i189);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1187, 7} true;
  assume {:verifier.code 0} true;
  /* %230 = sext i32 %229 to i64, !dbg !320, !verifier.code !62 */
  $i190 := $sext.i32.i64($i189);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1187, 9} true;
  assume {:verifier.code 0} true;
  /* %231 = srem i64 %230, 2147483648, !dbg !321, !verifier.code !62 */
  $i191 := $srem.i64($i190, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1187, 7} true;
  assume {:verifier.code 0} true;
  /* %232 = trunc i64 %231 to i32, !dbg !320, !verifier.code !62 */
  $i192 := $trunc.i64.i32($i191);
  /* call void @llvm.dbg.value(metadata i32 %232, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i192);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1188, 5} true;
  assume {:verifier.code 0} true;
  /* %233 = add nsw i32 %218, %218, !dbg !322, !verifier.code !62 */
  $i193 := $add.i32($i181, $i181);
  /* call void @llvm.dbg.value(metadata i32 %233, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1189, 7} true;
  assume {:verifier.code 0} true;
  /* %234 = sext i32 %233 to i64, !dbg !323, !verifier.code !62 */
  $i194 := $sext.i32.i64($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1189, 9} true;
  assume {:verifier.code 0} true;
  /* %235 = srem i64 %234, 2147483648, !dbg !324, !verifier.code !62 */
  $i195 := $srem.i64($i194, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1189, 7} true;
  assume {:verifier.code 0} true;
  /* %236 = trunc i64 %235 to i32, !dbg !323, !verifier.code !62 */
  $i196 := $trunc.i64.i32($i195);
  /* call void @llvm.dbg.value(metadata i32 %236, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i196);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1191, 5} true;
  assume {:verifier.code 0} true;
  /* %237 = add nsw i32 %.25, %.25, !dbg !325, !verifier.code !62 */
  $i197 := $add.i32($i185, $i185);
  /* call void @llvm.dbg.value(metadata i32 %237, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1192, 9} true;
  assume {:verifier.code 0} true;
  /* %238 = icmp slt i32 %232, 0, !dbg !326, !verifier.code !62 */
  $i198 := $slt.i32($i192, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1192, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %238, label %239, label %241, !dbg !328, !verifier.code !62 */
  assume {:branchcond $i198} true;
  goto $bb79, $bb80;
$bb76:
  assume ($i186 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1184, 7} true;
  assume {:verifier.code 0} true;
  /* %226 = add nsw i32 %219, 1, !dbg !315, !verifier.code !62 */
  $i188 := $add.i32($i182, 1);
  /* call void @llvm.dbg.value(metadata i32 %226, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i188);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1185, 3} true;
  assume {:verifier.code 0} true;
  /* br label %227, !dbg !317, !verifier.code !62 */
  $i187 := $i188;
  goto $bb78;
$bb77:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1183, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i186 == 1));
  goto $bb78;
$bb78:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.24 = phi i32 [ %226, %225 ], [ %219, %223 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.24, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %228, !verifier.code !62 */
  $i185 := $i187;
  goto $bb75;
$bb79:
  assume ($i198 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1193, 7} true;
  assume {:verifier.code 0} true;
  /* %240 = add nsw i32 %237, 1, !dbg !329, !verifier.code !62 */
  $i199 := $add.i32($i197, 1);
  /* call void @llvm.dbg.value(metadata i32 %240, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i199);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1194, 3} true;
  assume {:verifier.code 0} true;
  /* br label %246, !dbg !331, !verifier.code !62 */
  $i200 := $i199;
  goto $bb81;
$bb80:
  assume !(($i198 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1194, 16} true;
  assume {:verifier.code 0} true;
  /* %242 = icmp slt i32 %236, 0, !dbg !332, !verifier.code !62 */
  $i201 := $slt.i32($i196, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1194, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %242, label %243, label %245, !dbg !334, !verifier.code !62 */
  $i202 := $i197;
  assume {:branchcond $i201} true;
  goto $bb82, $bb83;
$bb81:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.27 = phi i32 [ %240, %239 ], [ %.26, %245 ], !dbg !338, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.27, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1197, 5} true;
  assume {:verifier.code 0} true;
  /* %247 = add nsw i32 %232, %232, !dbg !339, !verifier.code !62 */
  $i204 := $add.i32($i192, $i192);
  /* call void @llvm.dbg.value(metadata i32 %247, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1198, 7} true;
  assume {:verifier.code 0} true;
  /* %248 = sext i32 %247 to i64, !dbg !340, !verifier.code !62 */
  $i205 := $sext.i32.i64($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1198, 9} true;
  assume {:verifier.code 0} true;
  /* %249 = srem i64 %248, 2147483648, !dbg !341, !verifier.code !62 */
  $i206 := $srem.i64($i205, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1198, 7} true;
  assume {:verifier.code 0} true;
  /* %250 = trunc i64 %249 to i32, !dbg !340, !verifier.code !62 */
  $i207 := $trunc.i64.i32($i206);
  /* call void @llvm.dbg.value(metadata i32 %250, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i207);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1199, 5} true;
  assume {:verifier.code 0} true;
  /* %251 = add nsw i32 %236, %236, !dbg !342, !verifier.code !62 */
  $i208 := $add.i32($i196, $i196);
  /* call void @llvm.dbg.value(metadata i32 %251, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1200, 7} true;
  assume {:verifier.code 0} true;
  /* %252 = sext i32 %251 to i64, !dbg !343, !verifier.code !62 */
  $i209 := $sext.i32.i64($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1200, 9} true;
  assume {:verifier.code 0} true;
  /* %253 = srem i64 %252, 2147483648, !dbg !344, !verifier.code !62 */
  $i210 := $srem.i64($i209, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1200, 7} true;
  assume {:verifier.code 0} true;
  /* %254 = trunc i64 %253 to i32, !dbg !343, !verifier.code !62 */
  $i211 := $trunc.i64.i32($i210);
  /* call void @llvm.dbg.value(metadata i32 %254, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1202, 5} true;
  assume {:verifier.code 0} true;
  /* %255 = add nsw i32 %.27, %.27, !dbg !345, !verifier.code !62 */
  $i212 := $add.i32($i200, $i200);
  /* call void @llvm.dbg.value(metadata i32 %255, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i212);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1203, 9} true;
  assume {:verifier.code 0} true;
  /* %256 = icmp slt i32 %250, 0, !dbg !346, !verifier.code !62 */
  $i213 := $slt.i32($i207, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1203, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %256, label %257, label %259, !dbg !348, !verifier.code !62 */
  assume {:branchcond $i213} true;
  goto $bb85, $bb86;
$bb82:
  assume ($i201 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1195, 7} true;
  assume {:verifier.code 0} true;
  /* %244 = add nsw i32 %237, 1, !dbg !335, !verifier.code !62 */
  $i203 := $add.i32($i197, 1);
  /* call void @llvm.dbg.value(metadata i32 %244, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i203);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1196, 3} true;
  assume {:verifier.code 0} true;
  /* br label %245, !dbg !337, !verifier.code !62 */
  $i202 := $i203;
  goto $bb84;
$bb83:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1194, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i201 == 1));
  goto $bb84;
$bb84:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.26 = phi i32 [ %244, %243 ], [ %237, %241 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.26, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %246, !verifier.code !62 */
  $i200 := $i202;
  goto $bb81;
$bb85:
  assume ($i213 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1204, 7} true;
  assume {:verifier.code 0} true;
  /* %258 = add nsw i32 %255, 1, !dbg !349, !verifier.code !62 */
  $i214 := $add.i32($i212, 1);
  /* call void @llvm.dbg.value(metadata i32 %258, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i214);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1205, 3} true;
  assume {:verifier.code 0} true;
  /* br label %264, !dbg !351, !verifier.code !62 */
  $i215 := $i214;
  goto $bb87;
$bb86:
  assume !(($i213 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1205, 16} true;
  assume {:verifier.code 0} true;
  /* %260 = icmp slt i32 %254, 0, !dbg !352, !verifier.code !62 */
  $i216 := $slt.i32($i211, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1205, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %260, label %261, label %263, !dbg !354, !verifier.code !62 */
  $i217 := $i212;
  assume {:branchcond $i216} true;
  goto $bb88, $bb89;
$bb87:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.29 = phi i32 [ %258, %257 ], [ %.28, %263 ], !dbg !358, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.29, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1208, 5} true;
  assume {:verifier.code 0} true;
  /* %265 = add nsw i32 %250, %250, !dbg !359, !verifier.code !62 */
  $i219 := $add.i32($i207, $i207);
  /* call void @llvm.dbg.value(metadata i32 %265, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1209, 7} true;
  assume {:verifier.code 0} true;
  /* %266 = sext i32 %265 to i64, !dbg !360, !verifier.code !62 */
  $i220 := $sext.i32.i64($i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1209, 9} true;
  assume {:verifier.code 0} true;
  /* %267 = srem i64 %266, 2147483648, !dbg !361, !verifier.code !62 */
  $i221 := $srem.i64($i220, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1209, 7} true;
  assume {:verifier.code 0} true;
  /* %268 = trunc i64 %267 to i32, !dbg !360, !verifier.code !62 */
  $i222 := $trunc.i64.i32($i221);
  /* call void @llvm.dbg.value(metadata i32 %268, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1210, 5} true;
  assume {:verifier.code 0} true;
  /* %269 = add nsw i32 %254, %254, !dbg !362, !verifier.code !62 */
  $i223 := $add.i32($i211, $i211);
  /* call void @llvm.dbg.value(metadata i32 %269, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i223);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1211, 7} true;
  assume {:verifier.code 0} true;
  /* %270 = sext i32 %269 to i64, !dbg !363, !verifier.code !62 */
  $i224 := $sext.i32.i64($i223);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1211, 9} true;
  assume {:verifier.code 0} true;
  /* %271 = srem i64 %270, 2147483648, !dbg !364, !verifier.code !62 */
  $i225 := $srem.i64($i224, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1211, 7} true;
  assume {:verifier.code 0} true;
  /* %272 = trunc i64 %271 to i32, !dbg !363, !verifier.code !62 */
  $i226 := $trunc.i64.i32($i225);
  /* call void @llvm.dbg.value(metadata i32 %272, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1213, 5} true;
  assume {:verifier.code 0} true;
  /* %273 = add nsw i32 %.29, %.29, !dbg !365, !verifier.code !62 */
  $i227 := $add.i32($i215, $i215);
  /* call void @llvm.dbg.value(metadata i32 %273, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i227);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1214, 9} true;
  assume {:verifier.code 0} true;
  /* %274 = icmp slt i32 %268, 0, !dbg !366, !verifier.code !62 */
  $i228 := $slt.i32($i222, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1214, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %274, label %275, label %277, !dbg !368, !verifier.code !62 */
  assume {:branchcond $i228} true;
  goto $bb91, $bb92;
$bb88:
  assume ($i216 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1206, 7} true;
  assume {:verifier.code 0} true;
  /* %262 = add nsw i32 %255, 1, !dbg !355, !verifier.code !62 */
  $i218 := $add.i32($i212, 1);
  /* call void @llvm.dbg.value(metadata i32 %262, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i218);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1207, 3} true;
  assume {:verifier.code 0} true;
  /* br label %263, !dbg !357, !verifier.code !62 */
  $i217 := $i218;
  goto $bb90;
$bb89:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1205, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i216 == 1));
  goto $bb90;
$bb90:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.28 = phi i32 [ %262, %261 ], [ %255, %259 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.28, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %264, !verifier.code !62 */
  $i215 := $i217;
  goto $bb87;
$bb91:
  assume ($i228 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1215, 7} true;
  assume {:verifier.code 0} true;
  /* %276 = add nsw i32 %273, 1, !dbg !369, !verifier.code !62 */
  $i229 := $add.i32($i227, 1);
  /* call void @llvm.dbg.value(metadata i32 %276, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1216, 3} true;
  assume {:verifier.code 0} true;
  /* br label %282, !dbg !371, !verifier.code !62 */
  $i230 := $i229;
  goto $bb93;
$bb92:
  assume !(($i228 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1216, 16} true;
  assume {:verifier.code 0} true;
  /* %278 = icmp slt i32 %272, 0, !dbg !372, !verifier.code !62 */
  $i231 := $slt.i32($i226, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1216, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %278, label %279, label %281, !dbg !374, !verifier.code !62 */
  $i232 := $i227;
  assume {:branchcond $i231} true;
  goto $bb94, $bb95;
$bb93:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.31 = phi i32 [ %276, %275 ], [ %.30, %281 ], !dbg !378, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.31, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1219, 5} true;
  assume {:verifier.code 0} true;
  /* %283 = add nsw i32 %268, %268, !dbg !379, !verifier.code !62 */
  $i234 := $add.i32($i222, $i222);
  /* call void @llvm.dbg.value(metadata i32 %283, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i234);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1220, 7} true;
  assume {:verifier.code 0} true;
  /* %284 = sext i32 %283 to i64, !dbg !380, !verifier.code !62 */
  $i235 := $sext.i32.i64($i234);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1220, 9} true;
  assume {:verifier.code 0} true;
  /* %285 = srem i64 %284, 2147483648, !dbg !381, !verifier.code !62 */
  $i236 := $srem.i64($i235, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1220, 7} true;
  assume {:verifier.code 0} true;
  /* %286 = trunc i64 %285 to i32, !dbg !380, !verifier.code !62 */
  $i237 := $trunc.i64.i32($i236);
  /* call void @llvm.dbg.value(metadata i32 %286, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1221, 5} true;
  assume {:verifier.code 0} true;
  /* %287 = add nsw i32 %272, %272, !dbg !382, !verifier.code !62 */
  $i238 := $add.i32($i226, $i226);
  /* call void @llvm.dbg.value(metadata i32 %287, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i238);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1222, 7} true;
  assume {:verifier.code 0} true;
  /* %288 = sext i32 %287 to i64, !dbg !383, !verifier.code !62 */
  $i239 := $sext.i32.i64($i238);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1222, 9} true;
  assume {:verifier.code 0} true;
  /* %289 = srem i64 %288, 2147483648, !dbg !384, !verifier.code !62 */
  $i240 := $srem.i64($i239, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1222, 7} true;
  assume {:verifier.code 0} true;
  /* %290 = trunc i64 %289 to i32, !dbg !383, !verifier.code !62 */
  $i241 := $trunc.i64.i32($i240);
  /* call void @llvm.dbg.value(metadata i32 %290, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i241);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1224, 5} true;
  assume {:verifier.code 0} true;
  /* %291 = add nsw i32 %.31, %.31, !dbg !385, !verifier.code !62 */
  $i242 := $add.i32($i230, $i230);
  /* call void @llvm.dbg.value(metadata i32 %291, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i242);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1225, 9} true;
  assume {:verifier.code 0} true;
  /* %292 = icmp slt i32 %286, 0, !dbg !386, !verifier.code !62 */
  $i243 := $slt.i32($i237, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1225, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %292, label %293, label %295, !dbg !388, !verifier.code !62 */
  assume {:branchcond $i243} true;
  goto $bb97, $bb98;
$bb94:
  assume ($i231 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1217, 7} true;
  assume {:verifier.code 0} true;
  /* %280 = add nsw i32 %273, 1, !dbg !375, !verifier.code !62 */
  $i233 := $add.i32($i227, 1);
  /* call void @llvm.dbg.value(metadata i32 %280, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1218, 3} true;
  assume {:verifier.code 0} true;
  /* br label %281, !dbg !377, !verifier.code !62 */
  $i232 := $i233;
  goto $bb96;
$bb95:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1216, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i231 == 1));
  goto $bb96;
$bb96:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.30 = phi i32 [ %280, %279 ], [ %273, %277 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.30, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %282, !verifier.code !62 */
  $i230 := $i232;
  goto $bb93;
$bb97:
  assume ($i243 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1226, 7} true;
  assume {:verifier.code 0} true;
  /* %294 = add nsw i32 %291, 1, !dbg !389, !verifier.code !62 */
  $i244 := $add.i32($i242, 1);
  /* call void @llvm.dbg.value(metadata i32 %294, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i244);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1227, 3} true;
  assume {:verifier.code 0} true;
  /* br label %300, !dbg !391, !verifier.code !62 */
  $i245 := $i244;
  goto $bb99;
$bb98:
  assume !(($i243 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1227, 16} true;
  assume {:verifier.code 0} true;
  /* %296 = icmp slt i32 %290, 0, !dbg !392, !verifier.code !62 */
  $i246 := $slt.i32($i241, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1227, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %296, label %297, label %299, !dbg !394, !verifier.code !62 */
  $i247 := $i242;
  assume {:branchcond $i246} true;
  goto $bb100, $bb101;
$bb99:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.33 = phi i32 [ %294, %293 ], [ %.32, %299 ], !dbg !398, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.33, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1230, 5} true;
  assume {:verifier.code 0} true;
  /* %301 = add nsw i32 %286, %286, !dbg !399, !verifier.code !62 */
  $i249 := $add.i32($i237, $i237);
  /* call void @llvm.dbg.value(metadata i32 %301, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i249);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1231, 7} true;
  assume {:verifier.code 0} true;
  /* %302 = sext i32 %301 to i64, !dbg !400, !verifier.code !62 */
  $i250 := $sext.i32.i64($i249);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1231, 9} true;
  assume {:verifier.code 0} true;
  /* %303 = srem i64 %302, 2147483648, !dbg !401, !verifier.code !62 */
  $i251 := $srem.i64($i250, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1231, 7} true;
  assume {:verifier.code 0} true;
  /* %304 = trunc i64 %303 to i32, !dbg !400, !verifier.code !62 */
  $i252 := $trunc.i64.i32($i251);
  /* call void @llvm.dbg.value(metadata i32 %304, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1232, 5} true;
  assume {:verifier.code 0} true;
  /* %305 = add nsw i32 %290, %290, !dbg !402, !verifier.code !62 */
  $i253 := $add.i32($i241, $i241);
  /* call void @llvm.dbg.value(metadata i32 %305, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i253);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1233, 7} true;
  assume {:verifier.code 0} true;
  /* %306 = sext i32 %305 to i64, !dbg !403, !verifier.code !62 */
  $i254 := $sext.i32.i64($i253);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1233, 9} true;
  assume {:verifier.code 0} true;
  /* %307 = srem i64 %306, 2147483648, !dbg !404, !verifier.code !62 */
  $i255 := $srem.i64($i254, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1233, 7} true;
  assume {:verifier.code 0} true;
  /* %308 = trunc i64 %307 to i32, !dbg !403, !verifier.code !62 */
  $i256 := $trunc.i64.i32($i255);
  /* call void @llvm.dbg.value(metadata i32 %308, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i256);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1235, 5} true;
  assume {:verifier.code 0} true;
  /* %309 = add nsw i32 %.33, %.33, !dbg !405, !verifier.code !62 */
  $i257 := $add.i32($i245, $i245);
  /* call void @llvm.dbg.value(metadata i32 %309, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i257);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1236, 9} true;
  assume {:verifier.code 0} true;
  /* %310 = icmp slt i32 %304, 0, !dbg !406, !verifier.code !62 */
  $i258 := $slt.i32($i252, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1236, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %310, label %311, label %313, !dbg !408, !verifier.code !62 */
  assume {:branchcond $i258} true;
  goto $bb103, $bb104;
$bb100:
  assume ($i246 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1228, 7} true;
  assume {:verifier.code 0} true;
  /* %298 = add nsw i32 %291, 1, !dbg !395, !verifier.code !62 */
  $i248 := $add.i32($i242, 1);
  /* call void @llvm.dbg.value(metadata i32 %298, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i248);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1229, 3} true;
  assume {:verifier.code 0} true;
  /* br label %299, !dbg !397, !verifier.code !62 */
  $i247 := $i248;
  goto $bb102;
$bb101:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1227, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i246 == 1));
  goto $bb102;
$bb102:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.32 = phi i32 [ %298, %297 ], [ %291, %295 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.32, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %300, !verifier.code !62 */
  $i245 := $i247;
  goto $bb99;
$bb103:
  assume ($i258 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1237, 7} true;
  assume {:verifier.code 0} true;
  /* %312 = add nsw i32 %309, 1, !dbg !409, !verifier.code !62 */
  $i259 := $add.i32($i257, 1);
  /* call void @llvm.dbg.value(metadata i32 %312, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i259);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1238, 3} true;
  assume {:verifier.code 0} true;
  /* br label %318, !dbg !411, !verifier.code !62 */
  $i260 := $i259;
  goto $bb105;
$bb104:
  assume !(($i258 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1238, 16} true;
  assume {:verifier.code 0} true;
  /* %314 = icmp slt i32 %308, 0, !dbg !412, !verifier.code !62 */
  $i261 := $slt.i32($i256, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1238, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %314, label %315, label %317, !dbg !414, !verifier.code !62 */
  $i262 := $i257;
  assume {:branchcond $i261} true;
  goto $bb106, $bb107;
$bb105:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.35 = phi i32 [ %312, %311 ], [ %.34, %317 ], !dbg !418, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.35, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1241, 5} true;
  assume {:verifier.code 0} true;
  /* %319 = add nsw i32 %304, %304, !dbg !419, !verifier.code !62 */
  $i264 := $add.i32($i252, $i252);
  /* call void @llvm.dbg.value(metadata i32 %319, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i264);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1242, 7} true;
  assume {:verifier.code 0} true;
  /* %320 = sext i32 %319 to i64, !dbg !420, !verifier.code !62 */
  $i265 := $sext.i32.i64($i264);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1242, 9} true;
  assume {:verifier.code 0} true;
  /* %321 = srem i64 %320, 2147483648, !dbg !421, !verifier.code !62 */
  $i266 := $srem.i64($i265, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1242, 7} true;
  assume {:verifier.code 0} true;
  /* %322 = trunc i64 %321 to i32, !dbg !420, !verifier.code !62 */
  $i267 := $trunc.i64.i32($i266);
  /* call void @llvm.dbg.value(metadata i32 %322, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i267);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1243, 5} true;
  assume {:verifier.code 0} true;
  /* %323 = add nsw i32 %308, %308, !dbg !422, !verifier.code !62 */
  $i268 := $add.i32($i256, $i256);
  /* call void @llvm.dbg.value(metadata i32 %323, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i268);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1244, 7} true;
  assume {:verifier.code 0} true;
  /* %324 = sext i32 %323 to i64, !dbg !423, !verifier.code !62 */
  $i269 := $sext.i32.i64($i268);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1244, 9} true;
  assume {:verifier.code 0} true;
  /* %325 = srem i64 %324, 2147483648, !dbg !424, !verifier.code !62 */
  $i270 := $srem.i64($i269, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1244, 7} true;
  assume {:verifier.code 0} true;
  /* %326 = trunc i64 %325 to i32, !dbg !423, !verifier.code !62 */
  $i271 := $trunc.i64.i32($i270);
  /* call void @llvm.dbg.value(metadata i32 %326, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i271);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1246, 5} true;
  assume {:verifier.code 0} true;
  /* %327 = add nsw i32 %.35, %.35, !dbg !425, !verifier.code !62 */
  $i272 := $add.i32($i260, $i260);
  /* call void @llvm.dbg.value(metadata i32 %327, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i272);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1247, 9} true;
  assume {:verifier.code 0} true;
  /* %328 = icmp slt i32 %322, 0, !dbg !426, !verifier.code !62 */
  $i273 := $slt.i32($i267, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1247, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %328, label %329, label %331, !dbg !428, !verifier.code !62 */
  assume {:branchcond $i273} true;
  goto $bb109, $bb110;
$bb106:
  assume ($i261 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1239, 7} true;
  assume {:verifier.code 0} true;
  /* %316 = add nsw i32 %309, 1, !dbg !415, !verifier.code !62 */
  $i263 := $add.i32($i257, 1);
  /* call void @llvm.dbg.value(metadata i32 %316, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i263);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1240, 3} true;
  assume {:verifier.code 0} true;
  /* br label %317, !dbg !417, !verifier.code !62 */
  $i262 := $i263;
  goto $bb108;
$bb107:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1238, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i261 == 1));
  goto $bb108;
$bb108:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.34 = phi i32 [ %316, %315 ], [ %309, %313 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.34, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %318, !verifier.code !62 */
  $i260 := $i262;
  goto $bb105;
$bb109:
  assume ($i273 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1248, 7} true;
  assume {:verifier.code 0} true;
  /* %330 = add nsw i32 %327, 1, !dbg !429, !verifier.code !62 */
  $i274 := $add.i32($i272, 1);
  /* call void @llvm.dbg.value(metadata i32 %330, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i274);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1249, 3} true;
  assume {:verifier.code 0} true;
  /* br label %336, !dbg !431, !verifier.code !62 */
  $i275 := $i274;
  goto $bb111;
$bb110:
  assume !(($i273 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1249, 16} true;
  assume {:verifier.code 0} true;
  /* %332 = icmp slt i32 %326, 0, !dbg !432, !verifier.code !62 */
  $i276 := $slt.i32($i271, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1249, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %332, label %333, label %335, !dbg !434, !verifier.code !62 */
  $i277 := $i272;
  assume {:branchcond $i276} true;
  goto $bb112, $bb113;
$bb111:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.37 = phi i32 [ %330, %329 ], [ %.36, %335 ], !dbg !438, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.37, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1252, 5} true;
  assume {:verifier.code 0} true;
  /* %337 = add nsw i32 %322, %322, !dbg !439, !verifier.code !62 */
  $i279 := $add.i32($i267, $i267);
  /* call void @llvm.dbg.value(metadata i32 %337, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i279);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1253, 7} true;
  assume {:verifier.code 0} true;
  /* %338 = sext i32 %337 to i64, !dbg !440, !verifier.code !62 */
  $i280 := $sext.i32.i64($i279);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1253, 9} true;
  assume {:verifier.code 0} true;
  /* %339 = srem i64 %338, 2147483648, !dbg !441, !verifier.code !62 */
  $i281 := $srem.i64($i280, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1253, 7} true;
  assume {:verifier.code 0} true;
  /* %340 = trunc i64 %339 to i32, !dbg !440, !verifier.code !62 */
  $i282 := $trunc.i64.i32($i281);
  /* call void @llvm.dbg.value(metadata i32 %340, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i282);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1254, 5} true;
  assume {:verifier.code 0} true;
  /* %341 = add nsw i32 %326, %326, !dbg !442, !verifier.code !62 */
  $i283 := $add.i32($i271, $i271);
  /* call void @llvm.dbg.value(metadata i32 %341, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i283);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1255, 7} true;
  assume {:verifier.code 0} true;
  /* %342 = sext i32 %341 to i64, !dbg !443, !verifier.code !62 */
  $i284 := $sext.i32.i64($i283);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1255, 9} true;
  assume {:verifier.code 0} true;
  /* %343 = srem i64 %342, 2147483648, !dbg !444, !verifier.code !62 */
  $i285 := $srem.i64($i284, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1255, 7} true;
  assume {:verifier.code 0} true;
  /* %344 = trunc i64 %343 to i32, !dbg !443, !verifier.code !62 */
  $i286 := $trunc.i64.i32($i285);
  /* call void @llvm.dbg.value(metadata i32 %344, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i286);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1257, 5} true;
  assume {:verifier.code 0} true;
  /* %345 = add nsw i32 %.37, %.37, !dbg !445, !verifier.code !62 */
  $i287 := $add.i32($i275, $i275);
  /* call void @llvm.dbg.value(metadata i32 %345, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1258, 9} true;
  assume {:verifier.code 0} true;
  /* %346 = icmp slt i32 %340, 0, !dbg !446, !verifier.code !62 */
  $i288 := $slt.i32($i282, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1258, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %346, label %347, label %349, !dbg !448, !verifier.code !62 */
  assume {:branchcond $i288} true;
  goto $bb115, $bb116;
$bb112:
  assume ($i276 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1250, 7} true;
  assume {:verifier.code 0} true;
  /* %334 = add nsw i32 %327, 1, !dbg !435, !verifier.code !62 */
  $i278 := $add.i32($i272, 1);
  /* call void @llvm.dbg.value(metadata i32 %334, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i278);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1251, 3} true;
  assume {:verifier.code 0} true;
  /* br label %335, !dbg !437, !verifier.code !62 */
  $i277 := $i278;
  goto $bb114;
$bb113:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1249, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i276 == 1));
  goto $bb114;
$bb114:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.36 = phi i32 [ %334, %333 ], [ %327, %331 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.36, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %336, !verifier.code !62 */
  $i275 := $i277;
  goto $bb111;
$bb115:
  assume ($i288 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1259, 7} true;
  assume {:verifier.code 0} true;
  /* %348 = add nsw i32 %345, 1, !dbg !449, !verifier.code !62 */
  $i289 := $add.i32($i287, 1);
  /* call void @llvm.dbg.value(metadata i32 %348, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i289);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1260, 3} true;
  assume {:verifier.code 0} true;
  /* br label %354, !dbg !451, !verifier.code !62 */
  $i290 := $i289;
  goto $bb117;
$bb116:
  assume !(($i288 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1260, 16} true;
  assume {:verifier.code 0} true;
  /* %350 = icmp slt i32 %344, 0, !dbg !452, !verifier.code !62 */
  $i291 := $slt.i32($i286, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1260, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %350, label %351, label %353, !dbg !454, !verifier.code !62 */
  $i292 := $i287;
  assume {:branchcond $i291} true;
  goto $bb118, $bb119;
$bb117:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.39 = phi i32 [ %348, %347 ], [ %.38, %353 ], !dbg !458, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.39, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1263, 5} true;
  assume {:verifier.code 0} true;
  /* %355 = add nsw i32 %340, %340, !dbg !459, !verifier.code !62 */
  $i294 := $add.i32($i282, $i282);
  /* call void @llvm.dbg.value(metadata i32 %355, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i294);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1264, 7} true;
  assume {:verifier.code 0} true;
  /* %356 = sext i32 %355 to i64, !dbg !460, !verifier.code !62 */
  $i295 := $sext.i32.i64($i294);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1264, 9} true;
  assume {:verifier.code 0} true;
  /* %357 = srem i64 %356, 2147483648, !dbg !461, !verifier.code !62 */
  $i296 := $srem.i64($i295, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1264, 7} true;
  assume {:verifier.code 0} true;
  /* %358 = trunc i64 %357 to i32, !dbg !460, !verifier.code !62 */
  $i297 := $trunc.i64.i32($i296);
  /* call void @llvm.dbg.value(metadata i32 %358, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i297);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1265, 5} true;
  assume {:verifier.code 0} true;
  /* %359 = add nsw i32 %344, %344, !dbg !462, !verifier.code !62 */
  $i298 := $add.i32($i286, $i286);
  /* call void @llvm.dbg.value(metadata i32 %359, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1266, 7} true;
  assume {:verifier.code 0} true;
  /* %360 = sext i32 %359 to i64, !dbg !463, !verifier.code !62 */
  $i299 := $sext.i32.i64($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1266, 9} true;
  assume {:verifier.code 0} true;
  /* %361 = srem i64 %360, 2147483648, !dbg !464, !verifier.code !62 */
  $i300 := $srem.i64($i299, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1266, 7} true;
  assume {:verifier.code 0} true;
  /* %362 = trunc i64 %361 to i32, !dbg !463, !verifier.code !62 */
  $i301 := $trunc.i64.i32($i300);
  /* call void @llvm.dbg.value(metadata i32 %362, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i301);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1268, 5} true;
  assume {:verifier.code 0} true;
  /* %363 = add nsw i32 %.39, %.39, !dbg !465, !verifier.code !62 */
  $i302 := $add.i32($i290, $i290);
  /* call void @llvm.dbg.value(metadata i32 %363, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i302);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1269, 9} true;
  assume {:verifier.code 0} true;
  /* %364 = icmp slt i32 %358, 0, !dbg !466, !verifier.code !62 */
  $i303 := $slt.i32($i297, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1269, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %364, label %365, label %367, !dbg !468, !verifier.code !62 */
  assume {:branchcond $i303} true;
  goto $bb121, $bb122;
$bb118:
  assume ($i291 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1261, 7} true;
  assume {:verifier.code 0} true;
  /* %352 = add nsw i32 %345, 1, !dbg !455, !verifier.code !62 */
  $i293 := $add.i32($i287, 1);
  /* call void @llvm.dbg.value(metadata i32 %352, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i293);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1262, 3} true;
  assume {:verifier.code 0} true;
  /* br label %353, !dbg !457, !verifier.code !62 */
  $i292 := $i293;
  goto $bb120;
$bb119:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1260, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i291 == 1));
  goto $bb120;
$bb120:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.38 = phi i32 [ %352, %351 ], [ %345, %349 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.38, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %354, !verifier.code !62 */
  $i290 := $i292;
  goto $bb117;
$bb121:
  assume ($i303 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1270, 7} true;
  assume {:verifier.code 0} true;
  /* %366 = add nsw i32 %363, 1, !dbg !469, !verifier.code !62 */
  $i304 := $add.i32($i302, 1);
  /* call void @llvm.dbg.value(metadata i32 %366, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i304);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1271, 3} true;
  assume {:verifier.code 0} true;
  /* br label %372, !dbg !471, !verifier.code !62 */
  $i305 := $i304;
  goto $bb123;
$bb122:
  assume !(($i303 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1271, 16} true;
  assume {:verifier.code 0} true;
  /* %368 = icmp slt i32 %362, 0, !dbg !472, !verifier.code !62 */
  $i306 := $slt.i32($i301, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1271, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %368, label %369, label %371, !dbg !474, !verifier.code !62 */
  $i307 := $i302;
  assume {:branchcond $i306} true;
  goto $bb124, $bb125;
$bb123:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.41 = phi i32 [ %366, %365 ], [ %.40, %371 ], !dbg !478, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.41, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1274, 5} true;
  assume {:verifier.code 0} true;
  /* %373 = add nsw i32 %358, %358, !dbg !479, !verifier.code !62 */
  $i309 := $add.i32($i297, $i297);
  /* call void @llvm.dbg.value(metadata i32 %373, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1275, 7} true;
  assume {:verifier.code 0} true;
  /* %374 = sext i32 %373 to i64, !dbg !480, !verifier.code !62 */
  $i310 := $sext.i32.i64($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1275, 9} true;
  assume {:verifier.code 0} true;
  /* %375 = srem i64 %374, 2147483648, !dbg !481, !verifier.code !62 */
  $i311 := $srem.i64($i310, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1275, 7} true;
  assume {:verifier.code 0} true;
  /* %376 = trunc i64 %375 to i32, !dbg !480, !verifier.code !62 */
  $i312 := $trunc.i64.i32($i311);
  /* call void @llvm.dbg.value(metadata i32 %376, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i312);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1276, 5} true;
  assume {:verifier.code 0} true;
  /* %377 = add nsw i32 %362, %362, !dbg !482, !verifier.code !62 */
  $i313 := $add.i32($i301, $i301);
  /* call void @llvm.dbg.value(metadata i32 %377, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1277, 7} true;
  assume {:verifier.code 0} true;
  /* %378 = sext i32 %377 to i64, !dbg !483, !verifier.code !62 */
  $i314 := $sext.i32.i64($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1277, 9} true;
  assume {:verifier.code 0} true;
  /* %379 = srem i64 %378, 2147483648, !dbg !484, !verifier.code !62 */
  $i315 := $srem.i64($i314, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1277, 7} true;
  assume {:verifier.code 0} true;
  /* %380 = trunc i64 %379 to i32, !dbg !483, !verifier.code !62 */
  $i316 := $trunc.i64.i32($i315);
  /* call void @llvm.dbg.value(metadata i32 %380, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1279, 5} true;
  assume {:verifier.code 0} true;
  /* %381 = add nsw i32 %.41, %.41, !dbg !485, !verifier.code !62 */
  $i317 := $add.i32($i305, $i305);
  /* call void @llvm.dbg.value(metadata i32 %381, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i317);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1280, 9} true;
  assume {:verifier.code 0} true;
  /* %382 = icmp slt i32 %376, 0, !dbg !486, !verifier.code !62 */
  $i318 := $slt.i32($i312, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1280, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %382, label %383, label %385, !dbg !488, !verifier.code !62 */
  assume {:branchcond $i318} true;
  goto $bb127, $bb128;
$bb124:
  assume ($i306 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1272, 7} true;
  assume {:verifier.code 0} true;
  /* %370 = add nsw i32 %363, 1, !dbg !475, !verifier.code !62 */
  $i308 := $add.i32($i302, 1);
  /* call void @llvm.dbg.value(metadata i32 %370, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i308);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1273, 3} true;
  assume {:verifier.code 0} true;
  /* br label %371, !dbg !477, !verifier.code !62 */
  $i307 := $i308;
  goto $bb126;
$bb125:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1271, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i306 == 1));
  goto $bb126;
$bb126:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.40 = phi i32 [ %370, %369 ], [ %363, %367 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.40, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %372, !verifier.code !62 */
  $i305 := $i307;
  goto $bb123;
$bb127:
  assume ($i318 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1281, 7} true;
  assume {:verifier.code 0} true;
  /* %384 = add nsw i32 %381, 1, !dbg !489, !verifier.code !62 */
  $i319 := $add.i32($i317, 1);
  /* call void @llvm.dbg.value(metadata i32 %384, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i319);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1282, 3} true;
  assume {:verifier.code 0} true;
  /* br label %390, !dbg !491, !verifier.code !62 */
  $i320 := $i319;
  goto $bb129;
$bb128:
  assume !(($i318 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1282, 16} true;
  assume {:verifier.code 0} true;
  /* %386 = icmp slt i32 %380, 0, !dbg !492, !verifier.code !62 */
  $i321 := $slt.i32($i316, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1282, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %386, label %387, label %389, !dbg !494, !verifier.code !62 */
  $i322 := $i317;
  assume {:branchcond $i321} true;
  goto $bb130, $bb131;
$bb129:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.43 = phi i32 [ %384, %383 ], [ %.42, %389 ], !dbg !498, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.43, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1285, 5} true;
  assume {:verifier.code 0} true;
  /* %391 = add nsw i32 %376, %376, !dbg !499, !verifier.code !62 */
  $i324 := $add.i32($i312, $i312);
  /* call void @llvm.dbg.value(metadata i32 %391, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i324);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1286, 7} true;
  assume {:verifier.code 0} true;
  /* %392 = sext i32 %391 to i64, !dbg !500, !verifier.code !62 */
  $i325 := $sext.i32.i64($i324);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1286, 9} true;
  assume {:verifier.code 0} true;
  /* %393 = srem i64 %392, 2147483648, !dbg !501, !verifier.code !62 */
  $i326 := $srem.i64($i325, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1286, 7} true;
  assume {:verifier.code 0} true;
  /* %394 = trunc i64 %393 to i32, !dbg !500, !verifier.code !62 */
  $i327 := $trunc.i64.i32($i326);
  /* call void @llvm.dbg.value(metadata i32 %394, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1287, 5} true;
  assume {:verifier.code 0} true;
  /* %395 = add nsw i32 %380, %380, !dbg !502, !verifier.code !62 */
  $i328 := $add.i32($i316, $i316);
  /* call void @llvm.dbg.value(metadata i32 %395, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i328);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1288, 7} true;
  assume {:verifier.code 0} true;
  /* %396 = sext i32 %395 to i64, !dbg !503, !verifier.code !62 */
  $i329 := $sext.i32.i64($i328);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1288, 9} true;
  assume {:verifier.code 0} true;
  /* %397 = srem i64 %396, 2147483648, !dbg !504, !verifier.code !62 */
  $i330 := $srem.i64($i329, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1288, 7} true;
  assume {:verifier.code 0} true;
  /* %398 = trunc i64 %397 to i32, !dbg !503, !verifier.code !62 */
  $i331 := $trunc.i64.i32($i330);
  /* call void @llvm.dbg.value(metadata i32 %398, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i331);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1290, 5} true;
  assume {:verifier.code 0} true;
  /* %399 = add nsw i32 %.43, %.43, !dbg !505, !verifier.code !62 */
  $i332 := $add.i32($i320, $i320);
  /* call void @llvm.dbg.value(metadata i32 %399, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i332);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1291, 9} true;
  assume {:verifier.code 0} true;
  /* %400 = icmp slt i32 %394, 0, !dbg !506, !verifier.code !62 */
  $i333 := $slt.i32($i327, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1291, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %400, label %401, label %403, !dbg !508, !verifier.code !62 */
  assume {:branchcond $i333} true;
  goto $bb133, $bb134;
$bb130:
  assume ($i321 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1283, 7} true;
  assume {:verifier.code 0} true;
  /* %388 = add nsw i32 %381, 1, !dbg !495, !verifier.code !62 */
  $i323 := $add.i32($i317, 1);
  /* call void @llvm.dbg.value(metadata i32 %388, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i323);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1284, 3} true;
  assume {:verifier.code 0} true;
  /* br label %389, !dbg !497, !verifier.code !62 */
  $i322 := $i323;
  goto $bb132;
$bb131:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1282, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i321 == 1));
  goto $bb132;
$bb132:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.42 = phi i32 [ %388, %387 ], [ %381, %385 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.42, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %390, !verifier.code !62 */
  $i320 := $i322;
  goto $bb129;
$bb133:
  assume ($i333 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1292, 7} true;
  assume {:verifier.code 0} true;
  /* %402 = add nsw i32 %399, 1, !dbg !509, !verifier.code !62 */
  $i334 := $add.i32($i332, 1);
  /* call void @llvm.dbg.value(metadata i32 %402, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i334);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1293, 3} true;
  assume {:verifier.code 0} true;
  /* br label %408, !dbg !511, !verifier.code !62 */
  $i335 := $i334;
  goto $bb135;
$bb134:
  assume !(($i333 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1293, 16} true;
  assume {:verifier.code 0} true;
  /* %404 = icmp slt i32 %398, 0, !dbg !512, !verifier.code !62 */
  $i336 := $slt.i32($i331, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1293, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %404, label %405, label %407, !dbg !514, !verifier.code !62 */
  $i337 := $i332;
  assume {:branchcond $i336} true;
  goto $bb136, $bb137;
$bb135:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.45 = phi i32 [ %402, %401 ], [ %.44, %407 ], !dbg !518, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.45, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1296, 5} true;
  assume {:verifier.code 0} true;
  /* %409 = add nsw i32 %394, %394, !dbg !519, !verifier.code !62 */
  $i339 := $add.i32($i327, $i327);
  /* call void @llvm.dbg.value(metadata i32 %409, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i339);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1297, 7} true;
  assume {:verifier.code 0} true;
  /* %410 = sext i32 %409 to i64, !dbg !520, !verifier.code !62 */
  $i340 := $sext.i32.i64($i339);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1297, 9} true;
  assume {:verifier.code 0} true;
  /* %411 = srem i64 %410, 2147483648, !dbg !521, !verifier.code !62 */
  $i341 := $srem.i64($i340, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1297, 7} true;
  assume {:verifier.code 0} true;
  /* %412 = trunc i64 %411 to i32, !dbg !520, !verifier.code !62 */
  $i342 := $trunc.i64.i32($i341);
  /* call void @llvm.dbg.value(metadata i32 %412, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1298, 5} true;
  assume {:verifier.code 0} true;
  /* %413 = add nsw i32 %398, %398, !dbg !522, !verifier.code !62 */
  $i343 := $add.i32($i331, $i331);
  /* call void @llvm.dbg.value(metadata i32 %413, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i343);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1299, 7} true;
  assume {:verifier.code 0} true;
  /* %414 = sext i32 %413 to i64, !dbg !523, !verifier.code !62 */
  $i344 := $sext.i32.i64($i343);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1299, 9} true;
  assume {:verifier.code 0} true;
  /* %415 = srem i64 %414, 2147483648, !dbg !524, !verifier.code !62 */
  $i345 := $srem.i64($i344, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1299, 7} true;
  assume {:verifier.code 0} true;
  /* %416 = trunc i64 %415 to i32, !dbg !523, !verifier.code !62 */
  $i346 := $trunc.i64.i32($i345);
  /* call void @llvm.dbg.value(metadata i32 %416, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1301, 5} true;
  assume {:verifier.code 0} true;
  /* %417 = add nsw i32 %.45, %.45, !dbg !525, !verifier.code !62 */
  $i347 := $add.i32($i335, $i335);
  /* call void @llvm.dbg.value(metadata i32 %417, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i347);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1302, 9} true;
  assume {:verifier.code 0} true;
  /* %418 = icmp slt i32 %412, 0, !dbg !526, !verifier.code !62 */
  $i348 := $slt.i32($i342, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1302, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %418, label %419, label %421, !dbg !528, !verifier.code !62 */
  assume {:branchcond $i348} true;
  goto $bb139, $bb140;
$bb136:
  assume ($i336 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1294, 7} true;
  assume {:verifier.code 0} true;
  /* %406 = add nsw i32 %399, 1, !dbg !515, !verifier.code !62 */
  $i338 := $add.i32($i332, 1);
  /* call void @llvm.dbg.value(metadata i32 %406, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1295, 3} true;
  assume {:verifier.code 0} true;
  /* br label %407, !dbg !517, !verifier.code !62 */
  $i337 := $i338;
  goto $bb138;
$bb137:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1293, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i336 == 1));
  goto $bb138;
$bb138:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.44 = phi i32 [ %406, %405 ], [ %399, %403 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.44, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %408, !verifier.code !62 */
  $i335 := $i337;
  goto $bb135;
$bb139:
  assume ($i348 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1303, 7} true;
  assume {:verifier.code 0} true;
  /* %420 = add nsw i32 %417, 1, !dbg !529, !verifier.code !62 */
  $i349 := $add.i32($i347, 1);
  /* call void @llvm.dbg.value(metadata i32 %420, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1304, 3} true;
  assume {:verifier.code 0} true;
  /* br label %426, !dbg !531, !verifier.code !62 */
  $i350 := $i349;
  goto $bb141;
$bb140:
  assume !(($i348 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1304, 16} true;
  assume {:verifier.code 0} true;
  /* %422 = icmp slt i32 %416, 0, !dbg !532, !verifier.code !62 */
  $i351 := $slt.i32($i346, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1304, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %422, label %423, label %425, !dbg !534, !verifier.code !62 */
  $i352 := $i347;
  assume {:branchcond $i351} true;
  goto $bb142, $bb143;
$bb141:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.47 = phi i32 [ %420, %419 ], [ %.46, %425 ], !dbg !538, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.47, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1307, 5} true;
  assume {:verifier.code 0} true;
  /* %427 = add nsw i32 %412, %412, !dbg !539, !verifier.code !62 */
  $i354 := $add.i32($i342, $i342);
  /* call void @llvm.dbg.value(metadata i32 %427, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i354);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1308, 7} true;
  assume {:verifier.code 0} true;
  /* %428 = sext i32 %427 to i64, !dbg !540, !verifier.code !62 */
  $i355 := $sext.i32.i64($i354);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1308, 9} true;
  assume {:verifier.code 0} true;
  /* %429 = srem i64 %428, 2147483648, !dbg !541, !verifier.code !62 */
  $i356 := $srem.i64($i355, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1308, 7} true;
  assume {:verifier.code 0} true;
  /* %430 = trunc i64 %429 to i32, !dbg !540, !verifier.code !62 */
  $i357 := $trunc.i64.i32($i356);
  /* call void @llvm.dbg.value(metadata i32 %430, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i357);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1309, 5} true;
  assume {:verifier.code 0} true;
  /* %431 = add nsw i32 %416, %416, !dbg !542, !verifier.code !62 */
  $i358 := $add.i32($i346, $i346);
  /* call void @llvm.dbg.value(metadata i32 %431, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i358);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1310, 7} true;
  assume {:verifier.code 0} true;
  /* %432 = sext i32 %431 to i64, !dbg !543, !verifier.code !62 */
  $i359 := $sext.i32.i64($i358);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1310, 9} true;
  assume {:verifier.code 0} true;
  /* %433 = srem i64 %432, 2147483648, !dbg !544, !verifier.code !62 */
  $i360 := $srem.i64($i359, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1310, 7} true;
  assume {:verifier.code 0} true;
  /* %434 = trunc i64 %433 to i32, !dbg !543, !verifier.code !62 */
  $i361 := $trunc.i64.i32($i360);
  /* call void @llvm.dbg.value(metadata i32 %434, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i361);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1312, 5} true;
  assume {:verifier.code 0} true;
  /* %435 = add nsw i32 %.47, %.47, !dbg !545, !verifier.code !62 */
  $i362 := $add.i32($i350, $i350);
  /* call void @llvm.dbg.value(metadata i32 %435, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i362);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1313, 9} true;
  assume {:verifier.code 0} true;
  /* %436 = icmp slt i32 %430, 0, !dbg !546, !verifier.code !62 */
  $i363 := $slt.i32($i357, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1313, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %436, label %437, label %439, !dbg !548, !verifier.code !62 */
  assume {:branchcond $i363} true;
  goto $bb145, $bb146;
$bb142:
  assume ($i351 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1305, 7} true;
  assume {:verifier.code 0} true;
  /* %424 = add nsw i32 %417, 1, !dbg !535, !verifier.code !62 */
  $i353 := $add.i32($i347, 1);
  /* call void @llvm.dbg.value(metadata i32 %424, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i353);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1306, 3} true;
  assume {:verifier.code 0} true;
  /* br label %425, !dbg !537, !verifier.code !62 */
  $i352 := $i353;
  goto $bb144;
$bb143:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1304, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i351 == 1));
  goto $bb144;
$bb144:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.46 = phi i32 [ %424, %423 ], [ %417, %421 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.46, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %426, !verifier.code !62 */
  $i350 := $i352;
  goto $bb141;
$bb145:
  assume ($i363 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1314, 7} true;
  assume {:verifier.code 0} true;
  /* %438 = add nsw i32 %435, 1, !dbg !549, !verifier.code !62 */
  $i364 := $add.i32($i362, 1);
  /* call void @llvm.dbg.value(metadata i32 %438, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i364);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1315, 3} true;
  assume {:verifier.code 0} true;
  /* br label %444, !dbg !551, !verifier.code !62 */
  $i365 := $i364;
  goto $bb147;
$bb146:
  assume !(($i363 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1315, 16} true;
  assume {:verifier.code 0} true;
  /* %440 = icmp slt i32 %434, 0, !dbg !552, !verifier.code !62 */
  $i366 := $slt.i32($i361, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1315, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %440, label %441, label %443, !dbg !554, !verifier.code !62 */
  $i367 := $i362;
  assume {:branchcond $i366} true;
  goto $bb148, $bb149;
$bb147:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.49 = phi i32 [ %438, %437 ], [ %.48, %443 ], !dbg !558, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.49, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1318, 5} true;
  assume {:verifier.code 0} true;
  /* %445 = add nsw i32 %430, %430, !dbg !559, !verifier.code !62 */
  $i369 := $add.i32($i357, $i357);
  /* call void @llvm.dbg.value(metadata i32 %445, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i369);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1319, 7} true;
  assume {:verifier.code 0} true;
  /* %446 = sext i32 %445 to i64, !dbg !560, !verifier.code !62 */
  $i370 := $sext.i32.i64($i369);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1319, 9} true;
  assume {:verifier.code 0} true;
  /* %447 = srem i64 %446, 2147483648, !dbg !561, !verifier.code !62 */
  $i371 := $srem.i64($i370, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1319, 7} true;
  assume {:verifier.code 0} true;
  /* %448 = trunc i64 %447 to i32, !dbg !560, !verifier.code !62 */
  $i372 := $trunc.i64.i32($i371);
  /* call void @llvm.dbg.value(metadata i32 %448, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i372);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1320, 5} true;
  assume {:verifier.code 0} true;
  /* %449 = add nsw i32 %434, %434, !dbg !562, !verifier.code !62 */
  $i373 := $add.i32($i361, $i361);
  /* call void @llvm.dbg.value(metadata i32 %449, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i373);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1321, 7} true;
  assume {:verifier.code 0} true;
  /* %450 = sext i32 %449 to i64, !dbg !563, !verifier.code !62 */
  $i374 := $sext.i32.i64($i373);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1321, 9} true;
  assume {:verifier.code 0} true;
  /* %451 = srem i64 %450, 2147483648, !dbg !564, !verifier.code !62 */
  $i375 := $srem.i64($i374, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1321, 7} true;
  assume {:verifier.code 0} true;
  /* %452 = trunc i64 %451 to i32, !dbg !563, !verifier.code !62 */
  $i376 := $trunc.i64.i32($i375);
  /* call void @llvm.dbg.value(metadata i32 %452, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i376);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1323, 5} true;
  assume {:verifier.code 0} true;
  /* %453 = add nsw i32 %.49, %.49, !dbg !565, !verifier.code !62 */
  $i377 := $add.i32($i365, $i365);
  /* call void @llvm.dbg.value(metadata i32 %453, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i377);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1324, 9} true;
  assume {:verifier.code 0} true;
  /* %454 = icmp slt i32 %448, 0, !dbg !566, !verifier.code !62 */
  $i378 := $slt.i32($i372, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1324, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %454, label %455, label %457, !dbg !568, !verifier.code !62 */
  assume {:branchcond $i378} true;
  goto $bb151, $bb152;
$bb148:
  assume ($i366 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1316, 7} true;
  assume {:verifier.code 0} true;
  /* %442 = add nsw i32 %435, 1, !dbg !555, !verifier.code !62 */
  $i368 := $add.i32($i362, 1);
  /* call void @llvm.dbg.value(metadata i32 %442, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i368);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1317, 3} true;
  assume {:verifier.code 0} true;
  /* br label %443, !dbg !557, !verifier.code !62 */
  $i367 := $i368;
  goto $bb150;
$bb149:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1315, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i366 == 1));
  goto $bb150;
$bb150:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.48 = phi i32 [ %442, %441 ], [ %435, %439 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.48, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %444, !verifier.code !62 */
  $i365 := $i367;
  goto $bb147;
$bb151:
  assume ($i378 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1325, 7} true;
  assume {:verifier.code 0} true;
  /* %456 = add nsw i32 %453, 1, !dbg !569, !verifier.code !62 */
  $i379 := $add.i32($i377, 1);
  /* call void @llvm.dbg.value(metadata i32 %456, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i379);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1326, 3} true;
  assume {:verifier.code 0} true;
  /* br label %462, !dbg !571, !verifier.code !62 */
  $i380 := $i379;
  goto $bb153;
$bb152:
  assume !(($i378 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1326, 16} true;
  assume {:verifier.code 0} true;
  /* %458 = icmp slt i32 %452, 0, !dbg !572, !verifier.code !62 */
  $i381 := $slt.i32($i376, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1326, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %458, label %459, label %461, !dbg !574, !verifier.code !62 */
  $i382 := $i377;
  assume {:branchcond $i381} true;
  goto $bb154, $bb155;
$bb153:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.51 = phi i32 [ %456, %455 ], [ %.50, %461 ], !dbg !578, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.51, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1329, 5} true;
  assume {:verifier.code 0} true;
  /* %463 = add nsw i32 %448, %448, !dbg !579, !verifier.code !62 */
  $i384 := $add.i32($i372, $i372);
  /* call void @llvm.dbg.value(metadata i32 %463, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i384);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1330, 7} true;
  assume {:verifier.code 0} true;
  /* %464 = sext i32 %463 to i64, !dbg !580, !verifier.code !62 */
  $i385 := $sext.i32.i64($i384);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1330, 9} true;
  assume {:verifier.code 0} true;
  /* %465 = srem i64 %464, 2147483648, !dbg !581, !verifier.code !62 */
  $i386 := $srem.i64($i385, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1330, 7} true;
  assume {:verifier.code 0} true;
  /* %466 = trunc i64 %465 to i32, !dbg !580, !verifier.code !62 */
  $i387 := $trunc.i64.i32($i386);
  /* call void @llvm.dbg.value(metadata i32 %466, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i387);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1331, 5} true;
  assume {:verifier.code 0} true;
  /* %467 = add nsw i32 %452, %452, !dbg !582, !verifier.code !62 */
  $i388 := $add.i32($i376, $i376);
  /* call void @llvm.dbg.value(metadata i32 %467, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i388);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1332, 7} true;
  assume {:verifier.code 0} true;
  /* %468 = sext i32 %467 to i64, !dbg !583, !verifier.code !62 */
  $i389 := $sext.i32.i64($i388);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1332, 9} true;
  assume {:verifier.code 0} true;
  /* %469 = srem i64 %468, 2147483648, !dbg !584, !verifier.code !62 */
  $i390 := $srem.i64($i389, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1332, 7} true;
  assume {:verifier.code 0} true;
  /* %470 = trunc i64 %469 to i32, !dbg !583, !verifier.code !62 */
  $i391 := $trunc.i64.i32($i390);
  /* call void @llvm.dbg.value(metadata i32 %470, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i391);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1334, 5} true;
  assume {:verifier.code 0} true;
  /* %471 = add nsw i32 %.51, %.51, !dbg !585, !verifier.code !62 */
  $i392 := $add.i32($i380, $i380);
  /* call void @llvm.dbg.value(metadata i32 %471, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i392);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1335, 9} true;
  assume {:verifier.code 0} true;
  /* %472 = icmp slt i32 %466, 0, !dbg !586, !verifier.code !62 */
  $i393 := $slt.i32($i387, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1335, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %472, label %473, label %475, !dbg !588, !verifier.code !62 */
  assume {:branchcond $i393} true;
  goto $bb157, $bb158;
$bb154:
  assume ($i381 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1327, 7} true;
  assume {:verifier.code 0} true;
  /* %460 = add nsw i32 %453, 1, !dbg !575, !verifier.code !62 */
  $i383 := $add.i32($i377, 1);
  /* call void @llvm.dbg.value(metadata i32 %460, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i383);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1328, 3} true;
  assume {:verifier.code 0} true;
  /* br label %461, !dbg !577, !verifier.code !62 */
  $i382 := $i383;
  goto $bb156;
$bb155:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1326, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i381 == 1));
  goto $bb156;
$bb156:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.50 = phi i32 [ %460, %459 ], [ %453, %457 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.50, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %462, !verifier.code !62 */
  $i380 := $i382;
  goto $bb153;
$bb157:
  assume ($i393 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1336, 7} true;
  assume {:verifier.code 0} true;
  /* %474 = add nsw i32 %471, 1, !dbg !589, !verifier.code !62 */
  $i394 := $add.i32($i392, 1);
  /* call void @llvm.dbg.value(metadata i32 %474, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i394);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1337, 3} true;
  assume {:verifier.code 0} true;
  /* br label %480, !dbg !591, !verifier.code !62 */
  $i395 := $i394;
  goto $bb159;
$bb158:
  assume !(($i393 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1337, 16} true;
  assume {:verifier.code 0} true;
  /* %476 = icmp slt i32 %470, 0, !dbg !592, !verifier.code !62 */
  $i396 := $slt.i32($i391, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1337, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %476, label %477, label %479, !dbg !594, !verifier.code !62 */
  $i397 := $i392;
  assume {:branchcond $i396} true;
  goto $bb160, $bb161;
$bb159:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.53 = phi i32 [ %474, %473 ], [ %.52, %479 ], !dbg !598, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.53, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1340, 5} true;
  assume {:verifier.code 0} true;
  /* %481 = add nsw i32 %466, %466, !dbg !599, !verifier.code !62 */
  $i399 := $add.i32($i387, $i387);
  /* call void @llvm.dbg.value(metadata i32 %481, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i399);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1341, 7} true;
  assume {:verifier.code 0} true;
  /* %482 = sext i32 %481 to i64, !dbg !600, !verifier.code !62 */
  $i400 := $sext.i32.i64($i399);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1341, 9} true;
  assume {:verifier.code 0} true;
  /* %483 = srem i64 %482, 2147483648, !dbg !601, !verifier.code !62 */
  $i401 := $srem.i64($i400, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1341, 7} true;
  assume {:verifier.code 0} true;
  /* %484 = trunc i64 %483 to i32, !dbg !600, !verifier.code !62 */
  $i402 := $trunc.i64.i32($i401);
  /* call void @llvm.dbg.value(metadata i32 %484, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i402);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1342, 5} true;
  assume {:verifier.code 0} true;
  /* %485 = add nsw i32 %470, %470, !dbg !602, !verifier.code !62 */
  $i403 := $add.i32($i391, $i391);
  /* call void @llvm.dbg.value(metadata i32 %485, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1343, 7} true;
  assume {:verifier.code 0} true;
  /* %486 = sext i32 %485 to i64, !dbg !603, !verifier.code !62 */
  $i404 := $sext.i32.i64($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1343, 9} true;
  assume {:verifier.code 0} true;
  /* %487 = srem i64 %486, 2147483648, !dbg !604, !verifier.code !62 */
  $i405 := $srem.i64($i404, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1343, 7} true;
  assume {:verifier.code 0} true;
  /* %488 = trunc i64 %487 to i32, !dbg !603, !verifier.code !62 */
  $i406 := $trunc.i64.i32($i405);
  /* call void @llvm.dbg.value(metadata i32 %488, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i406);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1345, 5} true;
  assume {:verifier.code 0} true;
  /* %489 = add nsw i32 %.53, %.53, !dbg !605, !verifier.code !62 */
  $i407 := $add.i32($i395, $i395);
  /* call void @llvm.dbg.value(metadata i32 %489, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1346, 9} true;
  assume {:verifier.code 0} true;
  /* %490 = icmp slt i32 %484, 0, !dbg !606, !verifier.code !62 */
  $i408 := $slt.i32($i402, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1346, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %490, label %491, label %493, !dbg !608, !verifier.code !62 */
  assume {:branchcond $i408} true;
  goto $bb163, $bb164;
$bb160:
  assume ($i396 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1338, 7} true;
  assume {:verifier.code 0} true;
  /* %478 = add nsw i32 %471, 1, !dbg !595, !verifier.code !62 */
  $i398 := $add.i32($i392, 1);
  /* call void @llvm.dbg.value(metadata i32 %478, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i398);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1339, 3} true;
  assume {:verifier.code 0} true;
  /* br label %479, !dbg !597, !verifier.code !62 */
  $i397 := $i398;
  goto $bb162;
$bb161:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1337, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i396 == 1));
  goto $bb162;
$bb162:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.52 = phi i32 [ %478, %477 ], [ %471, %475 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.52, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %480, !verifier.code !62 */
  $i395 := $i397;
  goto $bb159;
$bb163:
  assume ($i408 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1347, 7} true;
  assume {:verifier.code 0} true;
  /* %492 = add nsw i32 %489, 1, !dbg !609, !verifier.code !62 */
  $i409 := $add.i32($i407, 1);
  /* call void @llvm.dbg.value(metadata i32 %492, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i409);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1348, 3} true;
  assume {:verifier.code 0} true;
  /* br label %498, !dbg !611, !verifier.code !62 */
  $i410 := $i409;
  goto $bb165;
$bb164:
  assume !(($i408 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1348, 16} true;
  assume {:verifier.code 0} true;
  /* %494 = icmp slt i32 %488, 0, !dbg !612, !verifier.code !62 */
  $i411 := $slt.i32($i406, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1348, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %494, label %495, label %497, !dbg !614, !verifier.code !62 */
  $i412 := $i407;
  assume {:branchcond $i411} true;
  goto $bb166, $bb167;
$bb165:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.55 = phi i32 [ %492, %491 ], [ %.54, %497 ], !dbg !618, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.55, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1351, 5} true;
  assume {:verifier.code 0} true;
  /* %499 = add nsw i32 %484, %484, !dbg !619, !verifier.code !62 */
  $i414 := $add.i32($i402, $i402);
  /* call void @llvm.dbg.value(metadata i32 %499, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i414);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1352, 7} true;
  assume {:verifier.code 0} true;
  /* %500 = sext i32 %499 to i64, !dbg !620, !verifier.code !62 */
  $i415 := $sext.i32.i64($i414);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1352, 9} true;
  assume {:verifier.code 0} true;
  /* %501 = srem i64 %500, 2147483648, !dbg !621, !verifier.code !62 */
  $i416 := $srem.i64($i415, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1352, 7} true;
  assume {:verifier.code 0} true;
  /* %502 = trunc i64 %501 to i32, !dbg !620, !verifier.code !62 */
  $i417 := $trunc.i64.i32($i416);
  /* call void @llvm.dbg.value(metadata i32 %502, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i417);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1353, 5} true;
  assume {:verifier.code 0} true;
  /* %503 = add nsw i32 %488, %488, !dbg !622, !verifier.code !62 */
  $i418 := $add.i32($i406, $i406);
  /* call void @llvm.dbg.value(metadata i32 %503, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i418);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1354, 7} true;
  assume {:verifier.code 0} true;
  /* %504 = sext i32 %503 to i64, !dbg !623, !verifier.code !62 */
  $i419 := $sext.i32.i64($i418);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1354, 9} true;
  assume {:verifier.code 0} true;
  /* %505 = srem i64 %504, 2147483648, !dbg !624, !verifier.code !62 */
  $i420 := $srem.i64($i419, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1354, 7} true;
  assume {:verifier.code 0} true;
  /* %506 = trunc i64 %505 to i32, !dbg !623, !verifier.code !62 */
  $i421 := $trunc.i64.i32($i420);
  /* call void @llvm.dbg.value(metadata i32 %506, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i421);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1356, 5} true;
  assume {:verifier.code 0} true;
  /* %507 = add nsw i32 %.55, %.55, !dbg !625, !verifier.code !62 */
  $i422 := $add.i32($i410, $i410);
  /* call void @llvm.dbg.value(metadata i32 %507, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i422);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1357, 9} true;
  assume {:verifier.code 0} true;
  /* %508 = icmp slt i32 %502, 0, !dbg !626, !verifier.code !62 */
  $i423 := $slt.i32($i417, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1357, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %508, label %509, label %511, !dbg !628, !verifier.code !62 */
  assume {:branchcond $i423} true;
  goto $bb169, $bb170;
$bb166:
  assume ($i411 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1349, 7} true;
  assume {:verifier.code 0} true;
  /* %496 = add nsw i32 %489, 1, !dbg !615, !verifier.code !62 */
  $i413 := $add.i32($i407, 1);
  /* call void @llvm.dbg.value(metadata i32 %496, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i413);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1350, 3} true;
  assume {:verifier.code 0} true;
  /* br label %497, !dbg !617, !verifier.code !62 */
  $i412 := $i413;
  goto $bb168;
$bb167:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1348, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i411 == 1));
  goto $bb168;
$bb168:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.54 = phi i32 [ %496, %495 ], [ %489, %493 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.54, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %498, !verifier.code !62 */
  $i410 := $i412;
  goto $bb165;
$bb169:
  assume ($i423 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1358, 7} true;
  assume {:verifier.code 0} true;
  /* %510 = add nsw i32 %507, 1, !dbg !629, !verifier.code !62 */
  $i424 := $add.i32($i422, 1);
  /* call void @llvm.dbg.value(metadata i32 %510, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i424);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1359, 3} true;
  assume {:verifier.code 0} true;
  /* br label %516, !dbg !631, !verifier.code !62 */
  $i425 := $i424;
  goto $bb171;
$bb170:
  assume !(($i423 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1359, 16} true;
  assume {:verifier.code 0} true;
  /* %512 = icmp slt i32 %506, 0, !dbg !632, !verifier.code !62 */
  $i426 := $slt.i32($i421, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1359, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %512, label %513, label %515, !dbg !634, !verifier.code !62 */
  $i427 := $i422;
  assume {:branchcond $i426} true;
  goto $bb172, $bb173;
$bb171:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.57 = phi i32 [ %510, %509 ], [ %.56, %515 ], !dbg !638, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.57, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1362, 5} true;
  assume {:verifier.code 0} true;
  /* %517 = add nsw i32 %502, %502, !dbg !639, !verifier.code !62 */
  $i429 := $add.i32($i417, $i417);
  /* call void @llvm.dbg.value(metadata i32 %517, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i429);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1363, 7} true;
  assume {:verifier.code 0} true;
  /* %518 = sext i32 %517 to i64, !dbg !640, !verifier.code !62 */
  $i430 := $sext.i32.i64($i429);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1363, 9} true;
  assume {:verifier.code 0} true;
  /* %519 = srem i64 %518, 2147483648, !dbg !641, !verifier.code !62 */
  $i431 := $srem.i64($i430, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1363, 7} true;
  assume {:verifier.code 0} true;
  /* %520 = trunc i64 %519 to i32, !dbg !640, !verifier.code !62 */
  $i432 := $trunc.i64.i32($i431);
  /* call void @llvm.dbg.value(metadata i32 %520, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1364, 5} true;
  assume {:verifier.code 0} true;
  /* %521 = add nsw i32 %506, %506, !dbg !642, !verifier.code !62 */
  $i433 := $add.i32($i421, $i421);
  /* call void @llvm.dbg.value(metadata i32 %521, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i433);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1365, 7} true;
  assume {:verifier.code 0} true;
  /* %522 = sext i32 %521 to i64, !dbg !643, !verifier.code !62 */
  $i434 := $sext.i32.i64($i433);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1365, 9} true;
  assume {:verifier.code 0} true;
  /* %523 = srem i64 %522, 2147483648, !dbg !644, !verifier.code !62 */
  $i435 := $srem.i64($i434, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1365, 7} true;
  assume {:verifier.code 0} true;
  /* %524 = trunc i64 %523 to i32, !dbg !643, !verifier.code !62 */
  $i436 := $trunc.i64.i32($i435);
  /* call void @llvm.dbg.value(metadata i32 %524, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1367, 5} true;
  assume {:verifier.code 0} true;
  /* %525 = add nsw i32 %.57, %.57, !dbg !645, !verifier.code !62 */
  $i437 := $add.i32($i425, $i425);
  /* call void @llvm.dbg.value(metadata i32 %525, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i437);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1368, 9} true;
  assume {:verifier.code 0} true;
  /* %526 = icmp slt i32 %520, 0, !dbg !646, !verifier.code !62 */
  $i438 := $slt.i32($i432, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1368, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %526, label %527, label %529, !dbg !648, !verifier.code !62 */
  assume {:branchcond $i438} true;
  goto $bb175, $bb176;
$bb172:
  assume ($i426 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1360, 7} true;
  assume {:verifier.code 0} true;
  /* %514 = add nsw i32 %507, 1, !dbg !635, !verifier.code !62 */
  $i428 := $add.i32($i422, 1);
  /* call void @llvm.dbg.value(metadata i32 %514, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i428);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1361, 3} true;
  assume {:verifier.code 0} true;
  /* br label %515, !dbg !637, !verifier.code !62 */
  $i427 := $i428;
  goto $bb174;
$bb173:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1359, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i426 == 1));
  goto $bb174;
$bb174:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.56 = phi i32 [ %514, %513 ], [ %507, %511 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.56, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %516, !verifier.code !62 */
  $i425 := $i427;
  goto $bb171;
$bb175:
  assume ($i438 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1369, 7} true;
  assume {:verifier.code 0} true;
  /* %528 = add nsw i32 %525, 1, !dbg !649, !verifier.code !62 */
  $i439 := $add.i32($i437, 1);
  /* call void @llvm.dbg.value(metadata i32 %528, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i439);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1370, 3} true;
  assume {:verifier.code 0} true;
  /* br label %534, !dbg !651, !verifier.code !62 */
  $i440 := $i439;
  goto $bb177;
$bb176:
  assume !(($i438 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1370, 16} true;
  assume {:verifier.code 0} true;
  /* %530 = icmp slt i32 %524, 0, !dbg !652, !verifier.code !62 */
  $i441 := $slt.i32($i436, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1370, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %530, label %531, label %533, !dbg !654, !verifier.code !62 */
  $i442 := $i437;
  assume {:branchcond $i441} true;
  goto $bb178, $bb179;
$bb177:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.59 = phi i32 [ %528, %527 ], [ %.58, %533 ], !dbg !658, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.59, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1373, 5} true;
  assume {:verifier.code 0} true;
  /* %535 = add nsw i32 %520, %520, !dbg !659, !verifier.code !62 */
  $i444 := $add.i32($i432, $i432);
  /* call void @llvm.dbg.value(metadata i32 %535, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i444);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1374, 7} true;
  assume {:verifier.code 0} true;
  /* %536 = sext i32 %535 to i64, !dbg !660, !verifier.code !62 */
  $i445 := $sext.i32.i64($i444);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1374, 9} true;
  assume {:verifier.code 0} true;
  /* %537 = srem i64 %536, 2147483648, !dbg !661, !verifier.code !62 */
  $i446 := $srem.i64($i445, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1374, 7} true;
  assume {:verifier.code 0} true;
  /* %538 = trunc i64 %537 to i32, !dbg !660, !verifier.code !62 */
  $i447 := $trunc.i64.i32($i446);
  /* call void @llvm.dbg.value(metadata i32 %538, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i447);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1375, 5} true;
  assume {:verifier.code 0} true;
  /* %539 = add nsw i32 %524, %524, !dbg !662, !verifier.code !62 */
  $i448 := $add.i32($i436, $i436);
  /* call void @llvm.dbg.value(metadata i32 %539, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i448);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1376, 7} true;
  assume {:verifier.code 0} true;
  /* %540 = sext i32 %539 to i64, !dbg !663, !verifier.code !62 */
  $i449 := $sext.i32.i64($i448);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1376, 9} true;
  assume {:verifier.code 0} true;
  /* %541 = srem i64 %540, 2147483648, !dbg !664, !verifier.code !62 */
  $i450 := $srem.i64($i449, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1376, 7} true;
  assume {:verifier.code 0} true;
  /* %542 = trunc i64 %541 to i32, !dbg !663, !verifier.code !62 */
  $i451 := $trunc.i64.i32($i450);
  /* call void @llvm.dbg.value(metadata i32 %542, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i451);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1378, 5} true;
  assume {:verifier.code 0} true;
  /* %543 = add nsw i32 %.59, %.59, !dbg !665, !verifier.code !62 */
  $i452 := $add.i32($i440, $i440);
  /* call void @llvm.dbg.value(metadata i32 %543, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i452);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1379, 9} true;
  assume {:verifier.code 0} true;
  /* %544 = icmp slt i32 %538, 0, !dbg !666, !verifier.code !62 */
  $i453 := $slt.i32($i447, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1379, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %544, label %545, label %547, !dbg !668, !verifier.code !62 */
  assume {:branchcond $i453} true;
  goto $bb181, $bb182;
$bb178:
  assume ($i441 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1371, 7} true;
  assume {:verifier.code 0} true;
  /* %532 = add nsw i32 %525, 1, !dbg !655, !verifier.code !62 */
  $i443 := $add.i32($i437, 1);
  /* call void @llvm.dbg.value(metadata i32 %532, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i443);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1372, 3} true;
  assume {:verifier.code 0} true;
  /* br label %533, !dbg !657, !verifier.code !62 */
  $i442 := $i443;
  goto $bb180;
$bb179:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1370, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i441 == 1));
  goto $bb180;
$bb180:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.58 = phi i32 [ %532, %531 ], [ %525, %529 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.58, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %534, !verifier.code !62 */
  $i440 := $i442;
  goto $bb177;
$bb181:
  assume ($i453 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1380, 7} true;
  assume {:verifier.code 0} true;
  /* %546 = add nsw i32 %543, 1, !dbg !669, !verifier.code !62 */
  $i454 := $add.i32($i452, 1);
  /* call void @llvm.dbg.value(metadata i32 %546, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i454);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1381, 3} true;
  assume {:verifier.code 0} true;
  /* br label %552, !dbg !671, !verifier.code !62 */
  $i455 := $i454;
  goto $bb183;
$bb182:
  assume !(($i453 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1381, 16} true;
  assume {:verifier.code 0} true;
  /* %548 = icmp slt i32 %542, 0, !dbg !672, !verifier.code !62 */
  $i456 := $slt.i32($i451, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1381, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %548, label %549, label %551, !dbg !674, !verifier.code !62 */
  $i457 := $i452;
  assume {:branchcond $i456} true;
  goto $bb184, $bb185;
$bb183:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.61 = phi i32 [ %546, %545 ], [ %.60, %551 ], !dbg !678, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.61, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1384, 5} true;
  assume {:verifier.code 0} true;
  /* %553 = add nsw i32 %538, %538, !dbg !679, !verifier.code !62 */
  $i459 := $add.i32($i447, $i447);
  /* call void @llvm.dbg.value(metadata i32 %553, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i459);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1385, 7} true;
  assume {:verifier.code 0} true;
  /* %554 = sext i32 %553 to i64, !dbg !680, !verifier.code !62 */
  $i460 := $sext.i32.i64($i459);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1385, 9} true;
  assume {:verifier.code 0} true;
  /* %555 = srem i64 %554, 2147483648, !dbg !681, !verifier.code !62 */
  $i461 := $srem.i64($i460, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1385, 7} true;
  assume {:verifier.code 0} true;
  /* %556 = trunc i64 %555 to i32, !dbg !680, !verifier.code !62 */
  $i462 := $trunc.i64.i32($i461);
  /* call void @llvm.dbg.value(metadata i32 %556, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "a"} boogie_si_record_i32($i462);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1386, 5} true;
  assume {:verifier.code 0} true;
  /* %557 = add nsw i32 %542, %542, !dbg !682, !verifier.code !62 */
  $i463 := $add.i32($i451, $i451);
  /* call void @llvm.dbg.value(metadata i32 %557, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i463);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1387, 7} true;
  assume {:verifier.code 0} true;
  /* %558 = sext i32 %557 to i64, !dbg !683, !verifier.code !62 */
  $i464 := $sext.i32.i64($i463);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1387, 9} true;
  assume {:verifier.code 0} true;
  /* %559 = srem i64 %558, 2147483648, !dbg !684, !verifier.code !62 */
  $i465 := $srem.i64($i464, 2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1387, 7} true;
  assume {:verifier.code 0} true;
  /* %560 = trunc i64 %559 to i32, !dbg !683, !verifier.code !62 */
  $i466 := $trunc.i64.i32($i465);
  /* call void @llvm.dbg.value(metadata i32 %560, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "b"} boogie_si_record_i32($i466);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1389, 5} true;
  assume {:verifier.code 0} true;
  /* %561 = add nsw i32 %.61, %.61, !dbg !685, !verifier.code !62 */
  $i467 := $add.i32($i455, $i455);
  /* call void @llvm.dbg.value(metadata i32 %561, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i467);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1390, 9} true;
  assume {:verifier.code 0} true;
  /* %562 = icmp slt i32 %556, 0, !dbg !686, !verifier.code !62 */
  $i468 := $slt.i32($i462, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1390, 7} true;
  assume {:verifier.code 0} true;
  /* br i1 %562, label %563, label %565, !dbg !688, !verifier.code !62 */
  assume {:branchcond $i468} true;
  goto $bb187, $bb188;
$bb184:
  assume ($i456 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1382, 7} true;
  assume {:verifier.code 0} true;
  /* %550 = add nsw i32 %543, 1, !dbg !675, !verifier.code !62 */
  $i458 := $add.i32($i452, 1);
  /* call void @llvm.dbg.value(metadata i32 %550, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i458);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1383, 3} true;
  assume {:verifier.code 0} true;
  /* br label %551, !dbg !677, !verifier.code !62 */
  $i457 := $i458;
  goto $bb186;
$bb185:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1381, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i456 == 1));
  goto $bb186;
$bb186:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.60 = phi i32 [ %550, %549 ], [ %543, %547 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.60, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %552, !verifier.code !62 */
  $i455 := $i457;
  goto $bb183;
$bb187:
  assume ($i468 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1391, 7} true;
  assume {:verifier.code 0} true;
  /* %564 = add nsw i32 %561, 1, !dbg !689, !verifier.code !62 */
  $i469 := $add.i32($i467, 1);
  /* call void @llvm.dbg.value(metadata i32 %564, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i469);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 3} true;
  assume {:verifier.code 0} true;
  /* br label %570, !dbg !691, !verifier.code !62 */
  $i470 := $i469;
  goto $bb189;
$bb188:
  assume !(($i468 == 1));
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 16} true;
  assume {:verifier.code 0} true;
  /* %566 = icmp slt i32 %560, 0, !dbg !692, !verifier.code !62 */
  $i471 := $slt.i32($i466, 0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 14} true;
  assume {:verifier.code 0} true;
  /* br i1 %566, label %567, label %569, !dbg !694, !verifier.code !62 */
  $i472 := $i467;
  assume {:branchcond $i471} true;
  goto $bb190, $bb191;
$bb189:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.63 = phi i32 [ %564, %563 ], [ %.62, %569 ], !dbg !698, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.63, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 undef, metadata !11463, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 undef, metadata !11463, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_LLVM_convert, 64, DW_ATE_signed, DW_OP_constu, 2147483648, DW_OP_mod, DW_OP_LLVM_convert, 64, DW_ATE_unsigned, DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !11464, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 undef, metadata !11465, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  /* call void @llvm.dbg.value(metadata i32 undef, metadata !11465, metadata !DIExpression(DW_OP_LLVM_convert, 32, DW_ATE_signed, DW_OP_LLVM_convert, 64, DW_ATE_signed, DW_OP_constu, 2147483648, DW_OP_mod, DW_OP_LLVM_convert, 64, DW_ATE_unsigned, DW_OP_LLVM_convert, 32, DW_ATE_unsigned, DW_OP_stack_value)), !dbg !11464, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1400, 3} true;
  assume {:verifier.code 0} true;
  /* ret i32 %.63, !dbg !699, !verifier.code !62 */
  $r := $i470;
  $exn := false;
  return;
$bb190:
  assume ($i471 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1393, 7} true;
  assume {:verifier.code 0} true;
  /* %568 = add nsw i32 %561, 1, !dbg !695, !verifier.code !62 */
  $i473 := $add.i32($i467, 1);
  /* call void @llvm.dbg.value(metadata i32 %568, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  call {:cexpr "c"} boogie_si_record_i32($i473);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1394, 3} true;
  assume {:verifier.code 0} true;
  /* br label %569, !dbg !697, !verifier.code !62 */
  $i472 := $i473;
  goto $bb192;
$bb191:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 14} true;
  assume {:verifier.code 0} true;
  assume !(($i471 == 1));
  goto $bb192;
$bb192:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  /* %.62 = phi i32 [ %568, %567 ], [ %561, %565 ], !dbg !61, !verifier.code !62 */
  /* call void @llvm.dbg.value(metadata i32 %.62, metadata !11466, metadata !DIExpression()), !dbg !11464, !verifier.code !64 */
  assume {:verifier.code 0} true;
  /* br label %570, !verifier.code !62 */
  $i470 := $i472;
  goto $bb189;
}
const __SMACK_or64: ref;
axiom (__SMACK_or64 == $sub.ref(0, 44376));
procedure {:inline 1} __SMACK_or64($i0: i64, $i1: i64)
  returns ($r: i64)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 63} true;
  assume {:verifier.code 1} true;
  /* call void @llvm.dbg.value(metadata i64 %0, metadata !12103, metadata !DIExpression()), !dbg !12104, !verifier.code !64 */
  call {:cexpr "__SMACK_or64:arg:a"} boogie_si_record_i64($i0);
  /* call void @llvm.dbg.value(metadata i64 %1, metadata !12105, metadata !DIExpression()), !dbg !12104, !verifier.code !64 */
  call {:cexpr "__SMACK_or64:arg:b"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 63} true;
  assume {:verifier.code 1} true;
  /* %3 = trunc i64 %0 to i32, !dbg !64, !verifier.code !65 */
  $i2 := $trunc.i64.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 66} true;
  assume {:verifier.code 1} true;
  /* %4 = trunc i64 %1 to i32, !dbg !66, !verifier.code !65 */
  $i3 := $trunc.i64.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 50} true;
  assume {:verifier.code 1} true;
  /* %5 = call i32 @__SMACK_or32(i32 %3, i32 %4), !dbg !67, !verifier.code !65 */
  call $i4 := __SMACK_or32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_or32"} boogie_si_record_i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 44} true;
  assume {:verifier.code 0} true;
  /* %6 = sext i32 %5 to i64, !dbg !68, !verifier.code !62 */
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 37} true;
  assume {:verifier.code 0} true;
  /* ret i64 %6, !dbg !69, !verifier.code !62 */
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_or16: ref;
axiom (__SMACK_or16 == $sub.ref(0, 45408));
procedure {:inline 1} __SMACK_or16($i0: i16, $i1: i16)
  returns ($r: i16)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 67} true;
  assume {:verifier.code 1} true;
  /* call void @llvm.dbg.value(metadata i16 %0, metadata !12112, metadata !DIExpression()), !dbg !12113, !verifier.code !64 */
  call {:cexpr "__SMACK_or16:arg:a"} boogie_si_record_i16($i0);
  /* call void @llvm.dbg.value(metadata i16 %1, metadata !12114, metadata !DIExpression()), !dbg !12113, !verifier.code !64 */
  call {:cexpr "__SMACK_or16:arg:b"} boogie_si_record_i16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 67} true;
  assume {:verifier.code 1} true;
  /* %3 = sext i16 %0 to i32, !dbg !64, !verifier.code !65 */
  $i2 := $sext.i16.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 70} true;
  assume {:verifier.code 1} true;
  /* %4 = sext i16 %1 to i32, !dbg !66, !verifier.code !65 */
  $i3 := $sext.i16.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 54} true;
  assume {:verifier.code 1} true;
  /* %5 = call i32 @__SMACK_or32(i32 %3, i32 %4), !dbg !67, !verifier.code !65 */
  call $i4 := __SMACK_or32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_or32"} boogie_si_record_i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 47} true;
  assume {:verifier.code 0} true;
  /* %6 = trunc i32 %5 to i16, !dbg !68, !verifier.code !62 */
  $i5 := $trunc.i32.i16($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 40} true;
  assume {:verifier.code 0} true;
  /* ret i16 %6, !dbg !69, !verifier.code !62 */
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_or8: ref;
axiom (__SMACK_or8 == $sub.ref(0, 46440));
procedure {:inline 1} __SMACK_or8($i0: i8, $i1: i8)
  returns ($r: i8)
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 62} true;
  assume {:verifier.code 1} true;
  /* call void @llvm.dbg.value(metadata i8 %0, metadata !12121, metadata !DIExpression()), !dbg !12122, !verifier.code !64 */
  call {:cexpr "__SMACK_or8:arg:a"} boogie_si_record_i8($i0);
  /* call void @llvm.dbg.value(metadata i8 %1, metadata !12123, metadata !DIExpression()), !dbg !12122, !verifier.code !64 */
  call {:cexpr "__SMACK_or8:arg:b"} boogie_si_record_i8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 62} true;
  assume {:verifier.code 1} true;
  /* %3 = sext i8 %0 to i32, !dbg !64, !verifier.code !65 */
  $i2 := $sext.i8.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 65} true;
  assume {:verifier.code 1} true;
  /* %4 = sext i8 %1 to i32, !dbg !66, !verifier.code !65 */
  $i3 := $sext.i8.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 49} true;
  assume {:verifier.code 1} true;
  /* %5 = call i32 @__SMACK_or32(i32 %3, i32 %4), !dbg !67, !verifier.code !65 */
  call $i4 := __SMACK_or32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_or32"} boogie_si_record_i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 43} true;
  assume {:verifier.code 0} true;
  /* %6 = trunc i32 %5 to i8, !dbg !68, !verifier.code !62 */
  $i5 := $trunc.i32.i8($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 36} true;
  assume {:verifier.code 0} true;
  /* ret i8 %6, !dbg !69, !verifier.code !62 */
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0, 47472));
procedure {:inline 1} __SMACK_check_overflow($i0: i32)
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 29} true;
  assume {:verifier.code 1} true;
  /* call void @llvm.dbg.value(metadata i32 %0, metadata !12130, metadata !DIExpression()), !dbg !12131, !verifier.code !64 */
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_i32($i0);
  /* call void @llvm.dbg.value(metadata i32 %0, metadata !9535, metadata !DIExpression()), !dbg !12132, !verifier.code !64 */
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 29} true;
  assume {:verifier.code 1} true;
  /* call void (i8*, ...) @__SMACK_code(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0)) #6, !dbg !67, !verifier.code !68 */
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1409, 3} true;
  assume {:verifier.code 1} true;
  /* call void (i8*, ...) @__SMACK_code(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i32 %0), !dbg !69, !verifier.code !68 */
  assert {:overflow} $i0 == $0;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1410, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !70, !verifier.code !62 */
  $exn := false;
  return;
}
const __SMACK_loop_exit: ref;
axiom (__SMACK_loop_exit == $sub.ref(0, 48504));
procedure {:inline 1} __SMACK_loop_exit()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1412, 32} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1412, 32} true;
  assume {:verifier.code 1} true;
  /* call void (i8*, ...) @__SMACK_code(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0)), !dbg !60, !verifier.code !61 */
  assert {:loopexit} false;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1412, 75} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !62, !verifier.code !63 */
  $exn := false;
  return;
}
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0, 49536));
type $mop;
procedure {:inline 1} boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exnv: int;
procedure {:inline 1} corral_atomic_begin();
procedure {:inline 1} corral_atomic_end();
procedure {:inline 1} $alloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

procedure {:inline 1} $malloc(n: ref) returns (p: ref)
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}

var $CurrAddr:ref;

procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n, $0.ref);
  if ($sgt.ref.bool(n, $0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr, n), p);
    assume $sgt.ref.bool($CurrAddr, $0.ref) && $slt.ref.bool($CurrAddr, $MALLOC_TOP);
  }
}

procedure {:inline 1} $free(p: ref);

const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0, 50568));
procedure {:inline 1} __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0, 51600));
procedure {:inline 1} __SMACK_init_func_memory_model()
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1885, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1885, 3} true;
  assume {:verifier.code 1} true;
  /* call void (i8*, ...) @__SMACK_code(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.18, i64 0, i64 0)), !dbg !60, !verifier.code !61 */
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1890, 1} true;
  assume {:verifier.code 0} true;
  /* ret void, !dbg !62, !verifier.code !63 */
  $exn := false;
  return;
}
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0, 52632));
procedure {:inline 1} __SMACK_static_init()
{
$bb0:
  /* ret void */
  $exn := false;
  return;
}
procedure {:inline 1} $memcpy.i8(M.dst: [ref] i8, M.src: [ref] i8, dst: ref, src: ref, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)]);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M.dst[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M.dst[x]);
}

procedure {:inline 1} $memset.i8(M: [ref] i8, dst: ref, val: i8, len: ref, isvolatile: bool) returns (M.ret: [ref] i8)
{
  assume (forall x: ref :: $sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len)) ==> M.ret[x] == val);
  assume (forall x: ref :: $slt.ref.bool(x,dst) ==> M.ret[x] == M[x]);
  assume (forall x: ref :: $sle.ref.bool($add.ref(dst,len),x) ==> M.ret[x] == M[x]);
}

const $u0: ref;
procedure {:inline 1} boogie_si_record_i128(x: i128);
procedure {:inline 1} boogie_si_record_i16(x: i16);
procedure {:inline 1} boogie_si_record_i32(x: i32);
procedure {:inline 1} boogie_si_record_i64(x: i64);
procedure {:inline 1} boogie_si_record_i8(x: i8);
procedure {:inline 1} boogie_si_record_ref(x: ref);
procedure {:inline 1} $initialize()
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
