type i1 = int;
type i5 = int;
type i6 = int;
type i8 = int;
type i16 = int;
type i24 = int;
type i32 = int;
type i33 = int;
type i40 = int;
type i48 = int;
type i56 = int;
type i64 = int;
type i80 = int;
type i88 = int;
type i96 = int;
type i128 = int;
type i160 = int;
type i256 = int;
type ref = i64;
type float;
const $0: i32;
axiom ($0 == 0);
const $1: i32;
axiom ($1 == 1);
const $0.ref: ref;
axiom ($0.ref == 0);
const $1.ref: ref;
axiom ($1.ref == 1);
const $1024.ref: ref;
axiom ($1024.ref == 1024);
const $GLOBALS_BOTTOM: ref;
const $EXTERNS_BOTTOM: ref;
const $MALLOC_TOP: ref;
var $M.0: [ref] i8;
var $M.0.dup: [ref] i1;
var $M.1: [ref] i8;
var $M.1.dup: [ref] i1;
var $M.2: [ref] i8;
var $M.2.dup: [ref] i1;
var $M.3: [ref] i8;
var $M.3.dup: [ref] i1;
var $M.4: [ref] i8;
var $M.4.dup: [ref] i1;
var $M.5: [ref] i8;
var $M.5.dup: [ref] i1;
var $M.6: [ref] i8;
var $M.6.dup: [ref] i1;
var $M.7: [ref] i8;
var $M.7.dup: [ref] i1;
var $M.8: [ref] i8;
var $M.8.dup: [ref] i1;
var $M.9: [ref] i8;
var $M.9.dup: [ref] i1;
var $M.10: [ref] i8;
var $M.10.dup: [ref] i1;
var $M.11: [ref] i8;
var $M.11.dup: [ref] i1;
var $M.12: [ref] i8;
var $M.12.dup: [ref] i1;
var $M.13: [ref] i8;
var $M.13.dup: [ref] i1;
var $M.14: [ref] i8;
var $M.14.dup: [ref] i1;
var $M.15: [ref] i8;
var $M.15.dup: [ref] i1;
var $M.16: [ref] i8;
var $M.16.dup: [ref] i1;
var $M.17: [ref] i8;
var $M.17.dup: [ref] i1;
var $M.18: [ref] i8;
var $M.18.dup: [ref] i1;
var $M.19: [ref] i8;
var $M.19.dup: [ref] i1;
var $M.20: [ref] i8;
var $M.20.dup: [ref] i1;
var $M.21: [ref] i8;
var $M.21.dup: [ref] i1;
var $M.22: [ref] i8;
var $M.22.dup: [ref] i1;
var $M.23: [ref] i8;
var $M.23.dup: [ref] i1;
var $M.24: [ref] i8;
var $M.24.dup: [ref] i1;
var $M.25: [ref] i8;
var $M.25.dup: [ref] i1;
var $M.26: [ref] i8;
var $M.26.dup: [ref] i1;
var $M.27: [ref] i8;
var $M.27.dup: [ref] i1;
var $M.28: [ref] i8;
var $M.28.dup: [ref] i1;
var $M.29: [ref] i8;
var $M.29.dup: [ref] i1;
var $M.30: [ref] i8;
var $M.30.dup: [ref] i1;
var $M.31: [ref] i8;
var $M.31.dup: [ref] i1;
var $M.32: [ref] i8;
var $M.32.dup: [ref] i1;
var $M.33: [ref] i8;
var $M.33.dup: [ref] i1;
var $M.34: [ref] i8;
var $M.34.dup: [ref] i1;
var $M.35: [ref] i8;
var $M.35.dup: [ref] i1;
var $M.36: [ref] i8;
var $M.36.dup: [ref] i1;
var $M.37: [ref] i8;
var $M.37.dup: [ref] i1;
var $M.38: [ref] i8;
var $M.38.dup: [ref] i1;
var $M.39: [ref] i8;
var $M.39.dup: [ref] i1;
var $M.40: [ref] i8;
var $M.40.dup: [ref] i1;
var $M.41: [ref] i8;
var $M.41.dup: [ref] i1;
var $M.42: [ref] i8;
var $M.42.dup: [ref] i1;
var $M.43: [ref] i8;
var $M.43.dup: [ref] i1;
var $M.44: [ref] i8;
var $M.44.dup: [ref] i1;
var $M.45: [ref] i8;
var $M.45.dup: [ref] i1;
var $M.46: [ref] i8;
var $M.46.dup: [ref] i1;
var $M.47: [ref] i8;
var $M.47.dup: [ref] i1;
var $M.48: [ref] i8;
var $M.48.dup: [ref] i1;
var $M.49: [ref] i8;
var $M.49.dup: [ref] i1;
var $M.50: [ref] i8;
var $M.50.dup: [ref] i1;
var $M.51: [ref] i8;
var $M.51.dup: [ref] i1;
var $M.52: [ref] i8;
var $M.52.dup: [ref] i1;
var $M.53: [ref] i8;
var $M.53.dup: [ref] i1;
var $M.54: [ref] i8;
var $M.54.dup: [ref] i1;
var $M.55: [ref] i8;
var $M.55.dup: [ref] i1;
var $M.56: [ref] i8;
var $M.56.dup: [ref] i1;
var $M.57: [ref] i8;
var $M.57.dup: [ref] i1;
var $M.58: [ref] i8;
var $M.58.dup: [ref] i1;
var $M.59: [ref] i8;
var $M.59.dup: [ref] i1;
var $M.60: [ref] i8;
var $M.60.dup: [ref] i1;
var $M.61: [ref] i8;
var $M.61.dup: [ref] i1;
var $M.62: [ref] i8;
var $M.62.dup: [ref] i1;
var $M.63: [ref] i8;
var $M.63.dup: [ref] i1;
var $M.64: [ref] i8;
var $M.64.dup: [ref] i1;
var $M.65: [ref] i8;
var $M.65.dup: [ref] i1;
var $M.66: [ref] i8;
var $M.66.dup: [ref] i1;
var $M.67: [ref] i8;
var $M.67.dup: [ref] i1;
var $M.68: [ref] i8;
var $M.68.dup: [ref] i1;
var $M.69: [ref] i8;
var $M.69.dup: [ref] i1;
var $M.70: [ref] i8;
var $M.70.dup: [ref] i1;
var $M.71: [ref] i8;
var $M.71.dup: [ref] i1;
var $M.72: [ref] i8;
var $M.72.dup: [ref] i1;
var $M.73: [ref] i8;
var $M.73.dup: [ref] i1;
var $M.74: [ref] i8;
var $M.74.dup: [ref] i1;
var $M.75: [ref] i8;
var $M.75.dup: [ref] i1;
var $M.76: [ref] i8;
var $M.76.dup: [ref] i1;
var $M.77: [ref] i8;
var $M.77.dup: [ref] i1;
var $M.78: [ref] i8;
var $M.78.dup: [ref] i1;
var $M.79: [ref] i8;
var $M.79.dup: [ref] i1;
var $M.80: [ref] i8;
var $M.80.dup: [ref] i1;
var $M.81: [ref] i8;
var $M.81.dup: [ref] i1;
var $M.82: [ref] i8;
var $M.82.dup: [ref] i1;
var $M.83: [ref] i8;
var $M.83.dup: [ref] i1;
var $M.84: [ref] i8;
var $M.84.dup: [ref] i1;
var $M.85: [ref] i8;
var $M.85.dup: [ref] i1;
var $M.86: [ref] i8;
var $M.86.dup: [ref] i1;
var $M.87: [ref] i8;
var $M.87.dup: [ref] i1;
var $M.88: [ref] i8;
var $M.88.dup: [ref] i1;
var $M.89: [ref] i8;
var $M.89.dup: [ref] i1;
var $M.90: [ref] i8;
var $M.90.dup: [ref] i1;
var $M.91: [ref] i8;
var $M.91.dup: [ref] i1;
var $M.92: [ref] i8;
var $M.92.dup: [ref] i1;
var $M.93: [ref] i8;
var $M.93.dup: [ref] i1;
var $M.94: [ref] i8;
var $M.94.dup: [ref] i1;
var $M.95: [ref] i8;
var $M.95.dup: [ref] i1;
var $M.96: [ref] i8;
var $M.96.dup: [ref] i1;
var $M.97: [ref] i8;
var $M.97.dup: [ref] i1;
var $M.98: [ref] i8;
var $M.98.dup: [ref] i1;
var $M.99: [ref] i8;
var $M.99.dup: [ref] i1;
var $M.100: [ref] i8;
var $M.100.dup: [ref] i1;
var $M.101: [ref] i8;
var $M.101.dup: [ref] i1;
var $M.102: [ref] i8;
var $M.102.dup: [ref] i1;
var $M.103: [ref] i8;
var $M.103.dup: [ref] i1;
var $M.104: [ref] i8;
var $M.104.dup: [ref] i1;
var $M.105: [ref] i8;
var $M.105.dup: [ref] i1;
var $M.106: [ref] i8;
var $M.106.dup: [ref] i1;
var $M.107: [ref] i8;
var $M.107.dup: [ref] i1;
var $M.108: [ref] i8;
var $M.108.dup: [ref] i1;
var $M.109: [ref] i8;
var $M.109.dup: [ref] i1;
var $M.110: [ref] i8;
var $M.110.dup: [ref] i1;
var $M.111: [ref] i8;
var $M.111.dup: [ref] i1;
var $M.112: [ref] i8;
var $M.112.dup: [ref] i1;
var $M.113: [ref] i8;
var $M.113.dup: [ref] i1;
var $M.114: [ref] i8;
var $M.114.dup: [ref] i1;
var $M.115: [ref] i8;
var $M.115.dup: [ref] i1;
var $M.116: [ref] i8;
var $M.116.dup: [ref] i1;
var $M.117: [ref] i8;
var $M.117.dup: [ref] i1;
var $M.118: [ref] i8;
var $M.118.dup: [ref] i1;
var $M.119: [ref] i8;
var $M.119.dup: [ref] i1;
var $M.120: [ref] i8;
var $M.120.dup: [ref] i1;
var $M.121: [ref] i8;
var $M.121.dup: [ref] i1;
var $M.122: [ref] i8;
var $M.122.dup: [ref] i1;
var $M.123: [ref] i8;
var $M.123.dup: [ref] i1;
var $M.124: [ref] i8;
var $M.124.dup: [ref] i1;
var $M.125: [ref] i8;
var $M.125.dup: [ref] i1;
var $M.126: [ref] i8;
var $M.126.dup: [ref] i1;
var $M.127: [ref] i8;
var $M.127.dup: [ref] i1;
var $M.128: [ref] i8;
var $M.128.dup: [ref] i1;
var $M.129: [ref] i8;
var $M.129.dup: [ref] i1;
var $M.130: [ref] i8;
var $M.130.dup: [ref] i1;
var $M.131: [ref] i8;
var $M.131.dup: [ref] i1;
var $M.132: [ref] i8;
var $M.132.dup: [ref] i1;
var $M.133: [ref] i8;
var $M.133.dup: [ref] i1;
var $M.134: [ref] i8;
var $M.134.dup: [ref] i1;
var $M.135: [ref] i8;
var $M.135.dup: [ref] i1;
var $M.136: [ref] i8;
var $M.136.dup: [ref] i1;
var $M.137: [ref] i8;
var $M.137.dup: [ref] i1;
var $M.138: [ref] i8;
var $M.138.dup: [ref] i1;
var $M.139: [ref] i8;
var $M.139.dup: [ref] i1;
var $M.140: [ref] i8;
var $M.140.dup: [ref] i1;
var $M.141: [ref] i8;
var $M.141.dup: [ref] i1;
var $M.142: [ref] i8;
var $M.142.dup: [ref] i1;
var $M.143: [ref] i8;
var $M.143.dup: [ref] i1;
var $M.144: [ref] i8;
var $M.144.dup: [ref] i1;
var $M.145: [ref] i8;
var $M.145.dup: [ref] i1;
var $M.146: [ref] i8;
var $M.146.dup: [ref] i1;
var $M.147: [ref] i8;
var $M.147.dup: [ref] i1;
var $M.148: [ref] i8;
var $M.148.dup: [ref] i1;
var $M.149: [ref] i8;
var $M.149.dup: [ref] i1;
var $M.150: [ref] i8;
var $M.150.dup: [ref] i1;
var $M.151: [ref] i8;
var $M.151.dup: [ref] i1;
var $M.152: [ref] i8;
var $M.152.dup: [ref] i1;
var $M.153: [ref] i8;
var $M.153.dup: [ref] i1;
var $M.154: [ref] i8;
var $M.154.dup: [ref] i1;
var $M.155: [ref] i8;
var $M.155.dup: [ref] i1;
var $M.156: [ref] i8;
var $M.156.dup: [ref] i1;
var $M.157: [ref] i8;
var $M.157.dup: [ref] i1;
var $M.158: [ref] i8;
var $M.158.dup: [ref] i1;
var $M.159: [ref] i8;
var $M.159.dup: [ref] i1;
var $M.160: [ref] i8;
var $M.160.dup: [ref] i1;
var $M.161: [ref] i8;
var $M.161.dup: [ref] i1;
var $M.162: [ref] i8;
var $M.162.dup: [ref] i1;
var $M.163: [ref] i8;
var $M.163.dup: [ref] i1;
var $M.164: [ref] i8;
var $M.164.dup: [ref] i1;
var $M.165: [ref] i8;
var $M.165.dup: [ref] i1;
var $M.166: [ref] i8;
var $M.166.dup: [ref] i1;
var $M.167: [ref] i8;
var $M.167.dup: [ref] i1;
var $M.168: [ref] i8;
var $M.168.dup: [ref] i1;
var $M.169: [ref] i8;
var $M.169.dup: [ref] i1;
var $M.170: [ref] i8;
var $M.170.dup: [ref] i1;
var $M.171: [ref] i8;
var $M.171.dup: [ref] i1;
var $M.172: [ref] i8;
var $M.172.dup: [ref] i1;
var $M.173: [ref] i8;
var $M.173.dup: [ref] i1;
var $M.174: [ref] i8;
var $M.174.dup: [ref] i1;
var $M.175: [ref] i8;
var $M.175.dup: [ref] i1;
var $M.176: [ref] i8;
var $M.176.dup: [ref] i1;
var $M.177: [ref] i8;
var $M.177.dup: [ref] i1;
var $M.178: [ref] i8;
var $M.178.dup: [ref] i1;
var $M.179: [ref] i8;
var $M.179.dup: [ref] i1;
var $M.180: [ref] i8;
var $M.180.dup: [ref] i1;
var $M.181: [ref] i8;
var $M.181.dup: [ref] i1;
var $M.182: [ref] i8;
var $M.182.dup: [ref] i1;
var $M.183: [ref] i8;
var $M.183.dup: [ref] i1;
var $M.184: [ref] i8;
var $M.184.dup: [ref] i1;
var $M.185: [ref] i8;
var $M.185.dup: [ref] i1;
var $M.186: [ref] i8;
var $M.186.dup: [ref] i1;
var $M.187: [ref] i8;
var $M.187.dup: [ref] i1;
var $M.188: [ref] i8;
var $M.188.dup: [ref] i1;
var $M.189: [ref] i8;
var $M.189.dup: [ref] i1;
var $M.190: [ref] i8;
var $M.190.dup: [ref] i1;
var $M.191: [ref] i8;
var $M.191.dup: [ref] i1;
var $M.192: [ref] i8;
var $M.192.dup: [ref] i1;
var $M.193: [ref] i8;
var $M.193.dup: [ref] i1;
var $M.194: [ref] i8;
var $M.194.dup: [ref] i1;
var $M.195: [ref] i8;
var $M.195.dup: [ref] i1;
var $M.196: [ref] i8;
var $M.196.dup: [ref] i1;
var $M.197: [ref] i8;
var $M.197.dup: [ref] i1;
var $M.198: [ref] i8;
var $M.198.dup: [ref] i1;
var $M.199: [ref] i8;
var $M.199.dup: [ref] i1;
var $M.200: [ref] i8;
var $M.200.dup: [ref] i1;
var $M.201: [ref] i8;
var $M.201.dup: [ref] i1;
var $M.202: [ref] i8;
var $M.202.dup: [ref] i1;
var $M.203: [ref] i8;
var $M.203.dup: [ref] i1;
var $M.204: [ref] i8;
var $M.204.dup: [ref] i1;
var $M.205: [ref] i8;
var $M.205.dup: [ref] i1;
var $M.206: [ref] i8;
var $M.206.dup: [ref] i1;
var $M.207: [ref] i8;
var $M.207.dup: [ref] i1;
var $M.208: [ref] i8;
var $M.208.dup: [ref] i1;
var $M.209: [ref] i8;
var $M.209.dup: [ref] i1;
var $M.210: [ref] i8;
var $M.210.dup: [ref] i1;
var $M.211: [ref] i8;
var $M.211.dup: [ref] i1;
var $M.212: [ref] i8;
var $M.212.dup: [ref] i1;
var $M.213: [ref] i8;
var $M.213.dup: [ref] i1;
var $M.214: [ref] i8;
var $M.214.dup: [ref] i1;
var $M.215: [ref] i8;
var $M.215.dup: [ref] i1;
var $M.216: [ref] i8;
var $M.216.dup: [ref] i1;
var $M.217: [ref] i8;
var $M.217.dup: [ref] i1;
var $M.218: [ref] i8;
var $M.218.dup: [ref] i1;
var $M.219: [ref] i8;
var $M.219.dup: [ref] i1;
var $M.220: [ref] i8;
var $M.220.dup: [ref] i1;
var $M.221: [ref] i8;
var $M.221.dup: [ref] i1;
var $M.222: [ref] i8;
var $M.222.dup: [ref] i1;
var $M.223: [ref] i128;
var $M.223.dup: [ref] i1;
var $M.224: [ref] i8;
var $M.224.dup: [ref] i1;
var $M.225: [ref] i8;
var $M.225.dup: [ref] i1;
var $M.226: [ref] i8;
var $M.226.dup: [ref] i1;
var $M.227: [ref] i8;
var $M.227.dup: [ref] i1;
var $M.228: [ref] i8;
var $M.228.dup: [ref] i1;
var $M.229: [ref] i8;
var $M.229.dup: [ref] i1;
var $M.230: [ref] i8;
var $M.230.dup: [ref] i1;
var $M.231: [ref] i8;
var $M.231.dup: [ref] i1;
var $M.232: [ref] i8;
var $M.232.dup: [ref] i1;
var $M.233: [ref] i8;
var $M.233.dup: [ref] i1;
var $M.234: [ref] i8;
var $M.234.dup: [ref] i1;
var $M.235: [ref] i8;
var $M.235.dup: [ref] i1;
var $M.236: [ref] i8;
var $M.236.dup: [ref] i1;
var $M.237: [ref] i8;
var $M.237.dup: [ref] i1;
var $M.238: [ref] i8;
var $M.238.dup: [ref] i1;
var $M.239: [ref] i8;
var $M.239.dup: [ref] i1;
var $M.240: [ref] i8;
var $M.240.dup: [ref] i1;
var $M.241: [ref] i8;
var $M.241.dup: [ref] i1;
var $M.242: [ref] i8;
var $M.242.dup: [ref] i1;
var $M.243: [ref] i8;
var $M.243.dup: [ref] i1;
var $M.244: [ref] i8;
var $M.244.dup: [ref] i1;
var $M.245: [ref] i8;
var $M.245.dup: [ref] i1;
var $M.246: [ref] i8;
var $M.246.dup: [ref] i1;
var $M.247: [ref] i8;
var $M.247.dup: [ref] i1;
var $M.248: [ref] i8;
var $M.248.dup: [ref] i1;
var $M.249: [ref] i8;
var $M.249.dup: [ref] i1;
var $M.250: [ref] i8;
var $M.250.dup: [ref] i1;
var $M.251: [ref] i8;
var $M.251.dup: [ref] i1;
var $M.252: [ref] i8;
var $M.252.dup: [ref] i1;
var $M.253: [ref] i8;
var $M.253.dup: [ref] i1;
var $M.254: [ref] i8;
var $M.254.dup: [ref] i1;
var $M.255: [ref] i8;
var $M.255.dup: [ref] i1;
var $M.256: [ref] i8;
var $M.256.dup: [ref] i1;
var $M.257: [ref] i8;
var $M.257.dup: [ref] i1;
var $M.258: [ref] i8;
var $M.258.dup: [ref] i1;
var $M.259: [ref] i8;
var $M.259.dup: [ref] i1;
var $M.260: [ref] i8;
var $M.260.dup: [ref] i1;
var $M.261: [ref] i8;
var $M.261.dup: [ref] i1;
var $M.262: [ref] i8;
var $M.262.dup: [ref] i1;
var $M.263: [ref] i8;
var $M.263.dup: [ref] i1;
var $M.264: [ref] i8;
var $M.264.dup: [ref] i1;
var $M.265: [ref] i8;
var $M.265.dup: [ref] i1;
var $M.266: [ref] i8;
var $M.266.dup: [ref] i1;
var $M.267: [ref] i8;
var $M.267.dup: [ref] i1;
var $M.268: [ref] i8;
var $M.268.dup: [ref] i1;
var $M.269: [ref] i8;
var $M.269.dup: [ref] i1;
var $M.270: [ref] i8;
var $M.270.dup: [ref] i1;
var $M.271: [ref] i8;
var $M.271.dup: [ref] i1;
var $M.272: [ref] i8;
var $M.272.dup: [ref] i1;
var $M.273: [ref] i8;
var $M.273.dup: [ref] i1;
var $M.274: [ref] i8;
var $M.274.dup: [ref] i1;
var $M.275: [ref] i8;
var $M.275.dup: [ref] i1;
var $M.276: [ref] i8;
var $M.276.dup: [ref] i1;
var $M.277: [ref] i8;
var $M.277.dup: [ref] i1;
var $M.278: [ref] i8;
var $M.278.dup: [ref] i1;
var $M.279: [ref] i8;
var $M.279.dup: [ref] i1;
var $M.280: [ref] i8;
var $M.280.dup: [ref] i1;
var $M.281: [ref] i8;
var $M.281.dup: [ref] i1;
var $M.282: [ref] i8;
var $M.282.dup: [ref] i1;
var $M.283: [ref] i8;
var $M.283.dup: [ref] i1;
var $M.284: [ref] i8;
var $M.284.dup: [ref] i1;
var $M.285: [ref] i8;
var $M.285.dup: [ref] i1;
var $M.286: [ref] i8;
var $M.286.dup: [ref] i1;
var $M.287: [ref] i8;
var $M.287.dup: [ref] i1;
var $M.288: [ref] i8;
var $M.288.dup: [ref] i1;
var $M.289: [ref] i8;
var $M.289.dup: [ref] i1;
var $M.290: [ref] i8;
var $M.290.dup: [ref] i1;
var $M.291: [ref] i8;
var $M.291.dup: [ref] i1;
var $M.292: [ref] i8;
var $M.292.dup: [ref] i1;
var $M.293: [ref] i8;
var $M.293.dup: [ref] i1;
var $M.294: [ref] i8;
var $M.294.dup: [ref] i1;
var $M.295: [ref] i8;
var $M.295.dup: [ref] i1;
var $M.296: [ref] i8;
var $M.296.dup: [ref] i1;
var $M.297: [ref] i8;
var $M.297.dup: [ref] i1;
var $M.298: [ref] i8;
var $M.298.dup: [ref] i1;
var $M.299: [ref] i8;
var $M.299.dup: [ref] i1;
var $M.300: [ref] i8;
var $M.300.dup: [ref] i1;
var $M.301: [ref] i8;
var $M.301.dup: [ref] i1;
var $M.302: [ref] i8;
var $M.302.dup: [ref] i1;
var $M.303: [ref] i8;
var $M.303.dup: [ref] i1;
var $M.304: [ref] i8;
var $M.304.dup: [ref] i1;
var $M.305: [ref] i8;
var $M.305.dup: [ref] i1;
var $M.306: [ref] i8;
var $M.306.dup: [ref] i1;
var $M.307: [ref] i8;
var $M.307.dup: [ref] i1;
var $M.308: [ref] i8;
var $M.308.dup: [ref] i1;
var $M.309: [ref] i8;
var $M.309.dup: [ref] i1;
var $M.310: [ref] i8;
var $M.310.dup: [ref] i1;
var $M.311: [ref] i8;
var $M.311.dup: [ref] i1;
var $M.312: [ref] i8;
var $M.312.dup: [ref] i1;
var $M.313: [ref] i8;
var $M.313.dup: [ref] i1;
var $M.314: [ref] i8;
var $M.314.dup: [ref] i1;
var $M.315: [ref] i8;
var $M.315.dup: [ref] i1;
var $M.316: [ref] i8;
var $M.316.dup: [ref] i1;
var $M.317: [ref] i8;
var $M.317.dup: [ref] i1;
var $M.318: [ref] i8;
var $M.318.dup: [ref] i1;
var $M.319: [ref] i8;
var $M.319.dup: [ref] i1;
var $M.320: [ref] i8;
var $M.320.dup: [ref] i1;
var $M.321: [ref] i8;
var $M.321.dup: [ref] i1;
var $M.322: [ref] i8;
var $M.322.dup: [ref] i1;
var $M.323: [ref] i8;
var $M.323.dup: [ref] i1;
var $M.324: [ref] i8;
var $M.324.dup: [ref] i1;
var $M.325: [ref] i8;
var $M.325.dup: [ref] i1;
var $M.326: [ref] i8;
var $M.326.dup: [ref] i1;
var $M.327: [ref] i8;
var $M.327.dup: [ref] i1;
var $M.328: [ref] i8;
var $M.328.dup: [ref] i1;
var $M.329: [ref] i8;
var $M.329.dup: [ref] i1;
var $M.330: [ref] i8;
var $M.330.dup: [ref] i1;
var $M.331: [ref] i8;
var $M.331.dup: [ref] i1;
var $M.332: [ref] i8;
var $M.332.dup: [ref] i1;
var $M.333: [ref] i8;
var $M.333.dup: [ref] i1;
var $M.334: [ref] i8;
var $M.334.dup: [ref] i1;
var $M.335: [ref] i8;
var $M.335.dup: [ref] i1;
var $M.336: [ref] i8;
var $M.336.dup: [ref] i1;
var $M.337: [ref] i8;
var $M.337.dup: [ref] i1;
var $M.338: [ref] i8;
var $M.338.dup: [ref] i1;
var $M.339: [ref] i8;
var $M.339.dup: [ref] i1;
var $M.340: [ref] i8;
var $M.340.dup: [ref] i1;
var $M.341: [ref] i8;
var $M.341.dup: [ref] i1;
var $M.342: [ref] i8;
var $M.342.dup: [ref] i1;
var $M.343: [ref] i8;
var $M.343.dup: [ref] i1;
var $M.344: [ref] i8;
var $M.344.dup: [ref] i1;
var $M.345: [ref] i8;
var $M.345.dup: [ref] i1;
var $M.346: [ref] i8;
var $M.346.dup: [ref] i1;
var $M.347: [ref] i8;
var $M.347.dup: [ref] i1;
var $M.348: [ref] i8;
var $M.348.dup: [ref] i1;
var $M.349: [ref] i8;
var $M.349.dup: [ref] i1;
var $M.350: [ref] i8;
var $M.350.dup: [ref] i1;
var $M.351: [ref] i8;
var $M.351.dup: [ref] i1;
var $M.352: [ref] i8;
var $M.352.dup: [ref] i1;
var $M.353: [ref] i8;
var $M.353.dup: [ref] i1;
var $M.354: [ref] i8;
var $M.354.dup: [ref] i1;
var $M.355: [ref] i8;
var $M.355.dup: [ref] i1;
var $M.356: [ref] i8;
var $M.356.dup: [ref] i1;
var $M.357: [ref] i8;
var $M.357.dup: [ref] i1;
var $M.358: [ref] i8;
var $M.358.dup: [ref] i1;
var $M.359: [ref] i8;
var $M.359.dup: [ref] i1;
var $M.360: [ref] i8;
var $M.360.dup: [ref] i1;
var $M.361: [ref] i8;
var $M.361.dup: [ref] i1;
var $M.362: [ref] i8;
var $M.362.dup: [ref] i1;
var $M.363: [ref] i8;
var $M.363.dup: [ref] i1;
var $M.364: [ref] i8;
var $M.364.dup: [ref] i1;
var $M.365: [ref] i8;
var $M.365.dup: [ref] i1;
var $M.366: [ref] i8;
var $M.366.dup: [ref] i1;
var $M.367: [ref] i8;
var $M.367.dup: [ref] i1;
var $M.368: [ref] i8;
var $M.368.dup: [ref] i1;
var $M.369: [ref] i8;
var $M.369.dup: [ref] i1;
var $M.370: [ref] i8;
var $M.370.dup: [ref] i1;
var $M.371: [ref] i8;
var $M.371.dup: [ref] i1;
var $M.372: [ref] i8;
var $M.372.dup: [ref] i1;
var $M.373: [ref] i8;
var $M.373.dup: [ref] i1;
var $M.374: [ref] i8;
var $M.374.dup: [ref] i1;
var $M.375: [ref] i8;
var $M.375.dup: [ref] i1;
var $M.376: [ref] i8;
var $M.376.dup: [ref] i1;
var $M.377: [ref] i8;
var $M.377.dup: [ref] i1;
var $M.378: [ref] i8;
var $M.378.dup: [ref] i1;
var $M.379: [ref] i8;
var $M.379.dup: [ref] i1;
var $M.380: [ref] i8;
var $M.380.dup: [ref] i1;
var $M.381: [ref] i8;
var $M.381.dup: [ref] i1;
var $M.382: [ref] i8;
var $M.382.dup: [ref] i1;
var $M.383: [ref] i8;
var $M.383.dup: [ref] i1;
var $M.384: [ref] i8;
var $M.384.dup: [ref] i1;
var $M.385: [ref] i8;
var $M.385.dup: [ref] i1;
var $M.386: [ref] i8;
var $M.386.dup: [ref] i1;
var $M.387: [ref] i8;
var $M.387.dup: [ref] i1;
var $M.388: [ref] i8;
var $M.388.dup: [ref] i1;
var $M.389: [ref] i8;
var $M.389.dup: [ref] i1;
var $M.390: [ref] i8;
var $M.390.dup: [ref] i1;
var $M.391: [ref] i8;
var $M.391.dup: [ref] i1;
var $M.392: [ref] i8;
var $M.392.dup: [ref] i1;
var $M.393: [ref] i8;
var $M.393.dup: [ref] i1;
var $M.394: [ref] i8;
var $M.394.dup: [ref] i1;
var $M.395: [ref] i8;
var $M.395.dup: [ref] i1;
var $M.396: [ref] i8;
var $M.396.dup: [ref] i1;
var $M.397: [ref] i8;
var $M.397.dup: [ref] i1;
var $M.398: [ref] i8;
var $M.398.dup: [ref] i1;
var $M.399: [ref] i8;
var $M.399.dup: [ref] i1;
var $M.400: [ref] i8;
var $M.400.dup: [ref] i1;
var $M.401: [ref] i8;
var $M.401.dup: [ref] i1;
var $M.402: [ref] i8;
var $M.402.dup: [ref] i1;
var $M.403: [ref] i8;
var $M.403.dup: [ref] i1;
var $M.404: [ref] i8;
var $M.404.dup: [ref] i1;
var $M.405: [ref] i8;
var $M.405.dup: [ref] i1;
var $M.406: [ref] i8;
var $M.406.dup: [ref] i1;
var $M.407: [ref] i8;
var $M.407.dup: [ref] i1;
var $M.408: [ref] i8;
var $M.408.dup: [ref] i1;
var $M.409: [ref] i8;
var $M.409.dup: [ref] i1;
var $M.410: [ref] i8;
var $M.410.dup: [ref] i1;
var $M.411: [ref] i8;
var $M.411.dup: [ref] i1;
var $M.412: [ref] i8;
var $M.412.dup: [ref] i1;
var $M.413: [ref] i8;
var $M.413.dup: [ref] i1;
var $M.414: [ref] i8;
var $M.414.dup: [ref] i1;
var $M.415: [ref] i8;
var $M.415.dup: [ref] i1;
var $M.416: [ref] i8;
var $M.416.dup: [ref] i1;
var $M.417: [ref] i8;
var $M.417.dup: [ref] i1;
var $M.418: [ref] i8;
var $M.418.dup: [ref] i1;
var $M.419: [ref] i8;
var $M.419.dup: [ref] i1;
var $M.420: [ref] i8;
var $M.420.dup: [ref] i1;
var $M.421: [ref] i8;
var $M.421.dup: [ref] i1;
var $M.422: [ref] i8;
var $M.422.dup: [ref] i1;
var $M.423: [ref] i8;
var $M.423.dup: [ref] i1;
var $M.424: [ref] i8;
var $M.424.dup: [ref] i1;
var $M.425: [ref] i8;
var $M.425.dup: [ref] i1;
var $M.426: [ref] i8;
var $M.426.dup: [ref] i1;
var $M.427: [ref] i8;
var $M.427.dup: [ref] i1;
var $M.428: [ref] i8;
var $M.428.dup: [ref] i1;
var $M.429: [ref] i8;
var $M.429.dup: [ref] i1;
var $M.430: [ref] i8;
var $M.430.dup: [ref] i1;
var $M.431: [ref] i8;
var $M.431.dup: [ref] i1;
var $M.432: [ref] i8;
var $M.432.dup: [ref] i1;
var $M.433: [ref] i8;
var $M.433.dup: [ref] i1;
var $M.434: [ref] i8;
var $M.434.dup: [ref] i1;
var $M.435: [ref] i8;
var $M.435.dup: [ref] i1;
var $M.436: [ref] i8;
var $M.436.dup: [ref] i1;
var $M.437: [ref] i8;
var $M.437.dup: [ref] i1;
var $M.438: [ref] i8;
var $M.438.dup: [ref] i1;
var $M.439: [ref] i8;
var $M.439.dup: [ref] i1;
var $M.440: [ref] i8;
var $M.440.dup: [ref] i1;
var $M.441: [ref] i8;
var $M.441.dup: [ref] i1;
var $M.442: [ref] i8;
var $M.442.dup: [ref] i1;
var $M.443: [ref] i8;
var $M.443.dup: [ref] i1;
var $M.444: [ref] i8;
var $M.444.dup: [ref] i1;
var $M.445: [ref] i8;
var $M.445.dup: [ref] i1;
var $M.446: [ref] i8;
var $M.446.dup: [ref] i1;
var $M.447: [ref] i8;
var $M.447.dup: [ref] i1;
var $M.448: [ref] i8;
var $M.448.dup: [ref] i1;
var $M.449: [ref] i8;
var $M.449.dup: [ref] i1;
var $M.450: [ref] i8;
var $M.450.dup: [ref] i1;
var $M.451: [ref] i8;
var $M.451.dup: [ref] i1;
var $M.452: [ref] i8;
var $M.452.dup: [ref] i1;
var $M.453: [ref] i8;
var $M.453.dup: [ref] i1;
var $M.454: [ref] i8;
var $M.454.dup: [ref] i1;
var $M.455: [ref] i8;
var $M.455.dup: [ref] i1;
var $M.456: [ref] i8;
var $M.456.dup: [ref] i1;
var $M.457: [ref] i8;
var $M.457.dup: [ref] i1;
var $M.458: [ref] i8;
var $M.458.dup: [ref] i1;
var $M.459: [ref] i8;
var $M.459.dup: [ref] i1;
var $M.460: [ref] i8;
var $M.460.dup: [ref] i1;
var $M.461: [ref] i8;
var $M.461.dup: [ref] i1;
var $M.462: [ref] i8;
var $M.462.dup: [ref] i1;
var $M.463: [ref] i8;
var $M.463.dup: [ref] i1;
var $M.464: [ref] i8;
var $M.464.dup: [ref] i1;
var $M.465: [ref] i8;
var $M.465.dup: [ref] i1;
var $M.466: [ref] i8;
var $M.466.dup: [ref] i1;
var $M.467: [ref] i8;
var $M.467.dup: [ref] i1;
var $M.468: [ref] i8;
var $M.468.dup: [ref] i1;
var $M.469: [ref] i8;
var $M.469.dup: [ref] i1;
var $M.470: [ref] i8;
var $M.470.dup: [ref] i1;
var $M.471: [ref] i8;
var $M.471.dup: [ref] i1;
var $M.472: [ref] i8;
var $M.472.dup: [ref] i1;
var $M.473: [ref] i8;
var $M.473.dup: [ref] i1;
var $M.474: [ref] i8;
var $M.474.dup: [ref] i1;
var $M.475: [ref] i8;
var $M.475.dup: [ref] i1;
var $M.476: [ref] i8;
var $M.476.dup: [ref] i1;
var $M.477: [ref] i8;
var $M.477.dup: [ref] i1;
var $M.478: [ref] i8;
var $M.478.dup: [ref] i1;
var $M.479: [ref] i8;
var $M.479.dup: [ref] i1;
var $M.480: [ref] i8;
var $M.480.dup: [ref] i1;
var $M.481: [ref] i8;
var $M.481.dup: [ref] i1;
var $M.482: [ref] i8;
var $M.482.dup: [ref] i1;
var $M.483: [ref] i8;
var $M.483.dup: [ref] i1;
var $M.484: [ref] i8;
var $M.484.dup: [ref] i1;
var $M.485: [ref] i8;
var $M.485.dup: [ref] i1;
var $M.486: [ref] i8;
var $M.486.dup: [ref] i1;
var $M.487: [ref] i8;
var $M.487.dup: [ref] i1;
var $M.488: [ref] i8;
var $M.488.dup: [ref] i1;
var $M.489: [ref] i8;
var $M.489.dup: [ref] i1;
var $M.490: [ref] i8;
var $M.490.dup: [ref] i1;
var $M.491: [ref] i8;
var $M.491.dup: [ref] i1;
var $M.492: [ref] i8;
var $M.492.dup: [ref] i1;
var $M.493: [ref] i8;
var $M.493.dup: [ref] i1;
var $M.494: [ref] i8;
var $M.494.dup: [ref] i1;
var $M.495: [ref] i8;
var $M.495.dup: [ref] i1;
var $M.496: [ref] i8;
var $M.496.dup: [ref] i1;
var $M.497: [ref] i8;
var $M.497.dup: [ref] i1;
var $M.498: [ref] i8;
var $M.498.dup: [ref] i1;
var $M.499: [ref] i8;
var $M.499.dup: [ref] i1;
var $M.500: [ref] i8;
var $M.500.dup: [ref] i1;
var $M.501: [ref] i8;
var $M.501.dup: [ref] i1;
var $M.502: [ref] i8;
var $M.502.dup: [ref] i1;
var $M.503: [ref] i8;
var $M.503.dup: [ref] i1;
var $M.504: [ref] i8;
var $M.504.dup: [ref] i1;
var $M.505: [ref] i8;
var $M.505.dup: [ref] i1;
var $M.506: [ref] i8;
var $M.506.dup: [ref] i1;
var $M.507: [ref] i8;
var $M.507.dup: [ref] i1;
var $M.508: [ref] i8;
var $M.508.dup: [ref] i1;
var $M.509: [ref] i8;
var $M.509.dup: [ref] i1;
var $M.510: [ref] i8;
var $M.510.dup: [ref] i1;
var $M.511: [ref] i8;
var $M.511.dup: [ref] i1;
var $M.512: [ref] i8;
var $M.512.dup: [ref] i1;
var $M.513: [ref] i8;
var $M.513.dup: [ref] i1;
var $M.514: [ref] i8;
var $M.514.dup: [ref] i1;
var $M.515: [ref] i8;
var $M.515.dup: [ref] i1;
var $M.516: [ref] i8;
var $M.516.dup: [ref] i1;
var $M.517: [ref] i8;
var $M.517.dup: [ref] i1;
var $M.518: [ref] i8;
var $M.518.dup: [ref] i1;
var $M.519: [ref] i8;
var $M.519.dup: [ref] i1;
var $M.520: [ref] i8;
var $M.520.dup: [ref] i1;
var $M.521: [ref] i8;
var $M.521.dup: [ref] i1;
var $M.522: [ref] i8;
var $M.522.dup: [ref] i1;
var $M.523: [ref] i8;
var $M.523.dup: [ref] i1;
var $M.524: [ref] i8;
var $M.524.dup: [ref] i1;
var $M.525: [ref] i8;
var $M.525.dup: [ref] i1;
var $M.526: [ref] i8;
var $M.526.dup: [ref] i1;
var $M.527: [ref] i8;
var $M.527.dup: [ref] i1;
var $M.528: [ref] i8;
var $M.528.dup: [ref] i1;
var $M.529: [ref] i8;
var $M.529.dup: [ref] i1;
var $M.530: [ref] i8;
var $M.530.dup: [ref] i1;
var $M.531: [ref] i8;
var $M.531.dup: [ref] i1;
var $M.532: [ref] i8;
var $M.532.dup: [ref] i1;
var $M.533: [ref] i8;
var $M.533.dup: [ref] i1;
var $M.534: [ref] i8;
var $M.534.dup: [ref] i1;
var $M.535: [ref] i8;
var $M.535.dup: [ref] i1;
var $M.536: [ref] i8;
var $M.536.dup: [ref] i1;
var $M.537: [ref] i8;
var $M.537.dup: [ref] i1;
var $M.538: [ref] i8;
var $M.538.dup: [ref] i1;
var $M.539: [ref] i8;
var $M.539.dup: [ref] i1;
var $M.540: [ref] i8;
var $M.540.dup: [ref] i1;
var $M.541: [ref] i8;
var $M.541.dup: [ref] i1;
var $M.542: [ref] i8;
var $M.542.dup: [ref] i1;
var $M.543: [ref] i8;
var $M.543.dup: [ref] i1;
var $M.544: [ref] i8;
var $M.544.dup: [ref] i1;
var $M.545: [ref] i8;
var $M.545.dup: [ref] i1;
var $M.546: [ref] i8;
var $M.546.dup: [ref] i1;
var $M.547: [ref] i8;
var $M.547.dup: [ref] i1;
var $M.548: [ref] i8;
var $M.548.dup: [ref] i1;
var $M.549: [ref] i8;
var $M.549.dup: [ref] i1;
var $M.550: [ref] i8;
var $M.550.dup: [ref] i1;
var $M.551: [ref] i8;
var $M.551.dup: [ref] i1;
var $M.552: [ref] i8;
var $M.552.dup: [ref] i1;
var $M.553: [ref] i8;
var $M.553.dup: [ref] i1;
var $M.554: [ref] i8;
var $M.554.dup: [ref] i1;
var $M.555: [ref] i8;
var $M.555.dup: [ref] i1;
var $M.556: [ref] i8;
var $M.556.dup: [ref] i1;
var $M.557: [ref] i8;
var $M.557.dup: [ref] i1;
var $M.558: [ref] i8;
var $M.558.dup: [ref] i1;
var $M.559: [ref] i8;
var $M.559.dup: [ref] i1;
var $M.560: [ref] i8;
var $M.560.dup: [ref] i1;
var $M.561: [ref] i8;
var $M.561.dup: [ref] i1;
var $M.562: [ref] i8;
var $M.562.dup: [ref] i1;
var $M.563: [ref] i8;
var $M.563.dup: [ref] i1;
var $M.564: [ref] i8;
var $M.564.dup: [ref] i1;
var $M.565: [ref] i8;
var $M.565.dup: [ref] i1;
var $M.566: [ref] i8;
var $M.566.dup: [ref] i1;
var $M.567: [ref] i8;
var $M.567.dup: [ref] i1;
var $M.568: [ref] i8;
var $M.568.dup: [ref] i1;
var $M.569: [ref] i8;
var $M.569.dup: [ref] i1;
var $M.570: [ref] i8;
var $M.570.dup: [ref] i1;
var $M.571: [ref] i8;
var $M.571.dup: [ref] i1;
var $M.572: [ref] i8;
var $M.572.dup: [ref] i1;
var $M.573: [ref] i8;
var $M.573.dup: [ref] i1;
var $M.574: [ref] i8;
var $M.574.dup: [ref] i1;
var $M.575: [ref] i8;
var $M.575.dup: [ref] i1;
var $M.576: [ref] i8;
var $M.576.dup: [ref] i1;
var $M.577: [ref] i8;
var $M.577.dup: [ref] i1;
var $M.578: [ref] i8;
var $M.578.dup: [ref] i1;
var $M.579: [ref] i8;
var $M.579.dup: [ref] i1;
var $M.580: [ref] i8;
var $M.580.dup: [ref] i1;
var $M.581: [ref] i8;
var $M.581.dup: [ref] i1;
var $M.582: [ref] i8;
var $M.582.dup: [ref] i1;
var $M.583: [ref] i8;
var $M.583.dup: [ref] i1;
var $M.584: [ref] i8;
var $M.584.dup: [ref] i1;
var $M.585: [ref] i8;
var $M.585.dup: [ref] i1;
var $M.586: [ref] i8;
var $M.586.dup: [ref] i1;
var $M.587: [ref] i8;
var $M.587.dup: [ref] i1;
var $M.588: [ref] i8;
var $M.588.dup: [ref] i1;
var $M.589: [ref] i8;
var $M.589.dup: [ref] i1;
var $M.590: [ref] i8;
var $M.590.dup: [ref] i1;
var $M.591: [ref] i8;
var $M.591.dup: [ref] i1;
var $M.592: [ref] i8;
var $M.592.dup: [ref] i1;
var $M.593: [ref] i8;
var $M.593.dup: [ref] i1;
var $M.594: [ref] i8;
var $M.594.dup: [ref] i1;
var $M.595: [ref] i8;
var $M.595.dup: [ref] i1;
var $M.596: [ref] i8;
var $M.596.dup: [ref] i1;
var $M.597: [ref] i8;
var $M.597.dup: [ref] i1;
var $M.598: [ref] i8;
var $M.598.dup: [ref] i1;
var $M.599: [ref] i8;
var $M.599.dup: [ref] i1;
var $M.600: [ref] i8;
var $M.600.dup: [ref] i1;
var $M.601: [ref] i8;
var $M.601.dup: [ref] i1;
var $M.602: [ref] i8;
var $M.602.dup: [ref] i1;
var $M.603: [ref] i8;
var $M.603.dup: [ref] i1;
var $M.604: [ref] i8;
var $M.604.dup: [ref] i1;
var $M.605: [ref] i8;
var $M.605.dup: [ref] i1;
var $M.606: [ref] i8;
var $M.606.dup: [ref] i1;
var $M.607: [ref] i8;
var $M.607.dup: [ref] i1;
var $M.608: [ref] i8;
var $M.608.dup: [ref] i1;
var $M.609: [ref] i8;
var $M.609.dup: [ref] i1;
var $M.610: [ref] i8;
var $M.610.dup: [ref] i1;
var $M.611: [ref] i8;
var $M.611.dup: [ref] i1;
var $M.612: [ref] i8;
var $M.612.dup: [ref] i1;
var $M.613: [ref] i8;
var $M.613.dup: [ref] i1;
var $M.614: [ref] i8;
var $M.614.dup: [ref] i1;
var $M.615: [ref] i8;
var $M.615.dup: [ref] i1;
var $M.616: [ref] i8;
var $M.616.dup: [ref] i1;
var $M.617: [ref] i8;
var $M.617.dup: [ref] i1;
var $M.618: [ref] i8;
var $M.618.dup: [ref] i1;
var $M.619: [ref] i8;
var $M.619.dup: [ref] i1;
var $M.620: [ref] i8;
var $M.620.dup: [ref] i1;
var $M.621: [ref] i8;
var $M.621.dup: [ref] i1;
var $M.622: [ref] i8;
var $M.622.dup: [ref] i1;
var $M.623: [ref] i8;
var $M.623.dup: [ref] i1;
var $M.624: [ref] i8;
var $M.624.dup: [ref] i1;
var $M.625: [ref] i8;
var $M.625.dup: [ref] i1;
var $M.626: [ref] i8;
var $M.626.dup: [ref] i1;
var $M.627: [ref] i8;
var $M.627.dup: [ref] i1;
var $M.628: [ref] i8;
var $M.628.dup: [ref] i1;
var $M.629: [ref] i8;
var $M.629.dup: [ref] i1;
var $M.630: [ref] i8;
var $M.630.dup: [ref] i1;
var $M.631: [ref] i8;
var $M.631.dup: [ref] i1;
var $M.632: [ref] i8;
var $M.632.dup: [ref] i1;
var $M.633: [ref] i8;
var $M.633.dup: [ref] i1;
var $M.634: [ref] i8;
var $M.634.dup: [ref] i1;
var $M.635: [ref] i8;
var $M.635.dup: [ref] i1;
var $M.636: [ref] i8;
var $M.636.dup: [ref] i1;
var $M.637: [ref] i8;
var $M.637.dup: [ref] i1;
var $M.638: [ref] i8;
var $M.638.dup: [ref] i1;
var $M.639: [ref] i8;
var $M.639.dup: [ref] i1;
var $M.640: [ref] i8;
var $M.640.dup: [ref] i1;
var $M.641: [ref] i8;
var $M.641.dup: [ref] i1;
var $M.642: [ref] i8;
var $M.642.dup: [ref] i1;
var $M.643: [ref] i8;
var $M.643.dup: [ref] i1;
var $M.644: [ref] i8;
var $M.644.dup: [ref] i1;
var $M.645: [ref] i8;
var $M.645.dup: [ref] i1;
var $M.646: [ref] i8;
var $M.646.dup: [ref] i1;
var $M.647: [ref] i8;
var $M.647.dup: [ref] i1;
var $M.648: [ref] i8;
var $M.648.dup: [ref] i1;
var $M.649: [ref] i8;
var $M.649.dup: [ref] i1;
var $M.650: [ref] i8;
var $M.650.dup: [ref] i1;
var $M.651: [ref] i8;
var $M.651.dup: [ref] i1;
var $M.652: [ref] i8;
var $M.652.dup: [ref] i1;
var $M.653: [ref] i8;
var $M.653.dup: [ref] i1;
var $M.654: [ref] i8;
var $M.654.dup: [ref] i1;
var $M.655: [ref] i8;
var $M.655.dup: [ref] i1;
var $M.656: [ref] i8;
var $M.656.dup: [ref] i1;
var $M.657: [ref] i8;
var $M.657.dup: [ref] i1;
var $M.658: [ref] i8;
var $M.658.dup: [ref] i1;
var $M.659: [ref] i8;
var $M.659.dup: [ref] i1;
var $M.660: [ref] i8;
var $M.660.dup: [ref] i1;
var $M.661: [ref] i8;
var $M.661.dup: [ref] i1;
var $M.662: [ref] i8;
var $M.662.dup: [ref] i1;
var $M.663: [ref] i8;
var $M.663.dup: [ref] i1;
var $M.664: [ref] i8;
var $M.664.dup: [ref] i1;
var $M.665: [ref] i8;
var $M.665.dup: [ref] i1;
var $M.666: [ref] i8;
var $M.666.dup: [ref] i1;
var $M.667: [ref] i8;
var $M.667.dup: [ref] i1;
var $M.668: [ref] i8;
var $M.668.dup: [ref] i1;
var $M.669: [ref] i8;
var $M.669.dup: [ref] i1;
var $M.670: [ref] i8;
var $M.670.dup: [ref] i1;
var $M.671: [ref] i8;
var $M.671.dup: [ref] i1;
var $M.672: [ref] i8;
var $M.672.dup: [ref] i1;
var $M.673: [ref] i8;
var $M.673.dup: [ref] i1;
var $M.674: [ref] i8;
var $M.674.dup: [ref] i1;
var $M.675: [ref] i8;
var $M.675.dup: [ref] i1;
var $M.676: [ref] i8;
var $M.676.dup: [ref] i1;
var $M.677: [ref] i8;
var $M.677.dup: [ref] i1;
var $M.678: [ref] i8;
var $M.678.dup: [ref] i1;
var $M.679: [ref] i8;
var $M.679.dup: [ref] i1;
var $M.680: [ref] i8;
var $M.680.dup: [ref] i1;
var $M.681: [ref] i8;
var $M.681.dup: [ref] i1;
var $M.682: [ref] i8;
var $M.682.dup: [ref] i1;
var $M.683: [ref] i8;
var $M.683.dup: [ref] i1;
var $M.684: [ref] i8;
var $M.684.dup: [ref] i1;
var $M.685: [ref] i8;
var $M.685.dup: [ref] i1;
var $M.686: [ref] i8;
var $M.686.dup: [ref] i1;
var $M.687: [ref] i8;
var $M.687.dup: [ref] i1;
var $M.688: [ref] i8;
var $M.688.dup: [ref] i1;
var $M.689: [ref] i8;
var $M.689.dup: [ref] i1;
var $M.690: [ref] i8;
var $M.690.dup: [ref] i1;
var $M.691: [ref] i8;
var $M.691.dup: [ref] i1;
var $M.692: [ref] i8;
var $M.692.dup: [ref] i1;
var $M.693: [ref] i8;
var $M.693.dup: [ref] i1;
var $M.694: [ref] i8;
var $M.694.dup: [ref] i1;
var $M.695: [ref] ref;
var $M.695.dup: [ref] i1;
axiom ($GLOBALS_BOTTOM == $sub.ref(0,54696));
axiom ($EXTERNS_BOTTOM == $add.ref($GLOBALS_BOTTOM,$sub.ref(0,32768)));
axiom ($MALLOC_TOP == 9223372036854775807);
function {:inline} $isExternal(p: ref) returns (bool) { $slt.ref.bool(p,$EXTERNS_BOTTOM) }
function {:builtin "(_ int2bv 64)"} $int2bv.64(i: i64) returns (bv64);
function {:builtin "bv2nat"} $bv2int.64(i: bv64) returns (i64);
function {:inline} $add.i1(i1: i1, i2: i1) returns (i1) { (i1 + i2) }
function {:inline} $add.i5(i1: i5, i2: i5) returns (i5) { (i1 + i2) }
function {:inline} $add.i6(i1: i6, i2: i6) returns (i6) { (i1 + i2) }
function {:inline} $add.i8(i1: i8, i2: i8) returns (i8) { (i1 + i2) }
function {:inline} $add.i16(i1: i16, i2: i16) returns (i16) { (i1 + i2) }
function {:inline} $add.i24(i1: i24, i2: i24) returns (i24) { (i1 + i2) }
function {:inline} $add.i32(i1: i32, i2: i32) returns (i32) { (i1 + i2) }
function {:inline} $add.i33(i1: i33, i2: i33) returns (i33) { (i1 + i2) }
function {:inline} $add.i40(i1: i40, i2: i40) returns (i40) { (i1 + i2) }
function {:inline} $add.i48(i1: i48, i2: i48) returns (i48) { (i1 + i2) }
function {:inline} $add.i56(i1: i56, i2: i56) returns (i56) { (i1 + i2) }
function {:inline} $add.i64(i1: i64, i2: i64) returns (i64) { (i1 + i2) }
function {:inline} $add.i80(i1: i80, i2: i80) returns (i80) { (i1 + i2) }
function {:inline} $add.i88(i1: i88, i2: i88) returns (i88) { (i1 + i2) }
function {:inline} $add.i96(i1: i96, i2: i96) returns (i96) { (i1 + i2) }
function {:inline} $add.i128(i1: i128, i2: i128) returns (i128) { (i1 + i2) }
function {:inline} $add.i160(i1: i160, i2: i160) returns (i160) { (i1 + i2) }
function {:inline} $add.i256(i1: i256, i2: i256) returns (i256) { (i1 + i2) }
function {:inline} $sub.i1(i1: i1, i2: i1) returns (i1) { (i1 - i2) }
function {:inline} $sub.i5(i1: i5, i2: i5) returns (i5) { (i1 - i2) }
function {:inline} $sub.i6(i1: i6, i2: i6) returns (i6) { (i1 - i2) }
function {:inline} $sub.i8(i1: i8, i2: i8) returns (i8) { (i1 - i2) }
function {:inline} $sub.i16(i1: i16, i2: i16) returns (i16) { (i1 - i2) }
function {:inline} $sub.i24(i1: i24, i2: i24) returns (i24) { (i1 - i2) }
function {:inline} $sub.i32(i1: i32, i2: i32) returns (i32) { (i1 - i2) }
function {:inline} $sub.i33(i1: i33, i2: i33) returns (i33) { (i1 - i2) }
function {:inline} $sub.i40(i1: i40, i2: i40) returns (i40) { (i1 - i2) }
function {:inline} $sub.i48(i1: i48, i2: i48) returns (i48) { (i1 - i2) }
function {:inline} $sub.i56(i1: i56, i2: i56) returns (i56) { (i1 - i2) }
function {:inline} $sub.i64(i1: i64, i2: i64) returns (i64) { (i1 - i2) }
function {:inline} $sub.i80(i1: i80, i2: i80) returns (i80) { (i1 - i2) }
function {:inline} $sub.i88(i1: i88, i2: i88) returns (i88) { (i1 - i2) }
function {:inline} $sub.i96(i1: i96, i2: i96) returns (i96) { (i1 - i2) }
function {:inline} $sub.i128(i1: i128, i2: i128) returns (i128) { (i1 - i2) }
function {:inline} $sub.i160(i1: i160, i2: i160) returns (i160) { (i1 - i2) }
function {:inline} $sub.i256(i1: i256, i2: i256) returns (i256) { (i1 - i2) }
function {:inline} $mul.i1(i1: i1, i2: i1) returns (i1) { (i1 * i2) }
function {:inline} $mul.i5(i1: i5, i2: i5) returns (i5) { (i1 * i2) }
function {:inline} $mul.i6(i1: i6, i2: i6) returns (i6) { (i1 * i2) }
function {:inline} $mul.i8(i1: i8, i2: i8) returns (i8) { (i1 * i2) }
function {:inline} $mul.i16(i1: i16, i2: i16) returns (i16) { (i1 * i2) }
function {:inline} $mul.i24(i1: i24, i2: i24) returns (i24) { (i1 * i2) }
function {:inline} $mul.i32(i1: i32, i2: i32) returns (i32) { (i1 * i2) }
function {:inline} $mul.i33(i1: i33, i2: i33) returns (i33) { (i1 * i2) }
function {:inline} $mul.i40(i1: i40, i2: i40) returns (i40) { (i1 * i2) }
function {:inline} $mul.i48(i1: i48, i2: i48) returns (i48) { (i1 * i2) }
function {:inline} $mul.i56(i1: i56, i2: i56) returns (i56) { (i1 * i2) }
function {:inline} $mul.i64(i1: i64, i2: i64) returns (i64) { (i1 * i2) }
function {:inline} $mul.i80(i1: i80, i2: i80) returns (i80) { (i1 * i2) }
function {:inline} $mul.i88(i1: i88, i2: i88) returns (i88) { (i1 * i2) }
function {:inline} $mul.i96(i1: i96, i2: i96) returns (i96) { (i1 * i2) }
function {:inline} $mul.i128(i1: i128, i2: i128) returns (i128) { (i1 * i2) }
function {:inline} $mul.i160(i1: i160, i2: i160) returns (i160) { (i1 * i2) }
function {:inline} $mul.i256(i1: i256, i2: i256) returns (i256) { (i1 * i2) }
function {:builtin "div"} $idiv.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "div"} $idiv.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "div"} $idiv.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "div"} $idiv.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "div"} $idiv.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "div"} $idiv.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "div"} $idiv.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "div"} $idiv.i33(i1: i33, i2: i33) returns (i33);
function {:builtin "div"} $idiv.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "div"} $idiv.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "div"} $idiv.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "div"} $idiv.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "div"} $idiv.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "div"} $idiv.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "div"} $idiv.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "div"} $idiv.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "div"} $idiv.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "div"} $idiv.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $sdiv.i1(i1: i1, i2: i1) returns (i1) { $idiv.i1(i1,i2) }
function {:inline} $sdiv.i5(i1: i5, i2: i5) returns (i5) { $idiv.i5(i1,i2) }
function {:inline} $sdiv.i6(i1: i6, i2: i6) returns (i6) { $idiv.i6(i1,i2) }
function {:inline} $sdiv.i8(i1: i8, i2: i8) returns (i8) { $idiv.i8(i1,i2) }
function {:inline} $sdiv.i16(i1: i16, i2: i16) returns (i16) { $idiv.i16(i1,i2) }
function {:inline} $sdiv.i24(i1: i24, i2: i24) returns (i24) { $idiv.i24(i1,i2) }
function {:inline} $sdiv.i32(i1: i32, i2: i32) returns (i32) { $idiv.i32(i1,i2) }
function {:inline} $sdiv.i33(i1: i33, i2: i33) returns (i33) { $idiv.i33(i1,i2) }
function {:inline} $sdiv.i40(i1: i40, i2: i40) returns (i40) { $idiv.i40(i1,i2) }
function {:inline} $sdiv.i48(i1: i48, i2: i48) returns (i48) { $idiv.i48(i1,i2) }
function {:inline} $sdiv.i56(i1: i56, i2: i56) returns (i56) { $idiv.i56(i1,i2) }
function {:inline} $sdiv.i64(i1: i64, i2: i64) returns (i64) { $idiv.i64(i1,i2) }
function {:inline} $sdiv.i80(i1: i80, i2: i80) returns (i80) { $idiv.i80(i1,i2) }
function {:inline} $sdiv.i88(i1: i88, i2: i88) returns (i88) { $idiv.i88(i1,i2) }
function {:inline} $sdiv.i96(i1: i96, i2: i96) returns (i96) { $idiv.i96(i1,i2) }
function {:inline} $sdiv.i128(i1: i128, i2: i128) returns (i128) { $idiv.i128(i1,i2) }
function {:inline} $sdiv.i160(i1: i160, i2: i160) returns (i160) { $idiv.i160(i1,i2) }
function {:inline} $sdiv.i256(i1: i256, i2: i256) returns (i256) { $idiv.i256(i1,i2) }
function {:inline} $udiv.i1(i1: i1, i2: i1) returns (i1) { $idiv.i1(i1,i2) }
function {:inline} $udiv.i5(i1: i5, i2: i5) returns (i5) { $idiv.i5(i1,i2) }
function {:inline} $udiv.i6(i1: i6, i2: i6) returns (i6) { $idiv.i6(i1,i2) }
function {:inline} $udiv.i8(i1: i8, i2: i8) returns (i8) { $idiv.i8(i1,i2) }
function {:inline} $udiv.i16(i1: i16, i2: i16) returns (i16) { $idiv.i16(i1,i2) }
function {:inline} $udiv.i24(i1: i24, i2: i24) returns (i24) { $idiv.i24(i1,i2) }
function {:inline} $udiv.i32(i1: i32, i2: i32) returns (i32) { $idiv.i32(i1,i2) }
function {:inline} $udiv.i33(i1: i33, i2: i33) returns (i33) { $idiv.i33(i1,i2) }
function {:inline} $udiv.i40(i1: i40, i2: i40) returns (i40) { $idiv.i40(i1,i2) }
function {:inline} $udiv.i48(i1: i48, i2: i48) returns (i48) { $idiv.i48(i1,i2) }
function {:inline} $udiv.i56(i1: i56, i2: i56) returns (i56) { $idiv.i56(i1,i2) }
function {:inline} $udiv.i64(i1: i64, i2: i64) returns (i64) { $idiv.i64(i1,i2) }
function {:inline} $udiv.i80(i1: i80, i2: i80) returns (i80) { $idiv.i80(i1,i2) }
function {:inline} $udiv.i88(i1: i88, i2: i88) returns (i88) { $idiv.i88(i1,i2) }
function {:inline} $udiv.i96(i1: i96, i2: i96) returns (i96) { $idiv.i96(i1,i2) }
function {:inline} $udiv.i128(i1: i128, i2: i128) returns (i128) { $idiv.i128(i1,i2) }
function {:inline} $udiv.i160(i1: i160, i2: i160) returns (i160) { $idiv.i160(i1,i2) }
function {:inline} $udiv.i256(i1: i256, i2: i256) returns (i256) { $idiv.i256(i1,i2) }
function {:builtin "mod"} $smod.i1(i1: i1, i2: i1) returns (i1);
function {:builtin "mod"} $smod.i5(i1: i5, i2: i5) returns (i5);
function {:builtin "mod"} $smod.i6(i1: i6, i2: i6) returns (i6);
function {:builtin "mod"} $smod.i8(i1: i8, i2: i8) returns (i8);
function {:builtin "mod"} $smod.i16(i1: i16, i2: i16) returns (i16);
function {:builtin "mod"} $smod.i24(i1: i24, i2: i24) returns (i24);
function {:builtin "mod"} $smod.i32(i1: i32, i2: i32) returns (i32);
function {:builtin "mod"} $smod.i33(i1: i33, i2: i33) returns (i33);
function {:builtin "mod"} $smod.i40(i1: i40, i2: i40) returns (i40);
function {:builtin "mod"} $smod.i48(i1: i48, i2: i48) returns (i48);
function {:builtin "mod"} $smod.i56(i1: i56, i2: i56) returns (i56);
function {:builtin "mod"} $smod.i64(i1: i64, i2: i64) returns (i64);
function {:builtin "mod"} $smod.i80(i1: i80, i2: i80) returns (i80);
function {:builtin "mod"} $smod.i88(i1: i88, i2: i88) returns (i88);
function {:builtin "mod"} $smod.i96(i1: i96, i2: i96) returns (i96);
function {:builtin "mod"} $smod.i128(i1: i128, i2: i128) returns (i128);
function {:builtin "mod"} $smod.i160(i1: i160, i2: i160) returns (i160);
function {:builtin "mod"} $smod.i256(i1: i256, i2: i256) returns (i256);
function {:inline} $srem.i1(i1: i1, i2: i1) returns (i1) { (if ($ne.i1.bool($smod.i1(i1,i2),0) && $slt.i1.bool(i1,0)) then $sub.i1($smod.i1(i1,i2),$smax.i1(i2,$sub.i1(0,i2))) else $smod.i1(i1,i2)) }
function {:inline} $srem.i5(i1: i5, i2: i5) returns (i5) { (if ($ne.i5.bool($smod.i5(i1,i2),0) && $slt.i5.bool(i1,0)) then $sub.i5($smod.i5(i1,i2),$smax.i5(i2,$sub.i5(0,i2))) else $smod.i5(i1,i2)) }
function {:inline} $srem.i6(i1: i6, i2: i6) returns (i6) { (if ($ne.i6.bool($smod.i6(i1,i2),0) && $slt.i6.bool(i1,0)) then $sub.i6($smod.i6(i1,i2),$smax.i6(i2,$sub.i6(0,i2))) else $smod.i6(i1,i2)) }
function {:inline} $srem.i8(i1: i8, i2: i8) returns (i8) { (if ($ne.i8.bool($smod.i8(i1,i2),0) && $slt.i8.bool(i1,0)) then $sub.i8($smod.i8(i1,i2),$smax.i8(i2,$sub.i8(0,i2))) else $smod.i8(i1,i2)) }
function {:inline} $srem.i16(i1: i16, i2: i16) returns (i16) { (if ($ne.i16.bool($smod.i16(i1,i2),0) && $slt.i16.bool(i1,0)) then $sub.i16($smod.i16(i1,i2),$smax.i16(i2,$sub.i16(0,i2))) else $smod.i16(i1,i2)) }
function {:inline} $srem.i24(i1: i24, i2: i24) returns (i24) { (if ($ne.i24.bool($smod.i24(i1,i2),0) && $slt.i24.bool(i1,0)) then $sub.i24($smod.i24(i1,i2),$smax.i24(i2,$sub.i24(0,i2))) else $smod.i24(i1,i2)) }
function {:inline} $srem.i32(i1: i32, i2: i32) returns (i32) { (if ($ne.i32.bool($smod.i32(i1,i2),0) && $slt.i32.bool(i1,0)) then $sub.i32($smod.i32(i1,i2),$smax.i32(i2,$sub.i32(0,i2))) else $smod.i32(i1,i2)) }
function {:inline} $srem.i33(i1: i33, i2: i33) returns (i33) { (if ($ne.i33.bool($smod.i33(i1,i2),0) && $slt.i33.bool(i1,0)) then $sub.i33($smod.i33(i1,i2),$smax.i33(i2,$sub.i33(0,i2))) else $smod.i33(i1,i2)) }
function {:inline} $srem.i40(i1: i40, i2: i40) returns (i40) { (if ($ne.i40.bool($smod.i40(i1,i2),0) && $slt.i40.bool(i1,0)) then $sub.i40($smod.i40(i1,i2),$smax.i40(i2,$sub.i40(0,i2))) else $smod.i40(i1,i2)) }
function {:inline} $srem.i48(i1: i48, i2: i48) returns (i48) { (if ($ne.i48.bool($smod.i48(i1,i2),0) && $slt.i48.bool(i1,0)) then $sub.i48($smod.i48(i1,i2),$smax.i48(i2,$sub.i48(0,i2))) else $smod.i48(i1,i2)) }
function {:inline} $srem.i56(i1: i56, i2: i56) returns (i56) { (if ($ne.i56.bool($smod.i56(i1,i2),0) && $slt.i56.bool(i1,0)) then $sub.i56($smod.i56(i1,i2),$smax.i56(i2,$sub.i56(0,i2))) else $smod.i56(i1,i2)) }
function {:inline} $srem.i64(i1: i64, i2: i64) returns (i64) { (if ($ne.i64.bool($smod.i64(i1,i2),0) && $slt.i64.bool(i1,0)) then $sub.i64($smod.i64(i1,i2),$smax.i64(i2,$sub.i64(0,i2))) else $smod.i64(i1,i2)) }
function {:inline} $srem.i80(i1: i80, i2: i80) returns (i80) { (if ($ne.i80.bool($smod.i80(i1,i2),0) && $slt.i80.bool(i1,0)) then $sub.i80($smod.i80(i1,i2),$smax.i80(i2,$sub.i80(0,i2))) else $smod.i80(i1,i2)) }
function {:inline} $srem.i88(i1: i88, i2: i88) returns (i88) { (if ($ne.i88.bool($smod.i88(i1,i2),0) && $slt.i88.bool(i1,0)) then $sub.i88($smod.i88(i1,i2),$smax.i88(i2,$sub.i88(0,i2))) else $smod.i88(i1,i2)) }
function {:inline} $srem.i96(i1: i96, i2: i96) returns (i96) { (if ($ne.i96.bool($smod.i96(i1,i2),0) && $slt.i96.bool(i1,0)) then $sub.i96($smod.i96(i1,i2),$smax.i96(i2,$sub.i96(0,i2))) else $smod.i96(i1,i2)) }
function {:inline} $srem.i128(i1: i128, i2: i128) returns (i128) { (if ($ne.i128.bool($smod.i128(i1,i2),0) && $slt.i128.bool(i1,0)) then $sub.i128($smod.i128(i1,i2),$smax.i128(i2,$sub.i128(0,i2))) else $smod.i128(i1,i2)) }
function {:inline} $srem.i160(i1: i160, i2: i160) returns (i160) { (if ($ne.i160.bool($smod.i160(i1,i2),0) && $slt.i160.bool(i1,0)) then $sub.i160($smod.i160(i1,i2),$smax.i160(i2,$sub.i160(0,i2))) else $smod.i160(i1,i2)) }
function {:inline} $srem.i256(i1: i256, i2: i256) returns (i256) { (if ($ne.i256.bool($smod.i256(i1,i2),0) && $slt.i256.bool(i1,0)) then $sub.i256($smod.i256(i1,i2),$smax.i256(i2,$sub.i256(0,i2))) else $smod.i256(i1,i2)) }
function {:inline} $urem.i1(i1: i1, i2: i1) returns (i1) { $smod.i1(i1,i2) }
function {:inline} $urem.i5(i1: i5, i2: i5) returns (i5) { $smod.i5(i1,i2) }
function {:inline} $urem.i6(i1: i6, i2: i6) returns (i6) { $smod.i6(i1,i2) }
function {:inline} $urem.i8(i1: i8, i2: i8) returns (i8) { $smod.i8(i1,i2) }
function {:inline} $urem.i16(i1: i16, i2: i16) returns (i16) { $smod.i16(i1,i2) }
function {:inline} $urem.i24(i1: i24, i2: i24) returns (i24) { $smod.i24(i1,i2) }
function {:inline} $urem.i32(i1: i32, i2: i32) returns (i32) { $smod.i32(i1,i2) }
function {:inline} $urem.i33(i1: i33, i2: i33) returns (i33) { $smod.i33(i1,i2) }
function {:inline} $urem.i40(i1: i40, i2: i40) returns (i40) { $smod.i40(i1,i2) }
function {:inline} $urem.i48(i1: i48, i2: i48) returns (i48) { $smod.i48(i1,i2) }
function {:inline} $urem.i56(i1: i56, i2: i56) returns (i56) { $smod.i56(i1,i2) }
function {:inline} $urem.i64(i1: i64, i2: i64) returns (i64) { $smod.i64(i1,i2) }
function {:inline} $urem.i80(i1: i80, i2: i80) returns (i80) { $smod.i80(i1,i2) }
function {:inline} $urem.i88(i1: i88, i2: i88) returns (i88) { $smod.i88(i1,i2) }
function {:inline} $urem.i96(i1: i96, i2: i96) returns (i96) { $smod.i96(i1,i2) }
function {:inline} $urem.i128(i1: i128, i2: i128) returns (i128) { $smod.i128(i1,i2) }
function {:inline} $urem.i160(i1: i160, i2: i160) returns (i160) { $smod.i160(i1,i2) }
function {:inline} $urem.i256(i1: i256, i2: i256) returns (i256) { $smod.i256(i1,i2) }
function $shl.i1(i1: i1, i2: i1) returns (i1);
function $shl.i5(i1: i5, i2: i5) returns (i5);
function $shl.i6(i1: i6, i2: i6) returns (i6);
function $shl.i8(i1: i8, i2: i8) returns (i8);
function $shl.i16(i1: i16, i2: i16) returns (i16);
function $shl.i24(i1: i24, i2: i24) returns (i24);
function $shl.i32(i1: i32, i2: i32) returns (i32);
function $shl.i33(i1: i33, i2: i33) returns (i33);
function $shl.i40(i1: i40, i2: i40) returns (i40);
function $shl.i48(i1: i48, i2: i48) returns (i48);
function $shl.i56(i1: i56, i2: i56) returns (i56);
function $shl.i64(i1: i64, i2: i64) returns (i64);
function $shl.i80(i1: i80, i2: i80) returns (i80);
function $shl.i88(i1: i88, i2: i88) returns (i88);
function $shl.i96(i1: i96, i2: i96) returns (i96);
function $shl.i128(i1: i128, i2: i128) returns (i128);
function $shl.i160(i1: i160, i2: i160) returns (i160);
function $shl.i256(i1: i256, i2: i256) returns (i256);
function $lshr.i1(i1: i1, i2: i1) returns (i1);
function $lshr.i5(i1: i5, i2: i5) returns (i5);
function $lshr.i6(i1: i6, i2: i6) returns (i6);
function $lshr.i8(i1: i8, i2: i8) returns (i8);
function $lshr.i16(i1: i16, i2: i16) returns (i16);
function $lshr.i24(i1: i24, i2: i24) returns (i24);
function $lshr.i32(i1: i32, i2: i32) returns (i32);
function $lshr.i33(i1: i33, i2: i33) returns (i33);
function $lshr.i40(i1: i40, i2: i40) returns (i40);
function $lshr.i48(i1: i48, i2: i48) returns (i48);
function $lshr.i56(i1: i56, i2: i56) returns (i56);
function $lshr.i64(i1: i64, i2: i64) returns (i64);
function $lshr.i80(i1: i80, i2: i80) returns (i80);
function $lshr.i88(i1: i88, i2: i88) returns (i88);
function $lshr.i96(i1: i96, i2: i96) returns (i96);
function $lshr.i128(i1: i128, i2: i128) returns (i128);
function $lshr.i160(i1: i160, i2: i160) returns (i160);
function $lshr.i256(i1: i256, i2: i256) returns (i256);
function $ashr.i1(i1: i1, i2: i1) returns (i1);
function $ashr.i5(i1: i5, i2: i5) returns (i5);
function $ashr.i6(i1: i6, i2: i6) returns (i6);
function $ashr.i8(i1: i8, i2: i8) returns (i8);
function $ashr.i16(i1: i16, i2: i16) returns (i16);
function $ashr.i24(i1: i24, i2: i24) returns (i24);
function $ashr.i32(i1: i32, i2: i32) returns (i32);
function $ashr.i33(i1: i33, i2: i33) returns (i33);
function $ashr.i40(i1: i40, i2: i40) returns (i40);
function $ashr.i48(i1: i48, i2: i48) returns (i48);
function $ashr.i56(i1: i56, i2: i56) returns (i56);
function $ashr.i64(i1: i64, i2: i64) returns (i64);
function $ashr.i80(i1: i80, i2: i80) returns (i80);
function $ashr.i88(i1: i88, i2: i88) returns (i88);
function $ashr.i96(i1: i96, i2: i96) returns (i96);
function $ashr.i128(i1: i128, i2: i128) returns (i128);
function $ashr.i160(i1: i160, i2: i160) returns (i160);
function $ashr.i256(i1: i256, i2: i256) returns (i256);
function $and.i1(i1: i1, i2: i1) returns (i1);
function $and.i5(i1: i5, i2: i5) returns (i5);
function $and.i6(i1: i6, i2: i6) returns (i6);
function $and.i8(i1: i8, i2: i8) returns (i8);
function $and.i16(i1: i16, i2: i16) returns (i16);
function $and.i24(i1: i24, i2: i24) returns (i24);
function $and.i32(i1: i32, i2: i32) returns (i32);
function $and.i33(i1: i33, i2: i33) returns (i33);
function $and.i40(i1: i40, i2: i40) returns (i40);
function $and.i48(i1: i48, i2: i48) returns (i48);
function $and.i56(i1: i56, i2: i56) returns (i56);
function $and.i64(i1: i64, i2: i64) returns (i64);
function $and.i80(i1: i80, i2: i80) returns (i80);
function $and.i88(i1: i88, i2: i88) returns (i88);
function $and.i96(i1: i96, i2: i96) returns (i96);
function $and.i128(i1: i128, i2: i128) returns (i128);
function $and.i160(i1: i160, i2: i160) returns (i160);
function $and.i256(i1: i256, i2: i256) returns (i256);
function $or.i1(i1: i1, i2: i1) returns (i1);
function $or.i5(i1: i5, i2: i5) returns (i5);
function $or.i6(i1: i6, i2: i6) returns (i6);
function $or.i8(i1: i8, i2: i8) returns (i8);
function $or.i16(i1: i16, i2: i16) returns (i16);
function $or.i24(i1: i24, i2: i24) returns (i24);
function $or.i32(i1: i32, i2: i32) returns (i32);
function $or.i33(i1: i33, i2: i33) returns (i33);
function $or.i40(i1: i40, i2: i40) returns (i40);
function $or.i48(i1: i48, i2: i48) returns (i48);
function $or.i56(i1: i56, i2: i56) returns (i56);
function $or.i64(i1: i64, i2: i64) returns (i64);
function $or.i80(i1: i80, i2: i80) returns (i80);
function $or.i88(i1: i88, i2: i88) returns (i88);
function $or.i96(i1: i96, i2: i96) returns (i96);
function $or.i128(i1: i128, i2: i128) returns (i128);
function $or.i160(i1: i160, i2: i160) returns (i160);
function $or.i256(i1: i256, i2: i256) returns (i256);
function $xor.i1(i1: i1, i2: i1) returns (i1);
function $xor.i5(i1: i5, i2: i5) returns (i5);
function $xor.i6(i1: i6, i2: i6) returns (i6);
function $xor.i8(i1: i8, i2: i8) returns (i8);
function $xor.i16(i1: i16, i2: i16) returns (i16);
function $xor.i24(i1: i24, i2: i24) returns (i24);
function $xor.i32(i1: i32, i2: i32) returns (i32);
function $xor.i33(i1: i33, i2: i33) returns (i33);
function $xor.i40(i1: i40, i2: i40) returns (i40);
function $xor.i48(i1: i48, i2: i48) returns (i48);
function $xor.i56(i1: i56, i2: i56) returns (i56);
function $xor.i64(i1: i64, i2: i64) returns (i64);
function $xor.i80(i1: i80, i2: i80) returns (i80);
function $xor.i88(i1: i88, i2: i88) returns (i88);
function $xor.i96(i1: i96, i2: i96) returns (i96);
function $xor.i128(i1: i128, i2: i128) returns (i128);
function $xor.i160(i1: i160, i2: i160) returns (i160);
function $xor.i256(i1: i256, i2: i256) returns (i256);
function $nand.i1(i1: i1, i2: i1) returns (i1);
function $nand.i5(i1: i5, i2: i5) returns (i5);
function $nand.i6(i1: i6, i2: i6) returns (i6);
function $nand.i8(i1: i8, i2: i8) returns (i8);
function $nand.i16(i1: i16, i2: i16) returns (i16);
function $nand.i24(i1: i24, i2: i24) returns (i24);
function $nand.i32(i1: i32, i2: i32) returns (i32);
function $nand.i33(i1: i33, i2: i33) returns (i33);
function $nand.i40(i1: i40, i2: i40) returns (i40);
function $nand.i48(i1: i48, i2: i48) returns (i48);
function $nand.i56(i1: i56, i2: i56) returns (i56);
function $nand.i64(i1: i64, i2: i64) returns (i64);
function $nand.i80(i1: i80, i2: i80) returns (i80);
function $nand.i88(i1: i88, i2: i88) returns (i88);
function $nand.i96(i1: i96, i2: i96) returns (i96);
function $nand.i128(i1: i128, i2: i128) returns (i128);
function $nand.i160(i1: i160, i2: i160) returns (i160);
function $nand.i256(i1: i256, i2: i256) returns (i256);
function $not.i1(i: i1) returns (i1);
function $not.i5(i: i5) returns (i5);
function $not.i6(i: i6) returns (i6);
function $not.i8(i: i8) returns (i8);
function $not.i16(i: i16) returns (i16);
function $not.i24(i: i24) returns (i24);
function $not.i32(i: i32) returns (i32);
function $not.i33(i: i33) returns (i33);
function $not.i40(i: i40) returns (i40);
function $not.i48(i: i48) returns (i48);
function $not.i56(i: i56) returns (i56);
function $not.i64(i: i64) returns (i64);
function $not.i80(i: i80) returns (i80);
function $not.i88(i: i88) returns (i88);
function $not.i96(i: i96) returns (i96);
function $not.i128(i: i128) returns (i128);
function $not.i160(i: i160) returns (i160);
function $not.i256(i: i256) returns (i256);
function {:inline} $smin.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i5(i1: i5, i2: i5) returns (i5) { (if $slt.i5.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i6(i1: i6, i2: i6) returns (i6) { (if $slt.i6.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i8(i1: i8, i2: i8) returns (i8) { (if $slt.i8.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i16(i1: i16, i2: i16) returns (i16) { (if $slt.i16.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i24(i1: i24, i2: i24) returns (i24) { (if $slt.i24.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i32(i1: i32, i2: i32) returns (i32) { (if $slt.i32.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i33(i1: i33, i2: i33) returns (i33) { (if $slt.i33.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i40(i1: i40, i2: i40) returns (i40) { (if $slt.i40.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i48(i1: i48, i2: i48) returns (i48) { (if $slt.i48.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i56(i1: i56, i2: i56) returns (i56) { (if $slt.i56.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i64(i1: i64, i2: i64) returns (i64) { (if $slt.i64.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i80(i1: i80, i2: i80) returns (i80) { (if $slt.i80.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i88(i1: i88, i2: i88) returns (i88) { (if $slt.i88.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i96(i1: i96, i2: i96) returns (i96) { (if $slt.i96.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i128(i1: i128, i2: i128) returns (i128) { (if $slt.i128.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i160(i1: i160, i2: i160) returns (i160) { (if $slt.i160.bool(i1,i2) then i1 else i2) }
function {:inline} $smin.i256(i1: i256, i2: i256) returns (i256) { (if $slt.i256.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i5(i1: i5, i2: i5) returns (i5) { (if $sgt.i5.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i6(i1: i6, i2: i6) returns (i6) { (if $sgt.i6.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i8(i1: i8, i2: i8) returns (i8) { (if $sgt.i8.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i16(i1: i16, i2: i16) returns (i16) { (if $sgt.i16.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i24(i1: i24, i2: i24) returns (i24) { (if $sgt.i24.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i32(i1: i32, i2: i32) returns (i32) { (if $sgt.i32.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i33(i1: i33, i2: i33) returns (i33) { (if $sgt.i33.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i40(i1: i40, i2: i40) returns (i40) { (if $sgt.i40.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i48(i1: i48, i2: i48) returns (i48) { (if $sgt.i48.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i56(i1: i56, i2: i56) returns (i56) { (if $sgt.i56.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i64(i1: i64, i2: i64) returns (i64) { (if $sgt.i64.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i80(i1: i80, i2: i80) returns (i80) { (if $sgt.i80.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i88(i1: i88, i2: i88) returns (i88) { (if $sgt.i88.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i96(i1: i96, i2: i96) returns (i96) { (if $sgt.i96.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i128(i1: i128, i2: i128) returns (i128) { (if $sgt.i128.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i160(i1: i160, i2: i160) returns (i160) { (if $sgt.i160.bool(i1,i2) then i1 else i2) }
function {:inline} $smax.i256(i1: i256, i2: i256) returns (i256) { (if $sgt.i256.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i5(i1: i5, i2: i5) returns (i5) { (if $ult.i5.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i6(i1: i6, i2: i6) returns (i6) { (if $ult.i6.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i8(i1: i8, i2: i8) returns (i8) { (if $ult.i8.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i16(i1: i16, i2: i16) returns (i16) { (if $ult.i16.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i24(i1: i24, i2: i24) returns (i24) { (if $ult.i24.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i32(i1: i32, i2: i32) returns (i32) { (if $ult.i32.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i33(i1: i33, i2: i33) returns (i33) { (if $ult.i33.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i40(i1: i40, i2: i40) returns (i40) { (if $ult.i40.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i48(i1: i48, i2: i48) returns (i48) { (if $ult.i48.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i56(i1: i56, i2: i56) returns (i56) { (if $ult.i56.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i64(i1: i64, i2: i64) returns (i64) { (if $ult.i64.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i80(i1: i80, i2: i80) returns (i80) { (if $ult.i80.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i88(i1: i88, i2: i88) returns (i88) { (if $ult.i88.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i96(i1: i96, i2: i96) returns (i96) { (if $ult.i96.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i128(i1: i128, i2: i128) returns (i128) { (if $ult.i128.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i160(i1: i160, i2: i160) returns (i160) { (if $ult.i160.bool(i1,i2) then i1 else i2) }
function {:inline} $umin.i256(i1: i256, i2: i256) returns (i256) { (if $ult.i256.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i5(i1: i5, i2: i5) returns (i5) { (if $ugt.i5.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i6(i1: i6, i2: i6) returns (i6) { (if $ugt.i6.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i8(i1: i8, i2: i8) returns (i8) { (if $ugt.i8.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i16(i1: i16, i2: i16) returns (i16) { (if $ugt.i16.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i24(i1: i24, i2: i24) returns (i24) { (if $ugt.i24.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i32(i1: i32, i2: i32) returns (i32) { (if $ugt.i32.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i33(i1: i33, i2: i33) returns (i33) { (if $ugt.i33.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i40(i1: i40, i2: i40) returns (i40) { (if $ugt.i40.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i48(i1: i48, i2: i48) returns (i48) { (if $ugt.i48.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i56(i1: i56, i2: i56) returns (i56) { (if $ugt.i56.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i64(i1: i64, i2: i64) returns (i64) { (if $ugt.i64.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i80(i1: i80, i2: i80) returns (i80) { (if $ugt.i80.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i88(i1: i88, i2: i88) returns (i88) { (if $ugt.i88.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i96(i1: i96, i2: i96) returns (i96) { (if $ugt.i96.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i128(i1: i128, i2: i128) returns (i128) { (if $ugt.i128.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i160(i1: i160, i2: i160) returns (i160) { (if $ugt.i160.bool(i1,i2) then i1 else i2) }
function {:inline} $umax.i256(i1: i256, i2: i256) returns (i256) { (if $ugt.i256.bool(i1,i2) then i1 else i2) }
axiom ($and.i1(0,0) == 0);
axiom ($or.i1(0,0) == 0);
axiom ($xor.i1(0,0) == 0);
axiom ($and.i1(0,1) == 0);
axiom ($or.i1(0,1) == 1);
axiom ($xor.i1(0,1) == 1);
axiom ($and.i1(1,0) == 0);
axiom ($or.i1(1,0) == 1);
axiom ($xor.i1(1,0) == 1);
axiom ($and.i1(1,1) == 1);
axiom ($or.i1(1,1) == 1);
axiom ($xor.i1(1,1) == 0);
axiom ($and.i32(32,16) == 0);
function {:inline} $ule.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i1(i1: i1, i2: i1) returns (i1) { (if $ule.i1.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i5(i1: i5, i2: i5) returns (i1) { (if $ule.i5.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i6(i1: i6, i2: i6) returns (i1) { (if $ule.i6.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i8(i1: i8, i2: i8) returns (i1) { (if $ule.i8.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i16(i1: i16, i2: i16) returns (i1) { (if $ule.i16.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i24(i1: i24, i2: i24) returns (i1) { (if $ule.i24.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i32(i1: i32, i2: i32) returns (i1) { (if $ule.i32.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i33(i1: i33, i2: i33) returns (i1) { (if $ule.i33.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i40(i1: i40, i2: i40) returns (i1) { (if $ule.i40.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i48(i1: i48, i2: i48) returns (i1) { (if $ule.i48.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i56(i1: i56, i2: i56) returns (i1) { (if $ule.i56.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i64(i1: i64, i2: i64) returns (i1) { (if $ule.i64.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i80(i1: i80, i2: i80) returns (i1) { (if $ule.i80.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i88(i1: i88, i2: i88) returns (i1) { (if $ule.i88.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i96(i1: i96, i2: i96) returns (i1) { (if $ule.i96.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i128(i1: i128, i2: i128) returns (i1) { (if $ule.i128.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i160(i1: i160, i2: i160) returns (i1) { (if $ule.i160.bool(i1,i2) then 1 else 0) }
function {:inline} $ule.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $ule.i256(i1: i256, i2: i256) returns (i1) { (if $ule.i256.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $ult.i1(i1: i1, i2: i1) returns (i1) { (if $ult.i1.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $ult.i5(i1: i5, i2: i5) returns (i1) { (if $ult.i5.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $ult.i6(i1: i6, i2: i6) returns (i1) { (if $ult.i6.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $ult.i8(i1: i8, i2: i8) returns (i1) { (if $ult.i8.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $ult.i16(i1: i16, i2: i16) returns (i1) { (if $ult.i16.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $ult.i24(i1: i24, i2: i24) returns (i1) { (if $ult.i24.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $ult.i32(i1: i32, i2: i32) returns (i1) { (if $ult.i32.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 < i2) }
function {:inline} $ult.i33(i1: i33, i2: i33) returns (i1) { (if $ult.i33.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $ult.i40(i1: i40, i2: i40) returns (i1) { (if $ult.i40.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $ult.i48(i1: i48, i2: i48) returns (i1) { (if $ult.i48.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $ult.i56(i1: i56, i2: i56) returns (i1) { (if $ult.i56.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $ult.i64(i1: i64, i2: i64) returns (i1) { (if $ult.i64.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $ult.i80(i1: i80, i2: i80) returns (i1) { (if $ult.i80.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $ult.i88(i1: i88, i2: i88) returns (i1) { (if $ult.i88.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $ult.i96(i1: i96, i2: i96) returns (i1) { (if $ult.i96.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $ult.i128(i1: i128, i2: i128) returns (i1) { (if $ult.i128.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $ult.i160(i1: i160, i2: i160) returns (i1) { (if $ult.i160.bool(i1,i2) then 1 else 0) }
function {:inline} $ult.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $ult.i256(i1: i256, i2: i256) returns (i1) { (if $ult.i256.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i1(i1: i1, i2: i1) returns (i1) { (if $uge.i1.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i5(i1: i5, i2: i5) returns (i1) { (if $uge.i5.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i6(i1: i6, i2: i6) returns (i1) { (if $uge.i6.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i8(i1: i8, i2: i8) returns (i1) { (if $uge.i8.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i16(i1: i16, i2: i16) returns (i1) { (if $uge.i16.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i24(i1: i24, i2: i24) returns (i1) { (if $uge.i24.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i32(i1: i32, i2: i32) returns (i1) { (if $uge.i32.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i33(i1: i33, i2: i33) returns (i1) { (if $uge.i33.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i40(i1: i40, i2: i40) returns (i1) { (if $uge.i40.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i48(i1: i48, i2: i48) returns (i1) { (if $uge.i48.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i56(i1: i56, i2: i56) returns (i1) { (if $uge.i56.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i64(i1: i64, i2: i64) returns (i1) { (if $uge.i64.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i80(i1: i80, i2: i80) returns (i1) { (if $uge.i80.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i88(i1: i88, i2: i88) returns (i1) { (if $uge.i88.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i96(i1: i96, i2: i96) returns (i1) { (if $uge.i96.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i128(i1: i128, i2: i128) returns (i1) { (if $uge.i128.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i160(i1: i160, i2: i160) returns (i1) { (if $uge.i160.bool(i1,i2) then 1 else 0) }
function {:inline} $uge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $uge.i256(i1: i256, i2: i256) returns (i1) { (if $uge.i256.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i1(i1: i1, i2: i1) returns (i1) { (if $ugt.i1.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i5(i1: i5, i2: i5) returns (i1) { (if $ugt.i5.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i6(i1: i6, i2: i6) returns (i1) { (if $ugt.i6.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i8(i1: i8, i2: i8) returns (i1) { (if $ugt.i8.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i16(i1: i16, i2: i16) returns (i1) { (if $ugt.i16.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i24(i1: i24, i2: i24) returns (i1) { (if $ugt.i24.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i32(i1: i32, i2: i32) returns (i1) { (if $ugt.i32.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i33(i1: i33, i2: i33) returns (i1) { (if $ugt.i33.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i40(i1: i40, i2: i40) returns (i1) { (if $ugt.i40.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i48(i1: i48, i2: i48) returns (i1) { (if $ugt.i48.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i56(i1: i56, i2: i56) returns (i1) { (if $ugt.i56.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i64(i1: i64, i2: i64) returns (i1) { (if $ugt.i64.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i80(i1: i80, i2: i80) returns (i1) { (if $ugt.i80.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i88(i1: i88, i2: i88) returns (i1) { (if $ugt.i88.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i96(i1: i96, i2: i96) returns (i1) { (if $ugt.i96.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i128(i1: i128, i2: i128) returns (i1) { (if $ugt.i128.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i160(i1: i160, i2: i160) returns (i1) { (if $ugt.i160.bool(i1,i2) then 1 else 0) }
function {:inline} $ugt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $ugt.i256(i1: i256, i2: i256) returns (i1) { (if $ugt.i256.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i1(i1: i1, i2: i1) returns (i1) { (if $sle.i1.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i5(i1: i5, i2: i5) returns (i1) { (if $sle.i5.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i6(i1: i6, i2: i6) returns (i1) { (if $sle.i6.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i8(i1: i8, i2: i8) returns (i1) { (if $sle.i8.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i16(i1: i16, i2: i16) returns (i1) { (if $sle.i16.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i24(i1: i24, i2: i24) returns (i1) { (if $sle.i24.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i32(i1: i32, i2: i32) returns (i1) { (if $sle.i32.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i33(i1: i33, i2: i33) returns (i1) { (if $sle.i33.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i40(i1: i40, i2: i40) returns (i1) { (if $sle.i40.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i48(i1: i48, i2: i48) returns (i1) { (if $sle.i48.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i56(i1: i56, i2: i56) returns (i1) { (if $sle.i56.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i64(i1: i64, i2: i64) returns (i1) { (if $sle.i64.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i80(i1: i80, i2: i80) returns (i1) { (if $sle.i80.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i88(i1: i88, i2: i88) returns (i1) { (if $sle.i88.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i96(i1: i96, i2: i96) returns (i1) { (if $sle.i96.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i128(i1: i128, i2: i128) returns (i1) { (if $sle.i128.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i160(i1: i160, i2: i160) returns (i1) { (if $sle.i160.bool(i1,i2) then 1 else 0) }
function {:inline} $sle.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 <= i2) }
function {:inline} $sle.i256(i1: i256, i2: i256) returns (i1) { (if $sle.i256.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 < i2) }
function {:inline} $slt.i1(i1: i1, i2: i1) returns (i1) { (if $slt.i1.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 < i2) }
function {:inline} $slt.i5(i1: i5, i2: i5) returns (i1) { (if $slt.i5.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 < i2) }
function {:inline} $slt.i6(i1: i6, i2: i6) returns (i1) { (if $slt.i6.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 < i2) }
function {:inline} $slt.i8(i1: i8, i2: i8) returns (i1) { (if $slt.i8.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 < i2) }
function {:inline} $slt.i16(i1: i16, i2: i16) returns (i1) { (if $slt.i16.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 < i2) }
function {:inline} $slt.i24(i1: i24, i2: i24) returns (i1) { (if $slt.i24.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 < i2) }
function {:inline} $slt.i32(i1: i32, i2: i32) returns (i1) { (if $slt.i32.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 < i2) }
function {:inline} $slt.i33(i1: i33, i2: i33) returns (i1) { (if $slt.i33.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 < i2) }
function {:inline} $slt.i40(i1: i40, i2: i40) returns (i1) { (if $slt.i40.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 < i2) }
function {:inline} $slt.i48(i1: i48, i2: i48) returns (i1) { (if $slt.i48.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 < i2) }
function {:inline} $slt.i56(i1: i56, i2: i56) returns (i1) { (if $slt.i56.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 < i2) }
function {:inline} $slt.i64(i1: i64, i2: i64) returns (i1) { (if $slt.i64.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 < i2) }
function {:inline} $slt.i80(i1: i80, i2: i80) returns (i1) { (if $slt.i80.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 < i2) }
function {:inline} $slt.i88(i1: i88, i2: i88) returns (i1) { (if $slt.i88.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 < i2) }
function {:inline} $slt.i96(i1: i96, i2: i96) returns (i1) { (if $slt.i96.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 < i2) }
function {:inline} $slt.i128(i1: i128, i2: i128) returns (i1) { (if $slt.i128.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 < i2) }
function {:inline} $slt.i160(i1: i160, i2: i160) returns (i1) { (if $slt.i160.bool(i1,i2) then 1 else 0) }
function {:inline} $slt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 < i2) }
function {:inline} $slt.i256(i1: i256, i2: i256) returns (i1) { (if $slt.i256.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i1(i1: i1, i2: i1) returns (i1) { (if $sge.i1.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i5(i1: i5, i2: i5) returns (i1) { (if $sge.i5.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i6(i1: i6, i2: i6) returns (i1) { (if $sge.i6.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i8(i1: i8, i2: i8) returns (i1) { (if $sge.i8.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i16(i1: i16, i2: i16) returns (i1) { (if $sge.i16.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i24(i1: i24, i2: i24) returns (i1) { (if $sge.i24.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i32(i1: i32, i2: i32) returns (i1) { (if $sge.i32.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i33(i1: i33, i2: i33) returns (i1) { (if $sge.i33.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i40(i1: i40, i2: i40) returns (i1) { (if $sge.i40.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i48(i1: i48, i2: i48) returns (i1) { (if $sge.i48.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i56(i1: i56, i2: i56) returns (i1) { (if $sge.i56.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i64(i1: i64, i2: i64) returns (i1) { (if $sge.i64.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i80(i1: i80, i2: i80) returns (i1) { (if $sge.i80.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i88(i1: i88, i2: i88) returns (i1) { (if $sge.i88.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i96(i1: i96, i2: i96) returns (i1) { (if $sge.i96.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i128(i1: i128, i2: i128) returns (i1) { (if $sge.i128.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i160(i1: i160, i2: i160) returns (i1) { (if $sge.i160.bool(i1,i2) then 1 else 0) }
function {:inline} $sge.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 >= i2) }
function {:inline} $sge.i256(i1: i256, i2: i256) returns (i1) { (if $sge.i256.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i1(i1: i1, i2: i1) returns (i1) { (if $sgt.i1.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i5(i1: i5, i2: i5) returns (i1) { (if $sgt.i5.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i6(i1: i6, i2: i6) returns (i1) { (if $sgt.i6.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i8(i1: i8, i2: i8) returns (i1) { (if $sgt.i8.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i16(i1: i16, i2: i16) returns (i1) { (if $sgt.i16.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i24(i1: i24, i2: i24) returns (i1) { (if $sgt.i24.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i32(i1: i32, i2: i32) returns (i1) { (if $sgt.i32.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i33(i1: i33, i2: i33) returns (i1) { (if $sgt.i33.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i40(i1: i40, i2: i40) returns (i1) { (if $sgt.i40.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i48(i1: i48, i2: i48) returns (i1) { (if $sgt.i48.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i56(i1: i56, i2: i56) returns (i1) { (if $sgt.i56.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i64(i1: i64, i2: i64) returns (i1) { (if $sgt.i64.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i80(i1: i80, i2: i80) returns (i1) { (if $sgt.i80.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i88(i1: i88, i2: i88) returns (i1) { (if $sgt.i88.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i96(i1: i96, i2: i96) returns (i1) { (if $sgt.i96.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i128(i1: i128, i2: i128) returns (i1) { (if $sgt.i128.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i160(i1: i160, i2: i160) returns (i1) { (if $sgt.i160.bool(i1,i2) then 1 else 0) }
function {:inline} $sgt.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 > i2) }
function {:inline} $sgt.i256(i1: i256, i2: i256) returns (i1) { (if $sgt.i256.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 == i2) }
function {:inline} $eq.i1(i1: i1, i2: i1) returns (i1) { (if $eq.i1.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 == i2) }
function {:inline} $eq.i5(i1: i5, i2: i5) returns (i1) { (if $eq.i5.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 == i2) }
function {:inline} $eq.i6(i1: i6, i2: i6) returns (i1) { (if $eq.i6.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 == i2) }
function {:inline} $eq.i8(i1: i8, i2: i8) returns (i1) { (if $eq.i8.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 == i2) }
function {:inline} $eq.i16(i1: i16, i2: i16) returns (i1) { (if $eq.i16.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 == i2) }
function {:inline} $eq.i24(i1: i24, i2: i24) returns (i1) { (if $eq.i24.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 == i2) }
function {:inline} $eq.i32(i1: i32, i2: i32) returns (i1) { (if $eq.i32.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 == i2) }
function {:inline} $eq.i33(i1: i33, i2: i33) returns (i1) { (if $eq.i33.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 == i2) }
function {:inline} $eq.i40(i1: i40, i2: i40) returns (i1) { (if $eq.i40.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 == i2) }
function {:inline} $eq.i48(i1: i48, i2: i48) returns (i1) { (if $eq.i48.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 == i2) }
function {:inline} $eq.i56(i1: i56, i2: i56) returns (i1) { (if $eq.i56.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 == i2) }
function {:inline} $eq.i64(i1: i64, i2: i64) returns (i1) { (if $eq.i64.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 == i2) }
function {:inline} $eq.i80(i1: i80, i2: i80) returns (i1) { (if $eq.i80.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 == i2) }
function {:inline} $eq.i88(i1: i88, i2: i88) returns (i1) { (if $eq.i88.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 == i2) }
function {:inline} $eq.i96(i1: i96, i2: i96) returns (i1) { (if $eq.i96.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 == i2) }
function {:inline} $eq.i128(i1: i128, i2: i128) returns (i1) { (if $eq.i128.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 == i2) }
function {:inline} $eq.i160(i1: i160, i2: i160) returns (i1) { (if $eq.i160.bool(i1,i2) then 1 else 0) }
function {:inline} $eq.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 == i2) }
function {:inline} $eq.i256(i1: i256, i2: i256) returns (i1) { (if $eq.i256.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i1.bool(i1: i1, i2: i1) returns (bool) { (i1 != i2) }
function {:inline} $ne.i1(i1: i1, i2: i1) returns (i1) { (if $ne.i1.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i5.bool(i1: i5, i2: i5) returns (bool) { (i1 != i2) }
function {:inline} $ne.i5(i1: i5, i2: i5) returns (i1) { (if $ne.i5.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i6.bool(i1: i6, i2: i6) returns (bool) { (i1 != i2) }
function {:inline} $ne.i6(i1: i6, i2: i6) returns (i1) { (if $ne.i6.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i8.bool(i1: i8, i2: i8) returns (bool) { (i1 != i2) }
function {:inline} $ne.i8(i1: i8, i2: i8) returns (i1) { (if $ne.i8.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i16.bool(i1: i16, i2: i16) returns (bool) { (i1 != i2) }
function {:inline} $ne.i16(i1: i16, i2: i16) returns (i1) { (if $ne.i16.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i24.bool(i1: i24, i2: i24) returns (bool) { (i1 != i2) }
function {:inline} $ne.i24(i1: i24, i2: i24) returns (i1) { (if $ne.i24.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i32.bool(i1: i32, i2: i32) returns (bool) { (i1 != i2) }
function {:inline} $ne.i32(i1: i32, i2: i32) returns (i1) { (if $ne.i32.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i33.bool(i1: i33, i2: i33) returns (bool) { (i1 != i2) }
function {:inline} $ne.i33(i1: i33, i2: i33) returns (i1) { (if $ne.i33.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i40.bool(i1: i40, i2: i40) returns (bool) { (i1 != i2) }
function {:inline} $ne.i40(i1: i40, i2: i40) returns (i1) { (if $ne.i40.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i48.bool(i1: i48, i2: i48) returns (bool) { (i1 != i2) }
function {:inline} $ne.i48(i1: i48, i2: i48) returns (i1) { (if $ne.i48.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i56.bool(i1: i56, i2: i56) returns (bool) { (i1 != i2) }
function {:inline} $ne.i56(i1: i56, i2: i56) returns (i1) { (if $ne.i56.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i64.bool(i1: i64, i2: i64) returns (bool) { (i1 != i2) }
function {:inline} $ne.i64(i1: i64, i2: i64) returns (i1) { (if $ne.i64.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i80.bool(i1: i80, i2: i80) returns (bool) { (i1 != i2) }
function {:inline} $ne.i80(i1: i80, i2: i80) returns (i1) { (if $ne.i80.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i88.bool(i1: i88, i2: i88) returns (bool) { (i1 != i2) }
function {:inline} $ne.i88(i1: i88, i2: i88) returns (i1) { (if $ne.i88.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i96.bool(i1: i96, i2: i96) returns (bool) { (i1 != i2) }
function {:inline} $ne.i96(i1: i96, i2: i96) returns (i1) { (if $ne.i96.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i128.bool(i1: i128, i2: i128) returns (bool) { (i1 != i2) }
function {:inline} $ne.i128(i1: i128, i2: i128) returns (i1) { (if $ne.i128.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i160.bool(i1: i160, i2: i160) returns (bool) { (i1 != i2) }
function {:inline} $ne.i160(i1: i160, i2: i160) returns (i1) { (if $ne.i160.bool(i1,i2) then 1 else 0) }
function {:inline} $ne.i256.bool(i1: i256, i2: i256) returns (bool) { (i1 != i2) }
function {:inline} $ne.i256(i1: i256, i2: i256) returns (i1) { (if $ne.i256.bool(i1,i2) then 1 else 0) }
function {:inline} $load.i1(M: [ref] i1, p: ref) returns (i1) { M[p] }
function {:inline} $store.i1(M: [ref] i1, p: ref, i: i1) returns ([ref] i1) { M[p := i] }
function {:inline} $load.i5(M: [ref] i5, p: ref) returns (i5) { M[p] }
function {:inline} $store.i5(M: [ref] i5, p: ref, i: i5) returns ([ref] i5) { M[p := i] }
function {:inline} $load.i6(M: [ref] i6, p: ref) returns (i6) { M[p] }
function {:inline} $store.i6(M: [ref] i6, p: ref, i: i6) returns ([ref] i6) { M[p := i] }
function {:inline} $load.i8(M: [ref] i8, p: ref) returns (i8) { M[p] }
function {:inline} $store.i8(M: [ref] i8, p: ref, i: i8) returns ([ref] i8) { M[p := i] }
function {:inline} $load.i16(M: [ref] i16, p: ref) returns (i16) { M[p] }
function {:inline} $store.i16(M: [ref] i16, p: ref, i: i16) returns ([ref] i16) { M[p := i] }
function {:inline} $load.i24(M: [ref] i24, p: ref) returns (i24) { M[p] }
function {:inline} $store.i24(M: [ref] i24, p: ref, i: i24) returns ([ref] i24) { M[p := i] }
function {:inline} $load.i32(M: [ref] i32, p: ref) returns (i32) { M[p] }
function {:inline} $store.i32(M: [ref] i32, p: ref, i: i32) returns ([ref] i32) { M[p := i] }
function {:inline} $load.i33(M: [ref] i33, p: ref) returns (i33) { M[p] }
function {:inline} $store.i33(M: [ref] i33, p: ref, i: i33) returns ([ref] i33) { M[p := i] }
function {:inline} $load.i40(M: [ref] i40, p: ref) returns (i40) { M[p] }
function {:inline} $store.i40(M: [ref] i40, p: ref, i: i40) returns ([ref] i40) { M[p := i] }
function {:inline} $load.i48(M: [ref] i48, p: ref) returns (i48) { M[p] }
function {:inline} $store.i48(M: [ref] i48, p: ref, i: i48) returns ([ref] i48) { M[p := i] }
function {:inline} $load.i56(M: [ref] i56, p: ref) returns (i56) { M[p] }
function {:inline} $store.i56(M: [ref] i56, p: ref, i: i56) returns ([ref] i56) { M[p := i] }
function {:inline} $load.i64(M: [ref] i64, p: ref) returns (i64) { M[p] }
function {:inline} $store.i64(M: [ref] i64, p: ref, i: i64) returns ([ref] i64) { M[p := i] }
function {:inline} $load.i80(M: [ref] i80, p: ref) returns (i80) { M[p] }
function {:inline} $store.i80(M: [ref] i80, p: ref, i: i80) returns ([ref] i80) { M[p := i] }
function {:inline} $load.i88(M: [ref] i88, p: ref) returns (i88) { M[p] }
function {:inline} $store.i88(M: [ref] i88, p: ref, i: i88) returns ([ref] i88) { M[p := i] }
function {:inline} $load.i96(M: [ref] i96, p: ref) returns (i96) { M[p] }
function {:inline} $store.i96(M: [ref] i96, p: ref, i: i96) returns ([ref] i96) { M[p := i] }
function {:inline} $load.i128(M: [ref] i128, p: ref) returns (i128) { M[p] }
function {:inline} $store.i128(M: [ref] i128, p: ref, i: i128) returns ([ref] i128) { M[p := i] }
function {:inline} $load.i160(M: [ref] i160, p: ref) returns (i160) { M[p] }
function {:inline} $store.i160(M: [ref] i160, p: ref, i: i160) returns ([ref] i160) { M[p := i] }
function {:inline} $load.i256(M: [ref] i256, p: ref) returns (i256) { M[p] }
function {:inline} $store.i256(M: [ref] i256, p: ref, i: i256) returns ([ref] i256) { M[p := i] }
function {:inline} $trunc.i5.i1(i: i5) returns (i1) { i }
function {:inline} $trunc.i6.i1(i: i6) returns (i1) { i }
function {:inline} $trunc.i8.i1(i: i8) returns (i1) { i }
function {:inline} $trunc.i16.i1(i: i16) returns (i1) { i }
function {:inline} $trunc.i24.i1(i: i24) returns (i1) { i }
function {:inline} $trunc.i32.i1(i: i32) returns (i1) { i }
function {:inline} $trunc.i33.i1(i: i33) returns (i1) { i }
function {:inline} $trunc.i40.i1(i: i40) returns (i1) { i }
function {:inline} $trunc.i48.i1(i: i48) returns (i1) { i }
function {:inline} $trunc.i56.i1(i: i56) returns (i1) { i }
function {:inline} $trunc.i64.i1(i: i64) returns (i1) { i }
function {:inline} $trunc.i80.i1(i: i80) returns (i1) { i }
function {:inline} $trunc.i88.i1(i: i88) returns (i1) { i }
function {:inline} $trunc.i96.i1(i: i96) returns (i1) { i }
function {:inline} $trunc.i128.i1(i: i128) returns (i1) { i }
function {:inline} $trunc.i160.i1(i: i160) returns (i1) { i }
function {:inline} $trunc.i256.i1(i: i256) returns (i1) { i }
function {:inline} $trunc.i6.i5(i: i6) returns (i5) { i }
function {:inline} $trunc.i8.i5(i: i8) returns (i5) { i }
function {:inline} $trunc.i16.i5(i: i16) returns (i5) { i }
function {:inline} $trunc.i24.i5(i: i24) returns (i5) { i }
function {:inline} $trunc.i32.i5(i: i32) returns (i5) { i }
function {:inline} $trunc.i33.i5(i: i33) returns (i5) { i }
function {:inline} $trunc.i40.i5(i: i40) returns (i5) { i }
function {:inline} $trunc.i48.i5(i: i48) returns (i5) { i }
function {:inline} $trunc.i56.i5(i: i56) returns (i5) { i }
function {:inline} $trunc.i64.i5(i: i64) returns (i5) { i }
function {:inline} $trunc.i80.i5(i: i80) returns (i5) { i }
function {:inline} $trunc.i88.i5(i: i88) returns (i5) { i }
function {:inline} $trunc.i96.i5(i: i96) returns (i5) { i }
function {:inline} $trunc.i128.i5(i: i128) returns (i5) { i }
function {:inline} $trunc.i160.i5(i: i160) returns (i5) { i }
function {:inline} $trunc.i256.i5(i: i256) returns (i5) { i }
function {:inline} $trunc.i8.i6(i: i8) returns (i6) { i }
function {:inline} $trunc.i16.i6(i: i16) returns (i6) { i }
function {:inline} $trunc.i24.i6(i: i24) returns (i6) { i }
function {:inline} $trunc.i32.i6(i: i32) returns (i6) { i }
function {:inline} $trunc.i33.i6(i: i33) returns (i6) { i }
function {:inline} $trunc.i40.i6(i: i40) returns (i6) { i }
function {:inline} $trunc.i48.i6(i: i48) returns (i6) { i }
function {:inline} $trunc.i56.i6(i: i56) returns (i6) { i }
function {:inline} $trunc.i64.i6(i: i64) returns (i6) { i }
function {:inline} $trunc.i80.i6(i: i80) returns (i6) { i }
function {:inline} $trunc.i88.i6(i: i88) returns (i6) { i }
function {:inline} $trunc.i96.i6(i: i96) returns (i6) { i }
function {:inline} $trunc.i128.i6(i: i128) returns (i6) { i }
function {:inline} $trunc.i160.i6(i: i160) returns (i6) { i }
function {:inline} $trunc.i256.i6(i: i256) returns (i6) { i }
function {:inline} $trunc.i16.i8(i: i16) returns (i8) { i }
function {:inline} $trunc.i24.i8(i: i24) returns (i8) { i }
function {:inline} $trunc.i32.i8(i: i32) returns (i8) { i }
function {:inline} $trunc.i33.i8(i: i33) returns (i8) { i }
function {:inline} $trunc.i40.i8(i: i40) returns (i8) { i }
function {:inline} $trunc.i48.i8(i: i48) returns (i8) { i }
function {:inline} $trunc.i56.i8(i: i56) returns (i8) { i }
function {:inline} $trunc.i64.i8(i: i64) returns (i8) { i }
function {:inline} $trunc.i80.i8(i: i80) returns (i8) { i }
function {:inline} $trunc.i88.i8(i: i88) returns (i8) { i }
function {:inline} $trunc.i96.i8(i: i96) returns (i8) { i }
function {:inline} $trunc.i128.i8(i: i128) returns (i8) { i }
function {:inline} $trunc.i160.i8(i: i160) returns (i8) { i }
function {:inline} $trunc.i256.i8(i: i256) returns (i8) { i }
function {:inline} $trunc.i24.i16(i: i24) returns (i16) { i }
function {:inline} $trunc.i32.i16(i: i32) returns (i16) { i }
function {:inline} $trunc.i33.i16(i: i33) returns (i16) { i }
function {:inline} $trunc.i40.i16(i: i40) returns (i16) { i }
function {:inline} $trunc.i48.i16(i: i48) returns (i16) { i }
function {:inline} $trunc.i56.i16(i: i56) returns (i16) { i }
function {:inline} $trunc.i64.i16(i: i64) returns (i16) { i }
function {:inline} $trunc.i80.i16(i: i80) returns (i16) { i }
function {:inline} $trunc.i88.i16(i: i88) returns (i16) { i }
function {:inline} $trunc.i96.i16(i: i96) returns (i16) { i }
function {:inline} $trunc.i128.i16(i: i128) returns (i16) { i }
function {:inline} $trunc.i160.i16(i: i160) returns (i16) { i }
function {:inline} $trunc.i256.i16(i: i256) returns (i16) { i }
function {:inline} $trunc.i32.i24(i: i32) returns (i24) { i }
function {:inline} $trunc.i33.i24(i: i33) returns (i24) { i }
function {:inline} $trunc.i40.i24(i: i40) returns (i24) { i }
function {:inline} $trunc.i48.i24(i: i48) returns (i24) { i }
function {:inline} $trunc.i56.i24(i: i56) returns (i24) { i }
function {:inline} $trunc.i64.i24(i: i64) returns (i24) { i }
function {:inline} $trunc.i80.i24(i: i80) returns (i24) { i }
function {:inline} $trunc.i88.i24(i: i88) returns (i24) { i }
function {:inline} $trunc.i96.i24(i: i96) returns (i24) { i }
function {:inline} $trunc.i128.i24(i: i128) returns (i24) { i }
function {:inline} $trunc.i160.i24(i: i160) returns (i24) { i }
function {:inline} $trunc.i256.i24(i: i256) returns (i24) { i }
function {:inline} $trunc.i33.i32(i: i33) returns (i32) { i }
function {:inline} $trunc.i40.i32(i: i40) returns (i32) { i }
function {:inline} $trunc.i48.i32(i: i48) returns (i32) { i }
function {:inline} $trunc.i56.i32(i: i56) returns (i32) { i }
function {:inline} $trunc.i64.i32(i: i64) returns (i32) { i }
function {:inline} $trunc.i80.i32(i: i80) returns (i32) { i }
function {:inline} $trunc.i88.i32(i: i88) returns (i32) { i }
function {:inline} $trunc.i96.i32(i: i96) returns (i32) { i }
function {:inline} $trunc.i128.i32(i: i128) returns (i32) { i }
function {:inline} $trunc.i160.i32(i: i160) returns (i32) { i }
function {:inline} $trunc.i256.i32(i: i256) returns (i32) { i }
function {:inline} $trunc.i40.i33(i: i40) returns (i33) { i }
function {:inline} $trunc.i48.i33(i: i48) returns (i33) { i }
function {:inline} $trunc.i56.i33(i: i56) returns (i33) { i }
function {:inline} $trunc.i64.i33(i: i64) returns (i33) { i }
function {:inline} $trunc.i80.i33(i: i80) returns (i33) { i }
function {:inline} $trunc.i88.i33(i: i88) returns (i33) { i }
function {:inline} $trunc.i96.i33(i: i96) returns (i33) { i }
function {:inline} $trunc.i128.i33(i: i128) returns (i33) { i }
function {:inline} $trunc.i160.i33(i: i160) returns (i33) { i }
function {:inline} $trunc.i256.i33(i: i256) returns (i33) { i }
function {:inline} $trunc.i48.i40(i: i48) returns (i40) { i }
function {:inline} $trunc.i56.i40(i: i56) returns (i40) { i }
function {:inline} $trunc.i64.i40(i: i64) returns (i40) { i }
function {:inline} $trunc.i80.i40(i: i80) returns (i40) { i }
function {:inline} $trunc.i88.i40(i: i88) returns (i40) { i }
function {:inline} $trunc.i96.i40(i: i96) returns (i40) { i }
function {:inline} $trunc.i128.i40(i: i128) returns (i40) { i }
function {:inline} $trunc.i160.i40(i: i160) returns (i40) { i }
function {:inline} $trunc.i256.i40(i: i256) returns (i40) { i }
function {:inline} $trunc.i56.i48(i: i56) returns (i48) { i }
function {:inline} $trunc.i64.i48(i: i64) returns (i48) { i }
function {:inline} $trunc.i80.i48(i: i80) returns (i48) { i }
function {:inline} $trunc.i88.i48(i: i88) returns (i48) { i }
function {:inline} $trunc.i96.i48(i: i96) returns (i48) { i }
function {:inline} $trunc.i128.i48(i: i128) returns (i48) { i }
function {:inline} $trunc.i160.i48(i: i160) returns (i48) { i }
function {:inline} $trunc.i256.i48(i: i256) returns (i48) { i }
function {:inline} $trunc.i64.i56(i: i64) returns (i56) { i }
function {:inline} $trunc.i80.i56(i: i80) returns (i56) { i }
function {:inline} $trunc.i88.i56(i: i88) returns (i56) { i }
function {:inline} $trunc.i96.i56(i: i96) returns (i56) { i }
function {:inline} $trunc.i128.i56(i: i128) returns (i56) { i }
function {:inline} $trunc.i160.i56(i: i160) returns (i56) { i }
function {:inline} $trunc.i256.i56(i: i256) returns (i56) { i }
function {:inline} $trunc.i80.i64(i: i80) returns (i64) { i }
function {:inline} $trunc.i88.i64(i: i88) returns (i64) { i }
function {:inline} $trunc.i96.i64(i: i96) returns (i64) { i }
function {:inline} $trunc.i128.i64(i: i128) returns (i64) { i }
function {:inline} $trunc.i160.i64(i: i160) returns (i64) { i }
function {:inline} $trunc.i256.i64(i: i256) returns (i64) { i }
function {:inline} $trunc.i88.i80(i: i88) returns (i80) { i }
function {:inline} $trunc.i96.i80(i: i96) returns (i80) { i }
function {:inline} $trunc.i128.i80(i: i128) returns (i80) { i }
function {:inline} $trunc.i160.i80(i: i160) returns (i80) { i }
function {:inline} $trunc.i256.i80(i: i256) returns (i80) { i }
function {:inline} $trunc.i96.i88(i: i96) returns (i88) { i }
function {:inline} $trunc.i128.i88(i: i128) returns (i88) { i }
function {:inline} $trunc.i160.i88(i: i160) returns (i88) { i }
function {:inline} $trunc.i256.i88(i: i256) returns (i88) { i }
function {:inline} $trunc.i128.i96(i: i128) returns (i96) { i }
function {:inline} $trunc.i160.i96(i: i160) returns (i96) { i }
function {:inline} $trunc.i256.i96(i: i256) returns (i96) { i }
function {:inline} $trunc.i160.i128(i: i160) returns (i128) { i }
function {:inline} $trunc.i256.i128(i: i256) returns (i128) { i }
function {:inline} $trunc.i256.i160(i: i256) returns (i160) { i }
function {:inline} $sext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $sext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $sext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $sext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $sext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $sext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $sext.i1.i33(i: i1) returns (i33) { i }
function {:inline} $sext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $sext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $sext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $sext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $sext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $sext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $sext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $sext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $sext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $sext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $sext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $sext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $sext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $sext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $sext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $sext.i5.i33(i: i5) returns (i33) { i }
function {:inline} $sext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $sext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $sext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $sext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $sext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $sext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $sext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $sext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $sext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $sext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $sext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $sext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $sext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $sext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $sext.i6.i33(i: i6) returns (i33) { i }
function {:inline} $sext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $sext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $sext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $sext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $sext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $sext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $sext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $sext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $sext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $sext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $sext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $sext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $sext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $sext.i8.i33(i: i8) returns (i33) { i }
function {:inline} $sext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $sext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $sext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $sext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $sext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $sext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $sext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $sext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $sext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $sext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $sext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $sext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $sext.i16.i33(i: i16) returns (i33) { i }
function {:inline} $sext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $sext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $sext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $sext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $sext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $sext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $sext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $sext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $sext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $sext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $sext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $sext.i24.i33(i: i24) returns (i33) { i }
function {:inline} $sext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $sext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $sext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $sext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $sext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $sext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $sext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $sext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $sext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $sext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $sext.i32.i33(i: i32) returns (i33) { i }
function {:inline} $sext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $sext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $sext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $sext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $sext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $sext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $sext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $sext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $sext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $sext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $sext.i33.i40(i: i33) returns (i40) { i }
function {:inline} $sext.i33.i48(i: i33) returns (i48) { i }
function {:inline} $sext.i33.i56(i: i33) returns (i56) { i }
function {:inline} $sext.i33.i64(i: i33) returns (i64) { i }
function {:inline} $sext.i33.i80(i: i33) returns (i80) { i }
function {:inline} $sext.i33.i88(i: i33) returns (i88) { i }
function {:inline} $sext.i33.i96(i: i33) returns (i96) { i }
function {:inline} $sext.i33.i128(i: i33) returns (i128) { i }
function {:inline} $sext.i33.i160(i: i33) returns (i160) { i }
function {:inline} $sext.i33.i256(i: i33) returns (i256) { i }
function {:inline} $sext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $sext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $sext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $sext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $sext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $sext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $sext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $sext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $sext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $sext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $sext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $sext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $sext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $sext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $sext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $sext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $sext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $sext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $sext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $sext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $sext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $sext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $sext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $sext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $sext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $sext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $sext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $sext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $sext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $sext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $sext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $sext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $sext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $sext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $sext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $sext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $sext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $sext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $sext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $sext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $sext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $sext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $sext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $sext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $sext.i160.i256(i: i160) returns (i256) { i }
function {:inline} $zext.i1.i5(i: i1) returns (i5) { i }
function {:inline} $zext.i1.i6(i: i1) returns (i6) { i }
function {:inline} $zext.i1.i8(i: i1) returns (i8) { i }
function {:inline} $zext.i1.i16(i: i1) returns (i16) { i }
function {:inline} $zext.i1.i24(i: i1) returns (i24) { i }
function {:inline} $zext.i1.i32(i: i1) returns (i32) { i }
function {:inline} $zext.i1.i33(i: i1) returns (i33) { i }
function {:inline} $zext.i1.i40(i: i1) returns (i40) { i }
function {:inline} $zext.i1.i48(i: i1) returns (i48) { i }
function {:inline} $zext.i1.i56(i: i1) returns (i56) { i }
function {:inline} $zext.i1.i64(i: i1) returns (i64) { i }
function {:inline} $zext.i1.i80(i: i1) returns (i80) { i }
function {:inline} $zext.i1.i88(i: i1) returns (i88) { i }
function {:inline} $zext.i1.i96(i: i1) returns (i96) { i }
function {:inline} $zext.i1.i128(i: i1) returns (i128) { i }
function {:inline} $zext.i1.i160(i: i1) returns (i160) { i }
function {:inline} $zext.i1.i256(i: i1) returns (i256) { i }
function {:inline} $zext.i5.i6(i: i5) returns (i6) { i }
function {:inline} $zext.i5.i8(i: i5) returns (i8) { i }
function {:inline} $zext.i5.i16(i: i5) returns (i16) { i }
function {:inline} $zext.i5.i24(i: i5) returns (i24) { i }
function {:inline} $zext.i5.i32(i: i5) returns (i32) { i }
function {:inline} $zext.i5.i33(i: i5) returns (i33) { i }
function {:inline} $zext.i5.i40(i: i5) returns (i40) { i }
function {:inline} $zext.i5.i48(i: i5) returns (i48) { i }
function {:inline} $zext.i5.i56(i: i5) returns (i56) { i }
function {:inline} $zext.i5.i64(i: i5) returns (i64) { i }
function {:inline} $zext.i5.i80(i: i5) returns (i80) { i }
function {:inline} $zext.i5.i88(i: i5) returns (i88) { i }
function {:inline} $zext.i5.i96(i: i5) returns (i96) { i }
function {:inline} $zext.i5.i128(i: i5) returns (i128) { i }
function {:inline} $zext.i5.i160(i: i5) returns (i160) { i }
function {:inline} $zext.i5.i256(i: i5) returns (i256) { i }
function {:inline} $zext.i6.i8(i: i6) returns (i8) { i }
function {:inline} $zext.i6.i16(i: i6) returns (i16) { i }
function {:inline} $zext.i6.i24(i: i6) returns (i24) { i }
function {:inline} $zext.i6.i32(i: i6) returns (i32) { i }
function {:inline} $zext.i6.i33(i: i6) returns (i33) { i }
function {:inline} $zext.i6.i40(i: i6) returns (i40) { i }
function {:inline} $zext.i6.i48(i: i6) returns (i48) { i }
function {:inline} $zext.i6.i56(i: i6) returns (i56) { i }
function {:inline} $zext.i6.i64(i: i6) returns (i64) { i }
function {:inline} $zext.i6.i80(i: i6) returns (i80) { i }
function {:inline} $zext.i6.i88(i: i6) returns (i88) { i }
function {:inline} $zext.i6.i96(i: i6) returns (i96) { i }
function {:inline} $zext.i6.i128(i: i6) returns (i128) { i }
function {:inline} $zext.i6.i160(i: i6) returns (i160) { i }
function {:inline} $zext.i6.i256(i: i6) returns (i256) { i }
function {:inline} $zext.i8.i16(i: i8) returns (i16) { i }
function {:inline} $zext.i8.i24(i: i8) returns (i24) { i }
function {:inline} $zext.i8.i32(i: i8) returns (i32) { i }
function {:inline} $zext.i8.i33(i: i8) returns (i33) { i }
function {:inline} $zext.i8.i40(i: i8) returns (i40) { i }
function {:inline} $zext.i8.i48(i: i8) returns (i48) { i }
function {:inline} $zext.i8.i56(i: i8) returns (i56) { i }
function {:inline} $zext.i8.i64(i: i8) returns (i64) { i }
function {:inline} $zext.i8.i80(i: i8) returns (i80) { i }
function {:inline} $zext.i8.i88(i: i8) returns (i88) { i }
function {:inline} $zext.i8.i96(i: i8) returns (i96) { i }
function {:inline} $zext.i8.i128(i: i8) returns (i128) { i }
function {:inline} $zext.i8.i160(i: i8) returns (i160) { i }
function {:inline} $zext.i8.i256(i: i8) returns (i256) { i }
function {:inline} $zext.i16.i24(i: i16) returns (i24) { i }
function {:inline} $zext.i16.i32(i: i16) returns (i32) { i }
function {:inline} $zext.i16.i33(i: i16) returns (i33) { i }
function {:inline} $zext.i16.i40(i: i16) returns (i40) { i }
function {:inline} $zext.i16.i48(i: i16) returns (i48) { i }
function {:inline} $zext.i16.i56(i: i16) returns (i56) { i }
function {:inline} $zext.i16.i64(i: i16) returns (i64) { i }
function {:inline} $zext.i16.i80(i: i16) returns (i80) { i }
function {:inline} $zext.i16.i88(i: i16) returns (i88) { i }
function {:inline} $zext.i16.i96(i: i16) returns (i96) { i }
function {:inline} $zext.i16.i128(i: i16) returns (i128) { i }
function {:inline} $zext.i16.i160(i: i16) returns (i160) { i }
function {:inline} $zext.i16.i256(i: i16) returns (i256) { i }
function {:inline} $zext.i24.i32(i: i24) returns (i32) { i }
function {:inline} $zext.i24.i33(i: i24) returns (i33) { i }
function {:inline} $zext.i24.i40(i: i24) returns (i40) { i }
function {:inline} $zext.i24.i48(i: i24) returns (i48) { i }
function {:inline} $zext.i24.i56(i: i24) returns (i56) { i }
function {:inline} $zext.i24.i64(i: i24) returns (i64) { i }
function {:inline} $zext.i24.i80(i: i24) returns (i80) { i }
function {:inline} $zext.i24.i88(i: i24) returns (i88) { i }
function {:inline} $zext.i24.i96(i: i24) returns (i96) { i }
function {:inline} $zext.i24.i128(i: i24) returns (i128) { i }
function {:inline} $zext.i24.i160(i: i24) returns (i160) { i }
function {:inline} $zext.i24.i256(i: i24) returns (i256) { i }
function {:inline} $zext.i32.i33(i: i32) returns (i33) { i }
function {:inline} $zext.i32.i40(i: i32) returns (i40) { i }
function {:inline} $zext.i32.i48(i: i32) returns (i48) { i }
function {:inline} $zext.i32.i56(i: i32) returns (i56) { i }
function {:inline} $zext.i32.i64(i: i32) returns (i64) { i }
function {:inline} $zext.i32.i80(i: i32) returns (i80) { i }
function {:inline} $zext.i32.i88(i: i32) returns (i88) { i }
function {:inline} $zext.i32.i96(i: i32) returns (i96) { i }
function {:inline} $zext.i32.i128(i: i32) returns (i128) { i }
function {:inline} $zext.i32.i160(i: i32) returns (i160) { i }
function {:inline} $zext.i32.i256(i: i32) returns (i256) { i }
function {:inline} $zext.i33.i40(i: i33) returns (i40) { i }
function {:inline} $zext.i33.i48(i: i33) returns (i48) { i }
function {:inline} $zext.i33.i56(i: i33) returns (i56) { i }
function {:inline} $zext.i33.i64(i: i33) returns (i64) { i }
function {:inline} $zext.i33.i80(i: i33) returns (i80) { i }
function {:inline} $zext.i33.i88(i: i33) returns (i88) { i }
function {:inline} $zext.i33.i96(i: i33) returns (i96) { i }
function {:inline} $zext.i33.i128(i: i33) returns (i128) { i }
function {:inline} $zext.i33.i160(i: i33) returns (i160) { i }
function {:inline} $zext.i33.i256(i: i33) returns (i256) { i }
function {:inline} $zext.i40.i48(i: i40) returns (i48) { i }
function {:inline} $zext.i40.i56(i: i40) returns (i56) { i }
function {:inline} $zext.i40.i64(i: i40) returns (i64) { i }
function {:inline} $zext.i40.i80(i: i40) returns (i80) { i }
function {:inline} $zext.i40.i88(i: i40) returns (i88) { i }
function {:inline} $zext.i40.i96(i: i40) returns (i96) { i }
function {:inline} $zext.i40.i128(i: i40) returns (i128) { i }
function {:inline} $zext.i40.i160(i: i40) returns (i160) { i }
function {:inline} $zext.i40.i256(i: i40) returns (i256) { i }
function {:inline} $zext.i48.i56(i: i48) returns (i56) { i }
function {:inline} $zext.i48.i64(i: i48) returns (i64) { i }
function {:inline} $zext.i48.i80(i: i48) returns (i80) { i }
function {:inline} $zext.i48.i88(i: i48) returns (i88) { i }
function {:inline} $zext.i48.i96(i: i48) returns (i96) { i }
function {:inline} $zext.i48.i128(i: i48) returns (i128) { i }
function {:inline} $zext.i48.i160(i: i48) returns (i160) { i }
function {:inline} $zext.i48.i256(i: i48) returns (i256) { i }
function {:inline} $zext.i56.i64(i: i56) returns (i64) { i }
function {:inline} $zext.i56.i80(i: i56) returns (i80) { i }
function {:inline} $zext.i56.i88(i: i56) returns (i88) { i }
function {:inline} $zext.i56.i96(i: i56) returns (i96) { i }
function {:inline} $zext.i56.i128(i: i56) returns (i128) { i }
function {:inline} $zext.i56.i160(i: i56) returns (i160) { i }
function {:inline} $zext.i56.i256(i: i56) returns (i256) { i }
function {:inline} $zext.i64.i80(i: i64) returns (i80) { i }
function {:inline} $zext.i64.i88(i: i64) returns (i88) { i }
function {:inline} $zext.i64.i96(i: i64) returns (i96) { i }
function {:inline} $zext.i64.i128(i: i64) returns (i128) { i }
function {:inline} $zext.i64.i160(i: i64) returns (i160) { i }
function {:inline} $zext.i64.i256(i: i64) returns (i256) { i }
function {:inline} $zext.i80.i88(i: i80) returns (i88) { i }
function {:inline} $zext.i80.i96(i: i80) returns (i96) { i }
function {:inline} $zext.i80.i128(i: i80) returns (i128) { i }
function {:inline} $zext.i80.i160(i: i80) returns (i160) { i }
function {:inline} $zext.i80.i256(i: i80) returns (i256) { i }
function {:inline} $zext.i88.i96(i: i88) returns (i96) { i }
function {:inline} $zext.i88.i128(i: i88) returns (i128) { i }
function {:inline} $zext.i88.i160(i: i88) returns (i160) { i }
function {:inline} $zext.i88.i256(i: i88) returns (i256) { i }
function {:inline} $zext.i96.i128(i: i96) returns (i128) { i }
function {:inline} $zext.i96.i160(i: i96) returns (i160) { i }
function {:inline} $zext.i96.i256(i: i96) returns (i256) { i }
function {:inline} $zext.i128.i160(i: i128) returns (i160) { i }
function {:inline} $zext.i128.i256(i: i128) returns (i256) { i }
function {:inline} $zext.i160.i256(i: i160) returns (i256) { i }
function $extractvalue.i1(p: ref, i: int) returns (i1);
function $extractvalue.i5(p: ref, i: int) returns (i5);
function $extractvalue.i6(p: ref, i: int) returns (i6);
function $extractvalue.i8(p: ref, i: int) returns (i8);
function $extractvalue.i16(p: ref, i: int) returns (i16);
function $extractvalue.i24(p: ref, i: int) returns (i24);
function $extractvalue.i32(p: ref, i: int) returns (i32);
function $extractvalue.i33(p: ref, i: int) returns (i33);
function $extractvalue.i40(p: ref, i: int) returns (i40);
function $extractvalue.i48(p: ref, i: int) returns (i48);
function $extractvalue.i56(p: ref, i: int) returns (i56);
function $extractvalue.i64(p: ref, i: int) returns (i64);
function $extractvalue.i80(p: ref, i: int) returns (i80);
function $extractvalue.i88(p: ref, i: int) returns (i88);
function $extractvalue.i96(p: ref, i: int) returns (i96);
function $extractvalue.i128(p: ref, i: int) returns (i128);
function $extractvalue.i160(p: ref, i: int) returns (i160);
function $extractvalue.i256(p: ref, i: int) returns (i256);
function {:inline} $add.ref(p1: ref, p2: ref) returns (ref) { $add.i64(p1,p2) }
function {:inline} $sub.ref(p1: ref, p2: ref) returns (ref) { $sub.i64(p1,p2) }
function {:inline} $mul.ref(p1: ref, p2: ref) returns (ref) { $mul.i64(p1,p2) }
function {:inline} $eq.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 == p2) }
function {:inline} $eq.ref(p1: ref, p2: ref) returns (i1) { (if $eq.ref.bool(p1,p2) then 1 else 0) }
function {:inline} $ne.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 != p2) }
function {:inline} $ne.ref(p1: ref, p2: ref) returns (i1) { (if $ne.ref.bool(p1,p2) then 1 else 0) }
function {:inline} $ugt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 > p2) }
function {:inline} $ugt.ref(p1: ref, p2: ref) returns (i1) { (if $ugt.ref.bool(p1,p2) then 1 else 0) }
function {:inline} $uge.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 >= p2) }
function {:inline} $uge.ref(p1: ref, p2: ref) returns (i1) { (if $uge.ref.bool(p1,p2) then 1 else 0) }
function {:inline} $ult.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 < p2) }
function {:inline} $ult.ref(p1: ref, p2: ref) returns (i1) { (if $ult.ref.bool(p1,p2) then 1 else 0) }
function {:inline} $ule.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 <= p2) }
function {:inline} $ule.ref(p1: ref, p2: ref) returns (i1) { (if $ule.ref.bool(p1,p2) then 1 else 0) }
function {:inline} $sgt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 > p2) }
function {:inline} $sgt.ref(p1: ref, p2: ref) returns (i1) { (if $sgt.ref.bool(p1,p2) then 1 else 0) }
function {:inline} $sge.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 >= p2) }
function {:inline} $sge.ref(p1: ref, p2: ref) returns (i1) { (if $sge.ref.bool(p1,p2) then 1 else 0) }
function {:inline} $slt.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 < p2) }
function {:inline} $slt.ref(p1: ref, p2: ref) returns (i1) { (if $slt.ref.bool(p1,p2) then 1 else 0) }
function {:inline} $sle.ref.bool(p1: ref, p2: ref) returns (bool) { (p1 <= p2) }
function {:inline} $sle.ref(p1: ref, p2: ref) returns (i1) { (if $sle.ref.bool(p1,p2) then 1 else 0) }
function {:inline} $load.ref(M: [ref] ref, p: ref) returns (ref) { M[p] }
function {:inline} $store.ref(M: [ref] ref, p: ref, i: ref) returns ([ref] ref) { M[p := i] }
function {:inline} $bitcast.ref.ref(p: ref) returns (ref) { p }
function $extractvalue.ref(p: ref, i: int) returns (ref);
function {:inline} $p2i.ref.i8(p: ref) returns (i8) { $trunc.i64.i8(p) }
function {:inline} $i2p.i8.ref(i: i8) returns (ref) { $zext.i8.i64(i) }
function {:inline} $p2i.ref.i16(p: ref) returns (i16) { $trunc.i64.i16(p) }
function {:inline} $i2p.i16.ref(i: i16) returns (ref) { $zext.i16.i64(i) }
function {:inline} $p2i.ref.i32(p: ref) returns (i32) { $trunc.i64.i32(p) }
function {:inline} $i2p.i32.ref(i: i32) returns (ref) { $zext.i32.i64(i) }
function {:inline} $p2i.ref.i64(p: ref) returns (i64) { p }
function {:inline} $i2p.i64.ref(i: i64) returns (ref) { i }
function $fp(ipart: int, fpart: int, epart: int) returns (float);
function $abs.float(f: float) returns (float);
function $round.float(f: float) returns (float);
function $sqrt.float(f: float) returns (float);
function $fadd.float(f1: float, f2: float) returns (float);
function $fsub.float(f1: float, f2: float) returns (float);
function $fmul.float(f1: float, f2: float) returns (float);
function $fdiv.float(f1: float, f2: float) returns (float);
function $frem.float(f1: float, f2: float) returns (float);
function $min.float(f1: float, f2: float) returns (float);
function $max.float(f1: float, f2: float) returns (float);
function $fma.float(f1: float, f2: float, f3: float) returns (float);
function $fneg.float(f: float) returns (float);
function $foeq.float.bool(f1: float, f2: float) returns (bool);
function $fole.float.bool(f1: float, f2: float) returns (bool);
function $folt.float.bool(f1: float, f2: float) returns (bool);
function $foge.float.bool(f1: float, f2: float) returns (bool);
function $fogt.float.bool(f1: float, f2: float) returns (bool);
function $fone.float.bool(f1: float, f2: float) returns (bool);
function $ford.float.bool(f1: float, f2: float) returns (bool);
function $fueq.float.bool(f1: float, f2: float) returns (bool);
function $fugt.float.bool(f1: float, f2: float) returns (bool);
function $fuge.float.bool(f1: float, f2: float) returns (bool);
function $fult.float.bool(f1: float, f2: float) returns (bool);
function $fule.float.bool(f1: float, f2: float) returns (bool);
function $fune.float.bool(f1: float, f2: float) returns (bool);
function $funo.float.bool(f1: float, f2: float) returns (bool);
function $ffalse.float.bool(f1: float, f2: float) returns (bool);
function $ftrue.float.bool(f1: float, f2: float) returns (bool);
function $bitcast.float.i8(f: float) returns (i8);
function $bitcast.float.i16(f: float) returns (i16);
function $bitcast.float.i32(f: float) returns (i32);
function $bitcast.float.i64(f: float) returns (i64);
function $bitcast.float.i80(f: float) returns (i80);
function $bitcast.i8.float(i: i8) returns (float);
function $bitcast.i16.float(i: i16) returns (float);
function $bitcast.i32.float(i: i32) returns (float);
function $bitcast.i64.float(i: i64) returns (float);
function $bitcast.i80.float(i: i80) returns (float);
function $fp2si.float.i1(f: float) returns (i1);
function $fp2si.float.i5(f: float) returns (i5);
function $fp2si.float.i6(f: float) returns (i6);
function $fp2si.float.i8(f: float) returns (i8);
function $fp2si.float.i16(f: float) returns (i16);
function $fp2si.float.i24(f: float) returns (i24);
function $fp2si.float.i32(f: float) returns (i32);
function $fp2si.float.i33(f: float) returns (i33);
function $fp2si.float.i40(f: float) returns (i40);
function $fp2si.float.i48(f: float) returns (i48);
function $fp2si.float.i56(f: float) returns (i56);
function $fp2si.float.i64(f: float) returns (i64);
function $fp2si.float.i80(f: float) returns (i80);
function $fp2si.float.i88(f: float) returns (i88);
function $fp2si.float.i96(f: float) returns (i96);
function $fp2si.float.i128(f: float) returns (i128);
function $fp2si.float.i160(f: float) returns (i160);
function $fp2si.float.i256(f: float) returns (i256);
function $fp2ui.float.i1(f: float) returns (i1);
function $fp2ui.float.i5(f: float) returns (i5);
function $fp2ui.float.i6(f: float) returns (i6);
function $fp2ui.float.i8(f: float) returns (i8);
function $fp2ui.float.i16(f: float) returns (i16);
function $fp2ui.float.i24(f: float) returns (i24);
function $fp2ui.float.i32(f: float) returns (i32);
function $fp2ui.float.i33(f: float) returns (i33);
function $fp2ui.float.i40(f: float) returns (i40);
function $fp2ui.float.i48(f: float) returns (i48);
function $fp2ui.float.i56(f: float) returns (i56);
function $fp2ui.float.i64(f: float) returns (i64);
function $fp2ui.float.i80(f: float) returns (i80);
function $fp2ui.float.i88(f: float) returns (i88);
function $fp2ui.float.i96(f: float) returns (i96);
function $fp2ui.float.i128(f: float) returns (i128);
function $fp2ui.float.i160(f: float) returns (i160);
function $fp2ui.float.i256(f: float) returns (i256);
function $si2fp.i1.float(i: i1) returns (float);
function $si2fp.i5.float(i: i5) returns (float);
function $si2fp.i6.float(i: i6) returns (float);
function $si2fp.i8.float(i: i8) returns (float);
function $si2fp.i16.float(i: i16) returns (float);
function $si2fp.i24.float(i: i24) returns (float);
function $si2fp.i32.float(i: i32) returns (float);
function $si2fp.i33.float(i: i33) returns (float);
function $si2fp.i40.float(i: i40) returns (float);
function $si2fp.i48.float(i: i48) returns (float);
function $si2fp.i56.float(i: i56) returns (float);
function $si2fp.i64.float(i: i64) returns (float);
function $si2fp.i80.float(i: i80) returns (float);
function $si2fp.i88.float(i: i88) returns (float);
function $si2fp.i96.float(i: i96) returns (float);
function $si2fp.i128.float(i: i128) returns (float);
function $si2fp.i160.float(i: i160) returns (float);
function $si2fp.i256.float(i: i256) returns (float);
function $ui2fp.i1.float(i: i1) returns (float);
function $ui2fp.i5.float(i: i5) returns (float);
function $ui2fp.i6.float(i: i6) returns (float);
function $ui2fp.i8.float(i: i8) returns (float);
function $ui2fp.i16.float(i: i16) returns (float);
function $ui2fp.i24.float(i: i24) returns (float);
function $ui2fp.i32.float(i: i32) returns (float);
function $ui2fp.i33.float(i: i33) returns (float);
function $ui2fp.i40.float(i: i40) returns (float);
function $ui2fp.i48.float(i: i48) returns (float);
function $ui2fp.i56.float(i: i56) returns (float);
function $ui2fp.i64.float(i: i64) returns (float);
function $ui2fp.i80.float(i: i80) returns (float);
function $ui2fp.i88.float(i: i88) returns (float);
function $ui2fp.i96.float(i: i96) returns (float);
function $ui2fp.i128.float(i: i128) returns (float);
function $ui2fp.i160.float(i: i160) returns (float);
function $ui2fp.i256.float(i: i256) returns (float);
function $fpext.float.float(f: float) returns (float);
function $fptrunc.float.float(f: float) returns (float);
function {:inline} $load.float(M: [ref] float, p: ref) returns (float) { M[p] }
function {:inline} $store.float(M: [ref] float, p: ref, f: float) returns ([ref] float) { M[p := f] }
function {:inline} $load.unsafe.float(M: [ref] i8, p: ref) returns (float) { $bitcast.i8.float(M[p]) }
function {:inline} $store.unsafe.float(M: [ref] i8, p: ref, f: float) returns ([ref] i8) { M[p := $bitcast.float.i8(f)] }
function $extractvalue.float(p: ref, i: int) returns (float);
const Hacl_Curve25519_51_fsquare_times: ref;
axiom (Hacl_Curve25519_51_fsquare_times == $sub.ref(0,1032));
procedure {:inline 1} Hacl_Curve25519_51_fsquare_times($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1, $i3: i32, $i3.dup: i1)
modifies $exn;
modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.0;
modifies $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93;
modifies $CurrAddr;
{
  var $i4: i32;
  var $i4.dup: i1;
  var $i5: i32;
  var $i5.dup: i1;
  var $i6: i1;
  var $i6.dup: i1;
  var $i7: i32;
  var $i7.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 167, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "Hacl_Curve25519_51_fsquare_times:arg:n"} boogie_si_record_i32($i3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 167, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fsqr($p0, $p0.dup, $p1, $p1.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 168, 8} true;
  assume {:verifier.code 0} true;
  $i4 := 0;
  $i4.dup := 0;
  goto $bb1;
$bb1:
  assert {:shadow_invariant} $shadow_ok;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 168, 41} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i32($i3,1);
  $i5.dup := $or.i1($i3.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 168, 37} true;
  assume {:verifier.code 0} true;
  $i6 := $ult.i32($i4,$i5);
  $i6.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 168, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i6} true;
  $i6.dup := 0;
  goto $bb2, $bb3;
$bb2:
  assume ($i6 == 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 170, 5} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fsqr($p0, $p0.dup, $p0, $p0.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 171, 3} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume !($i6 == 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 172, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
$bb4:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 168, 58} true;
  assume {:verifier.code 0} true;
  $i7 := $add.i32($i4,1);
  $i7.dup := $or.i1($i4.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i7);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 168, 3} true;
  assume {:verifier.code 0} true;
  $i4 := $i7;
  $i4.dup := 0;
  goto $bb1;
}
const llvm.dbg.value: ref;
axiom (llvm.dbg.value == $sub.ref(0,2064));
procedure {:inline 1} llvm.dbg.value($p0: ref, $p1: ref, $p2: ref);
const Hacl_Impl_Curve25519_Field51_fsqr: ref;
axiom (Hacl_Impl_Curve25519_Field51_fsqr == $sub.ref(0,3096));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fsqr($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1)
modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85, $M.0, $exn;
modifies $M.86;
modifies $M.87, $M.88, $M.89;
modifies $M.90;
modifies $M.91;
modifies $M.92, $M.93;
modifies $CurrAddr;
{
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $p8: ref;
  var $p8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $p10: ref;
  var $p10.dup: i1;
  var $p11: ref;
  var $p11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
  var $p13: ref;
  var $p13.dup: i1;
  var $p14: ref;
  var $p14.dup: i1;
  var $p15: ref;
  var $p15.dup: i1;
  var $p16: ref;
  var $p16.dup: i1;
  var $p17: ref;
  var $p17.dup: i1;
  var $p18: ref;
  var $p18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $p20: ref;
  var $p20.dup: i1;
  var $p21: ref;
  var $p21.dup: i1;
  var $p22: ref;
  var $p22.dup: i1;
  var $p23: ref;
  var $p23.dup: i1;
  var $p24: ref;
  var $p24.dup: i1;
  var $p25: ref;
  var $p25.dup: i1;
  var $p26: ref;
  var $p26.dup: i1;
  var $p27: ref;
  var $p27.dup: i1;
  var $p28: ref;
  var $p28.dup: i1;
  var $p29: ref;
  var $p29.dup: i1;
  var $p30: ref;
  var $p30.dup: i1;
  var $p31: ref;
  var $p31.dup: i1;
  var $p32: ref;
  var $p32.dup: i1;
  var $p33: ref;
  var $p33.dup: i1;
  var $p34: ref;
  var $p34.dup: i1;
  var $p35: ref;
  var $p35.dup: i1;
  var $p36: ref;
  var $p36.dup: i1;
  var $p37: ref;
  var $p37.dup: i1;
  var $p38: ref;
  var $p38.dup: i1;
  var $p39: ref;
  var $p39.dup: i1;
  var $p40: ref;
  var $p40.dup: i1;
  var $p41: ref;
  var $p41.dup: i1;
  var $p42: ref;
  var $p42.dup: i1;
  var $p43: ref;
  var $p43.dup: i1;
  var $p44: ref;
  var $p44.dup: i1;
  var $p45: ref;
  var $p45.dup: i1;
  var $p46: ref;
  var $p46.dup: i1;
  var $p47: ref;
  var $p47.dup: i1;
  var $p48: ref;
  var $p48.dup: i1;
  var $p49: ref;
  var $p49.dup: i1;
  var $p50: ref;
  var $p50.dup: i1;
  var $p51: ref;
  var $p51.dup: i1;
  var $p52: ref;
  var $p52.dup: i1;
  var $p53: ref;
  var $p53.dup: i1;
  var $p54: ref;
  var $p54.dup: i1;
  var $p55: ref;
  var $p55.dup: i1;
  var $p56: ref;
  var $p56.dup: i1;
  var $p57: ref;
  var $p57.dup: i1;
  var $p58: ref;
  var $p58.dup: i1;
  var $p59: ref;
  var $p59.dup: i1;
  var $p60: ref;
  var $p60.dup: i1;
  var $p61: ref;
  var $p61.dup: i1;
  var $p62: ref;
  var $p62.dup: i1;
  var $p63: ref;
  var $p63.dup: i1;
  var $p64: ref;
  var $p64.dup: i1;
  var $p65: ref;
  var $p65.dup: i1;
  var $p66: ref;
  var $p66.dup: i1;
  var $p67: ref;
  var $p67.dup: i1;
  var $p68: ref;
  var $p68.dup: i1;
  var $p69: ref;
  var $p69.dup: i1;
  var $p70: ref;
  var $p70.dup: i1;
  var $p71: ref;
  var $p71.dup: i1;
  var $p72: ref;
  var $p72.dup: i1;
  var $p73: ref;
  var $p73.dup: i1;
  var $p74: ref;
  var $p74.dup: i1;
  var $p75: ref;
  var $p75.dup: i1;
  var $p76: ref;
  var $p76.dup: i1;
  var $p77: ref;
  var $p77.dup: i1;
  var $p78: ref;
  var $p78.dup: i1;
  var $p79: ref;
  var $p79.dup: i1;
  var $p80: ref;
  var $p80.dup: i1;
  var $p81: ref;
  var $p81.dup: i1;
  var $p82: ref;
  var $p82.dup: i1;
  var $p83: ref;
  var $p83.dup: i1;
  var $p84: ref;
  var $p84.dup: i1;
  var $p85: ref;
  var $p85.dup: i1;
  var $p86: ref;
  var $p86.dup: i1;
  var $p87: ref;
  var $p87.dup: i1;
  var $p88: ref;
  var $p88.dup: i1;
  var $i89: i64;
  var $i89.dup: i1;
  var $p90: ref;
  var $p90.dup: i1;
  var $i91: i64;
  var $i91.dup: i1;
  var $p92: ref;
  var $p92.dup: i1;
  var $i93: i64;
  var $i93.dup: i1;
  var $p94: ref;
  var $p94.dup: i1;
  var $i95: i64;
  var $i95.dup: i1;
  var $p96: ref;
  var $p96.dup: i1;
  var $i97: i64;
  var $i97.dup: i1;
  var $i98: i64;
  var $i98.dup: i1;
  var $i99: i64;
  var $i99.dup: i1;
  var $i100: i64;
  var $i100.dup: i1;
  var $i101: i64;
  var $i101.dup: i1;
  var $i102: i64;
  var $i102.dup: i1;
  var $i103: i64;
  var $i103.dup: i1;
  var $p104: ref;
  var $p104.dup: i1;
  var $p105: ref;
  var $p105.dup: i1;
  var $p106: ref;
  var $p106.dup: i1;
  var $i107: i64;
  var $i107.dup: i1;
  var $p108: ref;
  var $p108.dup: i1;
  var $i109: i64;
  var $i109.dup: i1;
  var $i110: i128;
  var $i110.dup: i1;
  var $p111: ref;
  var $p111.dup: i1;
  var $p112: ref;
  var $p112.dup: i1;
  var $p113: ref;
  var $p113.dup: i1;
  var $i114: i64;
  var $i114.dup: i1;
  var $p115: ref;
  var $p115.dup: i1;
  var $i116: i64;
  var $i116.dup: i1;
  var $i117: i128;
  var $i117.dup: i1;
  var $p118: ref;
  var $p118.dup: i1;
  var $p119: ref;
  var $p119.dup: i1;
  var $i120: i64;
  var $i120.dup: i1;
  var $p121: ref;
  var $p121.dup: i1;
  var $i122: i64;
  var $i122.dup: i1;
  var $p123: ref;
  var $p123.dup: i1;
  var $p124: ref;
  var $p124.dup: i1;
  var $i125: i64;
  var $i125.dup: i1;
  var $p126: ref;
  var $p126.dup: i1;
  var $i127: i64;
  var $i127.dup: i1;
  var $p128: ref;
  var $p128.dup: i1;
  var $p129: ref;
  var $p129.dup: i1;
  var $p130: ref;
  var $p130.dup: i1;
  var $i131: i64;
  var $i131.dup: i1;
  var $p132: ref;
  var $p132.dup: i1;
  var $i133: i64;
  var $i133.dup: i1;
  var $i134: i128;
  var $i134.dup: i1;
  var $p135: ref;
  var $p135.dup: i1;
  var $p136: ref;
  var $p136.dup: i1;
  var $p137: ref;
  var $p137.dup: i1;
  var $i138: i64;
  var $i138.dup: i1;
  var $p139: ref;
  var $p139.dup: i1;
  var $i140: i64;
  var $i140.dup: i1;
  var $i141: i128;
  var $i141.dup: i1;
  var $p142: ref;
  var $p142.dup: i1;
  var $p143: ref;
  var $p143.dup: i1;
  var $i144: i64;
  var $i144.dup: i1;
  var $p145: ref;
  var $p145.dup: i1;
  var $i146: i64;
  var $i146.dup: i1;
  var $p147: ref;
  var $p147.dup: i1;
  var $p148: ref;
  var $p148.dup: i1;
  var $i149: i64;
  var $i149.dup: i1;
  var $p150: ref;
  var $p150.dup: i1;
  var $i151: i64;
  var $i151.dup: i1;
  var $p152: ref;
  var $p152.dup: i1;
  var $p153: ref;
  var $p153.dup: i1;
  var $p154: ref;
  var $p154.dup: i1;
  var $i155: i64;
  var $i155.dup: i1;
  var $p156: ref;
  var $p156.dup: i1;
  var $i157: i64;
  var $i157.dup: i1;
  var $i158: i128;
  var $i158.dup: i1;
  var $p159: ref;
  var $p159.dup: i1;
  var $p160: ref;
  var $p160.dup: i1;
  var $p161: ref;
  var $p161.dup: i1;
  var $i162: i64;
  var $i162.dup: i1;
  var $p163: ref;
  var $p163.dup: i1;
  var $i164: i64;
  var $i164.dup: i1;
  var $i165: i128;
  var $i165.dup: i1;
  var $p166: ref;
  var $p166.dup: i1;
  var $p167: ref;
  var $p167.dup: i1;
  var $p168: ref;
  var $p168.dup: i1;
  var $i169: i64;
  var $i169.dup: i1;
  var $p170: ref;
  var $p170.dup: i1;
  var $i171: i64;
  var $i171.dup: i1;
  var $i172: i128;
  var $i172.dup: i1;
  var $p173: ref;
  var $p173.dup: i1;
  var $p174: ref;
  var $p174.dup: i1;
  var $i175: i64;
  var $i175.dup: i1;
  var $p176: ref;
  var $p176.dup: i1;
  var $i177: i64;
  var $i177.dup: i1;
  var $p178: ref;
  var $p178.dup: i1;
  var $p179: ref;
  var $p179.dup: i1;
  var $i180: i64;
  var $i180.dup: i1;
  var $p181: ref;
  var $p181.dup: i1;
  var $i182: i64;
  var $i182.dup: i1;
  var $p183: ref;
  var $p183.dup: i1;
  var $p184: ref;
  var $p184.dup: i1;
  var $p185: ref;
  var $p185.dup: i1;
  var $i186: i64;
  var $i186.dup: i1;
  var $p187: ref;
  var $p187.dup: i1;
  var $i188: i64;
  var $i188.dup: i1;
  var $i189: i128;
  var $i189.dup: i1;
  var $p190: ref;
  var $p190.dup: i1;
  var $p191: ref;
  var $p191.dup: i1;
  var $p192: ref;
  var $p192.dup: i1;
  var $i193: i64;
  var $i193.dup: i1;
  var $p194: ref;
  var $p194.dup: i1;
  var $i195: i64;
  var $i195.dup: i1;
  var $i196: i128;
  var $i196.dup: i1;
  var $p197: ref;
  var $p197.dup: i1;
  var $p198: ref;
  var $p198.dup: i1;
  var $i199: i64;
  var $i199.dup: i1;
  var $p200: ref;
  var $p200.dup: i1;
  var $i201: i64;
  var $i201.dup: i1;
  var $p202: ref;
  var $p202.dup: i1;
  var $p203: ref;
  var $p203.dup: i1;
  var $i204: i64;
  var $i204.dup: i1;
  var $p205: ref;
  var $p205.dup: i1;
  var $i206: i64;
  var $i206.dup: i1;
  var $p207: ref;
  var $p207.dup: i1;
  var $p208: ref;
  var $p208.dup: i1;
  var $p209: ref;
  var $p209.dup: i1;
  var $i210: i64;
  var $i210.dup: i1;
  var $p211: ref;
  var $p211.dup: i1;
  var $i212: i64;
  var $i212.dup: i1;
  var $i213: i128;
  var $i213.dup: i1;
  var $p214: ref;
  var $p214.dup: i1;
  var $p215: ref;
  var $p215.dup: i1;
  var $p216: ref;
  var $p216.dup: i1;
  var $i217: i64;
  var $i217.dup: i1;
  var $p218: ref;
  var $p218.dup: i1;
  var $i219: i64;
  var $i219.dup: i1;
  var $i220: i128;
  var $i220.dup: i1;
  var $p221: ref;
  var $p221.dup: i1;
  var $p222: ref;
  var $p222.dup: i1;
  var $p223: ref;
  var $p223.dup: i1;
  var $i224: i64;
  var $i224.dup: i1;
  var $p225: ref;
  var $p225.dup: i1;
  var $i226: i64;
  var $i226.dup: i1;
  var $i227: i128;
  var $i227.dup: i1;
  var $p228: ref;
  var $p228.dup: i1;
  var $p229: ref;
  var $p229.dup: i1;
  var $i230: i64;
  var $i230.dup: i1;
  var $p231: ref;
  var $p231.dup: i1;
  var $i232: i64;
  var $i232.dup: i1;
  var $p233: ref;
  var $p233.dup: i1;
  var $p234: ref;
  var $p234.dup: i1;
  var $i235: i64;
  var $i235.dup: i1;
  var $p236: ref;
  var $p236.dup: i1;
  var $i237: i64;
  var $i237.dup: i1;
  var $p238: ref;
  var $p238.dup: i1;
  var $p239: ref;
  var $p239.dup: i1;
  var $p240: ref;
  var $p240.dup: i1;
  var $i241: i64;
  var $i241.dup: i1;
  var $p242: ref;
  var $p242.dup: i1;
  var $i243: i64;
  var $i243.dup: i1;
  var $i244: i128;
  var $i244.dup: i1;
  var $p245: ref;
  var $p245.dup: i1;
  var $p246: ref;
  var $p246.dup: i1;
  var $p247: ref;
  var $p247.dup: i1;
  var $i248: i64;
  var $i248.dup: i1;
  var $p249: ref;
  var $p249.dup: i1;
  var $i250: i64;
  var $i250.dup: i1;
  var $i251: i128;
  var $i251.dup: i1;
  var $p252: ref;
  var $p252.dup: i1;
  var $p253: ref;
  var $p253.dup: i1;
  var $i254: i64;
  var $i254.dup: i1;
  var $p255: ref;
  var $p255.dup: i1;
  var $i256: i64;
  var $i256.dup: i1;
  var $p257: ref;
  var $p257.dup: i1;
  var $p258: ref;
  var $p258.dup: i1;
  var $i259: i64;
  var $i259.dup: i1;
  var $p260: ref;
  var $p260.dup: i1;
  var $i261: i64;
  var $i261.dup: i1;
  var $p262: ref;
  var $p262.dup: i1;
  var $p263: ref;
  var $p263.dup: i1;
  var $p264: ref;
  var $p264.dup: i1;
  var $i265: i64;
  var $i265.dup: i1;
  var $p266: ref;
  var $p266.dup: i1;
  var $i267: i64;
  var $i267.dup: i1;
  var $i268: i128;
  var $i268.dup: i1;
  var $p269: ref;
  var $p269.dup: i1;
  var $p270: ref;
  var $p270.dup: i1;
  var $p271: ref;
  var $p271.dup: i1;
  var $i272: i64;
  var $i272.dup: i1;
  var $p273: ref;
  var $p273.dup: i1;
  var $i274: i64;
  var $i274.dup: i1;
  var $i275: i128;
  var $i275.dup: i1;
  var $p276: ref;
  var $p276.dup: i1;
  var $p277: ref;
  var $p277.dup: i1;
  var $p278: ref;
  var $p278.dup: i1;
  var $i279: i64;
  var $i279.dup: i1;
  var $p280: ref;
  var $p280.dup: i1;
  var $i281: i64;
  var $i281.dup: i1;
  var $i282: i128;
  var $i282.dup: i1;
  var $p283: ref;
  var $p283.dup: i1;
  var $p284: ref;
  var $p284.dup: i1;
  var $i285: i64;
  var $i285.dup: i1;
  var $p286: ref;
  var $p286.dup: i1;
  var $i287: i64;
  var $i287.dup: i1;
  var $p288: ref;
  var $p288.dup: i1;
  var $p289: ref;
  var $p289.dup: i1;
  var $i290: i64;
  var $i290.dup: i1;
  var $p291: ref;
  var $p291.dup: i1;
  var $i292: i64;
  var $i292.dup: i1;
  var $p293: ref;
  var $p293.dup: i1;
  var $p294: ref;
  var $p294.dup: i1;
  var $p295: ref;
  var $p295.dup: i1;
  var $i296: i64;
  var $i296.dup: i1;
  var $p297: ref;
  var $p297.dup: i1;
  var $i298: i64;
  var $i298.dup: i1;
  var $i299: i128;
  var $i299.dup: i1;
  var $p300: ref;
  var $p300.dup: i1;
  var $p301: ref;
  var $p301.dup: i1;
  var $p302: ref;
  var $p302.dup: i1;
  var $i303: i64;
  var $i303.dup: i1;
  var $p304: ref;
  var $p304.dup: i1;
  var $i305: i64;
  var $i305.dup: i1;
  var $i306: i128;
  var $i306.dup: i1;
  var $p307: ref;
  var $p307.dup: i1;
  var $p308: ref;
  var $p308.dup: i1;
  var $i309: i64;
  var $i309.dup: i1;
  var $p310: ref;
  var $p310.dup: i1;
  var $i311: i64;
  var $i311.dup: i1;
  var $p312: ref;
  var $p312.dup: i1;
  var $p313: ref;
  var $p313.dup: i1;
  var $i314: i64;
  var $i314.dup: i1;
  var $p315: ref;
  var $p315.dup: i1;
  var $i316: i64;
  var $i316.dup: i1;
  var $p317: ref;
  var $p317.dup: i1;
  var $p318: ref;
  var $p318.dup: i1;
  var $p319: ref;
  var $p319.dup: i1;
  var $i320: i64;
  var $i320.dup: i1;
  var $p321: ref;
  var $p321.dup: i1;
  var $i322: i64;
  var $i322.dup: i1;
  var $i323: i128;
  var $i323.dup: i1;
  var $p324: ref;
  var $p324.dup: i1;
  var $p325: ref;
  var $p325.dup: i1;
  var $p326: ref;
  var $p326.dup: i1;
  var $i327: i64;
  var $i327.dup: i1;
  var $p328: ref;
  var $p328.dup: i1;
  var $i329: i64;
  var $i329.dup: i1;
  var $i330: i128;
  var $i330.dup: i1;
  var $p331: ref;
  var $p331.dup: i1;
  var $p332: ref;
  var $p332.dup: i1;
  var $p333: ref;
  var $p333.dup: i1;
  var $i334: i64;
  var $i334.dup: i1;
  var $p335: ref;
  var $p335.dup: i1;
  var $i336: i64;
  var $i336.dup: i1;
  var $i337: i128;
  var $i337.dup: i1;
  var $p338: ref;
  var $p338.dup: i1;
  var $p339: ref;
  var $p339.dup: i1;
  var $i340: i64;
  var $i340.dup: i1;
  var $p341: ref;
  var $p341.dup: i1;
  var $i342: i64;
  var $i342.dup: i1;
  var $p343: ref;
  var $p343.dup: i1;
  var $p344: ref;
  var $p344.dup: i1;
  var $i345: i64;
  var $i345.dup: i1;
  var $p346: ref;
  var $p346.dup: i1;
  var $i347: i64;
  var $i347.dup: i1;
  var $p348: ref;
  var $p348.dup: i1;
  var $p349: ref;
  var $p349.dup: i1;
  var $p350: ref;
  var $p350.dup: i1;
  var $i351: i64;
  var $i351.dup: i1;
  var $p352: ref;
  var $p352.dup: i1;
  var $i353: i64;
  var $i353.dup: i1;
  var $i354: i128;
  var $i354.dup: i1;
  var $p355: ref;
  var $p355.dup: i1;
  var $p356: ref;
  var $p356.dup: i1;
  var $p357: ref;
  var $p357.dup: i1;
  var $i358: i64;
  var $i358.dup: i1;
  var $p359: ref;
  var $p359.dup: i1;
  var $i360: i64;
  var $i360.dup: i1;
  var $i361: i128;
  var $i361.dup: i1;
  var $p362: ref;
  var $p362.dup: i1;
  var $p363: ref;
  var $p363.dup: i1;
  var $i364: i64;
  var $i364.dup: i1;
  var $p365: ref;
  var $p365.dup: i1;
  var $i366: i64;
  var $i366.dup: i1;
  var $p367: ref;
  var $p367.dup: i1;
  var $p368: ref;
  var $p368.dup: i1;
  var $i369: i64;
  var $i369.dup: i1;
  var $p370: ref;
  var $p370.dup: i1;
  var $i371: i64;
  var $i371.dup: i1;
  var $p372: ref;
  var $p372.dup: i1;
  var $p373: ref;
  var $p373.dup: i1;
  var $p374: ref;
  var $p374.dup: i1;
  var $i375: i64;
  var $i375.dup: i1;
  var $p376: ref;
  var $p376.dup: i1;
  var $i377: i64;
  var $i377.dup: i1;
  var $i378: i128;
  var $i378.dup: i1;
  var $p379: ref;
  var $p379.dup: i1;
  var $p380: ref;
  var $p380.dup: i1;
  var $p381: ref;
  var $p381.dup: i1;
  var $i382: i64;
  var $i382.dup: i1;
  var $p383: ref;
  var $p383.dup: i1;
  var $i384: i64;
  var $i384.dup: i1;
  var $i385: i128;
  var $i385.dup: i1;
  var $p386: ref;
  var $p386.dup: i1;
  var $p387: ref;
  var $p387.dup: i1;
  var $i388: i64;
  var $i388.dup: i1;
  var $p389: ref;
  var $p389.dup: i1;
  var $i390: i64;
  var $i390.dup: i1;
  var $p391: ref;
  var $p391.dup: i1;
  var $p392: ref;
  var $p392.dup: i1;
  var $i393: i64;
  var $i393.dup: i1;
  var $p394: ref;
  var $p394.dup: i1;
  var $i395: i64;
  var $i395.dup: i1;
  var $p396: ref;
  var $p396.dup: i1;
  var $p397: ref;
  var $p397.dup: i1;
  var $p398: ref;
  var $p398.dup: i1;
  var $i399: i64;
  var $i399.dup: i1;
  var $p400: ref;
  var $p400.dup: i1;
  var $i401: i64;
  var $i401.dup: i1;
  var $i402: i128;
  var $i402.dup: i1;
  var $p403: ref;
  var $p403.dup: i1;
  var $p404: ref;
  var $p404.dup: i1;
  var $i405: i64;
  var $i405.dup: i1;
  var $p406: ref;
  var $p406.dup: i1;
  var $i407: i64;
  var $i407.dup: i1;
  var $i408: i64;
  var $i408.dup: i1;
  var $i409: i64;
  var $i409.dup: i1;
  var $p410: ref;
  var $p410.dup: i1;
  var $p411: ref;
  var $p411.dup: i1;
  var $i412: i64;
  var $i412.dup: i1;
  var $p413: ref;
  var $p413.dup: i1;
  var $i414: i64;
  var $i414.dup: i1;
  var $p415: ref;
  var $p415.dup: i1;
  var $p416: ref;
  var $p416.dup: i1;
  var $p417: ref;
  var $p417.dup: i1;
  var $i418: i64;
  var $i418.dup: i1;
  var $p419: ref;
  var $p419.dup: i1;
  var $i420: i64;
  var $i420.dup: i1;
  var $i421: i128;
  var $i421.dup: i1;
  var $p422: ref;
  var $p422.dup: i1;
  var $p423: ref;
  var $p423.dup: i1;
  var $i424: i64;
  var $i424.dup: i1;
  var $p425: ref;
  var $p425.dup: i1;
  var $i426: i64;
  var $i426.dup: i1;
  var $i427: i64;
  var $i427.dup: i1;
  var $p428: ref;
  var $p428.dup: i1;
  var $p429: ref;
  var $p429.dup: i1;
  var $p430: ref;
  var $p430.dup: i1;
  var $i431: i64;
  var $i431.dup: i1;
  var $p432: ref;
  var $p432.dup: i1;
  var $i433: i64;
  var $i433.dup: i1;
  var $i434: i128;
  var $i434.dup: i1;
  var $p435: ref;
  var $p435.dup: i1;
  var $p436: ref;
  var $p436.dup: i1;
  var $i437: i64;
  var $i437.dup: i1;
  var $p438: ref;
  var $p438.dup: i1;
  var $i439: i64;
  var $i439.dup: i1;
  var $p440: ref;
  var $p440.dup: i1;
  var $p441: ref;
  var $p441.dup: i1;
  var $i442: i64;
  var $i442.dup: i1;
  var $p443: ref;
  var $p443.dup: i1;
  var $i444: i64;
  var $i444.dup: i1;
  var $p445: ref;
  var $p445.dup: i1;
  var $p446: ref;
  var $p446.dup: i1;
  var $p447: ref;
  var $p447.dup: i1;
  var $i448: i64;
  var $i448.dup: i1;
  var $p449: ref;
  var $p449.dup: i1;
  var $i450: i64;
  var $i450.dup: i1;
  var $i451: i128;
  var $i451.dup: i1;
  var $p452: ref;
  var $p452.dup: i1;
  var $p453: ref;
  var $p453.dup: i1;
  var $i454: i64;
  var $i454.dup: i1;
  var $p455: ref;
  var $p455.dup: i1;
  var $i456: i64;
  var $i456.dup: i1;
  var $i457: i64;
  var $i457.dup: i1;
  var $i458: i64;
  var $i458.dup: i1;
  var $p459: ref;
  var $p459.dup: i1;
  var $p460: ref;
  var $p460.dup: i1;
  var $i461: i64;
  var $i461.dup: i1;
  var $p462: ref;
  var $p462.dup: i1;
  var $i463: i64;
  var $i463.dup: i1;
  var $p464: ref;
  var $p464.dup: i1;
  var $p465: ref;
  var $p465.dup: i1;
  var $p466: ref;
  var $p466.dup: i1;
  var $i467: i64;
  var $i467.dup: i1;
  var $p468: ref;
  var $p468.dup: i1;
  var $i469: i64;
  var $i469.dup: i1;
  var $i470: i128;
  var $i470.dup: i1;
  var $p471: ref;
  var $p471.dup: i1;
  var $p472: ref;
  var $p472.dup: i1;
  var $i473: i64;
  var $i473.dup: i1;
  var $p474: ref;
  var $p474.dup: i1;
  var $i475: i64;
  var $i475.dup: i1;
  var $i476: i64;
  var $i476.dup: i1;
  var $p477: ref;
  var $p477.dup: i1;
  var $p478: ref;
  var $p478.dup: i1;
  var $p479: ref;
  var $p479.dup: i1;
  var $i480: i64;
  var $i480.dup: i1;
  var $p481: ref;
  var $p481.dup: i1;
  var $i482: i64;
  var $i482.dup: i1;
  var $i483: i128;
  var $i483.dup: i1;
  var $p484: ref;
  var $p484.dup: i1;
  var $p485: ref;
  var $p485.dup: i1;
  var $i486: i64;
  var $i486.dup: i1;
  var $p487: ref;
  var $p487.dup: i1;
  var $i488: i64;
  var $i488.dup: i1;
  var $p489: ref;
  var $p489.dup: i1;
  var $p490: ref;
  var $p490.dup: i1;
  var $i491: i64;
  var $i491.dup: i1;
  var $p492: ref;
  var $p492.dup: i1;
  var $i493: i64;
  var $i493.dup: i1;
  var $p494: ref;
  var $p494.dup: i1;
  var $p495: ref;
  var $p495.dup: i1;
  var $p496: ref;
  var $p496.dup: i1;
  var $i497: i64;
  var $i497.dup: i1;
  var $p498: ref;
  var $p498.dup: i1;
  var $i499: i64;
  var $i499.dup: i1;
  var $i500: i128;
  var $i500.dup: i1;
  var $p501: ref;
  var $p501.dup: i1;
  var $p502: ref;
  var $p502.dup: i1;
  var $i503: i64;
  var $i503.dup: i1;
  var $p504: ref;
  var $p504.dup: i1;
  var $i505: i64;
  var $i505.dup: i1;
  var $i506: i64;
  var $i506.dup: i1;
  var $i507: i64;
  var $i507.dup: i1;
  var $p508: ref;
  var $p508.dup: i1;
  var $p509: ref;
  var $p509.dup: i1;
  var $i510: i64;
  var $i510.dup: i1;
  var $p511: ref;
  var $p511.dup: i1;
  var $i512: i64;
  var $i512.dup: i1;
  var $p513: ref;
  var $p513.dup: i1;
  var $p514: ref;
  var $p514.dup: i1;
  var $p515: ref;
  var $p515.dup: i1;
  var $i516: i64;
  var $i516.dup: i1;
  var $p517: ref;
  var $p517.dup: i1;
  var $i518: i64;
  var $i518.dup: i1;
  var $i519: i128;
  var $i519.dup: i1;
  var $p520: ref;
  var $p520.dup: i1;
  var $p521: ref;
  var $p521.dup: i1;
  var $i522: i64;
  var $i522.dup: i1;
  var $p523: ref;
  var $p523.dup: i1;
  var $i524: i64;
  var $i524.dup: i1;
  var $i525: i64;
  var $i525.dup: i1;
  var $p526: ref;
  var $p526.dup: i1;
  var $p527: ref;
  var $p527.dup: i1;
  var $p528: ref;
  var $p528.dup: i1;
  var $i529: i64;
  var $i529.dup: i1;
  var $p530: ref;
  var $p530.dup: i1;
  var $i531: i64;
  var $i531.dup: i1;
  var $i532: i128;
  var $i532.dup: i1;
  var $p533: ref;
  var $p533.dup: i1;
  var $p534: ref;
  var $p534.dup: i1;
  var $i535: i64;
  var $i535.dup: i1;
  var $p536: ref;
  var $p536.dup: i1;
  var $i537: i64;
  var $i537.dup: i1;
  var $p538: ref;
  var $p538.dup: i1;
  var $p539: ref;
  var $p539.dup: i1;
  var $i540: i64;
  var $i540.dup: i1;
  var $p541: ref;
  var $p541.dup: i1;
  var $i542: i64;
  var $i542.dup: i1;
  var $p543: ref;
  var $p543.dup: i1;
  var $p544: ref;
  var $p544.dup: i1;
  var $p545: ref;
  var $p545.dup: i1;
  var $i546: i64;
  var $i546.dup: i1;
  var $p547: ref;
  var $p547.dup: i1;
  var $i548: i64;
  var $i548.dup: i1;
  var $i549: i128;
  var $i549.dup: i1;
  var $p550: ref;
  var $p550.dup: i1;
  var $p551: ref;
  var $p551.dup: i1;
  var $i552: i64;
  var $i552.dup: i1;
  var $p553: ref;
  var $p553.dup: i1;
  var $i554: i64;
  var $i554.dup: i1;
  var $i555: i64;
  var $i555.dup: i1;
  var $i556: i64;
  var $i556.dup: i1;
  var $p557: ref;
  var $p557.dup: i1;
  var $p558: ref;
  var $p558.dup: i1;
  var $i559: i64;
  var $i559.dup: i1;
  var $p560: ref;
  var $p560.dup: i1;
  var $i561: i64;
  var $i561.dup: i1;
  var $p562: ref;
  var $p562.dup: i1;
  var $p563: ref;
  var $p563.dup: i1;
  var $p564: ref;
  var $p564.dup: i1;
  var $i565: i64;
  var $i565.dup: i1;
  var $p566: ref;
  var $p566.dup: i1;
  var $i567: i64;
  var $i567.dup: i1;
  var $i568: i128;
  var $i568.dup: i1;
  var $p569: ref;
  var $p569.dup: i1;
  var $p570: ref;
  var $p570.dup: i1;
  var $i571: i64;
  var $i571.dup: i1;
  var $p572: ref;
  var $p572.dup: i1;
  var $i573: i64;
  var $i573.dup: i1;
  var $i574: i64;
  var $i574.dup: i1;
  var $p575: ref;
  var $p575.dup: i1;
  var $p576: ref;
  var $p576.dup: i1;
  var $p577: ref;
  var $p577.dup: i1;
  var $i578: i64;
  var $i578.dup: i1;
  var $p579: ref;
  var $p579.dup: i1;
  var $i580: i64;
  var $i580.dup: i1;
  var $i581: i128;
  var $i581.dup: i1;
  var $p582: ref;
  var $p582.dup: i1;
  var $p583: ref;
  var $p583.dup: i1;
  var $i584: i64;
  var $i584.dup: i1;
  var $p585: ref;
  var $p585.dup: i1;
  var $i586: i64;
  var $i586.dup: i1;
  var $p587: ref;
  var $p587.dup: i1;
  var $p588: ref;
  var $p588.dup: i1;
  var $i589: i64;
  var $i589.dup: i1;
  var $p590: ref;
  var $p590.dup: i1;
  var $i591: i64;
  var $i591.dup: i1;
  var $p592: ref;
  var $p592.dup: i1;
  var $p593: ref;
  var $p593.dup: i1;
  var $p594: ref;
  var $p594.dup: i1;
  var $i595: i64;
  var $i595.dup: i1;
  var $p596: ref;
  var $p596.dup: i1;
  var $i597: i64;
  var $i597.dup: i1;
  var $i598: i128;
  var $i598.dup: i1;
  var $p599: ref;
  var $p599.dup: i1;
  var $p600: ref;
  var $p600.dup: i1;
  var $i601: i64;
  var $i601.dup: i1;
  var $p602: ref;
  var $p602.dup: i1;
  var $i603: i64;
  var $i603.dup: i1;
  var $i604: i64;
  var $i604.dup: i1;
  var $i605: i64;
  var $i605.dup: i1;
  var $p606: ref;
  var $p606.dup: i1;
  var $p607: ref;
  var $p607.dup: i1;
  var $i608: i64;
  var $i608.dup: i1;
  var $p609: ref;
  var $p609.dup: i1;
  var $i610: i64;
  var $i610.dup: i1;
  var $p611: ref;
  var $p611.dup: i1;
  var $p612: ref;
  var $p612.dup: i1;
  var $p613: ref;
  var $p613.dup: i1;
  var $i614: i64;
  var $i614.dup: i1;
  var $p615: ref;
  var $p615.dup: i1;
  var $i616: i64;
  var $i616.dup: i1;
  var $i617: i128;
  var $i617.dup: i1;
  var $p618: ref;
  var $p618.dup: i1;
  var $p619: ref;
  var $p619.dup: i1;
  var $i620: i64;
  var $i620.dup: i1;
  var $p621: ref;
  var $p621.dup: i1;
  var $i622: i64;
  var $i622.dup: i1;
  var $i623: i64;
  var $i623.dup: i1;
  var $i624: i64;
  var $i624.dup: i1;
  var $i625: i64;
  var $i625.dup: i1;
  var $i626: i64;
  var $i626.dup: i1;
  var $i627: i64;
  var $i627.dup: i1;
  var $i628: i64;
  var $i628.dup: i1;
  var $p629: ref;
  var $p629.dup: i1;
  var $p630: ref;
  var $p630.dup: i1;
  var $p631: ref;
  var $p631.dup: i1;
  var $p632: ref;
  var $p632.dup: i1;
  var $p633: ref;
  var $p633.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 374, 17} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p3.dup := 0;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p4.dup := 0;
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p5.dup := 0;
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p6.dup := 0;
  assume {:verifier.code 0} true;
  call $p7 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p7.dup := 0;
  assume {:verifier.code 0} true;
  call $p8 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p8.dup := 0;
  assume {:verifier.code 0} true;
  call $p9 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p9.dup := 0;
  assume {:verifier.code 0} true;
  call $p10 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p10.dup := 0;
  assume {:verifier.code 0} true;
  call $p11 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p11.dup := 0;
  assume {:verifier.code 0} true;
  call $p12 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p12.dup := 0;
  assume {:verifier.code 0} true;
  call $p13 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p13.dup := 0;
  assume {:verifier.code 0} true;
  call $p14 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p14.dup := 0;
  assume {:verifier.code 0} true;
  call $p15 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p15.dup := 0;
  assume {:verifier.code 0} true;
  call $p16 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p16.dup := 0;
  assume {:verifier.code 0} true;
  call $p17 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p17.dup := 0;
  assume {:verifier.code 0} true;
  call $p18 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p18.dup := 0;
  assume {:verifier.code 0} true;
  call $p19 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p19.dup := 0;
  assume {:verifier.code 0} true;
  call $p20 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p20.dup := 0;
  assume {:verifier.code 0} true;
  call $p21 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p21.dup := 0;
  assume {:verifier.code 0} true;
  call $p22 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p22.dup := 0;
  assume {:verifier.code 0} true;
  call $p23 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p23.dup := 0;
  assume {:verifier.code 0} true;
  call $p24 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p24.dup := 0;
  assume {:verifier.code 0} true;
  call $p25 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p25.dup := 0;
  assume {:verifier.code 0} true;
  call $p26 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p26.dup := 0;
  assume {:verifier.code 0} true;
  call $p27 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p27.dup := 0;
  assume {:verifier.code 0} true;
  call $p28 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p28.dup := 0;
  assume {:verifier.code 0} true;
  call $p29 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p29.dup := 0;
  assume {:verifier.code 0} true;
  call $p30 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p30.dup := 0;
  assume {:verifier.code 0} true;
  call $p31 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p31.dup := 0;
  assume {:verifier.code 0} true;
  call $p32 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p32.dup := 0;
  assume {:verifier.code 0} true;
  call $p33 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p33.dup := 0;
  assume {:verifier.code 0} true;
  call $p34 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p34.dup := 0;
  assume {:verifier.code 0} true;
  call $p35 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p35.dup := 0;
  assume {:verifier.code 0} true;
  call $p36 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p36.dup := 0;
  assume {:verifier.code 0} true;
  call $p37 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p37.dup := 0;
  assume {:verifier.code 0} true;
  call $p38 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p38.dup := 0;
  assume {:verifier.code 0} true;
  call $p39 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p39.dup := 0;
  assume {:verifier.code 0} true;
  call $p40 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p40.dup := 0;
  assume {:verifier.code 0} true;
  call $p41 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p41.dup := 0;
  assume {:verifier.code 0} true;
  call $p42 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p42.dup := 0;
  assume {:verifier.code 0} true;
  call $p43 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p43.dup := 0;
  assume {:verifier.code 0} true;
  call $p44 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p44.dup := 0;
  assume {:verifier.code 0} true;
  call $p45 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p45.dup := 0;
  assume {:verifier.code 0} true;
  call $p46 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p46.dup := 0;
  assume {:verifier.code 0} true;
  call $p47 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p47.dup := 0;
  assume {:verifier.code 0} true;
  call $p48 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p48.dup := 0;
  assume {:verifier.code 0} true;
  call $p49 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p49.dup := 0;
  assume {:verifier.code 0} true;
  call $p50 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p50.dup := 0;
  assume {:verifier.code 0} true;
  call $p51 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p51.dup := 0;
  assume {:verifier.code 0} true;
  call $p52 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p52.dup := 0;
  assume {:verifier.code 0} true;
  call $p53 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p53.dup := 0;
  assume {:verifier.code 0} true;
  call $p54 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p54.dup := 0;
  assume {:verifier.code 0} true;
  call $p55 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p55.dup := 0;
  assume {:verifier.code 0} true;
  call $p56 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p56.dup := 0;
  assume {:verifier.code 0} true;
  call $p57 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p57.dup := 0;
  assume {:verifier.code 0} true;
  call $p58 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p58.dup := 0;
  assume {:verifier.code 0} true;
  call $p59 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p59.dup := 0;
  assume {:verifier.code 0} true;
  call $p60 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p60.dup := 0;
  assume {:verifier.code 0} true;
  call $p61 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p61.dup := 0;
  assume {:verifier.code 0} true;
  call $p62 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p62.dup := 0;
  assume {:verifier.code 0} true;
  call $p63 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p63.dup := 0;
  assume {:verifier.code 0} true;
  call $p64 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p64.dup := 0;
  assume {:verifier.code 0} true;
  call $p65 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p65.dup := 0;
  assume {:verifier.code 0} true;
  call $p66 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p66.dup := 0;
  assume {:verifier.code 0} true;
  call $p67 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p67.dup := 0;
  assume {:verifier.code 0} true;
  call $p68 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p68.dup := 0;
  assume {:verifier.code 0} true;
  call $p69 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p69.dup := 0;
  assume {:verifier.code 0} true;
  call $p70 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p70.dup := 0;
  assume {:verifier.code 0} true;
  call $p71 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p71.dup := 0;
  assume {:verifier.code 0} true;
  call $p72 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p72.dup := 0;
  assume {:verifier.code 0} true;
  call $p73 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p73.dup := 0;
  assume {:verifier.code 0} true;
  call $p74 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p74.dup := 0;
  assume {:verifier.code 0} true;
  call $p75 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p75.dup := 0;
  assume {:verifier.code 0} true;
  call $p76 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p76.dup := 0;
  assume {:verifier.code 0} true;
  call $p77 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p77.dup := 0;
  assume {:verifier.code 0} true;
  call $p78 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p78.dup := 0;
  assume {:verifier.code 0} true;
  call $p79 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p79.dup := 0;
  assume {:verifier.code 0} true;
  call $p80 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p80.dup := 0;
  assume {:verifier.code 0} true;
  call $p81 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p81.dup := 0;
  assume {:verifier.code 0} true;
  call $p82 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p82.dup := 0;
  assume {:verifier.code 0} true;
  call $p83 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p83.dup := 0;
  assume {:verifier.code 0} true;
  call $p84 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p84.dup := 0;
  assume {:verifier.code 0} true;
  call $p85 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p85.dup := 0;
  assume {:verifier.code 0} true;
  call $p86 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p86.dup := 0;
  assume {:verifier.code 0} true;
  call $p87 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p87.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 374, 17} true;
  assume {:verifier.code 0} true;
  $p88 := $add.ref($p1,$mul.ref(0,8));
  $p88.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 374, 17} true;
  assume {:verifier.code 0} true;
  $p88.dup := 0;
  $i89 := $load.i64($M.0,$p88);
  $i89.dup := 0;
  call {:cexpr "f0"} boogie_si_record_i64($i89);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 375, 17} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($p1,$mul.ref(1,8));
  $p90.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 375, 17} true;
  assume {:verifier.code 0} true;
  $p90.dup := 0;
  $i91 := $load.i64($M.0,$p90);
  $i91.dup := 0;
  call {:cexpr "f1"} boogie_si_record_i64($i91);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 376, 17} true;
  assume {:verifier.code 0} true;
  $p92 := $add.ref($p1,$mul.ref(2,8));
  $p92.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 376, 17} true;
  assume {:verifier.code 0} true;
  $p92.dup := 0;
  $i93 := $load.i64($M.0,$p92);
  $i93.dup := 0;
  call {:cexpr "f2"} boogie_si_record_i64($i93);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 377, 17} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($p1,$mul.ref(3,8));
  $p94.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 377, 17} true;
  assume {:verifier.code 0} true;
  $p94.dup := 0;
  $i95 := $load.i64($M.0,$p94);
  $i95.dup := 0;
  call {:cexpr "f3"} boogie_si_record_i64($i95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 378, 17} true;
  assume {:verifier.code 0} true;
  $p96 := $add.ref($p1,$mul.ref(4,8));
  $p96.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 378, 17} true;
  assume {:verifier.code 0} true;
  $p96.dup := 0;
  $i97 := $load.i64($M.0,$p96);
  $i97.dup := 0;
  call {:cexpr "f4"} boogie_si_record_i64($i97);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 379, 30} true;
  assume {:verifier.code 0} true;
  $i98 := $mul.i64(2,$i89);
  $i98.dup := $or.i1(0,$i89.dup);
  call {:cexpr "d0"} boogie_si_record_i64($i98);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 380, 30} true;
  assume {:verifier.code 0} true;
  $i99 := $mul.i64(2,$i91);
  $i99.dup := $or.i1(0,$i91.dup);
  call {:cexpr "d1"} boogie_si_record_i64($i99);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 381, 31} true;
  assume {:verifier.code 0} true;
  $i100 := $mul.i64(38,$i93);
  $i100.dup := $or.i1(0,$i93.dup);
  call {:cexpr "d2"} boogie_si_record_i64($i100);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 382, 31} true;
  assume {:verifier.code 0} true;
  $i101 := $mul.i64(19,$i95);
  $i101.dup := $or.i1(0,$i95.dup);
  call {:cexpr "d3"} boogie_si_record_i64($i101);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 383, 33} true;
  assume {:verifier.code 0} true;
  $i102 := $mul.i64(19,$i97);
  $i102.dup := $or.i1(0,$i97.dup);
  call {:cexpr "d419"} boogie_si_record_i64($i102);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 384, 30} true;
  assume {:verifier.code 0} true;
  $i103 := $mul.i64(2,$i102);
  $i103.dup := $or.i1(0,$i102.dup);
  call {:cexpr "d4"} boogie_si_record_i64($i103);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  call $p104, $p104.dup := FStar_UInt128_mul_wide($i89, $i89.dup, $i89, $i89.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  $p105 := $bitcast.ref.ref($p3);
  $p105.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  $p106 := $add.ref($add.ref($p105,$mul.ref(0,16)),$mul.ref(0,1));
  $p106.dup := $or.i1($or.i1($p105.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  $i107 := $extractvalue.i64($p104,0);
  $i107.dup := $or.i1($p104.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  $p106.dup := 0;
  $M.1 := $store.i64($M.1,$p106,$i107);
  $M.1.dup := $store.i1($M.1.dup,$p106,$i107.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($add.ref($p105,$mul.ref(0,16)),$mul.ref(8,1));
  $p108.dup := $or.i1($or.i1($p105.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  $i109 := $extractvalue.i64($p104,1);
  $i109.dup := $or.i1($p104.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  $p108.dup := 0;
  $M.1 := $store.i64($M.1,$p108,$i109);
  $M.1.dup := $store.i1($M.1.dup,$p108,$i109.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 41} true;
  assume {:verifier.code 0} true;
  $p3.dup := 0;
  $i110 := $load.i128($M.1,$p3);
  $i110.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  call $p111, $p111.dup := FStar_UInt128_mul_wide($i103, $i103.dup, $i91, $i91.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  $p112 := $bitcast.ref.ref($p4);
  $p112.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  $p113 := $add.ref($add.ref($p112,$mul.ref(0,16)),$mul.ref(0,1));
  $p113.dup := $or.i1($or.i1($p112.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  $i114 := $extractvalue.i64($p111,0);
  $i114.dup := $or.i1($p111.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  $p113.dup := 0;
  $M.2 := $store.i64($M.2,$p113,$i114);
  $M.2.dup := $store.i1($M.2.dup,$p113,$i114.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  $p115 := $add.ref($add.ref($p112,$mul.ref(0,16)),$mul.ref(8,1));
  $p115.dup := $or.i1($or.i1($p112.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  $i116 := $extractvalue.i64($p111,1);
  $i116.dup := $or.i1($p111.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  $p115.dup := 0;
  $M.2 := $store.i64($M.2,$p115,$i116);
  $M.2.dup := $store.i1($M.2.dup,$p115,$i116.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 388, 9} true;
  assume {:verifier.code 0} true;
  $p4.dup := 0;
  $i117 := $load.i128($M.2,$p4);
  $i117.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p5.dup := 0;
  $M.3 := $store.i128($M.3,$p5,$i110);
  $M.3.dup := $store.i1($M.3.dup,$p5,$i110.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p118 := $bitcast.ref.ref($p5);
  $p118.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p119 := $add.ref($add.ref($p118,$mul.ref(0,16)),$mul.ref(0,1));
  $p119.dup := $or.i1($or.i1($p118.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p119.dup := 0;
  $i120 := $load.i64($M.3,$p119);
  $i120.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p121 := $add.ref($add.ref($p118,$mul.ref(0,16)),$mul.ref(8,1));
  $p121.dup := $or.i1($or.i1($p118.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p121.dup := 0;
  $i122 := $load.i64($M.3,$p121);
  $i122.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p6.dup := 0;
  $M.4 := $store.i128($M.4,$p6,$i117);
  $M.4.dup := $store.i1($M.4.dup,$p6,$i117.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p123 := $bitcast.ref.ref($p6);
  $p123.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p124 := $add.ref($add.ref($p123,$mul.ref(0,16)),$mul.ref(0,1));
  $p124.dup := $or.i1($or.i1($p123.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p124.dup := 0;
  $i125 := $load.i64($M.4,$p124);
  $i125.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p126 := $add.ref($add.ref($p123,$mul.ref(0,16)),$mul.ref(8,1));
  $p126.dup := $or.i1($or.i1($p123.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p126.dup := 0;
  $i127 := $load.i64($M.4,$p126);
  $i127.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  call $p128, $p128.dup := FStar_UInt128_add($i120, $i120.dup, $i122, $i122.dup, $i125, $i125.dup, $i127, $i127.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p129 := $bitcast.ref.ref($p7);
  $p129.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p130 := $add.ref($add.ref($p129,$mul.ref(0,16)),$mul.ref(0,1));
  $p130.dup := $or.i1($or.i1($p129.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $i131 := $extractvalue.i64($p128,0);
  $i131.dup := $or.i1($p128.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p130.dup := 0;
  $M.5 := $store.i64($M.5,$p130,$i131);
  $M.5.dup := $store.i1($M.5.dup,$p130,$i131.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p132 := $add.ref($add.ref($p129,$mul.ref(0,16)),$mul.ref(8,1));
  $p132.dup := $or.i1($or.i1($p129.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $i133 := $extractvalue.i64($p128,1);
  $i133.dup := $or.i1($p128.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p132.dup := 0;
  $M.5 := $store.i64($M.5,$p132,$i133);
  $M.5.dup := $store.i1($M.5.dup,$p132,$i133.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 23} true;
  assume {:verifier.code 0} true;
  $p7.dup := 0;
  $i134 := $load.i128($M.5,$p7);
  $i134.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  call $p135, $p135.dup := FStar_UInt128_mul_wide($i100, $i100.dup, $i95, $i95.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  $p136 := $bitcast.ref.ref($p8);
  $p136.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  $p137 := $add.ref($add.ref($p136,$mul.ref(0,16)),$mul.ref(0,1));
  $p137.dup := $or.i1($or.i1($p136.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  $i138 := $extractvalue.i64($p135,0);
  $i138.dup := $or.i1($p135.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  $p137.dup := 0;
  $M.6 := $store.i64($M.6,$p137,$i138);
  $M.6.dup := $store.i1($M.6.dup,$p137,$i138.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  $p139 := $add.ref($add.ref($p136,$mul.ref(0,16)),$mul.ref(8,1));
  $p139.dup := $or.i1($or.i1($p136.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  $i140 := $extractvalue.i64($p135,1);
  $i140.dup := $or.i1($p135.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  $p139.dup := 0;
  $M.6 := $store.i64($M.6,$p139,$i140);
  $M.6.dup := $store.i1($M.6.dup,$p139,$i140.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 389, 7} true;
  assume {:verifier.code 0} true;
  $p8.dup := 0;
  $i141 := $load.i128($M.6,$p8);
  $i141.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p9.dup := 0;
  $M.7 := $store.i128($M.7,$p9,$i134);
  $M.7.dup := $store.i1($M.7.dup,$p9,$i134.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p142 := $bitcast.ref.ref($p9);
  $p142.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p143 := $add.ref($add.ref($p142,$mul.ref(0,16)),$mul.ref(0,1));
  $p143.dup := $or.i1($or.i1($p142.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p143.dup := 0;
  $i144 := $load.i64($M.7,$p143);
  $i144.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p145 := $add.ref($add.ref($p142,$mul.ref(0,16)),$mul.ref(8,1));
  $p145.dup := $or.i1($or.i1($p142.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p145.dup := 0;
  $i146 := $load.i64($M.7,$p145);
  $i146.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p10.dup := 0;
  $M.8 := $store.i128($M.8,$p10,$i141);
  $M.8.dup := $store.i1($M.8.dup,$p10,$i141.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p147 := $bitcast.ref.ref($p10);
  $p147.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p148 := $add.ref($add.ref($p147,$mul.ref(0,16)),$mul.ref(0,1));
  $p148.dup := $or.i1($or.i1($p147.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p148.dup := 0;
  $i149 := $load.i64($M.8,$p148);
  $i149.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p150 := $add.ref($add.ref($p147,$mul.ref(0,16)),$mul.ref(8,1));
  $p150.dup := $or.i1($or.i1($p147.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p150.dup := 0;
  $i151 := $load.i64($M.8,$p150);
  $i151.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  call $p152, $p152.dup := FStar_UInt128_add($i144, $i144.dup, $i146, $i146.dup, $i149, $i149.dup, $i151, $i151.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p153 := $bitcast.ref.ref($p11);
  $p153.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p154 := $add.ref($add.ref($p153,$mul.ref(0,16)),$mul.ref(0,1));
  $p154.dup := $or.i1($or.i1($p153.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $i155 := $extractvalue.i64($p152,0);
  $i155.dup := $or.i1($p152.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p154.dup := 0;
  $M.9 := $store.i64($M.9,$p154,$i155);
  $M.9.dup := $store.i1($M.9.dup,$p154,$i155.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p156 := $add.ref($add.ref($p153,$mul.ref(0,16)),$mul.ref(8,1));
  $p156.dup := $or.i1($or.i1($p153.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $i157 := $extractvalue.i64($p152,1);
  $i157.dup := $or.i1($p152.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p156.dup := 0;
  $M.9 := $store.i64($M.9,$p156,$i157);
  $M.9.dup := $store.i1($M.9.dup,$p156,$i157.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 387, 5} true;
  assume {:verifier.code 0} true;
  $p11.dup := 0;
  $i158 := $load.i128($M.9,$p11);
  $i158.dup := 0;
  call {:cexpr "s0"} boogie_si_record_i128($i158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  call $p159, $p159.dup := FStar_UInt128_mul_wide($i98, $i98.dup, $i91, $i91.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  $p160 := $bitcast.ref.ref($p12);
  $p160.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  $p161 := $add.ref($add.ref($p160,$mul.ref(0,16)),$mul.ref(0,1));
  $p161.dup := $or.i1($or.i1($p160.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  $i162 := $extractvalue.i64($p159,0);
  $i162.dup := $or.i1($p159.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  $p161.dup := 0;
  $M.10 := $store.i64($M.10,$p161,$i162);
  $M.10.dup := $store.i1($M.10.dup,$p161,$i162.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  $p163 := $add.ref($add.ref($p160,$mul.ref(0,16)),$mul.ref(8,1));
  $p163.dup := $or.i1($or.i1($p160.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  $i164 := $extractvalue.i64($p159,1);
  $i164.dup := $or.i1($p159.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  $p163.dup := 0;
  $M.10 := $store.i64($M.10,$p163,$i164);
  $M.10.dup := $store.i1($M.10.dup,$p163,$i164.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 41} true;
  assume {:verifier.code 0} true;
  $p12.dup := 0;
  $i165 := $load.i128($M.10,$p12);
  $i165.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  call $p166, $p166.dup := FStar_UInt128_mul_wide($i103, $i103.dup, $i93, $i93.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  $p167 := $bitcast.ref.ref($p13);
  $p167.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  $p168 := $add.ref($add.ref($p167,$mul.ref(0,16)),$mul.ref(0,1));
  $p168.dup := $or.i1($or.i1($p167.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  $i169 := $extractvalue.i64($p166,0);
  $i169.dup := $or.i1($p166.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  $p168.dup := 0;
  $M.11 := $store.i64($M.11,$p168,$i169);
  $M.11.dup := $store.i1($M.11.dup,$p168,$i169.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  $p170 := $add.ref($add.ref($p167,$mul.ref(0,16)),$mul.ref(8,1));
  $p170.dup := $or.i1($or.i1($p167.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  $i171 := $extractvalue.i64($p166,1);
  $i171.dup := $or.i1($p166.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  $p170.dup := 0;
  $M.11 := $store.i64($M.11,$p170,$i171);
  $M.11.dup := $store.i1($M.11.dup,$p170,$i171.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 393, 9} true;
  assume {:verifier.code 0} true;
  $p13.dup := 0;
  $i172 := $load.i128($M.11,$p13);
  $i172.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p14.dup := 0;
  $M.12 := $store.i128($M.12,$p14,$i165);
  $M.12.dup := $store.i1($M.12.dup,$p14,$i165.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p173 := $bitcast.ref.ref($p14);
  $p173.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p174 := $add.ref($add.ref($p173,$mul.ref(0,16)),$mul.ref(0,1));
  $p174.dup := $or.i1($or.i1($p173.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p174.dup := 0;
  $i175 := $load.i64($M.12,$p174);
  $i175.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p176 := $add.ref($add.ref($p173,$mul.ref(0,16)),$mul.ref(8,1));
  $p176.dup := $or.i1($or.i1($p173.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p176.dup := 0;
  $i177 := $load.i64($M.12,$p176);
  $i177.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p15.dup := 0;
  $M.13 := $store.i128($M.13,$p15,$i172);
  $M.13.dup := $store.i1($M.13.dup,$p15,$i172.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p178 := $bitcast.ref.ref($p15);
  $p178.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p179 := $add.ref($add.ref($p178,$mul.ref(0,16)),$mul.ref(0,1));
  $p179.dup := $or.i1($or.i1($p178.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p179.dup := 0;
  $i180 := $load.i64($M.13,$p179);
  $i180.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p181 := $add.ref($add.ref($p178,$mul.ref(0,16)),$mul.ref(8,1));
  $p181.dup := $or.i1($or.i1($p178.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p181.dup := 0;
  $i182 := $load.i64($M.13,$p181);
  $i182.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  call $p183, $p183.dup := FStar_UInt128_add($i175, $i175.dup, $i177, $i177.dup, $i180, $i180.dup, $i182, $i182.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p184 := $bitcast.ref.ref($p16);
  $p184.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p185 := $add.ref($add.ref($p184,$mul.ref(0,16)),$mul.ref(0,1));
  $p185.dup := $or.i1($or.i1($p184.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $i186 := $extractvalue.i64($p183,0);
  $i186.dup := $or.i1($p183.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p185.dup := 0;
  $M.14 := $store.i64($M.14,$p185,$i186);
  $M.14.dup := $store.i1($M.14.dup,$p185,$i186.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p187 := $add.ref($add.ref($p184,$mul.ref(0,16)),$mul.ref(8,1));
  $p187.dup := $or.i1($or.i1($p184.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $i188 := $extractvalue.i64($p183,1);
  $i188.dup := $or.i1($p183.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p187.dup := 0;
  $M.14 := $store.i64($M.14,$p187,$i188);
  $M.14.dup := $store.i1($M.14.dup,$p187,$i188.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 23} true;
  assume {:verifier.code 0} true;
  $p16.dup := 0;
  $i189 := $load.i128($M.14,$p16);
  $i189.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  call $p190, $p190.dup := FStar_UInt128_mul_wide($i101, $i101.dup, $i95, $i95.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  $p191 := $bitcast.ref.ref($p17);
  $p191.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  $p192 := $add.ref($add.ref($p191,$mul.ref(0,16)),$mul.ref(0,1));
  $p192.dup := $or.i1($or.i1($p191.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  $i193 := $extractvalue.i64($p190,0);
  $i193.dup := $or.i1($p190.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  $p192.dup := 0;
  $M.15 := $store.i64($M.15,$p192,$i193);
  $M.15.dup := $store.i1($M.15.dup,$p192,$i193.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  $p194 := $add.ref($add.ref($p191,$mul.ref(0,16)),$mul.ref(8,1));
  $p194.dup := $or.i1($or.i1($p191.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  $i195 := $extractvalue.i64($p190,1);
  $i195.dup := $or.i1($p190.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  $p194.dup := 0;
  $M.15 := $store.i64($M.15,$p194,$i195);
  $M.15.dup := $store.i1($M.15.dup,$p194,$i195.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 394, 7} true;
  assume {:verifier.code 0} true;
  $p17.dup := 0;
  $i196 := $load.i128($M.15,$p17);
  $i196.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p18.dup := 0;
  $M.16 := $store.i128($M.16,$p18,$i189);
  $M.16.dup := $store.i1($M.16.dup,$p18,$i189.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p197 := $bitcast.ref.ref($p18);
  $p197.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p198 := $add.ref($add.ref($p197,$mul.ref(0,16)),$mul.ref(0,1));
  $p198.dup := $or.i1($or.i1($p197.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p198.dup := 0;
  $i199 := $load.i64($M.16,$p198);
  $i199.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p200 := $add.ref($add.ref($p197,$mul.ref(0,16)),$mul.ref(8,1));
  $p200.dup := $or.i1($or.i1($p197.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p200.dup := 0;
  $i201 := $load.i64($M.16,$p200);
  $i201.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p19.dup := 0;
  $M.17 := $store.i128($M.17,$p19,$i196);
  $M.17.dup := $store.i1($M.17.dup,$p19,$i196.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p202 := $bitcast.ref.ref($p19);
  $p202.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p203 := $add.ref($add.ref($p202,$mul.ref(0,16)),$mul.ref(0,1));
  $p203.dup := $or.i1($or.i1($p202.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p203.dup := 0;
  $i204 := $load.i64($M.17,$p203);
  $i204.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p205 := $add.ref($add.ref($p202,$mul.ref(0,16)),$mul.ref(8,1));
  $p205.dup := $or.i1($or.i1($p202.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p205.dup := 0;
  $i206 := $load.i64($M.17,$p205);
  $i206.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  call $p207, $p207.dup := FStar_UInt128_add($i199, $i199.dup, $i201, $i201.dup, $i204, $i204.dup, $i206, $i206.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p208 := $bitcast.ref.ref($p20);
  $p208.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p209 := $add.ref($add.ref($p208,$mul.ref(0,16)),$mul.ref(0,1));
  $p209.dup := $or.i1($or.i1($p208.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $i210 := $extractvalue.i64($p207,0);
  $i210.dup := $or.i1($p207.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p209.dup := 0;
  $M.18 := $store.i64($M.18,$p209,$i210);
  $M.18.dup := $store.i1($M.18.dup,$p209,$i210.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p211 := $add.ref($add.ref($p208,$mul.ref(0,16)),$mul.ref(8,1));
  $p211.dup := $or.i1($or.i1($p208.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $i212 := $extractvalue.i64($p207,1);
  $i212.dup := $or.i1($p207.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p211.dup := 0;
  $M.18 := $store.i64($M.18,$p211,$i212);
  $M.18.dup := $store.i1($M.18.dup,$p211,$i212.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 392, 5} true;
  assume {:verifier.code 0} true;
  $p20.dup := 0;
  $i213 := $load.i128($M.18,$p20);
  $i213.dup := 0;
  call {:cexpr "s1"} boogie_si_record_i128($i213);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  call $p214, $p214.dup := FStar_UInt128_mul_wide($i98, $i98.dup, $i93, $i93.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  $p215 := $bitcast.ref.ref($p21);
  $p215.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  $p216 := $add.ref($add.ref($p215,$mul.ref(0,16)),$mul.ref(0,1));
  $p216.dup := $or.i1($or.i1($p215.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  $i217 := $extractvalue.i64($p214,0);
  $i217.dup := $or.i1($p214.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  $p216.dup := 0;
  $M.19 := $store.i64($M.19,$p216,$i217);
  $M.19.dup := $store.i1($M.19.dup,$p216,$i217.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  $p218 := $add.ref($add.ref($p215,$mul.ref(0,16)),$mul.ref(8,1));
  $p218.dup := $or.i1($or.i1($p215.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  $i219 := $extractvalue.i64($p214,1);
  $i219.dup := $or.i1($p214.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  $p218.dup := 0;
  $M.19 := $store.i64($M.19,$p218,$i219);
  $M.19.dup := $store.i1($M.19.dup,$p218,$i219.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 41} true;
  assume {:verifier.code 0} true;
  $p21.dup := 0;
  $i220 := $load.i128($M.19,$p21);
  $i220.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  call $p221, $p221.dup := FStar_UInt128_mul_wide($i91, $i91.dup, $i91, $i91.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  $p222 := $bitcast.ref.ref($p22);
  $p222.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  $p223 := $add.ref($add.ref($p222,$mul.ref(0,16)),$mul.ref(0,1));
  $p223.dup := $or.i1($or.i1($p222.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  $i224 := $extractvalue.i64($p221,0);
  $i224.dup := $or.i1($p221.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  $p223.dup := 0;
  $M.20 := $store.i64($M.20,$p223,$i224);
  $M.20.dup := $store.i1($M.20.dup,$p223,$i224.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  $p225 := $add.ref($add.ref($p222,$mul.ref(0,16)),$mul.ref(8,1));
  $p225.dup := $or.i1($or.i1($p222.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  $i226 := $extractvalue.i64($p221,1);
  $i226.dup := $or.i1($p221.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  $p225.dup := 0;
  $M.20 := $store.i64($M.20,$p225,$i226);
  $M.20.dup := $store.i1($M.20.dup,$p225,$i226.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 398, 9} true;
  assume {:verifier.code 0} true;
  $p22.dup := 0;
  $i227 := $load.i128($M.20,$p22);
  $i227.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p23.dup := 0;
  $M.21 := $store.i128($M.21,$p23,$i220);
  $M.21.dup := $store.i1($M.21.dup,$p23,$i220.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p228 := $bitcast.ref.ref($p23);
  $p228.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p229 := $add.ref($add.ref($p228,$mul.ref(0,16)),$mul.ref(0,1));
  $p229.dup := $or.i1($or.i1($p228.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p229.dup := 0;
  $i230 := $load.i64($M.21,$p229);
  $i230.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p231 := $add.ref($add.ref($p228,$mul.ref(0,16)),$mul.ref(8,1));
  $p231.dup := $or.i1($or.i1($p228.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p231.dup := 0;
  $i232 := $load.i64($M.21,$p231);
  $i232.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p24.dup := 0;
  $M.22 := $store.i128($M.22,$p24,$i227);
  $M.22.dup := $store.i1($M.22.dup,$p24,$i227.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p233 := $bitcast.ref.ref($p24);
  $p233.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p234 := $add.ref($add.ref($p233,$mul.ref(0,16)),$mul.ref(0,1));
  $p234.dup := $or.i1($or.i1($p233.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p234.dup := 0;
  $i235 := $load.i64($M.22,$p234);
  $i235.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p236 := $add.ref($add.ref($p233,$mul.ref(0,16)),$mul.ref(8,1));
  $p236.dup := $or.i1($or.i1($p233.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p236.dup := 0;
  $i237 := $load.i64($M.22,$p236);
  $i237.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  call $p238, $p238.dup := FStar_UInt128_add($i230, $i230.dup, $i232, $i232.dup, $i235, $i235.dup, $i237, $i237.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p239 := $bitcast.ref.ref($p25);
  $p239.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p240 := $add.ref($add.ref($p239,$mul.ref(0,16)),$mul.ref(0,1));
  $p240.dup := $or.i1($or.i1($p239.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $i241 := $extractvalue.i64($p238,0);
  $i241.dup := $or.i1($p238.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p240.dup := 0;
  $M.23 := $store.i64($M.23,$p240,$i241);
  $M.23.dup := $store.i1($M.23.dup,$p240,$i241.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p242 := $add.ref($add.ref($p239,$mul.ref(0,16)),$mul.ref(8,1));
  $p242.dup := $or.i1($or.i1($p239.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $i243 := $extractvalue.i64($p238,1);
  $i243.dup := $or.i1($p238.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p242.dup := 0;
  $M.23 := $store.i64($M.23,$p242,$i243);
  $M.23.dup := $store.i1($M.23.dup,$p242,$i243.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 23} true;
  assume {:verifier.code 0} true;
  $p25.dup := 0;
  $i244 := $load.i128($M.23,$p25);
  $i244.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  call $p245, $p245.dup := FStar_UInt128_mul_wide($i103, $i103.dup, $i95, $i95.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  $p246 := $bitcast.ref.ref($p26);
  $p246.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  $p247 := $add.ref($add.ref($p246,$mul.ref(0,16)),$mul.ref(0,1));
  $p247.dup := $or.i1($or.i1($p246.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  $i248 := $extractvalue.i64($p245,0);
  $i248.dup := $or.i1($p245.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  $p247.dup := 0;
  $M.24 := $store.i64($M.24,$p247,$i248);
  $M.24.dup := $store.i1($M.24.dup,$p247,$i248.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  $p249 := $add.ref($add.ref($p246,$mul.ref(0,16)),$mul.ref(8,1));
  $p249.dup := $or.i1($or.i1($p246.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  $i250 := $extractvalue.i64($p245,1);
  $i250.dup := $or.i1($p245.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  $p249.dup := 0;
  $M.24 := $store.i64($M.24,$p249,$i250);
  $M.24.dup := $store.i1($M.24.dup,$p249,$i250.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 399, 7} true;
  assume {:verifier.code 0} true;
  $p26.dup := 0;
  $i251 := $load.i128($M.24,$p26);
  $i251.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p27.dup := 0;
  $M.25 := $store.i128($M.25,$p27,$i244);
  $M.25.dup := $store.i1($M.25.dup,$p27,$i244.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p252 := $bitcast.ref.ref($p27);
  $p252.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p253 := $add.ref($add.ref($p252,$mul.ref(0,16)),$mul.ref(0,1));
  $p253.dup := $or.i1($or.i1($p252.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p253.dup := 0;
  $i254 := $load.i64($M.25,$p253);
  $i254.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p255 := $add.ref($add.ref($p252,$mul.ref(0,16)),$mul.ref(8,1));
  $p255.dup := $or.i1($or.i1($p252.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p255.dup := 0;
  $i256 := $load.i64($M.25,$p255);
  $i256.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p28.dup := 0;
  $M.26 := $store.i128($M.26,$p28,$i251);
  $M.26.dup := $store.i1($M.26.dup,$p28,$i251.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p257 := $bitcast.ref.ref($p28);
  $p257.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p258 := $add.ref($add.ref($p257,$mul.ref(0,16)),$mul.ref(0,1));
  $p258.dup := $or.i1($or.i1($p257.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p258.dup := 0;
  $i259 := $load.i64($M.26,$p258);
  $i259.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p260 := $add.ref($add.ref($p257,$mul.ref(0,16)),$mul.ref(8,1));
  $p260.dup := $or.i1($or.i1($p257.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p260.dup := 0;
  $i261 := $load.i64($M.26,$p260);
  $i261.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  call $p262, $p262.dup := FStar_UInt128_add($i254, $i254.dup, $i256, $i256.dup, $i259, $i259.dup, $i261, $i261.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p263 := $bitcast.ref.ref($p29);
  $p263.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p264 := $add.ref($add.ref($p263,$mul.ref(0,16)),$mul.ref(0,1));
  $p264.dup := $or.i1($or.i1($p263.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $i265 := $extractvalue.i64($p262,0);
  $i265.dup := $or.i1($p262.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p264.dup := 0;
  $M.27 := $store.i64($M.27,$p264,$i265);
  $M.27.dup := $store.i1($M.27.dup,$p264,$i265.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p266 := $add.ref($add.ref($p263,$mul.ref(0,16)),$mul.ref(8,1));
  $p266.dup := $or.i1($or.i1($p263.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $i267 := $extractvalue.i64($p262,1);
  $i267.dup := $or.i1($p262.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p266.dup := 0;
  $M.27 := $store.i64($M.27,$p266,$i267);
  $M.27.dup := $store.i1($M.27.dup,$p266,$i267.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 397, 5} true;
  assume {:verifier.code 0} true;
  $p29.dup := 0;
  $i268 := $load.i128($M.27,$p29);
  $i268.dup := 0;
  call {:cexpr "s2"} boogie_si_record_i128($i268);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  call $p269, $p269.dup := FStar_UInt128_mul_wide($i98, $i98.dup, $i95, $i95.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  $p270 := $bitcast.ref.ref($p30);
  $p270.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  $p271 := $add.ref($add.ref($p270,$mul.ref(0,16)),$mul.ref(0,1));
  $p271.dup := $or.i1($or.i1($p270.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  $i272 := $extractvalue.i64($p269,0);
  $i272.dup := $or.i1($p269.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  $p271.dup := 0;
  $M.28 := $store.i64($M.28,$p271,$i272);
  $M.28.dup := $store.i1($M.28.dup,$p271,$i272.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  $p273 := $add.ref($add.ref($p270,$mul.ref(0,16)),$mul.ref(8,1));
  $p273.dup := $or.i1($or.i1($p270.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  $i274 := $extractvalue.i64($p269,1);
  $i274.dup := $or.i1($p269.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  $p273.dup := 0;
  $M.28 := $store.i64($M.28,$p273,$i274);
  $M.28.dup := $store.i1($M.28.dup,$p273,$i274.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 41} true;
  assume {:verifier.code 0} true;
  $p30.dup := 0;
  $i275 := $load.i128($M.28,$p30);
  $i275.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  call $p276, $p276.dup := FStar_UInt128_mul_wide($i99, $i99.dup, $i93, $i93.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  $p277 := $bitcast.ref.ref($p31);
  $p277.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  $p278 := $add.ref($add.ref($p277,$mul.ref(0,16)),$mul.ref(0,1));
  $p278.dup := $or.i1($or.i1($p277.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  $i279 := $extractvalue.i64($p276,0);
  $i279.dup := $or.i1($p276.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  $p278.dup := 0;
  $M.29 := $store.i64($M.29,$p278,$i279);
  $M.29.dup := $store.i1($M.29.dup,$p278,$i279.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  $p280 := $add.ref($add.ref($p277,$mul.ref(0,16)),$mul.ref(8,1));
  $p280.dup := $or.i1($or.i1($p277.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  $i281 := $extractvalue.i64($p276,1);
  $i281.dup := $or.i1($p276.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  $p280.dup := 0;
  $M.29 := $store.i64($M.29,$p280,$i281);
  $M.29.dup := $store.i1($M.29.dup,$p280,$i281.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 403, 9} true;
  assume {:verifier.code 0} true;
  $p31.dup := 0;
  $i282 := $load.i128($M.29,$p31);
  $i282.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p32.dup := 0;
  $M.30 := $store.i128($M.30,$p32,$i275);
  $M.30.dup := $store.i1($M.30.dup,$p32,$i275.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p283 := $bitcast.ref.ref($p32);
  $p283.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p284 := $add.ref($add.ref($p283,$mul.ref(0,16)),$mul.ref(0,1));
  $p284.dup := $or.i1($or.i1($p283.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p284.dup := 0;
  $i285 := $load.i64($M.30,$p284);
  $i285.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p286 := $add.ref($add.ref($p283,$mul.ref(0,16)),$mul.ref(8,1));
  $p286.dup := $or.i1($or.i1($p283.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p286.dup := 0;
  $i287 := $load.i64($M.30,$p286);
  $i287.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p33.dup := 0;
  $M.31 := $store.i128($M.31,$p33,$i282);
  $M.31.dup := $store.i1($M.31.dup,$p33,$i282.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p288 := $bitcast.ref.ref($p33);
  $p288.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p289 := $add.ref($add.ref($p288,$mul.ref(0,16)),$mul.ref(0,1));
  $p289.dup := $or.i1($or.i1($p288.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p289.dup := 0;
  $i290 := $load.i64($M.31,$p289);
  $i290.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p291 := $add.ref($add.ref($p288,$mul.ref(0,16)),$mul.ref(8,1));
  $p291.dup := $or.i1($or.i1($p288.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p291.dup := 0;
  $i292 := $load.i64($M.31,$p291);
  $i292.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  call $p293, $p293.dup := FStar_UInt128_add($i285, $i285.dup, $i287, $i287.dup, $i290, $i290.dup, $i292, $i292.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p294 := $bitcast.ref.ref($p34);
  $p294.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p295 := $add.ref($add.ref($p294,$mul.ref(0,16)),$mul.ref(0,1));
  $p295.dup := $or.i1($or.i1($p294.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $i296 := $extractvalue.i64($p293,0);
  $i296.dup := $or.i1($p293.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p295.dup := 0;
  $M.32 := $store.i64($M.32,$p295,$i296);
  $M.32.dup := $store.i1($M.32.dup,$p295,$i296.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p297 := $add.ref($add.ref($p294,$mul.ref(0,16)),$mul.ref(8,1));
  $p297.dup := $or.i1($or.i1($p294.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $i298 := $extractvalue.i64($p293,1);
  $i298.dup := $or.i1($p293.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p297.dup := 0;
  $M.32 := $store.i64($M.32,$p297,$i298);
  $M.32.dup := $store.i1($M.32.dup,$p297,$i298.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 23} true;
  assume {:verifier.code 0} true;
  $p34.dup := 0;
  $i299 := $load.i128($M.32,$p34);
  $i299.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  call $p300, $p300.dup := FStar_UInt128_mul_wide($i97, $i97.dup, $i102, $i102.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  $p301 := $bitcast.ref.ref($p35);
  $p301.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  $p302 := $add.ref($add.ref($p301,$mul.ref(0,16)),$mul.ref(0,1));
  $p302.dup := $or.i1($or.i1($p301.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  $i303 := $extractvalue.i64($p300,0);
  $i303.dup := $or.i1($p300.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  $p302.dup := 0;
  $M.33 := $store.i64($M.33,$p302,$i303);
  $M.33.dup := $store.i1($M.33.dup,$p302,$i303.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  $p304 := $add.ref($add.ref($p301,$mul.ref(0,16)),$mul.ref(8,1));
  $p304.dup := $or.i1($or.i1($p301.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  $i305 := $extractvalue.i64($p300,1);
  $i305.dup := $or.i1($p300.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  $p304.dup := 0;
  $M.33 := $store.i64($M.33,$p304,$i305);
  $M.33.dup := $store.i1($M.33.dup,$p304,$i305.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 404, 7} true;
  assume {:verifier.code 0} true;
  $p35.dup := 0;
  $i306 := $load.i128($M.33,$p35);
  $i306.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p36.dup := 0;
  $M.34 := $store.i128($M.34,$p36,$i299);
  $M.34.dup := $store.i1($M.34.dup,$p36,$i299.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p307 := $bitcast.ref.ref($p36);
  $p307.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p308 := $add.ref($add.ref($p307,$mul.ref(0,16)),$mul.ref(0,1));
  $p308.dup := $or.i1($or.i1($p307.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p308.dup := 0;
  $i309 := $load.i64($M.34,$p308);
  $i309.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p310 := $add.ref($add.ref($p307,$mul.ref(0,16)),$mul.ref(8,1));
  $p310.dup := $or.i1($or.i1($p307.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p310.dup := 0;
  $i311 := $load.i64($M.34,$p310);
  $i311.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p37.dup := 0;
  $M.35 := $store.i128($M.35,$p37,$i306);
  $M.35.dup := $store.i1($M.35.dup,$p37,$i306.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p312 := $bitcast.ref.ref($p37);
  $p312.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p313 := $add.ref($add.ref($p312,$mul.ref(0,16)),$mul.ref(0,1));
  $p313.dup := $or.i1($or.i1($p312.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p313.dup := 0;
  $i314 := $load.i64($M.35,$p313);
  $i314.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p315 := $add.ref($add.ref($p312,$mul.ref(0,16)),$mul.ref(8,1));
  $p315.dup := $or.i1($or.i1($p312.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p315.dup := 0;
  $i316 := $load.i64($M.35,$p315);
  $i316.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  call $p317, $p317.dup := FStar_UInt128_add($i309, $i309.dup, $i311, $i311.dup, $i314, $i314.dup, $i316, $i316.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p318 := $bitcast.ref.ref($p38);
  $p318.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p319 := $add.ref($add.ref($p318,$mul.ref(0,16)),$mul.ref(0,1));
  $p319.dup := $or.i1($or.i1($p318.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $i320 := $extractvalue.i64($p317,0);
  $i320.dup := $or.i1($p317.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p319.dup := 0;
  $M.36 := $store.i64($M.36,$p319,$i320);
  $M.36.dup := $store.i1($M.36.dup,$p319,$i320.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p321 := $add.ref($add.ref($p318,$mul.ref(0,16)),$mul.ref(8,1));
  $p321.dup := $or.i1($or.i1($p318.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $i322 := $extractvalue.i64($p317,1);
  $i322.dup := $or.i1($p317.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p321.dup := 0;
  $M.36 := $store.i64($M.36,$p321,$i322);
  $M.36.dup := $store.i1($M.36.dup,$p321,$i322.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 402, 5} true;
  assume {:verifier.code 0} true;
  $p38.dup := 0;
  $i323 := $load.i128($M.36,$p38);
  $i323.dup := 0;
  call {:cexpr "s3"} boogie_si_record_i128($i323);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  call $p324, $p324.dup := FStar_UInt128_mul_wide($i98, $i98.dup, $i97, $i97.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  $p325 := $bitcast.ref.ref($p39);
  $p325.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  $p326 := $add.ref($add.ref($p325,$mul.ref(0,16)),$mul.ref(0,1));
  $p326.dup := $or.i1($or.i1($p325.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  $i327 := $extractvalue.i64($p324,0);
  $i327.dup := $or.i1($p324.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  $p326.dup := 0;
  $M.37 := $store.i64($M.37,$p326,$i327);
  $M.37.dup := $store.i1($M.37.dup,$p326,$i327.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  $p328 := $add.ref($add.ref($p325,$mul.ref(0,16)),$mul.ref(8,1));
  $p328.dup := $or.i1($or.i1($p325.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  $i329 := $extractvalue.i64($p324,1);
  $i329.dup := $or.i1($p324.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  $p328.dup := 0;
  $M.37 := $store.i64($M.37,$p328,$i329);
  $M.37.dup := $store.i1($M.37.dup,$p328,$i329.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 41} true;
  assume {:verifier.code 0} true;
  $p39.dup := 0;
  $i330 := $load.i128($M.37,$p39);
  $i330.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  call $p331, $p331.dup := FStar_UInt128_mul_wide($i99, $i99.dup, $i95, $i95.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  $p332 := $bitcast.ref.ref($p40);
  $p332.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  $p333 := $add.ref($add.ref($p332,$mul.ref(0,16)),$mul.ref(0,1));
  $p333.dup := $or.i1($or.i1($p332.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  $i334 := $extractvalue.i64($p331,0);
  $i334.dup := $or.i1($p331.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  $p333.dup := 0;
  $M.38 := $store.i64($M.38,$p333,$i334);
  $M.38.dup := $store.i1($M.38.dup,$p333,$i334.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  $p335 := $add.ref($add.ref($p332,$mul.ref(0,16)),$mul.ref(8,1));
  $p335.dup := $or.i1($or.i1($p332.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  $i336 := $extractvalue.i64($p331,1);
  $i336.dup := $or.i1($p331.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  $p335.dup := 0;
  $M.38 := $store.i64($M.38,$p335,$i336);
  $M.38.dup := $store.i1($M.38.dup,$p335,$i336.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 408, 9} true;
  assume {:verifier.code 0} true;
  $p40.dup := 0;
  $i337 := $load.i128($M.38,$p40);
  $i337.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p41.dup := 0;
  $M.39 := $store.i128($M.39,$p41,$i330);
  $M.39.dup := $store.i1($M.39.dup,$p41,$i330.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p338 := $bitcast.ref.ref($p41);
  $p338.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p339 := $add.ref($add.ref($p338,$mul.ref(0,16)),$mul.ref(0,1));
  $p339.dup := $or.i1($or.i1($p338.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p339.dup := 0;
  $i340 := $load.i64($M.39,$p339);
  $i340.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p341 := $add.ref($add.ref($p338,$mul.ref(0,16)),$mul.ref(8,1));
  $p341.dup := $or.i1($or.i1($p338.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p341.dup := 0;
  $i342 := $load.i64($M.39,$p341);
  $i342.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p42.dup := 0;
  $M.40 := $store.i128($M.40,$p42,$i337);
  $M.40.dup := $store.i1($M.40.dup,$p42,$i337.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p343 := $bitcast.ref.ref($p42);
  $p343.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p344 := $add.ref($add.ref($p343,$mul.ref(0,16)),$mul.ref(0,1));
  $p344.dup := $or.i1($or.i1($p343.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p344.dup := 0;
  $i345 := $load.i64($M.40,$p344);
  $i345.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p346 := $add.ref($add.ref($p343,$mul.ref(0,16)),$mul.ref(8,1));
  $p346.dup := $or.i1($or.i1($p343.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p346.dup := 0;
  $i347 := $load.i64($M.40,$p346);
  $i347.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  call $p348, $p348.dup := FStar_UInt128_add($i340, $i340.dup, $i342, $i342.dup, $i345, $i345.dup, $i347, $i347.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p349 := $bitcast.ref.ref($p43);
  $p349.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p350 := $add.ref($add.ref($p349,$mul.ref(0,16)),$mul.ref(0,1));
  $p350.dup := $or.i1($or.i1($p349.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $i351 := $extractvalue.i64($p348,0);
  $i351.dup := $or.i1($p348.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p350.dup := 0;
  $M.41 := $store.i64($M.41,$p350,$i351);
  $M.41.dup := $store.i1($M.41.dup,$p350,$i351.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p352 := $add.ref($add.ref($p349,$mul.ref(0,16)),$mul.ref(8,1));
  $p352.dup := $or.i1($or.i1($p349.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $i353 := $extractvalue.i64($p348,1);
  $i353.dup := $or.i1($p348.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p352.dup := 0;
  $M.41 := $store.i64($M.41,$p352,$i353);
  $M.41.dup := $store.i1($M.41.dup,$p352,$i353.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 23} true;
  assume {:verifier.code 0} true;
  $p43.dup := 0;
  $i354 := $load.i128($M.41,$p43);
  $i354.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  call $p355, $p355.dup := FStar_UInt128_mul_wide($i93, $i93.dup, $i93, $i93.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  $p356 := $bitcast.ref.ref($p44);
  $p356.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  $p357 := $add.ref($add.ref($p356,$mul.ref(0,16)),$mul.ref(0,1));
  $p357.dup := $or.i1($or.i1($p356.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  $i358 := $extractvalue.i64($p355,0);
  $i358.dup := $or.i1($p355.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  $p357.dup := 0;
  $M.42 := $store.i64($M.42,$p357,$i358);
  $M.42.dup := $store.i1($M.42.dup,$p357,$i358.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  $p359 := $add.ref($add.ref($p356,$mul.ref(0,16)),$mul.ref(8,1));
  $p359.dup := $or.i1($or.i1($p356.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  $i360 := $extractvalue.i64($p355,1);
  $i360.dup := $or.i1($p355.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  $p359.dup := 0;
  $M.42 := $store.i64($M.42,$p359,$i360);
  $M.42.dup := $store.i1($M.42.dup,$p359,$i360.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 409, 7} true;
  assume {:verifier.code 0} true;
  $p44.dup := 0;
  $i361 := $load.i128($M.42,$p44);
  $i361.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p45.dup := 0;
  $M.43 := $store.i128($M.43,$p45,$i354);
  $M.43.dup := $store.i1($M.43.dup,$p45,$i354.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p362 := $bitcast.ref.ref($p45);
  $p362.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p363 := $add.ref($add.ref($p362,$mul.ref(0,16)),$mul.ref(0,1));
  $p363.dup := $or.i1($or.i1($p362.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p363.dup := 0;
  $i364 := $load.i64($M.43,$p363);
  $i364.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p365 := $add.ref($add.ref($p362,$mul.ref(0,16)),$mul.ref(8,1));
  $p365.dup := $or.i1($or.i1($p362.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p365.dup := 0;
  $i366 := $load.i64($M.43,$p365);
  $i366.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p46.dup := 0;
  $M.44 := $store.i128($M.44,$p46,$i361);
  $M.44.dup := $store.i1($M.44.dup,$p46,$i361.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p367 := $bitcast.ref.ref($p46);
  $p367.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p368 := $add.ref($add.ref($p367,$mul.ref(0,16)),$mul.ref(0,1));
  $p368.dup := $or.i1($or.i1($p367.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p368.dup := 0;
  $i369 := $load.i64($M.44,$p368);
  $i369.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p370 := $add.ref($add.ref($p367,$mul.ref(0,16)),$mul.ref(8,1));
  $p370.dup := $or.i1($or.i1($p367.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p370.dup := 0;
  $i371 := $load.i64($M.44,$p370);
  $i371.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  call $p372, $p372.dup := FStar_UInt128_add($i364, $i364.dup, $i366, $i366.dup, $i369, $i369.dup, $i371, $i371.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p373 := $bitcast.ref.ref($p47);
  $p373.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p374 := $add.ref($add.ref($p373,$mul.ref(0,16)),$mul.ref(0,1));
  $p374.dup := $or.i1($or.i1($p373.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $i375 := $extractvalue.i64($p372,0);
  $i375.dup := $or.i1($p372.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p374.dup := 0;
  $M.45 := $store.i64($M.45,$p374,$i375);
  $M.45.dup := $store.i1($M.45.dup,$p374,$i375.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p376 := $add.ref($add.ref($p373,$mul.ref(0,16)),$mul.ref(8,1));
  $p376.dup := $or.i1($or.i1($p373.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $i377 := $extractvalue.i64($p372,1);
  $i377.dup := $or.i1($p372.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p376.dup := 0;
  $M.45 := $store.i64($M.45,$p376,$i377);
  $M.45.dup := $store.i1($M.45.dup,$p376,$i377.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 407, 5} true;
  assume {:verifier.code 0} true;
  $p47.dup := 0;
  $i378 := $load.i128($M.45,$p47);
  $i378.dup := 0;
  call {:cexpr "s4"} boogie_si_record_i128($i378);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  call $p379, $p379.dup := FStar_UInt128_uint64_to_uint128(0, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  $p380 := $bitcast.ref.ref($p48);
  $p380.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  $p381 := $add.ref($add.ref($p380,$mul.ref(0,16)),$mul.ref(0,1));
  $p381.dup := $or.i1($or.i1($p380.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  $i382 := $extractvalue.i64($p379,0);
  $i382.dup := $or.i1($p379.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  $p381.dup := 0;
  $M.46 := $store.i64($M.46,$p381,$i382);
  $M.46.dup := $store.i1($M.46.dup,$p381,$i382.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  $p383 := $add.ref($add.ref($p380,$mul.ref(0,16)),$mul.ref(8,1));
  $p383.dup := $or.i1($or.i1($p380.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  $i384 := $extractvalue.i64($p379,1);
  $i384.dup := $or.i1($p379.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  $p383.dup := 0;
  $M.46 := $store.i64($M.46,$p383,$i384);
  $M.46.dup := $store.i1($M.46.dup,$p383,$i384.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 31} true;
  assume {:verifier.code 0} true;
  $p48.dup := 0;
  $i385 := $load.i128($M.46,$p48);
  $i385.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p49.dup := 0;
  $M.47 := $store.i128($M.47,$p49,$i158);
  $M.47.dup := $store.i1($M.47.dup,$p49,$i158.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p386 := $bitcast.ref.ref($p49);
  $p386.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p387 := $add.ref($add.ref($p386,$mul.ref(0,16)),$mul.ref(0,1));
  $p387.dup := $or.i1($or.i1($p386.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p387.dup := 0;
  $i388 := $load.i64($M.47,$p387);
  $i388.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p389 := $add.ref($add.ref($p386,$mul.ref(0,16)),$mul.ref(8,1));
  $p389.dup := $or.i1($or.i1($p386.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p389.dup := 0;
  $i390 := $load.i64($M.47,$p389);
  $i390.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p50.dup := 0;
  $M.48 := $store.i128($M.48,$p50,$i385);
  $M.48.dup := $store.i1($M.48.dup,$p50,$i385.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p391 := $bitcast.ref.ref($p50);
  $p391.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p392 := $add.ref($add.ref($p391,$mul.ref(0,16)),$mul.ref(0,1));
  $p392.dup := $or.i1($or.i1($p391.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p392.dup := 0;
  $i393 := $load.i64($M.48,$p392);
  $i393.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p394 := $add.ref($add.ref($p391,$mul.ref(0,16)),$mul.ref(8,1));
  $p394.dup := $or.i1($or.i1($p391.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p394.dup := 0;
  $i395 := $load.i64($M.48,$p394);
  $i395.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  call $p396, $p396.dup := FStar_UInt128_add($i388, $i388.dup, $i390, $i390.dup, $i393, $i393.dup, $i395, $i395.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p397 := $bitcast.ref.ref($p51);
  $p397.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p398 := $add.ref($add.ref($p397,$mul.ref(0,16)),$mul.ref(0,1));
  $p398.dup := $or.i1($or.i1($p397.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $i399 := $extractvalue.i64($p396,0);
  $i399.dup := $or.i1($p396.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p398.dup := 0;
  $M.49 := $store.i64($M.49,$p398,$i399);
  $M.49.dup := $store.i1($M.49.dup,$p398,$i399.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p400 := $add.ref($add.ref($p397,$mul.ref(0,16)),$mul.ref(8,1));
  $p400.dup := $or.i1($or.i1($p397.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $i401 := $extractvalue.i64($p396,1);
  $i401.dup := $or.i1($p396.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p400.dup := 0;
  $M.49 := $store.i64($M.49,$p400,$i401);
  $M.49.dup := $store.i1($M.49.dup,$p400,$i401.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 416, 8} true;
  assume {:verifier.code 0} true;
  $p51.dup := 0;
  $i402 := $load.i128($M.49,$p51);
  $i402.dup := 0;
  call {:cexpr "l_"} boogie_si_record_i128($i402);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  $p52.dup := 0;
  $M.50 := $store.i128($M.50,$p52,$i402);
  $M.50.dup := $store.i1($M.50.dup,$p52,$i402.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  $p403 := $bitcast.ref.ref($p52);
  $p403.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  $p404 := $add.ref($add.ref($p403,$mul.ref(0,16)),$mul.ref(0,1));
  $p404.dup := $or.i1($or.i1($p403.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  $p404.dup := 0;
  $i405 := $load.i64($M.50,$p404);
  $i405.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  $p406 := $add.ref($add.ref($p403,$mul.ref(0,16)),$mul.ref(8,1));
  $p406.dup := $or.i1($or.i1($p403.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  $p406.dup := 0;
  $i407 := $load.i64($M.50,$p406);
  $i407.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 19} true;
  assume {:verifier.code 0} true;
  call $i408, $i408.dup := FStar_UInt128_uint128_to_uint64($i405, $i405.dup, $i407, $i407.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 417, 55} true;
  assume {:verifier.code 0} true;
  $i409 := $and.i64($i408,2251799813685247);
  $i409.dup := $or.i1($i408.dup,0);
  call {:cexpr "tmp0"} boogie_si_record_i64($i409);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $p53.dup := 0;
  $M.51 := $store.i128($M.51,$p53,$i402);
  $M.51.dup := $store.i1($M.51.dup,$p53,$i402.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $p410 := $bitcast.ref.ref($p53);
  $p410.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $p411 := $add.ref($add.ref($p410,$mul.ref(0,16)),$mul.ref(0,1));
  $p411.dup := $or.i1($or.i1($p410.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $p411.dup := 0;
  $i412 := $load.i64($M.51,$p411);
  $i412.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $p413 := $add.ref($add.ref($p410,$mul.ref(0,16)),$mul.ref(8,1));
  $p413.dup := $or.i1($or.i1($p410.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $p413.dup := 0;
  $i414 := $load.i64($M.51,$p413);
  $i414.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  call $p415, $p415.dup := FStar_UInt128_shift_right($i412, $i412.dup, $i414, $i414.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $p416 := $bitcast.ref.ref($p54);
  $p416.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $p417 := $add.ref($add.ref($p416,$mul.ref(0,16)),$mul.ref(0,1));
  $p417.dup := $or.i1($or.i1($p416.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $i418 := $extractvalue.i64($p415,0);
  $i418.dup := $or.i1($p415.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $p417.dup := 0;
  $M.52 := $store.i64($M.52,$p417,$i418);
  $M.52.dup := $store.i1($M.52.dup,$p417,$i418.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $p419 := $add.ref($add.ref($p416,$mul.ref(0,16)),$mul.ref(8,1));
  $p419.dup := $or.i1($or.i1($p416.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $i420 := $extractvalue.i64($p415,1);
  $i420.dup := $or.i1($p415.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $p419.dup := 0;
  $M.52 := $store.i64($M.52,$p419,$i420);
  $M.52.dup := $store.i1($M.52.dup,$p419,$i420.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 49} true;
  assume {:verifier.code 0} true;
  $p54.dup := 0;
  $i421 := $load.i128($M.52,$p54);
  $i421.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  $p55.dup := 0;
  $M.53 := $store.i128($M.53,$p55,$i421);
  $M.53.dup := $store.i1($M.53.dup,$p55,$i421.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  $p422 := $bitcast.ref.ref($p55);
  $p422.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  $p423 := $add.ref($add.ref($p422,$mul.ref(0,16)),$mul.ref(0,1));
  $p423.dup := $or.i1($or.i1($p422.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  $p423.dup := 0;
  $i424 := $load.i64($M.53,$p423);
  $i424.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  $p425 := $add.ref($add.ref($p422,$mul.ref(0,16)),$mul.ref(8,1));
  $p425.dup := $or.i1($or.i1($p422.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  $p425.dup := 0;
  $i426 := $load.i64($M.53,$p425);
  $i426.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 418, 17} true;
  assume {:verifier.code 0} true;
  call $i427, $i427.dup := FStar_UInt128_uint128_to_uint64($i424, $i424.dup, $i426, $i426.dup);
  call {:cexpr "c0"} boogie_si_record_i64($i427);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  call $p428, $p428.dup := FStar_UInt128_uint64_to_uint128($i427, $i427.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  $p429 := $bitcast.ref.ref($p56);
  $p429.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  $p430 := $add.ref($add.ref($p429,$mul.ref(0,16)),$mul.ref(0,1));
  $p430.dup := $or.i1($or.i1($p429.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  $i431 := $extractvalue.i64($p428,0);
  $i431.dup := $or.i1($p428.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  $p430.dup := 0;
  $M.54 := $store.i64($M.54,$p430,$i431);
  $M.54.dup := $store.i1($M.54.dup,$p430,$i431.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  $p432 := $add.ref($add.ref($p429,$mul.ref(0,16)),$mul.ref(8,1));
  $p432.dup := $or.i1($or.i1($p429.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  $i433 := $extractvalue.i64($p428,1);
  $i433.dup := $or.i1($p428.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  $p432.dup := 0;
  $M.54 := $store.i64($M.54,$p432,$i433);
  $M.54.dup := $store.i1($M.54.dup,$p432,$i433.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 54} true;
  assume {:verifier.code 0} true;
  $p56.dup := 0;
  $i434 := $load.i128($M.54,$p56);
  $i434.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p57.dup := 0;
  $M.55 := $store.i128($M.55,$p57,$i213);
  $M.55.dup := $store.i1($M.55.dup,$p57,$i213.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p435 := $bitcast.ref.ref($p57);
  $p435.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p436 := $add.ref($add.ref($p435,$mul.ref(0,16)),$mul.ref(0,1));
  $p436.dup := $or.i1($or.i1($p435.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p436.dup := 0;
  $i437 := $load.i64($M.55,$p436);
  $i437.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p438 := $add.ref($add.ref($p435,$mul.ref(0,16)),$mul.ref(8,1));
  $p438.dup := $or.i1($or.i1($p435.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p438.dup := 0;
  $i439 := $load.i64($M.55,$p438);
  $i439.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p58.dup := 0;
  $M.56 := $store.i128($M.56,$p58,$i434);
  $M.56.dup := $store.i1($M.56.dup,$p58,$i434.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p440 := $bitcast.ref.ref($p58);
  $p440.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p441 := $add.ref($add.ref($p440,$mul.ref(0,16)),$mul.ref(0,1));
  $p441.dup := $or.i1($or.i1($p440.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p441.dup := 0;
  $i442 := $load.i64($M.56,$p441);
  $i442.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p443 := $add.ref($add.ref($p440,$mul.ref(0,16)),$mul.ref(8,1));
  $p443.dup := $or.i1($or.i1($p440.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p443.dup := 0;
  $i444 := $load.i64($M.56,$p443);
  $i444.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  call $p445, $p445.dup := FStar_UInt128_add($i437, $i437.dup, $i439, $i439.dup, $i442, $i442.dup, $i444, $i444.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p446 := $bitcast.ref.ref($p59);
  $p446.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p447 := $add.ref($add.ref($p446,$mul.ref(0,16)),$mul.ref(0,1));
  $p447.dup := $or.i1($or.i1($p446.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $i448 := $extractvalue.i64($p445,0);
  $i448.dup := $or.i1($p445.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p447.dup := 0;
  $M.57 := $store.i64($M.57,$p447,$i448);
  $M.57.dup := $store.i1($M.57.dup,$p447,$i448.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p449 := $add.ref($add.ref($p446,$mul.ref(0,16)),$mul.ref(8,1));
  $p449.dup := $or.i1($or.i1($p446.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $i450 := $extractvalue.i64($p445,1);
  $i450.dup := $or.i1($p445.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p449.dup := 0;
  $M.57 := $store.i64($M.57,$p449,$i450);
  $M.57.dup := $store.i1($M.57.dup,$p449,$i450.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 419, 31} true;
  assume {:verifier.code 0} true;
  $p59.dup := 0;
  $i451 := $load.i128($M.57,$p59);
  $i451.dup := 0;
  call {:cexpr "l_0"} boogie_si_record_i128($i451);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  $p60.dup := 0;
  $M.58 := $store.i128($M.58,$p60,$i451);
  $M.58.dup := $store.i1($M.58.dup,$p60,$i451.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  $p452 := $bitcast.ref.ref($p60);
  $p452.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  $p453 := $add.ref($add.ref($p452,$mul.ref(0,16)),$mul.ref(0,1));
  $p453.dup := $or.i1($or.i1($p452.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  $p453.dup := 0;
  $i454 := $load.i64($M.58,$p453);
  $i454.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  $p455 := $add.ref($add.ref($p452,$mul.ref(0,16)),$mul.ref(8,1));
  $p455.dup := $or.i1($or.i1($p452.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  $p455.dup := 0;
  $i456 := $load.i64($M.58,$p455);
  $i456.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 19} true;
  assume {:verifier.code 0} true;
  call $i457, $i457.dup := FStar_UInt128_uint128_to_uint64($i454, $i454.dup, $i456, $i456.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 420, 56} true;
  assume {:verifier.code 0} true;
  $i458 := $and.i64($i457,2251799813685247);
  $i458.dup := $or.i1($i457.dup,0);
  call {:cexpr "tmp1"} boogie_si_record_i64($i458);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $p61.dup := 0;
  $M.59 := $store.i128($M.59,$p61,$i451);
  $M.59.dup := $store.i1($M.59.dup,$p61,$i451.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $p459 := $bitcast.ref.ref($p61);
  $p459.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $p460 := $add.ref($add.ref($p459,$mul.ref(0,16)),$mul.ref(0,1));
  $p460.dup := $or.i1($or.i1($p459.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $p460.dup := 0;
  $i461 := $load.i64($M.59,$p460);
  $i461.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $p462 := $add.ref($add.ref($p459,$mul.ref(0,16)),$mul.ref(8,1));
  $p462.dup := $or.i1($or.i1($p459.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $p462.dup := 0;
  $i463 := $load.i64($M.59,$p462);
  $i463.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  call $p464, $p464.dup := FStar_UInt128_shift_right($i461, $i461.dup, $i463, $i463.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $p465 := $bitcast.ref.ref($p62);
  $p465.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $p466 := $add.ref($add.ref($p465,$mul.ref(0,16)),$mul.ref(0,1));
  $p466.dup := $or.i1($or.i1($p465.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $i467 := $extractvalue.i64($p464,0);
  $i467.dup := $or.i1($p464.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $p466.dup := 0;
  $M.60 := $store.i64($M.60,$p466,$i467);
  $M.60.dup := $store.i1($M.60.dup,$p466,$i467.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $p468 := $add.ref($add.ref($p465,$mul.ref(0,16)),$mul.ref(8,1));
  $p468.dup := $or.i1($or.i1($p465.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $i469 := $extractvalue.i64($p464,1);
  $i469.dup := $or.i1($p464.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $p468.dup := 0;
  $M.60 := $store.i64($M.60,$p468,$i469);
  $M.60.dup := $store.i1($M.60.dup,$p468,$i469.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 49} true;
  assume {:verifier.code 0} true;
  $p62.dup := 0;
  $i470 := $load.i128($M.60,$p62);
  $i470.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  $p63.dup := 0;
  $M.61 := $store.i128($M.61,$p63,$i470);
  $M.61.dup := $store.i1($M.61.dup,$p63,$i470.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  $p471 := $bitcast.ref.ref($p63);
  $p471.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  $p472 := $add.ref($add.ref($p471,$mul.ref(0,16)),$mul.ref(0,1));
  $p472.dup := $or.i1($or.i1($p471.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  $p472.dup := 0;
  $i473 := $load.i64($M.61,$p472);
  $i473.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  $p474 := $add.ref($add.ref($p471,$mul.ref(0,16)),$mul.ref(8,1));
  $p474.dup := $or.i1($or.i1($p471.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  $p474.dup := 0;
  $i475 := $load.i64($M.61,$p474);
  $i475.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 421, 17} true;
  assume {:verifier.code 0} true;
  call $i476, $i476.dup := FStar_UInt128_uint128_to_uint64($i473, $i473.dup, $i475, $i475.dup);
  call {:cexpr "c1"} boogie_si_record_i64($i476);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  call $p477, $p477.dup := FStar_UInt128_uint64_to_uint128($i476, $i476.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  $p478 := $bitcast.ref.ref($p64);
  $p478.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  $p479 := $add.ref($add.ref($p478,$mul.ref(0,16)),$mul.ref(0,1));
  $p479.dup := $or.i1($or.i1($p478.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  $i480 := $extractvalue.i64($p477,0);
  $i480.dup := $or.i1($p477.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  $p479.dup := 0;
  $M.62 := $store.i64($M.62,$p479,$i480);
  $M.62.dup := $store.i1($M.62.dup,$p479,$i480.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  $p481 := $add.ref($add.ref($p478,$mul.ref(0,16)),$mul.ref(8,1));
  $p481.dup := $or.i1($or.i1($p478.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  $i482 := $extractvalue.i64($p477,1);
  $i482.dup := $or.i1($p477.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  $p481.dup := 0;
  $M.62 := $store.i64($M.62,$p481,$i482);
  $M.62.dup := $store.i1($M.62.dup,$p481,$i482.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 54} true;
  assume {:verifier.code 0} true;
  $p64.dup := 0;
  $i483 := $load.i128($M.62,$p64);
  $i483.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p65.dup := 0;
  $M.63 := $store.i128($M.63,$p65,$i268);
  $M.63.dup := $store.i1($M.63.dup,$p65,$i268.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p484 := $bitcast.ref.ref($p65);
  $p484.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p485 := $add.ref($add.ref($p484,$mul.ref(0,16)),$mul.ref(0,1));
  $p485.dup := $or.i1($or.i1($p484.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p485.dup := 0;
  $i486 := $load.i64($M.63,$p485);
  $i486.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p487 := $add.ref($add.ref($p484,$mul.ref(0,16)),$mul.ref(8,1));
  $p487.dup := $or.i1($or.i1($p484.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p487.dup := 0;
  $i488 := $load.i64($M.63,$p487);
  $i488.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p66.dup := 0;
  $M.64 := $store.i128($M.64,$p66,$i483);
  $M.64.dup := $store.i1($M.64.dup,$p66,$i483.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p489 := $bitcast.ref.ref($p66);
  $p489.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p490 := $add.ref($add.ref($p489,$mul.ref(0,16)),$mul.ref(0,1));
  $p490.dup := $or.i1($or.i1($p489.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p490.dup := 0;
  $i491 := $load.i64($M.64,$p490);
  $i491.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p492 := $add.ref($add.ref($p489,$mul.ref(0,16)),$mul.ref(8,1));
  $p492.dup := $or.i1($or.i1($p489.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p492.dup := 0;
  $i493 := $load.i64($M.64,$p492);
  $i493.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  call $p494, $p494.dup := FStar_UInt128_add($i486, $i486.dup, $i488, $i488.dup, $i491, $i491.dup, $i493, $i493.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p495 := $bitcast.ref.ref($p67);
  $p495.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p496 := $add.ref($add.ref($p495,$mul.ref(0,16)),$mul.ref(0,1));
  $p496.dup := $or.i1($or.i1($p495.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $i497 := $extractvalue.i64($p494,0);
  $i497.dup := $or.i1($p494.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p496.dup := 0;
  $M.65 := $store.i64($M.65,$p496,$i497);
  $M.65.dup := $store.i1($M.65.dup,$p496,$i497.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p498 := $add.ref($add.ref($p495,$mul.ref(0,16)),$mul.ref(8,1));
  $p498.dup := $or.i1($or.i1($p495.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $i499 := $extractvalue.i64($p494,1);
  $i499.dup := $or.i1($p494.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p498.dup := 0;
  $M.65 := $store.i64($M.65,$p498,$i499);
  $M.65.dup := $store.i1($M.65.dup,$p498,$i499.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 422, 31} true;
  assume {:verifier.code 0} true;
  $p67.dup := 0;
  $i500 := $load.i128($M.65,$p67);
  $i500.dup := 0;
  call {:cexpr "l_1"} boogie_si_record_i128($i500);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  $p68.dup := 0;
  $M.66 := $store.i128($M.66,$p68,$i500);
  $M.66.dup := $store.i1($M.66.dup,$p68,$i500.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  $p501 := $bitcast.ref.ref($p68);
  $p501.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  $p502 := $add.ref($add.ref($p501,$mul.ref(0,16)),$mul.ref(0,1));
  $p502.dup := $or.i1($or.i1($p501.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  $p502.dup := 0;
  $i503 := $load.i64($M.66,$p502);
  $i503.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  $p504 := $add.ref($add.ref($p501,$mul.ref(0,16)),$mul.ref(8,1));
  $p504.dup := $or.i1($or.i1($p501.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  $p504.dup := 0;
  $i505 := $load.i64($M.66,$p504);
  $i505.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 19} true;
  assume {:verifier.code 0} true;
  call $i506, $i506.dup := FStar_UInt128_uint128_to_uint64($i503, $i503.dup, $i505, $i505.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 423, 56} true;
  assume {:verifier.code 0} true;
  $i507 := $and.i64($i506,2251799813685247);
  $i507.dup := $or.i1($i506.dup,0);
  call {:cexpr "tmp2"} boogie_si_record_i64($i507);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $p69.dup := 0;
  $M.67 := $store.i128($M.67,$p69,$i500);
  $M.67.dup := $store.i1($M.67.dup,$p69,$i500.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $p508 := $bitcast.ref.ref($p69);
  $p508.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $p509 := $add.ref($add.ref($p508,$mul.ref(0,16)),$mul.ref(0,1));
  $p509.dup := $or.i1($or.i1($p508.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $p509.dup := 0;
  $i510 := $load.i64($M.67,$p509);
  $i510.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $p511 := $add.ref($add.ref($p508,$mul.ref(0,16)),$mul.ref(8,1));
  $p511.dup := $or.i1($or.i1($p508.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $p511.dup := 0;
  $i512 := $load.i64($M.67,$p511);
  $i512.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  call $p513, $p513.dup := FStar_UInt128_shift_right($i510, $i510.dup, $i512, $i512.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $p514 := $bitcast.ref.ref($p70);
  $p514.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $p515 := $add.ref($add.ref($p514,$mul.ref(0,16)),$mul.ref(0,1));
  $p515.dup := $or.i1($or.i1($p514.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $i516 := $extractvalue.i64($p513,0);
  $i516.dup := $or.i1($p513.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $p515.dup := 0;
  $M.68 := $store.i64($M.68,$p515,$i516);
  $M.68.dup := $store.i1($M.68.dup,$p515,$i516.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $p517 := $add.ref($add.ref($p514,$mul.ref(0,16)),$mul.ref(8,1));
  $p517.dup := $or.i1($or.i1($p514.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $i518 := $extractvalue.i64($p513,1);
  $i518.dup := $or.i1($p513.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $p517.dup := 0;
  $M.68 := $store.i64($M.68,$p517,$i518);
  $M.68.dup := $store.i1($M.68.dup,$p517,$i518.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 49} true;
  assume {:verifier.code 0} true;
  $p70.dup := 0;
  $i519 := $load.i128($M.68,$p70);
  $i519.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  $p71.dup := 0;
  $M.69 := $store.i128($M.69,$p71,$i519);
  $M.69.dup := $store.i1($M.69.dup,$p71,$i519.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  $p520 := $bitcast.ref.ref($p71);
  $p520.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  $p521 := $add.ref($add.ref($p520,$mul.ref(0,16)),$mul.ref(0,1));
  $p521.dup := $or.i1($or.i1($p520.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  $p521.dup := 0;
  $i522 := $load.i64($M.69,$p521);
  $i522.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  $p523 := $add.ref($add.ref($p520,$mul.ref(0,16)),$mul.ref(8,1));
  $p523.dup := $or.i1($or.i1($p520.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  $p523.dup := 0;
  $i524 := $load.i64($M.69,$p523);
  $i524.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 424, 17} true;
  assume {:verifier.code 0} true;
  call $i525, $i525.dup := FStar_UInt128_uint128_to_uint64($i522, $i522.dup, $i524, $i524.dup);
  call {:cexpr "c2"} boogie_si_record_i64($i525);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  call $p526, $p526.dup := FStar_UInt128_uint64_to_uint128($i525, $i525.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  $p527 := $bitcast.ref.ref($p72);
  $p527.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  $p528 := $add.ref($add.ref($p527,$mul.ref(0,16)),$mul.ref(0,1));
  $p528.dup := $or.i1($or.i1($p527.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  $i529 := $extractvalue.i64($p526,0);
  $i529.dup := $or.i1($p526.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  $p528.dup := 0;
  $M.70 := $store.i64($M.70,$p528,$i529);
  $M.70.dup := $store.i1($M.70.dup,$p528,$i529.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  $p530 := $add.ref($add.ref($p527,$mul.ref(0,16)),$mul.ref(8,1));
  $p530.dup := $or.i1($or.i1($p527.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  $i531 := $extractvalue.i64($p526,1);
  $i531.dup := $or.i1($p526.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  $p530.dup := 0;
  $M.70 := $store.i64($M.70,$p530,$i531);
  $M.70.dup := $store.i1($M.70.dup,$p530,$i531.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 54} true;
  assume {:verifier.code 0} true;
  $p72.dup := 0;
  $i532 := $load.i128($M.70,$p72);
  $i532.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p73.dup := 0;
  $M.71 := $store.i128($M.71,$p73,$i323);
  $M.71.dup := $store.i1($M.71.dup,$p73,$i323.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p533 := $bitcast.ref.ref($p73);
  $p533.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p534 := $add.ref($add.ref($p533,$mul.ref(0,16)),$mul.ref(0,1));
  $p534.dup := $or.i1($or.i1($p533.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p534.dup := 0;
  $i535 := $load.i64($M.71,$p534);
  $i535.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p536 := $add.ref($add.ref($p533,$mul.ref(0,16)),$mul.ref(8,1));
  $p536.dup := $or.i1($or.i1($p533.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p536.dup := 0;
  $i537 := $load.i64($M.71,$p536);
  $i537.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p74.dup := 0;
  $M.72 := $store.i128($M.72,$p74,$i532);
  $M.72.dup := $store.i1($M.72.dup,$p74,$i532.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p538 := $bitcast.ref.ref($p74);
  $p538.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p539 := $add.ref($add.ref($p538,$mul.ref(0,16)),$mul.ref(0,1));
  $p539.dup := $or.i1($or.i1($p538.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p539.dup := 0;
  $i540 := $load.i64($M.72,$p539);
  $i540.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p541 := $add.ref($add.ref($p538,$mul.ref(0,16)),$mul.ref(8,1));
  $p541.dup := $or.i1($or.i1($p538.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p541.dup := 0;
  $i542 := $load.i64($M.72,$p541);
  $i542.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  call $p543, $p543.dup := FStar_UInt128_add($i535, $i535.dup, $i537, $i537.dup, $i540, $i540.dup, $i542, $i542.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p544 := $bitcast.ref.ref($p75);
  $p544.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p545 := $add.ref($add.ref($p544,$mul.ref(0,16)),$mul.ref(0,1));
  $p545.dup := $or.i1($or.i1($p544.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $i546 := $extractvalue.i64($p543,0);
  $i546.dup := $or.i1($p543.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p545.dup := 0;
  $M.73 := $store.i64($M.73,$p545,$i546);
  $M.73.dup := $store.i1($M.73.dup,$p545,$i546.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p547 := $add.ref($add.ref($p544,$mul.ref(0,16)),$mul.ref(8,1));
  $p547.dup := $or.i1($or.i1($p544.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $i548 := $extractvalue.i64($p543,1);
  $i548.dup := $or.i1($p543.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p547.dup := 0;
  $M.73 := $store.i64($M.73,$p547,$i548);
  $M.73.dup := $store.i1($M.73.dup,$p547,$i548.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 425, 31} true;
  assume {:verifier.code 0} true;
  $p75.dup := 0;
  $i549 := $load.i128($M.73,$p75);
  $i549.dup := 0;
  call {:cexpr "l_2"} boogie_si_record_i128($i549);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  $p76.dup := 0;
  $M.74 := $store.i128($M.74,$p76,$i549);
  $M.74.dup := $store.i1($M.74.dup,$p76,$i549.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  $p550 := $bitcast.ref.ref($p76);
  $p550.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  $p551 := $add.ref($add.ref($p550,$mul.ref(0,16)),$mul.ref(0,1));
  $p551.dup := $or.i1($or.i1($p550.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  $p551.dup := 0;
  $i552 := $load.i64($M.74,$p551);
  $i552.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  $p553 := $add.ref($add.ref($p550,$mul.ref(0,16)),$mul.ref(8,1));
  $p553.dup := $or.i1($or.i1($p550.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  $p553.dup := 0;
  $i554 := $load.i64($M.74,$p553);
  $i554.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 19} true;
  assume {:verifier.code 0} true;
  call $i555, $i555.dup := FStar_UInt128_uint128_to_uint64($i552, $i552.dup, $i554, $i554.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 426, 56} true;
  assume {:verifier.code 0} true;
  $i556 := $and.i64($i555,2251799813685247);
  $i556.dup := $or.i1($i555.dup,0);
  call {:cexpr "tmp3"} boogie_si_record_i64($i556);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $p77.dup := 0;
  $M.75 := $store.i128($M.75,$p77,$i549);
  $M.75.dup := $store.i1($M.75.dup,$p77,$i549.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $p557 := $bitcast.ref.ref($p77);
  $p557.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $p558 := $add.ref($add.ref($p557,$mul.ref(0,16)),$mul.ref(0,1));
  $p558.dup := $or.i1($or.i1($p557.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $p558.dup := 0;
  $i559 := $load.i64($M.75,$p558);
  $i559.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $p560 := $add.ref($add.ref($p557,$mul.ref(0,16)),$mul.ref(8,1));
  $p560.dup := $or.i1($or.i1($p557.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $p560.dup := 0;
  $i561 := $load.i64($M.75,$p560);
  $i561.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  call $p562, $p562.dup := FStar_UInt128_shift_right($i559, $i559.dup, $i561, $i561.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $p563 := $bitcast.ref.ref($p78);
  $p563.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $p564 := $add.ref($add.ref($p563,$mul.ref(0,16)),$mul.ref(0,1));
  $p564.dup := $or.i1($or.i1($p563.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $i565 := $extractvalue.i64($p562,0);
  $i565.dup := $or.i1($p562.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $p564.dup := 0;
  $M.76 := $store.i64($M.76,$p564,$i565);
  $M.76.dup := $store.i1($M.76.dup,$p564,$i565.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $p566 := $add.ref($add.ref($p563,$mul.ref(0,16)),$mul.ref(8,1));
  $p566.dup := $or.i1($or.i1($p563.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $i567 := $extractvalue.i64($p562,1);
  $i567.dup := $or.i1($p562.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $p566.dup := 0;
  $M.76 := $store.i64($M.76,$p566,$i567);
  $M.76.dup := $store.i1($M.76.dup,$p566,$i567.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 49} true;
  assume {:verifier.code 0} true;
  $p78.dup := 0;
  $i568 := $load.i128($M.76,$p78);
  $i568.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  $p79.dup := 0;
  $M.77 := $store.i128($M.77,$p79,$i568);
  $M.77.dup := $store.i1($M.77.dup,$p79,$i568.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  $p569 := $bitcast.ref.ref($p79);
  $p569.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  $p570 := $add.ref($add.ref($p569,$mul.ref(0,16)),$mul.ref(0,1));
  $p570.dup := $or.i1($or.i1($p569.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  $p570.dup := 0;
  $i571 := $load.i64($M.77,$p570);
  $i571.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  $p572 := $add.ref($add.ref($p569,$mul.ref(0,16)),$mul.ref(8,1));
  $p572.dup := $or.i1($or.i1($p569.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  $p572.dup := 0;
  $i573 := $load.i64($M.77,$p572);
  $i573.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 427, 17} true;
  assume {:verifier.code 0} true;
  call $i574, $i574.dup := FStar_UInt128_uint128_to_uint64($i571, $i571.dup, $i573, $i573.dup);
  call {:cexpr "c3"} boogie_si_record_i64($i574);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  call $p575, $p575.dup := FStar_UInt128_uint64_to_uint128($i574, $i574.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  $p576 := $bitcast.ref.ref($p80);
  $p576.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  $p577 := $add.ref($add.ref($p576,$mul.ref(0,16)),$mul.ref(0,1));
  $p577.dup := $or.i1($or.i1($p576.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  $i578 := $extractvalue.i64($p575,0);
  $i578.dup := $or.i1($p575.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  $p577.dup := 0;
  $M.78 := $store.i64($M.78,$p577,$i578);
  $M.78.dup := $store.i1($M.78.dup,$p577,$i578.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  $p579 := $add.ref($add.ref($p576,$mul.ref(0,16)),$mul.ref(8,1));
  $p579.dup := $or.i1($or.i1($p576.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  $i580 := $extractvalue.i64($p575,1);
  $i580.dup := $or.i1($p575.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  $p579.dup := 0;
  $M.78 := $store.i64($M.78,$p579,$i580);
  $M.78.dup := $store.i1($M.78.dup,$p579,$i580.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 54} true;
  assume {:verifier.code 0} true;
  $p80.dup := 0;
  $i581 := $load.i128($M.78,$p80);
  $i581.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p81.dup := 0;
  $M.79 := $store.i128($M.79,$p81,$i378);
  $M.79.dup := $store.i1($M.79.dup,$p81,$i378.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p582 := $bitcast.ref.ref($p81);
  $p582.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p583 := $add.ref($add.ref($p582,$mul.ref(0,16)),$mul.ref(0,1));
  $p583.dup := $or.i1($or.i1($p582.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p583.dup := 0;
  $i584 := $load.i64($M.79,$p583);
  $i584.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p585 := $add.ref($add.ref($p582,$mul.ref(0,16)),$mul.ref(8,1));
  $p585.dup := $or.i1($or.i1($p582.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p585.dup := 0;
  $i586 := $load.i64($M.79,$p585);
  $i586.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p82.dup := 0;
  $M.80 := $store.i128($M.80,$p82,$i581);
  $M.80.dup := $store.i1($M.80.dup,$p82,$i581.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p587 := $bitcast.ref.ref($p82);
  $p587.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p588 := $add.ref($add.ref($p587,$mul.ref(0,16)),$mul.ref(0,1));
  $p588.dup := $or.i1($or.i1($p587.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p588.dup := 0;
  $i589 := $load.i64($M.80,$p588);
  $i589.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p590 := $add.ref($add.ref($p587,$mul.ref(0,16)),$mul.ref(8,1));
  $p590.dup := $or.i1($or.i1($p587.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p590.dup := 0;
  $i591 := $load.i64($M.80,$p590);
  $i591.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  call $p592, $p592.dup := FStar_UInt128_add($i584, $i584.dup, $i586, $i586.dup, $i589, $i589.dup, $i591, $i591.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p593 := $bitcast.ref.ref($p83);
  $p593.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p594 := $add.ref($add.ref($p593,$mul.ref(0,16)),$mul.ref(0,1));
  $p594.dup := $or.i1($or.i1($p593.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $i595 := $extractvalue.i64($p592,0);
  $i595.dup := $or.i1($p592.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p594.dup := 0;
  $M.81 := $store.i64($M.81,$p594,$i595);
  $M.81.dup := $store.i1($M.81.dup,$p594,$i595.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p596 := $add.ref($add.ref($p593,$mul.ref(0,16)),$mul.ref(8,1));
  $p596.dup := $or.i1($or.i1($p593.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $i597 := $extractvalue.i64($p592,1);
  $i597.dup := $or.i1($p592.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p596.dup := 0;
  $M.81 := $store.i64($M.81,$p596,$i597);
  $M.81.dup := $store.i1($M.81.dup,$p596,$i597.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 428, 31} true;
  assume {:verifier.code 0} true;
  $p83.dup := 0;
  $i598 := $load.i128($M.81,$p83);
  $i598.dup := 0;
  call {:cexpr "l_3"} boogie_si_record_i128($i598);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  $p84.dup := 0;
  $M.82 := $store.i128($M.82,$p84,$i598);
  $M.82.dup := $store.i1($M.82.dup,$p84,$i598.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  $p599 := $bitcast.ref.ref($p84);
  $p599.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  $p600 := $add.ref($add.ref($p599,$mul.ref(0,16)),$mul.ref(0,1));
  $p600.dup := $or.i1($or.i1($p599.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  $p600.dup := 0;
  $i601 := $load.i64($M.82,$p600);
  $i601.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  $p602 := $add.ref($add.ref($p599,$mul.ref(0,16)),$mul.ref(8,1));
  $p602.dup := $or.i1($or.i1($p599.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  $p602.dup := 0;
  $i603 := $load.i64($M.82,$p602);
  $i603.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 19} true;
  assume {:verifier.code 0} true;
  call $i604, $i604.dup := FStar_UInt128_uint128_to_uint64($i601, $i601.dup, $i603, $i603.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 429, 56} true;
  assume {:verifier.code 0} true;
  $i605 := $and.i64($i604,2251799813685247);
  $i605.dup := $or.i1($i604.dup,0);
  call {:cexpr "tmp4"} boogie_si_record_i64($i605);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $p85.dup := 0;
  $M.83 := $store.i128($M.83,$p85,$i598);
  $M.83.dup := $store.i1($M.83.dup,$p85,$i598.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $p606 := $bitcast.ref.ref($p85);
  $p606.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $p607 := $add.ref($add.ref($p606,$mul.ref(0,16)),$mul.ref(0,1));
  $p607.dup := $or.i1($or.i1($p606.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $p607.dup := 0;
  $i608 := $load.i64($M.83,$p607);
  $i608.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $p609 := $add.ref($add.ref($p606,$mul.ref(0,16)),$mul.ref(8,1));
  $p609.dup := $or.i1($or.i1($p606.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $p609.dup := 0;
  $i610 := $load.i64($M.83,$p609);
  $i610.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  call $p611, $p611.dup := FStar_UInt128_shift_right($i608, $i608.dup, $i610, $i610.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $p612 := $bitcast.ref.ref($p86);
  $p612.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $p613 := $add.ref($add.ref($p612,$mul.ref(0,16)),$mul.ref(0,1));
  $p613.dup := $or.i1($or.i1($p612.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $i614 := $extractvalue.i64($p611,0);
  $i614.dup := $or.i1($p611.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $p613.dup := 0;
  $M.84 := $store.i64($M.84,$p613,$i614);
  $M.84.dup := $store.i1($M.84.dup,$p613,$i614.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $p615 := $add.ref($add.ref($p612,$mul.ref(0,16)),$mul.ref(8,1));
  $p615.dup := $or.i1($or.i1($p612.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $i616 := $extractvalue.i64($p611,1);
  $i616.dup := $or.i1($p611.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $p615.dup := 0;
  $M.84 := $store.i64($M.84,$p615,$i616);
  $M.84.dup := $store.i1($M.84.dup,$p615,$i616.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 49} true;
  assume {:verifier.code 0} true;
  $p86.dup := 0;
  $i617 := $load.i128($M.84,$p86);
  $i617.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  $p87.dup := 0;
  $M.85 := $store.i128($M.85,$p87,$i617);
  $M.85.dup := $store.i1($M.85.dup,$p87,$i617.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  $p618 := $bitcast.ref.ref($p87);
  $p618.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  $p619 := $add.ref($add.ref($p618,$mul.ref(0,16)),$mul.ref(0,1));
  $p619.dup := $or.i1($or.i1($p618.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  $p619.dup := 0;
  $i620 := $load.i64($M.85,$p619);
  $i620.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  $p621 := $add.ref($add.ref($p618,$mul.ref(0,16)),$mul.ref(8,1));
  $p621.dup := $or.i1($or.i1($p618.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  $p621.dup := 0;
  $i622 := $load.i64($M.85,$p621);
  $i622.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 430, 17} true;
  assume {:verifier.code 0} true;
  call $i623, $i623.dup := FStar_UInt128_uint128_to_uint64($i620, $i620.dup, $i622, $i622.dup);
  call {:cexpr "c4"} boogie_si_record_i64($i623);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 431, 28} true;
  assume {:verifier.code 0} true;
  $i624 := $mul.i64($i623,19);
  $i624.dup := $or.i1($i623.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 431, 23} true;
  assume {:verifier.code 0} true;
  $i625 := $add.i64($i409,$i624);
  $i625.dup := 0;
  call {:cexpr "l_4"} boogie_si_record_i64($i625);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 432, 24} true;
  assume {:verifier.code 0} true;
  $i626 := $and.i64($i625,2251799813685247);
  $i626.dup := $or.i1($i625.dup,0);
  call {:cexpr "tmp0_"} boogie_si_record_i64($i626);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 433, 21} true;
  assume {:verifier.code 0} true;
  $i627 := $lshr.i64($i625,51);
  $i627.dup := $or.i1($i625.dup,0);
  call {:cexpr "c5"} boogie_si_record_i64($i627);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 435, 22} true;
  assume {:verifier.code 0} true;
  $i628 := $add.i64($i458,$i627);
  $i628.dup := 0;
  call {:cexpr "o1"} boogie_si_record_i64($i628);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 439, 3} true;
  assume {:verifier.code 0} true;
  $p629 := $add.ref($p0,$mul.ref(0,8));
  $p629.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 439, 11} true;
  assume {:verifier.code 0} true;
  $p629.dup := 0;
  $M.0 := $store.i64($M.0,$p629,$i626);
  $M.0.dup := $store.i1($M.0.dup,$p629,$i626.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 440, 3} true;
  assume {:verifier.code 0} true;
  $p630 := $add.ref($p0,$mul.ref(1,8));
  $p630.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 440, 11} true;
  assume {:verifier.code 0} true;
  $p630.dup := 0;
  $M.0 := $store.i64($M.0,$p630,$i628);
  $M.0.dup := $store.i1($M.0.dup,$p630,$i628.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 441, 3} true;
  assume {:verifier.code 0} true;
  $p631 := $add.ref($p0,$mul.ref(2,8));
  $p631.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 441, 11} true;
  assume {:verifier.code 0} true;
  $p631.dup := 0;
  $M.0 := $store.i64($M.0,$p631,$i507);
  $M.0.dup := $store.i1($M.0.dup,$p631,$i507.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 442, 3} true;
  assume {:verifier.code 0} true;
  $p632 := $add.ref($p0,$mul.ref(3,8));
  $p632.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 442, 11} true;
  assume {:verifier.code 0} true;
  $p632.dup := 0;
  $M.0 := $store.i64($M.0,$p632,$i556);
  $M.0.dup := $store.i1($M.0.dup,$p632,$i556.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 443, 3} true;
  assume {:verifier.code 0} true;
  $p633 := $add.ref($p0,$mul.ref(4,8));
  $p633.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 443, 11} true;
  assume {:verifier.code 0} true;
  $p633.dup := 0;
  $M.0 := $store.i64($M.0,$p633,$i605);
  $M.0.dup := $store.i1($M.0.dup,$p633,$i605.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 444, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const FStar_UInt128_mul_wide: ref;
axiom (FStar_UInt128_mul_wide == $sub.ref(0,4128));
procedure {:inline 1} FStar_UInt128_mul_wide($i0: i64, $i0.dup: i1, $i1: i64, $i1.dup: i1) returns ($r: ref, $r.dup: i1)
modifies $M.86, $exn;
modifies $CurrAddr;
{
  var $p2: ref;
  var $p2.dup: i1;
  var $i3: i128;
  var $i3.dup: i1;
  var $i4: i128;
  var $i4.dup: i1;
  var $i5: i128;
  var $i5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $i8: i64;
  var $i8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $p10: ref;
  var $p10.dup: i1;
  var $i11: i64;
  var $i11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 11} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p2.dup := 0;
  call {:cexpr "FStar_UInt128_mul_wide:arg:x"} boogie_si_record_i64($i0);
  call {:cexpr "FStar_UInt128_mul_wide:arg:y"} boogie_si_record_i64($i1);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 11} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i64.i128($i0);
  $i3.dup := $i0.dup;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 28} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i64.i128($i1);
  $i4.dup := $i1.dup;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 26} true;
  assume {:verifier.code 0} true;
  $i5 := $mul.i128($i3,$i4);
  $i5.dup := $or.i1($i3.dup,$i4.dup);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  assume {:verifier.code 0} true;
  $p2.dup := 0;
  $M.86 := $store.i128($M.86,$p2,$i5);
  $M.86.dup := $store.i1($M.86.dup,$p2,$i5.dup);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  assume {:verifier.code 0} true;
  assume {:PointTainted} true;
  $p6 := $bitcast.ref.ref($p2);
  $p6.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  $p7 := $add.ref($add.ref($p6,$mul.ref(0,16)),$mul.ref(0,1));
  $p7.dup := $or.i1($or.i1($p6.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  $p7.dup := 0;
  $i8 := $load.i64($M.86,$p7);
  $i8.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  assume ($extractvalue.i64($p9,1) == $extractvalue.i64($u0,1));
  assume ($extractvalue.i64($p9,0) == $i8);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  $p10 := $add.ref($add.ref($p6,$mul.ref(0,16)),$mul.ref(8,1));
  $p10.dup := $or.i1($or.i1($p6.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  $p10.dup := 0;
  $i11 := $load.i64($M.86,$p10);
  $i11.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  assume ($extractvalue.i64($p12,0) == $extractvalue.i64($p9,0));
  assume ($extractvalue.i64($p12,1) == $i11);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 107, 3} true;
  assume {:verifier.code 0} true;
  $r := $p12;
  $r.dup := 0;
  $exn := false;
  $exn.dup := false;
  return;
}
const FStar_UInt128_add: ref;
axiom (FStar_UInt128_add == $sub.ref(0,5160));
procedure {:inline 1} FStar_UInt128_add($i0: i64, $i0.dup: i1, $i1: i64, $i1.dup: i1, $i2: i64, $i2.dup: i1, $i3: i64, $i3.dup: i1) returns ($r: ref, $r.dup: i1)
modifies $M.87, $M.88, $M.89, $exn;
modifies $CurrAddr;
{
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $p8: ref;
  var $p8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $i10: i128;
  var $i10.dup: i1;
  var $p11: ref;
  var $p11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
  var $p13: ref;
  var $p13.dup: i1;
  var $i14: i128;
  var $i14.dup: i1;
  var $i15: i128;
  var $i15.dup: i1;
  var $p16: ref;
  var $p16.dup: i1;
  var $p17: ref;
  var $p17.dup: i1;
  var $i18: i64;
  var $i18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $p20: ref;
  var $p20.dup: i1;
  var $i21: i64;
  var $i21.dup: i1;
  var $p22: ref;
  var $p22.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 12} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p4.dup := 0;
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p5.dup := 0;
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p6.dup := 0;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p5);
  $p7.dup := 0;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p7,$mul.ref(0,16)),$mul.ref(0,1));
  $p8.dup := $or.i1($or.i1($p7.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:verifier.code 0} true;
  $p8.dup := 0;
  $M.87 := $store.i64($M.87,$p8,$i0);
  $M.87.dup := $store.i1($M.87.dup,$p8,$i0.dup);
  assume {:verifier.code 0} true;
  $p9 := $add.ref($add.ref($p7,$mul.ref(0,16)),$mul.ref(8,1));
  $p9.dup := $or.i1($or.i1($p7.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:verifier.code 0} true;
  $p9.dup := 0;
  $M.87 := $store.i64($M.87,$p9,$i1);
  $M.87.dup := $store.i1($M.87.dup,$p9,$i1.dup);
  assume {:verifier.code 0} true;
  $p5.dup := 0;
  $i10 := $load.i128($M.87,$p5);
  $i10.dup := 0;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p6);
  $p11.dup := 0;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p11,$mul.ref(0,16)),$mul.ref(0,1));
  $p12.dup := $or.i1($or.i1($p11.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:verifier.code 0} true;
  $p12.dup := 0;
  $M.88 := $store.i64($M.88,$p12,$i2);
  $M.88.dup := $store.i1($M.88.dup,$p12,$i2.dup);
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p11,$mul.ref(0,16)),$mul.ref(8,1));
  $p13.dup := $or.i1($or.i1($p11.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:verifier.code 0} true;
  $p13.dup := 0;
  $M.88 := $store.i64($M.88,$p13,$i3);
  $M.88.dup := $store.i1($M.88.dup,$p13,$i3.dup);
  assume {:verifier.code 0} true;
  $p6.dup := 0;
  $i14 := $load.i128($M.88,$p6);
  $i14.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 12} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i128($i10,$i14);
  $i15.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  assume {:verifier.code 0} true;
  $p4.dup := 0;
  $M.89 := $store.i128($M.89,$p4,$i15);
  $M.89.dup := $store.i1($M.89.dup,$p4,$i15.dup);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  assume {:verifier.code 0} true;
  $p16 := $bitcast.ref.ref($p4);
  $p16.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  $p17 := $add.ref($add.ref($p16,$mul.ref(0,16)),$mul.ref(0,1));
  $p17.dup := $or.i1($or.i1($p16.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  $p17.dup := 0;
  $i18 := $load.i64($M.89,$p17);
  $i18.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  assume ($extractvalue.i64($p19,1) == $extractvalue.i64($u0,1));
  assume ($extractvalue.i64($p19,0) == $i18);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  $p20 := $add.ref($add.ref($p16,$mul.ref(0,16)),$mul.ref(8,1));
  $p20.dup := $or.i1($or.i1($p16.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  $p20.dup := 0;
  $i21 := $load.i64($M.89,$p20);
  $i21.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  assume ($extractvalue.i64($p22,0) == $extractvalue.i64($p19,0));
  assume ($extractvalue.i64($p22,1) == $i21);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 55, 3} true;
  assume {:verifier.code 0} true;
  $r := $p22;
  $r.dup := 0;
  $exn := false;
  $exn.dup := false;
  return;
}
const FStar_UInt128_uint64_to_uint128: ref;
axiom (FStar_UInt128_uint64_to_uint128 == $sub.ref(0,6192));
procedure {:inline 1} FStar_UInt128_uint64_to_uint128($i0: i64, $i0.dup: i1) returns ($r: ref, $r.dup: i1)
modifies $M.90, $exn;
modifies $CurrAddr;
{
  var $p1: ref;
  var $p1.dup: i1;
  var $i2: i128;
  var $i2.dup: i1;
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $i5: i64;
  var $i5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $i8: i64;
  var $i8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 10} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p1.dup := 0;
  call {:cexpr "FStar_UInt128_uint64_to_uint128:arg:x"} boogie_si_record_i64($i0);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 10} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i64.i128($i0);
  $i2.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  assume {:verifier.code 0} true;
  $p1.dup := 0;
  $M.90 := $store.i128($M.90,$p1,$i2);
  $M.90.dup := $store.i1($M.90.dup,$p1,$i2.dup);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p1);
  $p3.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  $p4 := $add.ref($add.ref($p3,$mul.ref(0,16)),$mul.ref(0,1));
  $p4.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  $p4.dup := 0;
  $i5 := $load.i64($M.90,$p4);
  $i5.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  assume ($extractvalue.i64($p6,1) == $extractvalue.i64($u0,1));
  assume ($extractvalue.i64($p6,0) == $i5);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  $p7 := $add.ref($add.ref($p3,$mul.ref(0,16)),$mul.ref(8,1));
  $p7.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  $p7.dup := 0;
  $i8 := $load.i64($M.90,$p7);
  $i8.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  assume ($extractvalue.i64($p9,0) == $extractvalue.i64($p6,0));
  assume ($extractvalue.i64($p9,1) == $i8);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 99, 3} true;
  assume {:verifier.code 0} true;
  $r := $p9;
  $r.dup := 0;
  $exn := false;
  $exn.dup := false;
  return;
}
const FStar_UInt128_uint128_to_uint64: ref;
axiom (FStar_UInt128_uint128_to_uint64 == $sub.ref(0,7224));
procedure {:inline 1} FStar_UInt128_uint128_to_uint64($i0: i64, $i0.dup: i1, $i1: i64, $i1.dup: i1) returns ($r: i64, $r.dup: i1)
modifies $M.91, $exn;
modifies $CurrAddr;
{
  var $p2: ref;
  var $p2.dup: i1;
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $i6: i128;
  var $i6.dup: i1;
  var $i7: i64;
  var $i7.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 103, 10} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p2.dup := 0;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  $p3.dup := 0;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($add.ref($p3,$mul.ref(0,16)),$mul.ref(0,1));
  $p4.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:verifier.code 0} true;
  $p4.dup := 0;
  $M.91 := $store.i64($M.91,$p4,$i0);
  $M.91.dup := $store.i1($M.91.dup,$p4,$i0.dup);
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p3,$mul.ref(0,16)),$mul.ref(8,1));
  $p5.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:verifier.code 0} true;
  $p5.dup := 0;
  $M.91 := $store.i64($M.91,$p5,$i1);
  $M.91.dup := $store.i1($M.91.dup,$p5,$i1.dup);
  assume {:verifier.code 0} true;
  $p2.dup := 0;
  $i6 := $load.i128($M.91,$p2);
  $i6.dup := 0;
  call {:cexpr "x"} boogie_si_record_i128($i6);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 103, 10} true;
  assume {:verifier.code 0} true;
  $i7 := $trunc.i128.i64($i6);
  $i7.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 103, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $r.dup := 0;
  $exn := false;
  $exn.dup := false;
  return;
}
const FStar_UInt128_shift_right: ref;
axiom (FStar_UInt128_shift_right == $sub.ref(0,8256));
procedure {:inline 1} FStar_UInt128_shift_right($i0: i64, $i0.dup: i1, $i1: i64, $i1.dup: i1, $i2: i32, $i2.dup: i1) returns ($r: ref, $r.dup: i1)
modifies $M.92, $M.93, $exn;
modifies $CurrAddr;
{
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $i8: i128;
  var $i8.dup: i1;
  var $i9: i128;
  var $i9.dup: i1;
  var $i10: i128;
  var $i10.dup: i1;
  var $p11: ref;
  var $p11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
  var $i13: i64;
  var $i13.dup: i1;
  var $p14: ref;
  var $p14.dup: i1;
  var $p15: ref;
  var $p15.dup: i1;
  var $i16: i64;
  var $i16.dup: i1;
  var $p17: ref;
  var $p17.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 12} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p3.dup := 0;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p4.dup := 0;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p4);
  $p5.dup := 0;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p5,$mul.ref(0,16)),$mul.ref(0,1));
  $p6.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:verifier.code 0} true;
  $p6.dup := 0;
  $M.92 := $store.i64($M.92,$p6,$i0);
  $M.92.dup := $store.i1($M.92.dup,$p6,$i0.dup);
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p5,$mul.ref(0,16)),$mul.ref(8,1));
  $p7.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:verifier.code 0} true;
  $p7.dup := 0;
  $M.92 := $store.i64($M.92,$p7,$i1);
  $M.92.dup := $store.i1($M.92.dup,$p7,$i1.dup);
  assume {:verifier.code 0} true;
  $p4.dup := 0;
  $i8 := $load.i128($M.92,$p4);
  $i8.dup := 0;
  call {:cexpr "x"} boogie_si_record_i128($i8);
  call {:cexpr "FStar_UInt128_shift_right:arg:y"} boogie_si_record_i32($i2);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 12} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i32.i128($i2);
  $i9.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 12} true;
  assume {:verifier.code 0} true;
  $i10 := $lshr.i128($i8,$i9);
  $i10.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  assume {:verifier.code 0} true;
  $p3.dup := 0;
  $M.93 := $store.i128($M.93,$p3,$i10);
  $M.93.dup := $store.i1($M.93.dup,$p3,$i10.dup);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  assume {:verifier.code 0} true;
  $p11 := $bitcast.ref.ref($p3);
  $p11.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  $p12 := $add.ref($add.ref($p11,$mul.ref(0,16)),$mul.ref(0,1));
  $p12.dup := $or.i1($or.i1($p11.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  $p12.dup := 0;
  $i13 := $load.i64($M.93,$p12);
  $i13.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  assume ($extractvalue.i64($p14,1) == $extractvalue.i64($u0,1));
  assume ($extractvalue.i64($p14,0) == $i13);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  $p15 := $add.ref($add.ref($p11,$mul.ref(0,16)),$mul.ref(8,1));
  $p15.dup := $or.i1($or.i1($p11.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  $p15.dup := 0;
  $i16 := $load.i64($M.93,$p15);
  $i16.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  assume ($extractvalue.i64($p17,0) == $extractvalue.i64($p14,0));
  assume ($extractvalue.i64($p17,1) == $i16);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/fstar_uint128_gcc64.h", 95, 3} true;
  assume {:verifier.code 0} true;
  $r := $p17;
  $r.dup := 0;
  $exn := false;
  $exn.dup := false;
  return;
}
const Hacl_Curve25519_51_finv: ref;
axiom (Hacl_Curve25519_51_finv == $sub.ref(0,9288));
procedure {:inline 1} Hacl_Curve25519_51_finv($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1)
modifies $M.0, $exn;
modifies $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93;
modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85;
modifies $CurrAddr;
{
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $p8: ref;
  var $p8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $p10: ref;
  var $p10.dup: i1;
  var $p11: ref;
  var $p11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
  var $p13: ref;
  var $p13.dup: i1;
  var $p14: ref;
  var $p14.dup: i1;
  var $p15: ref;
  var $p15.dup: i1;
  var $p16: ref;
  var $p16.dup: i1;
  var $p17: ref;
  var $p17.dup: i1;
  var $p18: ref;
  var $p18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $p20: ref;
  var $p20.dup: i1;
  var $p21: ref;
  var $p21.dup: i1;
  var $p22: ref;
  var $p22.dup: i1;
  var $p23: ref;
  var $p23.dup: i1;
  var $p24: ref;
  var $p24.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 176, 12} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(160,$zext.i32.i64(1)));
  $p3.dup := 0;
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 176, 12} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  $p4.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 176, 12} true;
  assume {:verifier.code 0} true;
  $p4.dup := 0;
  call $M.0, $M.0.dup := $memset.i8($M.0, $M.0.dup, $p4, $p4.dup, 0, 0, 160, 0, false, false);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 177, 18} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,8));
  $p5.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 178, 18} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,8));
  $p6.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  $p7 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(5,8));
  $p7.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 179, 20} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,8));
  $p8.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  $p9 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(15,8));
  $p9.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 181, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_fsquare_times($p5, $p5.dup, $p1, $p1.dup, $p2, $p2.dup, 1, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 182, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_fsquare_times($p9, $p9.dup, $p5, $p5.dup, $p2, $p2.dup, 2, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 183, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p7, $p7.dup, $p9, $p9.dup, $p1, $p1.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 184, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p5, $p5.dup, $p7, $p7.dup, $p5, $p5.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 185, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_fsquare_times($p9, $p9.dup, $p5, $p5.dup, $p2, $p2.dup, 1, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 186, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p7, $p7.dup, $p9, $p9.dup, $p7, $p7.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 187, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_fsquare_times($p9, $p9.dup, $p7, $p7.dup, $p2, $p2.dup, 5, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 188, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p7, $p7.dup, $p9, $p9.dup, $p7, $p7.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 189, 19} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,8));
  $p10.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  $p11 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(5,8));
  $p11.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 190, 19} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,8));
  $p12.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  $p13 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(10,8));
  $p13.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 191, 20} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,8));
  $p14.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  $p15 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(15,8));
  $p15.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 193, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_fsquare_times($p15, $p15.dup, $p11, $p11.dup, $p2, $p2.dup, 10, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 194, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p13, $p13.dup, $p15, $p15.dup, $p11, $p11.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 195, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_fsquare_times($p15, $p15.dup, $p13, $p13.dup, $p2, $p2.dup, 20, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 196, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p15, $p15.dup, $p15, $p15.dup, $p13, $p13.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 197, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_fsquare_times($p15, $p15.dup, $p15, $p15.dup, $p2, $p2.dup, 10, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 198, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p11, $p11.dup, $p15, $p15.dup, $p11, $p11.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 199, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_fsquare_times($p15, $p15.dup, $p11, $p11.dup, $p2, $p2.dup, 50, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 200, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p13, $p13.dup, $p15, $p15.dup, $p11, $p11.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 201, 19} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,8));
  $p16.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  $p17 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(5,8));
  $p17.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 202, 18} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,8));
  $p18.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  $p19 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(10,8));
  $p19.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 203, 19} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,8));
  $p20.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  $p21 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(15,8));
  $p21.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 205, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_fsquare_times($p21, $p21.dup, $p19, $p19.dup, $p2, $p2.dup, 100, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 206, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p21, $p21.dup, $p21, $p21.dup, $p19, $p19.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 207, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_fsquare_times($p21, $p21.dup, $p21, $p21.dup, $p2, $p2.dup, 50, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 208, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p21, $p21.dup, $p21, $p21.dup, $p17, $p17.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 209, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_fsquare_times($p21, $p21.dup, $p21, $p21.dup, $p2, $p2.dup, 5, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 210, 17} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,8));
  $p22.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 211, 18} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,8));
  $p23.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  $p24 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(15,8));
  $p24.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 212, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p0, $p0.dup, $p24, $p24.dup, $p22, $p22.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 213, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const llvm.dbg.declare: ref;
axiom (llvm.dbg.declare == $sub.ref(0,10320));
procedure {:inline 1} llvm.dbg.declare($p0: ref, $p1: ref, $p2: ref);
const llvm.memset.p0i8.i64: ref;
axiom (llvm.memset.p0i8.i64 == $sub.ref(0,11352));
procedure {:inline 1} llvm.memset.p0i8.i64($p0: ref, $p0.dup: i1, $i1: i8, $i1.dup: i1, $i2: i64, $i2.dup: i1, $i3: i1, $i3.dup: i1);
const Hacl_Impl_Curve25519_Field51_fmul: ref;
axiom (Hacl_Impl_Curve25519_Field51_fmul == $sub.ref(0,12384));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fmul($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1, $p3: ref, $p3.dup: i1)
modifies $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.0, $exn;
modifies $M.86;
modifies $M.87, $M.88, $M.89;
modifies $M.90;
modifies $M.91;
modifies $M.92, $M.93;
modifies $CurrAddr;
{
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $p8: ref;
  var $p8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $p10: ref;
  var $p10.dup: i1;
  var $p11: ref;
  var $p11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
  var $p13: ref;
  var $p13.dup: i1;
  var $p14: ref;
  var $p14.dup: i1;
  var $p15: ref;
  var $p15.dup: i1;
  var $p16: ref;
  var $p16.dup: i1;
  var $p17: ref;
  var $p17.dup: i1;
  var $p18: ref;
  var $p18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $p20: ref;
  var $p20.dup: i1;
  var $p21: ref;
  var $p21.dup: i1;
  var $p22: ref;
  var $p22.dup: i1;
  var $p23: ref;
  var $p23.dup: i1;
  var $p24: ref;
  var $p24.dup: i1;
  var $p25: ref;
  var $p25.dup: i1;
  var $p26: ref;
  var $p26.dup: i1;
  var $p27: ref;
  var $p27.dup: i1;
  var $p28: ref;
  var $p28.dup: i1;
  var $p29: ref;
  var $p29.dup: i1;
  var $p30: ref;
  var $p30.dup: i1;
  var $p31: ref;
  var $p31.dup: i1;
  var $p32: ref;
  var $p32.dup: i1;
  var $p33: ref;
  var $p33.dup: i1;
  var $p34: ref;
  var $p34.dup: i1;
  var $p35: ref;
  var $p35.dup: i1;
  var $p36: ref;
  var $p36.dup: i1;
  var $p37: ref;
  var $p37.dup: i1;
  var $p38: ref;
  var $p38.dup: i1;
  var $p39: ref;
  var $p39.dup: i1;
  var $p40: ref;
  var $p40.dup: i1;
  var $p41: ref;
  var $p41.dup: i1;
  var $p42: ref;
  var $p42.dup: i1;
  var $p43: ref;
  var $p43.dup: i1;
  var $p44: ref;
  var $p44.dup: i1;
  var $p45: ref;
  var $p45.dup: i1;
  var $p46: ref;
  var $p46.dup: i1;
  var $p47: ref;
  var $p47.dup: i1;
  var $p48: ref;
  var $p48.dup: i1;
  var $p49: ref;
  var $p49.dup: i1;
  var $p50: ref;
  var $p50.dup: i1;
  var $p51: ref;
  var $p51.dup: i1;
  var $p52: ref;
  var $p52.dup: i1;
  var $p53: ref;
  var $p53.dup: i1;
  var $p54: ref;
  var $p54.dup: i1;
  var $p55: ref;
  var $p55.dup: i1;
  var $p56: ref;
  var $p56.dup: i1;
  var $p57: ref;
  var $p57.dup: i1;
  var $p58: ref;
  var $p58.dup: i1;
  var $p59: ref;
  var $p59.dup: i1;
  var $p60: ref;
  var $p60.dup: i1;
  var $p61: ref;
  var $p61.dup: i1;
  var $p62: ref;
  var $p62.dup: i1;
  var $p63: ref;
  var $p63.dup: i1;
  var $p64: ref;
  var $p64.dup: i1;
  var $p65: ref;
  var $p65.dup: i1;
  var $p66: ref;
  var $p66.dup: i1;
  var $p67: ref;
  var $p67.dup: i1;
  var $p68: ref;
  var $p68.dup: i1;
  var $p69: ref;
  var $p69.dup: i1;
  var $p70: ref;
  var $p70.dup: i1;
  var $p71: ref;
  var $p71.dup: i1;
  var $p72: ref;
  var $p72.dup: i1;
  var $p73: ref;
  var $p73.dup: i1;
  var $p74: ref;
  var $p74.dup: i1;
  var $p75: ref;
  var $p75.dup: i1;
  var $p76: ref;
  var $p76.dup: i1;
  var $p77: ref;
  var $p77.dup: i1;
  var $p78: ref;
  var $p78.dup: i1;
  var $p79: ref;
  var $p79.dup: i1;
  var $p80: ref;
  var $p80.dup: i1;
  var $p81: ref;
  var $p81.dup: i1;
  var $p82: ref;
  var $p82.dup: i1;
  var $p83: ref;
  var $p83.dup: i1;
  var $p84: ref;
  var $p84.dup: i1;
  var $p85: ref;
  var $p85.dup: i1;
  var $p86: ref;
  var $p86.dup: i1;
  var $p87: ref;
  var $p87.dup: i1;
  var $p88: ref;
  var $p88.dup: i1;
  var $p89: ref;
  var $p89.dup: i1;
  var $p90: ref;
  var $p90.dup: i1;
  var $p91: ref;
  var $p91.dup: i1;
  var $p92: ref;
  var $p92.dup: i1;
  var $p93: ref;
  var $p93.dup: i1;
  var $p94: ref;
  var $p94.dup: i1;
  var $p95: ref;
  var $p95.dup: i1;
  var $p96: ref;
  var $p96.dup: i1;
  var $p97: ref;
  var $p97.dup: i1;
  var $p98: ref;
  var $p98.dup: i1;
  var $p99: ref;
  var $p99.dup: i1;
  var $p100: ref;
  var $p100.dup: i1;
  var $p101: ref;
  var $p101.dup: i1;
  var $p102: ref;
  var $p102.dup: i1;
  var $p103: ref;
  var $p103.dup: i1;
  var $p104: ref;
  var $p104.dup: i1;
  var $p105: ref;
  var $p105.dup: i1;
  var $p106: ref;
  var $p106.dup: i1;
  var $p107: ref;
  var $p107.dup: i1;
  var $p108: ref;
  var $p108.dup: i1;
  var $p109: ref;
  var $p109.dup: i1;
  var $p110: ref;
  var $p110.dup: i1;
  var $p111: ref;
  var $p111.dup: i1;
  var $p112: ref;
  var $p112.dup: i1;
  var $p113: ref;
  var $p113.dup: i1;
  var $p114: ref;
  var $p114.dup: i1;
  var $p115: ref;
  var $p115.dup: i1;
  var $p116: ref;
  var $p116.dup: i1;
  var $p117: ref;
  var $p117.dup: i1;
  var $p118: ref;
  var $p118.dup: i1;
  var $p119: ref;
  var $p119.dup: i1;
  var $p120: ref;
  var $p120.dup: i1;
  var $p121: ref;
  var $p121.dup: i1;
  var $p122: ref;
  var $p122.dup: i1;
  var $p123: ref;
  var $p123.dup: i1;
  var $p124: ref;
  var $p124.dup: i1;
  var $p125: ref;
  var $p125.dup: i1;
  var $p126: ref;
  var $p126.dup: i1;
  var $p127: ref;
  var $p127.dup: i1;
  var $p128: ref;
  var $p128.dup: i1;
  var $p129: ref;
  var $p129.dup: i1;
  var $i130: i64;
  var $i130.dup: i1;
  var $p131: ref;
  var $p131.dup: i1;
  var $i132: i64;
  var $i132.dup: i1;
  var $p133: ref;
  var $p133.dup: i1;
  var $i134: i64;
  var $i134.dup: i1;
  var $p135: ref;
  var $p135.dup: i1;
  var $i136: i64;
  var $i136.dup: i1;
  var $p137: ref;
  var $p137.dup: i1;
  var $i138: i64;
  var $i138.dup: i1;
  var $p139: ref;
  var $p139.dup: i1;
  var $i140: i64;
  var $i140.dup: i1;
  var $p141: ref;
  var $p141.dup: i1;
  var $i142: i64;
  var $i142.dup: i1;
  var $p143: ref;
  var $p143.dup: i1;
  var $i144: i64;
  var $i144.dup: i1;
  var $p145: ref;
  var $p145.dup: i1;
  var $i146: i64;
  var $i146.dup: i1;
  var $p147: ref;
  var $p147.dup: i1;
  var $i148: i64;
  var $i148.dup: i1;
  var $i149: i64;
  var $i149.dup: i1;
  var $i150: i64;
  var $i150.dup: i1;
  var $i151: i64;
  var $i151.dup: i1;
  var $i152: i64;
  var $i152.dup: i1;
  var $p153: ref;
  var $p153.dup: i1;
  var $p154: ref;
  var $p154.dup: i1;
  var $p155: ref;
  var $p155.dup: i1;
  var $i156: i64;
  var $i156.dup: i1;
  var $p157: ref;
  var $p157.dup: i1;
  var $i158: i64;
  var $i158.dup: i1;
  var $i159: i128;
  var $i159.dup: i1;
  var $p160: ref;
  var $p160.dup: i1;
  var $p161: ref;
  var $p161.dup: i1;
  var $p162: ref;
  var $p162.dup: i1;
  var $i163: i64;
  var $i163.dup: i1;
  var $p164: ref;
  var $p164.dup: i1;
  var $i165: i64;
  var $i165.dup: i1;
  var $i166: i128;
  var $i166.dup: i1;
  var $p167: ref;
  var $p167.dup: i1;
  var $p168: ref;
  var $p168.dup: i1;
  var $p169: ref;
  var $p169.dup: i1;
  var $i170: i64;
  var $i170.dup: i1;
  var $p171: ref;
  var $p171.dup: i1;
  var $i172: i64;
  var $i172.dup: i1;
  var $i173: i128;
  var $i173.dup: i1;
  var $p174: ref;
  var $p174.dup: i1;
  var $p175: ref;
  var $p175.dup: i1;
  var $p176: ref;
  var $p176.dup: i1;
  var $i177: i64;
  var $i177.dup: i1;
  var $p178: ref;
  var $p178.dup: i1;
  var $i179: i64;
  var $i179.dup: i1;
  var $i180: i128;
  var $i180.dup: i1;
  var $p181: ref;
  var $p181.dup: i1;
  var $p182: ref;
  var $p182.dup: i1;
  var $p183: ref;
  var $p183.dup: i1;
  var $i184: i64;
  var $i184.dup: i1;
  var $p185: ref;
  var $p185.dup: i1;
  var $i186: i64;
  var $i186.dup: i1;
  var $i187: i128;
  var $i187.dup: i1;
  var $p188: ref;
  var $p188.dup: i1;
  var $p189: ref;
  var $p189.dup: i1;
  var $p190: ref;
  var $p190.dup: i1;
  var $i191: i64;
  var $i191.dup: i1;
  var $p192: ref;
  var $p192.dup: i1;
  var $i193: i64;
  var $i193.dup: i1;
  var $i194: i128;
  var $i194.dup: i1;
  var $p195: ref;
  var $p195.dup: i1;
  var $p196: ref;
  var $p196.dup: i1;
  var $i197: i64;
  var $i197.dup: i1;
  var $p198: ref;
  var $p198.dup: i1;
  var $i199: i64;
  var $i199.dup: i1;
  var $p200: ref;
  var $p200.dup: i1;
  var $p201: ref;
  var $p201.dup: i1;
  var $i202: i64;
  var $i202.dup: i1;
  var $p203: ref;
  var $p203.dup: i1;
  var $i204: i64;
  var $i204.dup: i1;
  var $p205: ref;
  var $p205.dup: i1;
  var $p206: ref;
  var $p206.dup: i1;
  var $p207: ref;
  var $p207.dup: i1;
  var $i208: i64;
  var $i208.dup: i1;
  var $p209: ref;
  var $p209.dup: i1;
  var $i210: i64;
  var $i210.dup: i1;
  var $i211: i128;
  var $i211.dup: i1;
  var $p212: ref;
  var $p212.dup: i1;
  var $p213: ref;
  var $p213.dup: i1;
  var $p214: ref;
  var $p214.dup: i1;
  var $i215: i64;
  var $i215.dup: i1;
  var $p216: ref;
  var $p216.dup: i1;
  var $i217: i64;
  var $i217.dup: i1;
  var $i218: i128;
  var $i218.dup: i1;
  var $p219: ref;
  var $p219.dup: i1;
  var $p220: ref;
  var $p220.dup: i1;
  var $i221: i64;
  var $i221.dup: i1;
  var $p222: ref;
  var $p222.dup: i1;
  var $i223: i64;
  var $i223.dup: i1;
  var $p224: ref;
  var $p224.dup: i1;
  var $p225: ref;
  var $p225.dup: i1;
  var $i226: i64;
  var $i226.dup: i1;
  var $p227: ref;
  var $p227.dup: i1;
  var $i228: i64;
  var $i228.dup: i1;
  var $p229: ref;
  var $p229.dup: i1;
  var $p230: ref;
  var $p230.dup: i1;
  var $p231: ref;
  var $p231.dup: i1;
  var $i232: i64;
  var $i232.dup: i1;
  var $p233: ref;
  var $p233.dup: i1;
  var $i234: i64;
  var $i234.dup: i1;
  var $i235: i128;
  var $i235.dup: i1;
  var $p236: ref;
  var $p236.dup: i1;
  var $p237: ref;
  var $p237.dup: i1;
  var $p238: ref;
  var $p238.dup: i1;
  var $i239: i64;
  var $i239.dup: i1;
  var $p240: ref;
  var $p240.dup: i1;
  var $i241: i64;
  var $i241.dup: i1;
  var $i242: i128;
  var $i242.dup: i1;
  var $p243: ref;
  var $p243.dup: i1;
  var $p244: ref;
  var $p244.dup: i1;
  var $i245: i64;
  var $i245.dup: i1;
  var $p246: ref;
  var $p246.dup: i1;
  var $i247: i64;
  var $i247.dup: i1;
  var $p248: ref;
  var $p248.dup: i1;
  var $p249: ref;
  var $p249.dup: i1;
  var $i250: i64;
  var $i250.dup: i1;
  var $p251: ref;
  var $p251.dup: i1;
  var $i252: i64;
  var $i252.dup: i1;
  var $p253: ref;
  var $p253.dup: i1;
  var $p254: ref;
  var $p254.dup: i1;
  var $p255: ref;
  var $p255.dup: i1;
  var $i256: i64;
  var $i256.dup: i1;
  var $p257: ref;
  var $p257.dup: i1;
  var $i258: i64;
  var $i258.dup: i1;
  var $i259: i128;
  var $i259.dup: i1;
  var $p260: ref;
  var $p260.dup: i1;
  var $p261: ref;
  var $p261.dup: i1;
  var $p262: ref;
  var $p262.dup: i1;
  var $i263: i64;
  var $i263.dup: i1;
  var $p264: ref;
  var $p264.dup: i1;
  var $i265: i64;
  var $i265.dup: i1;
  var $i266: i128;
  var $i266.dup: i1;
  var $p267: ref;
  var $p267.dup: i1;
  var $p268: ref;
  var $p268.dup: i1;
  var $i269: i64;
  var $i269.dup: i1;
  var $p270: ref;
  var $p270.dup: i1;
  var $i271: i64;
  var $i271.dup: i1;
  var $p272: ref;
  var $p272.dup: i1;
  var $p273: ref;
  var $p273.dup: i1;
  var $i274: i64;
  var $i274.dup: i1;
  var $p275: ref;
  var $p275.dup: i1;
  var $i276: i64;
  var $i276.dup: i1;
  var $p277: ref;
  var $p277.dup: i1;
  var $p278: ref;
  var $p278.dup: i1;
  var $p279: ref;
  var $p279.dup: i1;
  var $i280: i64;
  var $i280.dup: i1;
  var $p281: ref;
  var $p281.dup: i1;
  var $i282: i64;
  var $i282.dup: i1;
  var $i283: i128;
  var $i283.dup: i1;
  var $p284: ref;
  var $p284.dup: i1;
  var $p285: ref;
  var $p285.dup: i1;
  var $p286: ref;
  var $p286.dup: i1;
  var $i287: i64;
  var $i287.dup: i1;
  var $p288: ref;
  var $p288.dup: i1;
  var $i289: i64;
  var $i289.dup: i1;
  var $i290: i128;
  var $i290.dup: i1;
  var $p291: ref;
  var $p291.dup: i1;
  var $p292: ref;
  var $p292.dup: i1;
  var $i293: i64;
  var $i293.dup: i1;
  var $p294: ref;
  var $p294.dup: i1;
  var $i295: i64;
  var $i295.dup: i1;
  var $p296: ref;
  var $p296.dup: i1;
  var $p297: ref;
  var $p297.dup: i1;
  var $i298: i64;
  var $i298.dup: i1;
  var $p299: ref;
  var $p299.dup: i1;
  var $i300: i64;
  var $i300.dup: i1;
  var $p301: ref;
  var $p301.dup: i1;
  var $p302: ref;
  var $p302.dup: i1;
  var $p303: ref;
  var $p303.dup: i1;
  var $i304: i64;
  var $i304.dup: i1;
  var $p305: ref;
  var $p305.dup: i1;
  var $i306: i64;
  var $i306.dup: i1;
  var $i307: i128;
  var $i307.dup: i1;
  var $p308: ref;
  var $p308.dup: i1;
  var $p309: ref;
  var $p309.dup: i1;
  var $p310: ref;
  var $p310.dup: i1;
  var $i311: i64;
  var $i311.dup: i1;
  var $p312: ref;
  var $p312.dup: i1;
  var $i313: i64;
  var $i313.dup: i1;
  var $i314: i128;
  var $i314.dup: i1;
  var $p315: ref;
  var $p315.dup: i1;
  var $p316: ref;
  var $p316.dup: i1;
  var $i317: i64;
  var $i317.dup: i1;
  var $p318: ref;
  var $p318.dup: i1;
  var $i319: i64;
  var $i319.dup: i1;
  var $p320: ref;
  var $p320.dup: i1;
  var $p321: ref;
  var $p321.dup: i1;
  var $i322: i64;
  var $i322.dup: i1;
  var $p323: ref;
  var $p323.dup: i1;
  var $i324: i64;
  var $i324.dup: i1;
  var $p325: ref;
  var $p325.dup: i1;
  var $p326: ref;
  var $p326.dup: i1;
  var $p327: ref;
  var $p327.dup: i1;
  var $i328: i64;
  var $i328.dup: i1;
  var $p329: ref;
  var $p329.dup: i1;
  var $i330: i64;
  var $i330.dup: i1;
  var $i331: i128;
  var $i331.dup: i1;
  var $p332: ref;
  var $p332.dup: i1;
  var $p333: ref;
  var $p333.dup: i1;
  var $p334: ref;
  var $p334.dup: i1;
  var $i335: i64;
  var $i335.dup: i1;
  var $p336: ref;
  var $p336.dup: i1;
  var $i337: i64;
  var $i337.dup: i1;
  var $i338: i128;
  var $i338.dup: i1;
  var $p339: ref;
  var $p339.dup: i1;
  var $p340: ref;
  var $p340.dup: i1;
  var $i341: i64;
  var $i341.dup: i1;
  var $p342: ref;
  var $p342.dup: i1;
  var $i343: i64;
  var $i343.dup: i1;
  var $p344: ref;
  var $p344.dup: i1;
  var $p345: ref;
  var $p345.dup: i1;
  var $i346: i64;
  var $i346.dup: i1;
  var $p347: ref;
  var $p347.dup: i1;
  var $i348: i64;
  var $i348.dup: i1;
  var $p349: ref;
  var $p349.dup: i1;
  var $p350: ref;
  var $p350.dup: i1;
  var $p351: ref;
  var $p351.dup: i1;
  var $i352: i64;
  var $i352.dup: i1;
  var $p353: ref;
  var $p353.dup: i1;
  var $i354: i64;
  var $i354.dup: i1;
  var $i355: i128;
  var $i355.dup: i1;
  var $p356: ref;
  var $p356.dup: i1;
  var $p357: ref;
  var $p357.dup: i1;
  var $p358: ref;
  var $p358.dup: i1;
  var $i359: i64;
  var $i359.dup: i1;
  var $p360: ref;
  var $p360.dup: i1;
  var $i361: i64;
  var $i361.dup: i1;
  var $i362: i128;
  var $i362.dup: i1;
  var $p363: ref;
  var $p363.dup: i1;
  var $p364: ref;
  var $p364.dup: i1;
  var $i365: i64;
  var $i365.dup: i1;
  var $p366: ref;
  var $p366.dup: i1;
  var $i367: i64;
  var $i367.dup: i1;
  var $p368: ref;
  var $p368.dup: i1;
  var $p369: ref;
  var $p369.dup: i1;
  var $i370: i64;
  var $i370.dup: i1;
  var $p371: ref;
  var $p371.dup: i1;
  var $i372: i64;
  var $i372.dup: i1;
  var $p373: ref;
  var $p373.dup: i1;
  var $p374: ref;
  var $p374.dup: i1;
  var $p375: ref;
  var $p375.dup: i1;
  var $i376: i64;
  var $i376.dup: i1;
  var $p377: ref;
  var $p377.dup: i1;
  var $i378: i64;
  var $i378.dup: i1;
  var $i379: i128;
  var $i379.dup: i1;
  var $p380: ref;
  var $p380.dup: i1;
  var $p381: ref;
  var $p381.dup: i1;
  var $p382: ref;
  var $p382.dup: i1;
  var $i383: i64;
  var $i383.dup: i1;
  var $p384: ref;
  var $p384.dup: i1;
  var $i385: i64;
  var $i385.dup: i1;
  var $i386: i128;
  var $i386.dup: i1;
  var $p387: ref;
  var $p387.dup: i1;
  var $p388: ref;
  var $p388.dup: i1;
  var $i389: i64;
  var $i389.dup: i1;
  var $p390: ref;
  var $p390.dup: i1;
  var $i391: i64;
  var $i391.dup: i1;
  var $p392: ref;
  var $p392.dup: i1;
  var $p393: ref;
  var $p393.dup: i1;
  var $i394: i64;
  var $i394.dup: i1;
  var $p395: ref;
  var $p395.dup: i1;
  var $i396: i64;
  var $i396.dup: i1;
  var $p397: ref;
  var $p397.dup: i1;
  var $p398: ref;
  var $p398.dup: i1;
  var $p399: ref;
  var $p399.dup: i1;
  var $i400: i64;
  var $i400.dup: i1;
  var $p401: ref;
  var $p401.dup: i1;
  var $i402: i64;
  var $i402.dup: i1;
  var $i403: i128;
  var $i403.dup: i1;
  var $p404: ref;
  var $p404.dup: i1;
  var $p405: ref;
  var $p405.dup: i1;
  var $p406: ref;
  var $p406.dup: i1;
  var $i407: i64;
  var $i407.dup: i1;
  var $p408: ref;
  var $p408.dup: i1;
  var $i409: i64;
  var $i409.dup: i1;
  var $i410: i128;
  var $i410.dup: i1;
  var $p411: ref;
  var $p411.dup: i1;
  var $p412: ref;
  var $p412.dup: i1;
  var $i413: i64;
  var $i413.dup: i1;
  var $p414: ref;
  var $p414.dup: i1;
  var $i415: i64;
  var $i415.dup: i1;
  var $p416: ref;
  var $p416.dup: i1;
  var $p417: ref;
  var $p417.dup: i1;
  var $i418: i64;
  var $i418.dup: i1;
  var $p419: ref;
  var $p419.dup: i1;
  var $i420: i64;
  var $i420.dup: i1;
  var $p421: ref;
  var $p421.dup: i1;
  var $p422: ref;
  var $p422.dup: i1;
  var $p423: ref;
  var $p423.dup: i1;
  var $i424: i64;
  var $i424.dup: i1;
  var $p425: ref;
  var $p425.dup: i1;
  var $i426: i64;
  var $i426.dup: i1;
  var $i427: i128;
  var $i427.dup: i1;
  var $p428: ref;
  var $p428.dup: i1;
  var $p429: ref;
  var $p429.dup: i1;
  var $p430: ref;
  var $p430.dup: i1;
  var $i431: i64;
  var $i431.dup: i1;
  var $p432: ref;
  var $p432.dup: i1;
  var $i433: i64;
  var $i433.dup: i1;
  var $i434: i128;
  var $i434.dup: i1;
  var $p435: ref;
  var $p435.dup: i1;
  var $p436: ref;
  var $p436.dup: i1;
  var $i437: i64;
  var $i437.dup: i1;
  var $p438: ref;
  var $p438.dup: i1;
  var $i439: i64;
  var $i439.dup: i1;
  var $p440: ref;
  var $p440.dup: i1;
  var $p441: ref;
  var $p441.dup: i1;
  var $i442: i64;
  var $i442.dup: i1;
  var $p443: ref;
  var $p443.dup: i1;
  var $i444: i64;
  var $i444.dup: i1;
  var $p445: ref;
  var $p445.dup: i1;
  var $p446: ref;
  var $p446.dup: i1;
  var $p447: ref;
  var $p447.dup: i1;
  var $i448: i64;
  var $i448.dup: i1;
  var $p449: ref;
  var $p449.dup: i1;
  var $i450: i64;
  var $i450.dup: i1;
  var $i451: i128;
  var $i451.dup: i1;
  var $p452: ref;
  var $p452.dup: i1;
  var $p453: ref;
  var $p453.dup: i1;
  var $p454: ref;
  var $p454.dup: i1;
  var $i455: i64;
  var $i455.dup: i1;
  var $p456: ref;
  var $p456.dup: i1;
  var $i457: i64;
  var $i457.dup: i1;
  var $i458: i128;
  var $i458.dup: i1;
  var $p459: ref;
  var $p459.dup: i1;
  var $p460: ref;
  var $p460.dup: i1;
  var $i461: i64;
  var $i461.dup: i1;
  var $p462: ref;
  var $p462.dup: i1;
  var $i463: i64;
  var $i463.dup: i1;
  var $p464: ref;
  var $p464.dup: i1;
  var $p465: ref;
  var $p465.dup: i1;
  var $i466: i64;
  var $i466.dup: i1;
  var $p467: ref;
  var $p467.dup: i1;
  var $i468: i64;
  var $i468.dup: i1;
  var $p469: ref;
  var $p469.dup: i1;
  var $p470: ref;
  var $p470.dup: i1;
  var $p471: ref;
  var $p471.dup: i1;
  var $i472: i64;
  var $i472.dup: i1;
  var $p473: ref;
  var $p473.dup: i1;
  var $i474: i64;
  var $i474.dup: i1;
  var $i475: i128;
  var $i475.dup: i1;
  var $p476: ref;
  var $p476.dup: i1;
  var $p477: ref;
  var $p477.dup: i1;
  var $p478: ref;
  var $p478.dup: i1;
  var $i479: i64;
  var $i479.dup: i1;
  var $p480: ref;
  var $p480.dup: i1;
  var $i481: i64;
  var $i481.dup: i1;
  var $i482: i128;
  var $i482.dup: i1;
  var $p483: ref;
  var $p483.dup: i1;
  var $p484: ref;
  var $p484.dup: i1;
  var $i485: i64;
  var $i485.dup: i1;
  var $p486: ref;
  var $p486.dup: i1;
  var $i487: i64;
  var $i487.dup: i1;
  var $p488: ref;
  var $p488.dup: i1;
  var $p489: ref;
  var $p489.dup: i1;
  var $i490: i64;
  var $i490.dup: i1;
  var $p491: ref;
  var $p491.dup: i1;
  var $i492: i64;
  var $i492.dup: i1;
  var $p493: ref;
  var $p493.dup: i1;
  var $p494: ref;
  var $p494.dup: i1;
  var $p495: ref;
  var $p495.dup: i1;
  var $i496: i64;
  var $i496.dup: i1;
  var $p497: ref;
  var $p497.dup: i1;
  var $i498: i64;
  var $i498.dup: i1;
  var $i499: i128;
  var $i499.dup: i1;
  var $p500: ref;
  var $p500.dup: i1;
  var $p501: ref;
  var $p501.dup: i1;
  var $p502: ref;
  var $p502.dup: i1;
  var $i503: i64;
  var $i503.dup: i1;
  var $p504: ref;
  var $p504.dup: i1;
  var $i505: i64;
  var $i505.dup: i1;
  var $i506: i128;
  var $i506.dup: i1;
  var $p507: ref;
  var $p507.dup: i1;
  var $p508: ref;
  var $p508.dup: i1;
  var $i509: i64;
  var $i509.dup: i1;
  var $p510: ref;
  var $p510.dup: i1;
  var $i511: i64;
  var $i511.dup: i1;
  var $p512: ref;
  var $p512.dup: i1;
  var $p513: ref;
  var $p513.dup: i1;
  var $i514: i64;
  var $i514.dup: i1;
  var $p515: ref;
  var $p515.dup: i1;
  var $i516: i64;
  var $i516.dup: i1;
  var $p517: ref;
  var $p517.dup: i1;
  var $p518: ref;
  var $p518.dup: i1;
  var $p519: ref;
  var $p519.dup: i1;
  var $i520: i64;
  var $i520.dup: i1;
  var $p521: ref;
  var $p521.dup: i1;
  var $i522: i64;
  var $i522.dup: i1;
  var $i523: i128;
  var $i523.dup: i1;
  var $p524: ref;
  var $p524.dup: i1;
  var $p525: ref;
  var $p525.dup: i1;
  var $p526: ref;
  var $p526.dup: i1;
  var $i527: i64;
  var $i527.dup: i1;
  var $p528: ref;
  var $p528.dup: i1;
  var $i529: i64;
  var $i529.dup: i1;
  var $i530: i128;
  var $i530.dup: i1;
  var $p531: ref;
  var $p531.dup: i1;
  var $p532: ref;
  var $p532.dup: i1;
  var $i533: i64;
  var $i533.dup: i1;
  var $p534: ref;
  var $p534.dup: i1;
  var $i535: i64;
  var $i535.dup: i1;
  var $p536: ref;
  var $p536.dup: i1;
  var $p537: ref;
  var $p537.dup: i1;
  var $i538: i64;
  var $i538.dup: i1;
  var $p539: ref;
  var $p539.dup: i1;
  var $i540: i64;
  var $i540.dup: i1;
  var $p541: ref;
  var $p541.dup: i1;
  var $p542: ref;
  var $p542.dup: i1;
  var $p543: ref;
  var $p543.dup: i1;
  var $i544: i64;
  var $i544.dup: i1;
  var $p545: ref;
  var $p545.dup: i1;
  var $i546: i64;
  var $i546.dup: i1;
  var $i547: i128;
  var $i547.dup: i1;
  var $p548: ref;
  var $p548.dup: i1;
  var $p549: ref;
  var $p549.dup: i1;
  var $p550: ref;
  var $p550.dup: i1;
  var $i551: i64;
  var $i551.dup: i1;
  var $p552: ref;
  var $p552.dup: i1;
  var $i553: i64;
  var $i553.dup: i1;
  var $i554: i128;
  var $i554.dup: i1;
  var $p555: ref;
  var $p555.dup: i1;
  var $p556: ref;
  var $p556.dup: i1;
  var $i557: i64;
  var $i557.dup: i1;
  var $p558: ref;
  var $p558.dup: i1;
  var $i559: i64;
  var $i559.dup: i1;
  var $p560: ref;
  var $p560.dup: i1;
  var $p561: ref;
  var $p561.dup: i1;
  var $i562: i64;
  var $i562.dup: i1;
  var $p563: ref;
  var $p563.dup: i1;
  var $i564: i64;
  var $i564.dup: i1;
  var $p565: ref;
  var $p565.dup: i1;
  var $p566: ref;
  var $p566.dup: i1;
  var $p567: ref;
  var $p567.dup: i1;
  var $i568: i64;
  var $i568.dup: i1;
  var $p569: ref;
  var $p569.dup: i1;
  var $i570: i64;
  var $i570.dup: i1;
  var $i571: i128;
  var $i571.dup: i1;
  var $p572: ref;
  var $p572.dup: i1;
  var $p573: ref;
  var $p573.dup: i1;
  var $p574: ref;
  var $p574.dup: i1;
  var $i575: i64;
  var $i575.dup: i1;
  var $p576: ref;
  var $p576.dup: i1;
  var $i577: i64;
  var $i577.dup: i1;
  var $i578: i128;
  var $i578.dup: i1;
  var $p579: ref;
  var $p579.dup: i1;
  var $p580: ref;
  var $p580.dup: i1;
  var $i581: i64;
  var $i581.dup: i1;
  var $p582: ref;
  var $p582.dup: i1;
  var $i583: i64;
  var $i583.dup: i1;
  var $p584: ref;
  var $p584.dup: i1;
  var $p585: ref;
  var $p585.dup: i1;
  var $i586: i64;
  var $i586.dup: i1;
  var $p587: ref;
  var $p587.dup: i1;
  var $i588: i64;
  var $i588.dup: i1;
  var $p589: ref;
  var $p589.dup: i1;
  var $p590: ref;
  var $p590.dup: i1;
  var $p591: ref;
  var $p591.dup: i1;
  var $i592: i64;
  var $i592.dup: i1;
  var $p593: ref;
  var $p593.dup: i1;
  var $i594: i64;
  var $i594.dup: i1;
  var $i595: i128;
  var $i595.dup: i1;
  var $p596: ref;
  var $p596.dup: i1;
  var $p597: ref;
  var $p597.dup: i1;
  var $p598: ref;
  var $p598.dup: i1;
  var $i599: i64;
  var $i599.dup: i1;
  var $p600: ref;
  var $p600.dup: i1;
  var $i601: i64;
  var $i601.dup: i1;
  var $i602: i128;
  var $i602.dup: i1;
  var $p603: ref;
  var $p603.dup: i1;
  var $p604: ref;
  var $p604.dup: i1;
  var $i605: i64;
  var $i605.dup: i1;
  var $p606: ref;
  var $p606.dup: i1;
  var $i607: i64;
  var $i607.dup: i1;
  var $p608: ref;
  var $p608.dup: i1;
  var $p609: ref;
  var $p609.dup: i1;
  var $i610: i64;
  var $i610.dup: i1;
  var $p611: ref;
  var $p611.dup: i1;
  var $i612: i64;
  var $i612.dup: i1;
  var $p613: ref;
  var $p613.dup: i1;
  var $p614: ref;
  var $p614.dup: i1;
  var $p615: ref;
  var $p615.dup: i1;
  var $i616: i64;
  var $i616.dup: i1;
  var $p617: ref;
  var $p617.dup: i1;
  var $i618: i64;
  var $i618.dup: i1;
  var $i619: i128;
  var $i619.dup: i1;
  var $p620: ref;
  var $p620.dup: i1;
  var $p621: ref;
  var $p621.dup: i1;
  var $p622: ref;
  var $p622.dup: i1;
  var $i623: i64;
  var $i623.dup: i1;
  var $p624: ref;
  var $p624.dup: i1;
  var $i625: i64;
  var $i625.dup: i1;
  var $i626: i128;
  var $i626.dup: i1;
  var $p627: ref;
  var $p627.dup: i1;
  var $p628: ref;
  var $p628.dup: i1;
  var $i629: i64;
  var $i629.dup: i1;
  var $p630: ref;
  var $p630.dup: i1;
  var $i631: i64;
  var $i631.dup: i1;
  var $p632: ref;
  var $p632.dup: i1;
  var $p633: ref;
  var $p633.dup: i1;
  var $i634: i64;
  var $i634.dup: i1;
  var $p635: ref;
  var $p635.dup: i1;
  var $i636: i64;
  var $i636.dup: i1;
  var $p637: ref;
  var $p637.dup: i1;
  var $p638: ref;
  var $p638.dup: i1;
  var $p639: ref;
  var $p639.dup: i1;
  var $i640: i64;
  var $i640.dup: i1;
  var $p641: ref;
  var $p641.dup: i1;
  var $i642: i64;
  var $i642.dup: i1;
  var $i643: i128;
  var $i643.dup: i1;
  var $p644: ref;
  var $p644.dup: i1;
  var $p645: ref;
  var $p645.dup: i1;
  var $p646: ref;
  var $p646.dup: i1;
  var $i647: i64;
  var $i647.dup: i1;
  var $p648: ref;
  var $p648.dup: i1;
  var $i649: i64;
  var $i649.dup: i1;
  var $i650: i128;
  var $i650.dup: i1;
  var $p651: ref;
  var $p651.dup: i1;
  var $p652: ref;
  var $p652.dup: i1;
  var $i653: i64;
  var $i653.dup: i1;
  var $p654: ref;
  var $p654.dup: i1;
  var $i655: i64;
  var $i655.dup: i1;
  var $p656: ref;
  var $p656.dup: i1;
  var $p657: ref;
  var $p657.dup: i1;
  var $i658: i64;
  var $i658.dup: i1;
  var $p659: ref;
  var $p659.dup: i1;
  var $i660: i64;
  var $i660.dup: i1;
  var $p661: ref;
  var $p661.dup: i1;
  var $p662: ref;
  var $p662.dup: i1;
  var $p663: ref;
  var $p663.dup: i1;
  var $i664: i64;
  var $i664.dup: i1;
  var $p665: ref;
  var $p665.dup: i1;
  var $i666: i64;
  var $i666.dup: i1;
  var $i667: i128;
  var $i667.dup: i1;
  var $p668: ref;
  var $p668.dup: i1;
  var $p669: ref;
  var $p669.dup: i1;
  var $p670: ref;
  var $p670.dup: i1;
  var $i671: i64;
  var $i671.dup: i1;
  var $p672: ref;
  var $p672.dup: i1;
  var $i673: i64;
  var $i673.dup: i1;
  var $i674: i128;
  var $i674.dup: i1;
  var $p675: ref;
  var $p675.dup: i1;
  var $p676: ref;
  var $p676.dup: i1;
  var $i677: i64;
  var $i677.dup: i1;
  var $p678: ref;
  var $p678.dup: i1;
  var $i679: i64;
  var $i679.dup: i1;
  var $p680: ref;
  var $p680.dup: i1;
  var $p681: ref;
  var $p681.dup: i1;
  var $i682: i64;
  var $i682.dup: i1;
  var $p683: ref;
  var $p683.dup: i1;
  var $i684: i64;
  var $i684.dup: i1;
  var $p685: ref;
  var $p685.dup: i1;
  var $p686: ref;
  var $p686.dup: i1;
  var $p687: ref;
  var $p687.dup: i1;
  var $i688: i64;
  var $i688.dup: i1;
  var $p689: ref;
  var $p689.dup: i1;
  var $i690: i64;
  var $i690.dup: i1;
  var $i691: i128;
  var $i691.dup: i1;
  var $p692: ref;
  var $p692.dup: i1;
  var $p693: ref;
  var $p693.dup: i1;
  var $i694: i64;
  var $i694.dup: i1;
  var $p695: ref;
  var $p695.dup: i1;
  var $i696: i64;
  var $i696.dup: i1;
  var $i697: i64;
  var $i697.dup: i1;
  var $i698: i64;
  var $i698.dup: i1;
  var $p699: ref;
  var $p699.dup: i1;
  var $p700: ref;
  var $p700.dup: i1;
  var $i701: i64;
  var $i701.dup: i1;
  var $p702: ref;
  var $p702.dup: i1;
  var $i703: i64;
  var $i703.dup: i1;
  var $p704: ref;
  var $p704.dup: i1;
  var $p705: ref;
  var $p705.dup: i1;
  var $p706: ref;
  var $p706.dup: i1;
  var $i707: i64;
  var $i707.dup: i1;
  var $p708: ref;
  var $p708.dup: i1;
  var $i709: i64;
  var $i709.dup: i1;
  var $i710: i128;
  var $i710.dup: i1;
  var $p711: ref;
  var $p711.dup: i1;
  var $p712: ref;
  var $p712.dup: i1;
  var $i713: i64;
  var $i713.dup: i1;
  var $p714: ref;
  var $p714.dup: i1;
  var $i715: i64;
  var $i715.dup: i1;
  var $i716: i64;
  var $i716.dup: i1;
  var $p717: ref;
  var $p717.dup: i1;
  var $p718: ref;
  var $p718.dup: i1;
  var $p719: ref;
  var $p719.dup: i1;
  var $i720: i64;
  var $i720.dup: i1;
  var $p721: ref;
  var $p721.dup: i1;
  var $i722: i64;
  var $i722.dup: i1;
  var $i723: i128;
  var $i723.dup: i1;
  var $p724: ref;
  var $p724.dup: i1;
  var $p725: ref;
  var $p725.dup: i1;
  var $i726: i64;
  var $i726.dup: i1;
  var $p727: ref;
  var $p727.dup: i1;
  var $i728: i64;
  var $i728.dup: i1;
  var $p729: ref;
  var $p729.dup: i1;
  var $p730: ref;
  var $p730.dup: i1;
  var $i731: i64;
  var $i731.dup: i1;
  var $p732: ref;
  var $p732.dup: i1;
  var $i733: i64;
  var $i733.dup: i1;
  var $p734: ref;
  var $p734.dup: i1;
  var $p735: ref;
  var $p735.dup: i1;
  var $p736: ref;
  var $p736.dup: i1;
  var $i737: i64;
  var $i737.dup: i1;
  var $p738: ref;
  var $p738.dup: i1;
  var $i739: i64;
  var $i739.dup: i1;
  var $i740: i128;
  var $i740.dup: i1;
  var $p741: ref;
  var $p741.dup: i1;
  var $p742: ref;
  var $p742.dup: i1;
  var $i743: i64;
  var $i743.dup: i1;
  var $p744: ref;
  var $p744.dup: i1;
  var $i745: i64;
  var $i745.dup: i1;
  var $i746: i64;
  var $i746.dup: i1;
  var $i747: i64;
  var $i747.dup: i1;
  var $p748: ref;
  var $p748.dup: i1;
  var $p749: ref;
  var $p749.dup: i1;
  var $i750: i64;
  var $i750.dup: i1;
  var $p751: ref;
  var $p751.dup: i1;
  var $i752: i64;
  var $i752.dup: i1;
  var $p753: ref;
  var $p753.dup: i1;
  var $p754: ref;
  var $p754.dup: i1;
  var $p755: ref;
  var $p755.dup: i1;
  var $i756: i64;
  var $i756.dup: i1;
  var $p757: ref;
  var $p757.dup: i1;
  var $i758: i64;
  var $i758.dup: i1;
  var $i759: i128;
  var $i759.dup: i1;
  var $p760: ref;
  var $p760.dup: i1;
  var $p761: ref;
  var $p761.dup: i1;
  var $i762: i64;
  var $i762.dup: i1;
  var $p763: ref;
  var $p763.dup: i1;
  var $i764: i64;
  var $i764.dup: i1;
  var $i765: i64;
  var $i765.dup: i1;
  var $p766: ref;
  var $p766.dup: i1;
  var $p767: ref;
  var $p767.dup: i1;
  var $p768: ref;
  var $p768.dup: i1;
  var $i769: i64;
  var $i769.dup: i1;
  var $p770: ref;
  var $p770.dup: i1;
  var $i771: i64;
  var $i771.dup: i1;
  var $i772: i128;
  var $i772.dup: i1;
  var $p773: ref;
  var $p773.dup: i1;
  var $p774: ref;
  var $p774.dup: i1;
  var $i775: i64;
  var $i775.dup: i1;
  var $p776: ref;
  var $p776.dup: i1;
  var $i777: i64;
  var $i777.dup: i1;
  var $p778: ref;
  var $p778.dup: i1;
  var $p779: ref;
  var $p779.dup: i1;
  var $i780: i64;
  var $i780.dup: i1;
  var $p781: ref;
  var $p781.dup: i1;
  var $i782: i64;
  var $i782.dup: i1;
  var $p783: ref;
  var $p783.dup: i1;
  var $p784: ref;
  var $p784.dup: i1;
  var $p785: ref;
  var $p785.dup: i1;
  var $i786: i64;
  var $i786.dup: i1;
  var $p787: ref;
  var $p787.dup: i1;
  var $i788: i64;
  var $i788.dup: i1;
  var $i789: i128;
  var $i789.dup: i1;
  var $p790: ref;
  var $p790.dup: i1;
  var $p791: ref;
  var $p791.dup: i1;
  var $i792: i64;
  var $i792.dup: i1;
  var $p793: ref;
  var $p793.dup: i1;
  var $i794: i64;
  var $i794.dup: i1;
  var $i795: i64;
  var $i795.dup: i1;
  var $i796: i64;
  var $i796.dup: i1;
  var $p797: ref;
  var $p797.dup: i1;
  var $p798: ref;
  var $p798.dup: i1;
  var $i799: i64;
  var $i799.dup: i1;
  var $p800: ref;
  var $p800.dup: i1;
  var $i801: i64;
  var $i801.dup: i1;
  var $p802: ref;
  var $p802.dup: i1;
  var $p803: ref;
  var $p803.dup: i1;
  var $p804: ref;
  var $p804.dup: i1;
  var $i805: i64;
  var $i805.dup: i1;
  var $p806: ref;
  var $p806.dup: i1;
  var $i807: i64;
  var $i807.dup: i1;
  var $i808: i128;
  var $i808.dup: i1;
  var $p809: ref;
  var $p809.dup: i1;
  var $p810: ref;
  var $p810.dup: i1;
  var $i811: i64;
  var $i811.dup: i1;
  var $p812: ref;
  var $p812.dup: i1;
  var $i813: i64;
  var $i813.dup: i1;
  var $i814: i64;
  var $i814.dup: i1;
  var $p815: ref;
  var $p815.dup: i1;
  var $p816: ref;
  var $p816.dup: i1;
  var $p817: ref;
  var $p817.dup: i1;
  var $i818: i64;
  var $i818.dup: i1;
  var $p819: ref;
  var $p819.dup: i1;
  var $i820: i64;
  var $i820.dup: i1;
  var $i821: i128;
  var $i821.dup: i1;
  var $p822: ref;
  var $p822.dup: i1;
  var $p823: ref;
  var $p823.dup: i1;
  var $i824: i64;
  var $i824.dup: i1;
  var $p825: ref;
  var $p825.dup: i1;
  var $i826: i64;
  var $i826.dup: i1;
  var $p827: ref;
  var $p827.dup: i1;
  var $p828: ref;
  var $p828.dup: i1;
  var $i829: i64;
  var $i829.dup: i1;
  var $p830: ref;
  var $p830.dup: i1;
  var $i831: i64;
  var $i831.dup: i1;
  var $p832: ref;
  var $p832.dup: i1;
  var $p833: ref;
  var $p833.dup: i1;
  var $p834: ref;
  var $p834.dup: i1;
  var $i835: i64;
  var $i835.dup: i1;
  var $p836: ref;
  var $p836.dup: i1;
  var $i837: i64;
  var $i837.dup: i1;
  var $i838: i128;
  var $i838.dup: i1;
  var $p839: ref;
  var $p839.dup: i1;
  var $p840: ref;
  var $p840.dup: i1;
  var $i841: i64;
  var $i841.dup: i1;
  var $p842: ref;
  var $p842.dup: i1;
  var $i843: i64;
  var $i843.dup: i1;
  var $i844: i64;
  var $i844.dup: i1;
  var $i845: i64;
  var $i845.dup: i1;
  var $p846: ref;
  var $p846.dup: i1;
  var $p847: ref;
  var $p847.dup: i1;
  var $i848: i64;
  var $i848.dup: i1;
  var $p849: ref;
  var $p849.dup: i1;
  var $i850: i64;
  var $i850.dup: i1;
  var $p851: ref;
  var $p851.dup: i1;
  var $p852: ref;
  var $p852.dup: i1;
  var $p853: ref;
  var $p853.dup: i1;
  var $i854: i64;
  var $i854.dup: i1;
  var $p855: ref;
  var $p855.dup: i1;
  var $i856: i64;
  var $i856.dup: i1;
  var $i857: i128;
  var $i857.dup: i1;
  var $p858: ref;
  var $p858.dup: i1;
  var $p859: ref;
  var $p859.dup: i1;
  var $i860: i64;
  var $i860.dup: i1;
  var $p861: ref;
  var $p861.dup: i1;
  var $i862: i64;
  var $i862.dup: i1;
  var $i863: i64;
  var $i863.dup: i1;
  var $p864: ref;
  var $p864.dup: i1;
  var $p865: ref;
  var $p865.dup: i1;
  var $p866: ref;
  var $p866.dup: i1;
  var $i867: i64;
  var $i867.dup: i1;
  var $p868: ref;
  var $p868.dup: i1;
  var $i869: i64;
  var $i869.dup: i1;
  var $i870: i128;
  var $i870.dup: i1;
  var $p871: ref;
  var $p871.dup: i1;
  var $p872: ref;
  var $p872.dup: i1;
  var $i873: i64;
  var $i873.dup: i1;
  var $p874: ref;
  var $p874.dup: i1;
  var $i875: i64;
  var $i875.dup: i1;
  var $p876: ref;
  var $p876.dup: i1;
  var $p877: ref;
  var $p877.dup: i1;
  var $i878: i64;
  var $i878.dup: i1;
  var $p879: ref;
  var $p879.dup: i1;
  var $i880: i64;
  var $i880.dup: i1;
  var $p881: ref;
  var $p881.dup: i1;
  var $p882: ref;
  var $p882.dup: i1;
  var $p883: ref;
  var $p883.dup: i1;
  var $i884: i64;
  var $i884.dup: i1;
  var $p885: ref;
  var $p885.dup: i1;
  var $i886: i64;
  var $i886.dup: i1;
  var $i887: i128;
  var $i887.dup: i1;
  var $p888: ref;
  var $p888.dup: i1;
  var $p889: ref;
  var $p889.dup: i1;
  var $i890: i64;
  var $i890.dup: i1;
  var $p891: ref;
  var $p891.dup: i1;
  var $i892: i64;
  var $i892.dup: i1;
  var $i893: i64;
  var $i893.dup: i1;
  var $i894: i64;
  var $i894.dup: i1;
  var $p895: ref;
  var $p895.dup: i1;
  var $p896: ref;
  var $p896.dup: i1;
  var $i897: i64;
  var $i897.dup: i1;
  var $p898: ref;
  var $p898.dup: i1;
  var $i899: i64;
  var $i899.dup: i1;
  var $p900: ref;
  var $p900.dup: i1;
  var $p901: ref;
  var $p901.dup: i1;
  var $p902: ref;
  var $p902.dup: i1;
  var $i903: i64;
  var $i903.dup: i1;
  var $p904: ref;
  var $p904.dup: i1;
  var $i905: i64;
  var $i905.dup: i1;
  var $i906: i128;
  var $i906.dup: i1;
  var $p907: ref;
  var $p907.dup: i1;
  var $p908: ref;
  var $p908.dup: i1;
  var $i909: i64;
  var $i909.dup: i1;
  var $p910: ref;
  var $p910.dup: i1;
  var $i911: i64;
  var $i911.dup: i1;
  var $i912: i64;
  var $i912.dup: i1;
  var $i913: i64;
  var $i913.dup: i1;
  var $i914: i64;
  var $i914.dup: i1;
  var $i915: i64;
  var $i915.dup: i1;
  var $i916: i64;
  var $i916.dup: i1;
  var $i917: i64;
  var $i917.dup: i1;
  var $p918: ref;
  var $p918.dup: i1;
  var $p919: ref;
  var $p919.dup: i1;
  var $p920: ref;
  var $p920.dup: i1;
  var $p921: ref;
  var $p921.dup: i1;
  var $p922: ref;
  var $p922.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 87, 18} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p4.dup := 0;
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p5.dup := 0;
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p6.dup := 0;
  assume {:verifier.code 0} true;
  call $p7 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p7.dup := 0;
  assume {:verifier.code 0} true;
  call $p8 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p8.dup := 0;
  assume {:verifier.code 0} true;
  call $p9 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p9.dup := 0;
  assume {:verifier.code 0} true;
  call $p10 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p10.dup := 0;
  assume {:verifier.code 0} true;
  call $p11 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p11.dup := 0;
  assume {:verifier.code 0} true;
  call $p12 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p12.dup := 0;
  assume {:verifier.code 0} true;
  call $p13 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p13.dup := 0;
  assume {:verifier.code 0} true;
  call $p14 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p14.dup := 0;
  assume {:verifier.code 0} true;
  call $p15 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p15.dup := 0;
  assume {:verifier.code 0} true;
  call $p16 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p16.dup := 0;
  assume {:verifier.code 0} true;
  call $p17 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p17.dup := 0;
  assume {:verifier.code 0} true;
  call $p18 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p18.dup := 0;
  assume {:verifier.code 0} true;
  call $p19 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p19.dup := 0;
  assume {:verifier.code 0} true;
  call $p20 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p20.dup := 0;
  assume {:verifier.code 0} true;
  call $p21 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p21.dup := 0;
  assume {:verifier.code 0} true;
  call $p22 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p22.dup := 0;
  assume {:verifier.code 0} true;
  call $p23 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p23.dup := 0;
  assume {:verifier.code 0} true;
  call $p24 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p24.dup := 0;
  assume {:verifier.code 0} true;
  call $p25 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p25.dup := 0;
  assume {:verifier.code 0} true;
  call $p26 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p26.dup := 0;
  assume {:verifier.code 0} true;
  call $p27 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p27.dup := 0;
  assume {:verifier.code 0} true;
  call $p28 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p28.dup := 0;
  assume {:verifier.code 0} true;
  call $p29 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p29.dup := 0;
  assume {:verifier.code 0} true;
  call $p30 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p30.dup := 0;
  assume {:verifier.code 0} true;
  call $p31 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p31.dup := 0;
  assume {:verifier.code 0} true;
  call $p32 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p32.dup := 0;
  assume {:verifier.code 0} true;
  call $p33 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p33.dup := 0;
  assume {:verifier.code 0} true;
  call $p34 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p34.dup := 0;
  assume {:verifier.code 0} true;
  call $p35 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p35.dup := 0;
  assume {:verifier.code 0} true;
  call $p36 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p36.dup := 0;
  assume {:verifier.code 0} true;
  call $p37 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p37.dup := 0;
  assume {:verifier.code 0} true;
  call $p38 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p38.dup := 0;
  assume {:verifier.code 0} true;
  call $p39 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p39.dup := 0;
  assume {:verifier.code 0} true;
  call $p40 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p40.dup := 0;
  assume {:verifier.code 0} true;
  call $p41 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p41.dup := 0;
  assume {:verifier.code 0} true;
  call $p42 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p42.dup := 0;
  assume {:verifier.code 0} true;
  call $p43 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p43.dup := 0;
  assume {:verifier.code 0} true;
  call $p44 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p44.dup := 0;
  assume {:verifier.code 0} true;
  call $p45 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p45.dup := 0;
  assume {:verifier.code 0} true;
  call $p46 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p46.dup := 0;
  assume {:verifier.code 0} true;
  call $p47 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p47.dup := 0;
  assume {:verifier.code 0} true;
  call $p48 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p48.dup := 0;
  assume {:verifier.code 0} true;
  call $p49 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p49.dup := 0;
  assume {:verifier.code 0} true;
  call $p50 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p50.dup := 0;
  assume {:verifier.code 0} true;
  call $p51 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p51.dup := 0;
  assume {:verifier.code 0} true;
  call $p52 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p52.dup := 0;
  assume {:verifier.code 0} true;
  call $p53 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p53.dup := 0;
  assume {:verifier.code 0} true;
  call $p54 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p54.dup := 0;
  assume {:verifier.code 0} true;
  call $p55 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p55.dup := 0;
  assume {:verifier.code 0} true;
  call $p56 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p56.dup := 0;
  assume {:verifier.code 0} true;
  call $p57 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p57.dup := 0;
  assume {:verifier.code 0} true;
  call $p58 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p58.dup := 0;
  assume {:verifier.code 0} true;
  call $p59 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p59.dup := 0;
  assume {:verifier.code 0} true;
  call $p60 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p60.dup := 0;
  assume {:verifier.code 0} true;
  call $p61 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p61.dup := 0;
  assume {:verifier.code 0} true;
  call $p62 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p62.dup := 0;
  assume {:verifier.code 0} true;
  call $p63 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p63.dup := 0;
  assume {:verifier.code 0} true;
  call $p64 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p64.dup := 0;
  assume {:verifier.code 0} true;
  call $p65 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p65.dup := 0;
  assume {:verifier.code 0} true;
  call $p66 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p66.dup := 0;
  assume {:verifier.code 0} true;
  call $p67 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p67.dup := 0;
  assume {:verifier.code 0} true;
  call $p68 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p68.dup := 0;
  assume {:verifier.code 0} true;
  call $p69 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p69.dup := 0;
  assume {:verifier.code 0} true;
  call $p70 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p70.dup := 0;
  assume {:verifier.code 0} true;
  call $p71 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p71.dup := 0;
  assume {:verifier.code 0} true;
  call $p72 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p72.dup := 0;
  assume {:verifier.code 0} true;
  call $p73 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p73.dup := 0;
  assume {:verifier.code 0} true;
  call $p74 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p74.dup := 0;
  assume {:verifier.code 0} true;
  call $p75 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p75.dup := 0;
  assume {:verifier.code 0} true;
  call $p76 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p76.dup := 0;
  assume {:verifier.code 0} true;
  call $p77 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p77.dup := 0;
  assume {:verifier.code 0} true;
  call $p78 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p78.dup := 0;
  assume {:verifier.code 0} true;
  call $p79 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p79.dup := 0;
  assume {:verifier.code 0} true;
  call $p80 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p80.dup := 0;
  assume {:verifier.code 0} true;
  call $p81 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p81.dup := 0;
  assume {:verifier.code 0} true;
  call $p82 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p82.dup := 0;
  assume {:verifier.code 0} true;
  call $p83 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p83.dup := 0;
  assume {:verifier.code 0} true;
  call $p84 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p84.dup := 0;
  assume {:verifier.code 0} true;
  call $p85 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p85.dup := 0;
  assume {:verifier.code 0} true;
  call $p86 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p86.dup := 0;
  assume {:verifier.code 0} true;
  call $p87 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p87.dup := 0;
  assume {:verifier.code 0} true;
  call $p88 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p88.dup := 0;
  assume {:verifier.code 0} true;
  call $p89 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p89.dup := 0;
  assume {:verifier.code 0} true;
  call $p90 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p90.dup := 0;
  assume {:verifier.code 0} true;
  call $p91 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p91.dup := 0;
  assume {:verifier.code 0} true;
  call $p92 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p92.dup := 0;
  assume {:verifier.code 0} true;
  call $p93 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p93.dup := 0;
  assume {:verifier.code 0} true;
  call $p94 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p94.dup := 0;
  assume {:verifier.code 0} true;
  call $p95 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p95.dup := 0;
  assume {:verifier.code 0} true;
  call $p96 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p96.dup := 0;
  assume {:verifier.code 0} true;
  call $p97 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p97.dup := 0;
  assume {:verifier.code 0} true;
  call $p98 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p98.dup := 0;
  assume {:verifier.code 0} true;
  call $p99 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p99.dup := 0;
  assume {:verifier.code 0} true;
  call $p100 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p100.dup := 0;
  assume {:verifier.code 0} true;
  call $p101 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p101.dup := 0;
  assume {:verifier.code 0} true;
  call $p102 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p102.dup := 0;
  assume {:verifier.code 0} true;
  call $p103 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p103.dup := 0;
  assume {:verifier.code 0} true;
  call $p104 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p104.dup := 0;
  assume {:verifier.code 0} true;
  call $p105 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p105.dup := 0;
  assume {:verifier.code 0} true;
  call $p106 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p106.dup := 0;
  assume {:verifier.code 0} true;
  call $p107 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p107.dup := 0;
  assume {:verifier.code 0} true;
  call $p108 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p108.dup := 0;
  assume {:verifier.code 0} true;
  call $p109 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p109.dup := 0;
  assume {:verifier.code 0} true;
  call $p110 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p110.dup := 0;
  assume {:verifier.code 0} true;
  call $p111 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p111.dup := 0;
  assume {:verifier.code 0} true;
  call $p112 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p112.dup := 0;
  assume {:verifier.code 0} true;
  call $p113 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p113.dup := 0;
  assume {:verifier.code 0} true;
  call $p114 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p114.dup := 0;
  assume {:verifier.code 0} true;
  call $p115 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p115.dup := 0;
  assume {:verifier.code 0} true;
  call $p116 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p116.dup := 0;
  assume {:verifier.code 0} true;
  call $p117 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p117.dup := 0;
  assume {:verifier.code 0} true;
  call $p118 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p118.dup := 0;
  assume {:verifier.code 0} true;
  call $p119 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p119.dup := 0;
  assume {:verifier.code 0} true;
  call $p120 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p120.dup := 0;
  assume {:verifier.code 0} true;
  call $p121 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p121.dup := 0;
  assume {:verifier.code 0} true;
  call $p122 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p122.dup := 0;
  assume {:verifier.code 0} true;
  call $p123 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p123.dup := 0;
  assume {:verifier.code 0} true;
  call $p124 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p124.dup := 0;
  assume {:verifier.code 0} true;
  call $p125 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p125.dup := 0;
  assume {:verifier.code 0} true;
  call $p126 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p126.dup := 0;
  assume {:verifier.code 0} true;
  call $p127 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p127.dup := 0;
  assume {:verifier.code 0} true;
  call $p128 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p128.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 87, 18} true;
  assume {:verifier.code 0} true;
  $p129 := $add.ref($p1,$mul.ref(0,8));
  $p129.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 87, 18} true;
  assume {:verifier.code 0} true;
  $p129.dup := 0;
  $i130 := $load.i64($M.0,$p129);
  $i130.dup := $load.i1($M.0.dup,$p129);
  call {:cexpr "f10"} boogie_si_record_i64($i130);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 88, 18} true;
  assume {:verifier.code 0} true;
  $p131 := $add.ref($p1,$mul.ref(1,8));
  $p131.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 88, 18} true;
  assume {:verifier.code 0} true;
  $p131.dup := 0;
  $i132 := $load.i64($M.0,$p131);
  $i132.dup := $load.i1($M.0.dup,$p131);
  call {:cexpr "f11"} boogie_si_record_i64($i132);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 89, 18} true;
  assume {:verifier.code 0} true;
  $p133 := $add.ref($p1,$mul.ref(2,8));
  $p133.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 89, 18} true;
  assume {:verifier.code 0} true;
  $p133.dup := 0;
  $i134 := $load.i64($M.0,$p133);
  $i134.dup := $load.i1($M.0.dup,$p133);
  call {:cexpr "f12"} boogie_si_record_i64($i134);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 90, 18} true;
  assume {:verifier.code 0} true;
  $p135 := $add.ref($p1,$mul.ref(3,8));
  $p135.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 90, 18} true;
  assume {:verifier.code 0} true;
  $p135.dup := 0;
  $i136 := $load.i64($M.0,$p135);
  $i136.dup := $load.i1($M.0.dup,$p135);
  call {:cexpr "f13"} boogie_si_record_i64($i136);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 91, 18} true;
  assume {:verifier.code 0} true;
  $p137 := $add.ref($p1,$mul.ref(4,8));
  $p137.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 91, 18} true;
  assume {:verifier.code 0} true;
  $p137.dup := 0;
  $i138 := $load.i64($M.0,$p137);
  $i138.dup := $load.i1($M.0.dup,$p137);
  call {:cexpr "f14"} boogie_si_record_i64($i138);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 92, 18} true;
  assume {:verifier.code 0} true;
  $p139 := $add.ref($p2,$mul.ref(0,8));
  $p139.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 92, 18} true;
  assume {:verifier.code 0} true;
  $p139.dup := 0;
  $i140 := $load.i64($M.0,$p139);
  $i140.dup := 0;
  call {:cexpr "f20"} boogie_si_record_i64($i140);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 93, 18} true;
  assume {:verifier.code 0} true;
  $p141 := $add.ref($p2,$mul.ref(1,8));
  $p141.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 93, 18} true;
  assume {:verifier.code 0} true;
  $p141.dup := 0;
  $i142 := $load.i64($M.0,$p141);
  $i142.dup := 0;
  call {:cexpr "f21"} boogie_si_record_i64($i142);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 94, 18} true;
  assume {:verifier.code 0} true;
  $p143 := $add.ref($p2,$mul.ref(2,8));
  $p143.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 94, 18} true;
  assume {:verifier.code 0} true;
  $p143.dup := 0;
  $i144 := $load.i64($M.0,$p143);
  $i144.dup := 0;
  call {:cexpr "f22"} boogie_si_record_i64($i144);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 95, 18} true;
  assume {:verifier.code 0} true;
  $p145 := $add.ref($p2,$mul.ref(3,8));
  $p145.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 95, 18} true;
  assume {:verifier.code 0} true;
  $p145.dup := 0;
  $i146 := $load.i64($M.0,$p145);
  $i146.dup := 0;
  call {:cexpr "f23"} boogie_si_record_i64($i146);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 96, 18} true;
  assume {:verifier.code 0} true;
  $p147 := $add.ref($p2,$mul.ref(4,8));
  $p147.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 96, 18} true;
  assume {:verifier.code 0} true;
  $p147.dup := 0;
  $i148 := $load.i64($M.0,$p147);
  $i148.dup := 0;
  call {:cexpr "f24"} boogie_si_record_i64($i148);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 97, 23} true;
  assume {:verifier.code 0} true;
  $i149 := $mul.i64($i142,19);
  $i149.dup := $or.i1($i142.dup,0);
  call {:cexpr "tmp1"} boogie_si_record_i64($i149);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 98, 23} true;
  assume {:verifier.code 0} true;
  $i150 := $mul.i64($i144,19);
  $i150.dup := $or.i1($i144.dup,0);
  call {:cexpr "tmp2"} boogie_si_record_i64($i150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 99, 23} true;
  assume {:verifier.code 0} true;
  $i151 := $mul.i64($i146,19);
  $i151.dup := $or.i1($i146.dup,0);
  call {:cexpr "tmp3"} boogie_si_record_i64($i151);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 100, 23} true;
  assume {:verifier.code 0} true;
  $i152 := $mul.i64($i148,19);
  $i152.dup := $or.i1($i148.dup,0);
  call {:cexpr "tmp4"} boogie_si_record_i64($i152);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  call $p153, $p153.dup := FStar_UInt128_mul_wide($i130, $i130.dup, $i140, $i140.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  $p154 := $bitcast.ref.ref($p4);
  $p154.dup := $p4.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  $p155 := $add.ref($add.ref($p154,$mul.ref(0,16)),$mul.ref(0,1));
  $p155.dup := $or.i1($or.i1($p154.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  $i156 := $extractvalue.i64($p153,0);
  $i156.dup := $or.i1($p153.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  $p155.dup := 0;
  $M.94 := $store.i64($M.94,$p155,$i156);
  $M.94.dup := $store.i1($M.94.dup,$p155,$i156.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  $p157 := $add.ref($add.ref($p154,$mul.ref(0,16)),$mul.ref(8,1));
  $p157.dup := $or.i1($or.i1($p154.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  $i158 := $extractvalue.i64($p153,1);
  $i158.dup := $or.i1($p153.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  $p157.dup := 0;
  $M.94 := $store.i64($M.94,$p157,$i158);
  $M.94.dup := $store.i1($M.94.dup,$p157,$i158.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 101, 31} true;
  assume {:verifier.code 0} true;
  $p4.dup := 0;
  $i159 := $load.i128($M.94,$p4);
  $i159.dup := 0;
  call {:cexpr "o00"} boogie_si_record_i128($i159);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  call $p160, $p160.dup := FStar_UInt128_mul_wide($i130, $i130.dup, $i142, $i142.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  $p161 := $bitcast.ref.ref($p5);
  $p161.dup := $p5.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  $p162 := $add.ref($add.ref($p161,$mul.ref(0,16)),$mul.ref(0,1));
  $p162.dup := $or.i1($or.i1($p161.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  $i163 := $extractvalue.i64($p160,0);
  $i163.dup := $or.i1($p160.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  $p162.dup := 0;
  $M.95 := $store.i64($M.95,$p162,$i163);
  $M.95.dup := $store.i1($M.95.dup,$p162,$i163.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  $p164 := $add.ref($add.ref($p161,$mul.ref(0,16)),$mul.ref(8,1));
  $p164.dup := $or.i1($or.i1($p161.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  $i165 := $extractvalue.i64($p160,1);
  $i165.dup := $or.i1($p160.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  $p164.dup := 0;
  $M.95 := $store.i64($M.95,$p164,$i165);
  $M.95.dup := $store.i1($M.95.dup,$p164,$i165.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 102, 31} true;
  assume {:verifier.code 0} true;
  $p5.dup := 0;
  $i166 := $load.i128($M.95,$p5);
  $i166.dup := 0;
  call {:cexpr "o10"} boogie_si_record_i128($i166);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  call $p167, $p167.dup := FStar_UInt128_mul_wide($i130, $i130.dup, $i144, $i144.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  $p168 := $bitcast.ref.ref($p6);
  $p168.dup := $p6.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  $p169 := $add.ref($add.ref($p168,$mul.ref(0,16)),$mul.ref(0,1));
  $p169.dup := $or.i1($or.i1($p168.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  $i170 := $extractvalue.i64($p167,0);
  $i170.dup := $or.i1($p167.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  $p169.dup := 0;
  $M.96 := $store.i64($M.96,$p169,$i170);
  $M.96.dup := $store.i1($M.96.dup,$p169,$i170.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  $p171 := $add.ref($add.ref($p168,$mul.ref(0,16)),$mul.ref(8,1));
  $p171.dup := $or.i1($or.i1($p168.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  $i172 := $extractvalue.i64($p167,1);
  $i172.dup := $or.i1($p167.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  $p171.dup := 0;
  $M.96 := $store.i64($M.96,$p171,$i172);
  $M.96.dup := $store.i1($M.96.dup,$p171,$i172.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 103, 31} true;
  assume {:verifier.code 0} true;
  $p6.dup := 0;
  $i173 := $load.i128($M.96,$p6);
  $i173.dup := 0;
  call {:cexpr "o20"} boogie_si_record_i128($i173);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  call $p174, $p174.dup := FStar_UInt128_mul_wide($i130, $i130.dup, $i146, $i146.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  $p175 := $bitcast.ref.ref($p7);
  $p175.dup := $p7.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  $p176 := $add.ref($add.ref($p175,$mul.ref(0,16)),$mul.ref(0,1));
  $p176.dup := $or.i1($or.i1($p175.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  $i177 := $extractvalue.i64($p174,0);
  $i177.dup := $or.i1($p174.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  $p176.dup := 0;
  $M.97 := $store.i64($M.97,$p176,$i177);
  $M.97.dup := $store.i1($M.97.dup,$p176,$i177.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  $p178 := $add.ref($add.ref($p175,$mul.ref(0,16)),$mul.ref(8,1));
  $p178.dup := $or.i1($or.i1($p175.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  $i179 := $extractvalue.i64($p174,1);
  $i179.dup := $or.i1($p174.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  $p178.dup := 0;
  $M.97 := $store.i64($M.97,$p178,$i179);
  $M.97.dup := $store.i1($M.97.dup,$p178,$i179.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 104, 31} true;
  assume {:verifier.code 0} true;
  $p7.dup := 0;
  $i180 := $load.i128($M.97,$p7);
  $i180.dup := 0;
  call {:cexpr "o30"} boogie_si_record_i128($i180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  call $p181, $p181.dup := FStar_UInt128_mul_wide($i130, $i130.dup, $i148, $i148.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  $p182 := $bitcast.ref.ref($p8);
  $p182.dup := $p8.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  $p183 := $add.ref($add.ref($p182,$mul.ref(0,16)),$mul.ref(0,1));
  $p183.dup := $or.i1($or.i1($p182.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  $i184 := $extractvalue.i64($p181,0);
  $i184.dup := $or.i1($p181.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  $p183.dup := 0;
  $M.98 := $store.i64($M.98,$p183,$i184);
  $M.98.dup := $store.i1($M.98.dup,$p183,$i184.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  $p185 := $add.ref($add.ref($p182,$mul.ref(0,16)),$mul.ref(8,1));
  $p185.dup := $or.i1($or.i1($p182.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  $i186 := $extractvalue.i64($p181,1);
  $i186.dup := $or.i1($p181.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  $p185.dup := 0;
  $M.98 := $store.i64($M.98,$p185,$i186);
  $M.98.dup := $store.i1($M.98.dup,$p185,$i186.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 105, 31} true;
  assume {:verifier.code 0} true;
  $p8.dup := 0;
  $i187 := $load.i128($M.98,$p8);
  $i187.dup := 0;
  call {:cexpr "o40"} boogie_si_record_i128($i187);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  call $p188, $p188.dup := FStar_UInt128_mul_wide($i132, $i132.dup, $i152, $i152.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  $p189 := $bitcast.ref.ref($p9);
  $p189.dup := $p9.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  $p190 := $add.ref($add.ref($p189,$mul.ref(0,16)),$mul.ref(0,1));
  $p190.dup := $or.i1($or.i1($p189.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  $i191 := $extractvalue.i64($p188,0);
  $i191.dup := $or.i1($p188.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  $p190.dup := 0;
  $M.99 := $store.i64($M.99,$p190,$i191);
  $M.99.dup := $store.i1($M.99.dup,$p190,$i191.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  $p192 := $add.ref($add.ref($p189,$mul.ref(0,16)),$mul.ref(8,1));
  $p192.dup := $or.i1($or.i1($p189.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  $i193 := $extractvalue.i64($p188,1);
  $i193.dup := $or.i1($p188.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  $p192.dup := 0;
  $M.99 := $store.i64($M.99,$p192,$i193);
  $M.99.dup := $store.i1($M.99.dup,$p192,$i193.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 54} true;
  assume {:verifier.code 0} true;
  $p9.dup := 0;
  $i194 := $load.i128($M.99,$p9);
  $i194.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p10.dup := 0;
  $M.100 := $store.i128($M.100,$p10,$i159);
  $M.100.dup := $store.i1($M.100.dup,$p10,$i159.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p195 := $bitcast.ref.ref($p10);
  $p195.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p196 := $add.ref($add.ref($p195,$mul.ref(0,16)),$mul.ref(0,1));
  $p196.dup := $or.i1($or.i1($p195.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p196.dup := 0;
  $i197 := $load.i64($M.100,$p196);
  $i197.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p198 := $add.ref($add.ref($p195,$mul.ref(0,16)),$mul.ref(8,1));
  $p198.dup := $or.i1($or.i1($p195.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p198.dup := 0;
  $i199 := $load.i64($M.100,$p198);
  $i199.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p11.dup := 0;
  $M.101 := $store.i128($M.101,$p11,$i194);
  $M.101.dup := $store.i1($M.101.dup,$p11,$i194.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p200 := $bitcast.ref.ref($p11);
  $p200.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p201 := $add.ref($add.ref($p200,$mul.ref(0,16)),$mul.ref(0,1));
  $p201.dup := $or.i1($or.i1($p200.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p201.dup := 0;
  $i202 := $load.i64($M.101,$p201);
  $i202.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p203 := $add.ref($add.ref($p200,$mul.ref(0,16)),$mul.ref(8,1));
  $p203.dup := $or.i1($or.i1($p200.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p203.dup := 0;
  $i204 := $load.i64($M.101,$p203);
  $i204.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  call $p205, $p205.dup := FStar_UInt128_add($i197, $i197.dup, $i199, $i199.dup, $i202, $i202.dup, $i204, $i204.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p206 := $bitcast.ref.ref($p12);
  $p206.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p207 := $add.ref($add.ref($p206,$mul.ref(0,16)),$mul.ref(0,1));
  $p207.dup := $or.i1($or.i1($p206.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $i208 := $extractvalue.i64($p205,0);
  $i208.dup := $or.i1($p205.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p207.dup := 0;
  $M.102 := $store.i64($M.102,$p207,$i208);
  $M.102.dup := $store.i1($M.102.dup,$p207,$i208.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p209 := $add.ref($add.ref($p206,$mul.ref(0,16)),$mul.ref(8,1));
  $p209.dup := $or.i1($or.i1($p206.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $i210 := $extractvalue.i64($p205,1);
  $i210.dup := $or.i1($p205.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p209.dup := 0;
  $M.102 := $store.i64($M.102,$p209,$i210);
  $M.102.dup := $store.i1($M.102.dup,$p209,$i210.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 106, 31} true;
  assume {:verifier.code 0} true;
  $p12.dup := 0;
  $i211 := $load.i128($M.102,$p12);
  $i211.dup := 0;
  call {:cexpr "o01"} boogie_si_record_i128($i211);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  call $p212, $p212.dup := FStar_UInt128_mul_wide($i132, $i132.dup, $i140, $i140.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  $p213 := $bitcast.ref.ref($p13);
  $p213.dup := $p13.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  $p214 := $add.ref($add.ref($p213,$mul.ref(0,16)),$mul.ref(0,1));
  $p214.dup := $or.i1($or.i1($p213.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  $i215 := $extractvalue.i64($p212,0);
  $i215.dup := $or.i1($p212.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  $p214.dup := 0;
  $M.103 := $store.i64($M.103,$p214,$i215);
  $M.103.dup := $store.i1($M.103.dup,$p214,$i215.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  $p216 := $add.ref($add.ref($p213,$mul.ref(0,16)),$mul.ref(8,1));
  $p216.dup := $or.i1($or.i1($p213.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  $i217 := $extractvalue.i64($p212,1);
  $i217.dup := $or.i1($p212.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  $p216.dup := 0;
  $M.103 := $store.i64($M.103,$p216,$i217);
  $M.103.dup := $store.i1($M.103.dup,$p216,$i217.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 54} true;
  assume {:verifier.code 0} true;
  $p13.dup := 0;
  $i218 := $load.i128($M.103,$p13);
  $i218.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p14.dup := 0;
  $M.104 := $store.i128($M.104,$p14,$i166);
  $M.104.dup := $store.i1($M.104.dup,$p14,$i166.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p219 := $bitcast.ref.ref($p14);
  $p219.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p220 := $add.ref($add.ref($p219,$mul.ref(0,16)),$mul.ref(0,1));
  $p220.dup := $or.i1($or.i1($p219.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p220.dup := 0;
  $i221 := $load.i64($M.104,$p220);
  $i221.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p222 := $add.ref($add.ref($p219,$mul.ref(0,16)),$mul.ref(8,1));
  $p222.dup := $or.i1($or.i1($p219.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p222.dup := 0;
  $i223 := $load.i64($M.104,$p222);
  $i223.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p15.dup := 0;
  $M.105 := $store.i128($M.105,$p15,$i218);
  $M.105.dup := $store.i1($M.105.dup,$p15,$i218.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p224 := $bitcast.ref.ref($p15);
  $p224.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p225 := $add.ref($add.ref($p224,$mul.ref(0,16)),$mul.ref(0,1));
  $p225.dup := $or.i1($or.i1($p224.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p225.dup := 0;
  $i226 := $load.i64($M.105,$p225);
  $i226.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p227 := $add.ref($add.ref($p224,$mul.ref(0,16)),$mul.ref(8,1));
  $p227.dup := $or.i1($or.i1($p224.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p227.dup := 0;
  $i228 := $load.i64($M.105,$p227);
  $i228.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  call $p229, $p229.dup := FStar_UInt128_add($i221, $i221.dup, $i223, $i223.dup, $i226, $i226.dup, $i228, $i228.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p230 := $bitcast.ref.ref($p16);
  $p230.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p231 := $add.ref($add.ref($p230,$mul.ref(0,16)),$mul.ref(0,1));
  $p231.dup := $or.i1($or.i1($p230.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $i232 := $extractvalue.i64($p229,0);
  $i232.dup := $or.i1($p229.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p231.dup := 0;
  $M.106 := $store.i64($M.106,$p231,$i232);
  $M.106.dup := $store.i1($M.106.dup,$p231,$i232.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p233 := $add.ref($add.ref($p230,$mul.ref(0,16)),$mul.ref(8,1));
  $p233.dup := $or.i1($or.i1($p230.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $i234 := $extractvalue.i64($p229,1);
  $i234.dup := $or.i1($p229.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p233.dup := 0;
  $M.106 := $store.i64($M.106,$p233,$i234);
  $M.106.dup := $store.i1($M.106.dup,$p233,$i234.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 107, 31} true;
  assume {:verifier.code 0} true;
  $p16.dup := 0;
  $i235 := $load.i128($M.106,$p16);
  $i235.dup := 0;
  call {:cexpr "o11"} boogie_si_record_i128($i235);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  call $p236, $p236.dup := FStar_UInt128_mul_wide($i132, $i132.dup, $i142, $i142.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  $p237 := $bitcast.ref.ref($p17);
  $p237.dup := $p17.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  $p238 := $add.ref($add.ref($p237,$mul.ref(0,16)),$mul.ref(0,1));
  $p238.dup := $or.i1($or.i1($p237.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  $i239 := $extractvalue.i64($p236,0);
  $i239.dup := $or.i1($p236.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  $p238.dup := 0;
  $M.107 := $store.i64($M.107,$p238,$i239);
  $M.107.dup := $store.i1($M.107.dup,$p238,$i239.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  $p240 := $add.ref($add.ref($p237,$mul.ref(0,16)),$mul.ref(8,1));
  $p240.dup := $or.i1($or.i1($p237.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  $i241 := $extractvalue.i64($p236,1);
  $i241.dup := $or.i1($p236.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  $p240.dup := 0;
  $M.107 := $store.i64($M.107,$p240,$i241);
  $M.107.dup := $store.i1($M.107.dup,$p240,$i241.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 54} true;
  assume {:verifier.code 0} true;
  $p17.dup := 0;
  $i242 := $load.i128($M.107,$p17);
  $i242.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p18.dup := 0;
  $M.108 := $store.i128($M.108,$p18,$i173);
  $M.108.dup := $store.i1($M.108.dup,$p18,$i173.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p243 := $bitcast.ref.ref($p18);
  $p243.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p244 := $add.ref($add.ref($p243,$mul.ref(0,16)),$mul.ref(0,1));
  $p244.dup := $or.i1($or.i1($p243.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p244.dup := 0;
  $i245 := $load.i64($M.108,$p244);
  $i245.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p246 := $add.ref($add.ref($p243,$mul.ref(0,16)),$mul.ref(8,1));
  $p246.dup := $or.i1($or.i1($p243.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p246.dup := 0;
  $i247 := $load.i64($M.108,$p246);
  $i247.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p19.dup := 0;
  $M.109 := $store.i128($M.109,$p19,$i242);
  $M.109.dup := $store.i1($M.109.dup,$p19,$i242.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p248 := $bitcast.ref.ref($p19);
  $p248.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p249 := $add.ref($add.ref($p248,$mul.ref(0,16)),$mul.ref(0,1));
  $p249.dup := $or.i1($or.i1($p248.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p249.dup := 0;
  $i250 := $load.i64($M.109,$p249);
  $i250.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p251 := $add.ref($add.ref($p248,$mul.ref(0,16)),$mul.ref(8,1));
  $p251.dup := $or.i1($or.i1($p248.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p251.dup := 0;
  $i252 := $load.i64($M.109,$p251);
  $i252.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  call $p253, $p253.dup := FStar_UInt128_add($i245, $i245.dup, $i247, $i247.dup, $i250, $i250.dup, $i252, $i252.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p254 := $bitcast.ref.ref($p20);
  $p254.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p255 := $add.ref($add.ref($p254,$mul.ref(0,16)),$mul.ref(0,1));
  $p255.dup := $or.i1($or.i1($p254.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $i256 := $extractvalue.i64($p253,0);
  $i256.dup := $or.i1($p253.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p255.dup := 0;
  $M.110 := $store.i64($M.110,$p255,$i256);
  $M.110.dup := $store.i1($M.110.dup,$p255,$i256.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p257 := $add.ref($add.ref($p254,$mul.ref(0,16)),$mul.ref(8,1));
  $p257.dup := $or.i1($or.i1($p254.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $i258 := $extractvalue.i64($p253,1);
  $i258.dup := $or.i1($p253.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p257.dup := 0;
  $M.110 := $store.i64($M.110,$p257,$i258);
  $M.110.dup := $store.i1($M.110.dup,$p257,$i258.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 108, 31} true;
  assume {:verifier.code 0} true;
  $p20.dup := 0;
  $i259 := $load.i128($M.110,$p20);
  $i259.dup := 0;
  call {:cexpr "o21"} boogie_si_record_i128($i259);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  call $p260, $p260.dup := FStar_UInt128_mul_wide($i132, $i132.dup, $i144, $i144.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  $p261 := $bitcast.ref.ref($p21);
  $p261.dup := $p21.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  $p262 := $add.ref($add.ref($p261,$mul.ref(0,16)),$mul.ref(0,1));
  $p262.dup := $or.i1($or.i1($p261.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  $i263 := $extractvalue.i64($p260,0);
  $i263.dup := $or.i1($p260.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  $p262.dup := 0;
  $M.111 := $store.i64($M.111,$p262,$i263);
  $M.111.dup := $store.i1($M.111.dup,$p262,$i263.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  $p264 := $add.ref($add.ref($p261,$mul.ref(0,16)),$mul.ref(8,1));
  $p264.dup := $or.i1($or.i1($p261.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  $i265 := $extractvalue.i64($p260,1);
  $i265.dup := $or.i1($p260.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  $p264.dup := 0;
  $M.111 := $store.i64($M.111,$p264,$i265);
  $M.111.dup := $store.i1($M.111.dup,$p264,$i265.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 54} true;
  assume {:verifier.code 0} true;
  $p21.dup := 0;
  $i266 := $load.i128($M.111,$p21);
  $i266.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p22.dup := 0;
  $M.112 := $store.i128($M.112,$p22,$i180);
  $M.112.dup := $store.i1($M.112.dup,$p22,$i180.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p267 := $bitcast.ref.ref($p22);
  $p267.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p268 := $add.ref($add.ref($p267,$mul.ref(0,16)),$mul.ref(0,1));
  $p268.dup := $or.i1($or.i1($p267.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p268.dup := 0;
  $i269 := $load.i64($M.112,$p268);
  $i269.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p270 := $add.ref($add.ref($p267,$mul.ref(0,16)),$mul.ref(8,1));
  $p270.dup := $or.i1($or.i1($p267.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p270.dup := 0;
  $i271 := $load.i64($M.112,$p270);
  $i271.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p23.dup := 0;
  $M.113 := $store.i128($M.113,$p23,$i266);
  $M.113.dup := $store.i1($M.113.dup,$p23,$i266.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p272 := $bitcast.ref.ref($p23);
  $p272.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p273 := $add.ref($add.ref($p272,$mul.ref(0,16)),$mul.ref(0,1));
  $p273.dup := $or.i1($or.i1($p272.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p273.dup := 0;
  $i274 := $load.i64($M.113,$p273);
  $i274.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p275 := $add.ref($add.ref($p272,$mul.ref(0,16)),$mul.ref(8,1));
  $p275.dup := $or.i1($or.i1($p272.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p275.dup := 0;
  $i276 := $load.i64($M.113,$p275);
  $i276.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  call $p277, $p277.dup := FStar_UInt128_add($i269, $i269.dup, $i271, $i271.dup, $i274, $i274.dup, $i276, $i276.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p278 := $bitcast.ref.ref($p24);
  $p278.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p279 := $add.ref($add.ref($p278,$mul.ref(0,16)),$mul.ref(0,1));
  $p279.dup := $or.i1($or.i1($p278.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $i280 := $extractvalue.i64($p277,0);
  $i280.dup := $or.i1($p277.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p279.dup := 0;
  $M.114 := $store.i64($M.114,$p279,$i280);
  $M.114.dup := $store.i1($M.114.dup,$p279,$i280.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p281 := $add.ref($add.ref($p278,$mul.ref(0,16)),$mul.ref(8,1));
  $p281.dup := $or.i1($or.i1($p278.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $i282 := $extractvalue.i64($p277,1);
  $i282.dup := $or.i1($p277.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p281.dup := 0;
  $M.114 := $store.i64($M.114,$p281,$i282);
  $M.114.dup := $store.i1($M.114.dup,$p281,$i282.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 109, 31} true;
  assume {:verifier.code 0} true;
  $p24.dup := 0;
  $i283 := $load.i128($M.114,$p24);
  $i283.dup := 0;
  call {:cexpr "o31"} boogie_si_record_i128($i283);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  call $p284, $p284.dup := FStar_UInt128_mul_wide($i132, $i132.dup, $i146, $i146.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  $p285 := $bitcast.ref.ref($p25);
  $p285.dup := $p25.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  $p286 := $add.ref($add.ref($p285,$mul.ref(0,16)),$mul.ref(0,1));
  $p286.dup := $or.i1($or.i1($p285.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  $i287 := $extractvalue.i64($p284,0);
  $i287.dup := $or.i1($p284.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  $p286.dup := 0;
  $M.115 := $store.i64($M.115,$p286,$i287);
  $M.115.dup := $store.i1($M.115.dup,$p286,$i287.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  $p288 := $add.ref($add.ref($p285,$mul.ref(0,16)),$mul.ref(8,1));
  $p288.dup := $or.i1($or.i1($p285.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  $i289 := $extractvalue.i64($p284,1);
  $i289.dup := $or.i1($p284.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  $p288.dup := 0;
  $M.115 := $store.i64($M.115,$p288,$i289);
  $M.115.dup := $store.i1($M.115.dup,$p288,$i289.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 54} true;
  assume {:verifier.code 0} true;
  $p25.dup := 0;
  $i290 := $load.i128($M.115,$p25);
  $i290.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p26.dup := 0;
  $M.116 := $store.i128($M.116,$p26,$i187);
  $M.116.dup := $store.i1($M.116.dup,$p26,$i187.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p291 := $bitcast.ref.ref($p26);
  $p291.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p292 := $add.ref($add.ref($p291,$mul.ref(0,16)),$mul.ref(0,1));
  $p292.dup := $or.i1($or.i1($p291.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p292.dup := 0;
  $i293 := $load.i64($M.116,$p292);
  $i293.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p294 := $add.ref($add.ref($p291,$mul.ref(0,16)),$mul.ref(8,1));
  $p294.dup := $or.i1($or.i1($p291.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p294.dup := 0;
  $i295 := $load.i64($M.116,$p294);
  $i295.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p27.dup := 0;
  $M.117 := $store.i128($M.117,$p27,$i290);
  $M.117.dup := $store.i1($M.117.dup,$p27,$i290.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p296 := $bitcast.ref.ref($p27);
  $p296.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p297 := $add.ref($add.ref($p296,$mul.ref(0,16)),$mul.ref(0,1));
  $p297.dup := $or.i1($or.i1($p296.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p297.dup := 0;
  $i298 := $load.i64($M.117,$p297);
  $i298.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p299 := $add.ref($add.ref($p296,$mul.ref(0,16)),$mul.ref(8,1));
  $p299.dup := $or.i1($or.i1($p296.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p299.dup := 0;
  $i300 := $load.i64($M.117,$p299);
  $i300.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  call $p301, $p301.dup := FStar_UInt128_add($i293, $i293.dup, $i295, $i295.dup, $i298, $i298.dup, $i300, $i300.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p302 := $bitcast.ref.ref($p28);
  $p302.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p303 := $add.ref($add.ref($p302,$mul.ref(0,16)),$mul.ref(0,1));
  $p303.dup := $or.i1($or.i1($p302.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $i304 := $extractvalue.i64($p301,0);
  $i304.dup := $or.i1($p301.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p303.dup := 0;
  $M.118 := $store.i64($M.118,$p303,$i304);
  $M.118.dup := $store.i1($M.118.dup,$p303,$i304.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p305 := $add.ref($add.ref($p302,$mul.ref(0,16)),$mul.ref(8,1));
  $p305.dup := $or.i1($or.i1($p302.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $i306 := $extractvalue.i64($p301,1);
  $i306.dup := $or.i1($p301.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p305.dup := 0;
  $M.118 := $store.i64($M.118,$p305,$i306);
  $M.118.dup := $store.i1($M.118.dup,$p305,$i306.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 110, 31} true;
  assume {:verifier.code 0} true;
  $p28.dup := 0;
  $i307 := $load.i128($M.118,$p28);
  $i307.dup := 0;
  call {:cexpr "o41"} boogie_si_record_i128($i307);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  call $p308, $p308.dup := FStar_UInt128_mul_wide($i134, $i134.dup, $i151, $i151.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  $p309 := $bitcast.ref.ref($p29);
  $p309.dup := $p29.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  $p310 := $add.ref($add.ref($p309,$mul.ref(0,16)),$mul.ref(0,1));
  $p310.dup := $or.i1($or.i1($p309.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  $i311 := $extractvalue.i64($p308,0);
  $i311.dup := $or.i1($p308.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  $p310.dup := 0;
  $M.119 := $store.i64($M.119,$p310,$i311);
  $M.119.dup := $store.i1($M.119.dup,$p310,$i311.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  $p312 := $add.ref($add.ref($p309,$mul.ref(0,16)),$mul.ref(8,1));
  $p312.dup := $or.i1($or.i1($p309.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  $i313 := $extractvalue.i64($p308,1);
  $i313.dup := $or.i1($p308.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  $p312.dup := 0;
  $M.119 := $store.i64($M.119,$p312,$i313);
  $M.119.dup := $store.i1($M.119.dup,$p312,$i313.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 54} true;
  assume {:verifier.code 0} true;
  $p29.dup := 0;
  $i314 := $load.i128($M.119,$p29);
  $i314.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p30.dup := 0;
  $M.120 := $store.i128($M.120,$p30,$i211);
  $M.120.dup := $store.i1($M.120.dup,$p30,$i211.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p315 := $bitcast.ref.ref($p30);
  $p315.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p316 := $add.ref($add.ref($p315,$mul.ref(0,16)),$mul.ref(0,1));
  $p316.dup := $or.i1($or.i1($p315.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p316.dup := 0;
  $i317 := $load.i64($M.120,$p316);
  $i317.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p318 := $add.ref($add.ref($p315,$mul.ref(0,16)),$mul.ref(8,1));
  $p318.dup := $or.i1($or.i1($p315.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p318.dup := 0;
  $i319 := $load.i64($M.120,$p318);
  $i319.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p31.dup := 0;
  $M.121 := $store.i128($M.121,$p31,$i314);
  $M.121.dup := $store.i1($M.121.dup,$p31,$i314.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p320 := $bitcast.ref.ref($p31);
  $p320.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p321 := $add.ref($add.ref($p320,$mul.ref(0,16)),$mul.ref(0,1));
  $p321.dup := $or.i1($or.i1($p320.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p321.dup := 0;
  $i322 := $load.i64($M.121,$p321);
  $i322.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p323 := $add.ref($add.ref($p320,$mul.ref(0,16)),$mul.ref(8,1));
  $p323.dup := $or.i1($or.i1($p320.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p323.dup := 0;
  $i324 := $load.i64($M.121,$p323);
  $i324.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  call $p325, $p325.dup := FStar_UInt128_add($i317, $i317.dup, $i319, $i319.dup, $i322, $i322.dup, $i324, $i324.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p326 := $bitcast.ref.ref($p32);
  $p326.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p327 := $add.ref($add.ref($p326,$mul.ref(0,16)),$mul.ref(0,1));
  $p327.dup := $or.i1($or.i1($p326.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $i328 := $extractvalue.i64($p325,0);
  $i328.dup := $or.i1($p325.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p327.dup := 0;
  $M.122 := $store.i64($M.122,$p327,$i328);
  $M.122.dup := $store.i1($M.122.dup,$p327,$i328.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p329 := $add.ref($add.ref($p326,$mul.ref(0,16)),$mul.ref(8,1));
  $p329.dup := $or.i1($or.i1($p326.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $i330 := $extractvalue.i64($p325,1);
  $i330.dup := $or.i1($p325.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p329.dup := 0;
  $M.122 := $store.i64($M.122,$p329,$i330);
  $M.122.dup := $store.i1($M.122.dup,$p329,$i330.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 111, 31} true;
  assume {:verifier.code 0} true;
  $p32.dup := 0;
  $i331 := $load.i128($M.122,$p32);
  $i331.dup := 0;
  call {:cexpr "o02"} boogie_si_record_i128($i331);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  call $p332, $p332.dup := FStar_UInt128_mul_wide($i134, $i134.dup, $i152, $i152.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  $p333 := $bitcast.ref.ref($p33);
  $p333.dup := $p33.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  $p334 := $add.ref($add.ref($p333,$mul.ref(0,16)),$mul.ref(0,1));
  $p334.dup := $or.i1($or.i1($p333.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  $i335 := $extractvalue.i64($p332,0);
  $i335.dup := $or.i1($p332.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  $p334.dup := 0;
  $M.123 := $store.i64($M.123,$p334,$i335);
  $M.123.dup := $store.i1($M.123.dup,$p334,$i335.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  $p336 := $add.ref($add.ref($p333,$mul.ref(0,16)),$mul.ref(8,1));
  $p336.dup := $or.i1($or.i1($p333.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  $i337 := $extractvalue.i64($p332,1);
  $i337.dup := $or.i1($p332.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  $p336.dup := 0;
  $M.123 := $store.i64($M.123,$p336,$i337);
  $M.123.dup := $store.i1($M.123.dup,$p336,$i337.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 54} true;
  assume {:verifier.code 0} true;
  $p33.dup := 0;
  $i338 := $load.i128($M.123,$p33);
  $i338.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p34.dup := 0;
  $M.124 := $store.i128($M.124,$p34,$i235);
  $M.124.dup := $store.i1($M.124.dup,$p34,$i235.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p339 := $bitcast.ref.ref($p34);
  $p339.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p340 := $add.ref($add.ref($p339,$mul.ref(0,16)),$mul.ref(0,1));
  $p340.dup := $or.i1($or.i1($p339.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p340.dup := 0;
  $i341 := $load.i64($M.124,$p340);
  $i341.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p342 := $add.ref($add.ref($p339,$mul.ref(0,16)),$mul.ref(8,1));
  $p342.dup := $or.i1($or.i1($p339.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p342.dup := 0;
  $i343 := $load.i64($M.124,$p342);
  $i343.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p35.dup := 0;
  $M.125 := $store.i128($M.125,$p35,$i338);
  $M.125.dup := $store.i1($M.125.dup,$p35,$i338.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p344 := $bitcast.ref.ref($p35);
  $p344.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p345 := $add.ref($add.ref($p344,$mul.ref(0,16)),$mul.ref(0,1));
  $p345.dup := $or.i1($or.i1($p344.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p345.dup := 0;
  $i346 := $load.i64($M.125,$p345);
  $i346.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p347 := $add.ref($add.ref($p344,$mul.ref(0,16)),$mul.ref(8,1));
  $p347.dup := $or.i1($or.i1($p344.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p347.dup := 0;
  $i348 := $load.i64($M.125,$p347);
  $i348.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  call $p349, $p349.dup := FStar_UInt128_add($i341, $i341.dup, $i343, $i343.dup, $i346, $i346.dup, $i348, $i348.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p350 := $bitcast.ref.ref($p36);
  $p350.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p351 := $add.ref($add.ref($p350,$mul.ref(0,16)),$mul.ref(0,1));
  $p351.dup := $or.i1($or.i1($p350.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $i352 := $extractvalue.i64($p349,0);
  $i352.dup := $or.i1($p349.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p351.dup := 0;
  $M.126 := $store.i64($M.126,$p351,$i352);
  $M.126.dup := $store.i1($M.126.dup,$p351,$i352.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p353 := $add.ref($add.ref($p350,$mul.ref(0,16)),$mul.ref(8,1));
  $p353.dup := $or.i1($or.i1($p350.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $i354 := $extractvalue.i64($p349,1);
  $i354.dup := $or.i1($p349.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p353.dup := 0;
  $M.126 := $store.i64($M.126,$p353,$i354);
  $M.126.dup := $store.i1($M.126.dup,$p353,$i354.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 112, 31} true;
  assume {:verifier.code 0} true;
  $p36.dup := 0;
  $i355 := $load.i128($M.126,$p36);
  $i355.dup := 0;
  call {:cexpr "o12"} boogie_si_record_i128($i355);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  call $p356, $p356.dup := FStar_UInt128_mul_wide($i134, $i134.dup, $i140, $i140.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  $p357 := $bitcast.ref.ref($p37);
  $p357.dup := $p37.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  $p358 := $add.ref($add.ref($p357,$mul.ref(0,16)),$mul.ref(0,1));
  $p358.dup := $or.i1($or.i1($p357.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  $i359 := $extractvalue.i64($p356,0);
  $i359.dup := $or.i1($p356.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  $p358.dup := 0;
  $M.127 := $store.i64($M.127,$p358,$i359);
  $M.127.dup := $store.i1($M.127.dup,$p358,$i359.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  $p360 := $add.ref($add.ref($p357,$mul.ref(0,16)),$mul.ref(8,1));
  $p360.dup := $or.i1($or.i1($p357.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  $i361 := $extractvalue.i64($p356,1);
  $i361.dup := $or.i1($p356.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  $p360.dup := 0;
  $M.127 := $store.i64($M.127,$p360,$i361);
  $M.127.dup := $store.i1($M.127.dup,$p360,$i361.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 54} true;
  assume {:verifier.code 0} true;
  $p37.dup := 0;
  $i362 := $load.i128($M.127,$p37);
  $i362.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p38.dup := 0;
  $M.128 := $store.i128($M.128,$p38,$i259);
  $M.128.dup := $store.i1($M.128.dup,$p38,$i259.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p363 := $bitcast.ref.ref($p38);
  $p363.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p364 := $add.ref($add.ref($p363,$mul.ref(0,16)),$mul.ref(0,1));
  $p364.dup := $or.i1($or.i1($p363.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p364.dup := 0;
  $i365 := $load.i64($M.128,$p364);
  $i365.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p366 := $add.ref($add.ref($p363,$mul.ref(0,16)),$mul.ref(8,1));
  $p366.dup := $or.i1($or.i1($p363.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p366.dup := 0;
  $i367 := $load.i64($M.128,$p366);
  $i367.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p39.dup := 0;
  $M.129 := $store.i128($M.129,$p39,$i362);
  $M.129.dup := $store.i1($M.129.dup,$p39,$i362.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p368 := $bitcast.ref.ref($p39);
  $p368.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p369 := $add.ref($add.ref($p368,$mul.ref(0,16)),$mul.ref(0,1));
  $p369.dup := $or.i1($or.i1($p368.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p369.dup := 0;
  $i370 := $load.i64($M.129,$p369);
  $i370.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p371 := $add.ref($add.ref($p368,$mul.ref(0,16)),$mul.ref(8,1));
  $p371.dup := $or.i1($or.i1($p368.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p371.dup := 0;
  $i372 := $load.i64($M.129,$p371);
  $i372.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  call $p373, $p373.dup := FStar_UInt128_add($i365, $i365.dup, $i367, $i367.dup, $i370, $i370.dup, $i372, $i372.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p374 := $bitcast.ref.ref($p40);
  $p374.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p375 := $add.ref($add.ref($p374,$mul.ref(0,16)),$mul.ref(0,1));
  $p375.dup := $or.i1($or.i1($p374.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $i376 := $extractvalue.i64($p373,0);
  $i376.dup := $or.i1($p373.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p375.dup := 0;
  $M.130 := $store.i64($M.130,$p375,$i376);
  $M.130.dup := $store.i1($M.130.dup,$p375,$i376.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p377 := $add.ref($add.ref($p374,$mul.ref(0,16)),$mul.ref(8,1));
  $p377.dup := $or.i1($or.i1($p374.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $i378 := $extractvalue.i64($p373,1);
  $i378.dup := $or.i1($p373.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p377.dup := 0;
  $M.130 := $store.i64($M.130,$p377,$i378);
  $M.130.dup := $store.i1($M.130.dup,$p377,$i378.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 113, 31} true;
  assume {:verifier.code 0} true;
  $p40.dup := 0;
  $i379 := $load.i128($M.130,$p40);
  $i379.dup := 0;
  call {:cexpr "o22"} boogie_si_record_i128($i379);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  call $p380, $p380.dup := FStar_UInt128_mul_wide($i134, $i134.dup, $i142, $i142.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  $p381 := $bitcast.ref.ref($p41);
  $p381.dup := $p41.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  $p382 := $add.ref($add.ref($p381,$mul.ref(0,16)),$mul.ref(0,1));
  $p382.dup := $or.i1($or.i1($p381.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  $i383 := $extractvalue.i64($p380,0);
  $i383.dup := $or.i1($p380.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  $p382.dup := 0;
  $M.131 := $store.i64($M.131,$p382,$i383);
  $M.131.dup := $store.i1($M.131.dup,$p382,$i383.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  $p384 := $add.ref($add.ref($p381,$mul.ref(0,16)),$mul.ref(8,1));
  $p384.dup := $or.i1($or.i1($p381.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  $i385 := $extractvalue.i64($p380,1);
  $i385.dup := $or.i1($p380.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  $p384.dup := 0;
  $M.131 := $store.i64($M.131,$p384,$i385);
  $M.131.dup := $store.i1($M.131.dup,$p384,$i385.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 54} true;
  assume {:verifier.code 0} true;
  $p41.dup := 0;
  $i386 := $load.i128($M.131,$p41);
  $i386.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p42.dup := 0;
  $M.132 := $store.i128($M.132,$p42,$i283);
  $M.132.dup := $store.i1($M.132.dup,$p42,$i283.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p387 := $bitcast.ref.ref($p42);
  $p387.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p388 := $add.ref($add.ref($p387,$mul.ref(0,16)),$mul.ref(0,1));
  $p388.dup := $or.i1($or.i1($p387.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p388.dup := 0;
  $i389 := $load.i64($M.132,$p388);
  $i389.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p390 := $add.ref($add.ref($p387,$mul.ref(0,16)),$mul.ref(8,1));
  $p390.dup := $or.i1($or.i1($p387.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p390.dup := 0;
  $i391 := $load.i64($M.132,$p390);
  $i391.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p43.dup := 0;
  $M.133 := $store.i128($M.133,$p43,$i386);
  $M.133.dup := $store.i1($M.133.dup,$p43,$i386.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p392 := $bitcast.ref.ref($p43);
  $p392.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p393 := $add.ref($add.ref($p392,$mul.ref(0,16)),$mul.ref(0,1));
  $p393.dup := $or.i1($or.i1($p392.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p393.dup := 0;
  $i394 := $load.i64($M.133,$p393);
  $i394.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p395 := $add.ref($add.ref($p392,$mul.ref(0,16)),$mul.ref(8,1));
  $p395.dup := $or.i1($or.i1($p392.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p395.dup := 0;
  $i396 := $load.i64($M.133,$p395);
  $i396.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  call $p397, $p397.dup := FStar_UInt128_add($i389, $i389.dup, $i391, $i391.dup, $i394, $i394.dup, $i396, $i396.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p398 := $bitcast.ref.ref($p44);
  $p398.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p399 := $add.ref($add.ref($p398,$mul.ref(0,16)),$mul.ref(0,1));
  $p399.dup := $or.i1($or.i1($p398.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $i400 := $extractvalue.i64($p397,0);
  $i400.dup := $or.i1($p397.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p399.dup := 0;
  $M.134 := $store.i64($M.134,$p399,$i400);
  $M.134.dup := $store.i1($M.134.dup,$p399,$i400.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p401 := $add.ref($add.ref($p398,$mul.ref(0,16)),$mul.ref(8,1));
  $p401.dup := $or.i1($or.i1($p398.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $i402 := $extractvalue.i64($p397,1);
  $i402.dup := $or.i1($p397.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p401.dup := 0;
  $M.134 := $store.i64($M.134,$p401,$i402);
  $M.134.dup := $store.i1($M.134.dup,$p401,$i402.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 114, 31} true;
  assume {:verifier.code 0} true;
  $p44.dup := 0;
  $i403 := $load.i128($M.134,$p44);
  $i403.dup := 0;
  call {:cexpr "o32"} boogie_si_record_i128($i403);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  call $p404, $p404.dup := FStar_UInt128_mul_wide($i134, $i134.dup, $i144, $i144.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  $p405 := $bitcast.ref.ref($p45);
  $p405.dup := $p45.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  $p406 := $add.ref($add.ref($p405,$mul.ref(0,16)),$mul.ref(0,1));
  $p406.dup := $or.i1($or.i1($p405.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  $i407 := $extractvalue.i64($p404,0);
  $i407.dup := $or.i1($p404.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  $p406.dup := 0;
  $M.135 := $store.i64($M.135,$p406,$i407);
  $M.135.dup := $store.i1($M.135.dup,$p406,$i407.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  $p408 := $add.ref($add.ref($p405,$mul.ref(0,16)),$mul.ref(8,1));
  $p408.dup := $or.i1($or.i1($p405.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  $i409 := $extractvalue.i64($p404,1);
  $i409.dup := $or.i1($p404.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  $p408.dup := 0;
  $M.135 := $store.i64($M.135,$p408,$i409);
  $M.135.dup := $store.i1($M.135.dup,$p408,$i409.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 54} true;
  assume {:verifier.code 0} true;
  $p45.dup := 0;
  $i410 := $load.i128($M.135,$p45);
  $i410.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p46.dup := 0;
  $M.136 := $store.i128($M.136,$p46,$i307);
  $M.136.dup := $store.i1($M.136.dup,$p46,$i307.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p411 := $bitcast.ref.ref($p46);
  $p411.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p412 := $add.ref($add.ref($p411,$mul.ref(0,16)),$mul.ref(0,1));
  $p412.dup := $or.i1($or.i1($p411.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p412.dup := 0;
  $i413 := $load.i64($M.136,$p412);
  $i413.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p414 := $add.ref($add.ref($p411,$mul.ref(0,16)),$mul.ref(8,1));
  $p414.dup := $or.i1($or.i1($p411.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p414.dup := 0;
  $i415 := $load.i64($M.136,$p414);
  $i415.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p47.dup := 0;
  $M.137 := $store.i128($M.137,$p47,$i410);
  $M.137.dup := $store.i1($M.137.dup,$p47,$i410.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p416 := $bitcast.ref.ref($p47);
  $p416.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p417 := $add.ref($add.ref($p416,$mul.ref(0,16)),$mul.ref(0,1));
  $p417.dup := $or.i1($or.i1($p416.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p417.dup := 0;
  $i418 := $load.i64($M.137,$p417);
  $i418.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p419 := $add.ref($add.ref($p416,$mul.ref(0,16)),$mul.ref(8,1));
  $p419.dup := $or.i1($or.i1($p416.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p419.dup := 0;
  $i420 := $load.i64($M.137,$p419);
  $i420.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  call $p421, $p421.dup := FStar_UInt128_add($i413, $i413.dup, $i415, $i415.dup, $i418, $i418.dup, $i420, $i420.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p422 := $bitcast.ref.ref($p48);
  $p422.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p423 := $add.ref($add.ref($p422,$mul.ref(0,16)),$mul.ref(0,1));
  $p423.dup := $or.i1($or.i1($p422.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $i424 := $extractvalue.i64($p421,0);
  $i424.dup := $or.i1($p421.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p423.dup := 0;
  $M.138 := $store.i64($M.138,$p423,$i424);
  $M.138.dup := $store.i1($M.138.dup,$p423,$i424.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p425 := $add.ref($add.ref($p422,$mul.ref(0,16)),$mul.ref(8,1));
  $p425.dup := $or.i1($or.i1($p422.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $i426 := $extractvalue.i64($p421,1);
  $i426.dup := $or.i1($p421.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p425.dup := 0;
  $M.138 := $store.i64($M.138,$p425,$i426);
  $M.138.dup := $store.i1($M.138.dup,$p425,$i426.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 115, 31} true;
  assume {:verifier.code 0} true;
  $p48.dup := 0;
  $i427 := $load.i128($M.138,$p48);
  $i427.dup := 0;
  call {:cexpr "o42"} boogie_si_record_i128($i427);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  call $p428, $p428.dup := FStar_UInt128_mul_wide($i136, $i136.dup, $i150, $i150.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  $p429 := $bitcast.ref.ref($p49);
  $p429.dup := $p49.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  $p430 := $add.ref($add.ref($p429,$mul.ref(0,16)),$mul.ref(0,1));
  $p430.dup := $or.i1($or.i1($p429.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  $i431 := $extractvalue.i64($p428,0);
  $i431.dup := $or.i1($p428.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  $p430.dup := 0;
  $M.139 := $store.i64($M.139,$p430,$i431);
  $M.139.dup := $store.i1($M.139.dup,$p430,$i431.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  $p432 := $add.ref($add.ref($p429,$mul.ref(0,16)),$mul.ref(8,1));
  $p432.dup := $or.i1($or.i1($p429.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  $i433 := $extractvalue.i64($p428,1);
  $i433.dup := $or.i1($p428.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  $p432.dup := 0;
  $M.139 := $store.i64($M.139,$p432,$i433);
  $M.139.dup := $store.i1($M.139.dup,$p432,$i433.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 54} true;
  assume {:verifier.code 0} true;
  $p49.dup := 0;
  $i434 := $load.i128($M.139,$p49);
  $i434.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p50.dup := 0;
  $M.140 := $store.i128($M.140,$p50,$i331);
  $M.140.dup := $store.i1($M.140.dup,$p50,$i331.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p435 := $bitcast.ref.ref($p50);
  $p435.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p436 := $add.ref($add.ref($p435,$mul.ref(0,16)),$mul.ref(0,1));
  $p436.dup := $or.i1($or.i1($p435.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p436.dup := 0;
  $i437 := $load.i64($M.140,$p436);
  $i437.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p438 := $add.ref($add.ref($p435,$mul.ref(0,16)),$mul.ref(8,1));
  $p438.dup := $or.i1($or.i1($p435.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p438.dup := 0;
  $i439 := $load.i64($M.140,$p438);
  $i439.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p51.dup := 0;
  $M.141 := $store.i128($M.141,$p51,$i434);
  $M.141.dup := $store.i1($M.141.dup,$p51,$i434.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p440 := $bitcast.ref.ref($p51);
  $p440.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p441 := $add.ref($add.ref($p440,$mul.ref(0,16)),$mul.ref(0,1));
  $p441.dup := $or.i1($or.i1($p440.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p441.dup := 0;
  $i442 := $load.i64($M.141,$p441);
  $i442.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p443 := $add.ref($add.ref($p440,$mul.ref(0,16)),$mul.ref(8,1));
  $p443.dup := $or.i1($or.i1($p440.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p443.dup := 0;
  $i444 := $load.i64($M.141,$p443);
  $i444.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  call $p445, $p445.dup := FStar_UInt128_add($i437, $i437.dup, $i439, $i439.dup, $i442, $i442.dup, $i444, $i444.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p446 := $bitcast.ref.ref($p52);
  $p446.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p447 := $add.ref($add.ref($p446,$mul.ref(0,16)),$mul.ref(0,1));
  $p447.dup := $or.i1($or.i1($p446.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $i448 := $extractvalue.i64($p445,0);
  $i448.dup := $or.i1($p445.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p447.dup := 0;
  $M.142 := $store.i64($M.142,$p447,$i448);
  $M.142.dup := $store.i1($M.142.dup,$p447,$i448.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p449 := $add.ref($add.ref($p446,$mul.ref(0,16)),$mul.ref(8,1));
  $p449.dup := $or.i1($or.i1($p446.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $i450 := $extractvalue.i64($p445,1);
  $i450.dup := $or.i1($p445.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p449.dup := 0;
  $M.142 := $store.i64($M.142,$p449,$i450);
  $M.142.dup := $store.i1($M.142.dup,$p449,$i450.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 116, 31} true;
  assume {:verifier.code 0} true;
  $p52.dup := 0;
  $i451 := $load.i128($M.142,$p52);
  $i451.dup := 0;
  call {:cexpr "o03"} boogie_si_record_i128($i451);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  call $p452, $p452.dup := FStar_UInt128_mul_wide($i136, $i136.dup, $i151, $i151.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  $p453 := $bitcast.ref.ref($p53);
  $p453.dup := $p53.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  $p454 := $add.ref($add.ref($p453,$mul.ref(0,16)),$mul.ref(0,1));
  $p454.dup := $or.i1($or.i1($p453.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  $i455 := $extractvalue.i64($p452,0);
  $i455.dup := $or.i1($p452.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  $p454.dup := 0;
  $M.143 := $store.i64($M.143,$p454,$i455);
  $M.143.dup := $store.i1($M.143.dup,$p454,$i455.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  $p456 := $add.ref($add.ref($p453,$mul.ref(0,16)),$mul.ref(8,1));
  $p456.dup := $or.i1($or.i1($p453.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  $i457 := $extractvalue.i64($p452,1);
  $i457.dup := $or.i1($p452.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  $p456.dup := 0;
  $M.143 := $store.i64($M.143,$p456,$i457);
  $M.143.dup := $store.i1($M.143.dup,$p456,$i457.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 54} true;
  assume {:verifier.code 0} true;
  $p53.dup := 0;
  $i458 := $load.i128($M.143,$p53);
  $i458.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p54.dup := 0;
  $M.144 := $store.i128($M.144,$p54,$i355);
  $M.144.dup := $store.i1($M.144.dup,$p54,$i355.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p459 := $bitcast.ref.ref($p54);
  $p459.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p460 := $add.ref($add.ref($p459,$mul.ref(0,16)),$mul.ref(0,1));
  $p460.dup := $or.i1($or.i1($p459.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p460.dup := 0;
  $i461 := $load.i64($M.144,$p460);
  $i461.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p462 := $add.ref($add.ref($p459,$mul.ref(0,16)),$mul.ref(8,1));
  $p462.dup := $or.i1($or.i1($p459.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p462.dup := 0;
  $i463 := $load.i64($M.144,$p462);
  $i463.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p55.dup := 0;
  $M.145 := $store.i128($M.145,$p55,$i458);
  $M.145.dup := $store.i1($M.145.dup,$p55,$i458.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p464 := $bitcast.ref.ref($p55);
  $p464.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p465 := $add.ref($add.ref($p464,$mul.ref(0,16)),$mul.ref(0,1));
  $p465.dup := $or.i1($or.i1($p464.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p465.dup := 0;
  $i466 := $load.i64($M.145,$p465);
  $i466.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p467 := $add.ref($add.ref($p464,$mul.ref(0,16)),$mul.ref(8,1));
  $p467.dup := $or.i1($or.i1($p464.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p467.dup := 0;
  $i468 := $load.i64($M.145,$p467);
  $i468.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  call $p469, $p469.dup := FStar_UInt128_add($i461, $i461.dup, $i463, $i463.dup, $i466, $i466.dup, $i468, $i468.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p470 := $bitcast.ref.ref($p56);
  $p470.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p471 := $add.ref($add.ref($p470,$mul.ref(0,16)),$mul.ref(0,1));
  $p471.dup := $or.i1($or.i1($p470.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $i472 := $extractvalue.i64($p469,0);
  $i472.dup := $or.i1($p469.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p471.dup := 0;
  $M.146 := $store.i64($M.146,$p471,$i472);
  $M.146.dup := $store.i1($M.146.dup,$p471,$i472.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p473 := $add.ref($add.ref($p470,$mul.ref(0,16)),$mul.ref(8,1));
  $p473.dup := $or.i1($or.i1($p470.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $i474 := $extractvalue.i64($p469,1);
  $i474.dup := $or.i1($p469.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p473.dup := 0;
  $M.146 := $store.i64($M.146,$p473,$i474);
  $M.146.dup := $store.i1($M.146.dup,$p473,$i474.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 117, 31} true;
  assume {:verifier.code 0} true;
  $p56.dup := 0;
  $i475 := $load.i128($M.146,$p56);
  $i475.dup := 0;
  call {:cexpr "o13"} boogie_si_record_i128($i475);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  call $p476, $p476.dup := FStar_UInt128_mul_wide($i136, $i136.dup, $i152, $i152.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  $p477 := $bitcast.ref.ref($p57);
  $p477.dup := $p57.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  $p478 := $add.ref($add.ref($p477,$mul.ref(0,16)),$mul.ref(0,1));
  $p478.dup := $or.i1($or.i1($p477.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  $i479 := $extractvalue.i64($p476,0);
  $i479.dup := $or.i1($p476.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  $p478.dup := 0;
  $M.147 := $store.i64($M.147,$p478,$i479);
  $M.147.dup := $store.i1($M.147.dup,$p478,$i479.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  $p480 := $add.ref($add.ref($p477,$mul.ref(0,16)),$mul.ref(8,1));
  $p480.dup := $or.i1($or.i1($p477.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  $i481 := $extractvalue.i64($p476,1);
  $i481.dup := $or.i1($p476.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  $p480.dup := 0;
  $M.147 := $store.i64($M.147,$p480,$i481);
  $M.147.dup := $store.i1($M.147.dup,$p480,$i481.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 54} true;
  assume {:verifier.code 0} true;
  $p57.dup := 0;
  $i482 := $load.i128($M.147,$p57);
  $i482.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p58.dup := 0;
  $M.148 := $store.i128($M.148,$p58,$i379);
  $M.148.dup := $store.i1($M.148.dup,$p58,$i379.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p483 := $bitcast.ref.ref($p58);
  $p483.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p484 := $add.ref($add.ref($p483,$mul.ref(0,16)),$mul.ref(0,1));
  $p484.dup := $or.i1($or.i1($p483.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p484.dup := 0;
  $i485 := $load.i64($M.148,$p484);
  $i485.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p486 := $add.ref($add.ref($p483,$mul.ref(0,16)),$mul.ref(8,1));
  $p486.dup := $or.i1($or.i1($p483.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p486.dup := 0;
  $i487 := $load.i64($M.148,$p486);
  $i487.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p59.dup := 0;
  $M.149 := $store.i128($M.149,$p59,$i482);
  $M.149.dup := $store.i1($M.149.dup,$p59,$i482.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p488 := $bitcast.ref.ref($p59);
  $p488.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p489 := $add.ref($add.ref($p488,$mul.ref(0,16)),$mul.ref(0,1));
  $p489.dup := $or.i1($or.i1($p488.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p489.dup := 0;
  $i490 := $load.i64($M.149,$p489);
  $i490.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p491 := $add.ref($add.ref($p488,$mul.ref(0,16)),$mul.ref(8,1));
  $p491.dup := $or.i1($or.i1($p488.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p491.dup := 0;
  $i492 := $load.i64($M.149,$p491);
  $i492.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  call $p493, $p493.dup := FStar_UInt128_add($i485, $i485.dup, $i487, $i487.dup, $i490, $i490.dup, $i492, $i492.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p494 := $bitcast.ref.ref($p60);
  $p494.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p495 := $add.ref($add.ref($p494,$mul.ref(0,16)),$mul.ref(0,1));
  $p495.dup := $or.i1($or.i1($p494.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $i496 := $extractvalue.i64($p493,0);
  $i496.dup := $or.i1($p493.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p495.dup := 0;
  $M.150 := $store.i64($M.150,$p495,$i496);
  $M.150.dup := $store.i1($M.150.dup,$p495,$i496.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p497 := $add.ref($add.ref($p494,$mul.ref(0,16)),$mul.ref(8,1));
  $p497.dup := $or.i1($or.i1($p494.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $i498 := $extractvalue.i64($p493,1);
  $i498.dup := $or.i1($p493.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p497.dup := 0;
  $M.150 := $store.i64($M.150,$p497,$i498);
  $M.150.dup := $store.i1($M.150.dup,$p497,$i498.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 118, 31} true;
  assume {:verifier.code 0} true;
  $p60.dup := 0;
  $i499 := $load.i128($M.150,$p60);
  $i499.dup := 0;
  call {:cexpr "o23"} boogie_si_record_i128($i499);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  call $p500, $p500.dup := FStar_UInt128_mul_wide($i136, $i136.dup, $i140, $i140.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  $p501 := $bitcast.ref.ref($p61);
  $p501.dup := $p61.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  $p502 := $add.ref($add.ref($p501,$mul.ref(0,16)),$mul.ref(0,1));
  $p502.dup := $or.i1($or.i1($p501.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  $i503 := $extractvalue.i64($p500,0);
  $i503.dup := $or.i1($p500.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  $p502.dup := 0;
  $M.151 := $store.i64($M.151,$p502,$i503);
  $M.151.dup := $store.i1($M.151.dup,$p502,$i503.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  $p504 := $add.ref($add.ref($p501,$mul.ref(0,16)),$mul.ref(8,1));
  $p504.dup := $or.i1($or.i1($p501.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  $i505 := $extractvalue.i64($p500,1);
  $i505.dup := $or.i1($p500.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  $p504.dup := 0;
  $M.151 := $store.i64($M.151,$p504,$i505);
  $M.151.dup := $store.i1($M.151.dup,$p504,$i505.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 54} true;
  assume {:verifier.code 0} true;
  $p61.dup := 0;
  $i506 := $load.i128($M.151,$p61);
  $i506.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p62.dup := 0;
  $M.152 := $store.i128($M.152,$p62,$i403);
  $M.152.dup := $store.i1($M.152.dup,$p62,$i403.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p507 := $bitcast.ref.ref($p62);
  $p507.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p508 := $add.ref($add.ref($p507,$mul.ref(0,16)),$mul.ref(0,1));
  $p508.dup := $or.i1($or.i1($p507.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p508.dup := 0;
  $i509 := $load.i64($M.152,$p508);
  $i509.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p510 := $add.ref($add.ref($p507,$mul.ref(0,16)),$mul.ref(8,1));
  $p510.dup := $or.i1($or.i1($p507.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p510.dup := 0;
  $i511 := $load.i64($M.152,$p510);
  $i511.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p63.dup := 0;
  $M.153 := $store.i128($M.153,$p63,$i506);
  $M.153.dup := $store.i1($M.153.dup,$p63,$i506.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p512 := $bitcast.ref.ref($p63);
  $p512.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p513 := $add.ref($add.ref($p512,$mul.ref(0,16)),$mul.ref(0,1));
  $p513.dup := $or.i1($or.i1($p512.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p513.dup := 0;
  $i514 := $load.i64($M.153,$p513);
  $i514.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p515 := $add.ref($add.ref($p512,$mul.ref(0,16)),$mul.ref(8,1));
  $p515.dup := $or.i1($or.i1($p512.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p515.dup := 0;
  $i516 := $load.i64($M.153,$p515);
  $i516.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  call $p517, $p517.dup := FStar_UInt128_add($i509, $i509.dup, $i511, $i511.dup, $i514, $i514.dup, $i516, $i516.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p518 := $bitcast.ref.ref($p64);
  $p518.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p519 := $add.ref($add.ref($p518,$mul.ref(0,16)),$mul.ref(0,1));
  $p519.dup := $or.i1($or.i1($p518.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $i520 := $extractvalue.i64($p517,0);
  $i520.dup := $or.i1($p517.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p519.dup := 0;
  $M.154 := $store.i64($M.154,$p519,$i520);
  $M.154.dup := $store.i1($M.154.dup,$p519,$i520.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p521 := $add.ref($add.ref($p518,$mul.ref(0,16)),$mul.ref(8,1));
  $p521.dup := $or.i1($or.i1($p518.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $i522 := $extractvalue.i64($p517,1);
  $i522.dup := $or.i1($p517.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p521.dup := 0;
  $M.154 := $store.i64($M.154,$p521,$i522);
  $M.154.dup := $store.i1($M.154.dup,$p521,$i522.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 119, 31} true;
  assume {:verifier.code 0} true;
  $p64.dup := 0;
  $i523 := $load.i128($M.154,$p64);
  $i523.dup := 0;
  call {:cexpr "o33"} boogie_si_record_i128($i523);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  call $p524, $p524.dup := FStar_UInt128_mul_wide($i136, $i136.dup, $i142, $i142.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  $p525 := $bitcast.ref.ref($p65);
  $p525.dup := $p65.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  $p526 := $add.ref($add.ref($p525,$mul.ref(0,16)),$mul.ref(0,1));
  $p526.dup := $or.i1($or.i1($p525.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  $i527 := $extractvalue.i64($p524,0);
  $i527.dup := $or.i1($p524.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  $p526.dup := 0;
  $M.155 := $store.i64($M.155,$p526,$i527);
  $M.155.dup := $store.i1($M.155.dup,$p526,$i527.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  $p528 := $add.ref($add.ref($p525,$mul.ref(0,16)),$mul.ref(8,1));
  $p528.dup := $or.i1($or.i1($p525.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  $i529 := $extractvalue.i64($p524,1);
  $i529.dup := $or.i1($p524.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  $p528.dup := 0;
  $M.155 := $store.i64($M.155,$p528,$i529);
  $M.155.dup := $store.i1($M.155.dup,$p528,$i529.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 54} true;
  assume {:verifier.code 0} true;
  $p65.dup := 0;
  $i530 := $load.i128($M.155,$p65);
  $i530.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p66.dup := 0;
  $M.156 := $store.i128($M.156,$p66,$i427);
  $M.156.dup := $store.i1($M.156.dup,$p66,$i427.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p531 := $bitcast.ref.ref($p66);
  $p531.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p532 := $add.ref($add.ref($p531,$mul.ref(0,16)),$mul.ref(0,1));
  $p532.dup := $or.i1($or.i1($p531.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p532.dup := 0;
  $i533 := $load.i64($M.156,$p532);
  $i533.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p534 := $add.ref($add.ref($p531,$mul.ref(0,16)),$mul.ref(8,1));
  $p534.dup := $or.i1($or.i1($p531.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p534.dup := 0;
  $i535 := $load.i64($M.156,$p534);
  $i535.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p67.dup := 0;
  $M.157 := $store.i128($M.157,$p67,$i530);
  $M.157.dup := $store.i1($M.157.dup,$p67,$i530.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p536 := $bitcast.ref.ref($p67);
  $p536.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p537 := $add.ref($add.ref($p536,$mul.ref(0,16)),$mul.ref(0,1));
  $p537.dup := $or.i1($or.i1($p536.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p537.dup := 0;
  $i538 := $load.i64($M.157,$p537);
  $i538.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p539 := $add.ref($add.ref($p536,$mul.ref(0,16)),$mul.ref(8,1));
  $p539.dup := $or.i1($or.i1($p536.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p539.dup := 0;
  $i540 := $load.i64($M.157,$p539);
  $i540.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  call $p541, $p541.dup := FStar_UInt128_add($i533, $i533.dup, $i535, $i535.dup, $i538, $i538.dup, $i540, $i540.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p542 := $bitcast.ref.ref($p68);
  $p542.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p543 := $add.ref($add.ref($p542,$mul.ref(0,16)),$mul.ref(0,1));
  $p543.dup := $or.i1($or.i1($p542.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $i544 := $extractvalue.i64($p541,0);
  $i544.dup := $or.i1($p541.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p543.dup := 0;
  $M.158 := $store.i64($M.158,$p543,$i544);
  $M.158.dup := $store.i1($M.158.dup,$p543,$i544.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p545 := $add.ref($add.ref($p542,$mul.ref(0,16)),$mul.ref(8,1));
  $p545.dup := $or.i1($or.i1($p542.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $i546 := $extractvalue.i64($p541,1);
  $i546.dup := $or.i1($p541.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p545.dup := 0;
  $M.158 := $store.i64($M.158,$p545,$i546);
  $M.158.dup := $store.i1($M.158.dup,$p545,$i546.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 120, 31} true;
  assume {:verifier.code 0} true;
  $p68.dup := 0;
  $i547 := $load.i128($M.158,$p68);
  $i547.dup := 0;
  call {:cexpr "o43"} boogie_si_record_i128($i547);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  call $p548, $p548.dup := FStar_UInt128_mul_wide($i138, $i138.dup, $i149, $i149.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  $p549 := $bitcast.ref.ref($p69);
  $p549.dup := $p69.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  $p550 := $add.ref($add.ref($p549,$mul.ref(0,16)),$mul.ref(0,1));
  $p550.dup := $or.i1($or.i1($p549.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  $i551 := $extractvalue.i64($p548,0);
  $i551.dup := $or.i1($p548.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  $p550.dup := 0;
  $M.159 := $store.i64($M.159,$p550,$i551);
  $M.159.dup := $store.i1($M.159.dup,$p550,$i551.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  $p552 := $add.ref($add.ref($p549,$mul.ref(0,16)),$mul.ref(8,1));
  $p552.dup := $or.i1($or.i1($p549.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  $i553 := $extractvalue.i64($p548,1);
  $i553.dup := $or.i1($p548.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  $p552.dup := 0;
  $M.159 := $store.i64($M.159,$p552,$i553);
  $M.159.dup := $store.i1($M.159.dup,$p552,$i553.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 54} true;
  assume {:verifier.code 0} true;
  $p69.dup := 0;
  $i554 := $load.i128($M.159,$p69);
  $i554.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p70.dup := 0;
  $M.160 := $store.i128($M.160,$p70,$i451);
  $M.160.dup := $store.i1($M.160.dup,$p70,$i451.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p555 := $bitcast.ref.ref($p70);
  $p555.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p556 := $add.ref($add.ref($p555,$mul.ref(0,16)),$mul.ref(0,1));
  $p556.dup := $or.i1($or.i1($p555.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p556.dup := 0;
  $i557 := $load.i64($M.160,$p556);
  $i557.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p558 := $add.ref($add.ref($p555,$mul.ref(0,16)),$mul.ref(8,1));
  $p558.dup := $or.i1($or.i1($p555.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p558.dup := 0;
  $i559 := $load.i64($M.160,$p558);
  $i559.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p71.dup := 0;
  $M.161 := $store.i128($M.161,$p71,$i554);
  $M.161.dup := $store.i1($M.161.dup,$p71,$i554.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p560 := $bitcast.ref.ref($p71);
  $p560.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p561 := $add.ref($add.ref($p560,$mul.ref(0,16)),$mul.ref(0,1));
  $p561.dup := $or.i1($or.i1($p560.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p561.dup := 0;
  $i562 := $load.i64($M.161,$p561);
  $i562.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p563 := $add.ref($add.ref($p560,$mul.ref(0,16)),$mul.ref(8,1));
  $p563.dup := $or.i1($or.i1($p560.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p563.dup := 0;
  $i564 := $load.i64($M.161,$p563);
  $i564.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  call $p565, $p565.dup := FStar_UInt128_add($i557, $i557.dup, $i559, $i559.dup, $i562, $i562.dup, $i564, $i564.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p566 := $bitcast.ref.ref($p72);
  $p566.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p567 := $add.ref($add.ref($p566,$mul.ref(0,16)),$mul.ref(0,1));
  $p567.dup := $or.i1($or.i1($p566.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $i568 := $extractvalue.i64($p565,0);
  $i568.dup := $or.i1($p565.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p567.dup := 0;
  $M.162 := $store.i64($M.162,$p567,$i568);
  $M.162.dup := $store.i1($M.162.dup,$p567,$i568.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p569 := $add.ref($add.ref($p566,$mul.ref(0,16)),$mul.ref(8,1));
  $p569.dup := $or.i1($or.i1($p566.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $i570 := $extractvalue.i64($p565,1);
  $i570.dup := $or.i1($p565.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p569.dup := 0;
  $M.162 := $store.i64($M.162,$p569,$i570);
  $M.162.dup := $store.i1($M.162.dup,$p569,$i570.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 121, 31} true;
  assume {:verifier.code 0} true;
  $p72.dup := 0;
  $i571 := $load.i128($M.162,$p72);
  $i571.dup := 0;
  call {:cexpr "o04"} boogie_si_record_i128($i571);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  call $p572, $p572.dup := FStar_UInt128_mul_wide($i138, $i138.dup, $i150, $i150.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  $p573 := $bitcast.ref.ref($p73);
  $p573.dup := $p73.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  $p574 := $add.ref($add.ref($p573,$mul.ref(0,16)),$mul.ref(0,1));
  $p574.dup := $or.i1($or.i1($p573.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  $i575 := $extractvalue.i64($p572,0);
  $i575.dup := $or.i1($p572.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  $p574.dup := 0;
  $M.163 := $store.i64($M.163,$p574,$i575);
  $M.163.dup := $store.i1($M.163.dup,$p574,$i575.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  $p576 := $add.ref($add.ref($p573,$mul.ref(0,16)),$mul.ref(8,1));
  $p576.dup := $or.i1($or.i1($p573.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  $i577 := $extractvalue.i64($p572,1);
  $i577.dup := $or.i1($p572.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  $p576.dup := 0;
  $M.163 := $store.i64($M.163,$p576,$i577);
  $M.163.dup := $store.i1($M.163.dup,$p576,$i577.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 54} true;
  assume {:verifier.code 0} true;
  $p73.dup := 0;
  $i578 := $load.i128($M.163,$p73);
  $i578.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p74.dup := 0;
  $M.164 := $store.i128($M.164,$p74,$i475);
  $M.164.dup := $store.i1($M.164.dup,$p74,$i475.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p579 := $bitcast.ref.ref($p74);
  $p579.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p580 := $add.ref($add.ref($p579,$mul.ref(0,16)),$mul.ref(0,1));
  $p580.dup := $or.i1($or.i1($p579.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p580.dup := 0;
  $i581 := $load.i64($M.164,$p580);
  $i581.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p582 := $add.ref($add.ref($p579,$mul.ref(0,16)),$mul.ref(8,1));
  $p582.dup := $or.i1($or.i1($p579.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p582.dup := 0;
  $i583 := $load.i64($M.164,$p582);
  $i583.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p75.dup := 0;
  $M.165 := $store.i128($M.165,$p75,$i578);
  $M.165.dup := $store.i1($M.165.dup,$p75,$i578.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p584 := $bitcast.ref.ref($p75);
  $p584.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p585 := $add.ref($add.ref($p584,$mul.ref(0,16)),$mul.ref(0,1));
  $p585.dup := $or.i1($or.i1($p584.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p585.dup := 0;
  $i586 := $load.i64($M.165,$p585);
  $i586.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p587 := $add.ref($add.ref($p584,$mul.ref(0,16)),$mul.ref(8,1));
  $p587.dup := $or.i1($or.i1($p584.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p587.dup := 0;
  $i588 := $load.i64($M.165,$p587);
  $i588.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  call $p589, $p589.dup := FStar_UInt128_add($i581, $i581.dup, $i583, $i583.dup, $i586, $i586.dup, $i588, $i588.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p590 := $bitcast.ref.ref($p76);
  $p590.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p591 := $add.ref($add.ref($p590,$mul.ref(0,16)),$mul.ref(0,1));
  $p591.dup := $or.i1($or.i1($p590.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $i592 := $extractvalue.i64($p589,0);
  $i592.dup := $or.i1($p589.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p591.dup := 0;
  $M.166 := $store.i64($M.166,$p591,$i592);
  $M.166.dup := $store.i1($M.166.dup,$p591,$i592.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p593 := $add.ref($add.ref($p590,$mul.ref(0,16)),$mul.ref(8,1));
  $p593.dup := $or.i1($or.i1($p590.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $i594 := $extractvalue.i64($p589,1);
  $i594.dup := $or.i1($p589.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p593.dup := 0;
  $M.166 := $store.i64($M.166,$p593,$i594);
  $M.166.dup := $store.i1($M.166.dup,$p593,$i594.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 122, 31} true;
  assume {:verifier.code 0} true;
  $p76.dup := 0;
  $i595 := $load.i128($M.166,$p76);
  $i595.dup := 0;
  call {:cexpr "o14"} boogie_si_record_i128($i595);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  call $p596, $p596.dup := FStar_UInt128_mul_wide($i138, $i138.dup, $i151, $i151.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  $p597 := $bitcast.ref.ref($p77);
  $p597.dup := $p77.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  $p598 := $add.ref($add.ref($p597,$mul.ref(0,16)),$mul.ref(0,1));
  $p598.dup := $or.i1($or.i1($p597.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  $i599 := $extractvalue.i64($p596,0);
  $i599.dup := $or.i1($p596.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  $p598.dup := 0;
  $M.167 := $store.i64($M.167,$p598,$i599);
  $M.167.dup := $store.i1($M.167.dup,$p598,$i599.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  $p600 := $add.ref($add.ref($p597,$mul.ref(0,16)),$mul.ref(8,1));
  $p600.dup := $or.i1($or.i1($p597.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  $i601 := $extractvalue.i64($p596,1);
  $i601.dup := $or.i1($p596.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  $p600.dup := 0;
  $M.167 := $store.i64($M.167,$p600,$i601);
  $M.167.dup := $store.i1($M.167.dup,$p600,$i601.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 54} true;
  assume {:verifier.code 0} true;
  $p77.dup := 0;
  $i602 := $load.i128($M.167,$p77);
  $i602.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p78.dup := 0;
  $M.168 := $store.i128($M.168,$p78,$i499);
  $M.168.dup := $store.i1($M.168.dup,$p78,$i499.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p603 := $bitcast.ref.ref($p78);
  $p603.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p604 := $add.ref($add.ref($p603,$mul.ref(0,16)),$mul.ref(0,1));
  $p604.dup := $or.i1($or.i1($p603.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p604.dup := 0;
  $i605 := $load.i64($M.168,$p604);
  $i605.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p606 := $add.ref($add.ref($p603,$mul.ref(0,16)),$mul.ref(8,1));
  $p606.dup := $or.i1($or.i1($p603.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p606.dup := 0;
  $i607 := $load.i64($M.168,$p606);
  $i607.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p79.dup := 0;
  $M.169 := $store.i128($M.169,$p79,$i602);
  $M.169.dup := $store.i1($M.169.dup,$p79,$i602.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p608 := $bitcast.ref.ref($p79);
  $p608.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p609 := $add.ref($add.ref($p608,$mul.ref(0,16)),$mul.ref(0,1));
  $p609.dup := $or.i1($or.i1($p608.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p609.dup := 0;
  $i610 := $load.i64($M.169,$p609);
  $i610.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p611 := $add.ref($add.ref($p608,$mul.ref(0,16)),$mul.ref(8,1));
  $p611.dup := $or.i1($or.i1($p608.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p611.dup := 0;
  $i612 := $load.i64($M.169,$p611);
  $i612.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  call $p613, $p613.dup := FStar_UInt128_add($i605, $i605.dup, $i607, $i607.dup, $i610, $i610.dup, $i612, $i612.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p614 := $bitcast.ref.ref($p80);
  $p614.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p615 := $add.ref($add.ref($p614,$mul.ref(0,16)),$mul.ref(0,1));
  $p615.dup := $or.i1($or.i1($p614.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $i616 := $extractvalue.i64($p613,0);
  $i616.dup := $or.i1($p613.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p615.dup := 0;
  $M.170 := $store.i64($M.170,$p615,$i616);
  $M.170.dup := $store.i1($M.170.dup,$p615,$i616.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p617 := $add.ref($add.ref($p614,$mul.ref(0,16)),$mul.ref(8,1));
  $p617.dup := $or.i1($or.i1($p614.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $i618 := $extractvalue.i64($p613,1);
  $i618.dup := $or.i1($p613.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p617.dup := 0;
  $M.170 := $store.i64($M.170,$p617,$i618);
  $M.170.dup := $store.i1($M.170.dup,$p617,$i618.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 123, 31} true;
  assume {:verifier.code 0} true;
  $p80.dup := 0;
  $i619 := $load.i128($M.170,$p80);
  $i619.dup := 0;
  call {:cexpr "o24"} boogie_si_record_i128($i619);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  call $p620, $p620.dup := FStar_UInt128_mul_wide($i138, $i138.dup, $i152, $i152.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  $p621 := $bitcast.ref.ref($p81);
  $p621.dup := $p81.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  $p622 := $add.ref($add.ref($p621,$mul.ref(0,16)),$mul.ref(0,1));
  $p622.dup := $or.i1($or.i1($p621.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  $i623 := $extractvalue.i64($p620,0);
  $i623.dup := $or.i1($p620.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  $p622.dup := 0;
  $M.171 := $store.i64($M.171,$p622,$i623);
  $M.171.dup := $store.i1($M.171.dup,$p622,$i623.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  $p624 := $add.ref($add.ref($p621,$mul.ref(0,16)),$mul.ref(8,1));
  $p624.dup := $or.i1($or.i1($p621.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  $i625 := $extractvalue.i64($p620,1);
  $i625.dup := $or.i1($p620.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  $p624.dup := 0;
  $M.171 := $store.i64($M.171,$p624,$i625);
  $M.171.dup := $store.i1($M.171.dup,$p624,$i625.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 54} true;
  assume {:verifier.code 0} true;
  $p81.dup := 0;
  $i626 := $load.i128($M.171,$p81);
  $i626.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p82.dup := 0;
  $M.172 := $store.i128($M.172,$p82,$i523);
  $M.172.dup := $store.i1($M.172.dup,$p82,$i523.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p627 := $bitcast.ref.ref($p82);
  $p627.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p628 := $add.ref($add.ref($p627,$mul.ref(0,16)),$mul.ref(0,1));
  $p628.dup := $or.i1($or.i1($p627.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p628.dup := 0;
  $i629 := $load.i64($M.172,$p628);
  $i629.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p630 := $add.ref($add.ref($p627,$mul.ref(0,16)),$mul.ref(8,1));
  $p630.dup := $or.i1($or.i1($p627.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p630.dup := 0;
  $i631 := $load.i64($M.172,$p630);
  $i631.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p83.dup := 0;
  $M.173 := $store.i128($M.173,$p83,$i626);
  $M.173.dup := $store.i1($M.173.dup,$p83,$i626.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p632 := $bitcast.ref.ref($p83);
  $p632.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p633 := $add.ref($add.ref($p632,$mul.ref(0,16)),$mul.ref(0,1));
  $p633.dup := $or.i1($or.i1($p632.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p633.dup := 0;
  $i634 := $load.i64($M.173,$p633);
  $i634.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p635 := $add.ref($add.ref($p632,$mul.ref(0,16)),$mul.ref(8,1));
  $p635.dup := $or.i1($or.i1($p632.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p635.dup := 0;
  $i636 := $load.i64($M.173,$p635);
  $i636.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  call $p637, $p637.dup := FStar_UInt128_add($i629, $i629.dup, $i631, $i631.dup, $i634, $i634.dup, $i636, $i636.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p638 := $bitcast.ref.ref($p84);
  $p638.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p639 := $add.ref($add.ref($p638,$mul.ref(0,16)),$mul.ref(0,1));
  $p639.dup := $or.i1($or.i1($p638.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $i640 := $extractvalue.i64($p637,0);
  $i640.dup := $or.i1($p637.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p639.dup := 0;
  $M.174 := $store.i64($M.174,$p639,$i640);
  $M.174.dup := $store.i1($M.174.dup,$p639,$i640.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p641 := $add.ref($add.ref($p638,$mul.ref(0,16)),$mul.ref(8,1));
  $p641.dup := $or.i1($or.i1($p638.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $i642 := $extractvalue.i64($p637,1);
  $i642.dup := $or.i1($p637.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p641.dup := 0;
  $M.174 := $store.i64($M.174,$p641,$i642);
  $M.174.dup := $store.i1($M.174.dup,$p641,$i642.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 124, 31} true;
  assume {:verifier.code 0} true;
  $p84.dup := 0;
  $i643 := $load.i128($M.174,$p84);
  $i643.dup := 0;
  call {:cexpr "o34"} boogie_si_record_i128($i643);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  call $p644, $p644.dup := FStar_UInt128_mul_wide($i138, $i138.dup, $i140, $i140.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  $p645 := $bitcast.ref.ref($p85);
  $p645.dup := $p85.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  $p646 := $add.ref($add.ref($p645,$mul.ref(0,16)),$mul.ref(0,1));
  $p646.dup := $or.i1($or.i1($p645.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  $i647 := $extractvalue.i64($p644,0);
  $i647.dup := $or.i1($p644.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  $p646.dup := 0;
  $M.175 := $store.i64($M.175,$p646,$i647);
  $M.175.dup := $store.i1($M.175.dup,$p646,$i647.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  $p648 := $add.ref($add.ref($p645,$mul.ref(0,16)),$mul.ref(8,1));
  $p648.dup := $or.i1($or.i1($p645.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  $i649 := $extractvalue.i64($p644,1);
  $i649.dup := $or.i1($p644.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  $p648.dup := 0;
  $M.175 := $store.i64($M.175,$p648,$i649);
  $M.175.dup := $store.i1($M.175.dup,$p648,$i649.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 54} true;
  assume {:verifier.code 0} true;
  $p85.dup := 0;
  $i650 := $load.i128($M.175,$p85);
  $i650.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p86.dup := 0;
  $M.176 := $store.i128($M.176,$p86,$i547);
  $M.176.dup := $store.i1($M.176.dup,$p86,$i547.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p651 := $bitcast.ref.ref($p86);
  $p651.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p652 := $add.ref($add.ref($p651,$mul.ref(0,16)),$mul.ref(0,1));
  $p652.dup := $or.i1($or.i1($p651.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p652.dup := 0;
  $i653 := $load.i64($M.176,$p652);
  $i653.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p654 := $add.ref($add.ref($p651,$mul.ref(0,16)),$mul.ref(8,1));
  $p654.dup := $or.i1($or.i1($p651.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p654.dup := 0;
  $i655 := $load.i64($M.176,$p654);
  $i655.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p87.dup := 0;
  $M.177 := $store.i128($M.177,$p87,$i650);
  $M.177.dup := $store.i1($M.177.dup,$p87,$i650.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p656 := $bitcast.ref.ref($p87);
  $p656.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p657 := $add.ref($add.ref($p656,$mul.ref(0,16)),$mul.ref(0,1));
  $p657.dup := $or.i1($or.i1($p656.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p657.dup := 0;
  $i658 := $load.i64($M.177,$p657);
  $i658.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p659 := $add.ref($add.ref($p656,$mul.ref(0,16)),$mul.ref(8,1));
  $p659.dup := $or.i1($or.i1($p656.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p659.dup := 0;
  $i660 := $load.i64($M.177,$p659);
  $i660.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  call $p661, $p661.dup := FStar_UInt128_add($i653, $i653.dup, $i655, $i655.dup, $i658, $i658.dup, $i660, $i660.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p662 := $bitcast.ref.ref($p88);
  $p662.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p663 := $add.ref($add.ref($p662,$mul.ref(0,16)),$mul.ref(0,1));
  $p663.dup := $or.i1($or.i1($p662.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $i664 := $extractvalue.i64($p661,0);
  $i664.dup := $or.i1($p661.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p663.dup := 0;
  $M.178 := $store.i64($M.178,$p663,$i664);
  $M.178.dup := $store.i1($M.178.dup,$p663,$i664.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p665 := $add.ref($add.ref($p662,$mul.ref(0,16)),$mul.ref(8,1));
  $p665.dup := $or.i1($or.i1($p662.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $i666 := $extractvalue.i64($p661,1);
  $i666.dup := $or.i1($p661.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p665.dup := 0;
  $M.178 := $store.i64($M.178,$p665,$i666);
  $M.178.dup := $store.i1($M.178.dup,$p665,$i666.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 125, 31} true;
  assume {:verifier.code 0} true;
  $p88.dup := 0;
  $i667 := $load.i128($M.178,$p88);
  $i667.dup := 0;
  call {:cexpr "o44"} boogie_si_record_i128($i667);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  call $p668, $p668.dup := FStar_UInt128_uint64_to_uint128(0, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  $p669 := $bitcast.ref.ref($p89);
  $p669.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  $p670 := $add.ref($add.ref($p669,$mul.ref(0,16)),$mul.ref(0,1));
  $p670.dup := $or.i1($or.i1($p669.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  $i671 := $extractvalue.i64($p668,0);
  $i671.dup := $or.i1($p668.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  $p670.dup := 0;
  $M.179 := $store.i64($M.179,$p670,$i671);
  $M.179.dup := $store.i1($M.179.dup,$p670,$i671.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  $p672 := $add.ref($add.ref($p669,$mul.ref(0,16)),$mul.ref(8,1));
  $p672.dup := $or.i1($or.i1($p669.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  $i673 := $extractvalue.i64($p668,1);
  $i673.dup := $or.i1($p668.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  $p672.dup := 0;
  $M.179 := $store.i64($M.179,$p672,$i673);
  $M.179.dup := $store.i1($M.179.dup,$p672,$i673.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 34} true;
  assume {:verifier.code 0} true;
  $p89.dup := 0;
  $i674 := $load.i128($M.179,$p89);
  $i674.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p90.dup := 0;
  $M.180 := $store.i128($M.180,$p90,$i571);
  $M.180.dup := $store.i1($M.180.dup,$p90,$i571.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p675 := $bitcast.ref.ref($p90);
  $p675.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p676 := $add.ref($add.ref($p675,$mul.ref(0,16)),$mul.ref(0,1));
  $p676.dup := $or.i1($or.i1($p675.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p676.dup := 0;
  $i677 := $load.i64($M.180,$p676);
  $i677.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p678 := $add.ref($add.ref($p675,$mul.ref(0,16)),$mul.ref(8,1));
  $p678.dup := $or.i1($or.i1($p675.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p678.dup := 0;
  $i679 := $load.i64($M.180,$p678);
  $i679.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p91.dup := 0;
  $M.181 := $store.i128($M.181,$p91,$i674);
  $M.181.dup := $store.i1($M.181.dup,$p91,$i674.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p680 := $bitcast.ref.ref($p91);
  $p680.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p681 := $add.ref($add.ref($p680,$mul.ref(0,16)),$mul.ref(0,1));
  $p681.dup := $or.i1($or.i1($p680.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p681.dup := 0;
  $i682 := $load.i64($M.181,$p681);
  $i682.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p683 := $add.ref($add.ref($p680,$mul.ref(0,16)),$mul.ref(8,1));
  $p683.dup := $or.i1($or.i1($p680.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p683.dup := 0;
  $i684 := $load.i64($M.181,$p683);
  $i684.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  call $p685, $p685.dup := FStar_UInt128_add($i677, $i677.dup, $i679, $i679.dup, $i682, $i682.dup, $i684, $i684.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p686 := $bitcast.ref.ref($p92);
  $p686.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p687 := $add.ref($add.ref($p686,$mul.ref(0,16)),$mul.ref(0,1));
  $p687.dup := $or.i1($or.i1($p686.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $i688 := $extractvalue.i64($p685,0);
  $i688.dup := $or.i1($p685.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p687.dup := 0;
  $M.182 := $store.i64($M.182,$p687,$i688);
  $M.182.dup := $store.i1($M.182.dup,$p687,$i688.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p689 := $add.ref($add.ref($p686,$mul.ref(0,16)),$mul.ref(8,1));
  $p689.dup := $or.i1($or.i1($p686.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $i690 := $extractvalue.i64($p685,1);
  $i690.dup := $or.i1($p685.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p689.dup := 0;
  $M.182 := $store.i64($M.182,$p689,$i690);
  $M.182.dup := $store.i1($M.182.dup,$p689,$i690.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 132, 8} true;
  assume {:verifier.code 0} true;
  $p92.dup := 0;
  $i691 := $load.i128($M.182,$p92);
  $i691.dup := 0;
  call {:cexpr "l_"} boogie_si_record_i128($i691);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  $p93.dup := 0;
  $M.183 := $store.i128($M.183,$p93,$i691);
  $M.183.dup := $store.i1($M.183.dup,$p93,$i691.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  $p692 := $bitcast.ref.ref($p93);
  $p692.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  $p693 := $add.ref($add.ref($p692,$mul.ref(0,16)),$mul.ref(0,1));
  $p693.dup := $or.i1($or.i1($p692.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  $p693.dup := 0;
  $i694 := $load.i64($M.183,$p693);
  $i694.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  $p695 := $add.ref($add.ref($p692,$mul.ref(0,16)),$mul.ref(8,1));
  $p695.dup := $or.i1($or.i1($p692.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  $p695.dup := 0;
  $i696 := $load.i64($M.183,$p695);
  $i696.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 20} true;
  assume {:verifier.code 0} true;
  call $i697, $i697.dup := FStar_UInt128_uint128_to_uint64($i694, $i694.dup, $i696, $i696.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 133, 56} true;
  assume {:verifier.code 0} true;
  $i698 := $and.i64($i697,2251799813685247);
  $i698.dup := $or.i1($i697.dup,0);
  call {:cexpr "tmp01"} boogie_si_record_i64($i698);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $p94.dup := 0;
  $M.184 := $store.i128($M.184,$p94,$i691);
  $M.184.dup := $store.i1($M.184.dup,$p94,$i691.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $p699 := $bitcast.ref.ref($p94);
  $p699.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $p700 := $add.ref($add.ref($p699,$mul.ref(0,16)),$mul.ref(0,1));
  $p700.dup := $or.i1($or.i1($p699.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $p700.dup := 0;
  $i701 := $load.i64($M.184,$p700);
  $i701.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $p702 := $add.ref($add.ref($p699,$mul.ref(0,16)),$mul.ref(8,1));
  $p702.dup := $or.i1($or.i1($p699.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $p702.dup := 0;
  $i703 := $load.i64($M.184,$p702);
  $i703.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  call $p704, $p704.dup := FStar_UInt128_shift_right($i701, $i701.dup, $i703, $i703.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $p705 := $bitcast.ref.ref($p95);
  $p705.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $p706 := $add.ref($add.ref($p705,$mul.ref(0,16)),$mul.ref(0,1));
  $p706.dup := $or.i1($or.i1($p705.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $i707 := $extractvalue.i64($p704,0);
  $i707.dup := $or.i1($p704.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $p706.dup := 0;
  $M.185 := $store.i64($M.185,$p706,$i707);
  $M.185.dup := $store.i1($M.185.dup,$p706,$i707.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $p708 := $add.ref($add.ref($p705,$mul.ref(0,16)),$mul.ref(8,1));
  $p708.dup := $or.i1($or.i1($p705.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $i709 := $extractvalue.i64($p704,1);
  $i709.dup := $or.i1($p704.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $p708.dup := 0;
  $M.185 := $store.i64($M.185,$p708,$i709);
  $M.185.dup := $store.i1($M.185.dup,$p708,$i709.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 49} true;
  assume {:verifier.code 0} true;
  $p95.dup := 0;
  $i710 := $load.i128($M.185,$p95);
  $i710.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  $p96.dup := 0;
  $M.186 := $store.i128($M.186,$p96,$i710);
  $M.186.dup := $store.i1($M.186.dup,$p96,$i710.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  $p711 := $bitcast.ref.ref($p96);
  $p711.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  $p712 := $add.ref($add.ref($p711,$mul.ref(0,16)),$mul.ref(0,1));
  $p712.dup := $or.i1($or.i1($p711.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  $p712.dup := 0;
  $i713 := $load.i64($M.186,$p712);
  $i713.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  $p714 := $add.ref($add.ref($p711,$mul.ref(0,16)),$mul.ref(8,1));
  $p714.dup := $or.i1($or.i1($p711.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  $p714.dup := 0;
  $i715 := $load.i64($M.186,$p714);
  $i715.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 134, 17} true;
  assume {:verifier.code 0} true;
  call $i716, $i716.dup := FStar_UInt128_uint128_to_uint64($i713, $i713.dup, $i715, $i715.dup);
  call {:cexpr "c0"} boogie_si_record_i64($i716);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  call $p717, $p717.dup := FStar_UInt128_uint64_to_uint128($i716, $i716.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  $p718 := $bitcast.ref.ref($p97);
  $p718.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  $p719 := $add.ref($add.ref($p718,$mul.ref(0,16)),$mul.ref(0,1));
  $p719.dup := $or.i1($or.i1($p718.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  $i720 := $extractvalue.i64($p717,0);
  $i720.dup := $or.i1($p717.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  $p719.dup := 0;
  $M.187 := $store.i64($M.187,$p719,$i720);
  $M.187.dup := $store.i1($M.187.dup,$p719,$i720.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  $p721 := $add.ref($add.ref($p718,$mul.ref(0,16)),$mul.ref(8,1));
  $p721.dup := $or.i1($or.i1($p718.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  $i722 := $extractvalue.i64($p717,1);
  $i722.dup := $or.i1($p717.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  $p721.dup := 0;
  $M.187 := $store.i64($M.187,$p721,$i722);
  $M.187.dup := $store.i1($M.187.dup,$p721,$i722.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 57} true;
  assume {:verifier.code 0} true;
  $p97.dup := 0;
  $i723 := $load.i128($M.187,$p97);
  $i723.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p98.dup := 0;
  $M.188 := $store.i128($M.188,$p98,$i595);
  $M.188.dup := $store.i1($M.188.dup,$p98,$i595.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p724 := $bitcast.ref.ref($p98);
  $p724.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p725 := $add.ref($add.ref($p724,$mul.ref(0,16)),$mul.ref(0,1));
  $p725.dup := $or.i1($or.i1($p724.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p725.dup := 0;
  $i726 := $load.i64($M.188,$p725);
  $i726.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p727 := $add.ref($add.ref($p724,$mul.ref(0,16)),$mul.ref(8,1));
  $p727.dup := $or.i1($or.i1($p724.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p727.dup := 0;
  $i728 := $load.i64($M.188,$p727);
  $i728.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p99.dup := 0;
  $M.189 := $store.i128($M.189,$p99,$i723);
  $M.189.dup := $store.i1($M.189.dup,$p99,$i723.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p729 := $bitcast.ref.ref($p99);
  $p729.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p730 := $add.ref($add.ref($p729,$mul.ref(0,16)),$mul.ref(0,1));
  $p730.dup := $or.i1($or.i1($p729.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p730.dup := 0;
  $i731 := $load.i64($M.189,$p730);
  $i731.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p732 := $add.ref($add.ref($p729,$mul.ref(0,16)),$mul.ref(8,1));
  $p732.dup := $or.i1($or.i1($p729.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p732.dup := 0;
  $i733 := $load.i64($M.189,$p732);
  $i733.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  call $p734, $p734.dup := FStar_UInt128_add($i726, $i726.dup, $i728, $i728.dup, $i731, $i731.dup, $i733, $i733.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p735 := $bitcast.ref.ref($p100);
  $p735.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p736 := $add.ref($add.ref($p735,$mul.ref(0,16)),$mul.ref(0,1));
  $p736.dup := $or.i1($or.i1($p735.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $i737 := $extractvalue.i64($p734,0);
  $i737.dup := $or.i1($p734.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p736.dup := 0;
  $M.190 := $store.i64($M.190,$p736,$i737);
  $M.190.dup := $store.i1($M.190.dup,$p736,$i737.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p738 := $add.ref($add.ref($p735,$mul.ref(0,16)),$mul.ref(8,1));
  $p738.dup := $or.i1($or.i1($p735.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $i739 := $extractvalue.i64($p734,1);
  $i739.dup := $or.i1($p734.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p738.dup := 0;
  $M.190 := $store.i64($M.190,$p738,$i739);
  $M.190.dup := $store.i1($M.190.dup,$p738,$i739.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 135, 31} true;
  assume {:verifier.code 0} true;
  $p100.dup := 0;
  $i740 := $load.i128($M.190,$p100);
  $i740.dup := 0;
  call {:cexpr "l_0"} boogie_si_record_i128($i740);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  $p101.dup := 0;
  $M.191 := $store.i128($M.191,$p101,$i740);
  $M.191.dup := $store.i1($M.191.dup,$p101,$i740.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  $p741 := $bitcast.ref.ref($p101);
  $p741.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  $p742 := $add.ref($add.ref($p741,$mul.ref(0,16)),$mul.ref(0,1));
  $p742.dup := $or.i1($or.i1($p741.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  $p742.dup := 0;
  $i743 := $load.i64($M.191,$p742);
  $i743.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  $p744 := $add.ref($add.ref($p741,$mul.ref(0,16)),$mul.ref(8,1));
  $p744.dup := $or.i1($or.i1($p741.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  $p744.dup := 0;
  $i745 := $load.i64($M.191,$p744);
  $i745.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 20} true;
  assume {:verifier.code 0} true;
  call $i746, $i746.dup := FStar_UInt128_uint128_to_uint64($i743, $i743.dup, $i745, $i745.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 136, 57} true;
  assume {:verifier.code 0} true;
  $i747 := $and.i64($i746,2251799813685247);
  $i747.dup := $or.i1($i746.dup,0);
  call {:cexpr "tmp11"} boogie_si_record_i64($i747);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $p102.dup := 0;
  $M.192 := $store.i128($M.192,$p102,$i740);
  $M.192.dup := $store.i1($M.192.dup,$p102,$i740.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $p748 := $bitcast.ref.ref($p102);
  $p748.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $p749 := $add.ref($add.ref($p748,$mul.ref(0,16)),$mul.ref(0,1));
  $p749.dup := $or.i1($or.i1($p748.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $p749.dup := 0;
  $i750 := $load.i64($M.192,$p749);
  $i750.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $p751 := $add.ref($add.ref($p748,$mul.ref(0,16)),$mul.ref(8,1));
  $p751.dup := $or.i1($or.i1($p748.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $p751.dup := 0;
  $i752 := $load.i64($M.192,$p751);
  $i752.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  call $p753, $p753.dup := FStar_UInt128_shift_right($i750, $i750.dup, $i752, $i752.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $p754 := $bitcast.ref.ref($p103);
  $p754.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $p755 := $add.ref($add.ref($p754,$mul.ref(0,16)),$mul.ref(0,1));
  $p755.dup := $or.i1($or.i1($p754.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $i756 := $extractvalue.i64($p753,0);
  $i756.dup := $or.i1($p753.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $p755.dup := 0;
  $M.193 := $store.i64($M.193,$p755,$i756);
  $M.193.dup := $store.i1($M.193.dup,$p755,$i756.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $p757 := $add.ref($add.ref($p754,$mul.ref(0,16)),$mul.ref(8,1));
  $p757.dup := $or.i1($or.i1($p754.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $i758 := $extractvalue.i64($p753,1);
  $i758.dup := $or.i1($p753.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $p757.dup := 0;
  $M.193 := $store.i64($M.193,$p757,$i758);
  $M.193.dup := $store.i1($M.193.dup,$p757,$i758.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 49} true;
  assume {:verifier.code 0} true;
  $p103.dup := 0;
  $i759 := $load.i128($M.193,$p103);
  $i759.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  $p104.dup := 0;
  $M.194 := $store.i128($M.194,$p104,$i759);
  $M.194.dup := $store.i1($M.194.dup,$p104,$i759.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  $p760 := $bitcast.ref.ref($p104);
  $p760.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  $p761 := $add.ref($add.ref($p760,$mul.ref(0,16)),$mul.ref(0,1));
  $p761.dup := $or.i1($or.i1($p760.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  $p761.dup := 0;
  $i762 := $load.i64($M.194,$p761);
  $i762.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  $p763 := $add.ref($add.ref($p760,$mul.ref(0,16)),$mul.ref(8,1));
  $p763.dup := $or.i1($or.i1($p760.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  $p763.dup := 0;
  $i764 := $load.i64($M.194,$p763);
  $i764.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 137, 17} true;
  assume {:verifier.code 0} true;
  call $i765, $i765.dup := FStar_UInt128_uint128_to_uint64($i762, $i762.dup, $i764, $i764.dup);
  call {:cexpr "c1"} boogie_si_record_i64($i765);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  call $p766, $p766.dup := FStar_UInt128_uint64_to_uint128($i765, $i765.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  $p767 := $bitcast.ref.ref($p105);
  $p767.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  $p768 := $add.ref($add.ref($p767,$mul.ref(0,16)),$mul.ref(0,1));
  $p768.dup := $or.i1($or.i1($p767.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  $i769 := $extractvalue.i64($p766,0);
  $i769.dup := $or.i1($p766.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  $p768.dup := 0;
  $M.195 := $store.i64($M.195,$p768,$i769);
  $M.195.dup := $store.i1($M.195.dup,$p768,$i769.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  $p770 := $add.ref($add.ref($p767,$mul.ref(0,16)),$mul.ref(8,1));
  $p770.dup := $or.i1($or.i1($p767.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  $i771 := $extractvalue.i64($p766,1);
  $i771.dup := $or.i1($p766.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  $p770.dup := 0;
  $M.195 := $store.i64($M.195,$p770,$i771);
  $M.195.dup := $store.i1($M.195.dup,$p770,$i771.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 57} true;
  assume {:verifier.code 0} true;
  $p105.dup := 0;
  $i772 := $load.i128($M.195,$p105);
  $i772.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p106.dup := 0;
  $M.196 := $store.i128($M.196,$p106,$i619);
  $M.196.dup := $store.i1($M.196.dup,$p106,$i619.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p773 := $bitcast.ref.ref($p106);
  $p773.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p774 := $add.ref($add.ref($p773,$mul.ref(0,16)),$mul.ref(0,1));
  $p774.dup := $or.i1($or.i1($p773.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p774.dup := 0;
  $i775 := $load.i64($M.196,$p774);
  $i775.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p776 := $add.ref($add.ref($p773,$mul.ref(0,16)),$mul.ref(8,1));
  $p776.dup := $or.i1($or.i1($p773.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p776.dup := 0;
  $i777 := $load.i64($M.196,$p776);
  $i777.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p107.dup := 0;
  $M.197 := $store.i128($M.197,$p107,$i772);
  $M.197.dup := $store.i1($M.197.dup,$p107,$i772.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p778 := $bitcast.ref.ref($p107);
  $p778.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p779 := $add.ref($add.ref($p778,$mul.ref(0,16)),$mul.ref(0,1));
  $p779.dup := $or.i1($or.i1($p778.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p779.dup := 0;
  $i780 := $load.i64($M.197,$p779);
  $i780.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p781 := $add.ref($add.ref($p778,$mul.ref(0,16)),$mul.ref(8,1));
  $p781.dup := $or.i1($or.i1($p778.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p781.dup := 0;
  $i782 := $load.i64($M.197,$p781);
  $i782.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  call $p783, $p783.dup := FStar_UInt128_add($i775, $i775.dup, $i777, $i777.dup, $i780, $i780.dup, $i782, $i782.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p784 := $bitcast.ref.ref($p108);
  $p784.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p785 := $add.ref($add.ref($p784,$mul.ref(0,16)),$mul.ref(0,1));
  $p785.dup := $or.i1($or.i1($p784.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $i786 := $extractvalue.i64($p783,0);
  $i786.dup := $or.i1($p783.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p785.dup := 0;
  $M.198 := $store.i64($M.198,$p785,$i786);
  $M.198.dup := $store.i1($M.198.dup,$p785,$i786.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p787 := $add.ref($add.ref($p784,$mul.ref(0,16)),$mul.ref(8,1));
  $p787.dup := $or.i1($or.i1($p784.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $i788 := $extractvalue.i64($p783,1);
  $i788.dup := $or.i1($p783.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p787.dup := 0;
  $M.198 := $store.i64($M.198,$p787,$i788);
  $M.198.dup := $store.i1($M.198.dup,$p787,$i788.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 138, 31} true;
  assume {:verifier.code 0} true;
  $p108.dup := 0;
  $i789 := $load.i128($M.198,$p108);
  $i789.dup := 0;
  call {:cexpr "l_1"} boogie_si_record_i128($i789);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  $p109.dup := 0;
  $M.199 := $store.i128($M.199,$p109,$i789);
  $M.199.dup := $store.i1($M.199.dup,$p109,$i789.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  $p790 := $bitcast.ref.ref($p109);
  $p790.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  $p791 := $add.ref($add.ref($p790,$mul.ref(0,16)),$mul.ref(0,1));
  $p791.dup := $or.i1($or.i1($p790.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  $p791.dup := 0;
  $i792 := $load.i64($M.199,$p791);
  $i792.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  $p793 := $add.ref($add.ref($p790,$mul.ref(0,16)),$mul.ref(8,1));
  $p793.dup := $or.i1($or.i1($p790.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  $p793.dup := 0;
  $i794 := $load.i64($M.199,$p793);
  $i794.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 20} true;
  assume {:verifier.code 0} true;
  call $i795, $i795.dup := FStar_UInt128_uint128_to_uint64($i792, $i792.dup, $i794, $i794.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 139, 57} true;
  assume {:verifier.code 0} true;
  $i796 := $and.i64($i795,2251799813685247);
  $i796.dup := $or.i1($i795.dup,0);
  call {:cexpr "tmp21"} boogie_si_record_i64($i796);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $p110.dup := 0;
  $M.200 := $store.i128($M.200,$p110,$i789);
  $M.200.dup := $store.i1($M.200.dup,$p110,$i789.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $p797 := $bitcast.ref.ref($p110);
  $p797.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $p798 := $add.ref($add.ref($p797,$mul.ref(0,16)),$mul.ref(0,1));
  $p798.dup := $or.i1($or.i1($p797.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $p798.dup := 0;
  $i799 := $load.i64($M.200,$p798);
  $i799.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $p800 := $add.ref($add.ref($p797,$mul.ref(0,16)),$mul.ref(8,1));
  $p800.dup := $or.i1($or.i1($p797.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $p800.dup := 0;
  $i801 := $load.i64($M.200,$p800);
  $i801.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  call $p802, $p802.dup := FStar_UInt128_shift_right($i799, $i799.dup, $i801, $i801.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $p803 := $bitcast.ref.ref($p111);
  $p803.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $p804 := $add.ref($add.ref($p803,$mul.ref(0,16)),$mul.ref(0,1));
  $p804.dup := $or.i1($or.i1($p803.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $i805 := $extractvalue.i64($p802,0);
  $i805.dup := $or.i1($p802.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $p804.dup := 0;
  $M.201 := $store.i64($M.201,$p804,$i805);
  $M.201.dup := $store.i1($M.201.dup,$p804,$i805.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $p806 := $add.ref($add.ref($p803,$mul.ref(0,16)),$mul.ref(8,1));
  $p806.dup := $or.i1($or.i1($p803.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $i807 := $extractvalue.i64($p802,1);
  $i807.dup := $or.i1($p802.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $p806.dup := 0;
  $M.201 := $store.i64($M.201,$p806,$i807);
  $M.201.dup := $store.i1($M.201.dup,$p806,$i807.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 49} true;
  assume {:verifier.code 0} true;
  $p111.dup := 0;
  $i808 := $load.i128($M.201,$p111);
  $i808.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  $p112.dup := 0;
  $M.202 := $store.i128($M.202,$p112,$i808);
  $M.202.dup := $store.i1($M.202.dup,$p112,$i808.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  $p809 := $bitcast.ref.ref($p112);
  $p809.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  $p810 := $add.ref($add.ref($p809,$mul.ref(0,16)),$mul.ref(0,1));
  $p810.dup := $or.i1($or.i1($p809.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  $p810.dup := 0;
  $i811 := $load.i64($M.202,$p810);
  $i811.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  $p812 := $add.ref($add.ref($p809,$mul.ref(0,16)),$mul.ref(8,1));
  $p812.dup := $or.i1($or.i1($p809.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  $p812.dup := 0;
  $i813 := $load.i64($M.202,$p812);
  $i813.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 140, 17} true;
  assume {:verifier.code 0} true;
  call $i814, $i814.dup := FStar_UInt128_uint128_to_uint64($i811, $i811.dup, $i813, $i813.dup);
  call {:cexpr "c2"} boogie_si_record_i64($i814);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  call $p815, $p815.dup := FStar_UInt128_uint64_to_uint128($i814, $i814.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  $p816 := $bitcast.ref.ref($p113);
  $p816.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  $p817 := $add.ref($add.ref($p816,$mul.ref(0,16)),$mul.ref(0,1));
  $p817.dup := $or.i1($or.i1($p816.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  $i818 := $extractvalue.i64($p815,0);
  $i818.dup := $or.i1($p815.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  $p817.dup := 0;
  $M.203 := $store.i64($M.203,$p817,$i818);
  $M.203.dup := $store.i1($M.203.dup,$p817,$i818.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  $p819 := $add.ref($add.ref($p816,$mul.ref(0,16)),$mul.ref(8,1));
  $p819.dup := $or.i1($or.i1($p816.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  $i820 := $extractvalue.i64($p815,1);
  $i820.dup := $or.i1($p815.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  $p819.dup := 0;
  $M.203 := $store.i64($M.203,$p819,$i820);
  $M.203.dup := $store.i1($M.203.dup,$p819,$i820.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 57} true;
  assume {:verifier.code 0} true;
  $p113.dup := 0;
  $i821 := $load.i128($M.203,$p113);
  $i821.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p114.dup := 0;
  $M.204 := $store.i128($M.204,$p114,$i643);
  $M.204.dup := $store.i1($M.204.dup,$p114,$i643.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p822 := $bitcast.ref.ref($p114);
  $p822.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p823 := $add.ref($add.ref($p822,$mul.ref(0,16)),$mul.ref(0,1));
  $p823.dup := $or.i1($or.i1($p822.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p823.dup := 0;
  $i824 := $load.i64($M.204,$p823);
  $i824.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p825 := $add.ref($add.ref($p822,$mul.ref(0,16)),$mul.ref(8,1));
  $p825.dup := $or.i1($or.i1($p822.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p825.dup := 0;
  $i826 := $load.i64($M.204,$p825);
  $i826.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p115.dup := 0;
  $M.205 := $store.i128($M.205,$p115,$i821);
  $M.205.dup := $store.i1($M.205.dup,$p115,$i821.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p827 := $bitcast.ref.ref($p115);
  $p827.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p828 := $add.ref($add.ref($p827,$mul.ref(0,16)),$mul.ref(0,1));
  $p828.dup := $or.i1($or.i1($p827.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p828.dup := 0;
  $i829 := $load.i64($M.205,$p828);
  $i829.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p830 := $add.ref($add.ref($p827,$mul.ref(0,16)),$mul.ref(8,1));
  $p830.dup := $or.i1($or.i1($p827.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p830.dup := 0;
  $i831 := $load.i64($M.205,$p830);
  $i831.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  call $p832, $p832.dup := FStar_UInt128_add($i824, $i824.dup, $i826, $i826.dup, $i829, $i829.dup, $i831, $i831.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p833 := $bitcast.ref.ref($p116);
  $p833.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p834 := $add.ref($add.ref($p833,$mul.ref(0,16)),$mul.ref(0,1));
  $p834.dup := $or.i1($or.i1($p833.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $i835 := $extractvalue.i64($p832,0);
  $i835.dup := $or.i1($p832.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p834.dup := 0;
  $M.206 := $store.i64($M.206,$p834,$i835);
  $M.206.dup := $store.i1($M.206.dup,$p834,$i835.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p836 := $add.ref($add.ref($p833,$mul.ref(0,16)),$mul.ref(8,1));
  $p836.dup := $or.i1($or.i1($p833.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $i837 := $extractvalue.i64($p832,1);
  $i837.dup := $or.i1($p832.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p836.dup := 0;
  $M.206 := $store.i64($M.206,$p836,$i837);
  $M.206.dup := $store.i1($M.206.dup,$p836,$i837.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 141, 31} true;
  assume {:verifier.code 0} true;
  $p116.dup := 0;
  $i838 := $load.i128($M.206,$p116);
  $i838.dup := 0;
  call {:cexpr "l_2"} boogie_si_record_i128($i838);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  $p117.dup := 0;
  $M.207 := $store.i128($M.207,$p117,$i838);
  $M.207.dup := $store.i1($M.207.dup,$p117,$i838.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  $p839 := $bitcast.ref.ref($p117);
  $p839.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  $p840 := $add.ref($add.ref($p839,$mul.ref(0,16)),$mul.ref(0,1));
  $p840.dup := $or.i1($or.i1($p839.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  $p840.dup := 0;
  $i841 := $load.i64($M.207,$p840);
  $i841.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  $p842 := $add.ref($add.ref($p839,$mul.ref(0,16)),$mul.ref(8,1));
  $p842.dup := $or.i1($or.i1($p839.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  $p842.dup := 0;
  $i843 := $load.i64($M.207,$p842);
  $i843.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 20} true;
  assume {:verifier.code 0} true;
  call $i844, $i844.dup := FStar_UInt128_uint128_to_uint64($i841, $i841.dup, $i843, $i843.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 142, 57} true;
  assume {:verifier.code 0} true;
  $i845 := $and.i64($i844,2251799813685247);
  $i845.dup := $or.i1($i844.dup,0);
  call {:cexpr "tmp31"} boogie_si_record_i64($i845);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $p118.dup := 0;
  $M.208 := $store.i128($M.208,$p118,$i838);
  $M.208.dup := $store.i1($M.208.dup,$p118,$i838.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $p846 := $bitcast.ref.ref($p118);
  $p846.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $p847 := $add.ref($add.ref($p846,$mul.ref(0,16)),$mul.ref(0,1));
  $p847.dup := $or.i1($or.i1($p846.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $p847.dup := 0;
  $i848 := $load.i64($M.208,$p847);
  $i848.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $p849 := $add.ref($add.ref($p846,$mul.ref(0,16)),$mul.ref(8,1));
  $p849.dup := $or.i1($or.i1($p846.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $p849.dup := 0;
  $i850 := $load.i64($M.208,$p849);
  $i850.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  call $p851, $p851.dup := FStar_UInt128_shift_right($i848, $i848.dup, $i850, $i850.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $p852 := $bitcast.ref.ref($p119);
  $p852.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $p853 := $add.ref($add.ref($p852,$mul.ref(0,16)),$mul.ref(0,1));
  $p853.dup := $or.i1($or.i1($p852.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $i854 := $extractvalue.i64($p851,0);
  $i854.dup := $or.i1($p851.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $p853.dup := 0;
  $M.209 := $store.i64($M.209,$p853,$i854);
  $M.209.dup := $store.i1($M.209.dup,$p853,$i854.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $p855 := $add.ref($add.ref($p852,$mul.ref(0,16)),$mul.ref(8,1));
  $p855.dup := $or.i1($or.i1($p852.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $i856 := $extractvalue.i64($p851,1);
  $i856.dup := $or.i1($p851.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $p855.dup := 0;
  $M.209 := $store.i64($M.209,$p855,$i856);
  $M.209.dup := $store.i1($M.209.dup,$p855,$i856.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 49} true;
  assume {:verifier.code 0} true;
  $p119.dup := 0;
  $i857 := $load.i128($M.209,$p119);
  $i857.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  $p120.dup := 0;
  $M.210 := $store.i128($M.210,$p120,$i857);
  $M.210.dup := $store.i1($M.210.dup,$p120,$i857.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  $p858 := $bitcast.ref.ref($p120);
  $p858.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  $p859 := $add.ref($add.ref($p858,$mul.ref(0,16)),$mul.ref(0,1));
  $p859.dup := $or.i1($or.i1($p858.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  $p859.dup := 0;
  $i860 := $load.i64($M.210,$p859);
  $i860.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  $p861 := $add.ref($add.ref($p858,$mul.ref(0,16)),$mul.ref(8,1));
  $p861.dup := $or.i1($or.i1($p858.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  $p861.dup := 0;
  $i862 := $load.i64($M.210,$p861);
  $i862.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 143, 17} true;
  assume {:verifier.code 0} true;
  call $i863, $i863.dup := FStar_UInt128_uint128_to_uint64($i860, $i860.dup, $i862, $i862.dup);
  call {:cexpr "c3"} boogie_si_record_i64($i863);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  call $p864, $p864.dup := FStar_UInt128_uint64_to_uint128($i863, $i863.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  $p865 := $bitcast.ref.ref($p121);
  $p865.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  $p866 := $add.ref($add.ref($p865,$mul.ref(0,16)),$mul.ref(0,1));
  $p866.dup := $or.i1($or.i1($p865.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  $i867 := $extractvalue.i64($p864,0);
  $i867.dup := $or.i1($p864.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  $p866.dup := 0;
  $M.211 := $store.i64($M.211,$p866,$i867);
  $M.211.dup := $store.i1($M.211.dup,$p866,$i867.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  $p868 := $add.ref($add.ref($p865,$mul.ref(0,16)),$mul.ref(8,1));
  $p868.dup := $or.i1($or.i1($p865.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  $i869 := $extractvalue.i64($p864,1);
  $i869.dup := $or.i1($p864.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  $p868.dup := 0;
  $M.211 := $store.i64($M.211,$p868,$i869);
  $M.211.dup := $store.i1($M.211.dup,$p868,$i869.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 57} true;
  assume {:verifier.code 0} true;
  $p121.dup := 0;
  $i870 := $load.i128($M.211,$p121);
  $i870.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p122.dup := 0;
  $M.212 := $store.i128($M.212,$p122,$i667);
  $M.212.dup := $store.i1($M.212.dup,$p122,$i667.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p871 := $bitcast.ref.ref($p122);
  $p871.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p872 := $add.ref($add.ref($p871,$mul.ref(0,16)),$mul.ref(0,1));
  $p872.dup := $or.i1($or.i1($p871.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p872.dup := 0;
  $i873 := $load.i64($M.212,$p872);
  $i873.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p874 := $add.ref($add.ref($p871,$mul.ref(0,16)),$mul.ref(8,1));
  $p874.dup := $or.i1($or.i1($p871.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p874.dup := 0;
  $i875 := $load.i64($M.212,$p874);
  $i875.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p123.dup := 0;
  $M.213 := $store.i128($M.213,$p123,$i870);
  $M.213.dup := $store.i1($M.213.dup,$p123,$i870.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p876 := $bitcast.ref.ref($p123);
  $p876.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p877 := $add.ref($add.ref($p876,$mul.ref(0,16)),$mul.ref(0,1));
  $p877.dup := $or.i1($or.i1($p876.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p877.dup := 0;
  $i878 := $load.i64($M.213,$p877);
  $i878.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p879 := $add.ref($add.ref($p876,$mul.ref(0,16)),$mul.ref(8,1));
  $p879.dup := $or.i1($or.i1($p876.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p879.dup := 0;
  $i880 := $load.i64($M.213,$p879);
  $i880.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  call $p881, $p881.dup := FStar_UInt128_add($i873, $i873.dup, $i875, $i875.dup, $i878, $i878.dup, $i880, $i880.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p882 := $bitcast.ref.ref($p124);
  $p882.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p883 := $add.ref($add.ref($p882,$mul.ref(0,16)),$mul.ref(0,1));
  $p883.dup := $or.i1($or.i1($p882.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $i884 := $extractvalue.i64($p881,0);
  $i884.dup := $or.i1($p881.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p883.dup := 0;
  $M.214 := $store.i64($M.214,$p883,$i884);
  $M.214.dup := $store.i1($M.214.dup,$p883,$i884.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p885 := $add.ref($add.ref($p882,$mul.ref(0,16)),$mul.ref(8,1));
  $p885.dup := $or.i1($or.i1($p882.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $i886 := $extractvalue.i64($p881,1);
  $i886.dup := $or.i1($p881.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p885.dup := 0;
  $M.214 := $store.i64($M.214,$p885,$i886);
  $M.214.dup := $store.i1($M.214.dup,$p885,$i886.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 144, 31} true;
  assume {:verifier.code 0} true;
  $p124.dup := 0;
  $i887 := $load.i128($M.214,$p124);
  $i887.dup := 0;
  call {:cexpr "l_3"} boogie_si_record_i128($i887);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  $p125.dup := 0;
  $M.215 := $store.i128($M.215,$p125,$i887);
  $M.215.dup := $store.i1($M.215.dup,$p125,$i887.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  $p888 := $bitcast.ref.ref($p125);
  $p888.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  $p889 := $add.ref($add.ref($p888,$mul.ref(0,16)),$mul.ref(0,1));
  $p889.dup := $or.i1($or.i1($p888.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  $p889.dup := 0;
  $i890 := $load.i64($M.215,$p889);
  $i890.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  $p891 := $add.ref($add.ref($p888,$mul.ref(0,16)),$mul.ref(8,1));
  $p891.dup := $or.i1($or.i1($p888.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  $p891.dup := 0;
  $i892 := $load.i64($M.215,$p891);
  $i892.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 20} true;
  assume {:verifier.code 0} true;
  call $i893, $i893.dup := FStar_UInt128_uint128_to_uint64($i890, $i890.dup, $i892, $i892.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 145, 57} true;
  assume {:verifier.code 0} true;
  $i894 := $and.i64($i893,2251799813685247);
  $i894.dup := $or.i1($i893.dup,0);
  call {:cexpr "tmp41"} boogie_si_record_i64($i894);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $p126.dup := 0;
  $M.216 := $store.i128($M.216,$p126,$i887);
  $M.216.dup := $store.i1($M.216.dup,$p126,$i887.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $p895 := $bitcast.ref.ref($p126);
  $p895.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $p896 := $add.ref($add.ref($p895,$mul.ref(0,16)),$mul.ref(0,1));
  $p896.dup := $or.i1($or.i1($p895.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $p896.dup := 0;
  $i897 := $load.i64($M.216,$p896);
  $i897.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $p898 := $add.ref($add.ref($p895,$mul.ref(0,16)),$mul.ref(8,1));
  $p898.dup := $or.i1($or.i1($p895.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $p898.dup := 0;
  $i899 := $load.i64($M.216,$p898);
  $i899.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  call $p900, $p900.dup := FStar_UInt128_shift_right($i897, $i897.dup, $i899, $i899.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $p901 := $bitcast.ref.ref($p127);
  $p901.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $p902 := $add.ref($add.ref($p901,$mul.ref(0,16)),$mul.ref(0,1));
  $p902.dup := $or.i1($or.i1($p901.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $i903 := $extractvalue.i64($p900,0);
  $i903.dup := $or.i1($p900.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $p902.dup := 0;
  $M.217 := $store.i64($M.217,$p902,$i903);
  $M.217.dup := $store.i1($M.217.dup,$p902,$i903.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $p904 := $add.ref($add.ref($p901,$mul.ref(0,16)),$mul.ref(8,1));
  $p904.dup := $or.i1($or.i1($p901.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $i905 := $extractvalue.i64($p900,1);
  $i905.dup := $or.i1($p900.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $p904.dup := 0;
  $M.217 := $store.i64($M.217,$p904,$i905);
  $M.217.dup := $store.i1($M.217.dup,$p904,$i905.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 49} true;
  assume {:verifier.code 0} true;
  $p127.dup := 0;
  $i906 := $load.i128($M.217,$p127);
  $i906.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  $p128.dup := 0;
  $M.218 := $store.i128($M.218,$p128,$i906);
  $M.218.dup := $store.i1($M.218.dup,$p128,$i906.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  $p907 := $bitcast.ref.ref($p128);
  $p907.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  $p908 := $add.ref($add.ref($p907,$mul.ref(0,16)),$mul.ref(0,1));
  $p908.dup := $or.i1($or.i1($p907.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  $p908.dup := 0;
  $i909 := $load.i64($M.218,$p908);
  $i909.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  $p910 := $add.ref($add.ref($p907,$mul.ref(0,16)),$mul.ref(8,1));
  $p910.dup := $or.i1($or.i1($p907.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  $p910.dup := 0;
  $i911 := $load.i64($M.218,$p910);
  $i911.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 146, 17} true;
  assume {:verifier.code 0} true;
  call $i912, $i912.dup := FStar_UInt128_uint128_to_uint64($i909, $i909.dup, $i911, $i911.dup);
  call {:cexpr "c4"} boogie_si_record_i64($i912);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 147, 29} true;
  assume {:verifier.code 0} true;
  $i913 := $mul.i64($i912,19);
  $i913.dup := $or.i1($i912.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 147, 24} true;
  assume {:verifier.code 0} true;
  $i914 := $add.i64($i698,$i913);
  $i914.dup := 0;
  call {:cexpr "l_4"} boogie_si_record_i64($i914);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 148, 24} true;
  assume {:verifier.code 0} true;
  $i915 := $and.i64($i914,2251799813685247);
  $i915.dup := $or.i1($i914.dup,0);
  call {:cexpr "tmp0_"} boogie_si_record_i64($i915);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 149, 21} true;
  assume {:verifier.code 0} true;
  $i916 := $lshr.i64($i914,51);
  $i916.dup := $or.i1($i914.dup,0);
  call {:cexpr "c5"} boogie_si_record_i64($i916);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 151, 23} true;
  assume {:verifier.code 0} true;
  $i917 := $add.i64($i747,$i916);
  $i917.dup := 0;
  call {:cexpr "o1"} boogie_si_record_i64($i917);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 155, 3} true;
  assume {:verifier.code 0} true;
  $p918 := $add.ref($p0,$mul.ref(0,8));
  $p918.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 155, 11} true;
  assume {:verifier.code 0} true;
  $p918.dup := 0;
  $M.0 := $store.i64($M.0,$p918,$i915);
  $M.0.dup := $store.i1($M.0.dup,$p918,$i915.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 156, 3} true;
  assume {:verifier.code 0} true;
  $p919 := $add.ref($p0,$mul.ref(1,8));
  $p919.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 156, 11} true;
  assume {:verifier.code 0} true;
  $p919.dup := 0;
  $M.0 := $store.i64($M.0,$p919,$i917);
  $M.0.dup := $store.i1($M.0.dup,$p919,$i917.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 157, 3} true;
  assume {:verifier.code 0} true;
  $p920 := $add.ref($p0,$mul.ref(2,8));
  $p920.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 157, 11} true;
  assume {:verifier.code 0} true;
  $p920.dup := 0;
  $M.0 := $store.i64($M.0,$p920,$i796);
  $M.0.dup := $store.i1($M.0.dup,$p920,$i796.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 158, 3} true;
  assume {:verifier.code 0} true;
  $p921 := $add.ref($p0,$mul.ref(3,8));
  $p921.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 158, 11} true;
  assume {:verifier.code 0} true;
  $p921.dup := 0;
  $M.0 := $store.i64($M.0,$p921,$i845);
  $M.0.dup := $store.i1($M.0.dup,$p921,$i845.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 159, 3} true;
  assume {:verifier.code 0} true;
  $p922 := $add.ref($p0,$mul.ref(4,8));
  $p922.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 159, 11} true;
  assume {:verifier.code 0} true;
  $p922.dup := 0;
  $M.0 := $store.i64($M.0,$p922,$i894);
  $M.0.dup := $store.i1($M.0.dup,$p922,$i894.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 160, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const Hacl_Curve25519_51_scalarmult: ref;
axiom (Hacl_Curve25519_51_scalarmult == $sub.ref(0,13416));
procedure {:inline 1} Hacl_Curve25519_51_scalarmult($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1)
modifies $M.0, $M.219, $exn;
modifies $M.221;
modifies $M.222, $M.223, $M.90;
modifies $M.225, $M.226, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.86, $M.87, $M.88, $M.89, $M.91, $M.92, $M.93;
modifies $M.227, $M.228, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85;
modifies $CurrAddr;
modifies $M.229, $M.230, $M.231, $M.232, $M.233, $M.234, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.256, $M.257, $M.258, $M.259, $M.260, $M.261, $M.262, $M.263, $M.264, $M.265, $M.266, $M.267, $M.268, $M.269, $M.270, $M.271, $M.272, $M.273, $M.274, $M.275, $M.276, $M.277, $M.278, $M.279, $M.280, $M.281, $M.282, $M.283, $M.284, $M.285, $M.286, $M.287, $M.288, $M.289, $M.290, $M.291, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $M.298, $M.299, $M.300, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $M.308, $M.309, $M.310, $M.311, $M.312, $M.313, $M.314, $M.315, $M.316, $M.317, $M.318, $M.319, $M.320, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $M.333, $M.334, $M.335, $M.336, $M.337, $M.338, $M.339, $M.340, $M.341, $M.342, $M.343, $M.344, $M.345, $M.346, $M.347, $M.348, $M.349, $M.350, $M.351, $M.352, $M.353, $M.354, $M.355, $M.356, $M.357, $M.358, $M.359, $M.360, $M.361, $M.362, $M.363, $M.364, $M.365, $M.366, $M.367, $M.368, $M.369, $M.370, $M.371, $M.372, $M.373, $M.374, $M.375, $M.376, $M.377, $M.378, $M.379, $M.380, $M.381, $M.382, $M.383, $M.384, $M.385, $M.386, $M.387, $M.388, $M.389, $M.390, $M.391, $M.392, $M.393, $M.394, $M.395, $M.396, $M.397, $M.398, $M.399, $M.400, $M.401, $M.402, $M.403, $M.404, $M.405, $M.406, $M.407, $M.408, $M.409, $M.410, $M.411, $M.412, $M.413, $M.414, $M.415, $M.416, $M.417, $M.418, $M.419, $M.420, $M.421, $M.422, $M.423, $M.424, $M.425, $M.426, $M.427, $M.428, $M.429, $M.430, $M.431, $M.432, $M.433, $M.434, $M.435, $M.436, $M.437, $M.438, $M.439, $M.440, $M.441, $M.442, $M.443, $M.444, $M.445, $M.446, $M.447, $M.448, $M.449, $M.450, $M.451, $M.452, $M.453, $M.454, $M.455, $M.456, $M.457, $M.458, $M.459, $M.460, $M.461, $M.462, $M.463, $M.464, $M.465, $M.466, $M.467, $M.468, $M.469, $M.470, $M.471, $M.472, $M.473, $M.474, $M.475, $M.476, $M.477, $M.478, $M.479, $M.480, $M.481, $M.482, $M.483, $M.484, $M.485, $M.486, $M.487, $M.488, $M.489, $M.490, $M.491, $M.492, $M.493, $M.494, $M.495, $M.496, $M.497, $M.498, $M.499, $M.500, $M.501, $M.502, $M.503, $M.504, $M.505, $M.506, $M.507, $M.508, $M.509, $M.510, $M.511, $M.512, $M.513, $M.514, $M.515, $M.516, $M.517, $M.518, $M.519, $M.520, $M.521, $M.522, $M.523, $M.524, $M.525, $M.526, $M.527, $M.528, $M.529, $M.530, $M.531, $M.532, $M.533, $M.534, $M.535, $M.536, $M.537, $M.538, $M.539, $M.540, $M.541, $M.542, $M.543, $M.544, $M.545, $M.546, $M.547, $M.548, $M.549, $M.550, $M.551, $M.552, $M.553, $M.554, $M.555, $M.556, $M.557, $M.558, $M.559, $M.560, $M.561, $M.562, $M.563, $M.564, $M.565, $M.566, $M.567, $M.568, $M.569, $M.570, $M.571, $M.572, $M.573, $M.574, $M.575, $M.576, $M.577, $M.578, $M.579, $M.580, $M.581, $M.582, $M.583, $M.584, $M.585, $M.586, $M.587, $M.588, $M.589, $M.590, $M.591, $M.592, $M.593, $M.594, $M.595, $M.596, $M.597, $M.598, $M.599, $M.600, $M.601, $M.602, $M.603, $M.604, $M.605, $M.606, $M.607, $M.608, $M.609, $M.610, $M.611, $M.612, $M.613, $M.614, $M.615, $M.616, $M.617, $M.618, $M.619, $M.620, $M.621, $M.622, $M.623, $M.624, $M.625, $M.626, $M.627, $M.628, $M.629, $M.630, $M.631, $M.632, $M.633, $M.634, $M.635, $M.636, $M.637, $M.638, $M.639, $M.640, $M.641, $M.642, $M.643, $M.644, $M.645, $M.646, $M.647, $M.648, $M.649, $M.650, $M.651, $M.652, $M.653, $M.654, $M.655, $M.656, $M.657, $M.658, $M.659, $M.660, $M.661, $M.662, $M.663, $M.664, $M.665, $M.666, $M.667, $M.668, $M.669, $M.670, $M.671, $M.672, $M.673, $M.674, $M.675, $M.676, $M.677, $M.678, $M.679, $M.680, $M.681, $M.682, $M.683, $M.684, $M.685, $M.686, $M.687, $M.688, $M.689, $M.690, $M.691, $M.692, $M.693;
{
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $i8: i32;
  var $i8.dup: i1;
  var $i9: i64;
  var $i9.dup: i1;
  var $p10: ref;
  var $p10.dup: i1;
  var $i11: i64;
  var $i11.dup: i1;
  var $i12: i64;
  var $i12.dup: i1;
  var $i13: i64;
  var $i13.dup: i1;
  var $p14: ref;
  var $p14.dup: i1;
  var $i15: i32;
  var $i15.dup: i1;
  var $p16: ref;
  var $p16.dup: i1;
  var $i17: i32;
  var $i17.dup: i1;
  var $i18: i64;
  var $i18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $i20: i64;
  var $i20.dup: i1;
  var $i21: i64;
  var $i21.dup: i1;
  var $i22: i64;
  var $i22.dup: i1;
  var $p23: ref;
  var $p23.dup: i1;
  var $i24: i32;
  var $i24.dup: i1;
  var $p25: ref;
  var $p25.dup: i1;
  var $i26: i32;
  var $i26.dup: i1;
  var $i27: i64;
  var $i27.dup: i1;
  var $p28: ref;
  var $p28.dup: i1;
  var $i29: i64;
  var $i29.dup: i1;
  var $i30: i64;
  var $i30.dup: i1;
  var $i31: i64;
  var $i31.dup: i1;
  var $p32: ref;
  var $p32.dup: i1;
  var $i33: i32;
  var $i33.dup: i1;
  var $p34: ref;
  var $p34.dup: i1;
  var $i35: i32;
  var $i35.dup: i1;
  var $i36: i64;
  var $i36.dup: i1;
  var $p37: ref;
  var $p37.dup: i1;
  var $i38: i64;
  var $i38.dup: i1;
  var $i39: i64;
  var $i39.dup: i1;
  var $i40: i64;
  var $i40.dup: i1;
  var $p41: ref;
  var $p41.dup: i1;
  var $p42: ref;
  var $p42.dup: i1;
  var $i43: i64;
  var $i43.dup: i1;
  var $i44: i64;
  var $i44.dup: i1;
  var $p45: ref;
  var $p45.dup: i1;
  var $p46: ref;
  var $p46.dup: i1;
  var $p47: ref;
  var $p47.dup: i1;
  var $p48: ref;
  var $p48.dup: i1;
  var $p49: ref;
  var $p49.dup: i1;
  var $i50: i64;
  var $i50.dup: i1;
  var $p51: ref;
  var $p51.dup: i1;
  var $i52: i64;
  var $i52.dup: i1;
  var $p53: ref;
  var $p53.dup: i1;
  var $i54: i64;
  var $i54.dup: i1;
  var $p55: ref;
  var $p55.dup: i1;
  var $i56: i64;
  var $i56.dup: i1;
  var $p57: ref;
  var $p57.dup: i1;
  var $p58: ref;
  var $p58.dup: i1;
  var $i59: i64;
  var $i59.dup: i1;
  var $i60: i64;
  var $i60.dup: i1;
  var $p61: ref;
  var $p61.dup: i1;
  var $i62: i64;
  var $i62.dup: i1;
  var $i63: i64;
  var $i63.dup: i1;
  var $p64: ref;
  var $p64.dup: i1;
  var $i65: i64;
  var $i65.dup: i1;
  var $i66: i64;
  var $i66.dup: i1;
  var $i67: i64;
  var $i67.dup: i1;
  var $p68: ref;
  var $p68.dup: i1;
  var $i69: i64;
  var $i69.dup: i1;
  var $i70: i64;
  var $i70.dup: i1;
  var $p71: ref;
  var $p71.dup: i1;
  var $i72: i64;
  var $i72.dup: i1;
  var $i73: i64;
  var $i73.dup: i1;
  var $i74: i64;
  var $i74.dup: i1;
  var $p75: ref;
  var $p75.dup: i1;
  var $i76: i64;
  var $i76.dup: i1;
  var $i77: i64;
  var $i77.dup: i1;
  var $p78: ref;
  var $p78.dup: i1;
  var $i79: i64;
  var $i79.dup: i1;
  var $i80: i64;
  var $i80.dup: i1;
  var $i81: i64;
  var $i81.dup: i1;
  var $p82: ref;
  var $p82.dup: i1;
  var $i83: i64;
  var $i83.dup: i1;
  var $i84: i64;
  var $i84.dup: i1;
  var $p85: ref;
  var $p85.dup: i1;
  var $i86: i64;
  var $i86.dup: i1;
  var $p87: ref;
  var $p87.dup: i1;
  var $i88: i64;
  var $i88.dup: i1;
  var $p89: ref;
  var $p89.dup: i1;
  var $i90: i64;
  var $i90.dup: i1;
  var $p91: ref;
  var $p91.dup: i1;
  var $p92: ref;
  var $p92.dup: i1;
  var $p93: ref;
  var $p93.dup: i1;
  var $p94: ref;
  var $p94.dup: i1;
  var $p95: ref;
  var $p95.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 243, 12} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(80,$zext.i32.i64(1)));
  $p3.dup := 0;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(32,$zext.i32.i64(1)));
  $p4.dup := 0;
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 243, 12} true;
  assume {:verifier.code 0} true;
  $p5 := $bitcast.ref.ref($p3);
  $p5.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 243, 12} true;
  assume {:verifier.code 0} true;
  $p5.dup := 0;
  call $M.0, $M.0.dup := $memset.i8($M.0, $M.0.dup, $p5, $p5.dup, 0, 0, 80, 0, false, false);
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 244, 12} true;
  assume {:verifier.code 0} true;
  $p6 := $bitcast.ref.ref($p4);
  $p6.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 244, 12} true;
  assume {:verifier.code 0} true;
  $p6.dup := 0;
  call $M.219, $M.219.dup := $memset.i8($M.219, $M.219.dup, $p6, $p6.dup, 0, 0, 32, 0, false, false);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(0,8));
  $p7.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i8 := $mul.i32(0,8);
  $i8.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i9 := $zext.i32.i64($i8);
  $i9.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p2,$mul.ref($i9,1));
  $p10.dup := $or.i1($p2.dup,$or.i1($i9.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  call $i11, $i11.dup := load64($p10, $p10.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  call $i12, $i12.dup := __uint64_identity($i11, $i11.dup);
  call {:cexpr "u"} boogie_si_record_i64($i12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i13 := $zext.i32.i64(0);
  $i13.dup := 0;
  $p14 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref($i13,8));
  $p14.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1($i13.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $p14.dup := 0;
  $M.219 := $store.i64($M.219,$p14,$i12);
  $M.219.dup := $store.i1($M.219.dup,$p14,$i12.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32(0,1);
  $i15.dup := $or.i1(0,0);
  call {:cexpr "i"} boogie_si_record_i32($i15);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(0,8));
  $p16.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i17 := $mul.i32($i15,8);
  $i17.dup := $or.i1($i15.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i18 := $zext.i32.i64($i17);
  $i18.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p2,$mul.ref($i18,1));
  $p19.dup := $or.i1($p2.dup,$or.i1($i18.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  call $i20, $i20.dup := load64($p19, $p19.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  call $i21, $i21.dup := __uint64_identity($i20, $i20.dup);
  call {:cexpr "u"} boogie_si_record_i64($i21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i22 := $zext.i32.i64($i15);
  $i22.dup := 0;
  $p23 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref($i22,8));
  $p23.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1($i22.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $p23.dup := 0;
  $M.219 := $store.i64($M.219,$p23,$i21);
  $M.219.dup := $store.i1($M.219.dup,$p23,$i21.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i32($i15,1);
  $i24.dup := $or.i1($i15.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(0,8));
  $p25.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i26 := $mul.i32($i24,8);
  $i26.dup := $or.i1($i24.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i27 := $zext.i32.i64($i26);
  $i27.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p2,$mul.ref($i27,1));
  $p28.dup := $or.i1($p2.dup,$or.i1($i27.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  call $i29, $i29.dup := load64($p28, $p28.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  call $i30, $i30.dup := __uint64_identity($i29, $i29.dup);
  call {:cexpr "u"} boogie_si_record_i64($i30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i31 := $zext.i32.i64($i24);
  $i31.dup := 0;
  $p32 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref($i31,8));
  $p32.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1($i31.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $p32.dup := 0;
  $M.219 := $store.i64($M.219,$p32,$i30);
  $M.219.dup := $store.i1($M.219.dup,$p32,$i30.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i33 := $add.i32($i24,1);
  $i33.dup := $or.i1($i24.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(0,8));
  $p34.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i35 := $mul.i32($i33,8);
  $i35.dup := $or.i1($i33.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i36 := $zext.i32.i64($i35);
  $i36.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p2,$mul.ref($i36,1));
  $p37.dup := $or.i1($p2.dup,$or.i1($i36.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  call $i38, $i38.dup := load64($p37, $p37.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  call $i39, $i39.dup := __uint64_identity($i38, $i38.dup);
  call {:cexpr "u"} boogie_si_record_i64($i39);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $i40 := $zext.i32.i64($i33);
  $i40.dup := 0;
  $p41 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref($i40,8));
  $p41.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1($i40.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  $p41.dup := 0;
  $M.219 := $store.i64($M.219,$p41,$i39);
  $M.219.dup := $store.i1($M.219.dup,$p41,$i39.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 245, 3} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 255, 19} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(3,8));
  $p42.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 255, 19} true;
  assume {:verifier.code 0} true;
  $p42.dup := 0;
  $i43 := $load.i64($M.219,$p42);
  $i43.dup := 0;
  call {:cexpr "tmp3"} boogie_si_record_i64($i43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 256, 18} true;
  assume {:verifier.code 0} true;
  $i44 := $and.i64($i43,9223372036854775807);
  $i44.dup := $or.i1($i43.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 256, 3} true;
  assume {:verifier.code 0} true;
  $p45 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(3,8));
  $p45.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 256, 11} true;
  assume {:verifier.code 0} true;
  $p45.dup := 0;
  $M.219 := $store.i64($M.219,$p45,$i44);
  $M.219.dup := $store.i1($M.219.dup,$p45,$i44.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 257, 17} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref(0,8));
  $p46.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 258, 17} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref(0,8));
  $p47.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  $p48 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref(5,8));
  $p48.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  $p49 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref(5,8));
  $p49.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 259, 9} true;
  assume {:verifier.code 0} true;
  $p49.dup := 0;
  $M.0 := $store.i64($M.0,$p49,1);
  $M.0.dup := $store.i1($M.0.dup,$p49,0);
  $i50 := $add.i64(5,1);
  $i50.dup := $or.i1(0,0);
  $p51 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref($i50,8));
  $p51.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1($i50.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 260, 9} true;
  assume {:verifier.code 0} true;
  $p51.dup := 0;
  $M.0 := $store.i64($M.0,$p51,0);
  $M.0.dup := $store.i1($M.0.dup,$p51,0);
  $i52 := $add.i64(5,2);
  $i52.dup := $or.i1(0,0);
  $p53 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref($i52,8));
  $p53.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1($i52.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 261, 9} true;
  assume {:verifier.code 0} true;
  $p53.dup := 0;
  $M.0 := $store.i64($M.0,$p53,0);
  $M.0.dup := $store.i1($M.0.dup,$p53,0);
  $i54 := $add.i64(5,3);
  $i54.dup := $or.i1(0,0);
  $p55 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref($i54,8));
  $p55.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1($i54.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 262, 9} true;
  assume {:verifier.code 0} true;
  $p55.dup := 0;
  $M.0 := $store.i64($M.0,$p55,0);
  $M.0.dup := $store.i1($M.0.dup,$p55,0);
  $i56 := $add.i64(5,4);
  $i56.dup := $or.i1(0,0);
  $p57 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref($i56,8));
  $p57.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1($i56.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 263, 9} true;
  assume {:verifier.code 0} true;
  $p57.dup := 0;
  $M.0 := $store.i64($M.0,$p57,0);
  $M.0.dup := $store.i1($M.0.dup,$p57,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 264, 18} true;
  assume {:verifier.code 0} true;
  $p58 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(0,8));
  $p58.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 264, 18} true;
  assume {:verifier.code 0} true;
  $p58.dup := 0;
  $i59 := $load.i64($M.219,$p58);
  $i59.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 264, 26} true;
  assume {:verifier.code 0} true;
  $i60 := $and.i64($i59,2251799813685247);
  $i60.dup := $or.i1($i59.dup,0);
  call {:cexpr "f0l"} boogie_si_record_i64($i60);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 265, 18} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(0,8));
  $p61.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 265, 18} true;
  assume {:verifier.code 0} true;
  $p61.dup := 0;
  $i62 := $load.i64($M.219,$p61);
  $i62.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 265, 26} true;
  assume {:verifier.code 0} true;
  $i63 := $lshr.i64($i62,51);
  $i63.dup := $or.i1($i62.dup,0);
  call {:cexpr "f0h"} boogie_si_record_i64($i63);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 266, 19} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(1,8));
  $p64.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 266, 19} true;
  assume {:verifier.code 0} true;
  $p64.dup := 0;
  $i65 := $load.i64($M.219,$p64);
  $i65.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 266, 27} true;
  assume {:verifier.code 0} true;
  $i66 := $and.i64($i65,274877906943);
  $i66.dup := $or.i1($i65.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 266, 54} true;
  assume {:verifier.code 0} true;
  $i67 := $shl.i64($i66,13);
  $i67.dup := $or.i1($i66.dup,0);
  call {:cexpr "f1l"} boogie_si_record_i64($i67);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 267, 18} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(1,8));
  $p68.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 267, 18} true;
  assume {:verifier.code 0} true;
  $p68.dup := 0;
  $i69 := $load.i64($M.219,$p68);
  $i69.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 267, 26} true;
  assume {:verifier.code 0} true;
  $i70 := $lshr.i64($i69,38);
  $i70.dup := $or.i1($i69.dup,0);
  call {:cexpr "f1h"} boogie_si_record_i64($i70);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 268, 19} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(2,8));
  $p71.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 268, 19} true;
  assume {:verifier.code 0} true;
  $p71.dup := 0;
  $i72 := $load.i64($M.219,$p71);
  $i72.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 268, 27} true;
  assume {:verifier.code 0} true;
  $i73 := $and.i64($i72,33554431);
  $i73.dup := $or.i1($i72.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 268, 51} true;
  assume {:verifier.code 0} true;
  $i74 := $shl.i64($i73,26);
  $i74.dup := $or.i1($i73.dup,0);
  call {:cexpr "f2l"} boogie_si_record_i64($i74);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 269, 18} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(2,8));
  $p75.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 269, 18} true;
  assume {:verifier.code 0} true;
  $p75.dup := 0;
  $i76 := $load.i64($M.219,$p75);
  $i76.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 269, 26} true;
  assume {:verifier.code 0} true;
  $i77 := $lshr.i64($i76,25);
  $i77.dup := $or.i1($i76.dup,0);
  call {:cexpr "f2h"} boogie_si_record_i64($i77);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 270, 19} true;
  assume {:verifier.code 0} true;
  $p78 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(3,8));
  $p78.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 270, 19} true;
  assume {:verifier.code 0} true;
  $p78.dup := 0;
  $i79 := $load.i64($M.219,$p78);
  $i79.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 270, 27} true;
  assume {:verifier.code 0} true;
  $i80 := $and.i64($i79,4095);
  $i80.dup := $or.i1($i79.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 270, 47} true;
  assume {:verifier.code 0} true;
  $i81 := $shl.i64($i80,39);
  $i81.dup := $or.i1($i80.dup,0);
  call {:cexpr "f3l"} boogie_si_record_i64($i81);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 271, 18} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($add.ref($p4,$mul.ref(0,32)),$mul.ref(3,8));
  $p82.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 271, 18} true;
  assume {:verifier.code 0} true;
  $p82.dup := 0;
  $i83 := $load.i64($M.219,$p82);
  $i83.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 271, 26} true;
  assume {:verifier.code 0} true;
  $i84 := $lshr.i64($i83,12);
  $i84.dup := $or.i1($i83.dup,0);
  call {:cexpr "f3h"} boogie_si_record_i64($i84);
  $p85 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref(0,8));
  $p85.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 272, 9} true;
  assume {:verifier.code 0} true;
  $p85.dup := 0;
  $M.0 := $store.i64($M.0,$p85,$i60);
  $M.0.dup := $store.i1($M.0.dup,$p85,$i60.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 273, 15} true;
  assume {:verifier.code 0} true;
  $i86 := $or.i64($i63,$i67);
  $i86.dup := 0;
  $p87 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref(1,8));
  $p87.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 273, 9} true;
  assume {:verifier.code 0} true;
  $p87.dup := 0;
  $M.0 := $store.i64($M.0,$p87,$i86);
  $M.0.dup := $store.i1($M.0.dup,$p87,$i86.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 274, 15} true;
  assume {:verifier.code 0} true;
  $i88 := $or.i64($i70,$i74);
  $i88.dup := 0;
  $p89 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref(2,8));
  $p89.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 274, 9} true;
  assume {:verifier.code 0} true;
  $p89.dup := 0;
  $M.0 := $store.i64($M.0,$p89,$i88);
  $M.0.dup := $store.i1($M.0.dup,$p89,$i88.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 275, 15} true;
  assume {:verifier.code 0} true;
  $i90 := $or.i64($i77,$i81);
  $i90.dup := 0;
  $p91 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref(3,8));
  $p91.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 275, 9} true;
  assume {:verifier.code 0} true;
  $p91.dup := 0;
  $M.0 := $store.i64($M.0,$p91,$i90);
  $M.0.dup := $store.i1($M.0.dup,$p91,$i90.dup);
  $p92 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref(4,8));
  $p92.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 276, 9} true;
  assume {:verifier.code 0} true;
  $p92.dup := 0;
  $M.0 := $store.i64($M.0,$p92,$i84);
  $M.0.dup := $store.i1($M.0.dup,$p92,$i84.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 277, 21} true;
  assume {:verifier.code 0} true;
  $p93 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref(0,8));
  $p93.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 277, 33} true;
  assume {:verifier.code 0} true;
  $p94 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref(0,8));
  $p94.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 277, 3} true;
  assume {:verifier.code 0} true;
  call montgomery_ladder($p93, $p93.dup, $p1, $p1.dup, $p94, $p94.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 278, 21} true;
  assume {:verifier.code 0} true;
  $p95 := $add.ref($add.ref($p3,$mul.ref(0,80)),$mul.ref(0,8));
  $p95.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 278, 3} true;
  assume {:verifier.code 0} true;
  call encode_point($p0, $p0.dup, $p95, $p95.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 279, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const load64: ref;
axiom (load64 == $sub.ref(0,14448));
procedure {:inline 1} load64($p0: ref, $p0.dup: i1) returns ($r: i64, $r.dup: i1)
modifies $M.221, $exn;
modifies $CurrAddr;
requires ($p0.dup == 0);
{
  var $p1: ref;
  var $p1.dup: i1;
  var $p2: ref;
  var $p2.dup: i1;
  var $i3: i64;
  var $i3.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 174, 3} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p1 := $alloc($mul.ref(8,$zext.i32.i64(1)));
  $p1.dup := 0;
  assume true;
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 174, 3} true;
  assume {:verifier.code 0} true;
  $p2 := $bitcast.ref.ref($p1);
  $p2.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 174, 3} true;
  assume {:verifier.code 0} true;
  $p2.dup := 0;
  call $M.221, $M.221.dup := $memcpy.i8($M.221, $M.221.dup, $M.220, $M.220.dup, $p2, $p2.dup, $p0, $p0.dup, 8, 0, false, false);
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 175, 10} true;
  assume {:verifier.code 0} true;
  $p1.dup := 0;
  $i3 := $load.i64($M.221,$p1);
  $i3.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 175, 3} true;
  assume {:verifier.code 0} true;
  $r := $i3;
  $r.dup := 0;
  $exn := false;
  $exn.dup := false;
  return;
}
const __uint64_identity: ref;
axiom (__uint64_identity == $sub.ref(0,15480));
procedure {:inline 1} __uint64_identity($i0: i64, $i0.dup: i1) returns ($r: i64, $r.dup: i1)
modifies $exn;
{
$bb0:
  assume {:sourceloc "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h", 47, 3} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__uint64_identity:arg:__x"} boogie_si_record_i64($i0);
  assume {:sourceloc "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h", 47, 3} true;
  assume {:verifier.code 0} true;
  $r := $i0;
  $r.dup := 0;
  $exn := false;
  $exn.dup := false;
  return;
}
const montgomery_ladder: ref;
axiom (montgomery_ladder == $sub.ref(0,16512));
procedure {:inline 1} montgomery_ladder($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1)
modifies $M.222, $M.223, $M.0, $exn;
modifies $M.90;
modifies $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.86, $M.87, $M.88, $M.89, $M.91, $M.92, $M.93;
modifies $M.229, $M.230, $M.231, $M.232, $M.233, $M.234, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.256, $M.257, $M.258, $M.259, $M.260, $M.261, $M.262, $M.263, $M.264, $M.265, $M.266, $M.267, $M.268, $M.269, $M.270, $M.271, $M.272, $M.273, $M.274, $M.275, $M.276, $M.277, $M.278, $M.279, $M.280, $M.281, $M.282, $M.283, $M.284, $M.285, $M.286, $M.287, $M.288, $M.289, $M.290, $M.291, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $M.298, $M.299, $M.300, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $M.308, $M.309, $M.310, $M.311, $M.312, $M.313, $M.314, $M.315, $M.316, $M.317, $M.318, $M.319, $M.320, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $M.333, $M.334, $M.335, $M.336, $M.337, $M.338, $M.339, $M.340, $M.341, $M.342, $M.343, $M.344, $M.345, $M.346, $M.347, $M.348, $M.349, $M.350, $M.351, $M.352, $M.353, $M.354, $M.355, $M.356, $M.357, $M.358, $M.359, $M.360, $M.361, $M.362, $M.363, $M.364, $M.365, $M.366, $M.367, $M.368, $M.369, $M.370, $M.371, $M.372, $M.373, $M.374, $M.375, $M.376, $M.377, $M.378, $M.379, $M.380, $M.381, $M.382, $M.383, $M.384, $M.385, $M.386, $M.387, $M.388, $M.389, $M.390, $M.391, $M.392, $M.393, $M.394, $M.395, $M.396, $M.397, $M.398, $M.399, $M.400, $M.401, $M.402, $M.403, $M.404, $M.405, $M.406, $M.407, $M.408, $M.409, $M.410, $M.411, $M.412, $M.413, $M.414, $M.415, $M.416, $M.417, $M.418, $M.419, $M.420, $M.421, $M.422, $M.423, $M.424, $M.425, $M.426, $M.427, $M.428, $M.429, $M.430, $M.431, $M.432, $M.433, $M.434, $M.435, $M.436, $M.437, $M.438, $M.439, $M.440, $M.441, $M.442, $M.443, $M.444, $M.445, $M.446, $M.447, $M.448, $M.449, $M.450, $M.451, $M.452, $M.453, $M.454, $M.455, $M.456, $M.457, $M.458, $M.459, $M.460, $M.461, $M.462, $M.463, $M.464, $M.465, $M.466, $M.467, $M.468, $M.469, $M.470, $M.471, $M.472, $M.473, $M.474, $M.475, $M.476, $M.477, $M.478, $M.479, $M.480, $M.481, $M.482, $M.483, $M.484, $M.485, $M.486, $M.487, $M.488, $M.489, $M.490, $M.491, $M.492, $M.493, $M.494, $M.495, $M.496, $M.497, $M.498, $M.499, $M.500, $M.501, $M.502, $M.503, $M.504, $M.505, $M.506, $M.507, $M.508, $M.509, $M.510, $M.511, $M.512, $M.513, $M.514, $M.515, $M.516, $M.517, $M.518, $M.519, $M.520, $M.521, $M.522, $M.523, $M.524, $M.525, $M.526, $M.527, $M.528, $M.529, $M.530, $M.531, $M.532, $M.533, $M.534, $M.535, $M.536, $M.537, $M.538, $M.539, $M.540, $M.541, $M.542, $M.543, $M.544, $M.545, $M.546, $M.547, $M.548, $M.549, $M.550, $M.551, $M.552, $M.553, $M.554, $M.555, $M.556, $M.557, $M.558, $M.559, $M.560, $M.561, $M.562, $M.563, $M.564, $M.565, $M.566, $M.567, $M.568, $M.569, $M.570, $M.571, $M.572, $M.573, $M.574, $M.575, $M.576, $M.577, $M.578, $M.579, $M.580, $M.581, $M.582, $M.583, $M.584, $M.585, $M.586, $M.587, $M.588, $M.589, $M.590, $M.591, $M.592, $M.593, $M.594, $M.595, $M.596, $M.597, $M.598, $M.599, $M.600, $M.601, $M.602, $M.603, $M.604, $M.605, $M.606, $M.607, $M.608, $M.609, $M.610, $M.611, $M.612, $M.613, $M.614, $M.615, $M.616, $M.617, $M.618, $M.619, $M.620, $M.621, $M.622, $M.623, $M.624, $M.625, $M.626, $M.627, $M.628, $M.629, $M.630, $M.631, $M.632, $M.633, $M.634, $M.635, $M.636, $M.637, $M.638, $M.639, $M.640, $M.641, $M.642, $M.643, $M.644, $M.645, $M.646, $M.647, $M.648, $M.649, $M.650, $M.651, $M.652, $M.653, $M.654, $M.655, $M.656, $M.657, $M.658, $M.659, $M.660, $M.661, $M.662, $M.663, $M.664, $M.665, $M.666, $M.667, $M.668, $M.669, $M.670, $M.671, $M.672, $M.673, $M.674, $M.675, $M.676, $M.677, $M.678, $M.679, $M.680, $M.681, $M.682, $M.683, $M.684, $M.685, $M.686, $M.687, $M.688, $M.689, $M.690, $M.691, $M.692, $M.693;
modifies $CurrAddr;
{
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $i6: i32;
  var $i6.dup: i1;
  var $i7: i1;
  var $i7.dup: i1;
  var $p8: ref;
  var $p8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $p10: ref;
  var $p10.dup: i1;
  var $i11: i64;
  var $i11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
  var $i13: i64;
  var $i13.dup: i1;
  var $i14: i128;
  var $i14.dup: i1;
  var $i15: i64;
  var $i15.dup: i1;
  var $p16: ref;
  var $p16.dup: i1;
  var $i17: i32;
  var $i17.dup: i1;
  var $p18: ref;
  var $p18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $p20: ref;
  var $p20.dup: i1;
  var $p21: ref;
  var $p21.dup: i1;
  var $p22: ref;
  var $p22.dup: i1;
  var $p23: ref;
  var $p23.dup: i1;
  var $p24: ref;
  var $p24.dup: i1;
  var $p25: ref;
  var $p25.dup: i1;
  var $p26: ref;
  var $p26.dup: i1;
  var $p27: ref;
  var $p27.dup: i1;
  var $p28: ref;
  var $p28.dup: i1;
  var $p29: ref;
  var $p29.dup: i1;
  var $p30: ref;
  var $p30.dup: i1;
  var $i31: i64;
  var $i31.dup: i1;
  var $p32: ref;
  var $p32.dup: i1;
  var $i33: i64;
  var $i33.dup: i1;
  var $p34: ref;
  var $p34.dup: i1;
  var $i35: i64;
  var $i35.dup: i1;
  var $p36: ref;
  var $p36.dup: i1;
  var $i37: i64;
  var $i37.dup: i1;
  var $p38: ref;
  var $p38.dup: i1;
  var $p39: ref;
  var $p39.dup: i1;
  var $p40: ref;
  var $p40.dup: i1;
  var $p41: ref;
  var $p41.dup: i1;
  var $p42: ref;
  var $p42.dup: i1;
  var $p43: ref;
  var $p43.dup: i1;
  var $p44: ref;
  var $p44.dup: i1;
  var $p45: ref;
  var $p45.dup: i1;
  var $p46: ref;
  var $p46.dup: i1;
  var $p47: ref;
  var $p47.dup: i1;
  var $i48: i32;
  var $i48.dup: i1;
  var $i49: i1;
  var $i49.dup: i1;
  var $p50: ref;
  var $p50.dup: i1;
  var $p51: ref;
  var $p51.dup: i1;
  var $p52: ref;
  var $p52.dup: i1;
  var $p53: ref;
  var $p53.dup: i1;
  var $i54: i32;
  var $i54.dup: i1;
  var $i55: i32;
  var $i55.dup: i1;
  var $i56: i64;
  var $i56.dup: i1;
  var $p57: ref;
  var $p57.dup: i1;
  var $i58: i8;
  var $i58.dup: i1;
  var $i59: i32;
  var $i59.dup: i1;
  var $i60: i32;
  var $i60.dup: i1;
  var $i61: i32;
  var $i61.dup: i1;
  var $i62: i32;
  var $i62.dup: i1;
  var $i63: i32;
  var $i63.dup: i1;
  var $i64: i64;
  var $i64.dup: i1;
  var $p65: ref;
  var $p65.dup: i1;
  var $i66: i64;
  var $i66.dup: i1;
  var $i67: i64;
  var $i67.dup: i1;
  var $p68: ref;
  var $p68.dup: i1;
  var $p69: ref;
  var $p69.dup: i1;
  var $i70: i32;
  var $i70.dup: i1;
  var $p71: ref;
  var $p71.dup: i1;
  var $i72: i64;
  var $i72.dup: i1;
  var $p73: ref;
  var $p73.dup: i1;
  var $p74: ref;
  var $p74.dup: i1;
  var $p75: ref;
  var $p75.dup: i1;
  var $p76: ref;
  var $p76.dup: i1;
  var $p77: ref;
  var $p77.dup: i1;
  var $p78: ref;
  var $p78.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 104, 8} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(160,$zext.i32.i64(1)));
  $p3.dup := 0;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p4.dup := 0;
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(328,$zext.i32.i64(1)));
  $p5.dup := 0;
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 104, 8} true;
  assume {:verifier.code 0} true;
  $i6 := 0;
  $i6.dup := 0;
  goto $bb1;
$bb1:
  assert {:shadow_invariant} $shadow_ok;
  assert {:likely_shadow_invariant} ($p3.dup == 0);
  assert {:likely_shadow_invariant} ($p5.dup == 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 104, 29} true;
  assume {:verifier.code 0} true;
  $i7 := $ult.i32($i6,10);
  $i7.dup := $or.i1($i6.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 104, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  $i7.dup := 0;
  goto $bb2, $bb3;
$bb2:
  assume ($i7 == 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  call $p8, $p8.dup := FStar_UInt128_uint64_to_uint128(0, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  $p9 := $bitcast.ref.ref($p4);
  $p9.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($add.ref($p9,$mul.ref(0,16)),$mul.ref(0,1));
  $p10.dup := $or.i1($or.i1($p9.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  $i11 := $extractvalue.i64($p8,0);
  $i11.dup := $or.i1($p8.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  $p10.dup := 0;
  $M.222 := $store.i64($M.222,$p10,$i11);
  $M.222.dup := $store.i1($M.222.dup,$p10,$i11.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p9,$mul.ref(0,16)),$mul.ref(8,1));
  $p12.dup := $or.i1($or.i1($p9.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  $i13 := $extractvalue.i64($p8,1);
  $i13.dup := $or.i1($p8.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  $p12.dup := 0;
  $M.222 := $store.i64($M.222,$p12,$i13);
  $M.222.dup := $store.i1($M.222.dup,$p12,$i13.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 16} true;
  assume {:verifier.code 0} true;
  $p4.dup := 0;
  $i14 := $load.i128($M.222,$p4);
  $i14.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 5} true;
  assume {:verifier.code 0} true;
  $i15 := $zext.i32.i64($i6);
  $i15.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 5} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref($i15,16));
  $p16.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1($i15.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 14} true;
  assume {:verifier.code 0} true;
  $p16.dup := 0;
  $M.223 := $store.i128($M.223,$p16,$i14);
  $M.223.dup := $store.i1($M.223.dup,$p16,$i14.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 105, 5} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume !($i7 == 1);
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 106, 12} true;
  assume {:verifier.code 0} true;
  $p18 := $bitcast.ref.ref($p5);
  $p18.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 106, 12} true;
  assume {:verifier.code 0} true;
  $p18.dup := 0;
  call $M.0, $M.0.dup := $memset.i8($M.0, $M.0.dup, $p18, $p18.dup, 0, 0, 328, 0, false, false);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 107, 18} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(0,8));
  $p19.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 108, 19} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(0,8));
  $p20.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  $p21 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(10,8));
  $p21.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 111, 3} true;
  assume {:verifier.code 0} true;
  $p22 := $bitcast.ref.ref($p21);
  $p22.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 111, 3} true;
  assume {:verifier.code 0} true;
  $p23 := $bitcast.ref.ref($p2);
  $p23.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 111, 3} true;
  assume {:verifier.code 0} true;
  $p22.dup := 0;
  $p23.dup := 0;
  call $M.0, $M.0.dup := $memcpy.i8($M.0, $M.0.dup, $M.0, $M.0.dup, $p22, $p22.dup, $p23, $p23.dup, 80, 0, false, false);
  $p24 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(5,8));
  $p24.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  $p25 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(0,8));
  $p25.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 114, 10} true;
  assume {:verifier.code 0} true;
  $p25.dup := 0;
  $M.0 := $store.i64($M.0,$p25,1);
  $M.0.dup := $store.i1($M.0.dup,$p25,0);
  $p26 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(1,8));
  $p26.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 115, 10} true;
  assume {:verifier.code 0} true;
  $p26.dup := 0;
  $M.0 := $store.i64($M.0,$p26,0);
  $M.0.dup := $store.i1($M.0.dup,$p26,0);
  $p27 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(2,8));
  $p27.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 116, 10} true;
  assume {:verifier.code 0} true;
  $p27.dup := 0;
  $M.0 := $store.i64($M.0,$p27,0);
  $M.0.dup := $store.i1($M.0.dup,$p27,0);
  $p28 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(3,8));
  $p28.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 117, 10} true;
  assume {:verifier.code 0} true;
  $p28.dup := 0;
  $M.0 := $store.i64($M.0,$p28,0);
  $M.0.dup := $store.i1($M.0.dup,$p28,0);
  $p29 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(4,8));
  $p29.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 118, 10} true;
  assume {:verifier.code 0} true;
  $p29.dup := 0;
  $M.0 := $store.i64($M.0,$p29,0);
  $M.0.dup := $store.i1($M.0.dup,$p29,0);
  $p30 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(5,8));
  $p30.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 119, 10} true;
  assume {:verifier.code 0} true;
  $p30.dup := 0;
  $M.0 := $store.i64($M.0,$p30,0);
  $M.0.dup := $store.i1($M.0.dup,$p30,0);
  $i31 := $add.i64(5,1);
  $i31.dup := $or.i1(0,0);
  $p32 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref($i31,8));
  $p32.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1($i31.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 120, 10} true;
  assume {:verifier.code 0} true;
  $p32.dup := 0;
  $M.0 := $store.i64($M.0,$p32,0);
  $M.0.dup := $store.i1($M.0.dup,$p32,0);
  $i33 := $add.i64(5,2);
  $i33.dup := $or.i1(0,0);
  $p34 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref($i33,8));
  $p34.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1($i33.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 121, 10} true;
  assume {:verifier.code 0} true;
  $p34.dup := 0;
  $M.0 := $store.i64($M.0,$p34,0);
  $M.0.dup := $store.i1($M.0.dup,$p34,0);
  $i35 := $add.i64(5,3);
  $i35.dup := $or.i1(0,0);
  $p36 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref($i35,8));
  $p36.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1($i35.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 122, 10} true;
  assume {:verifier.code 0} true;
  $p36.dup := 0;
  $M.0 := $store.i64($M.0,$p36,0);
  $M.0.dup := $store.i1($M.0.dup,$p36,0);
  $i37 := $add.i64(5,4);
  $i37.dup := $or.i1(0,0);
  $p38 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref($i37,8));
  $p38.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1($i37.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 123, 10} true;
  assume {:verifier.code 0} true;
  $p38.dup := 0;
  $M.0 := $store.i64($M.0,$p38,0);
  $M.0.dup := $store.i1($M.0.dup,$p38,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 124, 24} true;
  assume {:verifier.code 0} true;
  $p39 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(0,8));
  $p39.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 125, 25} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(0,8));
  $p40.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 126, 19} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(0,8));
  $p41.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 127, 22} true;
  assume {:verifier.code 0} true;
  $p42 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(0,8));
  $p42.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  $p43 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(10,8));
  $p43.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 128, 20} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(0,8));
  $p44.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  $p45 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(40,8));
  $p45.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 129, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_cswap2(1, 0, $p41, $p41.dup, $p43, $p43.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 130, 41} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,16));
  $p46.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 130, 3} true;
  assume {:verifier.code 0} true;
  call point_add_and_double($p2, $p2.dup, $p40, $p40.dup, $p46, $p46.dup);
  $p47 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(40,8));
  $p47.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 131, 12} true;
  assume {:verifier.code 0} true;
  $p47.dup := 0;
  $M.0 := $store.i64($M.0,$p47,1);
  $M.0.dup := $store.i1($M.0.dup,$p47,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 132, 8} true;
  assume {:verifier.code 0} true;
  $i48 := 0;
  $i48.dup := 0;
  goto $bb5;
$bb4:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 104, 46} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i32($i6,1);
  $i17.dup := $or.i1($i6.dup,0);
  call {:cexpr "_i"} boogie_si_record_i32($i17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 104, 3} true;
  assume {:verifier.code 0} true;
  $i6 := $i17;
  $i6.dup := 0;
  goto $bb1;
$bb5:
  assert {:shadow_invariant} $shadow_ok;
  assert {:likely_shadow_invariant} ($p19.dup == 0);
  assert {:likely_shadow_invariant} ($p39.dup == 0);
  assert {:likely_shadow_invariant} ($p3.dup == 0);
  assert {:likely_shadow_invariant} ($p43.dup == 0);
  assert {:likely_shadow_invariant} ($p41.dup == 0);
  assert {:likely_shadow_invariant} ($p5.dup == 0);
  assert {:unlikely_shadow_invariant ($i48.dup == 0)} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 132, 37} true;
  assume {:verifier.code 0} true;
  $i49 := $ult.i32($i48,251);
  $i49.dup := $or.i1($i48.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 132, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i49} true;
  $i49.dup := 0;
  goto $bb6, $bb7;
$bb6:
  assume ($i49 == 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 134, 27} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(0,8));
  $p50.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 135, 23} true;
  assume {:verifier.code 0} true;
  $p51 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(0,8));
  $p51.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  $p52 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(40,8));
  $p52.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  $p53 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(10,8));
  $p53.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 140, 38} true;
  assume {:verifier.code 0} true;
  $i54 := $sub.i32(253,$i48);
  $i54.dup := $or.i1(0,$i48.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 141, 7} true;
  assume {:verifier.code 0} true;
  $i55 := $udiv.i32($i54,8);
  $i55.dup := $or.i1($i54.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 140, 18} true;
  assume {:verifier.code 0} true;
  $i56 := $zext.i32.i64($i55);
  $i56.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 140, 18} true;
  assume {:verifier.code 0} true;
  assume {:PointTainted} true;
  $p57 := $add.ref($p1,$mul.ref($i56,1));
  $p57.dup := $or.i1($p1.dup,$or.i1($i56.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 140, 18} true;
  assume {:verifier.code 0} true;
  $p57.dup := 0;
  $i58 := $load.i8($M.224,$p57);
  $i58.dup := $load.i1($M.224.dup,$p57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 140, 18} true;
  assume {:verifier.code 0} true;
  $i59 := $zext.i8.i32($i58);
  $i59.dup := $i58.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 142, 26} true;
  assume {:verifier.code 0} true;
  $i60 := $sub.i32(253,$i48);
  $i60.dup := $or.i1(0,$i48.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 142, 31} true;
  assume {:verifier.code 0} true;
  $i61 := $urem.i32($i60,8);
  $i61.dup := $or.i1($i60.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 142, 7} true;
  assume {:verifier.code 0} true;
  $i62 := $ashr.i32($i59,$i61);
  $i62.dup := $or.i1($i59.dup,$i61.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 143, 7} true;
  assume {:verifier.code 0} true;
  $i63 := $and.i32($i62,1);
  $i63.dup := $or.i1($i62.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 140, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $sext.i32.i64($i63);
  $i64.dup := $i63.dup;
  call {:cexpr "bit"} boogie_si_record_i64($i64);
  $p65 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(40,8));
  $p65.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 144, 19} true;
  assume {:verifier.code 0} true;
  $p65.dup := 0;
  $i66 := $load.i64($M.0,$p65);
  $i66.dup := $load.i1($M.0.dup,$p65);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 144, 29} true;
  assume {:verifier.code 0} true;
  $i67 := $xor.i64($i66,$i64);
  $i67.dup := $or.i1($i66.dup,$i64.dup);
  call {:cexpr "sw"} boogie_si_record_i64($i67);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 145, 5} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_cswap2($i67, $i67.dup, $p50, $p50.dup, $p53, $p53.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 146, 43} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,16));
  $p68.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 146, 5} true;
  assume {:verifier.code 0} true;
  call point_add_and_double($p2, $p2.dup, $p50, $p50.dup, $p68, $p68.dup);
  $p69 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(40,8));
  $p69.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 147, 15} true;
  assume {:verifier.code 0} true;
  $p69.dup := 0;
  $M.0 := $store.i64($M.0,$p69,$i64);
  $M.0.dup := $store.i1($M.0.dup,$p69,$i64.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 148, 3} true;
  assume {:verifier.code 0} true;
  goto $bb8;
$bb7:
  assume !($i49 == 1);
  $p71 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(40,8));
  $p71.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 149, 17} true;
  assume {:verifier.code 0} true;
  $p71.dup := 0;
  $i72 := $load.i64($M.0,$p71);
  $i72.dup := $load.i1($M.0.dup,$p71);
  call {:cexpr "sw"} boogie_si_record_i64($i72);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 150, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_cswap2($i72, $i72.dup, $p41, $p41.dup, $p43, $p43.dup);
  $p73 := $add.ref($add.ref($p5,$mul.ref(0,328)),$mul.ref(20,8));
  $p73.dup := $or.i1($or.i1($p5.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 153, 28} true;
  assume {:verifier.code 0} true;
  $p74 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,16));
  $p74.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 153, 3} true;
  assume {:verifier.code 0} true;
  call point_double($p39, $p39.dup, $p73, $p73.dup, $p74, $p74.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 154, 28} true;
  assume {:verifier.code 0} true;
  $p75 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,16));
  $p75.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 154, 3} true;
  assume {:verifier.code 0} true;
  call point_double($p39, $p39.dup, $p73, $p73.dup, $p75, $p75.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 155, 28} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($add.ref($p3,$mul.ref(0,160)),$mul.ref(0,16));
  $p76.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 155, 3} true;
  assume {:verifier.code 0} true;
  call point_double($p39, $p39.dup, $p73, $p73.dup, $p76, $p76.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 156, 3} true;
  assume {:verifier.code 0} true;
  $p77 := $bitcast.ref.ref($p0);
  $p77.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 156, 3} true;
  assume {:verifier.code 0} true;
  $p78 := $bitcast.ref.ref($p19);
  $p78.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 156, 3} true;
  assume {:verifier.code 0} true;
  $p77.dup := 0;
  $p78.dup := 0;
  call $M.0, $M.0.dup := $memcpy.i8($M.0, $M.0.dup, $M.0, $M.0.dup, $p77, $p77.dup, $p78, $p78.dup, 80, 0, false, false);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 157, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
$bb8:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 132, 56} true;
  assume {:verifier.code 0} true;
  $i70 := $add.i32($i48,1);
  $i70.dup := $or.i1($i48.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i70);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 132, 3} true;
  assume {:verifier.code 0} true;
  $i48 := $i70;
  $i48.dup := 0;
  goto $bb5;
}
const encode_point: ref;
axiom (encode_point == $sub.ref(0,17544));
procedure {:inline 1} encode_point($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1)
modifies $M.0, $M.225, $M.226, $M.223, $exn;
modifies $M.90;
modifies $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.86, $M.87, $M.88, $M.89, $M.91, $M.92, $M.93;
modifies $M.227, $M.228;
modifies $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85;
modifies $CurrAddr;
{
  var $p2: ref;
  var $p2.dup: i1;
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $p8: ref;
  var $p8.dup: i1;
  var $i9: i32;
  var $i9.dup: i1;
  var $i10: i1;
  var $i10.dup: i1;
  var $p11: ref;
  var $p11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
  var $p13: ref;
  var $p13.dup: i1;
  var $i14: i64;
  var $i14.dup: i1;
  var $p15: ref;
  var $p15.dup: i1;
  var $i16: i64;
  var $i16.dup: i1;
  var $i17: i128;
  var $i17.dup: i1;
  var $i18: i64;
  var $i18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $i20: i32;
  var $i20.dup: i1;
  var $p21: ref;
  var $p21.dup: i1;
  var $p22: ref;
  var $p22.dup: i1;
  var $p23: ref;
  var $p23.dup: i1;
  var $p24: ref;
  var $p24.dup: i1;
  var $p25: ref;
  var $p25.dup: i1;
  var $p26: ref;
  var $p26.dup: i1;
  var $p27: ref;
  var $p27.dup: i1;
  var $i28: i32;
  var $i28.dup: i1;
  var $i29: i64;
  var $i29.dup: i1;
  var $p30: ref;
  var $p30.dup: i1;
  var $i31: i64;
  var $i31.dup: i1;
  var $p32: ref;
  var $p32.dup: i1;
  var $i33: i64;
  var $i33.dup: i1;
  var $i34: i64;
  var $i34.dup: i1;
  var $i35: i32;
  var $i35.dup: i1;
  var $i36: i32;
  var $i36.dup: i1;
  var $i37: i64;
  var $i37.dup: i1;
  var $p38: ref;
  var $p38.dup: i1;
  var $i39: i64;
  var $i39.dup: i1;
  var $p40: ref;
  var $p40.dup: i1;
  var $i41: i64;
  var $i41.dup: i1;
  var $i42: i64;
  var $i42.dup: i1;
  var $i43: i32;
  var $i43.dup: i1;
  var $i44: i32;
  var $i44.dup: i1;
  var $i45: i64;
  var $i45.dup: i1;
  var $p46: ref;
  var $p46.dup: i1;
  var $i47: i64;
  var $i47.dup: i1;
  var $p48: ref;
  var $p48.dup: i1;
  var $i49: i64;
  var $i49.dup: i1;
  var $i50: i64;
  var $i50.dup: i1;
  var $i51: i32;
  var $i51.dup: i1;
  var $i52: i32;
  var $i52.dup: i1;
  var $i53: i64;
  var $i53.dup: i1;
  var $p54: ref;
  var $p54.dup: i1;
  var $i55: i64;
  var $i55.dup: i1;
  var $p56: ref;
  var $p56.dup: i1;
  var $i57: i64;
  var $i57.dup: i1;
  var $i58: i64;
  var $i58.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 218, 19} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(40,$zext.i32.i64(1)));
  $p2.dup := 0;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(32,$zext.i32.i64(1)));
  $p3.dup := 0;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(160,$zext.i32.i64(1)));
  $p4.dup := 0;
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p5.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 218, 19} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p1,$mul.ref(5,8));
  $p6.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 219, 12} true;
  assume {:verifier.code 0} true;
  $p7 := $bitcast.ref.ref($p2);
  $p7.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 219, 12} true;
  assume {:verifier.code 0} true;
  $p7.dup := 0;
  call $M.0, $M.0.dup := $memset.i8($M.0, $M.0.dup, $p7, $p7.dup, 0, 0, 40, 0, false, false);
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 220, 12} true;
  assume {:verifier.code 0} true;
  $p8 := $bitcast.ref.ref($p3);
  $p8.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 220, 12} true;
  assume {:verifier.code 0} true;
  $p8.dup := 0;
  call $M.225, $M.225.dup := $memset.i8($M.225, $M.225.dup, $p8, $p8.dup, 0, 0, 32, 0, false, false);
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 222, 8} true;
  assume {:verifier.code 0} true;
  $i9 := 0;
  $i9.dup := 0;
  goto $bb1;
$bb1:
  assert {:shadow_invariant} $shadow_ok;
  assert {:likely_shadow_invariant} ($p4.dup == 0);
  assert {:likely_shadow_invariant} ($p6.dup == 0);
  assert {:likely_shadow_invariant} ($p3.dup == 0);
  assert {:likely_shadow_invariant} ($p2.dup == 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 222, 29} true;
  assume {:verifier.code 0} true;
  $i10 := $ult.i32($i9,10);
  $i10.dup := $or.i1($i9.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 222, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  $i10.dup := 0;
  goto $bb2, $bb3;
$bb2:
  assume ($i10 == 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  call $p11, $p11.dup := FStar_UInt128_uint64_to_uint128(0, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  $p12 := $bitcast.ref.ref($p5);
  $p12.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($add.ref($p12,$mul.ref(0,16)),$mul.ref(0,1));
  $p13.dup := $or.i1($or.i1($p12.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  $i14 := $extractvalue.i64($p11,0);
  $i14.dup := $or.i1($p11.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  $p13.dup := 0;
  $M.226 := $store.i64($M.226,$p13,$i14);
  $M.226.dup := $store.i1($M.226.dup,$p13,$i14.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($add.ref($p12,$mul.ref(0,16)),$mul.ref(8,1));
  $p15.dup := $or.i1($or.i1($p12.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $extractvalue.i64($p11,1);
  $i16.dup := $or.i1($p11.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  $p15.dup := 0;
  $M.226 := $store.i64($M.226,$p15,$i16);
  $M.226.dup := $store.i1($M.226.dup,$p15,$i16.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 17} true;
  assume {:verifier.code 0} true;
  $p5.dup := 0;
  $i17 := $load.i128($M.226,$p5);
  $i17.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 5} true;
  assume {:verifier.code 0} true;
  $i18 := $zext.i32.i64($i9);
  $i18.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 5} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($add.ref($p4,$mul.ref(0,160)),$mul.ref($i18,16));
  $p19.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1($i18.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 15} true;
  assume {:verifier.code 0} true;
  $p19.dup := 0;
  $M.223 := $store.i128($M.223,$p19,$i17);
  $M.223.dup := $store.i1($M.223.dup,$p19,$i17.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 223, 5} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume !($i10 == 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 224, 27} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($add.ref($p2,$mul.ref(0,40)),$mul.ref(0,8));
  $p21.dup := $or.i1($or.i1($p2.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 224, 35} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($add.ref($p4,$mul.ref(0,160)),$mul.ref(0,16));
  $p22.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 224, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_finv($p21, $p21.dup, $p6, $p6.dup, $p22, $p22.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 225, 37} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($add.ref($p2,$mul.ref(0,40)),$mul.ref(0,8));
  $p23.dup := $or.i1($or.i1($p2.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 225, 42} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($add.ref($p2,$mul.ref(0,40)),$mul.ref(0,8));
  $p24.dup := $or.i1($or.i1($p2.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 225, 50} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($add.ref($p4,$mul.ref(0,160)),$mul.ref(0,16));
  $p25.dup := $or.i1($or.i1($p4.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 225, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p23, $p23.dup, $p24, $p24.dup, $p1, $p1.dup, $p25, $p25.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 226, 44} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($add.ref($p3,$mul.ref(0,32)),$mul.ref(0,8));
  $p26.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 226, 50} true;
  assume {:verifier.code 0} true;
  $p27 := $add.ref($add.ref($p2,$mul.ref(0,40)),$mul.ref(0,8));
  $p27.dup := $or.i1($or.i1($p2.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 226, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_store_felem($p26, $p26.dup, $p27, $p27.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  goto $bb5;
$bb4:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 222, 46} true;
  assume {:verifier.code 0} true;
  $i20 := $add.i32($i9,1);
  $i20.dup := $or.i1($i9.dup,0);
  call {:cexpr "_i"} boogie_si_record_i32($i20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 222, 3} true;
  assume {:verifier.code 0} true;
  $i9 := $i20;
  $i9.dup := 0;
  goto $bb1;
$bb5:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i28 := $mul.i32(0,8);
  $i28.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i29 := $zext.i32.i64($i28);
  $i29.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  assume {:PointTainted} true;
  $p30 := $add.ref($p0,$mul.ref($i29,1));
  $p30.dup := $or.i1($p0.dup,$or.i1($i29.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i31 := $zext.i32.i64(0);
  $i31.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($add.ref($p3,$mul.ref(0,32)),$mul.ref($i31,8));
  $p32.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1($i31.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $p32.dup := 0;
  $i33 := $load.i64($M.225,$p32);
  $i33.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  call $i34, $i34.dup := __uint64_identity($i33, $i33.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  call store64($p30, $p30.dup, $i34, $i34.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i35 := $add.i32(0,1);
  $i35.dup := $or.i1(0,0);
  call {:cexpr "i0"} boogie_si_record_i32($i35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i36 := $mul.i32($i35,8);
  $i36.dup := $or.i1($i35.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i37 := $zext.i32.i64($i36);
  $i37.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  assume {:PointTainted} true;
  $p38 := $add.ref($p0,$mul.ref($i37,1));
  $p38.dup := $or.i1($p0.dup,$or.i1($i37.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i39 := $zext.i32.i64($i35);
  $i39.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($add.ref($p3,$mul.ref(0,32)),$mul.ref($i39,8));
  $p40.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1($i39.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $p40.dup := 0;
  $i41 := $load.i64($M.225,$p40);
  $i41.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  call $i42, $i42.dup := __uint64_identity($i41, $i41.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  call store64($p38, $p38.dup, $i42, $i42.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i43 := $add.i32($i35,1);
  $i43.dup := $or.i1($i35.dup,0);
  call {:cexpr "i0"} boogie_si_record_i32($i43);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i44 := $mul.i32($i43,8);
  $i44.dup := $or.i1($i43.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i45 := $zext.i32.i64($i44);
  $i45.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  assume {:PointTainted} true;
  $p46 := $add.ref($p0,$mul.ref($i45,1));
  $p46.dup := $or.i1($p0.dup,$or.i1($i45.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i47 := $zext.i32.i64($i43);
  $i47.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($add.ref($p3,$mul.ref(0,32)),$mul.ref($i47,8));
  $p48.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1($i47.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $p48.dup := 0;
  $i49 := $load.i64($M.225,$p48);
  $i49.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  call $i50, $i50.dup := __uint64_identity($i49, $i49.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  call store64($p46, $p46.dup, $i50, $i50.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i51 := $add.i32($i43,1);
  $i51.dup := $or.i1($i43.dup,0);
  call {:cexpr "i0"} boogie_si_record_i32($i51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i52 := $mul.i32($i51,8);
  $i52.dup := $or.i1($i51.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i53 := $zext.i32.i64($i52);
  $i53.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  assume {:PointTainted} true;
  $p54 := $add.ref($p0,$mul.ref($i53,1));
  $p54.dup := $or.i1($p0.dup,$or.i1($i53.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $i55 := $zext.i32.i64($i51);
  $i55.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($add.ref($p3,$mul.ref(0,32)),$mul.ref($i55,8));
  $p56.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1($i55.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  $p56.dup := 0;
  $i57 := $load.i64($M.225,$p56);
  $i57.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  call $i58, $i58.dup := __uint64_identity($i57, $i57.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  call store64($p54, $p54.dup, $i58, $i58.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 227, 3} true;
  assume {:verifier.code 0} true;
  goto $bb6;
$bb6:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 232, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_store_felem: ref;
axiom (Hacl_Impl_Curve25519_Field51_store_felem == $sub.ref(0,18576));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_store_felem($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1)
modifies $M.225, $exn;
{
  var $p2: ref;
  var $p2.dup: i1;
  var $i3: i64;
  var $i3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $i5: i64;
  var $i5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $i7: i64;
  var $i7.dup: i1;
  var $p8: ref;
  var $p8.dup: i1;
  var $i9: i64;
  var $i9.dup: i1;
  var $p10: ref;
  var $p10.dup: i1;
  var $i11: i64;
  var $i11.dup: i1;
  var $i12: i64;
  var $i12.dup: i1;
  var $i13: i64;
  var $i13.dup: i1;
  var $i14: i64;
  var $i14.dup: i1;
  var $i15: i64;
  var $i15.dup: i1;
  var $i16: i64;
  var $i16.dup: i1;
  var $i17: i64;
  var $i17.dup: i1;
  var $i18: i64;
  var $i18.dup: i1;
  var $i19: i64;
  var $i19.dup: i1;
  var $i20: i64;
  var $i20.dup: i1;
  var $i21: i64;
  var $i21.dup: i1;
  var $i22: i64;
  var $i22.dup: i1;
  var $i23: i64;
  var $i23.dup: i1;
  var $i24: i64;
  var $i24.dup: i1;
  var $i25: i64;
  var $i25.dup: i1;
  var $i26: i64;
  var $i26.dup: i1;
  var $i27: i64;
  var $i27.dup: i1;
  var $i28: i64;
  var $i28.dup: i1;
  var $i29: i64;
  var $i29.dup: i1;
  var $i30: i64;
  var $i30.dup: i1;
  var $i31: i64;
  var $i31.dup: i1;
  var $i32: i64;
  var $i32.dup: i1;
  var $i33: i64;
  var $i33.dup: i1;
  var $i34: i64;
  var $i34.dup: i1;
  var $i35: i64;
  var $i35.dup: i1;
  var $i36: i64;
  var $i36.dup: i1;
  var $i37: i64;
  var $i37.dup: i1;
  var $i38: i64;
  var $i38.dup: i1;
  var $i39: i64;
  var $i39.dup: i1;
  var $i40: i64;
  var $i40.dup: i1;
  var $i41: i64;
  var $i41.dup: i1;
  var $i42: i64;
  var $i42.dup: i1;
  var $i43: i64;
  var $i43.dup: i1;
  var $i44: i64;
  var $i44.dup: i1;
  var $i45: i64;
  var $i45.dup: i1;
  var $i46: i64;
  var $i46.dup: i1;
  var $i47: i64;
  var $i47.dup: i1;
  var $i48: i64;
  var $i48.dup: i1;
  var $i49: i64;
  var $i49.dup: i1;
  var $i50: i64;
  var $i50.dup: i1;
  var $i51: i64;
  var $i51.dup: i1;
  var $i52: i64;
  var $i52.dup: i1;
  var $i53: i64;
  var $i53.dup: i1;
  var $i54: i64;
  var $i54.dup: i1;
  var $i55: i64;
  var $i55.dup: i1;
  var $i56: i64;
  var $i56.dup: i1;
  var $i57: i64;
  var $i57.dup: i1;
  var $i58: i64;
  var $i58.dup: i1;
  var $i59: i64;
  var $i59.dup: i1;
  var $i60: i64;
  var $i60.dup: i1;
  var $i61: i64;
  var $i61.dup: i1;
  var $p62: ref;
  var $p62.dup: i1;
  var $p63: ref;
  var $p63.dup: i1;
  var $p64: ref;
  var $p64.dup: i1;
  var $p65: ref;
  var $p65.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 603, 17} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 603, 17} true;
  assume {:verifier.code 0} true;
  $p2 := $add.ref($p1,$mul.ref(0,8));
  $p2.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 603, 17} true;
  assume {:verifier.code 0} true;
  $p2.dup := 0;
  $i3 := $load.i64($M.0,$p2);
  $i3.dup := 0;
  call {:cexpr "f0"} boogie_si_record_i64($i3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 604, 17} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p1,$mul.ref(1,8));
  $p4.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 604, 17} true;
  assume {:verifier.code 0} true;
  $p4.dup := 0;
  $i5 := $load.i64($M.0,$p4);
  $i5.dup := 0;
  call {:cexpr "f1"} boogie_si_record_i64($i5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 605, 17} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p1,$mul.ref(2,8));
  $p6.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 605, 17} true;
  assume {:verifier.code 0} true;
  $p6.dup := 0;
  $i7 := $load.i64($M.0,$p6);
  $i7.dup := 0;
  call {:cexpr "f2"} boogie_si_record_i64($i7);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 606, 17} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p1,$mul.ref(3,8));
  $p8.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 606, 17} true;
  assume {:verifier.code 0} true;
  $p8.dup := 0;
  $i9 := $load.i64($M.0,$p8);
  $i9.dup := 0;
  call {:cexpr "f3"} boogie_si_record_i64($i9);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 607, 17} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p1,$mul.ref(4,8));
  $p10.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 607, 17} true;
  assume {:verifier.code 0} true;
  $p10.dup := 0;
  $i11 := $load.i64($M.0,$p10);
  $i11.dup := 0;
  call {:cexpr "f4"} boogie_si_record_i64($i11);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 608, 20} true;
  assume {:verifier.code 0} true;
  $i12 := $add.i64($i3,0);
  $i12.dup := $or.i1($i3.dup,0);
  call {:cexpr "l_"} boogie_si_record_i64($i12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 609, 22} true;
  assume {:verifier.code 0} true;
  $i13 := $and.i64($i12,2251799813685247);
  $i13.dup := $or.i1($i12.dup,0);
  call {:cexpr "tmp0"} boogie_si_record_i64($i13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 610, 20} true;
  assume {:verifier.code 0} true;
  $i14 := $lshr.i64($i12,51);
  $i14.dup := $or.i1($i12.dup,0);
  call {:cexpr "c0"} boogie_si_record_i64($i14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 611, 21} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i64($i5,$i14);
  $i15.dup := 0;
  call {:cexpr "l_0"} boogie_si_record_i64($i15);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 612, 23} true;
  assume {:verifier.code 0} true;
  $i16 := $and.i64($i15,2251799813685247);
  $i16.dup := $or.i1($i15.dup,0);
  call {:cexpr "tmp1"} boogie_si_record_i64($i16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 613, 21} true;
  assume {:verifier.code 0} true;
  $i17 := $lshr.i64($i15,51);
  $i17.dup := $or.i1($i15.dup,0);
  call {:cexpr "c1"} boogie_si_record_i64($i17);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 614, 21} true;
  assume {:verifier.code 0} true;
  $i18 := $add.i64($i7,$i17);
  $i18.dup := 0;
  call {:cexpr "l_1"} boogie_si_record_i64($i18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 615, 23} true;
  assume {:verifier.code 0} true;
  $i19 := $and.i64($i18,2251799813685247);
  $i19.dup := $or.i1($i18.dup,0);
  call {:cexpr "tmp2"} boogie_si_record_i64($i19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 616, 21} true;
  assume {:verifier.code 0} true;
  $i20 := $lshr.i64($i18,51);
  $i20.dup := $or.i1($i18.dup,0);
  call {:cexpr "c2"} boogie_si_record_i64($i20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 617, 21} true;
  assume {:verifier.code 0} true;
  $i21 := $add.i64($i9,$i20);
  $i21.dup := 0;
  call {:cexpr "l_2"} boogie_si_record_i64($i21);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 618, 23} true;
  assume {:verifier.code 0} true;
  $i22 := $and.i64($i21,2251799813685247);
  $i22.dup := $or.i1($i21.dup,0);
  call {:cexpr "tmp3"} boogie_si_record_i64($i22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 619, 21} true;
  assume {:verifier.code 0} true;
  $i23 := $lshr.i64($i21,51);
  $i23.dup := $or.i1($i21.dup,0);
  call {:cexpr "c3"} boogie_si_record_i64($i23);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 620, 21} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i64($i11,$i23);
  $i24.dup := 0;
  call {:cexpr "l_3"} boogie_si_record_i64($i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 621, 23} true;
  assume {:verifier.code 0} true;
  $i25 := $and.i64($i24,2251799813685247);
  $i25.dup := $or.i1($i24.dup,0);
  call {:cexpr "tmp4"} boogie_si_record_i64($i25);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 622, 21} true;
  assume {:verifier.code 0} true;
  $i26 := $lshr.i64($i24,51);
  $i26.dup := $or.i1($i24.dup,0);
  call {:cexpr "c4"} boogie_si_record_i64($i26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 623, 28} true;
  assume {:verifier.code 0} true;
  $i27 := $mul.i64($i26,19);
  $i27.dup := $or.i1($i26.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 623, 23} true;
  assume {:verifier.code 0} true;
  $i28 := $add.i64($i13,$i27);
  $i28.dup := 0;
  call {:cexpr "l_4"} boogie_si_record_i64($i28);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 624, 24} true;
  assume {:verifier.code 0} true;
  $i29 := $and.i64($i28,2251799813685247);
  $i29.dup := $or.i1($i28.dup,0);
  call {:cexpr "tmp0_"} boogie_si_record_i64($i29);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 625, 21} true;
  assume {:verifier.code 0} true;
  $i30 := $lshr.i64($i28,51);
  $i30.dup := $or.i1($i28.dup,0);
  call {:cexpr "c5"} boogie_si_record_i64($i30);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 627, 23} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i64($i16,$i30);
  $i31.dup := 0;
  call {:cexpr "f11"} boogie_si_record_i64($i31);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 631, 17} true;
  assume {:verifier.code 0} true;
  call $i32, $i32.dup := FStar_UInt64_gte_mask($i29, $i29.dup, 2251799813685229, 0);
  call {:cexpr "m0"} boogie_si_record_i64($i32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 632, 17} true;
  assume {:verifier.code 0} true;
  call $i33, $i33.dup := FStar_UInt64_eq_mask($i31, $i31.dup, 2251799813685247, 0);
  call {:cexpr "m1"} boogie_si_record_i64($i33);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 633, 17} true;
  assume {:verifier.code 0} true;
  call $i34, $i34.dup := FStar_UInt64_eq_mask($i19, $i19.dup, 2251799813685247, 0);
  call {:cexpr "m2"} boogie_si_record_i64($i34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 634, 17} true;
  assume {:verifier.code 0} true;
  call $i35, $i35.dup := FStar_UInt64_eq_mask($i22, $i22.dup, 2251799813685247, 0);
  call {:cexpr "m3"} boogie_si_record_i64($i35);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 635, 17} true;
  assume {:verifier.code 0} true;
  call $i36, $i36.dup := FStar_UInt64_eq_mask($i25, $i25.dup, 2251799813685247, 0);
  call {:cexpr "m4"} boogie_si_record_i64($i36);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 636, 25} true;
  assume {:verifier.code 0} true;
  $i37 := $and.i64($i32,$i33);
  $i37.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 636, 31} true;
  assume {:verifier.code 0} true;
  $i38 := $and.i64($i37,$i34);
  $i38.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 636, 37} true;
  assume {:verifier.code 0} true;
  $i39 := $and.i64($i38,$i35);
  $i39.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 636, 43} true;
  assume {:verifier.code 0} true;
  $i40 := $and.i64($i39,$i36);
  $i40.dup := 0;
  call {:cexpr "mask"} boogie_si_record_i64($i40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 637, 30} true;
  assume {:verifier.code 0} true;
  $i41 := $and.i64($i40,2251799813685229);
  $i41.dup := $or.i1($i40.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 637, 22} true;
  assume {:verifier.code 0} true;
  $i42 := $sub.i64($i29,$i41);
  $i42.dup := 0;
  call {:cexpr "f0_"} boogie_si_record_i64($i42);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 638, 30} true;
  assume {:verifier.code 0} true;
  $i43 := $and.i64($i40,2251799813685247);
  $i43.dup := $or.i1($i40.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 638, 22} true;
  assume {:verifier.code 0} true;
  $i44 := $sub.i64($i31,$i43);
  $i44.dup := 0;
  call {:cexpr "f1_"} boogie_si_record_i64($i44);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 639, 30} true;
  assume {:verifier.code 0} true;
  $i45 := $and.i64($i40,2251799813685247);
  $i45.dup := $or.i1($i40.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 639, 22} true;
  assume {:verifier.code 0} true;
  $i46 := $sub.i64($i19,$i45);
  $i46.dup := 0;
  call {:cexpr "f2_"} boogie_si_record_i64($i46);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 640, 30} true;
  assume {:verifier.code 0} true;
  $i47 := $and.i64($i40,2251799813685247);
  $i47.dup := $or.i1($i40.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 640, 22} true;
  assume {:verifier.code 0} true;
  $i48 := $sub.i64($i22,$i47);
  $i48.dup := 0;
  call {:cexpr "f3_"} boogie_si_record_i64($i48);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 641, 30} true;
  assume {:verifier.code 0} true;
  $i49 := $and.i64($i40,2251799813685247);
  $i49.dup := $or.i1($i40.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 641, 22} true;
  assume {:verifier.code 0} true;
  $i50 := $sub.i64($i25,$i49);
  $i50.dup := 0;
  call {:cexpr "f4_"} boogie_si_record_i64($i50);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 647, 28} true;
  assume {:verifier.code 0} true;
  $i51 := $shl.i64($i44,51);
  $i51.dup := $or.i1($i44.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 647, 22} true;
  assume {:verifier.code 0} true;
  $i52 := $or.i64($i42,$i51);
  $i52.dup := 0;
  call {:cexpr "o00"} boogie_si_record_i64($i52);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 648, 22} true;
  assume {:verifier.code 0} true;
  $i53 := $lshr.i64($i44,13);
  $i53.dup := $or.i1($i44.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 648, 45} true;
  assume {:verifier.code 0} true;
  $i54 := $shl.i64($i46,38);
  $i54.dup := $or.i1($i46.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 648, 39} true;
  assume {:verifier.code 0} true;
  $i55 := $or.i64($i53,$i54);
  $i55.dup := 0;
  call {:cexpr "o10"} boogie_si_record_i64($i55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 649, 22} true;
  assume {:verifier.code 0} true;
  $i56 := $lshr.i64($i46,26);
  $i56.dup := $or.i1($i46.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 649, 45} true;
  assume {:verifier.code 0} true;
  $i57 := $shl.i64($i48,25);
  $i57.dup := $or.i1($i48.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 649, 39} true;
  assume {:verifier.code 0} true;
  $i58 := $or.i64($i56,$i57);
  $i58.dup := 0;
  call {:cexpr "o20"} boogie_si_record_i64($i58);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 650, 22} true;
  assume {:verifier.code 0} true;
  $i59 := $lshr.i64($i48,39);
  $i59.dup := $or.i1($i48.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 650, 45} true;
  assume {:verifier.code 0} true;
  $i60 := $shl.i64($i50,12);
  $i60.dup := $or.i1($i50.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 650, 39} true;
  assume {:verifier.code 0} true;
  $i61 := $or.i64($i59,$i60);
  $i61.dup := 0;
  call {:cexpr "o30"} boogie_si_record_i64($i61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 655, 3} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($p0,$mul.ref(0,8));
  $p62.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 655, 12} true;
  assume {:verifier.code 0} true;
  $p62.dup := 0;
  $M.225 := $store.i64($M.225,$p62,$i52);
  $M.225.dup := $store.i1($M.225.dup,$p62,$i52.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 656, 3} true;
  assume {:verifier.code 0} true;
  $p63 := $add.ref($p0,$mul.ref(1,8));
  $p63.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 656, 12} true;
  assume {:verifier.code 0} true;
  $p63.dup := 0;
  $M.225 := $store.i64($M.225,$p63,$i55);
  $M.225.dup := $store.i1($M.225.dup,$p63,$i55.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 657, 3} true;
  assume {:verifier.code 0} true;
  $p64 := $add.ref($p0,$mul.ref(2,8));
  $p64.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 657, 12} true;
  assume {:verifier.code 0} true;
  $p64.dup := 0;
  $M.225 := $store.i64($M.225,$p64,$i58);
  $M.225.dup := $store.i1($M.225.dup,$p64,$i58.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 658, 3} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($p0,$mul.ref(3,8));
  $p65.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 658, 12} true;
  assume {:verifier.code 0} true;
  $p65.dup := 0;
  $M.225 := $store.i64($M.225,$p65,$i61);
  $M.225.dup := $store.i1($M.225.dup,$p65,$i61.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 659, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const store64: ref;
axiom (store64 == $sub.ref(0,19608));
procedure {:inline 1} store64($p0: ref, $p0.dup: i1, $i1: i64, $i1.dup: i1)
modifies $M.227, $M.228, $exn;
modifies $CurrAddr;
requires ($p0.dup == 0);
{
  var $p2: ref;
  var $p2.dup: i1;
  var $p3: ref;
  var $p3.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 187, 3} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p2 := $alloc($mul.ref(8,$zext.i32.i64(1)));
  $p2.dup := 0;
  assume {:verifier.code 0} true;
  $p2.dup := 0;
  $M.227 := $store.i64($M.227,$p2,$i1);
  $M.227.dup := $store.i1($M.227.dup,$p2,$i1.dup);
  assume true;
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 187, 3} true;
  assume {:verifier.code 0} true;
  $p3 := $bitcast.ref.ref($p2);
  $p3.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 187, 3} true;
  assume {:verifier.code 0} true;
  $p3.dup := 0;
  call $M.228, $M.228.dup := $memcpy.i8($M.228, $M.228.dup, $M.227, $M.227.dup, $p0, $p0.dup, $p3, $p3.dup, 8, 0, false, false);
  assume {:sourceloc "../hacl-star/dist/karamel/include/krml/lowstar_endianness.h", 188, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const llvm.memcpy.p0i8.p0i8.i64: ref;
axiom (llvm.memcpy.p0i8.p0i8.i64 == $sub.ref(0,20640));
procedure {:inline 1} llvm.memcpy.p0i8.p0i8.i64($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $i2: i64, $i2.dup: i1, $i3: i1, $i3.dup: i1);
const FStar_UInt64_gte_mask: ref;
axiom (FStar_UInt64_gte_mask == $sub.ref(0,21672));
procedure {:inline 1} FStar_UInt64_gte_mask($i0: i64, $i0.dup: i1, $i1: i64, $i1.dup: i1) returns ($r: i64, $r.dup: i1)
modifies $exn;
{
  var $i2: i64;
  var $i2.dup: i1;
  var $i3: i64;
  var $i3.dup: i1;
  var $i4: i64;
  var $i4.dup: i1;
  var $i5: i64;
  var $i5.dup: i1;
  var $i6: i64;
  var $i6.dup: i1;
  var $i7: i64;
  var $i7.dup: i1;
  var $i8: i64;
  var $i8.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 48, 24} true;
  assume {:verifier.code 0} true;
  call {:cexpr "FStar_UInt64_gte_mask:arg:a"} boogie_si_record_i64($i0);
  call {:cexpr "FStar_UInt64_gte_mask:arg:b"} boogie_si_record_i64($i1);
  call {:cexpr "FStar_UInt64_gte_mask:arg:x"} boogie_si_record_i64($i0);
  call {:cexpr "FStar_UInt64_gte_mask:arg:y"} boogie_si_record_i64($i1);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 48, 24} true;
  assume {:verifier.code 0} true;
  $i2 := $xor.i64($i0,$i1);
  $i2.dup := 0;
  call {:cexpr "x_xor_y"} boogie_si_record_i64($i2);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 49, 24} true;
  assume {:verifier.code 0} true;
  $i3 := $sub.i64($i0,$i1);
  $i3.dup := 0;
  call {:cexpr "x_sub_y"} boogie_si_record_i64($i3);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 50, 36} true;
  assume {:verifier.code 0} true;
  $i4 := $xor.i64($i3,$i1);
  $i4.dup := 0;
  call {:cexpr "x_sub_y_xor_y"} boogie_si_record_i64($i4);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 51, 24} true;
  assume {:verifier.code 0} true;
  $i5 := $or.i64($i2,$i4);
  $i5.dup := 0;
  call {:cexpr "q"} boogie_si_record_i64($i5);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 52, 24} true;
  assume {:verifier.code 0} true;
  $i6 := $xor.i64($i0,$i5);
  $i6.dup := 0;
  call {:cexpr "x_xor_q"} boogie_si_record_i64($i6);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 53, 31} true;
  assume {:verifier.code 0} true;
  $i7 := $lshr.i64($i6,63);
  $i7.dup := $or.i1($i6.dup,0);
  call {:cexpr "x_xor_q_"} boogie_si_record_i64($i7);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 54, 19} true;
  assume {:verifier.code 0} true;
  $i8 := $sub.i64($i7,1);
  $i8.dup := $or.i1($i7.dup,0);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 54, 3} true;
  assume {:verifier.code 0} true;
  $r := $i8;
  $r.dup := 0;
  $exn := false;
  $exn.dup := false;
  return;
}
const FStar_UInt64_eq_mask: ref;
axiom (FStar_UInt64_eq_mask == $sub.ref(0,22704));
procedure {:inline 1} FStar_UInt64_eq_mask($i0: i64, $i0.dup: i1, $i1: i64, $i1.dup: i1) returns ($r: i64, $r.dup: i1)
modifies $exn;
{
  var $i2: i64;
  var $i2.dup: i1;
  var $i3: i64;
  var $i3.dup: i1;
  var $i4: i64;
  var $i4.dup: i1;
  var $i5: i64;
  var $i5.dup: i1;
  var $i6: i64;
  var $i6.dup: i1;
  var $i7: i64;
  var $i7.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 37, 18} true;
  assume {:verifier.code 0} true;
  call {:cexpr "FStar_UInt64_eq_mask:arg:a"} boogie_si_record_i64($i0);
  call {:cexpr "FStar_UInt64_eq_mask:arg:b"} boogie_si_record_i64($i1);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 37, 18} true;
  assume {:verifier.code 0} true;
  $i2 := $xor.i64($i0,$i1);
  $i2.dup := 0;
  call {:cexpr "x"} boogie_si_record_i64($i2);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 38, 22} true;
  assume {:verifier.code 0} true;
  $i3 := $xor.i64($i2,$sub.i64(0,1));
  $i3.dup := $or.i1($i2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 38, 25} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i64($i3,1);
  $i4.dup := $or.i1($i3.dup,0);
  call {:cexpr "minus_x"} boogie_si_record_i64($i4);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 39, 29} true;
  assume {:verifier.code 0} true;
  $i5 := $or.i64($i2,$i4);
  $i5.dup := 0;
  call {:cexpr "x_or_minus_x"} boogie_si_record_i64($i5);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 40, 31} true;
  assume {:verifier.code 0} true;
  $i6 := $lshr.i64($i5,63);
  $i6.dup := $or.i1($i5.dup,0);
  call {:cexpr "xnx"} boogie_si_record_i64($i6);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 41, 14} true;
  assume {:verifier.code 0} true;
  $i7 := $sub.i64($i6,1);
  $i7.dup := $or.i1($i6.dup,0);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 41, 3} true;
  assume {:verifier.code 0} true;
  $r := $i7;
  $r.dup := 0;
  $exn := false;
  $exn.dup := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_cswap2: ref;
axiom (Hacl_Impl_Curve25519_Field51_cswap2 == $sub.ref(0,23736));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_cswap2($i0: i64, $i0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1)
modifies $M.0, $exn;
{
  var $i3: i64;
  var $i3.dup: i1;
  var $i4: i64;
  var $i4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $i6: i64;
  var $i6.dup: i1;
  var $i7: i64;
  var $i7.dup: i1;
  var $p8: ref;
  var $p8.dup: i1;
  var $i9: i64;
  var $i9.dup: i1;
  var $i10: i64;
  var $i10.dup: i1;
  var $i11: i64;
  var $i11.dup: i1;
  var $i12: i64;
  var $i12.dup: i1;
  var $p13: ref;
  var $p13.dup: i1;
  var $i14: i64;
  var $i14.dup: i1;
  var $i15: i64;
  var $i15.dup: i1;
  var $i16: i64;
  var $i16.dup: i1;
  var $p17: ref;
  var $p17.dup: i1;
  var $i18: i64;
  var $i18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $i20: i64;
  var $i20.dup: i1;
  var $i21: i64;
  var $i21.dup: i1;
  var $i22: i64;
  var $i22.dup: i1;
  var $p23: ref;
  var $p23.dup: i1;
  var $i24: i32;
  var $i24.dup: i1;
  var $i25: i64;
  var $i25.dup: i1;
  var $p26: ref;
  var $p26.dup: i1;
  var $i27: i64;
  var $i27.dup: i1;
  var $i28: i64;
  var $i28.dup: i1;
  var $p29: ref;
  var $p29.dup: i1;
  var $i30: i64;
  var $i30.dup: i1;
  var $i31: i64;
  var $i31.dup: i1;
  var $i32: i64;
  var $i32.dup: i1;
  var $i33: i64;
  var $i33.dup: i1;
  var $p34: ref;
  var $p34.dup: i1;
  var $i35: i64;
  var $i35.dup: i1;
  var $i36: i64;
  var $i36.dup: i1;
  var $i37: i64;
  var $i37.dup: i1;
  var $p38: ref;
  var $p38.dup: i1;
  var $i39: i64;
  var $i39.dup: i1;
  var $p40: ref;
  var $p40.dup: i1;
  var $i41: i64;
  var $i41.dup: i1;
  var $i42: i64;
  var $i42.dup: i1;
  var $i43: i64;
  var $i43.dup: i1;
  var $p44: ref;
  var $p44.dup: i1;
  var $i45: i32;
  var $i45.dup: i1;
  var $i46: i64;
  var $i46.dup: i1;
  var $p47: ref;
  var $p47.dup: i1;
  var $i48: i64;
  var $i48.dup: i1;
  var $i49: i64;
  var $i49.dup: i1;
  var $p50: ref;
  var $p50.dup: i1;
  var $i51: i64;
  var $i51.dup: i1;
  var $i52: i64;
  var $i52.dup: i1;
  var $i53: i64;
  var $i53.dup: i1;
  var $i54: i64;
  var $i54.dup: i1;
  var $p55: ref;
  var $p55.dup: i1;
  var $i56: i64;
  var $i56.dup: i1;
  var $i57: i64;
  var $i57.dup: i1;
  var $i58: i64;
  var $i58.dup: i1;
  var $p59: ref;
  var $p59.dup: i1;
  var $i60: i64;
  var $i60.dup: i1;
  var $p61: ref;
  var $p61.dup: i1;
  var $i62: i64;
  var $i62.dup: i1;
  var $i63: i64;
  var $i63.dup: i1;
  var $i64: i64;
  var $i64.dup: i1;
  var $p65: ref;
  var $p65.dup: i1;
  var $i66: i32;
  var $i66.dup: i1;
  var $i67: i64;
  var $i67.dup: i1;
  var $p68: ref;
  var $p68.dup: i1;
  var $i69: i64;
  var $i69.dup: i1;
  var $i70: i64;
  var $i70.dup: i1;
  var $p71: ref;
  var $p71.dup: i1;
  var $i72: i64;
  var $i72.dup: i1;
  var $i73: i64;
  var $i73.dup: i1;
  var $i74: i64;
  var $i74.dup: i1;
  var $i75: i64;
  var $i75.dup: i1;
  var $p76: ref;
  var $p76.dup: i1;
  var $i77: i64;
  var $i77.dup: i1;
  var $i78: i64;
  var $i78.dup: i1;
  var $i79: i64;
  var $i79.dup: i1;
  var $p80: ref;
  var $p80.dup: i1;
  var $i81: i64;
  var $i81.dup: i1;
  var $p82: ref;
  var $p82.dup: i1;
  var $i83: i64;
  var $i83.dup: i1;
  var $i84: i64;
  var $i84.dup: i1;
  var $i85: i64;
  var $i85.dup: i1;
  var $p86: ref;
  var $p86.dup: i1;
  var $i87: i32;
  var $i87.dup: i1;
  var $i88: i64;
  var $i88.dup: i1;
  var $p89: ref;
  var $p89.dup: i1;
  var $i90: i64;
  var $i90.dup: i1;
  var $i91: i64;
  var $i91.dup: i1;
  var $p92: ref;
  var $p92.dup: i1;
  var $i93: i64;
  var $i93.dup: i1;
  var $i94: i64;
  var $i94.dup: i1;
  var $i95: i64;
  var $i95.dup: i1;
  var $i96: i64;
  var $i96.dup: i1;
  var $p97: ref;
  var $p97.dup: i1;
  var $i98: i64;
  var $i98.dup: i1;
  var $i99: i64;
  var $i99.dup: i1;
  var $i100: i64;
  var $i100.dup: i1;
  var $p101: ref;
  var $p101.dup: i1;
  var $i102: i64;
  var $i102.dup: i1;
  var $p103: ref;
  var $p103.dup: i1;
  var $i104: i64;
  var $i104.dup: i1;
  var $i105: i64;
  var $i105.dup: i1;
  var $i106: i64;
  var $i106.dup: i1;
  var $p107: ref;
  var $p107.dup: i1;
  var $i108: i32;
  var $i108.dup: i1;
  var $i109: i64;
  var $i109.dup: i1;
  var $p110: ref;
  var $p110.dup: i1;
  var $i111: i64;
  var $i111.dup: i1;
  var $i112: i64;
  var $i112.dup: i1;
  var $p113: ref;
  var $p113.dup: i1;
  var $i114: i64;
  var $i114.dup: i1;
  var $i115: i64;
  var $i115.dup: i1;
  var $i116: i64;
  var $i116.dup: i1;
  var $i117: i64;
  var $i117.dup: i1;
  var $p118: ref;
  var $p118.dup: i1;
  var $i119: i64;
  var $i119.dup: i1;
  var $i120: i64;
  var $i120.dup: i1;
  var $i121: i64;
  var $i121.dup: i1;
  var $p122: ref;
  var $p122.dup: i1;
  var $i123: i64;
  var $i123.dup: i1;
  var $p124: ref;
  var $p124.dup: i1;
  var $i125: i64;
  var $i125.dup: i1;
  var $i126: i64;
  var $i126.dup: i1;
  var $i127: i64;
  var $i127.dup: i1;
  var $p128: ref;
  var $p128.dup: i1;
  var $i129: i32;
  var $i129.dup: i1;
  var $i130: i64;
  var $i130.dup: i1;
  var $p131: ref;
  var $p131.dup: i1;
  var $i132: i64;
  var $i132.dup: i1;
  var $i133: i64;
  var $i133.dup: i1;
  var $p134: ref;
  var $p134.dup: i1;
  var $i135: i64;
  var $i135.dup: i1;
  var $i136: i64;
  var $i136.dup: i1;
  var $i137: i64;
  var $i137.dup: i1;
  var $i138: i64;
  var $i138.dup: i1;
  var $p139: ref;
  var $p139.dup: i1;
  var $i140: i64;
  var $i140.dup: i1;
  var $i141: i64;
  var $i141.dup: i1;
  var $i142: i64;
  var $i142.dup: i1;
  var $p143: ref;
  var $p143.dup: i1;
  var $i144: i64;
  var $i144.dup: i1;
  var $p145: ref;
  var $p145.dup: i1;
  var $i146: i64;
  var $i146.dup: i1;
  var $i147: i64;
  var $i147.dup: i1;
  var $i148: i64;
  var $i148.dup: i1;
  var $p149: ref;
  var $p149.dup: i1;
  var $i150: i32;
  var $i150.dup: i1;
  var $i151: i64;
  var $i151.dup: i1;
  var $p152: ref;
  var $p152.dup: i1;
  var $i153: i64;
  var $i153.dup: i1;
  var $i154: i64;
  var $i154.dup: i1;
  var $p155: ref;
  var $p155.dup: i1;
  var $i156: i64;
  var $i156.dup: i1;
  var $i157: i64;
  var $i157.dup: i1;
  var $i158: i64;
  var $i158.dup: i1;
  var $i159: i64;
  var $i159.dup: i1;
  var $p160: ref;
  var $p160.dup: i1;
  var $i161: i64;
  var $i161.dup: i1;
  var $i162: i64;
  var $i162.dup: i1;
  var $i163: i64;
  var $i163.dup: i1;
  var $p164: ref;
  var $p164.dup: i1;
  var $i165: i64;
  var $i165.dup: i1;
  var $p166: ref;
  var $p166.dup: i1;
  var $i167: i64;
  var $i167.dup: i1;
  var $i168: i64;
  var $i168.dup: i1;
  var $i169: i64;
  var $i169.dup: i1;
  var $p170: ref;
  var $p170.dup: i1;
  var $i171: i32;
  var $i171.dup: i1;
  var $i172: i64;
  var $i172.dup: i1;
  var $p173: ref;
  var $p173.dup: i1;
  var $i174: i64;
  var $i174.dup: i1;
  var $i175: i64;
  var $i175.dup: i1;
  var $p176: ref;
  var $p176.dup: i1;
  var $i177: i64;
  var $i177.dup: i1;
  var $i178: i64;
  var $i178.dup: i1;
  var $i179: i64;
  var $i179.dup: i1;
  var $i180: i64;
  var $i180.dup: i1;
  var $p181: ref;
  var $p181.dup: i1;
  var $i182: i64;
  var $i182.dup: i1;
  var $i183: i64;
  var $i183.dup: i1;
  var $i184: i64;
  var $i184.dup: i1;
  var $p185: ref;
  var $p185.dup: i1;
  var $i186: i64;
  var $i186.dup: i1;
  var $p187: ref;
  var $p187.dup: i1;
  var $i188: i64;
  var $i188.dup: i1;
  var $i189: i64;
  var $i189.dup: i1;
  var $i190: i64;
  var $i190.dup: i1;
  var $p191: ref;
  var $p191.dup: i1;
  var $i192: i32;
  var $i192.dup: i1;
  var $i193: i64;
  var $i193.dup: i1;
  var $p194: ref;
  var $p194.dup: i1;
  var $i195: i64;
  var $i195.dup: i1;
  var $i196: i64;
  var $i196.dup: i1;
  var $p197: ref;
  var $p197.dup: i1;
  var $i198: i64;
  var $i198.dup: i1;
  var $i199: i64;
  var $i199.dup: i1;
  var $i200: i64;
  var $i200.dup: i1;
  var $i201: i64;
  var $i201.dup: i1;
  var $p202: ref;
  var $p202.dup: i1;
  var $i203: i64;
  var $i203.dup: i1;
  var $i204: i64;
  var $i204.dup: i1;
  var $i205: i64;
  var $i205.dup: i1;
  var $p206: ref;
  var $p206.dup: i1;
  var $i207: i64;
  var $i207.dup: i1;
  var $p208: ref;
  var $p208.dup: i1;
  var $i209: i64;
  var $i209.dup: i1;
  var $i210: i64;
  var $i210.dup: i1;
  var $i211: i64;
  var $i211.dup: i1;
  var $p212: ref;
  var $p212.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 664, 32} true;
  assume {:verifier.code 0} true;
  call {:cexpr "Hacl_Impl_Curve25519_Field51_cswap2:arg:bit"} boogie_si_record_i64($i0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 664, 32} true;
  assume {:verifier.code 0} true;
  $i3 := $sub.i64(0,$i0);
  $i3.dup := $or.i1(0,$i0.dup);
  call {:cexpr "mask"} boogie_si_record_i64($i3);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  goto $bb1;
$bb1:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i4 := $zext.i32.i64(0);
  $i4.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p1,$mul.ref($i4,8));
  $p5.dup := $or.i1($p1.dup,$or.i1($i4.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p5.dup := 0;
  $i6 := $load.i64($M.0,$p5);
  $i6.dup := $load.i1($M.0.dup,$p5);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $zext.i32.i64(0);
  $i7.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p2,$mul.ref($i7,8));
  $p8.dup := $or.i1($p2.dup,$or.i1($i7.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p8.dup := 0;
  $i9 := $load.i64($M.0,$p8);
  $i9.dup := $load.i1($M.0.dup,$p8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i10 := $xor.i64($i6,$i9);
  $i10.dup := $or.i1($i6.dup,$i9.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i11 := $and.i64($i3,$i10);
  $i11.dup := $or.i1($i3.dup,$i10.dup);
  call {:cexpr "dummy"} boogie_si_record_i64($i11);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i12 := $zext.i32.i64(0);
  $i12.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p1,$mul.ref($i12,8));
  $p13.dup := $or.i1($p1.dup,$or.i1($i12.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p13.dup := 0;
  $i14 := $load.i64($M.0,$p13);
  $i14.dup := $load.i1($M.0.dup,$p13);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i15 := $xor.i64($i14,$i11);
  $i15.dup := $or.i1($i14.dup,$i11.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i32.i64(0);
  $i16.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p1,$mul.ref($i16,8));
  $p17.dup := $or.i1($p1.dup,$or.i1($i16.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p17.dup := 0;
  $M.0 := $store.i64($M.0,$p17,$i15);
  $M.0.dup := $store.i1($M.0.dup,$p17,$i15.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i18 := $zext.i32.i64(0);
  $i18.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p2,$mul.ref($i18,8));
  $p19.dup := $or.i1($p2.dup,$or.i1($i18.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p19.dup := 0;
  $i20 := $load.i64($M.0,$p19);
  $i20.dup := $load.i1($M.0.dup,$p19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i21 := $xor.i64($i20,$i11);
  $i21.dup := $or.i1($i20.dup,$i11.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i22 := $zext.i32.i64(0);
  $i22.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p2,$mul.ref($i22,8));
  $p23.dup := $or.i1($p2.dup,$or.i1($i22.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p23.dup := 0;
  $M.0 := $store.i64($M.0,$p23,$i21);
  $M.0.dup := $store.i1($M.0.dup,$p23,$i21.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i32(0,1);
  $i24.dup := $or.i1(0,0);
  call {:cexpr "i"} boogie_si_record_i32($i24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i25 := $zext.i32.i64($i24);
  $i25.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p1,$mul.ref($i25,8));
  $p26.dup := $or.i1($p1.dup,$or.i1($i25.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p26.dup := 0;
  $i27 := $load.i64($M.0,$p26);
  $i27.dup := $load.i1($M.0.dup,$p26);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i28 := $zext.i32.i64($i24);
  $i28.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p29 := $add.ref($p2,$mul.ref($i28,8));
  $p29.dup := $or.i1($p2.dup,$or.i1($i28.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p29.dup := 0;
  $i30 := $load.i64($M.0,$p29);
  $i30.dup := $load.i1($M.0.dup,$p29);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i31 := $xor.i64($i27,$i30);
  $i31.dup := $or.i1($i27.dup,$i30.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i32 := $and.i64($i3,$i31);
  $i32.dup := $or.i1($i3.dup,$i31.dup);
  call {:cexpr "dummy"} boogie_si_record_i64($i32);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i33 := $zext.i32.i64($i24);
  $i33.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p1,$mul.ref($i33,8));
  $p34.dup := $or.i1($p1.dup,$or.i1($i33.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p34.dup := 0;
  $i35 := $load.i64($M.0,$p34);
  $i35.dup := $load.i1($M.0.dup,$p34);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i36 := $xor.i64($i35,$i32);
  $i36.dup := $or.i1($i35.dup,$i32.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i37 := $zext.i32.i64($i24);
  $i37.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p1,$mul.ref($i37,8));
  $p38.dup := $or.i1($p1.dup,$or.i1($i37.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p38.dup := 0;
  $M.0 := $store.i64($M.0,$p38,$i36);
  $M.0.dup := $store.i1($M.0.dup,$p38,$i36.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i39 := $zext.i32.i64($i24);
  $i39.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p40 := $add.ref($p2,$mul.ref($i39,8));
  $p40.dup := $or.i1($p2.dup,$or.i1($i39.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p40.dup := 0;
  $i41 := $load.i64($M.0,$p40);
  $i41.dup := $load.i1($M.0.dup,$p40);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i42 := $xor.i64($i41,$i32);
  $i42.dup := $or.i1($i41.dup,$i32.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i43 := $zext.i32.i64($i24);
  $i43.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p44 := $add.ref($p2,$mul.ref($i43,8));
  $p44.dup := $or.i1($p2.dup,$or.i1($i43.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p44.dup := 0;
  $M.0 := $store.i64($M.0,$p44,$i42);
  $M.0.dup := $store.i1($M.0.dup,$p44,$i42.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i45 := $add.i32($i24,1);
  $i45.dup := $or.i1($i24.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i45);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i46 := $zext.i32.i64($i45);
  $i46.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p47 := $add.ref($p1,$mul.ref($i46,8));
  $p47.dup := $or.i1($p1.dup,$or.i1($i46.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p47.dup := 0;
  $i48 := $load.i64($M.0,$p47);
  $i48.dup := $load.i1($M.0.dup,$p47);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i49 := $zext.i32.i64($i45);
  $i49.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p2,$mul.ref($i49,8));
  $p50.dup := $or.i1($p2.dup,$or.i1($i49.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p50.dup := 0;
  $i51 := $load.i64($M.0,$p50);
  $i51.dup := $load.i1($M.0.dup,$p50);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i52 := $xor.i64($i48,$i51);
  $i52.dup := $or.i1($i48.dup,$i51.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i53 := $and.i64($i3,$i52);
  $i53.dup := $or.i1($i3.dup,$i52.dup);
  call {:cexpr "dummy"} boogie_si_record_i64($i53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i54 := $zext.i32.i64($i45);
  $i54.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p55 := $add.ref($p1,$mul.ref($i54,8));
  $p55.dup := $or.i1($p1.dup,$or.i1($i54.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p55.dup := 0;
  $i56 := $load.i64($M.0,$p55);
  $i56.dup := $load.i1($M.0.dup,$p55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i57 := $xor.i64($i56,$i53);
  $i57.dup := $or.i1($i56.dup,$i53.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i58 := $zext.i32.i64($i45);
  $i58.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p59 := $add.ref($p1,$mul.ref($i58,8));
  $p59.dup := $or.i1($p1.dup,$or.i1($i58.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p59.dup := 0;
  $M.0 := $store.i64($M.0,$p59,$i57);
  $M.0.dup := $store.i1($M.0.dup,$p59,$i57.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i60 := $zext.i32.i64($i45);
  $i60.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p61 := $add.ref($p2,$mul.ref($i60,8));
  $p61.dup := $or.i1($p2.dup,$or.i1($i60.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p61.dup := 0;
  $i62 := $load.i64($M.0,$p61);
  $i62.dup := $load.i1($M.0.dup,$p61);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i63 := $xor.i64($i62,$i53);
  $i63.dup := $or.i1($i62.dup,$i53.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i64 := $zext.i32.i64($i45);
  $i64.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p65 := $add.ref($p2,$mul.ref($i64,8));
  $p65.dup := $or.i1($p2.dup,$or.i1($i64.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p65.dup := 0;
  $M.0 := $store.i64($M.0,$p65,$i63);
  $M.0.dup := $store.i1($M.0.dup,$p65,$i63.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i66 := $add.i32($i45,1);
  $i66.dup := $or.i1($i45.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i66);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i67 := $zext.i32.i64($i66);
  $i67.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p68 := $add.ref($p1,$mul.ref($i67,8));
  $p68.dup := $or.i1($p1.dup,$or.i1($i67.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p68.dup := 0;
  $i69 := $load.i64($M.0,$p68);
  $i69.dup := $load.i1($M.0.dup,$p68);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i70 := $zext.i32.i64($i66);
  $i70.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p71 := $add.ref($p2,$mul.ref($i70,8));
  $p71.dup := $or.i1($p2.dup,$or.i1($i70.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p71.dup := 0;
  $i72 := $load.i64($M.0,$p71);
  $i72.dup := $load.i1($M.0.dup,$p71);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i73 := $xor.i64($i69,$i72);
  $i73.dup := $or.i1($i69.dup,$i72.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i74 := $and.i64($i3,$i73);
  $i74.dup := $or.i1($i3.dup,$i73.dup);
  call {:cexpr "dummy"} boogie_si_record_i64($i74);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i75 := $zext.i32.i64($i66);
  $i75.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($p1,$mul.ref($i75,8));
  $p76.dup := $or.i1($p1.dup,$or.i1($i75.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p76.dup := 0;
  $i77 := $load.i64($M.0,$p76);
  $i77.dup := $load.i1($M.0.dup,$p76);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i78 := $xor.i64($i77,$i74);
  $i78.dup := $or.i1($i77.dup,$i74.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i79 := $zext.i32.i64($i66);
  $i79.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p80 := $add.ref($p1,$mul.ref($i79,8));
  $p80.dup := $or.i1($p1.dup,$or.i1($i79.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p80.dup := 0;
  $M.0 := $store.i64($M.0,$p80,$i78);
  $M.0.dup := $store.i1($M.0.dup,$p80,$i78.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i81 := $zext.i32.i64($i66);
  $i81.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p82 := $add.ref($p2,$mul.ref($i81,8));
  $p82.dup := $or.i1($p2.dup,$or.i1($i81.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p82.dup := 0;
  $i83 := $load.i64($M.0,$p82);
  $i83.dup := $load.i1($M.0.dup,$p82);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i84 := $xor.i64($i83,$i74);
  $i84.dup := $or.i1($i83.dup,$i74.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i85 := $zext.i32.i64($i66);
  $i85.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p86 := $add.ref($p2,$mul.ref($i85,8));
  $p86.dup := $or.i1($p2.dup,$or.i1($i85.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p86.dup := 0;
  $M.0 := $store.i64($M.0,$p86,$i84);
  $M.0.dup := $store.i1($M.0.dup,$p86,$i84.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i87 := $add.i32($i66,1);
  $i87.dup := $or.i1($i66.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i87);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i88 := $zext.i32.i64($i87);
  $i88.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p89 := $add.ref($p1,$mul.ref($i88,8));
  $p89.dup := $or.i1($p1.dup,$or.i1($i88.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p89.dup := 0;
  $i90 := $load.i64($M.0,$p89);
  $i90.dup := $load.i1($M.0.dup,$p89);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i91 := $zext.i32.i64($i87);
  $i91.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p92 := $add.ref($p2,$mul.ref($i91,8));
  $p92.dup := $or.i1($p2.dup,$or.i1($i91.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p92.dup := 0;
  $i93 := $load.i64($M.0,$p92);
  $i93.dup := $load.i1($M.0.dup,$p92);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i94 := $xor.i64($i90,$i93);
  $i94.dup := $or.i1($i90.dup,$i93.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i95 := $and.i64($i3,$i94);
  $i95.dup := $or.i1($i3.dup,$i94.dup);
  call {:cexpr "dummy"} boogie_si_record_i64($i95);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i96 := $zext.i32.i64($i87);
  $i96.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p97 := $add.ref($p1,$mul.ref($i96,8));
  $p97.dup := $or.i1($p1.dup,$or.i1($i96.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p97.dup := 0;
  $i98 := $load.i64($M.0,$p97);
  $i98.dup := $load.i1($M.0.dup,$p97);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i99 := $xor.i64($i98,$i95);
  $i99.dup := $or.i1($i98.dup,$i95.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i100 := $zext.i32.i64($i87);
  $i100.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($p1,$mul.ref($i100,8));
  $p101.dup := $or.i1($p1.dup,$or.i1($i100.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p101.dup := 0;
  $M.0 := $store.i64($M.0,$p101,$i99);
  $M.0.dup := $store.i1($M.0.dup,$p101,$i99.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i102 := $zext.i32.i64($i87);
  $i102.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p103 := $add.ref($p2,$mul.ref($i102,8));
  $p103.dup := $or.i1($p2.dup,$or.i1($i102.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p103.dup := 0;
  $i104 := $load.i64($M.0,$p103);
  $i104.dup := $load.i1($M.0.dup,$p103);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i105 := $xor.i64($i104,$i95);
  $i105.dup := $or.i1($i104.dup,$i95.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i106 := $zext.i32.i64($i87);
  $i106.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p107 := $add.ref($p2,$mul.ref($i106,8));
  $p107.dup := $or.i1($p2.dup,$or.i1($i106.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p107.dup := 0;
  $M.0 := $store.i64($M.0,$p107,$i105);
  $M.0.dup := $store.i1($M.0.dup,$p107,$i105.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i108 := $add.i32($i87,1);
  $i108.dup := $or.i1($i87.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i108);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i109 := $zext.i32.i64($i108);
  $i109.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p110 := $add.ref($p1,$mul.ref($i109,8));
  $p110.dup := $or.i1($p1.dup,$or.i1($i109.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p110.dup := 0;
  $i111 := $load.i64($M.0,$p110);
  $i111.dup := $load.i1($M.0.dup,$p110);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i112 := $zext.i32.i64($i108);
  $i112.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p113 := $add.ref($p2,$mul.ref($i112,8));
  $p113.dup := $or.i1($p2.dup,$or.i1($i112.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p113.dup := 0;
  $i114 := $load.i64($M.0,$p113);
  $i114.dup := $load.i1($M.0.dup,$p113);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i115 := $xor.i64($i111,$i114);
  $i115.dup := $or.i1($i111.dup,$i114.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i116 := $and.i64($i3,$i115);
  $i116.dup := $or.i1($i3.dup,$i115.dup);
  call {:cexpr "dummy"} boogie_si_record_i64($i116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i117 := $zext.i32.i64($i108);
  $i117.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p118 := $add.ref($p1,$mul.ref($i117,8));
  $p118.dup := $or.i1($p1.dup,$or.i1($i117.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p118.dup := 0;
  $i119 := $load.i64($M.0,$p118);
  $i119.dup := $load.i1($M.0.dup,$p118);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i120 := $xor.i64($i119,$i116);
  $i120.dup := $or.i1($i119.dup,$i116.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i121 := $zext.i32.i64($i108);
  $i121.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p122 := $add.ref($p1,$mul.ref($i121,8));
  $p122.dup := $or.i1($p1.dup,$or.i1($i121.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p122.dup := 0;
  $M.0 := $store.i64($M.0,$p122,$i120);
  $M.0.dup := $store.i1($M.0.dup,$p122,$i120.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i123 := $zext.i32.i64($i108);
  $i123.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p124 := $add.ref($p2,$mul.ref($i123,8));
  $p124.dup := $or.i1($p2.dup,$or.i1($i123.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p124.dup := 0;
  $i125 := $load.i64($M.0,$p124);
  $i125.dup := $load.i1($M.0.dup,$p124);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i126 := $xor.i64($i125,$i116);
  $i126.dup := $or.i1($i125.dup,$i116.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i127 := $zext.i32.i64($i108);
  $i127.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p128 := $add.ref($p2,$mul.ref($i127,8));
  $p128.dup := $or.i1($p2.dup,$or.i1($i127.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p128.dup := 0;
  $M.0 := $store.i64($M.0,$p128,$i126);
  $M.0.dup := $store.i1($M.0.dup,$p128,$i126.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i129 := $add.i32($i108,1);
  $i129.dup := $or.i1($i108.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i129);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i130 := $zext.i32.i64($i129);
  $i130.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p131 := $add.ref($p1,$mul.ref($i130,8));
  $p131.dup := $or.i1($p1.dup,$or.i1($i130.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p131.dup := 0;
  $i132 := $load.i64($M.0,$p131);
  $i132.dup := $load.i1($M.0.dup,$p131);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i133 := $zext.i32.i64($i129);
  $i133.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p134 := $add.ref($p2,$mul.ref($i133,8));
  $p134.dup := $or.i1($p2.dup,$or.i1($i133.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p134.dup := 0;
  $i135 := $load.i64($M.0,$p134);
  $i135.dup := $load.i1($M.0.dup,$p134);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i136 := $xor.i64($i132,$i135);
  $i136.dup := $or.i1($i132.dup,$i135.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i137 := $and.i64($i3,$i136);
  $i137.dup := $or.i1($i3.dup,$i136.dup);
  call {:cexpr "dummy"} boogie_si_record_i64($i137);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i138 := $zext.i32.i64($i129);
  $i138.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p139 := $add.ref($p1,$mul.ref($i138,8));
  $p139.dup := $or.i1($p1.dup,$or.i1($i138.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p139.dup := 0;
  $i140 := $load.i64($M.0,$p139);
  $i140.dup := $load.i1($M.0.dup,$p139);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i141 := $xor.i64($i140,$i137);
  $i141.dup := $or.i1($i140.dup,$i137.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i142 := $zext.i32.i64($i129);
  $i142.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p143 := $add.ref($p1,$mul.ref($i142,8));
  $p143.dup := $or.i1($p1.dup,$or.i1($i142.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p143.dup := 0;
  $M.0 := $store.i64($M.0,$p143,$i141);
  $M.0.dup := $store.i1($M.0.dup,$p143,$i141.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i144 := $zext.i32.i64($i129);
  $i144.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p145 := $add.ref($p2,$mul.ref($i144,8));
  $p145.dup := $or.i1($p2.dup,$or.i1($i144.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p145.dup := 0;
  $i146 := $load.i64($M.0,$p145);
  $i146.dup := $load.i1($M.0.dup,$p145);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i147 := $xor.i64($i146,$i137);
  $i147.dup := $or.i1($i146.dup,$i137.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i148 := $zext.i32.i64($i129);
  $i148.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p149 := $add.ref($p2,$mul.ref($i148,8));
  $p149.dup := $or.i1($p2.dup,$or.i1($i148.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p149.dup := 0;
  $M.0 := $store.i64($M.0,$p149,$i147);
  $M.0.dup := $store.i1($M.0.dup,$p149,$i147.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i150 := $add.i32($i129,1);
  $i150.dup := $or.i1($i129.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i150);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i151 := $zext.i32.i64($i150);
  $i151.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p152 := $add.ref($p1,$mul.ref($i151,8));
  $p152.dup := $or.i1($p1.dup,$or.i1($i151.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p152.dup := 0;
  $i153 := $load.i64($M.0,$p152);
  $i153.dup := $load.i1($M.0.dup,$p152);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i154 := $zext.i32.i64($i150);
  $i154.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p155 := $add.ref($p2,$mul.ref($i154,8));
  $p155.dup := $or.i1($p2.dup,$or.i1($i154.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p155.dup := 0;
  $i156 := $load.i64($M.0,$p155);
  $i156.dup := $load.i1($M.0.dup,$p155);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i157 := $xor.i64($i153,$i156);
  $i157.dup := $or.i1($i153.dup,$i156.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i158 := $and.i64($i3,$i157);
  $i158.dup := $or.i1($i3.dup,$i157.dup);
  call {:cexpr "dummy"} boogie_si_record_i64($i158);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i159 := $zext.i32.i64($i150);
  $i159.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p160 := $add.ref($p1,$mul.ref($i159,8));
  $p160.dup := $or.i1($p1.dup,$or.i1($i159.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p160.dup := 0;
  $i161 := $load.i64($M.0,$p160);
  $i161.dup := $load.i1($M.0.dup,$p160);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i162 := $xor.i64($i161,$i158);
  $i162.dup := $or.i1($i161.dup,$i158.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i163 := $zext.i32.i64($i150);
  $i163.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p164 := $add.ref($p1,$mul.ref($i163,8));
  $p164.dup := $or.i1($p1.dup,$or.i1($i163.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p164.dup := 0;
  $M.0 := $store.i64($M.0,$p164,$i162);
  $M.0.dup := $store.i1($M.0.dup,$p164,$i162.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i165 := $zext.i32.i64($i150);
  $i165.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p166 := $add.ref($p2,$mul.ref($i165,8));
  $p166.dup := $or.i1($p2.dup,$or.i1($i165.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p166.dup := 0;
  $i167 := $load.i64($M.0,$p166);
  $i167.dup := $load.i1($M.0.dup,$p166);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i168 := $xor.i64($i167,$i158);
  $i168.dup := $or.i1($i167.dup,$i158.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i169 := $zext.i32.i64($i150);
  $i169.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p170 := $add.ref($p2,$mul.ref($i169,8));
  $p170.dup := $or.i1($p2.dup,$or.i1($i169.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p170.dup := 0;
  $M.0 := $store.i64($M.0,$p170,$i168);
  $M.0.dup := $store.i1($M.0.dup,$p170,$i168.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i171 := $add.i32($i150,1);
  $i171.dup := $or.i1($i150.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i171);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i172 := $zext.i32.i64($i171);
  $i172.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p173 := $add.ref($p1,$mul.ref($i172,8));
  $p173.dup := $or.i1($p1.dup,$or.i1($i172.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p173.dup := 0;
  $i174 := $load.i64($M.0,$p173);
  $i174.dup := $load.i1($M.0.dup,$p173);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i175 := $zext.i32.i64($i171);
  $i175.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p176 := $add.ref($p2,$mul.ref($i175,8));
  $p176.dup := $or.i1($p2.dup,$or.i1($i175.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p176.dup := 0;
  $i177 := $load.i64($M.0,$p176);
  $i177.dup := $load.i1($M.0.dup,$p176);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i178 := $xor.i64($i174,$i177);
  $i178.dup := $or.i1($i174.dup,$i177.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i179 := $and.i64($i3,$i178);
  $i179.dup := $or.i1($i3.dup,$i178.dup);
  call {:cexpr "dummy"} boogie_si_record_i64($i179);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i180 := $zext.i32.i64($i171);
  $i180.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p181 := $add.ref($p1,$mul.ref($i180,8));
  $p181.dup := $or.i1($p1.dup,$or.i1($i180.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p181.dup := 0;
  $i182 := $load.i64($M.0,$p181);
  $i182.dup := $load.i1($M.0.dup,$p181);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i183 := $xor.i64($i182,$i179);
  $i183.dup := $or.i1($i182.dup,$i179.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i184 := $zext.i32.i64($i171);
  $i184.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p185 := $add.ref($p1,$mul.ref($i184,8));
  $p185.dup := $or.i1($p1.dup,$or.i1($i184.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p185.dup := 0;
  $M.0 := $store.i64($M.0,$p185,$i183);
  $M.0.dup := $store.i1($M.0.dup,$p185,$i183.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i186 := $zext.i32.i64($i171);
  $i186.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p187 := $add.ref($p2,$mul.ref($i186,8));
  $p187.dup := $or.i1($p2.dup,$or.i1($i186.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p187.dup := 0;
  $i188 := $load.i64($M.0,$p187);
  $i188.dup := $load.i1($M.0.dup,$p187);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i189 := $xor.i64($i188,$i179);
  $i189.dup := $or.i1($i188.dup,$i179.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i190 := $zext.i32.i64($i171);
  $i190.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p191 := $add.ref($p2,$mul.ref($i190,8));
  $p191.dup := $or.i1($p2.dup,$or.i1($i190.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p191.dup := 0;
  $M.0 := $store.i64($M.0,$p191,$i189);
  $M.0.dup := $store.i1($M.0.dup,$p191,$i189.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i192 := $add.i32($i171,1);
  $i192.dup := $or.i1($i171.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i192);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i193 := $zext.i32.i64($i192);
  $i193.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p194 := $add.ref($p1,$mul.ref($i193,8));
  $p194.dup := $or.i1($p1.dup,$or.i1($i193.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p194.dup := 0;
  $i195 := $load.i64($M.0,$p194);
  $i195.dup := $load.i1($M.0.dup,$p194);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i196 := $zext.i32.i64($i192);
  $i196.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p197 := $add.ref($p2,$mul.ref($i196,8));
  $p197.dup := $or.i1($p2.dup,$or.i1($i196.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p197.dup := 0;
  $i198 := $load.i64($M.0,$p197);
  $i198.dup := $load.i1($M.0.dup,$p197);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i199 := $xor.i64($i195,$i198);
  $i199.dup := $or.i1($i195.dup,$i198.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i200 := $and.i64($i3,$i199);
  $i200.dup := $or.i1($i3.dup,$i199.dup);
  call {:cexpr "dummy"} boogie_si_record_i64($i200);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i201 := $zext.i32.i64($i192);
  $i201.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p202 := $add.ref($p1,$mul.ref($i201,8));
  $p202.dup := $or.i1($p1.dup,$or.i1($i201.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p202.dup := 0;
  $i203 := $load.i64($M.0,$p202);
  $i203.dup := $load.i1($M.0.dup,$p202);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i204 := $xor.i64($i203,$i200);
  $i204.dup := $or.i1($i203.dup,$i200.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i205 := $zext.i32.i64($i192);
  $i205.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p206 := $add.ref($p1,$mul.ref($i205,8));
  $p206.dup := $or.i1($p1.dup,$or.i1($i205.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p206.dup := 0;
  $M.0 := $store.i64($M.0,$p206,$i204);
  $M.0.dup := $store.i1($M.0.dup,$p206,$i204.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i207 := $zext.i32.i64($i192);
  $i207.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p208 := $add.ref($p2,$mul.ref($i207,8));
  $p208.dup := $or.i1($p2.dup,$or.i1($i207.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p208.dup := 0;
  $i209 := $load.i64($M.0,$p208);
  $i209.dup := $load.i1($M.0.dup,$p208);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i210 := $xor.i64($i209,$i200);
  $i210.dup := $or.i1($i209.dup,$i200.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $i211 := $zext.i32.i64($i192);
  $i211.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  assume {:PointTainted} true;
  $p212 := $add.ref($p2,$mul.ref($i211,8));
  $p212.dup := $or.i1($p2.dup,$or.i1($i211.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  $p212.dup := 0;
  $M.0 := $store.i64($M.0,$p212,$i210);
  $M.0.dup := $store.i1($M.0.dup,$p212,$i210.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 665, 3} true;
  assume {:verifier.code 0} true;
  goto $bb2;
$bb2:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 672, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const point_add_and_double: ref;
axiom (point_add_and_double == $sub.ref(0,24768));
procedure {:inline 1} point_add_and_double($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1)
modifies $M.0, $exn;
modifies $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93;
modifies $M.229, $M.230, $M.231, $M.232, $M.233, $M.234, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.256, $M.257, $M.258, $M.259, $M.260, $M.261, $M.262, $M.263, $M.264, $M.265, $M.266, $M.267, $M.268, $M.269, $M.270, $M.271, $M.272, $M.273, $M.274, $M.275, $M.276, $M.277, $M.278, $M.279, $M.280, $M.281, $M.282, $M.283, $M.284, $M.285, $M.286, $M.287, $M.288, $M.289, $M.290, $M.291, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $M.298, $M.299, $M.300, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $M.308, $M.309, $M.310, $M.311, $M.312, $M.313, $M.314, $M.315, $M.316, $M.317, $M.318, $M.319, $M.320, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $M.333, $M.334, $M.335, $M.336, $M.337, $M.338, $M.339, $M.340, $M.341, $M.342, $M.343, $M.344, $M.345, $M.346, $M.347, $M.348, $M.349, $M.350, $M.351, $M.352, $M.353, $M.354, $M.355, $M.356, $M.357, $M.358, $M.359, $M.360, $M.361, $M.362, $M.363, $M.364, $M.365, $M.366, $M.367, $M.368, $M.369, $M.370, $M.371, $M.372, $M.373, $M.374, $M.375, $M.376, $M.377, $M.378, $M.379, $M.380, $M.381, $M.382, $M.383, $M.384, $M.385, $M.386, $M.387, $M.388, $M.389, $M.390, $M.391, $M.392, $M.393, $M.394, $M.395, $M.396, $M.397, $M.398;
modifies $M.399, $M.400, $M.401, $M.402, $M.403, $M.404, $M.405, $M.406, $M.407, $M.408, $M.409, $M.410, $M.411, $M.412, $M.413, $M.414, $M.415, $M.416, $M.417, $M.418, $M.419, $M.420, $M.421, $M.422, $M.423, $M.424, $M.425, $M.426, $M.427, $M.428, $M.429, $M.430, $M.431, $M.432, $M.433, $M.434, $M.435, $M.436, $M.437, $M.438, $M.439, $M.440, $M.441, $M.442, $M.443;
modifies $M.444, $M.445, $M.446, $M.447, $M.448, $M.449, $M.450, $M.451, $M.452, $M.453, $M.454, $M.455, $M.456, $M.457, $M.458, $M.459, $M.460, $M.461, $M.462, $M.463, $M.464, $M.465, $M.466, $M.467, $M.468, $M.469, $M.470, $M.471, $M.472, $M.473, $M.474, $M.475, $M.476, $M.477, $M.478, $M.479, $M.480, $M.481, $M.482, $M.483, $M.484, $M.485, $M.486, $M.487, $M.488, $M.489, $M.490, $M.491, $M.492, $M.493, $M.494, $M.495, $M.496, $M.497, $M.498, $M.499, $M.500, $M.501, $M.502, $M.503, $M.504, $M.505, $M.506, $M.507, $M.508, $M.509, $M.510, $M.511, $M.512, $M.513, $M.514, $M.515, $M.516, $M.517, $M.518, $M.519, $M.520, $M.521, $M.522, $M.523, $M.524, $M.525, $M.526, $M.527, $M.528, $M.529, $M.530, $M.531, $M.532, $M.533, $M.534, $M.535, $M.536, $M.537, $M.538, $M.539, $M.540, $M.541, $M.542, $M.543, $M.544, $M.545, $M.546, $M.547, $M.548, $M.549, $M.550, $M.551, $M.552, $M.553, $M.554, $M.555, $M.556, $M.557, $M.558, $M.559, $M.560, $M.561, $M.562, $M.563, $M.564, $M.565, $M.566, $M.567, $M.568, $M.569, $M.570, $M.571, $M.572, $M.573, $M.574, $M.575, $M.576, $M.577, $M.578, $M.579, $M.580, $M.581, $M.582, $M.583, $M.584, $M.585, $M.586, $M.587, $M.588, $M.589, $M.590, $M.591, $M.592, $M.593, $M.594, $M.595, $M.596, $M.597, $M.598, $M.599, $M.600, $M.601, $M.602, $M.603, $M.604, $M.605, $M.606, $M.607, $M.608, $M.609, $M.610, $M.611, $M.612, $M.613, $M.614, $M.615, $M.616, $M.617, $M.618, $M.619, $M.620, $M.621, $M.622, $M.623, $M.624, $M.625, $M.626, $M.627, $M.628, $M.629, $M.630, $M.631, $M.632, $M.633, $M.634, $M.635, $M.636, $M.637, $M.638, $M.639, $M.640, $M.641, $M.642, $M.643, $M.644, $M.645, $M.646, $M.647, $M.648, $M.649, $M.650, $M.651, $M.652, $M.653, $M.654, $M.655, $M.656, $M.657, $M.658, $M.659, $M.660, $M.661, $M.662, $M.663, $M.664, $M.665, $M.666, $M.667, $M.668, $M.669, $M.670, $M.671, $M.672, $M.673, $M.674, $M.675, $M.676, $M.677, $M.678, $M.679, $M.680, $M.681, $M.682, $M.683, $M.684, $M.685, $M.686, $M.687, $M.688, $M.689, $M.690, $M.691, $M.692, $M.693;
modifies $CurrAddr;
{
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $i6: i64;
  var $i6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $i8: i64;
  var $i8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $i10: i64;
  var $i10.dup: i1;
  var $p11: ref;
  var $p11.dup: i1;
  var $i12: i64;
  var $i12.dup: i1;
  var $p13: ref;
  var $p13.dup: i1;
  var $i14: i64;
  var $i14.dup: i1;
  var $p15: ref;
  var $p15.dup: i1;
  var $i16: i64;
  var $i16.dup: i1;
  var $p17: ref;
  var $p17.dup: i1;
  var $i18: i64;
  var $i18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $i20: i64;
  var $i20.dup: i1;
  var $p21: ref;
  var $p21.dup: i1;
  var $i22: i64;
  var $i22.dup: i1;
  var $p23: ref;
  var $p23.dup: i1;
  var $p24: ref;
  var $p24.dup: i1;
  var $i25: i64;
  var $i25.dup: i1;
  var $p26: ref;
  var $p26.dup: i1;
  var $i27: i64;
  var $i27.dup: i1;
  var $p28: ref;
  var $p28.dup: i1;
  var $i29: i64;
  var $i29.dup: i1;
  var $i30: i64;
  var $i30.dup: i1;
  var $p31: ref;
  var $p31.dup: i1;
  var $i32: i64;
  var $i32.dup: i1;
  var $p33: ref;
  var $p33.dup: i1;
  var $i34: i64;
  var $i34.dup: i1;
  var $i35: i64;
  var $i35.dup: i1;
  var $p36: ref;
  var $p36.dup: i1;
  var $i37: i64;
  var $i37.dup: i1;
  var $p38: ref;
  var $p38.dup: i1;
  var $i39: i64;
  var $i39.dup: i1;
  var $i40: i64;
  var $i40.dup: i1;
  var $p41: ref;
  var $p41.dup: i1;
  var $i42: i64;
  var $i42.dup: i1;
  var $p43: ref;
  var $p43.dup: i1;
  var $i44: i64;
  var $i44.dup: i1;
  var $i45: i64;
  var $i45.dup: i1;
  var $p46: ref;
  var $p46.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 36, 30} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 36, 30} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p1,$mul.ref(10,8));
  $p3.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 37, 29} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p1,$mul.ref(20,8));
  $p4.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 40, 21} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p1,$mul.ref(5,8));
  $p5.dup := $or.i1($p1.dup,$or.i1(0,0));
  $i6 := $add.i64(10,5);
  $i6.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 41, 24} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1,$mul.ref($i6,8));
  $p7.dup := $or.i1($p1.dup,$or.i1($i6.dup,0));
  $i8 := $add.i64(20,5);
  $i8.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 43, 22} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p1,$mul.ref($i8,8));
  $p9.dup := $or.i1($p1.dup,$or.i1($i8.dup,0));
  $i10 := $add.i64(20,10);
  $i10.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 45, 23} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1,$mul.ref($i10,8));
  $p11.dup := $or.i1($p1.dup,$or.i1($i10.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 46, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fadd($p4, $p4.dup, $p1, $p1.dup, $p5, $p5.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 47, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fsub($p9, $p9.dup, $p1, $p1.dup, $p5, $p5.dup);
  $i12 := $add.i64(10,5);
  $i12.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 49, 25} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p1,$mul.ref($i12,8));
  $p13.dup := $or.i1($p1.dup,$or.i1($i12.dup,0));
  $i14 := $add.i64($i10,5);
  $i14.dup := $or.i1($i10.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 51, 21} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p1,$mul.ref($i14,8));
  $p15.dup := $or.i1($p1.dup,$or.i1($i14.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 52, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fadd($p15, $p15.dup, $p3, $p3.dup, $p13, $p13.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 53, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fsub($p11, $p11.dup, $p3, $p3.dup, $p13, $p13.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 54, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul2($p11, $p11.dup, $p11, $p11.dup, $p4, $p4.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 55, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fadd($p3, $p3.dup, $p11, $p11.dup, $p15, $p15.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 56, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fsub($p13, $p13.dup, $p11, $p11.dup, $p15, $p15.dup);
  $i16 := $add.i64(20,5);
  $i16.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 58, 23} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p1,$mul.ref($i16,8));
  $p17.dup := $or.i1($p1.dup,$or.i1($i16.dup,0));
  $i18 := $add.i64(20,10);
  $i18.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 59, 22} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p1,$mul.ref($i18,8));
  $p19.dup := $or.i1($p1.dup,$or.i1($i18.dup,0));
  $i20 := $add.i64(20,15);
  $i20.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 60, 22} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p1,$mul.ref($i20,8));
  $p21.dup := $or.i1($p1.dup,$or.i1($i20.dup,0));
  $i22 := $add.i64(20,10);
  $i22.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 62, 24} true;
  assume {:verifier.code 0} true;
  $p23 := $add.ref($p1,$mul.ref($i22,8));
  $p23.dup := $or.i1($p1.dup,$or.i1($i22.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 63, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fsqr2($p23, $p23.dup, $p4, $p4.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 64, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fsqr2($p3, $p3.dup, $p3, $p3.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 65, 12} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p1,$mul.ref($i20,8));
  $p24.dup := $or.i1($p1.dup,$or.i1($i20.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 65, 12} true;
  assume {:verifier.code 0} true;
  $p24.dup := 0;
  $i25 := $load.i64($M.0,$p24);
  $i25.dup := $load.i1($M.0.dup,$p24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 65, 3} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p1,$mul.ref(20,8));
  $p26.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 65, 10} true;
  assume {:verifier.code 0} true;
  $p26.dup := 0;
  $M.0 := $store.i64($M.0,$p26,$i25);
  $M.0.dup := $store.i1($M.0.dup,$p26,$i25.dup);
  $i27 := $add.i64($i20,1);
  $i27.dup := $or.i1($i20.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 66, 12} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p1,$mul.ref($i27,8));
  $p28.dup := $or.i1($p1.dup,$or.i1($i27.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 66, 12} true;
  assume {:verifier.code 0} true;
  $p28.dup := 0;
  $i29 := $load.i64($M.0,$p28);
  $i29.dup := $load.i1($M.0.dup,$p28);
  $i30 := $add.i64(20,1);
  $i30.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 66, 3} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p1,$mul.ref($i30,8));
  $p31.dup := $or.i1($p1.dup,$or.i1($i30.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 66, 10} true;
  assume {:verifier.code 0} true;
  $p31.dup := 0;
  $M.0 := $store.i64($M.0,$p31,$i29);
  $M.0.dup := $store.i1($M.0.dup,$p31,$i29.dup);
  $i32 := $add.i64($i20,2);
  $i32.dup := $or.i1($i20.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 67, 12} true;
  assume {:verifier.code 0} true;
  $p33 := $add.ref($p1,$mul.ref($i32,8));
  $p33.dup := $or.i1($p1.dup,$or.i1($i32.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 67, 12} true;
  assume {:verifier.code 0} true;
  $p33.dup := 0;
  $i34 := $load.i64($M.0,$p33);
  $i34.dup := $load.i1($M.0.dup,$p33);
  $i35 := $add.i64(20,2);
  $i35.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 67, 3} true;
  assume {:verifier.code 0} true;
  $p36 := $add.ref($p1,$mul.ref($i35,8));
  $p36.dup := $or.i1($p1.dup,$or.i1($i35.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 67, 10} true;
  assume {:verifier.code 0} true;
  $p36.dup := 0;
  $M.0 := $store.i64($M.0,$p36,$i34);
  $M.0.dup := $store.i1($M.0.dup,$p36,$i34.dup);
  $i37 := $add.i64($i20,3);
  $i37.dup := $or.i1($i20.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 68, 12} true;
  assume {:verifier.code 0} true;
  $p38 := $add.ref($p1,$mul.ref($i37,8));
  $p38.dup := $or.i1($p1.dup,$or.i1($i37.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 68, 12} true;
  assume {:verifier.code 0} true;
  $p38.dup := 0;
  $i39 := $load.i64($M.0,$p38);
  $i39.dup := $load.i1($M.0.dup,$p38);
  $i40 := $add.i64(20,3);
  $i40.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 68, 3} true;
  assume {:verifier.code 0} true;
  $p41 := $add.ref($p1,$mul.ref($i40,8));
  $p41.dup := $or.i1($p1.dup,$or.i1($i40.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 68, 10} true;
  assume {:verifier.code 0} true;
  $p41.dup := 0;
  $M.0 := $store.i64($M.0,$p41,$i39);
  $M.0.dup := $store.i1($M.0.dup,$p41,$i39.dup);
  $i42 := $add.i64($i20,4);
  $i42.dup := $or.i1($i20.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 69, 12} true;
  assume {:verifier.code 0} true;
  $p43 := $add.ref($p1,$mul.ref($i42,8));
  $p43.dup := $or.i1($p1.dup,$or.i1($i42.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 69, 12} true;
  assume {:verifier.code 0} true;
  $p43.dup := 0;
  $i44 := $load.i64($M.0,$p43);
  $i44.dup := $load.i1($M.0.dup,$p43);
  $i45 := $add.i64(20,4);
  $i45.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 69, 3} true;
  assume {:verifier.code 0} true;
  $p46 := $add.ref($p1,$mul.ref($i45,8));
  $p46.dup := $or.i1($p1.dup,$or.i1($i45.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 69, 10} true;
  assume {:verifier.code 0} true;
  $p46.dup := 0;
  $M.0 := $store.i64($M.0,$p46,$i44);
  $M.0.dup := $store.i1($M.0.dup,$p46,$i44.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 70, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fsub($p21, $p21.dup, $p19, $p19.dup, $p21, $p21.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 71, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul1($p17, $p17.dup, $p21, $p21.dup, 121665, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 72, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fadd($p17, $p17.dup, $p17, $p17.dup, $p19, $p19.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 73, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul2($p1, $p1.dup, $p23, $p23.dup, $p4, $p4.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 74, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul($p7, $p7.dup, $p7, $p7.dup, $p0, $p0.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 75, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const point_double: ref;
axiom (point_double == $sub.ref(0,25800));
procedure {:inline 1} point_double($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1)
modifies $M.0, $exn;
modifies $M.229, $M.230, $M.231, $M.232, $M.233, $M.234, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.256, $M.257, $M.258, $M.259, $M.260, $M.261, $M.262, $M.263, $M.264, $M.265, $M.266, $M.267, $M.268, $M.269, $M.270, $M.271, $M.272, $M.273, $M.274, $M.275, $M.276, $M.277, $M.278, $M.279, $M.280, $M.281, $M.282, $M.283, $M.284, $M.285, $M.286, $M.287, $M.288, $M.289, $M.290, $M.291, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $M.298, $M.299, $M.300, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $M.308, $M.309, $M.310, $M.311, $M.312, $M.313, $M.314, $M.315, $M.316, $M.317, $M.318, $M.319, $M.320, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $M.333, $M.334, $M.335, $M.336, $M.337, $M.338, $M.339, $M.340, $M.341, $M.342, $M.343, $M.344, $M.345, $M.346, $M.347, $M.348, $M.349, $M.350, $M.351, $M.352, $M.353, $M.354, $M.355, $M.356, $M.357, $M.358, $M.359, $M.360, $M.361, $M.362, $M.363, $M.364, $M.365, $M.366, $M.367, $M.368, $M.369, $M.370, $M.371, $M.372, $M.373, $M.374, $M.375, $M.376, $M.377, $M.378, $M.379, $M.380, $M.381, $M.382, $M.383, $M.384, $M.385, $M.386, $M.387, $M.388, $M.389, $M.390, $M.391, $M.392, $M.393, $M.394, $M.395, $M.396, $M.397, $M.398, $M.86, $M.87, $M.88, $M.89, $M.90, $M.91, $M.92, $M.93;
modifies $M.399, $M.400, $M.401, $M.402, $M.403, $M.404, $M.405, $M.406, $M.407, $M.408, $M.409, $M.410, $M.411, $M.412, $M.413, $M.414, $M.415, $M.416, $M.417, $M.418, $M.419, $M.420, $M.421, $M.422, $M.423, $M.424, $M.425, $M.426, $M.427, $M.428, $M.429, $M.430, $M.431, $M.432, $M.433, $M.434, $M.435, $M.436, $M.437, $M.438, $M.439, $M.440, $M.441, $M.442, $M.443;
modifies $M.444, $M.445, $M.446, $M.447, $M.448, $M.449, $M.450, $M.451, $M.452, $M.453, $M.454, $M.455, $M.456, $M.457, $M.458, $M.459, $M.460, $M.461, $M.462, $M.463, $M.464, $M.465, $M.466, $M.467, $M.468, $M.469, $M.470, $M.471, $M.472, $M.473, $M.474, $M.475, $M.476, $M.477, $M.478, $M.479, $M.480, $M.481, $M.482, $M.483, $M.484, $M.485, $M.486, $M.487, $M.488, $M.489, $M.490, $M.491, $M.492, $M.493, $M.494, $M.495, $M.496, $M.497, $M.498, $M.499, $M.500, $M.501, $M.502, $M.503, $M.504, $M.505, $M.506, $M.507, $M.508, $M.509, $M.510, $M.511, $M.512, $M.513, $M.514, $M.515, $M.516, $M.517, $M.518, $M.519, $M.520, $M.521, $M.522, $M.523, $M.524, $M.525, $M.526, $M.527, $M.528, $M.529, $M.530, $M.531, $M.532, $M.533, $M.534, $M.535, $M.536, $M.537, $M.538, $M.539, $M.540, $M.541, $M.542, $M.543, $M.544, $M.545, $M.546, $M.547, $M.548, $M.549, $M.550, $M.551, $M.552, $M.553, $M.554, $M.555, $M.556, $M.557, $M.558, $M.559, $M.560, $M.561, $M.562, $M.563, $M.564, $M.565, $M.566, $M.567, $M.568, $M.569, $M.570, $M.571, $M.572, $M.573, $M.574, $M.575, $M.576, $M.577, $M.578, $M.579, $M.580, $M.581, $M.582, $M.583, $M.584, $M.585, $M.586, $M.587, $M.588, $M.589, $M.590, $M.591, $M.592, $M.593, $M.594, $M.595, $M.596, $M.597, $M.598, $M.599, $M.600, $M.601, $M.602, $M.603, $M.604, $M.605, $M.606, $M.607, $M.608, $M.609, $M.610, $M.611, $M.612, $M.613, $M.614, $M.615, $M.616, $M.617, $M.618, $M.619, $M.620, $M.621, $M.622, $M.623, $M.624, $M.625, $M.626, $M.627, $M.628, $M.629, $M.630, $M.631, $M.632, $M.633, $M.634, $M.635, $M.636, $M.637, $M.638, $M.639, $M.640, $M.641, $M.642, $M.643, $M.644, $M.645, $M.646, $M.647, $M.648, $M.649, $M.650, $M.651, $M.652, $M.653, $M.654, $M.655, $M.656, $M.657, $M.658, $M.659, $M.660, $M.661, $M.662, $M.663, $M.664, $M.665, $M.666, $M.667, $M.668, $M.669, $M.670, $M.671, $M.672, $M.673, $M.674, $M.675, $M.676, $M.677, $M.678, $M.679, $M.680, $M.681, $M.682, $M.683, $M.684, $M.685, $M.686, $M.687, $M.688, $M.689, $M.690, $M.691, $M.692, $M.693;
modifies $CurrAddr;
{
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $p8: ref;
  var $p8.dup: i1;
  var $i9: i64;
  var $i9.dup: i1;
  var $p10: ref;
  var $p10.dup: i1;
  var $i11: i64;
  var $i11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
  var $i13: i64;
  var $i13.dup: i1;
  var $p14: ref;
  var $p14.dup: i1;
  var $i15: i64;
  var $i15.dup: i1;
  var $p16: ref;
  var $p16.dup: i1;
  var $i17: i64;
  var $i17.dup: i1;
  var $p18: ref;
  var $p18.dup: i1;
  var $i19: i64;
  var $i19.dup: i1;
  var $p20: ref;
  var $p20.dup: i1;
  var $i21: i64;
  var $i21.dup: i1;
  var $p22: ref;
  var $p22.dup: i1;
  var $i23: i64;
  var $i23.dup: i1;
  var $p24: ref;
  var $p24.dup: i1;
  var $i25: i64;
  var $i25.dup: i1;
  var $p26: ref;
  var $p26.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 80, 21} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 80, 21} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p0,$mul.ref(5,8));
  $p3.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 82, 22} true;
  assume {:verifier.code 0} true;
  $p4 := $add.ref($p1,$mul.ref(5,8));
  $p4.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 83, 22} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p1,$mul.ref(10,8));
  $p5.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 84, 22} true;
  assume {:verifier.code 0} true;
  $p6 := $add.ref($p1,$mul.ref(15,8));
  $p6.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 86, 23} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1,$mul.ref(10,8));
  $p7.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 87, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fadd($p1, $p1.dup, $p0, $p0.dup, $p3, $p3.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 88, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fsub($p4, $p4.dup, $p0, $p0.dup, $p3, $p3.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 89, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fsqr2($p7, $p7.dup, $p1, $p1.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 90, 11} true;
  assume {:verifier.code 0} true;
  $p8 := $add.ref($p1,$mul.ref(15,8));
  $p8.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 90, 11} true;
  assume {:verifier.code 0} true;
  $p8.dup := 0;
  $i9 := $load.i64($M.0,$p8);
  $i9.dup := $load.i1($M.0.dup,$p8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 90, 3} true;
  assume {:verifier.code 0} true;
  $p10 := $add.ref($p1,$mul.ref(0,8));
  $p10.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 90, 9} true;
  assume {:verifier.code 0} true;
  $p10.dup := 0;
  $M.0 := $store.i64($M.0,$p10,$i9);
  $M.0.dup := $store.i1($M.0.dup,$p10,$i9.dup);
  $i11 := $add.i64(15,1);
  $i11.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 91, 11} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($p1,$mul.ref($i11,8));
  $p12.dup := $or.i1($p1.dup,$or.i1($i11.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 91, 11} true;
  assume {:verifier.code 0} true;
  $p12.dup := 0;
  $i13 := $load.i64($M.0,$p12);
  $i13.dup := $load.i1($M.0.dup,$p12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 91, 3} true;
  assume {:verifier.code 0} true;
  $p14 := $add.ref($p1,$mul.ref(1,8));
  $p14.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 91, 9} true;
  assume {:verifier.code 0} true;
  $p14.dup := 0;
  $M.0 := $store.i64($M.0,$p14,$i13);
  $M.0.dup := $store.i1($M.0.dup,$p14,$i13.dup);
  $i15 := $add.i64(15,2);
  $i15.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 92, 11} true;
  assume {:verifier.code 0} true;
  $p16 := $add.ref($p1,$mul.ref($i15,8));
  $p16.dup := $or.i1($p1.dup,$or.i1($i15.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 92, 11} true;
  assume {:verifier.code 0} true;
  $p16.dup := 0;
  $i17 := $load.i64($M.0,$p16);
  $i17.dup := $load.i1($M.0.dup,$p16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 92, 3} true;
  assume {:verifier.code 0} true;
  $p18 := $add.ref($p1,$mul.ref(2,8));
  $p18.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 92, 9} true;
  assume {:verifier.code 0} true;
  $p18.dup := 0;
  $M.0 := $store.i64($M.0,$p18,$i17);
  $M.0.dup := $store.i1($M.0.dup,$p18,$i17.dup);
  $i19 := $add.i64(15,3);
  $i19.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 93, 11} true;
  assume {:verifier.code 0} true;
  $p20 := $add.ref($p1,$mul.ref($i19,8));
  $p20.dup := $or.i1($p1.dup,$or.i1($i19.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 93, 11} true;
  assume {:verifier.code 0} true;
  $p20.dup := 0;
  $i21 := $load.i64($M.0,$p20);
  $i21.dup := $load.i1($M.0.dup,$p20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 93, 3} true;
  assume {:verifier.code 0} true;
  $p22 := $add.ref($p1,$mul.ref(3,8));
  $p22.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 93, 9} true;
  assume {:verifier.code 0} true;
  $p22.dup := 0;
  $M.0 := $store.i64($M.0,$p22,$i21);
  $M.0.dup := $store.i1($M.0.dup,$p22,$i21.dup);
  $i23 := $add.i64(15,4);
  $i23.dup := $or.i1(0,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 94, 11} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p1,$mul.ref($i23,8));
  $p24.dup := $or.i1($p1.dup,$or.i1($i23.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 94, 11} true;
  assume {:verifier.code 0} true;
  $p24.dup := 0;
  $i25 := $load.i64($M.0,$p24);
  $i25.dup := $load.i1($M.0.dup,$p24);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 94, 3} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p1,$mul.ref(4,8));
  $p26.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 94, 9} true;
  assume {:verifier.code 0} true;
  $p26.dup := 0;
  $M.0 := $store.i64($M.0,$p26,$i25);
  $M.0.dup := $store.i1($M.0.dup,$p26,$i25.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 95, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fsub($p6, $p6.dup, $p5, $p5.dup, $p6, $p6.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 96, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul1($p4, $p4.dup, $p6, $p6.dup, 121665, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 97, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fadd($p4, $p4.dup, $p4, $p4.dup, $p5, $p5.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 98, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Impl_Curve25519_Field51_fmul2($p0, $p0.dup, $p7, $p7.dup, $p1, $p1.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 99, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_fadd: ref;
axiom (Hacl_Impl_Curve25519_Field51_fadd == $sub.ref(0,26832));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fadd($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1)
modifies $M.0, $exn;
{
  var $p3: ref;
  var $p3.dup: i1;
  var $i4: i64;
  var $i4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $i6: i64;
  var $i6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $i8: i64;
  var $i8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $i10: i64;
  var $i10.dup: i1;
  var $p11: ref;
  var $p11.dup: i1;
  var $i12: i64;
  var $i12.dup: i1;
  var $p13: ref;
  var $p13.dup: i1;
  var $i14: i64;
  var $i14.dup: i1;
  var $p15: ref;
  var $p15.dup: i1;
  var $i16: i64;
  var $i16.dup: i1;
  var $p17: ref;
  var $p17.dup: i1;
  var $i18: i64;
  var $i18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $i20: i64;
  var $i20.dup: i1;
  var $p21: ref;
  var $p21.dup: i1;
  var $i22: i64;
  var $i22.dup: i1;
  var $i23: i64;
  var $i23.dup: i1;
  var $p24: ref;
  var $p24.dup: i1;
  var $i25: i64;
  var $i25.dup: i1;
  var $p26: ref;
  var $p26.dup: i1;
  var $i27: i64;
  var $i27.dup: i1;
  var $p28: ref;
  var $p28.dup: i1;
  var $i29: i64;
  var $i29.dup: i1;
  var $p30: ref;
  var $p30.dup: i1;
  var $i31: i64;
  var $i31.dup: i1;
  var $p32: ref;
  var $p32.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 43, 18} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 43, 18} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p1,$mul.ref(0,8));
  $p3.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 43, 18} true;
  assume {:verifier.code 0} true;
  $p3.dup := 0;
  $i4 := $load.i64($M.0,$p3);
  $i4.dup := $load.i1($M.0.dup,$p3);
  call {:cexpr "f10"} boogie_si_record_i64($i4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 44, 18} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p2,$mul.ref(0,8));
  $p5.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 44, 18} true;
  assume {:verifier.code 0} true;
  $p5.dup := 0;
  $i6 := $load.i64($M.0,$p5);
  $i6.dup := $load.i1($M.0.dup,$p5);
  call {:cexpr "f20"} boogie_si_record_i64($i6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 45, 18} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1,$mul.ref(1,8));
  $p7.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 45, 18} true;
  assume {:verifier.code 0} true;
  $p7.dup := 0;
  $i8 := $load.i64($M.0,$p7);
  $i8.dup := $load.i1($M.0.dup,$p7);
  call {:cexpr "f11"} boogie_si_record_i64($i8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 46, 18} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p2,$mul.ref(1,8));
  $p9.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 46, 18} true;
  assume {:verifier.code 0} true;
  $p9.dup := 0;
  $i10 := $load.i64($M.0,$p9);
  $i10.dup := $load.i1($M.0.dup,$p9);
  call {:cexpr "f21"} boogie_si_record_i64($i10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 47, 18} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1,$mul.ref(2,8));
  $p11.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 47, 18} true;
  assume {:verifier.code 0} true;
  $p11.dup := 0;
  $i12 := $load.i64($M.0,$p11);
  $i12.dup := $load.i1($M.0.dup,$p11);
  call {:cexpr "f12"} boogie_si_record_i64($i12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 48, 18} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p2,$mul.ref(2,8));
  $p13.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 48, 18} true;
  assume {:verifier.code 0} true;
  $p13.dup := 0;
  $i14 := $load.i64($M.0,$p13);
  $i14.dup := $load.i1($M.0.dup,$p13);
  call {:cexpr "f22"} boogie_si_record_i64($i14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 49, 18} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p1,$mul.ref(3,8));
  $p15.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 49, 18} true;
  assume {:verifier.code 0} true;
  $p15.dup := 0;
  $i16 := $load.i64($M.0,$p15);
  $i16.dup := $load.i1($M.0.dup,$p15);
  call {:cexpr "f13"} boogie_si_record_i64($i16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 50, 18} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p2,$mul.ref(3,8));
  $p17.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 50, 18} true;
  assume {:verifier.code 0} true;
  $p17.dup := 0;
  $i18 := $load.i64($M.0,$p17);
  $i18.dup := $load.i1($M.0.dup,$p17);
  call {:cexpr "f23"} boogie_si_record_i64($i18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 51, 18} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p1,$mul.ref(4,8));
  $p19.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 51, 18} true;
  assume {:verifier.code 0} true;
  $p19.dup := 0;
  $i20 := $load.i64($M.0,$p19);
  $i20.dup := $load.i1($M.0.dup,$p19);
  call {:cexpr "f14"} boogie_si_record_i64($i20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 52, 18} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p2,$mul.ref(4,8));
  $p21.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 52, 18} true;
  assume {:verifier.code 0} true;
  $p21.dup := 0;
  $i22 := $load.i64($M.0,$p21);
  $i22.dup := $load.i1($M.0.dup,$p21);
  call {:cexpr "f24"} boogie_si_record_i64($i22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 53, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $add.i64($i4,$i6);
  $i23.dup := $or.i1($i4.dup,$i6.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 53, 3} true;
  assume {:verifier.code 0} true;
  $p24 := $add.ref($p0,$mul.ref(0,8));
  $p24.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 53, 11} true;
  assume {:verifier.code 0} true;
  $p24.dup := 0;
  $M.0 := $store.i64($M.0,$p24,$i23);
  $M.0.dup := $store.i1($M.0.dup,$p24,$i23.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 54, 17} true;
  assume {:verifier.code 0} true;
  $i25 := $add.i64($i8,$i10);
  $i25.dup := $or.i1($i8.dup,$i10.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 54, 3} true;
  assume {:verifier.code 0} true;
  $p26 := $add.ref($p0,$mul.ref(1,8));
  $p26.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 54, 11} true;
  assume {:verifier.code 0} true;
  $p26.dup := 0;
  $M.0 := $store.i64($M.0,$p26,$i25);
  $M.0.dup := $store.i1($M.0.dup,$p26,$i25.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 55, 17} true;
  assume {:verifier.code 0} true;
  $i27 := $add.i64($i12,$i14);
  $i27.dup := $or.i1($i12.dup,$i14.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 55, 3} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p0,$mul.ref(2,8));
  $p28.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 55, 11} true;
  assume {:verifier.code 0} true;
  $p28.dup := 0;
  $M.0 := $store.i64($M.0,$p28,$i27);
  $M.0.dup := $store.i1($M.0.dup,$p28,$i27.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 56, 17} true;
  assume {:verifier.code 0} true;
  $i29 := $add.i64($i16,$i18);
  $i29.dup := $or.i1($i16.dup,$i18.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 56, 3} true;
  assume {:verifier.code 0} true;
  $p30 := $add.ref($p0,$mul.ref(3,8));
  $p30.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 56, 11} true;
  assume {:verifier.code 0} true;
  $p30.dup := 0;
  $M.0 := $store.i64($M.0,$p30,$i29);
  $M.0.dup := $store.i1($M.0.dup,$p30,$i29.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 57, 17} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i64($i20,$i22);
  $i31.dup := $or.i1($i20.dup,$i22.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 57, 3} true;
  assume {:verifier.code 0} true;
  $p32 := $add.ref($p0,$mul.ref(4,8));
  $p32.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 57, 11} true;
  assume {:verifier.code 0} true;
  $p32.dup := 0;
  $M.0 := $store.i64($M.0,$p32,$i31);
  $M.0.dup := $store.i1($M.0.dup,$p32,$i31.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 58, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_fsub: ref;
axiom (Hacl_Impl_Curve25519_Field51_fsub == $sub.ref(0,27864));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fsub($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1)
modifies $M.0, $exn;
{
  var $p3: ref;
  var $p3.dup: i1;
  var $i4: i64;
  var $i4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $i6: i64;
  var $i6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $i8: i64;
  var $i8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $i10: i64;
  var $i10.dup: i1;
  var $p11: ref;
  var $p11.dup: i1;
  var $i12: i64;
  var $i12.dup: i1;
  var $p13: ref;
  var $p13.dup: i1;
  var $i14: i64;
  var $i14.dup: i1;
  var $p15: ref;
  var $p15.dup: i1;
  var $i16: i64;
  var $i16.dup: i1;
  var $p17: ref;
  var $p17.dup: i1;
  var $i18: i64;
  var $i18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $i20: i64;
  var $i20.dup: i1;
  var $p21: ref;
  var $p21.dup: i1;
  var $i22: i64;
  var $i22.dup: i1;
  var $i23: i64;
  var $i23.dup: i1;
  var $i24: i64;
  var $i24.dup: i1;
  var $p25: ref;
  var $p25.dup: i1;
  var $i26: i64;
  var $i26.dup: i1;
  var $i27: i64;
  var $i27.dup: i1;
  var $p28: ref;
  var $p28.dup: i1;
  var $i29: i64;
  var $i29.dup: i1;
  var $i30: i64;
  var $i30.dup: i1;
  var $p31: ref;
  var $p31.dup: i1;
  var $i32: i64;
  var $i32.dup: i1;
  var $i33: i64;
  var $i33.dup: i1;
  var $p34: ref;
  var $p34.dup: i1;
  var $i35: i64;
  var $i35.dup: i1;
  var $i36: i64;
  var $i36.dup: i1;
  var $p37: ref;
  var $p37.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 62, 18} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 62, 18} true;
  assume {:verifier.code 0} true;
  $p3 := $add.ref($p1,$mul.ref(0,8));
  $p3.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 62, 18} true;
  assume {:verifier.code 0} true;
  $p3.dup := 0;
  $i4 := $load.i64($M.0,$p3);
  $i4.dup := $load.i1($M.0.dup,$p3);
  call {:cexpr "f10"} boogie_si_record_i64($i4);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 63, 18} true;
  assume {:verifier.code 0} true;
  $p5 := $add.ref($p2,$mul.ref(0,8));
  $p5.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 63, 18} true;
  assume {:verifier.code 0} true;
  $p5.dup := 0;
  $i6 := $load.i64($M.0,$p5);
  $i6.dup := $load.i1($M.0.dup,$p5);
  call {:cexpr "f20"} boogie_si_record_i64($i6);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 64, 18} true;
  assume {:verifier.code 0} true;
  $p7 := $add.ref($p1,$mul.ref(1,8));
  $p7.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 64, 18} true;
  assume {:verifier.code 0} true;
  $p7.dup := 0;
  $i8 := $load.i64($M.0,$p7);
  $i8.dup := $load.i1($M.0.dup,$p7);
  call {:cexpr "f11"} boogie_si_record_i64($i8);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 65, 18} true;
  assume {:verifier.code 0} true;
  $p9 := $add.ref($p2,$mul.ref(1,8));
  $p9.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 65, 18} true;
  assume {:verifier.code 0} true;
  $p9.dup := 0;
  $i10 := $load.i64($M.0,$p9);
  $i10.dup := $load.i1($M.0.dup,$p9);
  call {:cexpr "f21"} boogie_si_record_i64($i10);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 66, 18} true;
  assume {:verifier.code 0} true;
  $p11 := $add.ref($p1,$mul.ref(2,8));
  $p11.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 66, 18} true;
  assume {:verifier.code 0} true;
  $p11.dup := 0;
  $i12 := $load.i64($M.0,$p11);
  $i12.dup := $load.i1($M.0.dup,$p11);
  call {:cexpr "f12"} boogie_si_record_i64($i12);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 67, 18} true;
  assume {:verifier.code 0} true;
  $p13 := $add.ref($p2,$mul.ref(2,8));
  $p13.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 67, 18} true;
  assume {:verifier.code 0} true;
  $p13.dup := 0;
  $i14 := $load.i64($M.0,$p13);
  $i14.dup := $load.i1($M.0.dup,$p13);
  call {:cexpr "f22"} boogie_si_record_i64($i14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 68, 18} true;
  assume {:verifier.code 0} true;
  $p15 := $add.ref($p1,$mul.ref(3,8));
  $p15.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 68, 18} true;
  assume {:verifier.code 0} true;
  $p15.dup := 0;
  $i16 := $load.i64($M.0,$p15);
  $i16.dup := $load.i1($M.0.dup,$p15);
  call {:cexpr "f13"} boogie_si_record_i64($i16);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 69, 18} true;
  assume {:verifier.code 0} true;
  $p17 := $add.ref($p2,$mul.ref(3,8));
  $p17.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 69, 18} true;
  assume {:verifier.code 0} true;
  $p17.dup := 0;
  $i18 := $load.i64($M.0,$p17);
  $i18.dup := $load.i1($M.0.dup,$p17);
  call {:cexpr "f23"} boogie_si_record_i64($i18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 70, 18} true;
  assume {:verifier.code 0} true;
  $p19 := $add.ref($p1,$mul.ref(4,8));
  $p19.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 70, 18} true;
  assume {:verifier.code 0} true;
  $p19.dup := 0;
  $i20 := $load.i64($M.0,$p19);
  $i20.dup := $load.i1($M.0.dup,$p19);
  call {:cexpr "f14"} boogie_si_record_i64($i20);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 71, 18} true;
  assume {:verifier.code 0} true;
  $p21 := $add.ref($p2,$mul.ref(4,8));
  $p21.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 71, 18} true;
  assume {:verifier.code 0} true;
  $p21.dup := 0;
  $i22 := $load.i64($M.0,$p21);
  $i22.dup := $load.i1($M.0.dup,$p21);
  call {:cexpr "f24"} boogie_si_record_i64($i22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 72, 17} true;
  assume {:verifier.code 0} true;
  $i23 := $add.i64($i4,18014398509481832);
  $i23.dup := $or.i1($i4.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 72, 47} true;
  assume {:verifier.code 0} true;
  $i24 := $sub.i64($i23,$i6);
  $i24.dup := $or.i1($i23.dup,$i6.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 72, 3} true;
  assume {:verifier.code 0} true;
  $p25 := $add.ref($p0,$mul.ref(0,8));
  $p25.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 72, 11} true;
  assume {:verifier.code 0} true;
  $p25.dup := 0;
  $M.0 := $store.i64($M.0,$p25,$i24);
  $M.0.dup := $store.i1($M.0.dup,$p25,$i24.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 73, 17} true;
  assume {:verifier.code 0} true;
  $i26 := $add.i64($i8,18014398509481976);
  $i26.dup := $or.i1($i8.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 73, 47} true;
  assume {:verifier.code 0} true;
  $i27 := $sub.i64($i26,$i10);
  $i27.dup := $or.i1($i26.dup,$i10.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 73, 3} true;
  assume {:verifier.code 0} true;
  $p28 := $add.ref($p0,$mul.ref(1,8));
  $p28.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 73, 11} true;
  assume {:verifier.code 0} true;
  $p28.dup := 0;
  $M.0 := $store.i64($M.0,$p28,$i27);
  $M.0.dup := $store.i1($M.0.dup,$p28,$i27.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 74, 17} true;
  assume {:verifier.code 0} true;
  $i29 := $add.i64($i12,18014398509481976);
  $i29.dup := $or.i1($i12.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 74, 47} true;
  assume {:verifier.code 0} true;
  $i30 := $sub.i64($i29,$i14);
  $i30.dup := $or.i1($i29.dup,$i14.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 74, 3} true;
  assume {:verifier.code 0} true;
  $p31 := $add.ref($p0,$mul.ref(2,8));
  $p31.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 74, 11} true;
  assume {:verifier.code 0} true;
  $p31.dup := 0;
  $M.0 := $store.i64($M.0,$p31,$i30);
  $M.0.dup := $store.i1($M.0.dup,$p31,$i30.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 75, 17} true;
  assume {:verifier.code 0} true;
  $i32 := $add.i64($i16,18014398509481976);
  $i32.dup := $or.i1($i16.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 75, 47} true;
  assume {:verifier.code 0} true;
  $i33 := $sub.i64($i32,$i18);
  $i33.dup := $or.i1($i32.dup,$i18.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 75, 3} true;
  assume {:verifier.code 0} true;
  $p34 := $add.ref($p0,$mul.ref(3,8));
  $p34.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 75, 11} true;
  assume {:verifier.code 0} true;
  $p34.dup := 0;
  $M.0 := $store.i64($M.0,$p34,$i33);
  $M.0.dup := $store.i1($M.0.dup,$p34,$i33.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 76, 17} true;
  assume {:verifier.code 0} true;
  $i35 := $add.i64($i20,18014398509481976);
  $i35.dup := $or.i1($i20.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 76, 47} true;
  assume {:verifier.code 0} true;
  $i36 := $sub.i64($i35,$i22);
  $i36.dup := $or.i1($i35.dup,$i22.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 76, 3} true;
  assume {:verifier.code 0} true;
  $p37 := $add.ref($p0,$mul.ref(4,8));
  $p37.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 76, 11} true;
  assume {:verifier.code 0} true;
  $p37.dup := 0;
  $M.0 := $store.i64($M.0,$p37,$i36);
  $M.0.dup := $store.i1($M.0.dup,$p37,$i36.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 77, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_fsqr2: ref;
axiom (Hacl_Impl_Curve25519_Field51_fsqr2 == $sub.ref(0,28896));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fsqr2($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1)
modifies $M.229, $M.230, $M.231, $M.232, $M.233, $M.234, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.256, $M.257, $M.258, $M.259, $M.260, $M.261, $M.262, $M.263, $M.264, $M.265, $M.266, $M.267, $M.268, $M.269, $M.270, $M.271, $M.272, $M.273, $M.274, $M.275, $M.276, $M.277, $M.278, $M.279, $M.280, $M.281, $M.282, $M.283, $M.284, $M.285, $M.286, $M.287, $M.288, $M.289, $M.290, $M.291, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $M.298, $M.299, $M.300, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $M.308, $M.309, $M.310, $M.311, $M.312, $M.313, $M.314, $M.315, $M.316, $M.317, $M.318, $M.319, $M.320, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $M.333, $M.334, $M.335, $M.336, $M.337, $M.338, $M.339, $M.340, $M.341, $M.342, $M.343, $M.344, $M.345, $M.346, $M.347, $M.348, $M.349, $M.350, $M.351, $M.352, $M.353, $M.354, $M.355, $M.356, $M.357, $M.358, $M.359, $M.360, $M.361, $M.362, $M.363, $M.364, $M.365, $M.366, $M.367, $M.368, $M.369, $M.370, $M.371, $M.372, $M.373, $M.374, $M.375, $M.376, $M.377, $M.378, $M.379, $M.380, $M.381, $M.382, $M.383, $M.384, $M.385, $M.386, $M.387, $M.388, $M.389, $M.390, $M.391, $M.392, $M.393, $M.394, $M.395, $M.396, $M.397, $M.398, $M.0, $exn;
modifies $M.86;
modifies $M.87, $M.88, $M.89;
modifies $M.90;
modifies $M.91;
modifies $M.92, $M.93;
modifies $CurrAddr;
{
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $p8: ref;
  var $p8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $p10: ref;
  var $p10.dup: i1;
  var $p11: ref;
  var $p11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
  var $p13: ref;
  var $p13.dup: i1;
  var $p14: ref;
  var $p14.dup: i1;
  var $p15: ref;
  var $p15.dup: i1;
  var $p16: ref;
  var $p16.dup: i1;
  var $p17: ref;
  var $p17.dup: i1;
  var $p18: ref;
  var $p18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $p20: ref;
  var $p20.dup: i1;
  var $p21: ref;
  var $p21.dup: i1;
  var $p22: ref;
  var $p22.dup: i1;
  var $p23: ref;
  var $p23.dup: i1;
  var $p24: ref;
  var $p24.dup: i1;
  var $p25: ref;
  var $p25.dup: i1;
  var $p26: ref;
  var $p26.dup: i1;
  var $p27: ref;
  var $p27.dup: i1;
  var $p28: ref;
  var $p28.dup: i1;
  var $p29: ref;
  var $p29.dup: i1;
  var $p30: ref;
  var $p30.dup: i1;
  var $p31: ref;
  var $p31.dup: i1;
  var $p32: ref;
  var $p32.dup: i1;
  var $p33: ref;
  var $p33.dup: i1;
  var $p34: ref;
  var $p34.dup: i1;
  var $p35: ref;
  var $p35.dup: i1;
  var $p36: ref;
  var $p36.dup: i1;
  var $p37: ref;
  var $p37.dup: i1;
  var $p38: ref;
  var $p38.dup: i1;
  var $p39: ref;
  var $p39.dup: i1;
  var $p40: ref;
  var $p40.dup: i1;
  var $p41: ref;
  var $p41.dup: i1;
  var $p42: ref;
  var $p42.dup: i1;
  var $p43: ref;
  var $p43.dup: i1;
  var $p44: ref;
  var $p44.dup: i1;
  var $p45: ref;
  var $p45.dup: i1;
  var $p46: ref;
  var $p46.dup: i1;
  var $p47: ref;
  var $p47.dup: i1;
  var $p48: ref;
  var $p48.dup: i1;
  var $p49: ref;
  var $p49.dup: i1;
  var $p50: ref;
  var $p50.dup: i1;
  var $p51: ref;
  var $p51.dup: i1;
  var $p52: ref;
  var $p52.dup: i1;
  var $p53: ref;
  var $p53.dup: i1;
  var $p54: ref;
  var $p54.dup: i1;
  var $p55: ref;
  var $p55.dup: i1;
  var $p56: ref;
  var $p56.dup: i1;
  var $p57: ref;
  var $p57.dup: i1;
  var $p58: ref;
  var $p58.dup: i1;
  var $p59: ref;
  var $p59.dup: i1;
  var $p60: ref;
  var $p60.dup: i1;
  var $p61: ref;
  var $p61.dup: i1;
  var $p62: ref;
  var $p62.dup: i1;
  var $p63: ref;
  var $p63.dup: i1;
  var $p64: ref;
  var $p64.dup: i1;
  var $p65: ref;
  var $p65.dup: i1;
  var $p66: ref;
  var $p66.dup: i1;
  var $p67: ref;
  var $p67.dup: i1;
  var $p68: ref;
  var $p68.dup: i1;
  var $p69: ref;
  var $p69.dup: i1;
  var $p70: ref;
  var $p70.dup: i1;
  var $p71: ref;
  var $p71.dup: i1;
  var $p72: ref;
  var $p72.dup: i1;
  var $p73: ref;
  var $p73.dup: i1;
  var $p74: ref;
  var $p74.dup: i1;
  var $p75: ref;
  var $p75.dup: i1;
  var $p76: ref;
  var $p76.dup: i1;
  var $p77: ref;
  var $p77.dup: i1;
  var $p78: ref;
  var $p78.dup: i1;
  var $p79: ref;
  var $p79.dup: i1;
  var $p80: ref;
  var $p80.dup: i1;
  var $p81: ref;
  var $p81.dup: i1;
  var $p82: ref;
  var $p82.dup: i1;
  var $p83: ref;
  var $p83.dup: i1;
  var $p84: ref;
  var $p84.dup: i1;
  var $p85: ref;
  var $p85.dup: i1;
  var $p86: ref;
  var $p86.dup: i1;
  var $p87: ref;
  var $p87.dup: i1;
  var $p88: ref;
  var $p88.dup: i1;
  var $p89: ref;
  var $p89.dup: i1;
  var $p90: ref;
  var $p90.dup: i1;
  var $p91: ref;
  var $p91.dup: i1;
  var $p92: ref;
  var $p92.dup: i1;
  var $p93: ref;
  var $p93.dup: i1;
  var $p94: ref;
  var $p94.dup: i1;
  var $p95: ref;
  var $p95.dup: i1;
  var $p96: ref;
  var $p96.dup: i1;
  var $p97: ref;
  var $p97.dup: i1;
  var $p98: ref;
  var $p98.dup: i1;
  var $p99: ref;
  var $p99.dup: i1;
  var $p100: ref;
  var $p100.dup: i1;
  var $p101: ref;
  var $p101.dup: i1;
  var $p102: ref;
  var $p102.dup: i1;
  var $p103: ref;
  var $p103.dup: i1;
  var $p104: ref;
  var $p104.dup: i1;
  var $p105: ref;
  var $p105.dup: i1;
  var $p106: ref;
  var $p106.dup: i1;
  var $p107: ref;
  var $p107.dup: i1;
  var $p108: ref;
  var $p108.dup: i1;
  var $p109: ref;
  var $p109.dup: i1;
  var $p110: ref;
  var $p110.dup: i1;
  var $p111: ref;
  var $p111.dup: i1;
  var $p112: ref;
  var $p112.dup: i1;
  var $p113: ref;
  var $p113.dup: i1;
  var $p114: ref;
  var $p114.dup: i1;
  var $p115: ref;
  var $p115.dup: i1;
  var $p116: ref;
  var $p116.dup: i1;
  var $p117: ref;
  var $p117.dup: i1;
  var $p118: ref;
  var $p118.dup: i1;
  var $p119: ref;
  var $p119.dup: i1;
  var $p120: ref;
  var $p120.dup: i1;
  var $p121: ref;
  var $p121.dup: i1;
  var $p122: ref;
  var $p122.dup: i1;
  var $p123: ref;
  var $p123.dup: i1;
  var $p124: ref;
  var $p124.dup: i1;
  var $p125: ref;
  var $p125.dup: i1;
  var $p126: ref;
  var $p126.dup: i1;
  var $p127: ref;
  var $p127.dup: i1;
  var $p128: ref;
  var $p128.dup: i1;
  var $p129: ref;
  var $p129.dup: i1;
  var $p130: ref;
  var $p130.dup: i1;
  var $p131: ref;
  var $p131.dup: i1;
  var $p132: ref;
  var $p132.dup: i1;
  var $p133: ref;
  var $p133.dup: i1;
  var $p134: ref;
  var $p134.dup: i1;
  var $p135: ref;
  var $p135.dup: i1;
  var $p136: ref;
  var $p136.dup: i1;
  var $p137: ref;
  var $p137.dup: i1;
  var $p138: ref;
  var $p138.dup: i1;
  var $p139: ref;
  var $p139.dup: i1;
  var $p140: ref;
  var $p140.dup: i1;
  var $p141: ref;
  var $p141.dup: i1;
  var $p142: ref;
  var $p142.dup: i1;
  var $p143: ref;
  var $p143.dup: i1;
  var $p144: ref;
  var $p144.dup: i1;
  var $p145: ref;
  var $p145.dup: i1;
  var $p146: ref;
  var $p146.dup: i1;
  var $p147: ref;
  var $p147.dup: i1;
  var $p148: ref;
  var $p148.dup: i1;
  var $p149: ref;
  var $p149.dup: i1;
  var $p150: ref;
  var $p150.dup: i1;
  var $p151: ref;
  var $p151.dup: i1;
  var $p152: ref;
  var $p152.dup: i1;
  var $p153: ref;
  var $p153.dup: i1;
  var $p154: ref;
  var $p154.dup: i1;
  var $p155: ref;
  var $p155.dup: i1;
  var $p156: ref;
  var $p156.dup: i1;
  var $p157: ref;
  var $p157.dup: i1;
  var $p158: ref;
  var $p158.dup: i1;
  var $p159: ref;
  var $p159.dup: i1;
  var $p160: ref;
  var $p160.dup: i1;
  var $p161: ref;
  var $p161.dup: i1;
  var $p162: ref;
  var $p162.dup: i1;
  var $p163: ref;
  var $p163.dup: i1;
  var $p164: ref;
  var $p164.dup: i1;
  var $p165: ref;
  var $p165.dup: i1;
  var $p166: ref;
  var $p166.dup: i1;
  var $p167: ref;
  var $p167.dup: i1;
  var $p168: ref;
  var $p168.dup: i1;
  var $p169: ref;
  var $p169.dup: i1;
  var $p170: ref;
  var $p170.dup: i1;
  var $p171: ref;
  var $p171.dup: i1;
  var $p172: ref;
  var $p172.dup: i1;
  var $p173: ref;
  var $p173.dup: i1;
  var $i174: i64;
  var $i174.dup: i1;
  var $p175: ref;
  var $p175.dup: i1;
  var $i176: i64;
  var $i176.dup: i1;
  var $p177: ref;
  var $p177.dup: i1;
  var $i178: i64;
  var $i178.dup: i1;
  var $p179: ref;
  var $p179.dup: i1;
  var $i180: i64;
  var $i180.dup: i1;
  var $p181: ref;
  var $p181.dup: i1;
  var $i182: i64;
  var $i182.dup: i1;
  var $p183: ref;
  var $p183.dup: i1;
  var $i184: i64;
  var $i184.dup: i1;
  var $p185: ref;
  var $p185.dup: i1;
  var $i186: i64;
  var $i186.dup: i1;
  var $p187: ref;
  var $p187.dup: i1;
  var $i188: i64;
  var $i188.dup: i1;
  var $p189: ref;
  var $p189.dup: i1;
  var $i190: i64;
  var $i190.dup: i1;
  var $p191: ref;
  var $p191.dup: i1;
  var $i192: i64;
  var $i192.dup: i1;
  var $i193: i64;
  var $i193.dup: i1;
  var $i194: i64;
  var $i194.dup: i1;
  var $i195: i64;
  var $i195.dup: i1;
  var $i196: i64;
  var $i196.dup: i1;
  var $i197: i64;
  var $i197.dup: i1;
  var $i198: i64;
  var $i198.dup: i1;
  var $p199: ref;
  var $p199.dup: i1;
  var $p200: ref;
  var $p200.dup: i1;
  var $p201: ref;
  var $p201.dup: i1;
  var $i202: i64;
  var $i202.dup: i1;
  var $p203: ref;
  var $p203.dup: i1;
  var $i204: i64;
  var $i204.dup: i1;
  var $i205: i128;
  var $i205.dup: i1;
  var $p206: ref;
  var $p206.dup: i1;
  var $p207: ref;
  var $p207.dup: i1;
  var $p208: ref;
  var $p208.dup: i1;
  var $i209: i64;
  var $i209.dup: i1;
  var $p210: ref;
  var $p210.dup: i1;
  var $i211: i64;
  var $i211.dup: i1;
  var $i212: i128;
  var $i212.dup: i1;
  var $p213: ref;
  var $p213.dup: i1;
  var $p214: ref;
  var $p214.dup: i1;
  var $i215: i64;
  var $i215.dup: i1;
  var $p216: ref;
  var $p216.dup: i1;
  var $i217: i64;
  var $i217.dup: i1;
  var $p218: ref;
  var $p218.dup: i1;
  var $p219: ref;
  var $p219.dup: i1;
  var $i220: i64;
  var $i220.dup: i1;
  var $p221: ref;
  var $p221.dup: i1;
  var $i222: i64;
  var $i222.dup: i1;
  var $p223: ref;
  var $p223.dup: i1;
  var $p224: ref;
  var $p224.dup: i1;
  var $p225: ref;
  var $p225.dup: i1;
  var $i226: i64;
  var $i226.dup: i1;
  var $p227: ref;
  var $p227.dup: i1;
  var $i228: i64;
  var $i228.dup: i1;
  var $i229: i128;
  var $i229.dup: i1;
  var $p230: ref;
  var $p230.dup: i1;
  var $p231: ref;
  var $p231.dup: i1;
  var $p232: ref;
  var $p232.dup: i1;
  var $i233: i64;
  var $i233.dup: i1;
  var $p234: ref;
  var $p234.dup: i1;
  var $i235: i64;
  var $i235.dup: i1;
  var $i236: i128;
  var $i236.dup: i1;
  var $p237: ref;
  var $p237.dup: i1;
  var $p238: ref;
  var $p238.dup: i1;
  var $i239: i64;
  var $i239.dup: i1;
  var $p240: ref;
  var $p240.dup: i1;
  var $i241: i64;
  var $i241.dup: i1;
  var $p242: ref;
  var $p242.dup: i1;
  var $p243: ref;
  var $p243.dup: i1;
  var $i244: i64;
  var $i244.dup: i1;
  var $p245: ref;
  var $p245.dup: i1;
  var $i246: i64;
  var $i246.dup: i1;
  var $p247: ref;
  var $p247.dup: i1;
  var $p248: ref;
  var $p248.dup: i1;
  var $p249: ref;
  var $p249.dup: i1;
  var $i250: i64;
  var $i250.dup: i1;
  var $p251: ref;
  var $p251.dup: i1;
  var $i252: i64;
  var $i252.dup: i1;
  var $i253: i128;
  var $i253.dup: i1;
  var $p254: ref;
  var $p254.dup: i1;
  var $p255: ref;
  var $p255.dup: i1;
  var $p256: ref;
  var $p256.dup: i1;
  var $i257: i64;
  var $i257.dup: i1;
  var $p258: ref;
  var $p258.dup: i1;
  var $i259: i64;
  var $i259.dup: i1;
  var $i260: i128;
  var $i260.dup: i1;
  var $p261: ref;
  var $p261.dup: i1;
  var $p262: ref;
  var $p262.dup: i1;
  var $p263: ref;
  var $p263.dup: i1;
  var $i264: i64;
  var $i264.dup: i1;
  var $p265: ref;
  var $p265.dup: i1;
  var $i266: i64;
  var $i266.dup: i1;
  var $i267: i128;
  var $i267.dup: i1;
  var $p268: ref;
  var $p268.dup: i1;
  var $p269: ref;
  var $p269.dup: i1;
  var $i270: i64;
  var $i270.dup: i1;
  var $p271: ref;
  var $p271.dup: i1;
  var $i272: i64;
  var $i272.dup: i1;
  var $p273: ref;
  var $p273.dup: i1;
  var $p274: ref;
  var $p274.dup: i1;
  var $i275: i64;
  var $i275.dup: i1;
  var $p276: ref;
  var $p276.dup: i1;
  var $i277: i64;
  var $i277.dup: i1;
  var $p278: ref;
  var $p278.dup: i1;
  var $p279: ref;
  var $p279.dup: i1;
  var $p280: ref;
  var $p280.dup: i1;
  var $i281: i64;
  var $i281.dup: i1;
  var $p282: ref;
  var $p282.dup: i1;
  var $i283: i64;
  var $i283.dup: i1;
  var $i284: i128;
  var $i284.dup: i1;
  var $p285: ref;
  var $p285.dup: i1;
  var $p286: ref;
  var $p286.dup: i1;
  var $p287: ref;
  var $p287.dup: i1;
  var $i288: i64;
  var $i288.dup: i1;
  var $p289: ref;
  var $p289.dup: i1;
  var $i290: i64;
  var $i290.dup: i1;
  var $i291: i128;
  var $i291.dup: i1;
  var $p292: ref;
  var $p292.dup: i1;
  var $p293: ref;
  var $p293.dup: i1;
  var $i294: i64;
  var $i294.dup: i1;
  var $p295: ref;
  var $p295.dup: i1;
  var $i296: i64;
  var $i296.dup: i1;
  var $p297: ref;
  var $p297.dup: i1;
  var $p298: ref;
  var $p298.dup: i1;
  var $i299: i64;
  var $i299.dup: i1;
  var $p300: ref;
  var $p300.dup: i1;
  var $i301: i64;
  var $i301.dup: i1;
  var $p302: ref;
  var $p302.dup: i1;
  var $p303: ref;
  var $p303.dup: i1;
  var $p304: ref;
  var $p304.dup: i1;
  var $i305: i64;
  var $i305.dup: i1;
  var $p306: ref;
  var $p306.dup: i1;
  var $i307: i64;
  var $i307.dup: i1;
  var $i308: i128;
  var $i308.dup: i1;
  var $p309: ref;
  var $p309.dup: i1;
  var $p310: ref;
  var $p310.dup: i1;
  var $p311: ref;
  var $p311.dup: i1;
  var $i312: i64;
  var $i312.dup: i1;
  var $p313: ref;
  var $p313.dup: i1;
  var $i314: i64;
  var $i314.dup: i1;
  var $i315: i128;
  var $i315.dup: i1;
  var $p316: ref;
  var $p316.dup: i1;
  var $p317: ref;
  var $p317.dup: i1;
  var $p318: ref;
  var $p318.dup: i1;
  var $i319: i64;
  var $i319.dup: i1;
  var $p320: ref;
  var $p320.dup: i1;
  var $i321: i64;
  var $i321.dup: i1;
  var $i322: i128;
  var $i322.dup: i1;
  var $p323: ref;
  var $p323.dup: i1;
  var $p324: ref;
  var $p324.dup: i1;
  var $i325: i64;
  var $i325.dup: i1;
  var $p326: ref;
  var $p326.dup: i1;
  var $i327: i64;
  var $i327.dup: i1;
  var $p328: ref;
  var $p328.dup: i1;
  var $p329: ref;
  var $p329.dup: i1;
  var $i330: i64;
  var $i330.dup: i1;
  var $p331: ref;
  var $p331.dup: i1;
  var $i332: i64;
  var $i332.dup: i1;
  var $p333: ref;
  var $p333.dup: i1;
  var $p334: ref;
  var $p334.dup: i1;
  var $p335: ref;
  var $p335.dup: i1;
  var $i336: i64;
  var $i336.dup: i1;
  var $p337: ref;
  var $p337.dup: i1;
  var $i338: i64;
  var $i338.dup: i1;
  var $i339: i128;
  var $i339.dup: i1;
  var $p340: ref;
  var $p340.dup: i1;
  var $p341: ref;
  var $p341.dup: i1;
  var $p342: ref;
  var $p342.dup: i1;
  var $i343: i64;
  var $i343.dup: i1;
  var $p344: ref;
  var $p344.dup: i1;
  var $i345: i64;
  var $i345.dup: i1;
  var $i346: i128;
  var $i346.dup: i1;
  var $p347: ref;
  var $p347.dup: i1;
  var $p348: ref;
  var $p348.dup: i1;
  var $i349: i64;
  var $i349.dup: i1;
  var $p350: ref;
  var $p350.dup: i1;
  var $i351: i64;
  var $i351.dup: i1;
  var $p352: ref;
  var $p352.dup: i1;
  var $p353: ref;
  var $p353.dup: i1;
  var $i354: i64;
  var $i354.dup: i1;
  var $p355: ref;
  var $p355.dup: i1;
  var $i356: i64;
  var $i356.dup: i1;
  var $p357: ref;
  var $p357.dup: i1;
  var $p358: ref;
  var $p358.dup: i1;
  var $p359: ref;
  var $p359.dup: i1;
  var $i360: i64;
  var $i360.dup: i1;
  var $p361: ref;
  var $p361.dup: i1;
  var $i362: i64;
  var $i362.dup: i1;
  var $i363: i128;
  var $i363.dup: i1;
  var $p364: ref;
  var $p364.dup: i1;
  var $p365: ref;
  var $p365.dup: i1;
  var $p366: ref;
  var $p366.dup: i1;
  var $i367: i64;
  var $i367.dup: i1;
  var $p368: ref;
  var $p368.dup: i1;
  var $i369: i64;
  var $i369.dup: i1;
  var $i370: i128;
  var $i370.dup: i1;
  var $p371: ref;
  var $p371.dup: i1;
  var $p372: ref;
  var $p372.dup: i1;
  var $p373: ref;
  var $p373.dup: i1;
  var $i374: i64;
  var $i374.dup: i1;
  var $p375: ref;
  var $p375.dup: i1;
  var $i376: i64;
  var $i376.dup: i1;
  var $i377: i128;
  var $i377.dup: i1;
  var $p378: ref;
  var $p378.dup: i1;
  var $p379: ref;
  var $p379.dup: i1;
  var $i380: i64;
  var $i380.dup: i1;
  var $p381: ref;
  var $p381.dup: i1;
  var $i382: i64;
  var $i382.dup: i1;
  var $p383: ref;
  var $p383.dup: i1;
  var $p384: ref;
  var $p384.dup: i1;
  var $i385: i64;
  var $i385.dup: i1;
  var $p386: ref;
  var $p386.dup: i1;
  var $i387: i64;
  var $i387.dup: i1;
  var $p388: ref;
  var $p388.dup: i1;
  var $p389: ref;
  var $p389.dup: i1;
  var $p390: ref;
  var $p390.dup: i1;
  var $i391: i64;
  var $i391.dup: i1;
  var $p392: ref;
  var $p392.dup: i1;
  var $i393: i64;
  var $i393.dup: i1;
  var $i394: i128;
  var $i394.dup: i1;
  var $p395: ref;
  var $p395.dup: i1;
  var $p396: ref;
  var $p396.dup: i1;
  var $p397: ref;
  var $p397.dup: i1;
  var $i398: i64;
  var $i398.dup: i1;
  var $p399: ref;
  var $p399.dup: i1;
  var $i400: i64;
  var $i400.dup: i1;
  var $i401: i128;
  var $i401.dup: i1;
  var $p402: ref;
  var $p402.dup: i1;
  var $p403: ref;
  var $p403.dup: i1;
  var $i404: i64;
  var $i404.dup: i1;
  var $p405: ref;
  var $p405.dup: i1;
  var $i406: i64;
  var $i406.dup: i1;
  var $p407: ref;
  var $p407.dup: i1;
  var $p408: ref;
  var $p408.dup: i1;
  var $i409: i64;
  var $i409.dup: i1;
  var $p410: ref;
  var $p410.dup: i1;
  var $i411: i64;
  var $i411.dup: i1;
  var $p412: ref;
  var $p412.dup: i1;
  var $p413: ref;
  var $p413.dup: i1;
  var $p414: ref;
  var $p414.dup: i1;
  var $i415: i64;
  var $i415.dup: i1;
  var $p416: ref;
  var $p416.dup: i1;
  var $i417: i64;
  var $i417.dup: i1;
  var $i418: i128;
  var $i418.dup: i1;
  var $p419: ref;
  var $p419.dup: i1;
  var $p420: ref;
  var $p420.dup: i1;
  var $p421: ref;
  var $p421.dup: i1;
  var $i422: i64;
  var $i422.dup: i1;
  var $p423: ref;
  var $p423.dup: i1;
  var $i424: i64;
  var $i424.dup: i1;
  var $i425: i128;
  var $i425.dup: i1;
  var $p426: ref;
  var $p426.dup: i1;
  var $p427: ref;
  var $p427.dup: i1;
  var $p428: ref;
  var $p428.dup: i1;
  var $i429: i64;
  var $i429.dup: i1;
  var $p430: ref;
  var $p430.dup: i1;
  var $i431: i64;
  var $i431.dup: i1;
  var $i432: i128;
  var $i432.dup: i1;
  var $p433: ref;
  var $p433.dup: i1;
  var $p434: ref;
  var $p434.dup: i1;
  var $i435: i64;
  var $i435.dup: i1;
  var $p436: ref;
  var $p436.dup: i1;
  var $i437: i64;
  var $i437.dup: i1;
  var $p438: ref;
  var $p438.dup: i1;
  var $p439: ref;
  var $p439.dup: i1;
  var $i440: i64;
  var $i440.dup: i1;
  var $p441: ref;
  var $p441.dup: i1;
  var $i442: i64;
  var $i442.dup: i1;
  var $p443: ref;
  var $p443.dup: i1;
  var $p444: ref;
  var $p444.dup: i1;
  var $p445: ref;
  var $p445.dup: i1;
  var $i446: i64;
  var $i446.dup: i1;
  var $p447: ref;
  var $p447.dup: i1;
  var $i448: i64;
  var $i448.dup: i1;
  var $i449: i128;
  var $i449.dup: i1;
  var $p450: ref;
  var $p450.dup: i1;
  var $p451: ref;
  var $p451.dup: i1;
  var $p452: ref;
  var $p452.dup: i1;
  var $i453: i64;
  var $i453.dup: i1;
  var $p454: ref;
  var $p454.dup: i1;
  var $i455: i64;
  var $i455.dup: i1;
  var $i456: i128;
  var $i456.dup: i1;
  var $p457: ref;
  var $p457.dup: i1;
  var $p458: ref;
  var $p458.dup: i1;
  var $i459: i64;
  var $i459.dup: i1;
  var $p460: ref;
  var $p460.dup: i1;
  var $i461: i64;
  var $i461.dup: i1;
  var $p462: ref;
  var $p462.dup: i1;
  var $p463: ref;
  var $p463.dup: i1;
  var $i464: i64;
  var $i464.dup: i1;
  var $p465: ref;
  var $p465.dup: i1;
  var $i466: i64;
  var $i466.dup: i1;
  var $p467: ref;
  var $p467.dup: i1;
  var $p468: ref;
  var $p468.dup: i1;
  var $p469: ref;
  var $p469.dup: i1;
  var $i470: i64;
  var $i470.dup: i1;
  var $p471: ref;
  var $p471.dup: i1;
  var $i472: i64;
  var $i472.dup: i1;
  var $i473: i128;
  var $i473.dup: i1;
  var $i474: i64;
  var $i474.dup: i1;
  var $i475: i64;
  var $i475.dup: i1;
  var $i476: i64;
  var $i476.dup: i1;
  var $i477: i64;
  var $i477.dup: i1;
  var $i478: i64;
  var $i478.dup: i1;
  var $i479: i64;
  var $i479.dup: i1;
  var $p480: ref;
  var $p480.dup: i1;
  var $p481: ref;
  var $p481.dup: i1;
  var $p482: ref;
  var $p482.dup: i1;
  var $i483: i64;
  var $i483.dup: i1;
  var $p484: ref;
  var $p484.dup: i1;
  var $i485: i64;
  var $i485.dup: i1;
  var $i486: i128;
  var $i486.dup: i1;
  var $p487: ref;
  var $p487.dup: i1;
  var $p488: ref;
  var $p488.dup: i1;
  var $p489: ref;
  var $p489.dup: i1;
  var $i490: i64;
  var $i490.dup: i1;
  var $p491: ref;
  var $p491.dup: i1;
  var $i492: i64;
  var $i492.dup: i1;
  var $i493: i128;
  var $i493.dup: i1;
  var $p494: ref;
  var $p494.dup: i1;
  var $p495: ref;
  var $p495.dup: i1;
  var $i496: i64;
  var $i496.dup: i1;
  var $p497: ref;
  var $p497.dup: i1;
  var $i498: i64;
  var $i498.dup: i1;
  var $p499: ref;
  var $p499.dup: i1;
  var $p500: ref;
  var $p500.dup: i1;
  var $i501: i64;
  var $i501.dup: i1;
  var $p502: ref;
  var $p502.dup: i1;
  var $i503: i64;
  var $i503.dup: i1;
  var $p504: ref;
  var $p504.dup: i1;
  var $p505: ref;
  var $p505.dup: i1;
  var $p506: ref;
  var $p506.dup: i1;
  var $i507: i64;
  var $i507.dup: i1;
  var $p508: ref;
  var $p508.dup: i1;
  var $i509: i64;
  var $i509.dup: i1;
  var $i510: i128;
  var $i510.dup: i1;
  var $p511: ref;
  var $p511.dup: i1;
  var $p512: ref;
  var $p512.dup: i1;
  var $p513: ref;
  var $p513.dup: i1;
  var $i514: i64;
  var $i514.dup: i1;
  var $p515: ref;
  var $p515.dup: i1;
  var $i516: i64;
  var $i516.dup: i1;
  var $i517: i128;
  var $i517.dup: i1;
  var $p518: ref;
  var $p518.dup: i1;
  var $p519: ref;
  var $p519.dup: i1;
  var $i520: i64;
  var $i520.dup: i1;
  var $p521: ref;
  var $p521.dup: i1;
  var $i522: i64;
  var $i522.dup: i1;
  var $p523: ref;
  var $p523.dup: i1;
  var $p524: ref;
  var $p524.dup: i1;
  var $i525: i64;
  var $i525.dup: i1;
  var $p526: ref;
  var $p526.dup: i1;
  var $i527: i64;
  var $i527.dup: i1;
  var $p528: ref;
  var $p528.dup: i1;
  var $p529: ref;
  var $p529.dup: i1;
  var $p530: ref;
  var $p530.dup: i1;
  var $i531: i64;
  var $i531.dup: i1;
  var $p532: ref;
  var $p532.dup: i1;
  var $i533: i64;
  var $i533.dup: i1;
  var $i534: i128;
  var $i534.dup: i1;
  var $p535: ref;
  var $p535.dup: i1;
  var $p536: ref;
  var $p536.dup: i1;
  var $p537: ref;
  var $p537.dup: i1;
  var $i538: i64;
  var $i538.dup: i1;
  var $p539: ref;
  var $p539.dup: i1;
  var $i540: i64;
  var $i540.dup: i1;
  var $i541: i128;
  var $i541.dup: i1;
  var $p542: ref;
  var $p542.dup: i1;
  var $p543: ref;
  var $p543.dup: i1;
  var $p544: ref;
  var $p544.dup: i1;
  var $i545: i64;
  var $i545.dup: i1;
  var $p546: ref;
  var $p546.dup: i1;
  var $i547: i64;
  var $i547.dup: i1;
  var $i548: i128;
  var $i548.dup: i1;
  var $p549: ref;
  var $p549.dup: i1;
  var $p550: ref;
  var $p550.dup: i1;
  var $i551: i64;
  var $i551.dup: i1;
  var $p552: ref;
  var $p552.dup: i1;
  var $i553: i64;
  var $i553.dup: i1;
  var $p554: ref;
  var $p554.dup: i1;
  var $p555: ref;
  var $p555.dup: i1;
  var $i556: i64;
  var $i556.dup: i1;
  var $p557: ref;
  var $p557.dup: i1;
  var $i558: i64;
  var $i558.dup: i1;
  var $p559: ref;
  var $p559.dup: i1;
  var $p560: ref;
  var $p560.dup: i1;
  var $p561: ref;
  var $p561.dup: i1;
  var $i562: i64;
  var $i562.dup: i1;
  var $p563: ref;
  var $p563.dup: i1;
  var $i564: i64;
  var $i564.dup: i1;
  var $i565: i128;
  var $i565.dup: i1;
  var $p566: ref;
  var $p566.dup: i1;
  var $p567: ref;
  var $p567.dup: i1;
  var $p568: ref;
  var $p568.dup: i1;
  var $i569: i64;
  var $i569.dup: i1;
  var $p570: ref;
  var $p570.dup: i1;
  var $i571: i64;
  var $i571.dup: i1;
  var $i572: i128;
  var $i572.dup: i1;
  var $p573: ref;
  var $p573.dup: i1;
  var $p574: ref;
  var $p574.dup: i1;
  var $i575: i64;
  var $i575.dup: i1;
  var $p576: ref;
  var $p576.dup: i1;
  var $i577: i64;
  var $i577.dup: i1;
  var $p578: ref;
  var $p578.dup: i1;
  var $p579: ref;
  var $p579.dup: i1;
  var $i580: i64;
  var $i580.dup: i1;
  var $p581: ref;
  var $p581.dup: i1;
  var $i582: i64;
  var $i582.dup: i1;
  var $p583: ref;
  var $p583.dup: i1;
  var $p584: ref;
  var $p584.dup: i1;
  var $p585: ref;
  var $p585.dup: i1;
  var $i586: i64;
  var $i586.dup: i1;
  var $p587: ref;
  var $p587.dup: i1;
  var $i588: i64;
  var $i588.dup: i1;
  var $i589: i128;
  var $i589.dup: i1;
  var $p590: ref;
  var $p590.dup: i1;
  var $p591: ref;
  var $p591.dup: i1;
  var $p592: ref;
  var $p592.dup: i1;
  var $i593: i64;
  var $i593.dup: i1;
  var $p594: ref;
  var $p594.dup: i1;
  var $i595: i64;
  var $i595.dup: i1;
  var $i596: i128;
  var $i596.dup: i1;
  var $p597: ref;
  var $p597.dup: i1;
  var $p598: ref;
  var $p598.dup: i1;
  var $p599: ref;
  var $p599.dup: i1;
  var $i600: i64;
  var $i600.dup: i1;
  var $p601: ref;
  var $p601.dup: i1;
  var $i602: i64;
  var $i602.dup: i1;
  var $i603: i128;
  var $i603.dup: i1;
  var $p604: ref;
  var $p604.dup: i1;
  var $p605: ref;
  var $p605.dup: i1;
  var $i606: i64;
  var $i606.dup: i1;
  var $p607: ref;
  var $p607.dup: i1;
  var $i608: i64;
  var $i608.dup: i1;
  var $p609: ref;
  var $p609.dup: i1;
  var $p610: ref;
  var $p610.dup: i1;
  var $i611: i64;
  var $i611.dup: i1;
  var $p612: ref;
  var $p612.dup: i1;
  var $i613: i64;
  var $i613.dup: i1;
  var $p614: ref;
  var $p614.dup: i1;
  var $p615: ref;
  var $p615.dup: i1;
  var $p616: ref;
  var $p616.dup: i1;
  var $i617: i64;
  var $i617.dup: i1;
  var $p618: ref;
  var $p618.dup: i1;
  var $i619: i64;
  var $i619.dup: i1;
  var $i620: i128;
  var $i620.dup: i1;
  var $p621: ref;
  var $p621.dup: i1;
  var $p622: ref;
  var $p622.dup: i1;
  var $p623: ref;
  var $p623.dup: i1;
  var $i624: i64;
  var $i624.dup: i1;
  var $p625: ref;
  var $p625.dup: i1;
  var $i626: i64;
  var $i626.dup: i1;
  var $i627: i128;
  var $i627.dup: i1;
  var $p628: ref;
  var $p628.dup: i1;
  var $p629: ref;
  var $p629.dup: i1;
  var $i630: i64;
  var $i630.dup: i1;
  var $p631: ref;
  var $p631.dup: i1;
  var $i632: i64;
  var $i632.dup: i1;
  var $p633: ref;
  var $p633.dup: i1;
  var $p634: ref;
  var $p634.dup: i1;
  var $i635: i64;
  var $i635.dup: i1;
  var $p636: ref;
  var $p636.dup: i1;
  var $i637: i64;
  var $i637.dup: i1;
  var $p638: ref;
  var $p638.dup: i1;
  var $p639: ref;
  var $p639.dup: i1;
  var $p640: ref;
  var $p640.dup: i1;
  var $i641: i64;
  var $i641.dup: i1;
  var $p642: ref;
  var $p642.dup: i1;
  var $i643: i64;
  var $i643.dup: i1;
  var $i644: i128;
  var $i644.dup: i1;
  var $p645: ref;
  var $p645.dup: i1;
  var $p646: ref;
  var $p646.dup: i1;
  var $p647: ref;
  var $p647.dup: i1;
  var $i648: i64;
  var $i648.dup: i1;
  var $p649: ref;
  var $p649.dup: i1;
  var $i650: i64;
  var $i650.dup: i1;
  var $i651: i128;
  var $i651.dup: i1;
  var $p652: ref;
  var $p652.dup: i1;
  var $p653: ref;
  var $p653.dup: i1;
  var $p654: ref;
  var $p654.dup: i1;
  var $i655: i64;
  var $i655.dup: i1;
  var $p656: ref;
  var $p656.dup: i1;
  var $i657: i64;
  var $i657.dup: i1;
  var $i658: i128;
  var $i658.dup: i1;
  var $p659: ref;
  var $p659.dup: i1;
  var $p660: ref;
  var $p660.dup: i1;
  var $i661: i64;
  var $i661.dup: i1;
  var $p662: ref;
  var $p662.dup: i1;
  var $i663: i64;
  var $i663.dup: i1;
  var $p664: ref;
  var $p664.dup: i1;
  var $p665: ref;
  var $p665.dup: i1;
  var $i666: i64;
  var $i666.dup: i1;
  var $p667: ref;
  var $p667.dup: i1;
  var $i668: i64;
  var $i668.dup: i1;
  var $p669: ref;
  var $p669.dup: i1;
  var $p670: ref;
  var $p670.dup: i1;
  var $p671: ref;
  var $p671.dup: i1;
  var $i672: i64;
  var $i672.dup: i1;
  var $p673: ref;
  var $p673.dup: i1;
  var $i674: i64;
  var $i674.dup: i1;
  var $i675: i128;
  var $i675.dup: i1;
  var $p676: ref;
  var $p676.dup: i1;
  var $p677: ref;
  var $p677.dup: i1;
  var $p678: ref;
  var $p678.dup: i1;
  var $i679: i64;
  var $i679.dup: i1;
  var $p680: ref;
  var $p680.dup: i1;
  var $i681: i64;
  var $i681.dup: i1;
  var $i682: i128;
  var $i682.dup: i1;
  var $p683: ref;
  var $p683.dup: i1;
  var $p684: ref;
  var $p684.dup: i1;
  var $i685: i64;
  var $i685.dup: i1;
  var $p686: ref;
  var $p686.dup: i1;
  var $i687: i64;
  var $i687.dup: i1;
  var $p688: ref;
  var $p688.dup: i1;
  var $p689: ref;
  var $p689.dup: i1;
  var $i690: i64;
  var $i690.dup: i1;
  var $p691: ref;
  var $p691.dup: i1;
  var $i692: i64;
  var $i692.dup: i1;
  var $p693: ref;
  var $p693.dup: i1;
  var $p694: ref;
  var $p694.dup: i1;
  var $p695: ref;
  var $p695.dup: i1;
  var $i696: i64;
  var $i696.dup: i1;
  var $p697: ref;
  var $p697.dup: i1;
  var $i698: i64;
  var $i698.dup: i1;
  var $i699: i128;
  var $i699.dup: i1;
  var $p700: ref;
  var $p700.dup: i1;
  var $p701: ref;
  var $p701.dup: i1;
  var $p702: ref;
  var $p702.dup: i1;
  var $i703: i64;
  var $i703.dup: i1;
  var $p704: ref;
  var $p704.dup: i1;
  var $i705: i64;
  var $i705.dup: i1;
  var $i706: i128;
  var $i706.dup: i1;
  var $p707: ref;
  var $p707.dup: i1;
  var $p708: ref;
  var $p708.dup: i1;
  var $p709: ref;
  var $p709.dup: i1;
  var $i710: i64;
  var $i710.dup: i1;
  var $p711: ref;
  var $p711.dup: i1;
  var $i712: i64;
  var $i712.dup: i1;
  var $i713: i128;
  var $i713.dup: i1;
  var $p714: ref;
  var $p714.dup: i1;
  var $p715: ref;
  var $p715.dup: i1;
  var $i716: i64;
  var $i716.dup: i1;
  var $p717: ref;
  var $p717.dup: i1;
  var $i718: i64;
  var $i718.dup: i1;
  var $p719: ref;
  var $p719.dup: i1;
  var $p720: ref;
  var $p720.dup: i1;
  var $i721: i64;
  var $i721.dup: i1;
  var $p722: ref;
  var $p722.dup: i1;
  var $i723: i64;
  var $i723.dup: i1;
  var $p724: ref;
  var $p724.dup: i1;
  var $p725: ref;
  var $p725.dup: i1;
  var $p726: ref;
  var $p726.dup: i1;
  var $i727: i64;
  var $i727.dup: i1;
  var $p728: ref;
  var $p728.dup: i1;
  var $i729: i64;
  var $i729.dup: i1;
  var $i730: i128;
  var $i730.dup: i1;
  var $p731: ref;
  var $p731.dup: i1;
  var $p732: ref;
  var $p732.dup: i1;
  var $p733: ref;
  var $p733.dup: i1;
  var $i734: i64;
  var $i734.dup: i1;
  var $p735: ref;
  var $p735.dup: i1;
  var $i736: i64;
  var $i736.dup: i1;
  var $i737: i128;
  var $i737.dup: i1;
  var $p738: ref;
  var $p738.dup: i1;
  var $p739: ref;
  var $p739.dup: i1;
  var $i740: i64;
  var $i740.dup: i1;
  var $p741: ref;
  var $p741.dup: i1;
  var $i742: i64;
  var $i742.dup: i1;
  var $p743: ref;
  var $p743.dup: i1;
  var $p744: ref;
  var $p744.dup: i1;
  var $i745: i64;
  var $i745.dup: i1;
  var $p746: ref;
  var $p746.dup: i1;
  var $i747: i64;
  var $i747.dup: i1;
  var $p748: ref;
  var $p748.dup: i1;
  var $p749: ref;
  var $p749.dup: i1;
  var $p750: ref;
  var $p750.dup: i1;
  var $i751: i64;
  var $i751.dup: i1;
  var $p752: ref;
  var $p752.dup: i1;
  var $i753: i64;
  var $i753.dup: i1;
  var $i754: i128;
  var $i754.dup: i1;
  var $p755: ref;
  var $p755.dup: i1;
  var $p756: ref;
  var $p756.dup: i1;
  var $p757: ref;
  var $p757.dup: i1;
  var $i758: i64;
  var $i758.dup: i1;
  var $p759: ref;
  var $p759.dup: i1;
  var $i760: i64;
  var $i760.dup: i1;
  var $i761: i128;
  var $i761.dup: i1;
  var $p762: ref;
  var $p762.dup: i1;
  var $p763: ref;
  var $p763.dup: i1;
  var $i764: i64;
  var $i764.dup: i1;
  var $p765: ref;
  var $p765.dup: i1;
  var $i766: i64;
  var $i766.dup: i1;
  var $p767: ref;
  var $p767.dup: i1;
  var $p768: ref;
  var $p768.dup: i1;
  var $i769: i64;
  var $i769.dup: i1;
  var $p770: ref;
  var $p770.dup: i1;
  var $i771: i64;
  var $i771.dup: i1;
  var $p772: ref;
  var $p772.dup: i1;
  var $p773: ref;
  var $p773.dup: i1;
  var $p774: ref;
  var $p774.dup: i1;
  var $i775: i64;
  var $i775.dup: i1;
  var $p776: ref;
  var $p776.dup: i1;
  var $i777: i64;
  var $i777.dup: i1;
  var $i778: i128;
  var $i778.dup: i1;
  var $p779: ref;
  var $p779.dup: i1;
  var $p780: ref;
  var $p780.dup: i1;
  var $i781: i64;
  var $i781.dup: i1;
  var $p782: ref;
  var $p782.dup: i1;
  var $i783: i64;
  var $i783.dup: i1;
  var $i784: i64;
  var $i784.dup: i1;
  var $i785: i64;
  var $i785.dup: i1;
  var $p786: ref;
  var $p786.dup: i1;
  var $p787: ref;
  var $p787.dup: i1;
  var $i788: i64;
  var $i788.dup: i1;
  var $p789: ref;
  var $p789.dup: i1;
  var $i790: i64;
  var $i790.dup: i1;
  var $p791: ref;
  var $p791.dup: i1;
  var $p792: ref;
  var $p792.dup: i1;
  var $p793: ref;
  var $p793.dup: i1;
  var $i794: i64;
  var $i794.dup: i1;
  var $p795: ref;
  var $p795.dup: i1;
  var $i796: i64;
  var $i796.dup: i1;
  var $i797: i128;
  var $i797.dup: i1;
  var $p798: ref;
  var $p798.dup: i1;
  var $p799: ref;
  var $p799.dup: i1;
  var $i800: i64;
  var $i800.dup: i1;
  var $p801: ref;
  var $p801.dup: i1;
  var $i802: i64;
  var $i802.dup: i1;
  var $i803: i64;
  var $i803.dup: i1;
  var $p804: ref;
  var $p804.dup: i1;
  var $p805: ref;
  var $p805.dup: i1;
  var $p806: ref;
  var $p806.dup: i1;
  var $i807: i64;
  var $i807.dup: i1;
  var $p808: ref;
  var $p808.dup: i1;
  var $i809: i64;
  var $i809.dup: i1;
  var $i810: i128;
  var $i810.dup: i1;
  var $p811: ref;
  var $p811.dup: i1;
  var $p812: ref;
  var $p812.dup: i1;
  var $i813: i64;
  var $i813.dup: i1;
  var $p814: ref;
  var $p814.dup: i1;
  var $i815: i64;
  var $i815.dup: i1;
  var $p816: ref;
  var $p816.dup: i1;
  var $p817: ref;
  var $p817.dup: i1;
  var $i818: i64;
  var $i818.dup: i1;
  var $p819: ref;
  var $p819.dup: i1;
  var $i820: i64;
  var $i820.dup: i1;
  var $p821: ref;
  var $p821.dup: i1;
  var $p822: ref;
  var $p822.dup: i1;
  var $p823: ref;
  var $p823.dup: i1;
  var $i824: i64;
  var $i824.dup: i1;
  var $p825: ref;
  var $p825.dup: i1;
  var $i826: i64;
  var $i826.dup: i1;
  var $i827: i128;
  var $i827.dup: i1;
  var $p828: ref;
  var $p828.dup: i1;
  var $p829: ref;
  var $p829.dup: i1;
  var $i830: i64;
  var $i830.dup: i1;
  var $p831: ref;
  var $p831.dup: i1;
  var $i832: i64;
  var $i832.dup: i1;
  var $i833: i64;
  var $i833.dup: i1;
  var $i834: i64;
  var $i834.dup: i1;
  var $p835: ref;
  var $p835.dup: i1;
  var $p836: ref;
  var $p836.dup: i1;
  var $i837: i64;
  var $i837.dup: i1;
  var $p838: ref;
  var $p838.dup: i1;
  var $i839: i64;
  var $i839.dup: i1;
  var $p840: ref;
  var $p840.dup: i1;
  var $p841: ref;
  var $p841.dup: i1;
  var $p842: ref;
  var $p842.dup: i1;
  var $i843: i64;
  var $i843.dup: i1;
  var $p844: ref;
  var $p844.dup: i1;
  var $i845: i64;
  var $i845.dup: i1;
  var $i846: i128;
  var $i846.dup: i1;
  var $p847: ref;
  var $p847.dup: i1;
  var $p848: ref;
  var $p848.dup: i1;
  var $i849: i64;
  var $i849.dup: i1;
  var $p850: ref;
  var $p850.dup: i1;
  var $i851: i64;
  var $i851.dup: i1;
  var $i852: i64;
  var $i852.dup: i1;
  var $p853: ref;
  var $p853.dup: i1;
  var $p854: ref;
  var $p854.dup: i1;
  var $p855: ref;
  var $p855.dup: i1;
  var $i856: i64;
  var $i856.dup: i1;
  var $p857: ref;
  var $p857.dup: i1;
  var $i858: i64;
  var $i858.dup: i1;
  var $i859: i128;
  var $i859.dup: i1;
  var $p860: ref;
  var $p860.dup: i1;
  var $p861: ref;
  var $p861.dup: i1;
  var $i862: i64;
  var $i862.dup: i1;
  var $p863: ref;
  var $p863.dup: i1;
  var $i864: i64;
  var $i864.dup: i1;
  var $p865: ref;
  var $p865.dup: i1;
  var $p866: ref;
  var $p866.dup: i1;
  var $i867: i64;
  var $i867.dup: i1;
  var $p868: ref;
  var $p868.dup: i1;
  var $i869: i64;
  var $i869.dup: i1;
  var $p870: ref;
  var $p870.dup: i1;
  var $p871: ref;
  var $p871.dup: i1;
  var $p872: ref;
  var $p872.dup: i1;
  var $i873: i64;
  var $i873.dup: i1;
  var $p874: ref;
  var $p874.dup: i1;
  var $i875: i64;
  var $i875.dup: i1;
  var $i876: i128;
  var $i876.dup: i1;
  var $p877: ref;
  var $p877.dup: i1;
  var $p878: ref;
  var $p878.dup: i1;
  var $i879: i64;
  var $i879.dup: i1;
  var $p880: ref;
  var $p880.dup: i1;
  var $i881: i64;
  var $i881.dup: i1;
  var $i882: i64;
  var $i882.dup: i1;
  var $i883: i64;
  var $i883.dup: i1;
  var $p884: ref;
  var $p884.dup: i1;
  var $p885: ref;
  var $p885.dup: i1;
  var $i886: i64;
  var $i886.dup: i1;
  var $p887: ref;
  var $p887.dup: i1;
  var $i888: i64;
  var $i888.dup: i1;
  var $p889: ref;
  var $p889.dup: i1;
  var $p890: ref;
  var $p890.dup: i1;
  var $p891: ref;
  var $p891.dup: i1;
  var $i892: i64;
  var $i892.dup: i1;
  var $p893: ref;
  var $p893.dup: i1;
  var $i894: i64;
  var $i894.dup: i1;
  var $i895: i128;
  var $i895.dup: i1;
  var $p896: ref;
  var $p896.dup: i1;
  var $p897: ref;
  var $p897.dup: i1;
  var $i898: i64;
  var $i898.dup: i1;
  var $p899: ref;
  var $p899.dup: i1;
  var $i900: i64;
  var $i900.dup: i1;
  var $i901: i64;
  var $i901.dup: i1;
  var $p902: ref;
  var $p902.dup: i1;
  var $p903: ref;
  var $p903.dup: i1;
  var $p904: ref;
  var $p904.dup: i1;
  var $i905: i64;
  var $i905.dup: i1;
  var $p906: ref;
  var $p906.dup: i1;
  var $i907: i64;
  var $i907.dup: i1;
  var $i908: i128;
  var $i908.dup: i1;
  var $p909: ref;
  var $p909.dup: i1;
  var $p910: ref;
  var $p910.dup: i1;
  var $i911: i64;
  var $i911.dup: i1;
  var $p912: ref;
  var $p912.dup: i1;
  var $i913: i64;
  var $i913.dup: i1;
  var $p914: ref;
  var $p914.dup: i1;
  var $p915: ref;
  var $p915.dup: i1;
  var $i916: i64;
  var $i916.dup: i1;
  var $p917: ref;
  var $p917.dup: i1;
  var $i918: i64;
  var $i918.dup: i1;
  var $p919: ref;
  var $p919.dup: i1;
  var $p920: ref;
  var $p920.dup: i1;
  var $p921: ref;
  var $p921.dup: i1;
  var $i922: i64;
  var $i922.dup: i1;
  var $p923: ref;
  var $p923.dup: i1;
  var $i924: i64;
  var $i924.dup: i1;
  var $i925: i128;
  var $i925.dup: i1;
  var $p926: ref;
  var $p926.dup: i1;
  var $p927: ref;
  var $p927.dup: i1;
  var $i928: i64;
  var $i928.dup: i1;
  var $p929: ref;
  var $p929.dup: i1;
  var $i930: i64;
  var $i930.dup: i1;
  var $i931: i64;
  var $i931.dup: i1;
  var $i932: i64;
  var $i932.dup: i1;
  var $p933: ref;
  var $p933.dup: i1;
  var $p934: ref;
  var $p934.dup: i1;
  var $i935: i64;
  var $i935.dup: i1;
  var $p936: ref;
  var $p936.dup: i1;
  var $i937: i64;
  var $i937.dup: i1;
  var $p938: ref;
  var $p938.dup: i1;
  var $p939: ref;
  var $p939.dup: i1;
  var $p940: ref;
  var $p940.dup: i1;
  var $i941: i64;
  var $i941.dup: i1;
  var $p942: ref;
  var $p942.dup: i1;
  var $i943: i64;
  var $i943.dup: i1;
  var $i944: i128;
  var $i944.dup: i1;
  var $p945: ref;
  var $p945.dup: i1;
  var $p946: ref;
  var $p946.dup: i1;
  var $i947: i64;
  var $i947.dup: i1;
  var $p948: ref;
  var $p948.dup: i1;
  var $i949: i64;
  var $i949.dup: i1;
  var $i950: i64;
  var $i950.dup: i1;
  var $p951: ref;
  var $p951.dup: i1;
  var $p952: ref;
  var $p952.dup: i1;
  var $p953: ref;
  var $p953.dup: i1;
  var $i954: i64;
  var $i954.dup: i1;
  var $p955: ref;
  var $p955.dup: i1;
  var $i956: i64;
  var $i956.dup: i1;
  var $i957: i128;
  var $i957.dup: i1;
  var $p958: ref;
  var $p958.dup: i1;
  var $p959: ref;
  var $p959.dup: i1;
  var $i960: i64;
  var $i960.dup: i1;
  var $p961: ref;
  var $p961.dup: i1;
  var $i962: i64;
  var $i962.dup: i1;
  var $p963: ref;
  var $p963.dup: i1;
  var $p964: ref;
  var $p964.dup: i1;
  var $i965: i64;
  var $i965.dup: i1;
  var $p966: ref;
  var $p966.dup: i1;
  var $i967: i64;
  var $i967.dup: i1;
  var $p968: ref;
  var $p968.dup: i1;
  var $p969: ref;
  var $p969.dup: i1;
  var $p970: ref;
  var $p970.dup: i1;
  var $i971: i64;
  var $i971.dup: i1;
  var $p972: ref;
  var $p972.dup: i1;
  var $i973: i64;
  var $i973.dup: i1;
  var $i974: i128;
  var $i974.dup: i1;
  var $p975: ref;
  var $p975.dup: i1;
  var $p976: ref;
  var $p976.dup: i1;
  var $i977: i64;
  var $i977.dup: i1;
  var $p978: ref;
  var $p978.dup: i1;
  var $i979: i64;
  var $i979.dup: i1;
  var $i980: i64;
  var $i980.dup: i1;
  var $i981: i64;
  var $i981.dup: i1;
  var $p982: ref;
  var $p982.dup: i1;
  var $p983: ref;
  var $p983.dup: i1;
  var $i984: i64;
  var $i984.dup: i1;
  var $p985: ref;
  var $p985.dup: i1;
  var $i986: i64;
  var $i986.dup: i1;
  var $p987: ref;
  var $p987.dup: i1;
  var $p988: ref;
  var $p988.dup: i1;
  var $p989: ref;
  var $p989.dup: i1;
  var $i990: i64;
  var $i990.dup: i1;
  var $p991: ref;
  var $p991.dup: i1;
  var $i992: i64;
  var $i992.dup: i1;
  var $i993: i128;
  var $i993.dup: i1;
  var $p994: ref;
  var $p994.dup: i1;
  var $p995: ref;
  var $p995.dup: i1;
  var $i996: i64;
  var $i996.dup: i1;
  var $p997: ref;
  var $p997.dup: i1;
  var $i998: i64;
  var $i998.dup: i1;
  var $i999: i64;
  var $i999.dup: i1;
  var $i1000: i64;
  var $i1000.dup: i1;
  var $i1001: i64;
  var $i1001.dup: i1;
  var $i1002: i64;
  var $i1002.dup: i1;
  var $i1003: i64;
  var $i1003.dup: i1;
  var $i1004: i64;
  var $i1004.dup: i1;
  var $p1005: ref;
  var $p1005.dup: i1;
  var $p1006: ref;
  var $p1006.dup: i1;
  var $p1007: ref;
  var $p1007.dup: i1;
  var $i1008: i64;
  var $i1008.dup: i1;
  var $p1009: ref;
  var $p1009.dup: i1;
  var $i1010: i64;
  var $i1010.dup: i1;
  var $i1011: i128;
  var $i1011.dup: i1;
  var $p1012: ref;
  var $p1012.dup: i1;
  var $p1013: ref;
  var $p1013.dup: i1;
  var $i1014: i64;
  var $i1014.dup: i1;
  var $p1015: ref;
  var $p1015.dup: i1;
  var $i1016: i64;
  var $i1016.dup: i1;
  var $p1017: ref;
  var $p1017.dup: i1;
  var $p1018: ref;
  var $p1018.dup: i1;
  var $i1019: i64;
  var $i1019.dup: i1;
  var $p1020: ref;
  var $p1020.dup: i1;
  var $i1021: i64;
  var $i1021.dup: i1;
  var $p1022: ref;
  var $p1022.dup: i1;
  var $p1023: ref;
  var $p1023.dup: i1;
  var $p1024: ref;
  var $p1024.dup: i1;
  var $i1025: i64;
  var $i1025.dup: i1;
  var $p1026: ref;
  var $p1026.dup: i1;
  var $i1027: i64;
  var $i1027.dup: i1;
  var $i1028: i128;
  var $i1028.dup: i1;
  var $p1029: ref;
  var $p1029.dup: i1;
  var $p1030: ref;
  var $p1030.dup: i1;
  var $i1031: i64;
  var $i1031.dup: i1;
  var $p1032: ref;
  var $p1032.dup: i1;
  var $i1033: i64;
  var $i1033.dup: i1;
  var $i1034: i64;
  var $i1034.dup: i1;
  var $i1035: i64;
  var $i1035.dup: i1;
  var $p1036: ref;
  var $p1036.dup: i1;
  var $p1037: ref;
  var $p1037.dup: i1;
  var $i1038: i64;
  var $i1038.dup: i1;
  var $p1039: ref;
  var $p1039.dup: i1;
  var $i1040: i64;
  var $i1040.dup: i1;
  var $p1041: ref;
  var $p1041.dup: i1;
  var $p1042: ref;
  var $p1042.dup: i1;
  var $p1043: ref;
  var $p1043.dup: i1;
  var $i1044: i64;
  var $i1044.dup: i1;
  var $p1045: ref;
  var $p1045.dup: i1;
  var $i1046: i64;
  var $i1046.dup: i1;
  var $i1047: i128;
  var $i1047.dup: i1;
  var $p1048: ref;
  var $p1048.dup: i1;
  var $p1049: ref;
  var $p1049.dup: i1;
  var $i1050: i64;
  var $i1050.dup: i1;
  var $p1051: ref;
  var $p1051.dup: i1;
  var $i1052: i64;
  var $i1052.dup: i1;
  var $i1053: i64;
  var $i1053.dup: i1;
  var $p1054: ref;
  var $p1054.dup: i1;
  var $p1055: ref;
  var $p1055.dup: i1;
  var $p1056: ref;
  var $p1056.dup: i1;
  var $i1057: i64;
  var $i1057.dup: i1;
  var $p1058: ref;
  var $p1058.dup: i1;
  var $i1059: i64;
  var $i1059.dup: i1;
  var $i1060: i128;
  var $i1060.dup: i1;
  var $p1061: ref;
  var $p1061.dup: i1;
  var $p1062: ref;
  var $p1062.dup: i1;
  var $i1063: i64;
  var $i1063.dup: i1;
  var $p1064: ref;
  var $p1064.dup: i1;
  var $i1065: i64;
  var $i1065.dup: i1;
  var $p1066: ref;
  var $p1066.dup: i1;
  var $p1067: ref;
  var $p1067.dup: i1;
  var $i1068: i64;
  var $i1068.dup: i1;
  var $p1069: ref;
  var $p1069.dup: i1;
  var $i1070: i64;
  var $i1070.dup: i1;
  var $p1071: ref;
  var $p1071.dup: i1;
  var $p1072: ref;
  var $p1072.dup: i1;
  var $p1073: ref;
  var $p1073.dup: i1;
  var $i1074: i64;
  var $i1074.dup: i1;
  var $p1075: ref;
  var $p1075.dup: i1;
  var $i1076: i64;
  var $i1076.dup: i1;
  var $i1077: i128;
  var $i1077.dup: i1;
  var $p1078: ref;
  var $p1078.dup: i1;
  var $p1079: ref;
  var $p1079.dup: i1;
  var $i1080: i64;
  var $i1080.dup: i1;
  var $p1081: ref;
  var $p1081.dup: i1;
  var $i1082: i64;
  var $i1082.dup: i1;
  var $i1083: i64;
  var $i1083.dup: i1;
  var $i1084: i64;
  var $i1084.dup: i1;
  var $p1085: ref;
  var $p1085.dup: i1;
  var $p1086: ref;
  var $p1086.dup: i1;
  var $i1087: i64;
  var $i1087.dup: i1;
  var $p1088: ref;
  var $p1088.dup: i1;
  var $i1089: i64;
  var $i1089.dup: i1;
  var $p1090: ref;
  var $p1090.dup: i1;
  var $p1091: ref;
  var $p1091.dup: i1;
  var $p1092: ref;
  var $p1092.dup: i1;
  var $i1093: i64;
  var $i1093.dup: i1;
  var $p1094: ref;
  var $p1094.dup: i1;
  var $i1095: i64;
  var $i1095.dup: i1;
  var $i1096: i128;
  var $i1096.dup: i1;
  var $p1097: ref;
  var $p1097.dup: i1;
  var $p1098: ref;
  var $p1098.dup: i1;
  var $i1099: i64;
  var $i1099.dup: i1;
  var $p1100: ref;
  var $p1100.dup: i1;
  var $i1101: i64;
  var $i1101.dup: i1;
  var $i1102: i64;
  var $i1102.dup: i1;
  var $p1103: ref;
  var $p1103.dup: i1;
  var $p1104: ref;
  var $p1104.dup: i1;
  var $p1105: ref;
  var $p1105.dup: i1;
  var $i1106: i64;
  var $i1106.dup: i1;
  var $p1107: ref;
  var $p1107.dup: i1;
  var $i1108: i64;
  var $i1108.dup: i1;
  var $i1109: i128;
  var $i1109.dup: i1;
  var $p1110: ref;
  var $p1110.dup: i1;
  var $p1111: ref;
  var $p1111.dup: i1;
  var $i1112: i64;
  var $i1112.dup: i1;
  var $p1113: ref;
  var $p1113.dup: i1;
  var $i1114: i64;
  var $i1114.dup: i1;
  var $p1115: ref;
  var $p1115.dup: i1;
  var $p1116: ref;
  var $p1116.dup: i1;
  var $i1117: i64;
  var $i1117.dup: i1;
  var $p1118: ref;
  var $p1118.dup: i1;
  var $i1119: i64;
  var $i1119.dup: i1;
  var $p1120: ref;
  var $p1120.dup: i1;
  var $p1121: ref;
  var $p1121.dup: i1;
  var $p1122: ref;
  var $p1122.dup: i1;
  var $i1123: i64;
  var $i1123.dup: i1;
  var $p1124: ref;
  var $p1124.dup: i1;
  var $i1125: i64;
  var $i1125.dup: i1;
  var $i1126: i128;
  var $i1126.dup: i1;
  var $p1127: ref;
  var $p1127.dup: i1;
  var $p1128: ref;
  var $p1128.dup: i1;
  var $i1129: i64;
  var $i1129.dup: i1;
  var $p1130: ref;
  var $p1130.dup: i1;
  var $i1131: i64;
  var $i1131.dup: i1;
  var $i1132: i64;
  var $i1132.dup: i1;
  var $i1133: i64;
  var $i1133.dup: i1;
  var $p1134: ref;
  var $p1134.dup: i1;
  var $p1135: ref;
  var $p1135.dup: i1;
  var $i1136: i64;
  var $i1136.dup: i1;
  var $p1137: ref;
  var $p1137.dup: i1;
  var $i1138: i64;
  var $i1138.dup: i1;
  var $p1139: ref;
  var $p1139.dup: i1;
  var $p1140: ref;
  var $p1140.dup: i1;
  var $p1141: ref;
  var $p1141.dup: i1;
  var $i1142: i64;
  var $i1142.dup: i1;
  var $p1143: ref;
  var $p1143.dup: i1;
  var $i1144: i64;
  var $i1144.dup: i1;
  var $i1145: i128;
  var $i1145.dup: i1;
  var $p1146: ref;
  var $p1146.dup: i1;
  var $p1147: ref;
  var $p1147.dup: i1;
  var $i1148: i64;
  var $i1148.dup: i1;
  var $p1149: ref;
  var $p1149.dup: i1;
  var $i1150: i64;
  var $i1150.dup: i1;
  var $i1151: i64;
  var $i1151.dup: i1;
  var $p1152: ref;
  var $p1152.dup: i1;
  var $p1153: ref;
  var $p1153.dup: i1;
  var $p1154: ref;
  var $p1154.dup: i1;
  var $i1155: i64;
  var $i1155.dup: i1;
  var $p1156: ref;
  var $p1156.dup: i1;
  var $i1157: i64;
  var $i1157.dup: i1;
  var $i1158: i128;
  var $i1158.dup: i1;
  var $p1159: ref;
  var $p1159.dup: i1;
  var $p1160: ref;
  var $p1160.dup: i1;
  var $i1161: i64;
  var $i1161.dup: i1;
  var $p1162: ref;
  var $p1162.dup: i1;
  var $i1163: i64;
  var $i1163.dup: i1;
  var $p1164: ref;
  var $p1164.dup: i1;
  var $p1165: ref;
  var $p1165.dup: i1;
  var $i1166: i64;
  var $i1166.dup: i1;
  var $p1167: ref;
  var $p1167.dup: i1;
  var $i1168: i64;
  var $i1168.dup: i1;
  var $p1169: ref;
  var $p1169.dup: i1;
  var $p1170: ref;
  var $p1170.dup: i1;
  var $p1171: ref;
  var $p1171.dup: i1;
  var $i1172: i64;
  var $i1172.dup: i1;
  var $p1173: ref;
  var $p1173.dup: i1;
  var $i1174: i64;
  var $i1174.dup: i1;
  var $i1175: i128;
  var $i1175.dup: i1;
  var $p1176: ref;
  var $p1176.dup: i1;
  var $p1177: ref;
  var $p1177.dup: i1;
  var $i1178: i64;
  var $i1178.dup: i1;
  var $p1179: ref;
  var $p1179.dup: i1;
  var $i1180: i64;
  var $i1180.dup: i1;
  var $i1181: i64;
  var $i1181.dup: i1;
  var $i1182: i64;
  var $i1182.dup: i1;
  var $p1183: ref;
  var $p1183.dup: i1;
  var $p1184: ref;
  var $p1184.dup: i1;
  var $i1185: i64;
  var $i1185.dup: i1;
  var $p1186: ref;
  var $p1186.dup: i1;
  var $i1187: i64;
  var $i1187.dup: i1;
  var $p1188: ref;
  var $p1188.dup: i1;
  var $p1189: ref;
  var $p1189.dup: i1;
  var $p1190: ref;
  var $p1190.dup: i1;
  var $i1191: i64;
  var $i1191.dup: i1;
  var $p1192: ref;
  var $p1192.dup: i1;
  var $i1193: i64;
  var $i1193.dup: i1;
  var $i1194: i128;
  var $i1194.dup: i1;
  var $p1195: ref;
  var $p1195.dup: i1;
  var $p1196: ref;
  var $p1196.dup: i1;
  var $i1197: i64;
  var $i1197.dup: i1;
  var $p1198: ref;
  var $p1198.dup: i1;
  var $i1199: i64;
  var $i1199.dup: i1;
  var $i1200: i64;
  var $i1200.dup: i1;
  var $p1201: ref;
  var $p1201.dup: i1;
  var $p1202: ref;
  var $p1202.dup: i1;
  var $p1203: ref;
  var $p1203.dup: i1;
  var $i1204: i64;
  var $i1204.dup: i1;
  var $p1205: ref;
  var $p1205.dup: i1;
  var $i1206: i64;
  var $i1206.dup: i1;
  var $i1207: i128;
  var $i1207.dup: i1;
  var $p1208: ref;
  var $p1208.dup: i1;
  var $p1209: ref;
  var $p1209.dup: i1;
  var $i1210: i64;
  var $i1210.dup: i1;
  var $p1211: ref;
  var $p1211.dup: i1;
  var $i1212: i64;
  var $i1212.dup: i1;
  var $p1213: ref;
  var $p1213.dup: i1;
  var $p1214: ref;
  var $p1214.dup: i1;
  var $i1215: i64;
  var $i1215.dup: i1;
  var $p1216: ref;
  var $p1216.dup: i1;
  var $i1217: i64;
  var $i1217.dup: i1;
  var $p1218: ref;
  var $p1218.dup: i1;
  var $p1219: ref;
  var $p1219.dup: i1;
  var $p1220: ref;
  var $p1220.dup: i1;
  var $i1221: i64;
  var $i1221.dup: i1;
  var $p1222: ref;
  var $p1222.dup: i1;
  var $i1223: i64;
  var $i1223.dup: i1;
  var $i1224: i128;
  var $i1224.dup: i1;
  var $p1225: ref;
  var $p1225.dup: i1;
  var $p1226: ref;
  var $p1226.dup: i1;
  var $i1227: i64;
  var $i1227.dup: i1;
  var $p1228: ref;
  var $p1228.dup: i1;
  var $i1229: i64;
  var $i1229.dup: i1;
  var $i1230: i64;
  var $i1230.dup: i1;
  var $i1231: i64;
  var $i1231.dup: i1;
  var $p1232: ref;
  var $p1232.dup: i1;
  var $p1233: ref;
  var $p1233.dup: i1;
  var $i1234: i64;
  var $i1234.dup: i1;
  var $p1235: ref;
  var $p1235.dup: i1;
  var $i1236: i64;
  var $i1236.dup: i1;
  var $p1237: ref;
  var $p1237.dup: i1;
  var $p1238: ref;
  var $p1238.dup: i1;
  var $p1239: ref;
  var $p1239.dup: i1;
  var $i1240: i64;
  var $i1240.dup: i1;
  var $p1241: ref;
  var $p1241.dup: i1;
  var $i1242: i64;
  var $i1242.dup: i1;
  var $i1243: i128;
  var $i1243.dup: i1;
  var $p1244: ref;
  var $p1244.dup: i1;
  var $p1245: ref;
  var $p1245.dup: i1;
  var $i1246: i64;
  var $i1246.dup: i1;
  var $p1247: ref;
  var $p1247.dup: i1;
  var $i1248: i64;
  var $i1248.dup: i1;
  var $i1249: i64;
  var $i1249.dup: i1;
  var $i1250: i64;
  var $i1250.dup: i1;
  var $i1251: i64;
  var $i1251.dup: i1;
  var $i1252: i64;
  var $i1252.dup: i1;
  var $i1253: i64;
  var $i1253.dup: i1;
  var $i1254: i64;
  var $i1254.dup: i1;
  var $p1255: ref;
  var $p1255.dup: i1;
  var $p1256: ref;
  var $p1256.dup: i1;
  var $p1257: ref;
  var $p1257.dup: i1;
  var $p1258: ref;
  var $p1258.dup: i1;
  var $p1259: ref;
  var $p1259.dup: i1;
  var $p1260: ref;
  var $p1260.dup: i1;
  var $p1261: ref;
  var $p1261.dup: i1;
  var $p1262: ref;
  var $p1262.dup: i1;
  var $p1263: ref;
  var $p1263.dup: i1;
  var $p1264: ref;
  var $p1264.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 449, 18} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p3.dup := 0;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p4.dup := 0;
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p5.dup := 0;
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p6.dup := 0;
  assume {:verifier.code 0} true;
  call $p7 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p7.dup := 0;
  assume {:verifier.code 0} true;
  call $p8 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p8.dup := 0;
  assume {:verifier.code 0} true;
  call $p9 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p9.dup := 0;
  assume {:verifier.code 0} true;
  call $p10 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p10.dup := 0;
  assume {:verifier.code 0} true;
  call $p11 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p11.dup := 0;
  assume {:verifier.code 0} true;
  call $p12 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p12.dup := 0;
  assume {:verifier.code 0} true;
  call $p13 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p13.dup := 0;
  assume {:verifier.code 0} true;
  call $p14 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p14.dup := 0;
  assume {:verifier.code 0} true;
  call $p15 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p15.dup := 0;
  assume {:verifier.code 0} true;
  call $p16 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p16.dup := 0;
  assume {:verifier.code 0} true;
  call $p17 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p17.dup := 0;
  assume {:verifier.code 0} true;
  call $p18 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p18.dup := 0;
  assume {:verifier.code 0} true;
  call $p19 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p19.dup := 0;
  assume {:verifier.code 0} true;
  call $p20 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p20.dup := 0;
  assume {:verifier.code 0} true;
  call $p21 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p21.dup := 0;
  assume {:verifier.code 0} true;
  call $p22 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p22.dup := 0;
  assume {:verifier.code 0} true;
  call $p23 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p23.dup := 0;
  assume {:verifier.code 0} true;
  call $p24 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p24.dup := 0;
  assume {:verifier.code 0} true;
  call $p25 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p25.dup := 0;
  assume {:verifier.code 0} true;
  call $p26 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p26.dup := 0;
  assume {:verifier.code 0} true;
  call $p27 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p27.dup := 0;
  assume {:verifier.code 0} true;
  call $p28 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p28.dup := 0;
  assume {:verifier.code 0} true;
  call $p29 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p29.dup := 0;
  assume {:verifier.code 0} true;
  call $p30 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p30.dup := 0;
  assume {:verifier.code 0} true;
  call $p31 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p31.dup := 0;
  assume {:verifier.code 0} true;
  call $p32 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p32.dup := 0;
  assume {:verifier.code 0} true;
  call $p33 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p33.dup := 0;
  assume {:verifier.code 0} true;
  call $p34 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p34.dup := 0;
  assume {:verifier.code 0} true;
  call $p35 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p35.dup := 0;
  assume {:verifier.code 0} true;
  call $p36 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p36.dup := 0;
  assume {:verifier.code 0} true;
  call $p37 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p37.dup := 0;
  assume {:verifier.code 0} true;
  call $p38 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p38.dup := 0;
  assume {:verifier.code 0} true;
  call $p39 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p39.dup := 0;
  assume {:verifier.code 0} true;
  call $p40 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p40.dup := 0;
  assume {:verifier.code 0} true;
  call $p41 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p41.dup := 0;
  assume {:verifier.code 0} true;
  call $p42 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p42.dup := 0;
  assume {:verifier.code 0} true;
  call $p43 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p43.dup := 0;
  assume {:verifier.code 0} true;
  call $p44 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p44.dup := 0;
  assume {:verifier.code 0} true;
  call $p45 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p45.dup := 0;
  assume {:verifier.code 0} true;
  call $p46 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p46.dup := 0;
  assume {:verifier.code 0} true;
  call $p47 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p47.dup := 0;
  assume {:verifier.code 0} true;
  call $p48 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p48.dup := 0;
  assume {:verifier.code 0} true;
  call $p49 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p49.dup := 0;
  assume {:verifier.code 0} true;
  call $p50 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p50.dup := 0;
  assume {:verifier.code 0} true;
  call $p51 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p51.dup := 0;
  assume {:verifier.code 0} true;
  call $p52 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p52.dup := 0;
  assume {:verifier.code 0} true;
  call $p53 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p53.dup := 0;
  assume {:verifier.code 0} true;
  call $p54 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p54.dup := 0;
  assume {:verifier.code 0} true;
  call $p55 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p55.dup := 0;
  assume {:verifier.code 0} true;
  call $p56 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p56.dup := 0;
  assume {:verifier.code 0} true;
  call $p57 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p57.dup := 0;
  assume {:verifier.code 0} true;
  call $p58 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p58.dup := 0;
  assume {:verifier.code 0} true;
  call $p59 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p59.dup := 0;
  assume {:verifier.code 0} true;
  call $p60 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p60.dup := 0;
  assume {:verifier.code 0} true;
  call $p61 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p61.dup := 0;
  assume {:verifier.code 0} true;
  call $p62 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p62.dup := 0;
  assume {:verifier.code 0} true;
  call $p63 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p63.dup := 0;
  assume {:verifier.code 0} true;
  call $p64 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p64.dup := 0;
  assume {:verifier.code 0} true;
  call $p65 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p65.dup := 0;
  assume {:verifier.code 0} true;
  call $p66 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p66.dup := 0;
  assume {:verifier.code 0} true;
  call $p67 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p67.dup := 0;
  assume {:verifier.code 0} true;
  call $p68 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p68.dup := 0;
  assume {:verifier.code 0} true;
  call $p69 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p69.dup := 0;
  assume {:verifier.code 0} true;
  call $p70 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p70.dup := 0;
  assume {:verifier.code 0} true;
  call $p71 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p71.dup := 0;
  assume {:verifier.code 0} true;
  call $p72 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p72.dup := 0;
  assume {:verifier.code 0} true;
  call $p73 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p73.dup := 0;
  assume {:verifier.code 0} true;
  call $p74 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p74.dup := 0;
  assume {:verifier.code 0} true;
  call $p75 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p75.dup := 0;
  assume {:verifier.code 0} true;
  call $p76 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p76.dup := 0;
  assume {:verifier.code 0} true;
  call $p77 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p77.dup := 0;
  assume {:verifier.code 0} true;
  call $p78 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p78.dup := 0;
  assume {:verifier.code 0} true;
  call $p79 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p79.dup := 0;
  assume {:verifier.code 0} true;
  call $p80 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p80.dup := 0;
  assume {:verifier.code 0} true;
  call $p81 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p81.dup := 0;
  assume {:verifier.code 0} true;
  call $p82 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p82.dup := 0;
  assume {:verifier.code 0} true;
  call $p83 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p83.dup := 0;
  assume {:verifier.code 0} true;
  call $p84 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p84.dup := 0;
  assume {:verifier.code 0} true;
  call $p85 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p85.dup := 0;
  assume {:verifier.code 0} true;
  call $p86 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p86.dup := 0;
  assume {:verifier.code 0} true;
  call $p87 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p87.dup := 0;
  assume {:verifier.code 0} true;
  call $p88 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p88.dup := 0;
  assume {:verifier.code 0} true;
  call $p89 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p89.dup := 0;
  assume {:verifier.code 0} true;
  call $p90 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p90.dup := 0;
  assume {:verifier.code 0} true;
  call $p91 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p91.dup := 0;
  assume {:verifier.code 0} true;
  call $p92 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p92.dup := 0;
  assume {:verifier.code 0} true;
  call $p93 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p93.dup := 0;
  assume {:verifier.code 0} true;
  call $p94 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p94.dup := 0;
  assume {:verifier.code 0} true;
  call $p95 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p95.dup := 0;
  assume {:verifier.code 0} true;
  call $p96 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p96.dup := 0;
  assume {:verifier.code 0} true;
  call $p97 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p97.dup := 0;
  assume {:verifier.code 0} true;
  call $p98 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p98.dup := 0;
  assume {:verifier.code 0} true;
  call $p99 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p99.dup := 0;
  assume {:verifier.code 0} true;
  call $p100 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p100.dup := 0;
  assume {:verifier.code 0} true;
  call $p101 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p101.dup := 0;
  assume {:verifier.code 0} true;
  call $p102 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p102.dup := 0;
  assume {:verifier.code 0} true;
  call $p103 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p103.dup := 0;
  assume {:verifier.code 0} true;
  call $p104 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p104.dup := 0;
  assume {:verifier.code 0} true;
  call $p105 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p105.dup := 0;
  assume {:verifier.code 0} true;
  call $p106 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p106.dup := 0;
  assume {:verifier.code 0} true;
  call $p107 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p107.dup := 0;
  assume {:verifier.code 0} true;
  call $p108 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p108.dup := 0;
  assume {:verifier.code 0} true;
  call $p109 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p109.dup := 0;
  assume {:verifier.code 0} true;
  call $p110 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p110.dup := 0;
  assume {:verifier.code 0} true;
  call $p111 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p111.dup := 0;
  assume {:verifier.code 0} true;
  call $p112 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p112.dup := 0;
  assume {:verifier.code 0} true;
  call $p113 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p113.dup := 0;
  assume {:verifier.code 0} true;
  call $p114 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p114.dup := 0;
  assume {:verifier.code 0} true;
  call $p115 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p115.dup := 0;
  assume {:verifier.code 0} true;
  call $p116 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p116.dup := 0;
  assume {:verifier.code 0} true;
  call $p117 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p117.dup := 0;
  assume {:verifier.code 0} true;
  call $p118 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p118.dup := 0;
  assume {:verifier.code 0} true;
  call $p119 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p119.dup := 0;
  assume {:verifier.code 0} true;
  call $p120 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p120.dup := 0;
  assume {:verifier.code 0} true;
  call $p121 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p121.dup := 0;
  assume {:verifier.code 0} true;
  call $p122 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p122.dup := 0;
  assume {:verifier.code 0} true;
  call $p123 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p123.dup := 0;
  assume {:verifier.code 0} true;
  call $p124 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p124.dup := 0;
  assume {:verifier.code 0} true;
  call $p125 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p125.dup := 0;
  assume {:verifier.code 0} true;
  call $p126 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p126.dup := 0;
  assume {:verifier.code 0} true;
  call $p127 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p127.dup := 0;
  assume {:verifier.code 0} true;
  call $p128 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p128.dup := 0;
  assume {:verifier.code 0} true;
  call $p129 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p129.dup := 0;
  assume {:verifier.code 0} true;
  call $p130 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p130.dup := 0;
  assume {:verifier.code 0} true;
  call $p131 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p131.dup := 0;
  assume {:verifier.code 0} true;
  call $p132 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p132.dup := 0;
  assume {:verifier.code 0} true;
  call $p133 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p133.dup := 0;
  assume {:verifier.code 0} true;
  call $p134 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p134.dup := 0;
  assume {:verifier.code 0} true;
  call $p135 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p135.dup := 0;
  assume {:verifier.code 0} true;
  call $p136 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p136.dup := 0;
  assume {:verifier.code 0} true;
  call $p137 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p137.dup := 0;
  assume {:verifier.code 0} true;
  call $p138 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p138.dup := 0;
  assume {:verifier.code 0} true;
  call $p139 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p139.dup := 0;
  assume {:verifier.code 0} true;
  call $p140 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p140.dup := 0;
  assume {:verifier.code 0} true;
  call $p141 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p141.dup := 0;
  assume {:verifier.code 0} true;
  call $p142 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p142.dup := 0;
  assume {:verifier.code 0} true;
  call $p143 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p143.dup := 0;
  assume {:verifier.code 0} true;
  call $p144 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p144.dup := 0;
  assume {:verifier.code 0} true;
  call $p145 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p145.dup := 0;
  assume {:verifier.code 0} true;
  call $p146 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p146.dup := 0;
  assume {:verifier.code 0} true;
  call $p147 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p147.dup := 0;
  assume {:verifier.code 0} true;
  call $p148 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p148.dup := 0;
  assume {:verifier.code 0} true;
  call $p149 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p149.dup := 0;
  assume {:verifier.code 0} true;
  call $p150 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p150.dup := 0;
  assume {:verifier.code 0} true;
  call $p151 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p151.dup := 0;
  assume {:verifier.code 0} true;
  call $p152 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p152.dup := 0;
  assume {:verifier.code 0} true;
  call $p153 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p153.dup := 0;
  assume {:verifier.code 0} true;
  call $p154 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p154.dup := 0;
  assume {:verifier.code 0} true;
  call $p155 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p155.dup := 0;
  assume {:verifier.code 0} true;
  call $p156 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p156.dup := 0;
  assume {:verifier.code 0} true;
  call $p157 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p157.dup := 0;
  assume {:verifier.code 0} true;
  call $p158 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p158.dup := 0;
  assume {:verifier.code 0} true;
  call $p159 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p159.dup := 0;
  assume {:verifier.code 0} true;
  call $p160 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p160.dup := 0;
  assume {:verifier.code 0} true;
  call $p161 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p161.dup := 0;
  assume {:verifier.code 0} true;
  call $p162 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p162.dup := 0;
  assume {:verifier.code 0} true;
  call $p163 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p163.dup := 0;
  assume {:verifier.code 0} true;
  call $p164 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p164.dup := 0;
  assume {:verifier.code 0} true;
  call $p165 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p165.dup := 0;
  assume {:verifier.code 0} true;
  call $p166 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p166.dup := 0;
  assume {:verifier.code 0} true;
  call $p167 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p167.dup := 0;
  assume {:verifier.code 0} true;
  call $p168 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p168.dup := 0;
  assume {:verifier.code 0} true;
  call $p169 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p169.dup := 0;
  assume {:verifier.code 0} true;
  call $p170 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p170.dup := 0;
  assume {:verifier.code 0} true;
  call $p171 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p171.dup := 0;
  assume {:verifier.code 0} true;
  call $p172 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p172.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 449, 18} true;
  assume {:verifier.code 0} true;
  $p173 := $add.ref($p1,$mul.ref(0,8));
  $p173.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 449, 18} true;
  assume {:verifier.code 0} true;
  $p173.dup := 0;
  $i174 := $load.i64($M.0,$p173);
  $i174.dup := $load.i1($M.0.dup,$p173);
  call {:cexpr "f10"} boogie_si_record_i64($i174);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 450, 18} true;
  assume {:verifier.code 0} true;
  $p175 := $add.ref($p1,$mul.ref(1,8));
  $p175.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 450, 18} true;
  assume {:verifier.code 0} true;
  $p175.dup := 0;
  $i176 := $load.i64($M.0,$p175);
  $i176.dup := $load.i1($M.0.dup,$p175);
  call {:cexpr "f11"} boogie_si_record_i64($i176);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 451, 18} true;
  assume {:verifier.code 0} true;
  $p177 := $add.ref($p1,$mul.ref(2,8));
  $p177.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 451, 18} true;
  assume {:verifier.code 0} true;
  $p177.dup := 0;
  $i178 := $load.i64($M.0,$p177);
  $i178.dup := $load.i1($M.0.dup,$p177);
  call {:cexpr "f12"} boogie_si_record_i64($i178);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 452, 18} true;
  assume {:verifier.code 0} true;
  $p179 := $add.ref($p1,$mul.ref(3,8));
  $p179.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 452, 18} true;
  assume {:verifier.code 0} true;
  $p179.dup := 0;
  $i180 := $load.i64($M.0,$p179);
  $i180.dup := $load.i1($M.0.dup,$p179);
  call {:cexpr "f13"} boogie_si_record_i64($i180);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 453, 18} true;
  assume {:verifier.code 0} true;
  $p181 := $add.ref($p1,$mul.ref(4,8));
  $p181.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 453, 18} true;
  assume {:verifier.code 0} true;
  $p181.dup := 0;
  $i182 := $load.i64($M.0,$p181);
  $i182.dup := $load.i1($M.0.dup,$p181);
  call {:cexpr "f14"} boogie_si_record_i64($i182);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 454, 18} true;
  assume {:verifier.code 0} true;
  $p183 := $add.ref($p1,$mul.ref(5,8));
  $p183.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 454, 18} true;
  assume {:verifier.code 0} true;
  $p183.dup := 0;
  $i184 := $load.i64($M.0,$p183);
  $i184.dup := $load.i1($M.0.dup,$p183);
  call {:cexpr "f20"} boogie_si_record_i64($i184);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 455, 18} true;
  assume {:verifier.code 0} true;
  $p185 := $add.ref($p1,$mul.ref(6,8));
  $p185.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 455, 18} true;
  assume {:verifier.code 0} true;
  $p185.dup := 0;
  $i186 := $load.i64($M.0,$p185);
  $i186.dup := $load.i1($M.0.dup,$p185);
  call {:cexpr "f21"} boogie_si_record_i64($i186);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 456, 18} true;
  assume {:verifier.code 0} true;
  $p187 := $add.ref($p1,$mul.ref(7,8));
  $p187.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 456, 18} true;
  assume {:verifier.code 0} true;
  $p187.dup := 0;
  $i188 := $load.i64($M.0,$p187);
  $i188.dup := $load.i1($M.0.dup,$p187);
  call {:cexpr "f22"} boogie_si_record_i64($i188);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 457, 18} true;
  assume {:verifier.code 0} true;
  $p189 := $add.ref($p1,$mul.ref(8,8));
  $p189.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 457, 18} true;
  assume {:verifier.code 0} true;
  $p189.dup := 0;
  $i190 := $load.i64($M.0,$p189);
  $i190.dup := $load.i1($M.0.dup,$p189);
  call {:cexpr "f23"} boogie_si_record_i64($i190);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 458, 18} true;
  assume {:verifier.code 0} true;
  $p191 := $add.ref($p1,$mul.ref(9,8));
  $p191.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 458, 18} true;
  assume {:verifier.code 0} true;
  $p191.dup := 0;
  $i192 := $load.i64($M.0,$p191);
  $i192.dup := $load.i1($M.0.dup,$p191);
  call {:cexpr "f24"} boogie_si_record_i64($i192);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 459, 31} true;
  assume {:verifier.code 0} true;
  $i193 := $mul.i64(2,$i174);
  $i193.dup := $or.i1(0,$i174.dup);
  call {:cexpr "d00"} boogie_si_record_i64($i193);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 460, 31} true;
  assume {:verifier.code 0} true;
  $i194 := $mul.i64(2,$i176);
  $i194.dup := $or.i1(0,$i176.dup);
  call {:cexpr "d10"} boogie_si_record_i64($i194);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 461, 32} true;
  assume {:verifier.code 0} true;
  $i195 := $mul.i64(38,$i178);
  $i195.dup := $or.i1(0,$i178.dup);
  call {:cexpr "d20"} boogie_si_record_i64($i195);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 462, 32} true;
  assume {:verifier.code 0} true;
  $i196 := $mul.i64(19,$i180);
  $i196.dup := $or.i1(0,$i180.dup);
  call {:cexpr "d30"} boogie_si_record_i64($i196);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 463, 34} true;
  assume {:verifier.code 0} true;
  $i197 := $mul.i64(19,$i182);
  $i197.dup := $or.i1(0,$i182.dup);
  call {:cexpr "d4190"} boogie_si_record_i64($i197);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 464, 31} true;
  assume {:verifier.code 0} true;
  $i198 := $mul.i64(2,$i197);
  $i198.dup := $or.i1(0,$i197.dup);
  call {:cexpr "d40"} boogie_si_record_i64($i198);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  call $p199, $p199.dup := FStar_UInt128_mul_wide($i174, $i174.dup, $i174, $i174.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  $p200 := $bitcast.ref.ref($p3);
  $p200.dup := $p3.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  $p201 := $add.ref($add.ref($p200,$mul.ref(0,16)),$mul.ref(0,1));
  $p201.dup := $or.i1($or.i1($p200.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  $i202 := $extractvalue.i64($p199,0);
  $i202.dup := $or.i1($p199.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  $p201.dup := 0;
  $M.229 := $store.i64($M.229,$p201,$i202);
  $M.229.dup := $store.i1($M.229.dup,$p201,$i202.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  $p203 := $add.ref($add.ref($p200,$mul.ref(0,16)),$mul.ref(8,1));
  $p203.dup := $or.i1($or.i1($p200.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  $i204 := $extractvalue.i64($p199,1);
  $i204.dup := $or.i1($p199.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  $p203.dup := 0;
  $M.229 := $store.i64($M.229,$p203,$i204);
  $M.229.dup := $store.i1($M.229.dup,$p203,$i204.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 41} true;
  assume {:verifier.code 0} true;
  $p3.dup := 0;
  $i205 := $load.i128($M.229,$p3);
  $i205.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  call $p206, $p206.dup := FStar_UInt128_mul_wide($i198, $i198.dup, $i176, $i176.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  $p207 := $bitcast.ref.ref($p4);
  $p207.dup := $p4.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  $p208 := $add.ref($add.ref($p207,$mul.ref(0,16)),$mul.ref(0,1));
  $p208.dup := $or.i1($or.i1($p207.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  $i209 := $extractvalue.i64($p206,0);
  $i209.dup := $or.i1($p206.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  $p208.dup := 0;
  $M.230 := $store.i64($M.230,$p208,$i209);
  $M.230.dup := $store.i1($M.230.dup,$p208,$i209.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  $p210 := $add.ref($add.ref($p207,$mul.ref(0,16)),$mul.ref(8,1));
  $p210.dup := $or.i1($or.i1($p207.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  $i211 := $extractvalue.i64($p206,1);
  $i211.dup := $or.i1($p206.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  $p210.dup := 0;
  $M.230 := $store.i64($M.230,$p210,$i211);
  $M.230.dup := $store.i1($M.230.dup,$p210,$i211.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 468, 9} true;
  assume {:verifier.code 0} true;
  $p4.dup := 0;
  $i212 := $load.i128($M.230,$p4);
  $i212.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p5.dup := 0;
  $M.231 := $store.i128($M.231,$p5,$i205);
  $M.231.dup := $store.i1($M.231.dup,$p5,$i205.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p213 := $bitcast.ref.ref($p5);
  $p213.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p214 := $add.ref($add.ref($p213,$mul.ref(0,16)),$mul.ref(0,1));
  $p214.dup := $or.i1($or.i1($p213.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p214.dup := 0;
  $i215 := $load.i64($M.231,$p214);
  $i215.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p216 := $add.ref($add.ref($p213,$mul.ref(0,16)),$mul.ref(8,1));
  $p216.dup := $or.i1($or.i1($p213.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p216.dup := 0;
  $i217 := $load.i64($M.231,$p216);
  $i217.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p6.dup := 0;
  $M.232 := $store.i128($M.232,$p6,$i212);
  $M.232.dup := $store.i1($M.232.dup,$p6,$i212.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p218 := $bitcast.ref.ref($p6);
  $p218.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p219 := $add.ref($add.ref($p218,$mul.ref(0,16)),$mul.ref(0,1));
  $p219.dup := $or.i1($or.i1($p218.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p219.dup := 0;
  $i220 := $load.i64($M.232,$p219);
  $i220.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p221 := $add.ref($add.ref($p218,$mul.ref(0,16)),$mul.ref(8,1));
  $p221.dup := $or.i1($or.i1($p218.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p221.dup := 0;
  $i222 := $load.i64($M.232,$p221);
  $i222.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  call $p223, $p223.dup := FStar_UInt128_add($i215, $i215.dup, $i217, $i217.dup, $i220, $i220.dup, $i222, $i222.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p224 := $bitcast.ref.ref($p7);
  $p224.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p225 := $add.ref($add.ref($p224,$mul.ref(0,16)),$mul.ref(0,1));
  $p225.dup := $or.i1($or.i1($p224.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $i226 := $extractvalue.i64($p223,0);
  $i226.dup := $or.i1($p223.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p225.dup := 0;
  $M.233 := $store.i64($M.233,$p225,$i226);
  $M.233.dup := $store.i1($M.233.dup,$p225,$i226.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p227 := $add.ref($add.ref($p224,$mul.ref(0,16)),$mul.ref(8,1));
  $p227.dup := $or.i1($or.i1($p224.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $i228 := $extractvalue.i64($p223,1);
  $i228.dup := $or.i1($p223.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p227.dup := 0;
  $M.233 := $store.i64($M.233,$p227,$i228);
  $M.233.dup := $store.i1($M.233.dup,$p227,$i228.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 23} true;
  assume {:verifier.code 0} true;
  $p7.dup := 0;
  $i229 := $load.i128($M.233,$p7);
  $i229.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  call $p230, $p230.dup := FStar_UInt128_mul_wide($i195, $i195.dup, $i180, $i180.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  $p231 := $bitcast.ref.ref($p8);
  $p231.dup := $p8.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  $p232 := $add.ref($add.ref($p231,$mul.ref(0,16)),$mul.ref(0,1));
  $p232.dup := $or.i1($or.i1($p231.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  $i233 := $extractvalue.i64($p230,0);
  $i233.dup := $or.i1($p230.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  $p232.dup := 0;
  $M.234 := $store.i64($M.234,$p232,$i233);
  $M.234.dup := $store.i1($M.234.dup,$p232,$i233.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  $p234 := $add.ref($add.ref($p231,$mul.ref(0,16)),$mul.ref(8,1));
  $p234.dup := $or.i1($or.i1($p231.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  $i235 := $extractvalue.i64($p230,1);
  $i235.dup := $or.i1($p230.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  $p234.dup := 0;
  $M.234 := $store.i64($M.234,$p234,$i235);
  $M.234.dup := $store.i1($M.234.dup,$p234,$i235.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 469, 7} true;
  assume {:verifier.code 0} true;
  $p8.dup := 0;
  $i236 := $load.i128($M.234,$p8);
  $i236.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p9.dup := 0;
  $M.235 := $store.i128($M.235,$p9,$i229);
  $M.235.dup := $store.i1($M.235.dup,$p9,$i229.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p237 := $bitcast.ref.ref($p9);
  $p237.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p238 := $add.ref($add.ref($p237,$mul.ref(0,16)),$mul.ref(0,1));
  $p238.dup := $or.i1($or.i1($p237.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p238.dup := 0;
  $i239 := $load.i64($M.235,$p238);
  $i239.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p240 := $add.ref($add.ref($p237,$mul.ref(0,16)),$mul.ref(8,1));
  $p240.dup := $or.i1($or.i1($p237.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p240.dup := 0;
  $i241 := $load.i64($M.235,$p240);
  $i241.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p10.dup := 0;
  $M.236 := $store.i128($M.236,$p10,$i236);
  $M.236.dup := $store.i1($M.236.dup,$p10,$i236.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p242 := $bitcast.ref.ref($p10);
  $p242.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p243 := $add.ref($add.ref($p242,$mul.ref(0,16)),$mul.ref(0,1));
  $p243.dup := $or.i1($or.i1($p242.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p243.dup := 0;
  $i244 := $load.i64($M.236,$p243);
  $i244.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p245 := $add.ref($add.ref($p242,$mul.ref(0,16)),$mul.ref(8,1));
  $p245.dup := $or.i1($or.i1($p242.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p245.dup := 0;
  $i246 := $load.i64($M.236,$p245);
  $i246.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  call $p247, $p247.dup := FStar_UInt128_add($i239, $i239.dup, $i241, $i241.dup, $i244, $i244.dup, $i246, $i246.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p248 := $bitcast.ref.ref($p11);
  $p248.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p249 := $add.ref($add.ref($p248,$mul.ref(0,16)),$mul.ref(0,1));
  $p249.dup := $or.i1($or.i1($p248.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $i250 := $extractvalue.i64($p247,0);
  $i250.dup := $or.i1($p247.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p249.dup := 0;
  $M.237 := $store.i64($M.237,$p249,$i250);
  $M.237.dup := $store.i1($M.237.dup,$p249,$i250.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p251 := $add.ref($add.ref($p248,$mul.ref(0,16)),$mul.ref(8,1));
  $p251.dup := $or.i1($or.i1($p248.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $i252 := $extractvalue.i64($p247,1);
  $i252.dup := $or.i1($p247.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p251.dup := 0;
  $M.237 := $store.i64($M.237,$p251,$i252);
  $M.237.dup := $store.i1($M.237.dup,$p251,$i252.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 467, 5} true;
  assume {:verifier.code 0} true;
  $p11.dup := 0;
  $i253 := $load.i128($M.237,$p11);
  $i253.dup := 0;
  call {:cexpr "s00"} boogie_si_record_i128($i253);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  call $p254, $p254.dup := FStar_UInt128_mul_wide($i193, $i193.dup, $i176, $i176.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  $p255 := $bitcast.ref.ref($p12);
  $p255.dup := $p12.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  $p256 := $add.ref($add.ref($p255,$mul.ref(0,16)),$mul.ref(0,1));
  $p256.dup := $or.i1($or.i1($p255.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  $i257 := $extractvalue.i64($p254,0);
  $i257.dup := $or.i1($p254.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  $p256.dup := 0;
  $M.238 := $store.i64($M.238,$p256,$i257);
  $M.238.dup := $store.i1($M.238.dup,$p256,$i257.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  $p258 := $add.ref($add.ref($p255,$mul.ref(0,16)),$mul.ref(8,1));
  $p258.dup := $or.i1($or.i1($p255.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  $i259 := $extractvalue.i64($p254,1);
  $i259.dup := $or.i1($p254.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  $p258.dup := 0;
  $M.238 := $store.i64($M.238,$p258,$i259);
  $M.238.dup := $store.i1($M.238.dup,$p258,$i259.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 41} true;
  assume {:verifier.code 0} true;
  $p12.dup := 0;
  $i260 := $load.i128($M.238,$p12);
  $i260.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  call $p261, $p261.dup := FStar_UInt128_mul_wide($i198, $i198.dup, $i178, $i178.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  $p262 := $bitcast.ref.ref($p13);
  $p262.dup := $p13.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  $p263 := $add.ref($add.ref($p262,$mul.ref(0,16)),$mul.ref(0,1));
  $p263.dup := $or.i1($or.i1($p262.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  $i264 := $extractvalue.i64($p261,0);
  $i264.dup := $or.i1($p261.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  $p263.dup := 0;
  $M.239 := $store.i64($M.239,$p263,$i264);
  $M.239.dup := $store.i1($M.239.dup,$p263,$i264.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  $p265 := $add.ref($add.ref($p262,$mul.ref(0,16)),$mul.ref(8,1));
  $p265.dup := $or.i1($or.i1($p262.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  $i266 := $extractvalue.i64($p261,1);
  $i266.dup := $or.i1($p261.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  $p265.dup := 0;
  $M.239 := $store.i64($M.239,$p265,$i266);
  $M.239.dup := $store.i1($M.239.dup,$p265,$i266.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 473, 9} true;
  assume {:verifier.code 0} true;
  $p13.dup := 0;
  $i267 := $load.i128($M.239,$p13);
  $i267.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p14.dup := 0;
  $M.240 := $store.i128($M.240,$p14,$i260);
  $M.240.dup := $store.i1($M.240.dup,$p14,$i260.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p268 := $bitcast.ref.ref($p14);
  $p268.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p269 := $add.ref($add.ref($p268,$mul.ref(0,16)),$mul.ref(0,1));
  $p269.dup := $or.i1($or.i1($p268.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p269.dup := 0;
  $i270 := $load.i64($M.240,$p269);
  $i270.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p271 := $add.ref($add.ref($p268,$mul.ref(0,16)),$mul.ref(8,1));
  $p271.dup := $or.i1($or.i1($p268.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p271.dup := 0;
  $i272 := $load.i64($M.240,$p271);
  $i272.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p15.dup := 0;
  $M.241 := $store.i128($M.241,$p15,$i267);
  $M.241.dup := $store.i1($M.241.dup,$p15,$i267.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p273 := $bitcast.ref.ref($p15);
  $p273.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p274 := $add.ref($add.ref($p273,$mul.ref(0,16)),$mul.ref(0,1));
  $p274.dup := $or.i1($or.i1($p273.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p274.dup := 0;
  $i275 := $load.i64($M.241,$p274);
  $i275.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p276 := $add.ref($add.ref($p273,$mul.ref(0,16)),$mul.ref(8,1));
  $p276.dup := $or.i1($or.i1($p273.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p276.dup := 0;
  $i277 := $load.i64($M.241,$p276);
  $i277.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  call $p278, $p278.dup := FStar_UInt128_add($i270, $i270.dup, $i272, $i272.dup, $i275, $i275.dup, $i277, $i277.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p279 := $bitcast.ref.ref($p16);
  $p279.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p280 := $add.ref($add.ref($p279,$mul.ref(0,16)),$mul.ref(0,1));
  $p280.dup := $or.i1($or.i1($p279.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $i281 := $extractvalue.i64($p278,0);
  $i281.dup := $or.i1($p278.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p280.dup := 0;
  $M.242 := $store.i64($M.242,$p280,$i281);
  $M.242.dup := $store.i1($M.242.dup,$p280,$i281.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p282 := $add.ref($add.ref($p279,$mul.ref(0,16)),$mul.ref(8,1));
  $p282.dup := $or.i1($or.i1($p279.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $i283 := $extractvalue.i64($p278,1);
  $i283.dup := $or.i1($p278.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p282.dup := 0;
  $M.242 := $store.i64($M.242,$p282,$i283);
  $M.242.dup := $store.i1($M.242.dup,$p282,$i283.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 23} true;
  assume {:verifier.code 0} true;
  $p16.dup := 0;
  $i284 := $load.i128($M.242,$p16);
  $i284.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  call $p285, $p285.dup := FStar_UInt128_mul_wide($i196, $i196.dup, $i180, $i180.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  $p286 := $bitcast.ref.ref($p17);
  $p286.dup := $p17.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  $p287 := $add.ref($add.ref($p286,$mul.ref(0,16)),$mul.ref(0,1));
  $p287.dup := $or.i1($or.i1($p286.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  $i288 := $extractvalue.i64($p285,0);
  $i288.dup := $or.i1($p285.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  $p287.dup := 0;
  $M.243 := $store.i64($M.243,$p287,$i288);
  $M.243.dup := $store.i1($M.243.dup,$p287,$i288.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  $p289 := $add.ref($add.ref($p286,$mul.ref(0,16)),$mul.ref(8,1));
  $p289.dup := $or.i1($or.i1($p286.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  $i290 := $extractvalue.i64($p285,1);
  $i290.dup := $or.i1($p285.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  $p289.dup := 0;
  $M.243 := $store.i64($M.243,$p289,$i290);
  $M.243.dup := $store.i1($M.243.dup,$p289,$i290.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 474, 7} true;
  assume {:verifier.code 0} true;
  $p17.dup := 0;
  $i291 := $load.i128($M.243,$p17);
  $i291.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p18.dup := 0;
  $M.244 := $store.i128($M.244,$p18,$i284);
  $M.244.dup := $store.i1($M.244.dup,$p18,$i284.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p292 := $bitcast.ref.ref($p18);
  $p292.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p293 := $add.ref($add.ref($p292,$mul.ref(0,16)),$mul.ref(0,1));
  $p293.dup := $or.i1($or.i1($p292.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p293.dup := 0;
  $i294 := $load.i64($M.244,$p293);
  $i294.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p295 := $add.ref($add.ref($p292,$mul.ref(0,16)),$mul.ref(8,1));
  $p295.dup := $or.i1($or.i1($p292.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p295.dup := 0;
  $i296 := $load.i64($M.244,$p295);
  $i296.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p19.dup := 0;
  $M.245 := $store.i128($M.245,$p19,$i291);
  $M.245.dup := $store.i1($M.245.dup,$p19,$i291.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p297 := $bitcast.ref.ref($p19);
  $p297.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p298 := $add.ref($add.ref($p297,$mul.ref(0,16)),$mul.ref(0,1));
  $p298.dup := $or.i1($or.i1($p297.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p298.dup := 0;
  $i299 := $load.i64($M.245,$p298);
  $i299.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p300 := $add.ref($add.ref($p297,$mul.ref(0,16)),$mul.ref(8,1));
  $p300.dup := $or.i1($or.i1($p297.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p300.dup := 0;
  $i301 := $load.i64($M.245,$p300);
  $i301.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  call $p302, $p302.dup := FStar_UInt128_add($i294, $i294.dup, $i296, $i296.dup, $i299, $i299.dup, $i301, $i301.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p303 := $bitcast.ref.ref($p20);
  $p303.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p304 := $add.ref($add.ref($p303,$mul.ref(0,16)),$mul.ref(0,1));
  $p304.dup := $or.i1($or.i1($p303.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $i305 := $extractvalue.i64($p302,0);
  $i305.dup := $or.i1($p302.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p304.dup := 0;
  $M.246 := $store.i64($M.246,$p304,$i305);
  $M.246.dup := $store.i1($M.246.dup,$p304,$i305.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p306 := $add.ref($add.ref($p303,$mul.ref(0,16)),$mul.ref(8,1));
  $p306.dup := $or.i1($or.i1($p303.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $i307 := $extractvalue.i64($p302,1);
  $i307.dup := $or.i1($p302.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p306.dup := 0;
  $M.246 := $store.i64($M.246,$p306,$i307);
  $M.246.dup := $store.i1($M.246.dup,$p306,$i307.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 472, 5} true;
  assume {:verifier.code 0} true;
  $p20.dup := 0;
  $i308 := $load.i128($M.246,$p20);
  $i308.dup := 0;
  call {:cexpr "s10"} boogie_si_record_i128($i308);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  call $p309, $p309.dup := FStar_UInt128_mul_wide($i193, $i193.dup, $i178, $i178.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  $p310 := $bitcast.ref.ref($p21);
  $p310.dup := $p21.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  $p311 := $add.ref($add.ref($p310,$mul.ref(0,16)),$mul.ref(0,1));
  $p311.dup := $or.i1($or.i1($p310.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  $i312 := $extractvalue.i64($p309,0);
  $i312.dup := $or.i1($p309.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  $p311.dup := 0;
  $M.247 := $store.i64($M.247,$p311,$i312);
  $M.247.dup := $store.i1($M.247.dup,$p311,$i312.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  $p313 := $add.ref($add.ref($p310,$mul.ref(0,16)),$mul.ref(8,1));
  $p313.dup := $or.i1($or.i1($p310.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  $i314 := $extractvalue.i64($p309,1);
  $i314.dup := $or.i1($p309.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  $p313.dup := 0;
  $M.247 := $store.i64($M.247,$p313,$i314);
  $M.247.dup := $store.i1($M.247.dup,$p313,$i314.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 41} true;
  assume {:verifier.code 0} true;
  $p21.dup := 0;
  $i315 := $load.i128($M.247,$p21);
  $i315.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  call $p316, $p316.dup := FStar_UInt128_mul_wide($i176, $i176.dup, $i176, $i176.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  $p317 := $bitcast.ref.ref($p22);
  $p317.dup := $p22.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  $p318 := $add.ref($add.ref($p317,$mul.ref(0,16)),$mul.ref(0,1));
  $p318.dup := $or.i1($or.i1($p317.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  $i319 := $extractvalue.i64($p316,0);
  $i319.dup := $or.i1($p316.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  $p318.dup := 0;
  $M.248 := $store.i64($M.248,$p318,$i319);
  $M.248.dup := $store.i1($M.248.dup,$p318,$i319.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  $p320 := $add.ref($add.ref($p317,$mul.ref(0,16)),$mul.ref(8,1));
  $p320.dup := $or.i1($or.i1($p317.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  $i321 := $extractvalue.i64($p316,1);
  $i321.dup := $or.i1($p316.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  $p320.dup := 0;
  $M.248 := $store.i64($M.248,$p320,$i321);
  $M.248.dup := $store.i1($M.248.dup,$p320,$i321.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 478, 9} true;
  assume {:verifier.code 0} true;
  $p22.dup := 0;
  $i322 := $load.i128($M.248,$p22);
  $i322.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p23.dup := 0;
  $M.249 := $store.i128($M.249,$p23,$i315);
  $M.249.dup := $store.i1($M.249.dup,$p23,$i315.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p323 := $bitcast.ref.ref($p23);
  $p323.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p324 := $add.ref($add.ref($p323,$mul.ref(0,16)),$mul.ref(0,1));
  $p324.dup := $or.i1($or.i1($p323.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p324.dup := 0;
  $i325 := $load.i64($M.249,$p324);
  $i325.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p326 := $add.ref($add.ref($p323,$mul.ref(0,16)),$mul.ref(8,1));
  $p326.dup := $or.i1($or.i1($p323.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p326.dup := 0;
  $i327 := $load.i64($M.249,$p326);
  $i327.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p24.dup := 0;
  $M.250 := $store.i128($M.250,$p24,$i322);
  $M.250.dup := $store.i1($M.250.dup,$p24,$i322.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p328 := $bitcast.ref.ref($p24);
  $p328.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p329 := $add.ref($add.ref($p328,$mul.ref(0,16)),$mul.ref(0,1));
  $p329.dup := $or.i1($or.i1($p328.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p329.dup := 0;
  $i330 := $load.i64($M.250,$p329);
  $i330.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p331 := $add.ref($add.ref($p328,$mul.ref(0,16)),$mul.ref(8,1));
  $p331.dup := $or.i1($or.i1($p328.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p331.dup := 0;
  $i332 := $load.i64($M.250,$p331);
  $i332.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  call $p333, $p333.dup := FStar_UInt128_add($i325, $i325.dup, $i327, $i327.dup, $i330, $i330.dup, $i332, $i332.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p334 := $bitcast.ref.ref($p25);
  $p334.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p335 := $add.ref($add.ref($p334,$mul.ref(0,16)),$mul.ref(0,1));
  $p335.dup := $or.i1($or.i1($p334.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $i336 := $extractvalue.i64($p333,0);
  $i336.dup := $or.i1($p333.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p335.dup := 0;
  $M.251 := $store.i64($M.251,$p335,$i336);
  $M.251.dup := $store.i1($M.251.dup,$p335,$i336.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p337 := $add.ref($add.ref($p334,$mul.ref(0,16)),$mul.ref(8,1));
  $p337.dup := $or.i1($or.i1($p334.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $i338 := $extractvalue.i64($p333,1);
  $i338.dup := $or.i1($p333.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p337.dup := 0;
  $M.251 := $store.i64($M.251,$p337,$i338);
  $M.251.dup := $store.i1($M.251.dup,$p337,$i338.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 23} true;
  assume {:verifier.code 0} true;
  $p25.dup := 0;
  $i339 := $load.i128($M.251,$p25);
  $i339.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  call $p340, $p340.dup := FStar_UInt128_mul_wide($i198, $i198.dup, $i180, $i180.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  $p341 := $bitcast.ref.ref($p26);
  $p341.dup := $p26.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  $p342 := $add.ref($add.ref($p341,$mul.ref(0,16)),$mul.ref(0,1));
  $p342.dup := $or.i1($or.i1($p341.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  $i343 := $extractvalue.i64($p340,0);
  $i343.dup := $or.i1($p340.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  $p342.dup := 0;
  $M.252 := $store.i64($M.252,$p342,$i343);
  $M.252.dup := $store.i1($M.252.dup,$p342,$i343.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  $p344 := $add.ref($add.ref($p341,$mul.ref(0,16)),$mul.ref(8,1));
  $p344.dup := $or.i1($or.i1($p341.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  $i345 := $extractvalue.i64($p340,1);
  $i345.dup := $or.i1($p340.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  $p344.dup := 0;
  $M.252 := $store.i64($M.252,$p344,$i345);
  $M.252.dup := $store.i1($M.252.dup,$p344,$i345.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 479, 7} true;
  assume {:verifier.code 0} true;
  $p26.dup := 0;
  $i346 := $load.i128($M.252,$p26);
  $i346.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p27.dup := 0;
  $M.253 := $store.i128($M.253,$p27,$i339);
  $M.253.dup := $store.i1($M.253.dup,$p27,$i339.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p347 := $bitcast.ref.ref($p27);
  $p347.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p348 := $add.ref($add.ref($p347,$mul.ref(0,16)),$mul.ref(0,1));
  $p348.dup := $or.i1($or.i1($p347.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p348.dup := 0;
  $i349 := $load.i64($M.253,$p348);
  $i349.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p350 := $add.ref($add.ref($p347,$mul.ref(0,16)),$mul.ref(8,1));
  $p350.dup := $or.i1($or.i1($p347.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p350.dup := 0;
  $i351 := $load.i64($M.253,$p350);
  $i351.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p28.dup := 0;
  $M.254 := $store.i128($M.254,$p28,$i346);
  $M.254.dup := $store.i1($M.254.dup,$p28,$i346.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p352 := $bitcast.ref.ref($p28);
  $p352.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p353 := $add.ref($add.ref($p352,$mul.ref(0,16)),$mul.ref(0,1));
  $p353.dup := $or.i1($or.i1($p352.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p353.dup := 0;
  $i354 := $load.i64($M.254,$p353);
  $i354.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p355 := $add.ref($add.ref($p352,$mul.ref(0,16)),$mul.ref(8,1));
  $p355.dup := $or.i1($or.i1($p352.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p355.dup := 0;
  $i356 := $load.i64($M.254,$p355);
  $i356.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  call $p357, $p357.dup := FStar_UInt128_add($i349, $i349.dup, $i351, $i351.dup, $i354, $i354.dup, $i356, $i356.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p358 := $bitcast.ref.ref($p29);
  $p358.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p359 := $add.ref($add.ref($p358,$mul.ref(0,16)),$mul.ref(0,1));
  $p359.dup := $or.i1($or.i1($p358.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $i360 := $extractvalue.i64($p357,0);
  $i360.dup := $or.i1($p357.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p359.dup := 0;
  $M.255 := $store.i64($M.255,$p359,$i360);
  $M.255.dup := $store.i1($M.255.dup,$p359,$i360.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p361 := $add.ref($add.ref($p358,$mul.ref(0,16)),$mul.ref(8,1));
  $p361.dup := $or.i1($or.i1($p358.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $i362 := $extractvalue.i64($p357,1);
  $i362.dup := $or.i1($p357.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p361.dup := 0;
  $M.255 := $store.i64($M.255,$p361,$i362);
  $M.255.dup := $store.i1($M.255.dup,$p361,$i362.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 477, 5} true;
  assume {:verifier.code 0} true;
  $p29.dup := 0;
  $i363 := $load.i128($M.255,$p29);
  $i363.dup := 0;
  call {:cexpr "s20"} boogie_si_record_i128($i363);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  call $p364, $p364.dup := FStar_UInt128_mul_wide($i193, $i193.dup, $i180, $i180.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  $p365 := $bitcast.ref.ref($p30);
  $p365.dup := $p30.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  $p366 := $add.ref($add.ref($p365,$mul.ref(0,16)),$mul.ref(0,1));
  $p366.dup := $or.i1($or.i1($p365.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  $i367 := $extractvalue.i64($p364,0);
  $i367.dup := $or.i1($p364.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  $p366.dup := 0;
  $M.256 := $store.i64($M.256,$p366,$i367);
  $M.256.dup := $store.i1($M.256.dup,$p366,$i367.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  $p368 := $add.ref($add.ref($p365,$mul.ref(0,16)),$mul.ref(8,1));
  $p368.dup := $or.i1($or.i1($p365.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  $i369 := $extractvalue.i64($p364,1);
  $i369.dup := $or.i1($p364.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  $p368.dup := 0;
  $M.256 := $store.i64($M.256,$p368,$i369);
  $M.256.dup := $store.i1($M.256.dup,$p368,$i369.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 41} true;
  assume {:verifier.code 0} true;
  $p30.dup := 0;
  $i370 := $load.i128($M.256,$p30);
  $i370.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  call $p371, $p371.dup := FStar_UInt128_mul_wide($i194, $i194.dup, $i178, $i178.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  $p372 := $bitcast.ref.ref($p31);
  $p372.dup := $p31.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  $p373 := $add.ref($add.ref($p372,$mul.ref(0,16)),$mul.ref(0,1));
  $p373.dup := $or.i1($or.i1($p372.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  $i374 := $extractvalue.i64($p371,0);
  $i374.dup := $or.i1($p371.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  $p373.dup := 0;
  $M.257 := $store.i64($M.257,$p373,$i374);
  $M.257.dup := $store.i1($M.257.dup,$p373,$i374.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  $p375 := $add.ref($add.ref($p372,$mul.ref(0,16)),$mul.ref(8,1));
  $p375.dup := $or.i1($or.i1($p372.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  $i376 := $extractvalue.i64($p371,1);
  $i376.dup := $or.i1($p371.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  $p375.dup := 0;
  $M.257 := $store.i64($M.257,$p375,$i376);
  $M.257.dup := $store.i1($M.257.dup,$p375,$i376.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 483, 9} true;
  assume {:verifier.code 0} true;
  $p31.dup := 0;
  $i377 := $load.i128($M.257,$p31);
  $i377.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p32.dup := 0;
  $M.258 := $store.i128($M.258,$p32,$i370);
  $M.258.dup := $store.i1($M.258.dup,$p32,$i370.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p378 := $bitcast.ref.ref($p32);
  $p378.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p379 := $add.ref($add.ref($p378,$mul.ref(0,16)),$mul.ref(0,1));
  $p379.dup := $or.i1($or.i1($p378.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p379.dup := 0;
  $i380 := $load.i64($M.258,$p379);
  $i380.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p381 := $add.ref($add.ref($p378,$mul.ref(0,16)),$mul.ref(8,1));
  $p381.dup := $or.i1($or.i1($p378.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p381.dup := 0;
  $i382 := $load.i64($M.258,$p381);
  $i382.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p33.dup := 0;
  $M.259 := $store.i128($M.259,$p33,$i377);
  $M.259.dup := $store.i1($M.259.dup,$p33,$i377.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p383 := $bitcast.ref.ref($p33);
  $p383.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p384 := $add.ref($add.ref($p383,$mul.ref(0,16)),$mul.ref(0,1));
  $p384.dup := $or.i1($or.i1($p383.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p384.dup := 0;
  $i385 := $load.i64($M.259,$p384);
  $i385.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p386 := $add.ref($add.ref($p383,$mul.ref(0,16)),$mul.ref(8,1));
  $p386.dup := $or.i1($or.i1($p383.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p386.dup := 0;
  $i387 := $load.i64($M.259,$p386);
  $i387.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  call $p388, $p388.dup := FStar_UInt128_add($i380, $i380.dup, $i382, $i382.dup, $i385, $i385.dup, $i387, $i387.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p389 := $bitcast.ref.ref($p34);
  $p389.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p390 := $add.ref($add.ref($p389,$mul.ref(0,16)),$mul.ref(0,1));
  $p390.dup := $or.i1($or.i1($p389.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $i391 := $extractvalue.i64($p388,0);
  $i391.dup := $or.i1($p388.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p390.dup := 0;
  $M.260 := $store.i64($M.260,$p390,$i391);
  $M.260.dup := $store.i1($M.260.dup,$p390,$i391.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p392 := $add.ref($add.ref($p389,$mul.ref(0,16)),$mul.ref(8,1));
  $p392.dup := $or.i1($or.i1($p389.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $i393 := $extractvalue.i64($p388,1);
  $i393.dup := $or.i1($p388.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p392.dup := 0;
  $M.260 := $store.i64($M.260,$p392,$i393);
  $M.260.dup := $store.i1($M.260.dup,$p392,$i393.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 23} true;
  assume {:verifier.code 0} true;
  $p34.dup := 0;
  $i394 := $load.i128($M.260,$p34);
  $i394.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  call $p395, $p395.dup := FStar_UInt128_mul_wide($i182, $i182.dup, $i197, $i197.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  $p396 := $bitcast.ref.ref($p35);
  $p396.dup := $p35.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  $p397 := $add.ref($add.ref($p396,$mul.ref(0,16)),$mul.ref(0,1));
  $p397.dup := $or.i1($or.i1($p396.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  $i398 := $extractvalue.i64($p395,0);
  $i398.dup := $or.i1($p395.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  $p397.dup := 0;
  $M.261 := $store.i64($M.261,$p397,$i398);
  $M.261.dup := $store.i1($M.261.dup,$p397,$i398.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  $p399 := $add.ref($add.ref($p396,$mul.ref(0,16)),$mul.ref(8,1));
  $p399.dup := $or.i1($or.i1($p396.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  $i400 := $extractvalue.i64($p395,1);
  $i400.dup := $or.i1($p395.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  $p399.dup := 0;
  $M.261 := $store.i64($M.261,$p399,$i400);
  $M.261.dup := $store.i1($M.261.dup,$p399,$i400.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 484, 7} true;
  assume {:verifier.code 0} true;
  $p35.dup := 0;
  $i401 := $load.i128($M.261,$p35);
  $i401.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p36.dup := 0;
  $M.262 := $store.i128($M.262,$p36,$i394);
  $M.262.dup := $store.i1($M.262.dup,$p36,$i394.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p402 := $bitcast.ref.ref($p36);
  $p402.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p403 := $add.ref($add.ref($p402,$mul.ref(0,16)),$mul.ref(0,1));
  $p403.dup := $or.i1($or.i1($p402.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p403.dup := 0;
  $i404 := $load.i64($M.262,$p403);
  $i404.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p405 := $add.ref($add.ref($p402,$mul.ref(0,16)),$mul.ref(8,1));
  $p405.dup := $or.i1($or.i1($p402.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p405.dup := 0;
  $i406 := $load.i64($M.262,$p405);
  $i406.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p37.dup := 0;
  $M.263 := $store.i128($M.263,$p37,$i401);
  $M.263.dup := $store.i1($M.263.dup,$p37,$i401.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p407 := $bitcast.ref.ref($p37);
  $p407.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p408 := $add.ref($add.ref($p407,$mul.ref(0,16)),$mul.ref(0,1));
  $p408.dup := $or.i1($or.i1($p407.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p408.dup := 0;
  $i409 := $load.i64($M.263,$p408);
  $i409.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p410 := $add.ref($add.ref($p407,$mul.ref(0,16)),$mul.ref(8,1));
  $p410.dup := $or.i1($or.i1($p407.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p410.dup := 0;
  $i411 := $load.i64($M.263,$p410);
  $i411.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  call $p412, $p412.dup := FStar_UInt128_add($i404, $i404.dup, $i406, $i406.dup, $i409, $i409.dup, $i411, $i411.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p413 := $bitcast.ref.ref($p38);
  $p413.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p414 := $add.ref($add.ref($p413,$mul.ref(0,16)),$mul.ref(0,1));
  $p414.dup := $or.i1($or.i1($p413.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $i415 := $extractvalue.i64($p412,0);
  $i415.dup := $or.i1($p412.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p414.dup := 0;
  $M.264 := $store.i64($M.264,$p414,$i415);
  $M.264.dup := $store.i1($M.264.dup,$p414,$i415.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p416 := $add.ref($add.ref($p413,$mul.ref(0,16)),$mul.ref(8,1));
  $p416.dup := $or.i1($or.i1($p413.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $i417 := $extractvalue.i64($p412,1);
  $i417.dup := $or.i1($p412.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p416.dup := 0;
  $M.264 := $store.i64($M.264,$p416,$i417);
  $M.264.dup := $store.i1($M.264.dup,$p416,$i417.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 482, 5} true;
  assume {:verifier.code 0} true;
  $p38.dup := 0;
  $i418 := $load.i128($M.264,$p38);
  $i418.dup := 0;
  call {:cexpr "s30"} boogie_si_record_i128($i418);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  call $p419, $p419.dup := FStar_UInt128_mul_wide($i193, $i193.dup, $i182, $i182.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  $p420 := $bitcast.ref.ref($p39);
  $p420.dup := $p39.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  $p421 := $add.ref($add.ref($p420,$mul.ref(0,16)),$mul.ref(0,1));
  $p421.dup := $or.i1($or.i1($p420.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  $i422 := $extractvalue.i64($p419,0);
  $i422.dup := $or.i1($p419.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  $p421.dup := 0;
  $M.265 := $store.i64($M.265,$p421,$i422);
  $M.265.dup := $store.i1($M.265.dup,$p421,$i422.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  $p423 := $add.ref($add.ref($p420,$mul.ref(0,16)),$mul.ref(8,1));
  $p423.dup := $or.i1($or.i1($p420.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  $i424 := $extractvalue.i64($p419,1);
  $i424.dup := $or.i1($p419.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  $p423.dup := 0;
  $M.265 := $store.i64($M.265,$p423,$i424);
  $M.265.dup := $store.i1($M.265.dup,$p423,$i424.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 41} true;
  assume {:verifier.code 0} true;
  $p39.dup := 0;
  $i425 := $load.i128($M.265,$p39);
  $i425.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  call $p426, $p426.dup := FStar_UInt128_mul_wide($i194, $i194.dup, $i180, $i180.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  $p427 := $bitcast.ref.ref($p40);
  $p427.dup := $p40.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  $p428 := $add.ref($add.ref($p427,$mul.ref(0,16)),$mul.ref(0,1));
  $p428.dup := $or.i1($or.i1($p427.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  $i429 := $extractvalue.i64($p426,0);
  $i429.dup := $or.i1($p426.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  $p428.dup := 0;
  $M.266 := $store.i64($M.266,$p428,$i429);
  $M.266.dup := $store.i1($M.266.dup,$p428,$i429.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  $p430 := $add.ref($add.ref($p427,$mul.ref(0,16)),$mul.ref(8,1));
  $p430.dup := $or.i1($or.i1($p427.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  $i431 := $extractvalue.i64($p426,1);
  $i431.dup := $or.i1($p426.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  $p430.dup := 0;
  $M.266 := $store.i64($M.266,$p430,$i431);
  $M.266.dup := $store.i1($M.266.dup,$p430,$i431.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 488, 9} true;
  assume {:verifier.code 0} true;
  $p40.dup := 0;
  $i432 := $load.i128($M.266,$p40);
  $i432.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p41.dup := 0;
  $M.267 := $store.i128($M.267,$p41,$i425);
  $M.267.dup := $store.i1($M.267.dup,$p41,$i425.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p433 := $bitcast.ref.ref($p41);
  $p433.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p434 := $add.ref($add.ref($p433,$mul.ref(0,16)),$mul.ref(0,1));
  $p434.dup := $or.i1($or.i1($p433.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p434.dup := 0;
  $i435 := $load.i64($M.267,$p434);
  $i435.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p436 := $add.ref($add.ref($p433,$mul.ref(0,16)),$mul.ref(8,1));
  $p436.dup := $or.i1($or.i1($p433.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p436.dup := 0;
  $i437 := $load.i64($M.267,$p436);
  $i437.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p42.dup := 0;
  $M.268 := $store.i128($M.268,$p42,$i432);
  $M.268.dup := $store.i1($M.268.dup,$p42,$i432.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p438 := $bitcast.ref.ref($p42);
  $p438.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p439 := $add.ref($add.ref($p438,$mul.ref(0,16)),$mul.ref(0,1));
  $p439.dup := $or.i1($or.i1($p438.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p439.dup := 0;
  $i440 := $load.i64($M.268,$p439);
  $i440.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p441 := $add.ref($add.ref($p438,$mul.ref(0,16)),$mul.ref(8,1));
  $p441.dup := $or.i1($or.i1($p438.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p441.dup := 0;
  $i442 := $load.i64($M.268,$p441);
  $i442.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  call $p443, $p443.dup := FStar_UInt128_add($i435, $i435.dup, $i437, $i437.dup, $i440, $i440.dup, $i442, $i442.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p444 := $bitcast.ref.ref($p43);
  $p444.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p445 := $add.ref($add.ref($p444,$mul.ref(0,16)),$mul.ref(0,1));
  $p445.dup := $or.i1($or.i1($p444.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $i446 := $extractvalue.i64($p443,0);
  $i446.dup := $or.i1($p443.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p445.dup := 0;
  $M.269 := $store.i64($M.269,$p445,$i446);
  $M.269.dup := $store.i1($M.269.dup,$p445,$i446.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p447 := $add.ref($add.ref($p444,$mul.ref(0,16)),$mul.ref(8,1));
  $p447.dup := $or.i1($or.i1($p444.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $i448 := $extractvalue.i64($p443,1);
  $i448.dup := $or.i1($p443.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p447.dup := 0;
  $M.269 := $store.i64($M.269,$p447,$i448);
  $M.269.dup := $store.i1($M.269.dup,$p447,$i448.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 23} true;
  assume {:verifier.code 0} true;
  $p43.dup := 0;
  $i449 := $load.i128($M.269,$p43);
  $i449.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  call $p450, $p450.dup := FStar_UInt128_mul_wide($i178, $i178.dup, $i178, $i178.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  $p451 := $bitcast.ref.ref($p44);
  $p451.dup := $p44.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  $p452 := $add.ref($add.ref($p451,$mul.ref(0,16)),$mul.ref(0,1));
  $p452.dup := $or.i1($or.i1($p451.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  $i453 := $extractvalue.i64($p450,0);
  $i453.dup := $or.i1($p450.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  $p452.dup := 0;
  $M.270 := $store.i64($M.270,$p452,$i453);
  $M.270.dup := $store.i1($M.270.dup,$p452,$i453.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  $p454 := $add.ref($add.ref($p451,$mul.ref(0,16)),$mul.ref(8,1));
  $p454.dup := $or.i1($or.i1($p451.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  $i455 := $extractvalue.i64($p450,1);
  $i455.dup := $or.i1($p450.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  $p454.dup := 0;
  $M.270 := $store.i64($M.270,$p454,$i455);
  $M.270.dup := $store.i1($M.270.dup,$p454,$i455.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 489, 7} true;
  assume {:verifier.code 0} true;
  $p44.dup := 0;
  $i456 := $load.i128($M.270,$p44);
  $i456.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p45.dup := 0;
  $M.271 := $store.i128($M.271,$p45,$i449);
  $M.271.dup := $store.i1($M.271.dup,$p45,$i449.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p457 := $bitcast.ref.ref($p45);
  $p457.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p458 := $add.ref($add.ref($p457,$mul.ref(0,16)),$mul.ref(0,1));
  $p458.dup := $or.i1($or.i1($p457.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p458.dup := 0;
  $i459 := $load.i64($M.271,$p458);
  $i459.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p460 := $add.ref($add.ref($p457,$mul.ref(0,16)),$mul.ref(8,1));
  $p460.dup := $or.i1($or.i1($p457.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p460.dup := 0;
  $i461 := $load.i64($M.271,$p460);
  $i461.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p46.dup := 0;
  $M.272 := $store.i128($M.272,$p46,$i456);
  $M.272.dup := $store.i1($M.272.dup,$p46,$i456.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p462 := $bitcast.ref.ref($p46);
  $p462.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p463 := $add.ref($add.ref($p462,$mul.ref(0,16)),$mul.ref(0,1));
  $p463.dup := $or.i1($or.i1($p462.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p463.dup := 0;
  $i464 := $load.i64($M.272,$p463);
  $i464.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p465 := $add.ref($add.ref($p462,$mul.ref(0,16)),$mul.ref(8,1));
  $p465.dup := $or.i1($or.i1($p462.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p465.dup := 0;
  $i466 := $load.i64($M.272,$p465);
  $i466.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  call $p467, $p467.dup := FStar_UInt128_add($i459, $i459.dup, $i461, $i461.dup, $i464, $i464.dup, $i466, $i466.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p468 := $bitcast.ref.ref($p47);
  $p468.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p469 := $add.ref($add.ref($p468,$mul.ref(0,16)),$mul.ref(0,1));
  $p469.dup := $or.i1($or.i1($p468.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $i470 := $extractvalue.i64($p467,0);
  $i470.dup := $or.i1($p467.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p469.dup := 0;
  $M.273 := $store.i64($M.273,$p469,$i470);
  $M.273.dup := $store.i1($M.273.dup,$p469,$i470.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p471 := $add.ref($add.ref($p468,$mul.ref(0,16)),$mul.ref(8,1));
  $p471.dup := $or.i1($or.i1($p468.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $i472 := $extractvalue.i64($p467,1);
  $i472.dup := $or.i1($p467.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p471.dup := 0;
  $M.273 := $store.i64($M.273,$p471,$i472);
  $M.273.dup := $store.i1($M.273.dup,$p471,$i472.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 487, 5} true;
  assume {:verifier.code 0} true;
  $p47.dup := 0;
  $i473 := $load.i128($M.273,$p47);
  $i473.dup := 0;
  call {:cexpr "s40"} boogie_si_record_i128($i473);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 495, 30} true;
  assume {:verifier.code 0} true;
  $i474 := $mul.i64(2,$i184);
  $i474.dup := $or.i1(0,$i184.dup);
  call {:cexpr "d0"} boogie_si_record_i64($i474);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 496, 30} true;
  assume {:verifier.code 0} true;
  $i475 := $mul.i64(2,$i186);
  $i475.dup := $or.i1(0,$i186.dup);
  call {:cexpr "d1"} boogie_si_record_i64($i475);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 497, 31} true;
  assume {:verifier.code 0} true;
  $i476 := $mul.i64(38,$i188);
  $i476.dup := $or.i1(0,$i188.dup);
  call {:cexpr "d2"} boogie_si_record_i64($i476);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 498, 31} true;
  assume {:verifier.code 0} true;
  $i477 := $mul.i64(19,$i190);
  $i477.dup := $or.i1(0,$i190.dup);
  call {:cexpr "d3"} boogie_si_record_i64($i477);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 499, 33} true;
  assume {:verifier.code 0} true;
  $i478 := $mul.i64(19,$i192);
  $i478.dup := $or.i1(0,$i192.dup);
  call {:cexpr "d419"} boogie_si_record_i64($i478);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 500, 30} true;
  assume {:verifier.code 0} true;
  $i479 := $mul.i64(2,$i478);
  $i479.dup := $or.i1(0,$i478.dup);
  call {:cexpr "d4"} boogie_si_record_i64($i479);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  call $p480, $p480.dup := FStar_UInt128_mul_wide($i184, $i184.dup, $i184, $i184.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  $p481 := $bitcast.ref.ref($p48);
  $p481.dup := $p48.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  $p482 := $add.ref($add.ref($p481,$mul.ref(0,16)),$mul.ref(0,1));
  $p482.dup := $or.i1($or.i1($p481.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  $i483 := $extractvalue.i64($p480,0);
  $i483.dup := $or.i1($p480.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  $p482.dup := 0;
  $M.274 := $store.i64($M.274,$p482,$i483);
  $M.274.dup := $store.i1($M.274.dup,$p482,$i483.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  $p484 := $add.ref($add.ref($p481,$mul.ref(0,16)),$mul.ref(8,1));
  $p484.dup := $or.i1($or.i1($p481.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  $i485 := $extractvalue.i64($p480,1);
  $i485.dup := $or.i1($p480.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  $p484.dup := 0;
  $M.274 := $store.i64($M.274,$p484,$i485);
  $M.274.dup := $store.i1($M.274.dup,$p484,$i485.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 41} true;
  assume {:verifier.code 0} true;
  $p48.dup := 0;
  $i486 := $load.i128($M.274,$p48);
  $i486.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  call $p487, $p487.dup := FStar_UInt128_mul_wide($i479, $i479.dup, $i186, $i186.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  $p488 := $bitcast.ref.ref($p49);
  $p488.dup := $p49.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  $p489 := $add.ref($add.ref($p488,$mul.ref(0,16)),$mul.ref(0,1));
  $p489.dup := $or.i1($or.i1($p488.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  $i490 := $extractvalue.i64($p487,0);
  $i490.dup := $or.i1($p487.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  $p489.dup := 0;
  $M.275 := $store.i64($M.275,$p489,$i490);
  $M.275.dup := $store.i1($M.275.dup,$p489,$i490.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  $p491 := $add.ref($add.ref($p488,$mul.ref(0,16)),$mul.ref(8,1));
  $p491.dup := $or.i1($or.i1($p488.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  $i492 := $extractvalue.i64($p487,1);
  $i492.dup := $or.i1($p487.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  $p491.dup := 0;
  $M.275 := $store.i64($M.275,$p491,$i492);
  $M.275.dup := $store.i1($M.275.dup,$p491,$i492.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 504, 9} true;
  assume {:verifier.code 0} true;
  $p49.dup := 0;
  $i493 := $load.i128($M.275,$p49);
  $i493.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p50.dup := 0;
  $M.276 := $store.i128($M.276,$p50,$i486);
  $M.276.dup := $store.i1($M.276.dup,$p50,$i486.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p494 := $bitcast.ref.ref($p50);
  $p494.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p495 := $add.ref($add.ref($p494,$mul.ref(0,16)),$mul.ref(0,1));
  $p495.dup := $or.i1($or.i1($p494.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p495.dup := 0;
  $i496 := $load.i64($M.276,$p495);
  $i496.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p497 := $add.ref($add.ref($p494,$mul.ref(0,16)),$mul.ref(8,1));
  $p497.dup := $or.i1($or.i1($p494.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p497.dup := 0;
  $i498 := $load.i64($M.276,$p497);
  $i498.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p51.dup := 0;
  $M.277 := $store.i128($M.277,$p51,$i493);
  $M.277.dup := $store.i1($M.277.dup,$p51,$i493.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p499 := $bitcast.ref.ref($p51);
  $p499.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p500 := $add.ref($add.ref($p499,$mul.ref(0,16)),$mul.ref(0,1));
  $p500.dup := $or.i1($or.i1($p499.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p500.dup := 0;
  $i501 := $load.i64($M.277,$p500);
  $i501.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p502 := $add.ref($add.ref($p499,$mul.ref(0,16)),$mul.ref(8,1));
  $p502.dup := $or.i1($or.i1($p499.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p502.dup := 0;
  $i503 := $load.i64($M.277,$p502);
  $i503.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  call $p504, $p504.dup := FStar_UInt128_add($i496, $i496.dup, $i498, $i498.dup, $i501, $i501.dup, $i503, $i503.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p505 := $bitcast.ref.ref($p52);
  $p505.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p506 := $add.ref($add.ref($p505,$mul.ref(0,16)),$mul.ref(0,1));
  $p506.dup := $or.i1($or.i1($p505.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $i507 := $extractvalue.i64($p504,0);
  $i507.dup := $or.i1($p504.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p506.dup := 0;
  $M.278 := $store.i64($M.278,$p506,$i507);
  $M.278.dup := $store.i1($M.278.dup,$p506,$i507.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p508 := $add.ref($add.ref($p505,$mul.ref(0,16)),$mul.ref(8,1));
  $p508.dup := $or.i1($or.i1($p505.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $i509 := $extractvalue.i64($p504,1);
  $i509.dup := $or.i1($p504.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p508.dup := 0;
  $M.278 := $store.i64($M.278,$p508,$i509);
  $M.278.dup := $store.i1($M.278.dup,$p508,$i509.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 23} true;
  assume {:verifier.code 0} true;
  $p52.dup := 0;
  $i510 := $load.i128($M.278,$p52);
  $i510.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  call $p511, $p511.dup := FStar_UInt128_mul_wide($i476, $i476.dup, $i190, $i190.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  $p512 := $bitcast.ref.ref($p53);
  $p512.dup := $p53.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  $p513 := $add.ref($add.ref($p512,$mul.ref(0,16)),$mul.ref(0,1));
  $p513.dup := $or.i1($or.i1($p512.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  $i514 := $extractvalue.i64($p511,0);
  $i514.dup := $or.i1($p511.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  $p513.dup := 0;
  $M.279 := $store.i64($M.279,$p513,$i514);
  $M.279.dup := $store.i1($M.279.dup,$p513,$i514.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  $p515 := $add.ref($add.ref($p512,$mul.ref(0,16)),$mul.ref(8,1));
  $p515.dup := $or.i1($or.i1($p512.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  $i516 := $extractvalue.i64($p511,1);
  $i516.dup := $or.i1($p511.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  $p515.dup := 0;
  $M.279 := $store.i64($M.279,$p515,$i516);
  $M.279.dup := $store.i1($M.279.dup,$p515,$i516.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 505, 7} true;
  assume {:verifier.code 0} true;
  $p53.dup := 0;
  $i517 := $load.i128($M.279,$p53);
  $i517.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p54.dup := 0;
  $M.280 := $store.i128($M.280,$p54,$i510);
  $M.280.dup := $store.i1($M.280.dup,$p54,$i510.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p518 := $bitcast.ref.ref($p54);
  $p518.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p519 := $add.ref($add.ref($p518,$mul.ref(0,16)),$mul.ref(0,1));
  $p519.dup := $or.i1($or.i1($p518.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p519.dup := 0;
  $i520 := $load.i64($M.280,$p519);
  $i520.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p521 := $add.ref($add.ref($p518,$mul.ref(0,16)),$mul.ref(8,1));
  $p521.dup := $or.i1($or.i1($p518.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p521.dup := 0;
  $i522 := $load.i64($M.280,$p521);
  $i522.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p55.dup := 0;
  $M.281 := $store.i128($M.281,$p55,$i517);
  $M.281.dup := $store.i1($M.281.dup,$p55,$i517.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p523 := $bitcast.ref.ref($p55);
  $p523.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p524 := $add.ref($add.ref($p523,$mul.ref(0,16)),$mul.ref(0,1));
  $p524.dup := $or.i1($or.i1($p523.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p524.dup := 0;
  $i525 := $load.i64($M.281,$p524);
  $i525.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p526 := $add.ref($add.ref($p523,$mul.ref(0,16)),$mul.ref(8,1));
  $p526.dup := $or.i1($or.i1($p523.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p526.dup := 0;
  $i527 := $load.i64($M.281,$p526);
  $i527.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  call $p528, $p528.dup := FStar_UInt128_add($i520, $i520.dup, $i522, $i522.dup, $i525, $i525.dup, $i527, $i527.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p529 := $bitcast.ref.ref($p56);
  $p529.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p530 := $add.ref($add.ref($p529,$mul.ref(0,16)),$mul.ref(0,1));
  $p530.dup := $or.i1($or.i1($p529.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $i531 := $extractvalue.i64($p528,0);
  $i531.dup := $or.i1($p528.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p530.dup := 0;
  $M.282 := $store.i64($M.282,$p530,$i531);
  $M.282.dup := $store.i1($M.282.dup,$p530,$i531.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p532 := $add.ref($add.ref($p529,$mul.ref(0,16)),$mul.ref(8,1));
  $p532.dup := $or.i1($or.i1($p529.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $i533 := $extractvalue.i64($p528,1);
  $i533.dup := $or.i1($p528.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p532.dup := 0;
  $M.282 := $store.i64($M.282,$p532,$i533);
  $M.282.dup := $store.i1($M.282.dup,$p532,$i533.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 503, 5} true;
  assume {:verifier.code 0} true;
  $p56.dup := 0;
  $i534 := $load.i128($M.282,$p56);
  $i534.dup := 0;
  call {:cexpr "s0"} boogie_si_record_i128($i534);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  call $p535, $p535.dup := FStar_UInt128_mul_wide($i474, $i474.dup, $i186, $i186.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  $p536 := $bitcast.ref.ref($p57);
  $p536.dup := $p57.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  $p537 := $add.ref($add.ref($p536,$mul.ref(0,16)),$mul.ref(0,1));
  $p537.dup := $or.i1($or.i1($p536.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  $i538 := $extractvalue.i64($p535,0);
  $i538.dup := $or.i1($p535.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  $p537.dup := 0;
  $M.283 := $store.i64($M.283,$p537,$i538);
  $M.283.dup := $store.i1($M.283.dup,$p537,$i538.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  $p539 := $add.ref($add.ref($p536,$mul.ref(0,16)),$mul.ref(8,1));
  $p539.dup := $or.i1($or.i1($p536.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  $i540 := $extractvalue.i64($p535,1);
  $i540.dup := $or.i1($p535.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  $p539.dup := 0;
  $M.283 := $store.i64($M.283,$p539,$i540);
  $M.283.dup := $store.i1($M.283.dup,$p539,$i540.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 41} true;
  assume {:verifier.code 0} true;
  $p57.dup := 0;
  $i541 := $load.i128($M.283,$p57);
  $i541.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  call $p542, $p542.dup := FStar_UInt128_mul_wide($i479, $i479.dup, $i188, $i188.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  $p543 := $bitcast.ref.ref($p58);
  $p543.dup := $p58.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  $p544 := $add.ref($add.ref($p543,$mul.ref(0,16)),$mul.ref(0,1));
  $p544.dup := $or.i1($or.i1($p543.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  $i545 := $extractvalue.i64($p542,0);
  $i545.dup := $or.i1($p542.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  $p544.dup := 0;
  $M.284 := $store.i64($M.284,$p544,$i545);
  $M.284.dup := $store.i1($M.284.dup,$p544,$i545.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  $p546 := $add.ref($add.ref($p543,$mul.ref(0,16)),$mul.ref(8,1));
  $p546.dup := $or.i1($or.i1($p543.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  $i547 := $extractvalue.i64($p542,1);
  $i547.dup := $or.i1($p542.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  $p546.dup := 0;
  $M.284 := $store.i64($M.284,$p546,$i547);
  $M.284.dup := $store.i1($M.284.dup,$p546,$i547.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 509, 9} true;
  assume {:verifier.code 0} true;
  $p58.dup := 0;
  $i548 := $load.i128($M.284,$p58);
  $i548.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p59.dup := 0;
  $M.285 := $store.i128($M.285,$p59,$i541);
  $M.285.dup := $store.i1($M.285.dup,$p59,$i541.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p549 := $bitcast.ref.ref($p59);
  $p549.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p550 := $add.ref($add.ref($p549,$mul.ref(0,16)),$mul.ref(0,1));
  $p550.dup := $or.i1($or.i1($p549.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p550.dup := 0;
  $i551 := $load.i64($M.285,$p550);
  $i551.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p552 := $add.ref($add.ref($p549,$mul.ref(0,16)),$mul.ref(8,1));
  $p552.dup := $or.i1($or.i1($p549.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p552.dup := 0;
  $i553 := $load.i64($M.285,$p552);
  $i553.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p60.dup := 0;
  $M.286 := $store.i128($M.286,$p60,$i548);
  $M.286.dup := $store.i1($M.286.dup,$p60,$i548.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p554 := $bitcast.ref.ref($p60);
  $p554.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p555 := $add.ref($add.ref($p554,$mul.ref(0,16)),$mul.ref(0,1));
  $p555.dup := $or.i1($or.i1($p554.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p555.dup := 0;
  $i556 := $load.i64($M.286,$p555);
  $i556.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p557 := $add.ref($add.ref($p554,$mul.ref(0,16)),$mul.ref(8,1));
  $p557.dup := $or.i1($or.i1($p554.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p557.dup := 0;
  $i558 := $load.i64($M.286,$p557);
  $i558.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  call $p559, $p559.dup := FStar_UInt128_add($i551, $i551.dup, $i553, $i553.dup, $i556, $i556.dup, $i558, $i558.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p560 := $bitcast.ref.ref($p61);
  $p560.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p561 := $add.ref($add.ref($p560,$mul.ref(0,16)),$mul.ref(0,1));
  $p561.dup := $or.i1($or.i1($p560.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $i562 := $extractvalue.i64($p559,0);
  $i562.dup := $or.i1($p559.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p561.dup := 0;
  $M.287 := $store.i64($M.287,$p561,$i562);
  $M.287.dup := $store.i1($M.287.dup,$p561,$i562.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p563 := $add.ref($add.ref($p560,$mul.ref(0,16)),$mul.ref(8,1));
  $p563.dup := $or.i1($or.i1($p560.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $i564 := $extractvalue.i64($p559,1);
  $i564.dup := $or.i1($p559.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p563.dup := 0;
  $M.287 := $store.i64($M.287,$p563,$i564);
  $M.287.dup := $store.i1($M.287.dup,$p563,$i564.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 23} true;
  assume {:verifier.code 0} true;
  $p61.dup := 0;
  $i565 := $load.i128($M.287,$p61);
  $i565.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  call $p566, $p566.dup := FStar_UInt128_mul_wide($i477, $i477.dup, $i190, $i190.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  $p567 := $bitcast.ref.ref($p62);
  $p567.dup := $p62.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  $p568 := $add.ref($add.ref($p567,$mul.ref(0,16)),$mul.ref(0,1));
  $p568.dup := $or.i1($or.i1($p567.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  $i569 := $extractvalue.i64($p566,0);
  $i569.dup := $or.i1($p566.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  $p568.dup := 0;
  $M.288 := $store.i64($M.288,$p568,$i569);
  $M.288.dup := $store.i1($M.288.dup,$p568,$i569.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  $p570 := $add.ref($add.ref($p567,$mul.ref(0,16)),$mul.ref(8,1));
  $p570.dup := $or.i1($or.i1($p567.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  $i571 := $extractvalue.i64($p566,1);
  $i571.dup := $or.i1($p566.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  $p570.dup := 0;
  $M.288 := $store.i64($M.288,$p570,$i571);
  $M.288.dup := $store.i1($M.288.dup,$p570,$i571.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 510, 7} true;
  assume {:verifier.code 0} true;
  $p62.dup := 0;
  $i572 := $load.i128($M.288,$p62);
  $i572.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p63.dup := 0;
  $M.289 := $store.i128($M.289,$p63,$i565);
  $M.289.dup := $store.i1($M.289.dup,$p63,$i565.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p573 := $bitcast.ref.ref($p63);
  $p573.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p574 := $add.ref($add.ref($p573,$mul.ref(0,16)),$mul.ref(0,1));
  $p574.dup := $or.i1($or.i1($p573.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p574.dup := 0;
  $i575 := $load.i64($M.289,$p574);
  $i575.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p576 := $add.ref($add.ref($p573,$mul.ref(0,16)),$mul.ref(8,1));
  $p576.dup := $or.i1($or.i1($p573.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p576.dup := 0;
  $i577 := $load.i64($M.289,$p576);
  $i577.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p64.dup := 0;
  $M.290 := $store.i128($M.290,$p64,$i572);
  $M.290.dup := $store.i1($M.290.dup,$p64,$i572.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p578 := $bitcast.ref.ref($p64);
  $p578.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p579 := $add.ref($add.ref($p578,$mul.ref(0,16)),$mul.ref(0,1));
  $p579.dup := $or.i1($or.i1($p578.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p579.dup := 0;
  $i580 := $load.i64($M.290,$p579);
  $i580.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p581 := $add.ref($add.ref($p578,$mul.ref(0,16)),$mul.ref(8,1));
  $p581.dup := $or.i1($or.i1($p578.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p581.dup := 0;
  $i582 := $load.i64($M.290,$p581);
  $i582.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  call $p583, $p583.dup := FStar_UInt128_add($i575, $i575.dup, $i577, $i577.dup, $i580, $i580.dup, $i582, $i582.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p584 := $bitcast.ref.ref($p65);
  $p584.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p585 := $add.ref($add.ref($p584,$mul.ref(0,16)),$mul.ref(0,1));
  $p585.dup := $or.i1($or.i1($p584.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $i586 := $extractvalue.i64($p583,0);
  $i586.dup := $or.i1($p583.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p585.dup := 0;
  $M.291 := $store.i64($M.291,$p585,$i586);
  $M.291.dup := $store.i1($M.291.dup,$p585,$i586.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p587 := $add.ref($add.ref($p584,$mul.ref(0,16)),$mul.ref(8,1));
  $p587.dup := $or.i1($or.i1($p584.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $i588 := $extractvalue.i64($p583,1);
  $i588.dup := $or.i1($p583.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p587.dup := 0;
  $M.291 := $store.i64($M.291,$p587,$i588);
  $M.291.dup := $store.i1($M.291.dup,$p587,$i588.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 508, 5} true;
  assume {:verifier.code 0} true;
  $p65.dup := 0;
  $i589 := $load.i128($M.291,$p65);
  $i589.dup := 0;
  call {:cexpr "s1"} boogie_si_record_i128($i589);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  call $p590, $p590.dup := FStar_UInt128_mul_wide($i474, $i474.dup, $i188, $i188.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  $p591 := $bitcast.ref.ref($p66);
  $p591.dup := $p66.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  $p592 := $add.ref($add.ref($p591,$mul.ref(0,16)),$mul.ref(0,1));
  $p592.dup := $or.i1($or.i1($p591.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  $i593 := $extractvalue.i64($p590,0);
  $i593.dup := $or.i1($p590.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  $p592.dup := 0;
  $M.292 := $store.i64($M.292,$p592,$i593);
  $M.292.dup := $store.i1($M.292.dup,$p592,$i593.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  $p594 := $add.ref($add.ref($p591,$mul.ref(0,16)),$mul.ref(8,1));
  $p594.dup := $or.i1($or.i1($p591.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  $i595 := $extractvalue.i64($p590,1);
  $i595.dup := $or.i1($p590.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  $p594.dup := 0;
  $M.292 := $store.i64($M.292,$p594,$i595);
  $M.292.dup := $store.i1($M.292.dup,$p594,$i595.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 41} true;
  assume {:verifier.code 0} true;
  $p66.dup := 0;
  $i596 := $load.i128($M.292,$p66);
  $i596.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  call $p597, $p597.dup := FStar_UInt128_mul_wide($i186, $i186.dup, $i186, $i186.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  $p598 := $bitcast.ref.ref($p67);
  $p598.dup := $p67.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  $p599 := $add.ref($add.ref($p598,$mul.ref(0,16)),$mul.ref(0,1));
  $p599.dup := $or.i1($or.i1($p598.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  $i600 := $extractvalue.i64($p597,0);
  $i600.dup := $or.i1($p597.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  $p599.dup := 0;
  $M.293 := $store.i64($M.293,$p599,$i600);
  $M.293.dup := $store.i1($M.293.dup,$p599,$i600.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  $p601 := $add.ref($add.ref($p598,$mul.ref(0,16)),$mul.ref(8,1));
  $p601.dup := $or.i1($or.i1($p598.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  $i602 := $extractvalue.i64($p597,1);
  $i602.dup := $or.i1($p597.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  $p601.dup := 0;
  $M.293 := $store.i64($M.293,$p601,$i602);
  $M.293.dup := $store.i1($M.293.dup,$p601,$i602.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 514, 9} true;
  assume {:verifier.code 0} true;
  $p67.dup := 0;
  $i603 := $load.i128($M.293,$p67);
  $i603.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p68.dup := 0;
  $M.294 := $store.i128($M.294,$p68,$i596);
  $M.294.dup := $store.i1($M.294.dup,$p68,$i596.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p604 := $bitcast.ref.ref($p68);
  $p604.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p605 := $add.ref($add.ref($p604,$mul.ref(0,16)),$mul.ref(0,1));
  $p605.dup := $or.i1($or.i1($p604.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p605.dup := 0;
  $i606 := $load.i64($M.294,$p605);
  $i606.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p607 := $add.ref($add.ref($p604,$mul.ref(0,16)),$mul.ref(8,1));
  $p607.dup := $or.i1($or.i1($p604.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p607.dup := 0;
  $i608 := $load.i64($M.294,$p607);
  $i608.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p69.dup := 0;
  $M.295 := $store.i128($M.295,$p69,$i603);
  $M.295.dup := $store.i1($M.295.dup,$p69,$i603.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p609 := $bitcast.ref.ref($p69);
  $p609.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p610 := $add.ref($add.ref($p609,$mul.ref(0,16)),$mul.ref(0,1));
  $p610.dup := $or.i1($or.i1($p609.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p610.dup := 0;
  $i611 := $load.i64($M.295,$p610);
  $i611.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p612 := $add.ref($add.ref($p609,$mul.ref(0,16)),$mul.ref(8,1));
  $p612.dup := $or.i1($or.i1($p609.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p612.dup := 0;
  $i613 := $load.i64($M.295,$p612);
  $i613.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  call $p614, $p614.dup := FStar_UInt128_add($i606, $i606.dup, $i608, $i608.dup, $i611, $i611.dup, $i613, $i613.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p615 := $bitcast.ref.ref($p70);
  $p615.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p616 := $add.ref($add.ref($p615,$mul.ref(0,16)),$mul.ref(0,1));
  $p616.dup := $or.i1($or.i1($p615.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $i617 := $extractvalue.i64($p614,0);
  $i617.dup := $or.i1($p614.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p616.dup := 0;
  $M.296 := $store.i64($M.296,$p616,$i617);
  $M.296.dup := $store.i1($M.296.dup,$p616,$i617.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p618 := $add.ref($add.ref($p615,$mul.ref(0,16)),$mul.ref(8,1));
  $p618.dup := $or.i1($or.i1($p615.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $i619 := $extractvalue.i64($p614,1);
  $i619.dup := $or.i1($p614.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p618.dup := 0;
  $M.296 := $store.i64($M.296,$p618,$i619);
  $M.296.dup := $store.i1($M.296.dup,$p618,$i619.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 23} true;
  assume {:verifier.code 0} true;
  $p70.dup := 0;
  $i620 := $load.i128($M.296,$p70);
  $i620.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  call $p621, $p621.dup := FStar_UInt128_mul_wide($i479, $i479.dup, $i190, $i190.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  $p622 := $bitcast.ref.ref($p71);
  $p622.dup := $p71.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  $p623 := $add.ref($add.ref($p622,$mul.ref(0,16)),$mul.ref(0,1));
  $p623.dup := $or.i1($or.i1($p622.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  $i624 := $extractvalue.i64($p621,0);
  $i624.dup := $or.i1($p621.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  $p623.dup := 0;
  $M.297 := $store.i64($M.297,$p623,$i624);
  $M.297.dup := $store.i1($M.297.dup,$p623,$i624.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  $p625 := $add.ref($add.ref($p622,$mul.ref(0,16)),$mul.ref(8,1));
  $p625.dup := $or.i1($or.i1($p622.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  $i626 := $extractvalue.i64($p621,1);
  $i626.dup := $or.i1($p621.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  $p625.dup := 0;
  $M.297 := $store.i64($M.297,$p625,$i626);
  $M.297.dup := $store.i1($M.297.dup,$p625,$i626.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 515, 7} true;
  assume {:verifier.code 0} true;
  $p71.dup := 0;
  $i627 := $load.i128($M.297,$p71);
  $i627.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p72.dup := 0;
  $M.298 := $store.i128($M.298,$p72,$i620);
  $M.298.dup := $store.i1($M.298.dup,$p72,$i620.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p628 := $bitcast.ref.ref($p72);
  $p628.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p629 := $add.ref($add.ref($p628,$mul.ref(0,16)),$mul.ref(0,1));
  $p629.dup := $or.i1($or.i1($p628.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p629.dup := 0;
  $i630 := $load.i64($M.298,$p629);
  $i630.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p631 := $add.ref($add.ref($p628,$mul.ref(0,16)),$mul.ref(8,1));
  $p631.dup := $or.i1($or.i1($p628.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p631.dup := 0;
  $i632 := $load.i64($M.298,$p631);
  $i632.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p73.dup := 0;
  $M.299 := $store.i128($M.299,$p73,$i627);
  $M.299.dup := $store.i1($M.299.dup,$p73,$i627.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p633 := $bitcast.ref.ref($p73);
  $p633.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p634 := $add.ref($add.ref($p633,$mul.ref(0,16)),$mul.ref(0,1));
  $p634.dup := $or.i1($or.i1($p633.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p634.dup := 0;
  $i635 := $load.i64($M.299,$p634);
  $i635.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p636 := $add.ref($add.ref($p633,$mul.ref(0,16)),$mul.ref(8,1));
  $p636.dup := $or.i1($or.i1($p633.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p636.dup := 0;
  $i637 := $load.i64($M.299,$p636);
  $i637.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  call $p638, $p638.dup := FStar_UInt128_add($i630, $i630.dup, $i632, $i632.dup, $i635, $i635.dup, $i637, $i637.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p639 := $bitcast.ref.ref($p74);
  $p639.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p640 := $add.ref($add.ref($p639,$mul.ref(0,16)),$mul.ref(0,1));
  $p640.dup := $or.i1($or.i1($p639.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $i641 := $extractvalue.i64($p638,0);
  $i641.dup := $or.i1($p638.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p640.dup := 0;
  $M.300 := $store.i64($M.300,$p640,$i641);
  $M.300.dup := $store.i1($M.300.dup,$p640,$i641.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p642 := $add.ref($add.ref($p639,$mul.ref(0,16)),$mul.ref(8,1));
  $p642.dup := $or.i1($or.i1($p639.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $i643 := $extractvalue.i64($p638,1);
  $i643.dup := $or.i1($p638.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p642.dup := 0;
  $M.300 := $store.i64($M.300,$p642,$i643);
  $M.300.dup := $store.i1($M.300.dup,$p642,$i643.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 513, 5} true;
  assume {:verifier.code 0} true;
  $p74.dup := 0;
  $i644 := $load.i128($M.300,$p74);
  $i644.dup := 0;
  call {:cexpr "s2"} boogie_si_record_i128($i644);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  call $p645, $p645.dup := FStar_UInt128_mul_wide($i474, $i474.dup, $i190, $i190.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  $p646 := $bitcast.ref.ref($p75);
  $p646.dup := $p75.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  $p647 := $add.ref($add.ref($p646,$mul.ref(0,16)),$mul.ref(0,1));
  $p647.dup := $or.i1($or.i1($p646.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  $i648 := $extractvalue.i64($p645,0);
  $i648.dup := $or.i1($p645.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  $p647.dup := 0;
  $M.301 := $store.i64($M.301,$p647,$i648);
  $M.301.dup := $store.i1($M.301.dup,$p647,$i648.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  $p649 := $add.ref($add.ref($p646,$mul.ref(0,16)),$mul.ref(8,1));
  $p649.dup := $or.i1($or.i1($p646.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  $i650 := $extractvalue.i64($p645,1);
  $i650.dup := $or.i1($p645.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  $p649.dup := 0;
  $M.301 := $store.i64($M.301,$p649,$i650);
  $M.301.dup := $store.i1($M.301.dup,$p649,$i650.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 41} true;
  assume {:verifier.code 0} true;
  $p75.dup := 0;
  $i651 := $load.i128($M.301,$p75);
  $i651.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  call $p652, $p652.dup := FStar_UInt128_mul_wide($i475, $i475.dup, $i188, $i188.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  $p653 := $bitcast.ref.ref($p76);
  $p653.dup := $p76.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  $p654 := $add.ref($add.ref($p653,$mul.ref(0,16)),$mul.ref(0,1));
  $p654.dup := $or.i1($or.i1($p653.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  $i655 := $extractvalue.i64($p652,0);
  $i655.dup := $or.i1($p652.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  $p654.dup := 0;
  $M.302 := $store.i64($M.302,$p654,$i655);
  $M.302.dup := $store.i1($M.302.dup,$p654,$i655.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  $p656 := $add.ref($add.ref($p653,$mul.ref(0,16)),$mul.ref(8,1));
  $p656.dup := $or.i1($or.i1($p653.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  $i657 := $extractvalue.i64($p652,1);
  $i657.dup := $or.i1($p652.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  $p656.dup := 0;
  $M.302 := $store.i64($M.302,$p656,$i657);
  $M.302.dup := $store.i1($M.302.dup,$p656,$i657.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 519, 9} true;
  assume {:verifier.code 0} true;
  $p76.dup := 0;
  $i658 := $load.i128($M.302,$p76);
  $i658.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p77.dup := 0;
  $M.303 := $store.i128($M.303,$p77,$i651);
  $M.303.dup := $store.i1($M.303.dup,$p77,$i651.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p659 := $bitcast.ref.ref($p77);
  $p659.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p660 := $add.ref($add.ref($p659,$mul.ref(0,16)),$mul.ref(0,1));
  $p660.dup := $or.i1($or.i1($p659.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p660.dup := 0;
  $i661 := $load.i64($M.303,$p660);
  $i661.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p662 := $add.ref($add.ref($p659,$mul.ref(0,16)),$mul.ref(8,1));
  $p662.dup := $or.i1($or.i1($p659.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p662.dup := 0;
  $i663 := $load.i64($M.303,$p662);
  $i663.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p78.dup := 0;
  $M.304 := $store.i128($M.304,$p78,$i658);
  $M.304.dup := $store.i1($M.304.dup,$p78,$i658.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p664 := $bitcast.ref.ref($p78);
  $p664.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p665 := $add.ref($add.ref($p664,$mul.ref(0,16)),$mul.ref(0,1));
  $p665.dup := $or.i1($or.i1($p664.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p665.dup := 0;
  $i666 := $load.i64($M.304,$p665);
  $i666.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p667 := $add.ref($add.ref($p664,$mul.ref(0,16)),$mul.ref(8,1));
  $p667.dup := $or.i1($or.i1($p664.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p667.dup := 0;
  $i668 := $load.i64($M.304,$p667);
  $i668.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  call $p669, $p669.dup := FStar_UInt128_add($i661, $i661.dup, $i663, $i663.dup, $i666, $i666.dup, $i668, $i668.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p670 := $bitcast.ref.ref($p79);
  $p670.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p671 := $add.ref($add.ref($p670,$mul.ref(0,16)),$mul.ref(0,1));
  $p671.dup := $or.i1($or.i1($p670.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $i672 := $extractvalue.i64($p669,0);
  $i672.dup := $or.i1($p669.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p671.dup := 0;
  $M.305 := $store.i64($M.305,$p671,$i672);
  $M.305.dup := $store.i1($M.305.dup,$p671,$i672.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p673 := $add.ref($add.ref($p670,$mul.ref(0,16)),$mul.ref(8,1));
  $p673.dup := $or.i1($or.i1($p670.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $i674 := $extractvalue.i64($p669,1);
  $i674.dup := $or.i1($p669.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p673.dup := 0;
  $M.305 := $store.i64($M.305,$p673,$i674);
  $M.305.dup := $store.i1($M.305.dup,$p673,$i674.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 23} true;
  assume {:verifier.code 0} true;
  $p79.dup := 0;
  $i675 := $load.i128($M.305,$p79);
  $i675.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  call $p676, $p676.dup := FStar_UInt128_mul_wide($i192, $i192.dup, $i478, $i478.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  $p677 := $bitcast.ref.ref($p80);
  $p677.dup := $p80.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  $p678 := $add.ref($add.ref($p677,$mul.ref(0,16)),$mul.ref(0,1));
  $p678.dup := $or.i1($or.i1($p677.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  $i679 := $extractvalue.i64($p676,0);
  $i679.dup := $or.i1($p676.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  $p678.dup := 0;
  $M.306 := $store.i64($M.306,$p678,$i679);
  $M.306.dup := $store.i1($M.306.dup,$p678,$i679.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  $p680 := $add.ref($add.ref($p677,$mul.ref(0,16)),$mul.ref(8,1));
  $p680.dup := $or.i1($or.i1($p677.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  $i681 := $extractvalue.i64($p676,1);
  $i681.dup := $or.i1($p676.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  $p680.dup := 0;
  $M.306 := $store.i64($M.306,$p680,$i681);
  $M.306.dup := $store.i1($M.306.dup,$p680,$i681.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 520, 7} true;
  assume {:verifier.code 0} true;
  $p80.dup := 0;
  $i682 := $load.i128($M.306,$p80);
  $i682.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p81.dup := 0;
  $M.307 := $store.i128($M.307,$p81,$i675);
  $M.307.dup := $store.i1($M.307.dup,$p81,$i675.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p683 := $bitcast.ref.ref($p81);
  $p683.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p684 := $add.ref($add.ref($p683,$mul.ref(0,16)),$mul.ref(0,1));
  $p684.dup := $or.i1($or.i1($p683.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p684.dup := 0;
  $i685 := $load.i64($M.307,$p684);
  $i685.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p686 := $add.ref($add.ref($p683,$mul.ref(0,16)),$mul.ref(8,1));
  $p686.dup := $or.i1($or.i1($p683.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p686.dup := 0;
  $i687 := $load.i64($M.307,$p686);
  $i687.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p82.dup := 0;
  $M.308 := $store.i128($M.308,$p82,$i682);
  $M.308.dup := $store.i1($M.308.dup,$p82,$i682.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p688 := $bitcast.ref.ref($p82);
  $p688.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p689 := $add.ref($add.ref($p688,$mul.ref(0,16)),$mul.ref(0,1));
  $p689.dup := $or.i1($or.i1($p688.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p689.dup := 0;
  $i690 := $load.i64($M.308,$p689);
  $i690.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p691 := $add.ref($add.ref($p688,$mul.ref(0,16)),$mul.ref(8,1));
  $p691.dup := $or.i1($or.i1($p688.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p691.dup := 0;
  $i692 := $load.i64($M.308,$p691);
  $i692.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  call $p693, $p693.dup := FStar_UInt128_add($i685, $i685.dup, $i687, $i687.dup, $i690, $i690.dup, $i692, $i692.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p694 := $bitcast.ref.ref($p83);
  $p694.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p695 := $add.ref($add.ref($p694,$mul.ref(0,16)),$mul.ref(0,1));
  $p695.dup := $or.i1($or.i1($p694.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $i696 := $extractvalue.i64($p693,0);
  $i696.dup := $or.i1($p693.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p695.dup := 0;
  $M.309 := $store.i64($M.309,$p695,$i696);
  $M.309.dup := $store.i1($M.309.dup,$p695,$i696.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p697 := $add.ref($add.ref($p694,$mul.ref(0,16)),$mul.ref(8,1));
  $p697.dup := $or.i1($or.i1($p694.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $i698 := $extractvalue.i64($p693,1);
  $i698.dup := $or.i1($p693.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p697.dup := 0;
  $M.309 := $store.i64($M.309,$p697,$i698);
  $M.309.dup := $store.i1($M.309.dup,$p697,$i698.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 518, 5} true;
  assume {:verifier.code 0} true;
  $p83.dup := 0;
  $i699 := $load.i128($M.309,$p83);
  $i699.dup := 0;
  call {:cexpr "s3"} boogie_si_record_i128($i699);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  call $p700, $p700.dup := FStar_UInt128_mul_wide($i474, $i474.dup, $i192, $i192.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  $p701 := $bitcast.ref.ref($p84);
  $p701.dup := $p84.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  $p702 := $add.ref($add.ref($p701,$mul.ref(0,16)),$mul.ref(0,1));
  $p702.dup := $or.i1($or.i1($p701.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  $i703 := $extractvalue.i64($p700,0);
  $i703.dup := $or.i1($p700.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  $p702.dup := 0;
  $M.310 := $store.i64($M.310,$p702,$i703);
  $M.310.dup := $store.i1($M.310.dup,$p702,$i703.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  $p704 := $add.ref($add.ref($p701,$mul.ref(0,16)),$mul.ref(8,1));
  $p704.dup := $or.i1($or.i1($p701.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  $i705 := $extractvalue.i64($p700,1);
  $i705.dup := $or.i1($p700.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  $p704.dup := 0;
  $M.310 := $store.i64($M.310,$p704,$i705);
  $M.310.dup := $store.i1($M.310.dup,$p704,$i705.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 41} true;
  assume {:verifier.code 0} true;
  $p84.dup := 0;
  $i706 := $load.i128($M.310,$p84);
  $i706.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  call $p707, $p707.dup := FStar_UInt128_mul_wide($i475, $i475.dup, $i190, $i190.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  $p708 := $bitcast.ref.ref($p85);
  $p708.dup := $p85.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  $p709 := $add.ref($add.ref($p708,$mul.ref(0,16)),$mul.ref(0,1));
  $p709.dup := $or.i1($or.i1($p708.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  $i710 := $extractvalue.i64($p707,0);
  $i710.dup := $or.i1($p707.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  $p709.dup := 0;
  $M.311 := $store.i64($M.311,$p709,$i710);
  $M.311.dup := $store.i1($M.311.dup,$p709,$i710.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  $p711 := $add.ref($add.ref($p708,$mul.ref(0,16)),$mul.ref(8,1));
  $p711.dup := $or.i1($or.i1($p708.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  $i712 := $extractvalue.i64($p707,1);
  $i712.dup := $or.i1($p707.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  $p711.dup := 0;
  $M.311 := $store.i64($M.311,$p711,$i712);
  $M.311.dup := $store.i1($M.311.dup,$p711,$i712.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 524, 9} true;
  assume {:verifier.code 0} true;
  $p85.dup := 0;
  $i713 := $load.i128($M.311,$p85);
  $i713.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p86.dup := 0;
  $M.312 := $store.i128($M.312,$p86,$i706);
  $M.312.dup := $store.i1($M.312.dup,$p86,$i706.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p714 := $bitcast.ref.ref($p86);
  $p714.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p715 := $add.ref($add.ref($p714,$mul.ref(0,16)),$mul.ref(0,1));
  $p715.dup := $or.i1($or.i1($p714.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p715.dup := 0;
  $i716 := $load.i64($M.312,$p715);
  $i716.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p717 := $add.ref($add.ref($p714,$mul.ref(0,16)),$mul.ref(8,1));
  $p717.dup := $or.i1($or.i1($p714.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p717.dup := 0;
  $i718 := $load.i64($M.312,$p717);
  $i718.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p87.dup := 0;
  $M.313 := $store.i128($M.313,$p87,$i713);
  $M.313.dup := $store.i1($M.313.dup,$p87,$i713.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p719 := $bitcast.ref.ref($p87);
  $p719.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p720 := $add.ref($add.ref($p719,$mul.ref(0,16)),$mul.ref(0,1));
  $p720.dup := $or.i1($or.i1($p719.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p720.dup := 0;
  $i721 := $load.i64($M.313,$p720);
  $i721.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p722 := $add.ref($add.ref($p719,$mul.ref(0,16)),$mul.ref(8,1));
  $p722.dup := $or.i1($or.i1($p719.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p722.dup := 0;
  $i723 := $load.i64($M.313,$p722);
  $i723.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  call $p724, $p724.dup := FStar_UInt128_add($i716, $i716.dup, $i718, $i718.dup, $i721, $i721.dup, $i723, $i723.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p725 := $bitcast.ref.ref($p88);
  $p725.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p726 := $add.ref($add.ref($p725,$mul.ref(0,16)),$mul.ref(0,1));
  $p726.dup := $or.i1($or.i1($p725.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $i727 := $extractvalue.i64($p724,0);
  $i727.dup := $or.i1($p724.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p726.dup := 0;
  $M.314 := $store.i64($M.314,$p726,$i727);
  $M.314.dup := $store.i1($M.314.dup,$p726,$i727.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p728 := $add.ref($add.ref($p725,$mul.ref(0,16)),$mul.ref(8,1));
  $p728.dup := $or.i1($or.i1($p725.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $i729 := $extractvalue.i64($p724,1);
  $i729.dup := $or.i1($p724.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p728.dup := 0;
  $M.314 := $store.i64($M.314,$p728,$i729);
  $M.314.dup := $store.i1($M.314.dup,$p728,$i729.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 23} true;
  assume {:verifier.code 0} true;
  $p88.dup := 0;
  $i730 := $load.i128($M.314,$p88);
  $i730.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  call $p731, $p731.dup := FStar_UInt128_mul_wide($i188, $i188.dup, $i188, $i188.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  $p732 := $bitcast.ref.ref($p89);
  $p732.dup := $p89.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  $p733 := $add.ref($add.ref($p732,$mul.ref(0,16)),$mul.ref(0,1));
  $p733.dup := $or.i1($or.i1($p732.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  $i734 := $extractvalue.i64($p731,0);
  $i734.dup := $or.i1($p731.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  $p733.dup := 0;
  $M.315 := $store.i64($M.315,$p733,$i734);
  $M.315.dup := $store.i1($M.315.dup,$p733,$i734.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  $p735 := $add.ref($add.ref($p732,$mul.ref(0,16)),$mul.ref(8,1));
  $p735.dup := $or.i1($or.i1($p732.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  $i736 := $extractvalue.i64($p731,1);
  $i736.dup := $or.i1($p731.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  $p735.dup := 0;
  $M.315 := $store.i64($M.315,$p735,$i736);
  $M.315.dup := $store.i1($M.315.dup,$p735,$i736.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 525, 7} true;
  assume {:verifier.code 0} true;
  $p89.dup := 0;
  $i737 := $load.i128($M.315,$p89);
  $i737.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p90.dup := 0;
  $M.316 := $store.i128($M.316,$p90,$i730);
  $M.316.dup := $store.i1($M.316.dup,$p90,$i730.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p738 := $bitcast.ref.ref($p90);
  $p738.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p739 := $add.ref($add.ref($p738,$mul.ref(0,16)),$mul.ref(0,1));
  $p739.dup := $or.i1($or.i1($p738.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p739.dup := 0;
  $i740 := $load.i64($M.316,$p739);
  $i740.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p741 := $add.ref($add.ref($p738,$mul.ref(0,16)),$mul.ref(8,1));
  $p741.dup := $or.i1($or.i1($p738.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p741.dup := 0;
  $i742 := $load.i64($M.316,$p741);
  $i742.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p91.dup := 0;
  $M.317 := $store.i128($M.317,$p91,$i737);
  $M.317.dup := $store.i1($M.317.dup,$p91,$i737.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p743 := $bitcast.ref.ref($p91);
  $p743.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p744 := $add.ref($add.ref($p743,$mul.ref(0,16)),$mul.ref(0,1));
  $p744.dup := $or.i1($or.i1($p743.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p744.dup := 0;
  $i745 := $load.i64($M.317,$p744);
  $i745.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p746 := $add.ref($add.ref($p743,$mul.ref(0,16)),$mul.ref(8,1));
  $p746.dup := $or.i1($or.i1($p743.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p746.dup := 0;
  $i747 := $load.i64($M.317,$p746);
  $i747.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  call $p748, $p748.dup := FStar_UInt128_add($i740, $i740.dup, $i742, $i742.dup, $i745, $i745.dup, $i747, $i747.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p749 := $bitcast.ref.ref($p92);
  $p749.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p750 := $add.ref($add.ref($p749,$mul.ref(0,16)),$mul.ref(0,1));
  $p750.dup := $or.i1($or.i1($p749.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $i751 := $extractvalue.i64($p748,0);
  $i751.dup := $or.i1($p748.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p750.dup := 0;
  $M.318 := $store.i64($M.318,$p750,$i751);
  $M.318.dup := $store.i1($M.318.dup,$p750,$i751.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p752 := $add.ref($add.ref($p749,$mul.ref(0,16)),$mul.ref(8,1));
  $p752.dup := $or.i1($or.i1($p749.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $i753 := $extractvalue.i64($p748,1);
  $i753.dup := $or.i1($p748.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p752.dup := 0;
  $M.318 := $store.i64($M.318,$p752,$i753);
  $M.318.dup := $store.i1($M.318.dup,$p752,$i753.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 523, 5} true;
  assume {:verifier.code 0} true;
  $p92.dup := 0;
  $i754 := $load.i128($M.318,$p92);
  $i754.dup := 0;
  call {:cexpr "s4"} boogie_si_record_i128($i754);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  call $p755, $p755.dup := FStar_UInt128_uint64_to_uint128(0, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  $p756 := $bitcast.ref.ref($p93);
  $p756.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  $p757 := $add.ref($add.ref($p756,$mul.ref(0,16)),$mul.ref(0,1));
  $p757.dup := $or.i1($or.i1($p756.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  $i758 := $extractvalue.i64($p755,0);
  $i758.dup := $or.i1($p755.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  $p757.dup := 0;
  $M.319 := $store.i64($M.319,$p757,$i758);
  $M.319.dup := $store.i1($M.319.dup,$p757,$i758.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  $p759 := $add.ref($add.ref($p756,$mul.ref(0,16)),$mul.ref(8,1));
  $p759.dup := $or.i1($or.i1($p756.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  $i760 := $extractvalue.i64($p755,1);
  $i760.dup := $or.i1($p755.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  $p759.dup := 0;
  $M.319 := $store.i64($M.319,$p759,$i760);
  $M.319.dup := $store.i1($M.319.dup,$p759,$i760.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 32} true;
  assume {:verifier.code 0} true;
  $p93.dup := 0;
  $i761 := $load.i128($M.319,$p93);
  $i761.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p94.dup := 0;
  $M.320 := $store.i128($M.320,$p94,$i253);
  $M.320.dup := $store.i1($M.320.dup,$p94,$i253.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p762 := $bitcast.ref.ref($p94);
  $p762.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p763 := $add.ref($add.ref($p762,$mul.ref(0,16)),$mul.ref(0,1));
  $p763.dup := $or.i1($or.i1($p762.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p763.dup := 0;
  $i764 := $load.i64($M.320,$p763);
  $i764.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p765 := $add.ref($add.ref($p762,$mul.ref(0,16)),$mul.ref(8,1));
  $p765.dup := $or.i1($or.i1($p762.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p765.dup := 0;
  $i766 := $load.i64($M.320,$p765);
  $i766.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p95.dup := 0;
  $M.321 := $store.i128($M.321,$p95,$i761);
  $M.321.dup := $store.i1($M.321.dup,$p95,$i761.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p767 := $bitcast.ref.ref($p95);
  $p767.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p768 := $add.ref($add.ref($p767,$mul.ref(0,16)),$mul.ref(0,1));
  $p768.dup := $or.i1($or.i1($p767.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p768.dup := 0;
  $i769 := $load.i64($M.321,$p768);
  $i769.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p770 := $add.ref($add.ref($p767,$mul.ref(0,16)),$mul.ref(8,1));
  $p770.dup := $or.i1($or.i1($p767.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p770.dup := 0;
  $i771 := $load.i64($M.321,$p770);
  $i771.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  call $p772, $p772.dup := FStar_UInt128_add($i764, $i764.dup, $i766, $i766.dup, $i769, $i769.dup, $i771, $i771.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p773 := $bitcast.ref.ref($p96);
  $p773.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p774 := $add.ref($add.ref($p773,$mul.ref(0,16)),$mul.ref(0,1));
  $p774.dup := $or.i1($or.i1($p773.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $i775 := $extractvalue.i64($p772,0);
  $i775.dup := $or.i1($p772.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p774.dup := 0;
  $M.322 := $store.i64($M.322,$p774,$i775);
  $M.322.dup := $store.i1($M.322.dup,$p774,$i775.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p776 := $add.ref($add.ref($p773,$mul.ref(0,16)),$mul.ref(8,1));
  $p776.dup := $or.i1($or.i1($p773.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $i777 := $extractvalue.i64($p772,1);
  $i777.dup := $or.i1($p772.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p776.dup := 0;
  $M.322 := $store.i64($M.322,$p776,$i777);
  $M.322.dup := $store.i1($M.322.dup,$p776,$i777.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 532, 8} true;
  assume {:verifier.code 0} true;
  $p96.dup := 0;
  $i778 := $load.i128($M.322,$p96);
  $i778.dup := 0;
  call {:cexpr "l_"} boogie_si_record_i128($i778);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  $p97.dup := 0;
  $M.323 := $store.i128($M.323,$p97,$i778);
  $M.323.dup := $store.i1($M.323.dup,$p97,$i778.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  $p779 := $bitcast.ref.ref($p97);
  $p779.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  $p780 := $add.ref($add.ref($p779,$mul.ref(0,16)),$mul.ref(0,1));
  $p780.dup := $or.i1($or.i1($p779.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  $p780.dup := 0;
  $i781 := $load.i64($M.323,$p780);
  $i781.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  $p782 := $add.ref($add.ref($p779,$mul.ref(0,16)),$mul.ref(8,1));
  $p782.dup := $or.i1($or.i1($p779.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  $p782.dup := 0;
  $i783 := $load.i64($M.323,$p782);
  $i783.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 20} true;
  assume {:verifier.code 0} true;
  call $i784, $i784.dup := FStar_UInt128_uint128_to_uint64($i781, $i781.dup, $i783, $i783.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 533, 56} true;
  assume {:verifier.code 0} true;
  $i785 := $and.i64($i784,2251799813685247);
  $i785.dup := $or.i1($i784.dup,0);
  call {:cexpr "tmp00"} boogie_si_record_i64($i785);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $p98.dup := 0;
  $M.324 := $store.i128($M.324,$p98,$i778);
  $M.324.dup := $store.i1($M.324.dup,$p98,$i778.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $p786 := $bitcast.ref.ref($p98);
  $p786.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $p787 := $add.ref($add.ref($p786,$mul.ref(0,16)),$mul.ref(0,1));
  $p787.dup := $or.i1($or.i1($p786.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $p787.dup := 0;
  $i788 := $load.i64($M.324,$p787);
  $i788.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $p789 := $add.ref($add.ref($p786,$mul.ref(0,16)),$mul.ref(8,1));
  $p789.dup := $or.i1($or.i1($p786.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $p789.dup := 0;
  $i790 := $load.i64($M.324,$p789);
  $i790.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  call $p791, $p791.dup := FStar_UInt128_shift_right($i788, $i788.dup, $i790, $i790.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $p792 := $bitcast.ref.ref($p99);
  $p792.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $p793 := $add.ref($add.ref($p792,$mul.ref(0,16)),$mul.ref(0,1));
  $p793.dup := $or.i1($or.i1($p792.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $i794 := $extractvalue.i64($p791,0);
  $i794.dup := $or.i1($p791.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $p793.dup := 0;
  $M.325 := $store.i64($M.325,$p793,$i794);
  $M.325.dup := $store.i1($M.325.dup,$p793,$i794.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $p795 := $add.ref($add.ref($p792,$mul.ref(0,16)),$mul.ref(8,1));
  $p795.dup := $or.i1($or.i1($p792.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $i796 := $extractvalue.i64($p791,1);
  $i796.dup := $or.i1($p791.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $p795.dup := 0;
  $M.325 := $store.i64($M.325,$p795,$i796);
  $M.325.dup := $store.i1($M.325.dup,$p795,$i796.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 50} true;
  assume {:verifier.code 0} true;
  $p99.dup := 0;
  $i797 := $load.i128($M.325,$p99);
  $i797.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  $p100.dup := 0;
  $M.326 := $store.i128($M.326,$p100,$i797);
  $M.326.dup := $store.i1($M.326.dup,$p100,$i797.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  $p798 := $bitcast.ref.ref($p100);
  $p798.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  $p799 := $add.ref($add.ref($p798,$mul.ref(0,16)),$mul.ref(0,1));
  $p799.dup := $or.i1($or.i1($p798.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  $p799.dup := 0;
  $i800 := $load.i64($M.326,$p799);
  $i800.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  $p801 := $add.ref($add.ref($p798,$mul.ref(0,16)),$mul.ref(8,1));
  $p801.dup := $or.i1($or.i1($p798.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  $p801.dup := 0;
  $i802 := $load.i64($M.326,$p801);
  $i802.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 534, 18} true;
  assume {:verifier.code 0} true;
  call $i803, $i803.dup := FStar_UInt128_uint128_to_uint64($i800, $i800.dup, $i802, $i802.dup);
  call {:cexpr "c00"} boogie_si_record_i64($i803);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  call $p804, $p804.dup := FStar_UInt128_uint64_to_uint128($i803, $i803.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  $p805 := $bitcast.ref.ref($p101);
  $p805.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  $p806 := $add.ref($add.ref($p805,$mul.ref(0,16)),$mul.ref(0,1));
  $p806.dup := $or.i1($or.i1($p805.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  $i807 := $extractvalue.i64($p804,0);
  $i807.dup := $or.i1($p804.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  $p806.dup := 0;
  $M.327 := $store.i64($M.327,$p806,$i807);
  $M.327.dup := $store.i1($M.327.dup,$p806,$i807.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  $p808 := $add.ref($add.ref($p805,$mul.ref(0,16)),$mul.ref(8,1));
  $p808.dup := $or.i1($or.i1($p805.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  $i809 := $extractvalue.i64($p804,1);
  $i809.dup := $or.i1($p804.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  $p808.dup := 0;
  $M.327 := $store.i64($M.327,$p808,$i809);
  $M.327.dup := $store.i1($M.327.dup,$p808,$i809.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 55} true;
  assume {:verifier.code 0} true;
  $p101.dup := 0;
  $i810 := $load.i128($M.327,$p101);
  $i810.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p102.dup := 0;
  $M.328 := $store.i128($M.328,$p102,$i308);
  $M.328.dup := $store.i1($M.328.dup,$p102,$i308.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p811 := $bitcast.ref.ref($p102);
  $p811.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p812 := $add.ref($add.ref($p811,$mul.ref(0,16)),$mul.ref(0,1));
  $p812.dup := $or.i1($or.i1($p811.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p812.dup := 0;
  $i813 := $load.i64($M.328,$p812);
  $i813.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p814 := $add.ref($add.ref($p811,$mul.ref(0,16)),$mul.ref(8,1));
  $p814.dup := $or.i1($or.i1($p811.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p814.dup := 0;
  $i815 := $load.i64($M.328,$p814);
  $i815.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p103.dup := 0;
  $M.329 := $store.i128($M.329,$p103,$i810);
  $M.329.dup := $store.i1($M.329.dup,$p103,$i810.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p816 := $bitcast.ref.ref($p103);
  $p816.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p817 := $add.ref($add.ref($p816,$mul.ref(0,16)),$mul.ref(0,1));
  $p817.dup := $or.i1($or.i1($p816.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p817.dup := 0;
  $i818 := $load.i64($M.329,$p817);
  $i818.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p819 := $add.ref($add.ref($p816,$mul.ref(0,16)),$mul.ref(8,1));
  $p819.dup := $or.i1($or.i1($p816.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p819.dup := 0;
  $i820 := $load.i64($M.329,$p819);
  $i820.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  call $p821, $p821.dup := FStar_UInt128_add($i813, $i813.dup, $i815, $i815.dup, $i818, $i818.dup, $i820, $i820.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p822 := $bitcast.ref.ref($p104);
  $p822.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p823 := $add.ref($add.ref($p822,$mul.ref(0,16)),$mul.ref(0,1));
  $p823.dup := $or.i1($or.i1($p822.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $i824 := $extractvalue.i64($p821,0);
  $i824.dup := $or.i1($p821.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p823.dup := 0;
  $M.330 := $store.i64($M.330,$p823,$i824);
  $M.330.dup := $store.i1($M.330.dup,$p823,$i824.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p825 := $add.ref($add.ref($p822,$mul.ref(0,16)),$mul.ref(8,1));
  $p825.dup := $or.i1($or.i1($p822.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $i826 := $extractvalue.i64($p821,1);
  $i826.dup := $or.i1($p821.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p825.dup := 0;
  $M.330 := $store.i64($M.330,$p825,$i826);
  $M.330.dup := $store.i1($M.330.dup,$p825,$i826.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 535, 31} true;
  assume {:verifier.code 0} true;
  $p104.dup := 0;
  $i827 := $load.i128($M.330,$p104);
  $i827.dup := 0;
  call {:cexpr "l_0"} boogie_si_record_i128($i827);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  $p105.dup := 0;
  $M.331 := $store.i128($M.331,$p105,$i827);
  $M.331.dup := $store.i1($M.331.dup,$p105,$i827.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  $p828 := $bitcast.ref.ref($p105);
  $p828.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  $p829 := $add.ref($add.ref($p828,$mul.ref(0,16)),$mul.ref(0,1));
  $p829.dup := $or.i1($or.i1($p828.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  $p829.dup := 0;
  $i830 := $load.i64($M.331,$p829);
  $i830.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  $p831 := $add.ref($add.ref($p828,$mul.ref(0,16)),$mul.ref(8,1));
  $p831.dup := $or.i1($or.i1($p828.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  $p831.dup := 0;
  $i832 := $load.i64($M.331,$p831);
  $i832.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 20} true;
  assume {:verifier.code 0} true;
  call $i833, $i833.dup := FStar_UInt128_uint128_to_uint64($i830, $i830.dup, $i832, $i832.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 536, 57} true;
  assume {:verifier.code 0} true;
  $i834 := $and.i64($i833,2251799813685247);
  $i834.dup := $or.i1($i833.dup,0);
  call {:cexpr "tmp10"} boogie_si_record_i64($i834);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $p106.dup := 0;
  $M.332 := $store.i128($M.332,$p106,$i827);
  $M.332.dup := $store.i1($M.332.dup,$p106,$i827.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $p835 := $bitcast.ref.ref($p106);
  $p835.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $p836 := $add.ref($add.ref($p835,$mul.ref(0,16)),$mul.ref(0,1));
  $p836.dup := $or.i1($or.i1($p835.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $p836.dup := 0;
  $i837 := $load.i64($M.332,$p836);
  $i837.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $p838 := $add.ref($add.ref($p835,$mul.ref(0,16)),$mul.ref(8,1));
  $p838.dup := $or.i1($or.i1($p835.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $p838.dup := 0;
  $i839 := $load.i64($M.332,$p838);
  $i839.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  call $p840, $p840.dup := FStar_UInt128_shift_right($i837, $i837.dup, $i839, $i839.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $p841 := $bitcast.ref.ref($p107);
  $p841.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $p842 := $add.ref($add.ref($p841,$mul.ref(0,16)),$mul.ref(0,1));
  $p842.dup := $or.i1($or.i1($p841.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $i843 := $extractvalue.i64($p840,0);
  $i843.dup := $or.i1($p840.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $p842.dup := 0;
  $M.333 := $store.i64($M.333,$p842,$i843);
  $M.333.dup := $store.i1($M.333.dup,$p842,$i843.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $p844 := $add.ref($add.ref($p841,$mul.ref(0,16)),$mul.ref(8,1));
  $p844.dup := $or.i1($or.i1($p841.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $i845 := $extractvalue.i64($p840,1);
  $i845.dup := $or.i1($p840.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $p844.dup := 0;
  $M.333 := $store.i64($M.333,$p844,$i845);
  $M.333.dup := $store.i1($M.333.dup,$p844,$i845.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 50} true;
  assume {:verifier.code 0} true;
  $p107.dup := 0;
  $i846 := $load.i128($M.333,$p107);
  $i846.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  $p108.dup := 0;
  $M.334 := $store.i128($M.334,$p108,$i846);
  $M.334.dup := $store.i1($M.334.dup,$p108,$i846.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  $p847 := $bitcast.ref.ref($p108);
  $p847.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  $p848 := $add.ref($add.ref($p847,$mul.ref(0,16)),$mul.ref(0,1));
  $p848.dup := $or.i1($or.i1($p847.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  $p848.dup := 0;
  $i849 := $load.i64($M.334,$p848);
  $i849.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  $p850 := $add.ref($add.ref($p847,$mul.ref(0,16)),$mul.ref(8,1));
  $p850.dup := $or.i1($or.i1($p847.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  $p850.dup := 0;
  $i851 := $load.i64($M.334,$p850);
  $i851.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 537, 18} true;
  assume {:verifier.code 0} true;
  call $i852, $i852.dup := FStar_UInt128_uint128_to_uint64($i849, $i849.dup, $i851, $i851.dup);
  call {:cexpr "c10"} boogie_si_record_i64($i852);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  call $p853, $p853.dup := FStar_UInt128_uint64_to_uint128($i852, $i852.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  $p854 := $bitcast.ref.ref($p109);
  $p854.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  $p855 := $add.ref($add.ref($p854,$mul.ref(0,16)),$mul.ref(0,1));
  $p855.dup := $or.i1($or.i1($p854.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  $i856 := $extractvalue.i64($p853,0);
  $i856.dup := $or.i1($p853.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  $p855.dup := 0;
  $M.335 := $store.i64($M.335,$p855,$i856);
  $M.335.dup := $store.i1($M.335.dup,$p855,$i856.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  $p857 := $add.ref($add.ref($p854,$mul.ref(0,16)),$mul.ref(8,1));
  $p857.dup := $or.i1($or.i1($p854.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  $i858 := $extractvalue.i64($p853,1);
  $i858.dup := $or.i1($p853.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  $p857.dup := 0;
  $M.335 := $store.i64($M.335,$p857,$i858);
  $M.335.dup := $store.i1($M.335.dup,$p857,$i858.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 55} true;
  assume {:verifier.code 0} true;
  $p109.dup := 0;
  $i859 := $load.i128($M.335,$p109);
  $i859.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p110.dup := 0;
  $M.336 := $store.i128($M.336,$p110,$i363);
  $M.336.dup := $store.i1($M.336.dup,$p110,$i363.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p860 := $bitcast.ref.ref($p110);
  $p860.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p861 := $add.ref($add.ref($p860,$mul.ref(0,16)),$mul.ref(0,1));
  $p861.dup := $or.i1($or.i1($p860.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p861.dup := 0;
  $i862 := $load.i64($M.336,$p861);
  $i862.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p863 := $add.ref($add.ref($p860,$mul.ref(0,16)),$mul.ref(8,1));
  $p863.dup := $or.i1($or.i1($p860.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p863.dup := 0;
  $i864 := $load.i64($M.336,$p863);
  $i864.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p111.dup := 0;
  $M.337 := $store.i128($M.337,$p111,$i859);
  $M.337.dup := $store.i1($M.337.dup,$p111,$i859.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p865 := $bitcast.ref.ref($p111);
  $p865.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p866 := $add.ref($add.ref($p865,$mul.ref(0,16)),$mul.ref(0,1));
  $p866.dup := $or.i1($or.i1($p865.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p866.dup := 0;
  $i867 := $load.i64($M.337,$p866);
  $i867.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p868 := $add.ref($add.ref($p865,$mul.ref(0,16)),$mul.ref(8,1));
  $p868.dup := $or.i1($or.i1($p865.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p868.dup := 0;
  $i869 := $load.i64($M.337,$p868);
  $i869.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  call $p870, $p870.dup := FStar_UInt128_add($i862, $i862.dup, $i864, $i864.dup, $i867, $i867.dup, $i869, $i869.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p871 := $bitcast.ref.ref($p112);
  $p871.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p872 := $add.ref($add.ref($p871,$mul.ref(0,16)),$mul.ref(0,1));
  $p872.dup := $or.i1($or.i1($p871.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $i873 := $extractvalue.i64($p870,0);
  $i873.dup := $or.i1($p870.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p872.dup := 0;
  $M.338 := $store.i64($M.338,$p872,$i873);
  $M.338.dup := $store.i1($M.338.dup,$p872,$i873.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p874 := $add.ref($add.ref($p871,$mul.ref(0,16)),$mul.ref(8,1));
  $p874.dup := $or.i1($or.i1($p871.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $i875 := $extractvalue.i64($p870,1);
  $i875.dup := $or.i1($p870.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p874.dup := 0;
  $M.338 := $store.i64($M.338,$p874,$i875);
  $M.338.dup := $store.i1($M.338.dup,$p874,$i875.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 538, 31} true;
  assume {:verifier.code 0} true;
  $p112.dup := 0;
  $i876 := $load.i128($M.338,$p112);
  $i876.dup := 0;
  call {:cexpr "l_1"} boogie_si_record_i128($i876);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  $p113.dup := 0;
  $M.339 := $store.i128($M.339,$p113,$i876);
  $M.339.dup := $store.i1($M.339.dup,$p113,$i876.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  $p877 := $bitcast.ref.ref($p113);
  $p877.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  $p878 := $add.ref($add.ref($p877,$mul.ref(0,16)),$mul.ref(0,1));
  $p878.dup := $or.i1($or.i1($p877.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  $p878.dup := 0;
  $i879 := $load.i64($M.339,$p878);
  $i879.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  $p880 := $add.ref($add.ref($p877,$mul.ref(0,16)),$mul.ref(8,1));
  $p880.dup := $or.i1($or.i1($p877.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  $p880.dup := 0;
  $i881 := $load.i64($M.339,$p880);
  $i881.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 20} true;
  assume {:verifier.code 0} true;
  call $i882, $i882.dup := FStar_UInt128_uint128_to_uint64($i879, $i879.dup, $i881, $i881.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 539, 57} true;
  assume {:verifier.code 0} true;
  $i883 := $and.i64($i882,2251799813685247);
  $i883.dup := $or.i1($i882.dup,0);
  call {:cexpr "tmp20"} boogie_si_record_i64($i883);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $p114.dup := 0;
  $M.340 := $store.i128($M.340,$p114,$i876);
  $M.340.dup := $store.i1($M.340.dup,$p114,$i876.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $p884 := $bitcast.ref.ref($p114);
  $p884.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $p885 := $add.ref($add.ref($p884,$mul.ref(0,16)),$mul.ref(0,1));
  $p885.dup := $or.i1($or.i1($p884.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $p885.dup := 0;
  $i886 := $load.i64($M.340,$p885);
  $i886.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $p887 := $add.ref($add.ref($p884,$mul.ref(0,16)),$mul.ref(8,1));
  $p887.dup := $or.i1($or.i1($p884.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $p887.dup := 0;
  $i888 := $load.i64($M.340,$p887);
  $i888.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  call $p889, $p889.dup := FStar_UInt128_shift_right($i886, $i886.dup, $i888, $i888.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $p890 := $bitcast.ref.ref($p115);
  $p890.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $p891 := $add.ref($add.ref($p890,$mul.ref(0,16)),$mul.ref(0,1));
  $p891.dup := $or.i1($or.i1($p890.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $i892 := $extractvalue.i64($p889,0);
  $i892.dup := $or.i1($p889.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $p891.dup := 0;
  $M.341 := $store.i64($M.341,$p891,$i892);
  $M.341.dup := $store.i1($M.341.dup,$p891,$i892.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $p893 := $add.ref($add.ref($p890,$mul.ref(0,16)),$mul.ref(8,1));
  $p893.dup := $or.i1($or.i1($p890.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $i894 := $extractvalue.i64($p889,1);
  $i894.dup := $or.i1($p889.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $p893.dup := 0;
  $M.341 := $store.i64($M.341,$p893,$i894);
  $M.341.dup := $store.i1($M.341.dup,$p893,$i894.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 50} true;
  assume {:verifier.code 0} true;
  $p115.dup := 0;
  $i895 := $load.i128($M.341,$p115);
  $i895.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  $p116.dup := 0;
  $M.342 := $store.i128($M.342,$p116,$i895);
  $M.342.dup := $store.i1($M.342.dup,$p116,$i895.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  $p896 := $bitcast.ref.ref($p116);
  $p896.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  $p897 := $add.ref($add.ref($p896,$mul.ref(0,16)),$mul.ref(0,1));
  $p897.dup := $or.i1($or.i1($p896.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  $p897.dup := 0;
  $i898 := $load.i64($M.342,$p897);
  $i898.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  $p899 := $add.ref($add.ref($p896,$mul.ref(0,16)),$mul.ref(8,1));
  $p899.dup := $or.i1($or.i1($p896.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  $p899.dup := 0;
  $i900 := $load.i64($M.342,$p899);
  $i900.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 540, 18} true;
  assume {:verifier.code 0} true;
  call $i901, $i901.dup := FStar_UInt128_uint128_to_uint64($i898, $i898.dup, $i900, $i900.dup);
  call {:cexpr "c20"} boogie_si_record_i64($i901);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  call $p902, $p902.dup := FStar_UInt128_uint64_to_uint128($i901, $i901.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  $p903 := $bitcast.ref.ref($p117);
  $p903.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  $p904 := $add.ref($add.ref($p903,$mul.ref(0,16)),$mul.ref(0,1));
  $p904.dup := $or.i1($or.i1($p903.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  $i905 := $extractvalue.i64($p902,0);
  $i905.dup := $or.i1($p902.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  $p904.dup := 0;
  $M.343 := $store.i64($M.343,$p904,$i905);
  $M.343.dup := $store.i1($M.343.dup,$p904,$i905.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  $p906 := $add.ref($add.ref($p903,$mul.ref(0,16)),$mul.ref(8,1));
  $p906.dup := $or.i1($or.i1($p903.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  $i907 := $extractvalue.i64($p902,1);
  $i907.dup := $or.i1($p902.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  $p906.dup := 0;
  $M.343 := $store.i64($M.343,$p906,$i907);
  $M.343.dup := $store.i1($M.343.dup,$p906,$i907.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 55} true;
  assume {:verifier.code 0} true;
  $p117.dup := 0;
  $i908 := $load.i128($M.343,$p117);
  $i908.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p118.dup := 0;
  $M.344 := $store.i128($M.344,$p118,$i418);
  $M.344.dup := $store.i1($M.344.dup,$p118,$i418.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p909 := $bitcast.ref.ref($p118);
  $p909.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p910 := $add.ref($add.ref($p909,$mul.ref(0,16)),$mul.ref(0,1));
  $p910.dup := $or.i1($or.i1($p909.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p910.dup := 0;
  $i911 := $load.i64($M.344,$p910);
  $i911.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p912 := $add.ref($add.ref($p909,$mul.ref(0,16)),$mul.ref(8,1));
  $p912.dup := $or.i1($or.i1($p909.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p912.dup := 0;
  $i913 := $load.i64($M.344,$p912);
  $i913.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p119.dup := 0;
  $M.345 := $store.i128($M.345,$p119,$i908);
  $M.345.dup := $store.i1($M.345.dup,$p119,$i908.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p914 := $bitcast.ref.ref($p119);
  $p914.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p915 := $add.ref($add.ref($p914,$mul.ref(0,16)),$mul.ref(0,1));
  $p915.dup := $or.i1($or.i1($p914.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p915.dup := 0;
  $i916 := $load.i64($M.345,$p915);
  $i916.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p917 := $add.ref($add.ref($p914,$mul.ref(0,16)),$mul.ref(8,1));
  $p917.dup := $or.i1($or.i1($p914.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p917.dup := 0;
  $i918 := $load.i64($M.345,$p917);
  $i918.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  call $p919, $p919.dup := FStar_UInt128_add($i911, $i911.dup, $i913, $i913.dup, $i916, $i916.dup, $i918, $i918.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p920 := $bitcast.ref.ref($p120);
  $p920.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p921 := $add.ref($add.ref($p920,$mul.ref(0,16)),$mul.ref(0,1));
  $p921.dup := $or.i1($or.i1($p920.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $i922 := $extractvalue.i64($p919,0);
  $i922.dup := $or.i1($p919.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p921.dup := 0;
  $M.346 := $store.i64($M.346,$p921,$i922);
  $M.346.dup := $store.i1($M.346.dup,$p921,$i922.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p923 := $add.ref($add.ref($p920,$mul.ref(0,16)),$mul.ref(8,1));
  $p923.dup := $or.i1($or.i1($p920.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $i924 := $extractvalue.i64($p919,1);
  $i924.dup := $or.i1($p919.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p923.dup := 0;
  $M.346 := $store.i64($M.346,$p923,$i924);
  $M.346.dup := $store.i1($M.346.dup,$p923,$i924.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 541, 31} true;
  assume {:verifier.code 0} true;
  $p120.dup := 0;
  $i925 := $load.i128($M.346,$p120);
  $i925.dup := 0;
  call {:cexpr "l_2"} boogie_si_record_i128($i925);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  $p121.dup := 0;
  $M.347 := $store.i128($M.347,$p121,$i925);
  $M.347.dup := $store.i1($M.347.dup,$p121,$i925.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  $p926 := $bitcast.ref.ref($p121);
  $p926.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  $p927 := $add.ref($add.ref($p926,$mul.ref(0,16)),$mul.ref(0,1));
  $p927.dup := $or.i1($or.i1($p926.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  $p927.dup := 0;
  $i928 := $load.i64($M.347,$p927);
  $i928.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  $p929 := $add.ref($add.ref($p926,$mul.ref(0,16)),$mul.ref(8,1));
  $p929.dup := $or.i1($or.i1($p926.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  $p929.dup := 0;
  $i930 := $load.i64($M.347,$p929);
  $i930.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 20} true;
  assume {:verifier.code 0} true;
  call $i931, $i931.dup := FStar_UInt128_uint128_to_uint64($i928, $i928.dup, $i930, $i930.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 542, 57} true;
  assume {:verifier.code 0} true;
  $i932 := $and.i64($i931,2251799813685247);
  $i932.dup := $or.i1($i931.dup,0);
  call {:cexpr "tmp30"} boogie_si_record_i64($i932);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $p122.dup := 0;
  $M.348 := $store.i128($M.348,$p122,$i925);
  $M.348.dup := $store.i1($M.348.dup,$p122,$i925.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $p933 := $bitcast.ref.ref($p122);
  $p933.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $p934 := $add.ref($add.ref($p933,$mul.ref(0,16)),$mul.ref(0,1));
  $p934.dup := $or.i1($or.i1($p933.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $p934.dup := 0;
  $i935 := $load.i64($M.348,$p934);
  $i935.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $p936 := $add.ref($add.ref($p933,$mul.ref(0,16)),$mul.ref(8,1));
  $p936.dup := $or.i1($or.i1($p933.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $p936.dup := 0;
  $i937 := $load.i64($M.348,$p936);
  $i937.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  call $p938, $p938.dup := FStar_UInt128_shift_right($i935, $i935.dup, $i937, $i937.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $p939 := $bitcast.ref.ref($p123);
  $p939.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $p940 := $add.ref($add.ref($p939,$mul.ref(0,16)),$mul.ref(0,1));
  $p940.dup := $or.i1($or.i1($p939.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $i941 := $extractvalue.i64($p938,0);
  $i941.dup := $or.i1($p938.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $p940.dup := 0;
  $M.349 := $store.i64($M.349,$p940,$i941);
  $M.349.dup := $store.i1($M.349.dup,$p940,$i941.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $p942 := $add.ref($add.ref($p939,$mul.ref(0,16)),$mul.ref(8,1));
  $p942.dup := $or.i1($or.i1($p939.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $i943 := $extractvalue.i64($p938,1);
  $i943.dup := $or.i1($p938.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $p942.dup := 0;
  $M.349 := $store.i64($M.349,$p942,$i943);
  $M.349.dup := $store.i1($M.349.dup,$p942,$i943.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 50} true;
  assume {:verifier.code 0} true;
  $p123.dup := 0;
  $i944 := $load.i128($M.349,$p123);
  $i944.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  $p124.dup := 0;
  $M.350 := $store.i128($M.350,$p124,$i944);
  $M.350.dup := $store.i1($M.350.dup,$p124,$i944.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  $p945 := $bitcast.ref.ref($p124);
  $p945.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  $p946 := $add.ref($add.ref($p945,$mul.ref(0,16)),$mul.ref(0,1));
  $p946.dup := $or.i1($or.i1($p945.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  $p946.dup := 0;
  $i947 := $load.i64($M.350,$p946);
  $i947.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  $p948 := $add.ref($add.ref($p945,$mul.ref(0,16)),$mul.ref(8,1));
  $p948.dup := $or.i1($or.i1($p945.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  $p948.dup := 0;
  $i949 := $load.i64($M.350,$p948);
  $i949.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 543, 18} true;
  assume {:verifier.code 0} true;
  call $i950, $i950.dup := FStar_UInt128_uint128_to_uint64($i947, $i947.dup, $i949, $i949.dup);
  call {:cexpr "c30"} boogie_si_record_i64($i950);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  call $p951, $p951.dup := FStar_UInt128_uint64_to_uint128($i950, $i950.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  $p952 := $bitcast.ref.ref($p125);
  $p952.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  $p953 := $add.ref($add.ref($p952,$mul.ref(0,16)),$mul.ref(0,1));
  $p953.dup := $or.i1($or.i1($p952.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  $i954 := $extractvalue.i64($p951,0);
  $i954.dup := $or.i1($p951.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  $p953.dup := 0;
  $M.351 := $store.i64($M.351,$p953,$i954);
  $M.351.dup := $store.i1($M.351.dup,$p953,$i954.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  $p955 := $add.ref($add.ref($p952,$mul.ref(0,16)),$mul.ref(8,1));
  $p955.dup := $or.i1($or.i1($p952.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  $i956 := $extractvalue.i64($p951,1);
  $i956.dup := $or.i1($p951.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  $p955.dup := 0;
  $M.351 := $store.i64($M.351,$p955,$i956);
  $M.351.dup := $store.i1($M.351.dup,$p955,$i956.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 55} true;
  assume {:verifier.code 0} true;
  $p125.dup := 0;
  $i957 := $load.i128($M.351,$p125);
  $i957.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p126.dup := 0;
  $M.352 := $store.i128($M.352,$p126,$i473);
  $M.352.dup := $store.i1($M.352.dup,$p126,$i473.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p958 := $bitcast.ref.ref($p126);
  $p958.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p959 := $add.ref($add.ref($p958,$mul.ref(0,16)),$mul.ref(0,1));
  $p959.dup := $or.i1($or.i1($p958.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p959.dup := 0;
  $i960 := $load.i64($M.352,$p959);
  $i960.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p961 := $add.ref($add.ref($p958,$mul.ref(0,16)),$mul.ref(8,1));
  $p961.dup := $or.i1($or.i1($p958.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p961.dup := 0;
  $i962 := $load.i64($M.352,$p961);
  $i962.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p127.dup := 0;
  $M.353 := $store.i128($M.353,$p127,$i957);
  $M.353.dup := $store.i1($M.353.dup,$p127,$i957.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p963 := $bitcast.ref.ref($p127);
  $p963.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p964 := $add.ref($add.ref($p963,$mul.ref(0,16)),$mul.ref(0,1));
  $p964.dup := $or.i1($or.i1($p963.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p964.dup := 0;
  $i965 := $load.i64($M.353,$p964);
  $i965.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p966 := $add.ref($add.ref($p963,$mul.ref(0,16)),$mul.ref(8,1));
  $p966.dup := $or.i1($or.i1($p963.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p966.dup := 0;
  $i967 := $load.i64($M.353,$p966);
  $i967.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  call $p968, $p968.dup := FStar_UInt128_add($i960, $i960.dup, $i962, $i962.dup, $i965, $i965.dup, $i967, $i967.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p969 := $bitcast.ref.ref($p128);
  $p969.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p970 := $add.ref($add.ref($p969,$mul.ref(0,16)),$mul.ref(0,1));
  $p970.dup := $or.i1($or.i1($p969.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $i971 := $extractvalue.i64($p968,0);
  $i971.dup := $or.i1($p968.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p970.dup := 0;
  $M.354 := $store.i64($M.354,$p970,$i971);
  $M.354.dup := $store.i1($M.354.dup,$p970,$i971.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p972 := $add.ref($add.ref($p969,$mul.ref(0,16)),$mul.ref(8,1));
  $p972.dup := $or.i1($or.i1($p969.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $i973 := $extractvalue.i64($p968,1);
  $i973.dup := $or.i1($p968.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p972.dup := 0;
  $M.354 := $store.i64($M.354,$p972,$i973);
  $M.354.dup := $store.i1($M.354.dup,$p972,$i973.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 544, 31} true;
  assume {:verifier.code 0} true;
  $p128.dup := 0;
  $i974 := $load.i128($M.354,$p128);
  $i974.dup := 0;
  call {:cexpr "l_3"} boogie_si_record_i128($i974);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  $p129.dup := 0;
  $M.355 := $store.i128($M.355,$p129,$i974);
  $M.355.dup := $store.i1($M.355.dup,$p129,$i974.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  $p975 := $bitcast.ref.ref($p129);
  $p975.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  $p976 := $add.ref($add.ref($p975,$mul.ref(0,16)),$mul.ref(0,1));
  $p976.dup := $or.i1($or.i1($p975.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  $p976.dup := 0;
  $i977 := $load.i64($M.355,$p976);
  $i977.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  $p978 := $add.ref($add.ref($p975,$mul.ref(0,16)),$mul.ref(8,1));
  $p978.dup := $or.i1($or.i1($p975.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  $p978.dup := 0;
  $i979 := $load.i64($M.355,$p978);
  $i979.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 20} true;
  assume {:verifier.code 0} true;
  call $i980, $i980.dup := FStar_UInt128_uint128_to_uint64($i977, $i977.dup, $i979, $i979.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 545, 57} true;
  assume {:verifier.code 0} true;
  $i981 := $and.i64($i980,2251799813685247);
  $i981.dup := $or.i1($i980.dup,0);
  call {:cexpr "tmp40"} boogie_si_record_i64($i981);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $p130.dup := 0;
  $M.356 := $store.i128($M.356,$p130,$i974);
  $M.356.dup := $store.i1($M.356.dup,$p130,$i974.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $p982 := $bitcast.ref.ref($p130);
  $p982.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $p983 := $add.ref($add.ref($p982,$mul.ref(0,16)),$mul.ref(0,1));
  $p983.dup := $or.i1($or.i1($p982.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $p983.dup := 0;
  $i984 := $load.i64($M.356,$p983);
  $i984.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $p985 := $add.ref($add.ref($p982,$mul.ref(0,16)),$mul.ref(8,1));
  $p985.dup := $or.i1($or.i1($p982.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $p985.dup := 0;
  $i986 := $load.i64($M.356,$p985);
  $i986.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  call $p987, $p987.dup := FStar_UInt128_shift_right($i984, $i984.dup, $i986, $i986.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $p988 := $bitcast.ref.ref($p131);
  $p988.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $p989 := $add.ref($add.ref($p988,$mul.ref(0,16)),$mul.ref(0,1));
  $p989.dup := $or.i1($or.i1($p988.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $i990 := $extractvalue.i64($p987,0);
  $i990.dup := $or.i1($p987.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $p989.dup := 0;
  $M.357 := $store.i64($M.357,$p989,$i990);
  $M.357.dup := $store.i1($M.357.dup,$p989,$i990.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $p991 := $add.ref($add.ref($p988,$mul.ref(0,16)),$mul.ref(8,1));
  $p991.dup := $or.i1($or.i1($p988.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $i992 := $extractvalue.i64($p987,1);
  $i992.dup := $or.i1($p987.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $p991.dup := 0;
  $M.357 := $store.i64($M.357,$p991,$i992);
  $M.357.dup := $store.i1($M.357.dup,$p991,$i992.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 50} true;
  assume {:verifier.code 0} true;
  $p131.dup := 0;
  $i993 := $load.i128($M.357,$p131);
  $i993.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  $p132.dup := 0;
  $M.358 := $store.i128($M.358,$p132,$i993);
  $M.358.dup := $store.i1($M.358.dup,$p132,$i993.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  $p994 := $bitcast.ref.ref($p132);
  $p994.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  $p995 := $add.ref($add.ref($p994,$mul.ref(0,16)),$mul.ref(0,1));
  $p995.dup := $or.i1($or.i1($p994.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  $p995.dup := 0;
  $i996 := $load.i64($M.358,$p995);
  $i996.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  $p997 := $add.ref($add.ref($p994,$mul.ref(0,16)),$mul.ref(8,1));
  $p997.dup := $or.i1($or.i1($p994.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  $p997.dup := 0;
  $i998 := $load.i64($M.358,$p997);
  $i998.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 546, 18} true;
  assume {:verifier.code 0} true;
  call $i999, $i999.dup := FStar_UInt128_uint128_to_uint64($i996, $i996.dup, $i998, $i998.dup);
  call {:cexpr "c40"} boogie_si_record_i64($i999);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 547, 30} true;
  assume {:verifier.code 0} true;
  $i1000 := $mul.i64($i999,19);
  $i1000.dup := $or.i1($i999.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 547, 24} true;
  assume {:verifier.code 0} true;
  $i1001 := $add.i64($i785,$i1000);
  $i1001.dup := 0;
  call {:cexpr "l_4"} boogie_si_record_i64($i1001);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 548, 24} true;
  assume {:verifier.code 0} true;
  $i1002 := $and.i64($i1001,2251799813685247);
  $i1002.dup := $or.i1($i1001.dup,0);
  call {:cexpr "tmp0_"} boogie_si_record_i64($i1002);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 549, 22} true;
  assume {:verifier.code 0} true;
  $i1003 := $lshr.i64($i1001,51);
  $i1003.dup := $or.i1($i1001.dup,0);
  call {:cexpr "c50"} boogie_si_record_i64($i1003);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 551, 25} true;
  assume {:verifier.code 0} true;
  $i1004 := $add.i64($i834,$i1003);
  $i1004.dup := 0;
  call {:cexpr "o111"} boogie_si_record_i64($i1004);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  call $p1005, $p1005.dup := FStar_UInt128_uint64_to_uint128(0, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  $p1006 := $bitcast.ref.ref($p133);
  $p1006.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  $p1007 := $add.ref($add.ref($p1006,$mul.ref(0,16)),$mul.ref(0,1));
  $p1007.dup := $or.i1($or.i1($p1006.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  $i1008 := $extractvalue.i64($p1005,0);
  $i1008.dup := $or.i1($p1005.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  $p1007.dup := 0;
  $M.359 := $store.i64($M.359,$p1007,$i1008);
  $M.359.dup := $store.i1($M.359.dup,$p1007,$i1008.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  $p1009 := $add.ref($add.ref($p1006,$mul.ref(0,16)),$mul.ref(8,1));
  $p1009.dup := $or.i1($or.i1($p1006.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  $i1010 := $extractvalue.i64($p1005,1);
  $i1010.dup := $or.i1($p1005.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  $p1009.dup := 0;
  $M.359 := $store.i64($M.359,$p1009,$i1010);
  $M.359.dup := $store.i1($M.359.dup,$p1009,$i1010.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 33} true;
  assume {:verifier.code 0} true;
  $p133.dup := 0;
  $i1011 := $load.i128($M.359,$p133);
  $i1011.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p134.dup := 0;
  $M.360 := $store.i128($M.360,$p134,$i534);
  $M.360.dup := $store.i1($M.360.dup,$p134,$i534.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1012 := $bitcast.ref.ref($p134);
  $p1012.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1013 := $add.ref($add.ref($p1012,$mul.ref(0,16)),$mul.ref(0,1));
  $p1013.dup := $or.i1($or.i1($p1012.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1013.dup := 0;
  $i1014 := $load.i64($M.360,$p1013);
  $i1014.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1015 := $add.ref($add.ref($p1012,$mul.ref(0,16)),$mul.ref(8,1));
  $p1015.dup := $or.i1($or.i1($p1012.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1015.dup := 0;
  $i1016 := $load.i64($M.360,$p1015);
  $i1016.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p135.dup := 0;
  $M.361 := $store.i128($M.361,$p135,$i1011);
  $M.361.dup := $store.i1($M.361.dup,$p135,$i1011.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1017 := $bitcast.ref.ref($p135);
  $p1017.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1018 := $add.ref($add.ref($p1017,$mul.ref(0,16)),$mul.ref(0,1));
  $p1018.dup := $or.i1($or.i1($p1017.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1018.dup := 0;
  $i1019 := $load.i64($M.361,$p1018);
  $i1019.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1020 := $add.ref($add.ref($p1017,$mul.ref(0,16)),$mul.ref(8,1));
  $p1020.dup := $or.i1($or.i1($p1017.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1020.dup := 0;
  $i1021 := $load.i64($M.361,$p1020);
  $i1021.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  call $p1022, $p1022.dup := FStar_UInt128_add($i1014, $i1014.dup, $i1016, $i1016.dup, $i1019, $i1019.dup, $i1021, $i1021.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1023 := $bitcast.ref.ref($p136);
  $p1023.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1024 := $add.ref($add.ref($p1023,$mul.ref(0,16)),$mul.ref(0,1));
  $p1024.dup := $or.i1($or.i1($p1023.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $i1025 := $extractvalue.i64($p1022,0);
  $i1025.dup := $or.i1($p1022.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1024.dup := 0;
  $M.362 := $store.i64($M.362,$p1024,$i1025);
  $M.362.dup := $store.i1($M.362.dup,$p1024,$i1025.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1026 := $add.ref($add.ref($p1023,$mul.ref(0,16)),$mul.ref(8,1));
  $p1026.dup := $or.i1($or.i1($p1023.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $i1027 := $extractvalue.i64($p1022,1);
  $i1027.dup := $or.i1($p1022.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p1026.dup := 0;
  $M.362 := $store.i64($M.362,$p1026,$i1027);
  $M.362.dup := $store.i1($M.362.dup,$p1026,$i1027.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 556, 9} true;
  assume {:verifier.code 0} true;
  $p136.dup := 0;
  $i1028 := $load.i128($M.362,$p136);
  $i1028.dup := 0;
  call {:cexpr "l_5"} boogie_si_record_i128($i1028);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  $p137.dup := 0;
  $M.363 := $store.i128($M.363,$p137,$i1028);
  $M.363.dup := $store.i1($M.363.dup,$p137,$i1028.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  $p1029 := $bitcast.ref.ref($p137);
  $p1029.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  $p1030 := $add.ref($add.ref($p1029,$mul.ref(0,16)),$mul.ref(0,1));
  $p1030.dup := $or.i1($or.i1($p1029.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  $p1030.dup := 0;
  $i1031 := $load.i64($M.363,$p1030);
  $i1031.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  $p1032 := $add.ref($add.ref($p1029,$mul.ref(0,16)),$mul.ref(8,1));
  $p1032.dup := $or.i1($or.i1($p1029.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  $p1032.dup := 0;
  $i1033 := $load.i64($M.363,$p1032);
  $i1033.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 19} true;
  assume {:verifier.code 0} true;
  call $i1034, $i1034.dup := FStar_UInt128_uint128_to_uint64($i1031, $i1031.dup, $i1033, $i1033.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 557, 56} true;
  assume {:verifier.code 0} true;
  $i1035 := $and.i64($i1034,2251799813685247);
  $i1035.dup := $or.i1($i1034.dup,0);
  call {:cexpr "tmp0"} boogie_si_record_i64($i1035);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $p138.dup := 0;
  $M.364 := $store.i128($M.364,$p138,$i1028);
  $M.364.dup := $store.i1($M.364.dup,$p138,$i1028.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $p1036 := $bitcast.ref.ref($p138);
  $p1036.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $p1037 := $add.ref($add.ref($p1036,$mul.ref(0,16)),$mul.ref(0,1));
  $p1037.dup := $or.i1($or.i1($p1036.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $p1037.dup := 0;
  $i1038 := $load.i64($M.364,$p1037);
  $i1038.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $p1039 := $add.ref($add.ref($p1036,$mul.ref(0,16)),$mul.ref(8,1));
  $p1039.dup := $or.i1($or.i1($p1036.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $p1039.dup := 0;
  $i1040 := $load.i64($M.364,$p1039);
  $i1040.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  call $p1041, $p1041.dup := FStar_UInt128_shift_right($i1038, $i1038.dup, $i1040, $i1040.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $p1042 := $bitcast.ref.ref($p139);
  $p1042.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $p1043 := $add.ref($add.ref($p1042,$mul.ref(0,16)),$mul.ref(0,1));
  $p1043.dup := $or.i1($or.i1($p1042.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $i1044 := $extractvalue.i64($p1041,0);
  $i1044.dup := $or.i1($p1041.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $p1043.dup := 0;
  $M.365 := $store.i64($M.365,$p1043,$i1044);
  $M.365.dup := $store.i1($M.365.dup,$p1043,$i1044.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $p1045 := $add.ref($add.ref($p1042,$mul.ref(0,16)),$mul.ref(8,1));
  $p1045.dup := $or.i1($or.i1($p1042.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $i1046 := $extractvalue.i64($p1041,1);
  $i1046.dup := $or.i1($p1041.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $p1045.dup := 0;
  $M.365 := $store.i64($M.365,$p1045,$i1046);
  $M.365.dup := $store.i1($M.365.dup,$p1045,$i1046.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 49} true;
  assume {:verifier.code 0} true;
  $p139.dup := 0;
  $i1047 := $load.i128($M.365,$p139);
  $i1047.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  $p140.dup := 0;
  $M.366 := $store.i128($M.366,$p140,$i1047);
  $M.366.dup := $store.i1($M.366.dup,$p140,$i1047.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  $p1048 := $bitcast.ref.ref($p140);
  $p1048.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  $p1049 := $add.ref($add.ref($p1048,$mul.ref(0,16)),$mul.ref(0,1));
  $p1049.dup := $or.i1($or.i1($p1048.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  $p1049.dup := 0;
  $i1050 := $load.i64($M.366,$p1049);
  $i1050.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  $p1051 := $add.ref($add.ref($p1048,$mul.ref(0,16)),$mul.ref(8,1));
  $p1051.dup := $or.i1($or.i1($p1048.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  $p1051.dup := 0;
  $i1052 := $load.i64($M.366,$p1051);
  $i1052.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 558, 17} true;
  assume {:verifier.code 0} true;
  call $i1053, $i1053.dup := FStar_UInt128_uint128_to_uint64($i1050, $i1050.dup, $i1052, $i1052.dup);
  call {:cexpr "c0"} boogie_si_record_i64($i1053);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  call $p1054, $p1054.dup := FStar_UInt128_uint64_to_uint128($i1053, $i1053.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  $p1055 := $bitcast.ref.ref($p141);
  $p1055.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  $p1056 := $add.ref($add.ref($p1055,$mul.ref(0,16)),$mul.ref(0,1));
  $p1056.dup := $or.i1($or.i1($p1055.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  $i1057 := $extractvalue.i64($p1054,0);
  $i1057.dup := $or.i1($p1054.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  $p1056.dup := 0;
  $M.367 := $store.i64($M.367,$p1056,$i1057);
  $M.367.dup := $store.i1($M.367.dup,$p1056,$i1057.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  $p1058 := $add.ref($add.ref($p1055,$mul.ref(0,16)),$mul.ref(8,1));
  $p1058.dup := $or.i1($or.i1($p1055.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  $i1059 := $extractvalue.i64($p1054,1);
  $i1059.dup := $or.i1($p1054.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  $p1058.dup := 0;
  $M.367 := $store.i64($M.367,$p1058,$i1059);
  $M.367.dup := $store.i1($M.367.dup,$p1058,$i1059.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 55} true;
  assume {:verifier.code 0} true;
  $p141.dup := 0;
  $i1060 := $load.i128($M.367,$p141);
  $i1060.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p142.dup := 0;
  $M.368 := $store.i128($M.368,$p142,$i589);
  $M.368.dup := $store.i1($M.368.dup,$p142,$i589.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1061 := $bitcast.ref.ref($p142);
  $p1061.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1062 := $add.ref($add.ref($p1061,$mul.ref(0,16)),$mul.ref(0,1));
  $p1062.dup := $or.i1($or.i1($p1061.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1062.dup := 0;
  $i1063 := $load.i64($M.368,$p1062);
  $i1063.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1064 := $add.ref($add.ref($p1061,$mul.ref(0,16)),$mul.ref(8,1));
  $p1064.dup := $or.i1($or.i1($p1061.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1064.dup := 0;
  $i1065 := $load.i64($M.368,$p1064);
  $i1065.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p143.dup := 0;
  $M.369 := $store.i128($M.369,$p143,$i1060);
  $M.369.dup := $store.i1($M.369.dup,$p143,$i1060.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1066 := $bitcast.ref.ref($p143);
  $p1066.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1067 := $add.ref($add.ref($p1066,$mul.ref(0,16)),$mul.ref(0,1));
  $p1067.dup := $or.i1($or.i1($p1066.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1067.dup := 0;
  $i1068 := $load.i64($M.369,$p1067);
  $i1068.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1069 := $add.ref($add.ref($p1066,$mul.ref(0,16)),$mul.ref(8,1));
  $p1069.dup := $or.i1($or.i1($p1066.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1069.dup := 0;
  $i1070 := $load.i64($M.369,$p1069);
  $i1070.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  call $p1071, $p1071.dup := FStar_UInt128_add($i1063, $i1063.dup, $i1065, $i1065.dup, $i1068, $i1068.dup, $i1070, $i1070.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1072 := $bitcast.ref.ref($p144);
  $p1072.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1073 := $add.ref($add.ref($p1072,$mul.ref(0,16)),$mul.ref(0,1));
  $p1073.dup := $or.i1($or.i1($p1072.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $i1074 := $extractvalue.i64($p1071,0);
  $i1074.dup := $or.i1($p1071.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1073.dup := 0;
  $M.370 := $store.i64($M.370,$p1073,$i1074);
  $M.370.dup := $store.i1($M.370.dup,$p1073,$i1074.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1075 := $add.ref($add.ref($p1072,$mul.ref(0,16)),$mul.ref(8,1));
  $p1075.dup := $or.i1($or.i1($p1072.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $i1076 := $extractvalue.i64($p1071,1);
  $i1076.dup := $or.i1($p1071.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p1075.dup := 0;
  $M.370 := $store.i64($M.370,$p1075,$i1076);
  $M.370.dup := $store.i1($M.370.dup,$p1075,$i1076.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 559, 31} true;
  assume {:verifier.code 0} true;
  $p144.dup := 0;
  $i1077 := $load.i128($M.370,$p144);
  $i1077.dup := 0;
  call {:cexpr "l_6"} boogie_si_record_i128($i1077);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  $p145.dup := 0;
  $M.371 := $store.i128($M.371,$p145,$i1077);
  $M.371.dup := $store.i1($M.371.dup,$p145,$i1077.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  $p1078 := $bitcast.ref.ref($p145);
  $p1078.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  $p1079 := $add.ref($add.ref($p1078,$mul.ref(0,16)),$mul.ref(0,1));
  $p1079.dup := $or.i1($or.i1($p1078.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  $p1079.dup := 0;
  $i1080 := $load.i64($M.371,$p1079);
  $i1080.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  $p1081 := $add.ref($add.ref($p1078,$mul.ref(0,16)),$mul.ref(8,1));
  $p1081.dup := $or.i1($or.i1($p1078.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  $p1081.dup := 0;
  $i1082 := $load.i64($M.371,$p1081);
  $i1082.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 19} true;
  assume {:verifier.code 0} true;
  call $i1083, $i1083.dup := FStar_UInt128_uint128_to_uint64($i1080, $i1080.dup, $i1082, $i1082.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 560, 56} true;
  assume {:verifier.code 0} true;
  $i1084 := $and.i64($i1083,2251799813685247);
  $i1084.dup := $or.i1($i1083.dup,0);
  call {:cexpr "tmp1"} boogie_si_record_i64($i1084);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $p146.dup := 0;
  $M.372 := $store.i128($M.372,$p146,$i1077);
  $M.372.dup := $store.i1($M.372.dup,$p146,$i1077.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $p1085 := $bitcast.ref.ref($p146);
  $p1085.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $p1086 := $add.ref($add.ref($p1085,$mul.ref(0,16)),$mul.ref(0,1));
  $p1086.dup := $or.i1($or.i1($p1085.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $p1086.dup := 0;
  $i1087 := $load.i64($M.372,$p1086);
  $i1087.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $p1088 := $add.ref($add.ref($p1085,$mul.ref(0,16)),$mul.ref(8,1));
  $p1088.dup := $or.i1($or.i1($p1085.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $p1088.dup := 0;
  $i1089 := $load.i64($M.372,$p1088);
  $i1089.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  call $p1090, $p1090.dup := FStar_UInt128_shift_right($i1087, $i1087.dup, $i1089, $i1089.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $p1091 := $bitcast.ref.ref($p147);
  $p1091.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $p1092 := $add.ref($add.ref($p1091,$mul.ref(0,16)),$mul.ref(0,1));
  $p1092.dup := $or.i1($or.i1($p1091.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $i1093 := $extractvalue.i64($p1090,0);
  $i1093.dup := $or.i1($p1090.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $p1092.dup := 0;
  $M.373 := $store.i64($M.373,$p1092,$i1093);
  $M.373.dup := $store.i1($M.373.dup,$p1092,$i1093.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $p1094 := $add.ref($add.ref($p1091,$mul.ref(0,16)),$mul.ref(8,1));
  $p1094.dup := $or.i1($or.i1($p1091.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $i1095 := $extractvalue.i64($p1090,1);
  $i1095.dup := $or.i1($p1090.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $p1094.dup := 0;
  $M.373 := $store.i64($M.373,$p1094,$i1095);
  $M.373.dup := $store.i1($M.373.dup,$p1094,$i1095.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 49} true;
  assume {:verifier.code 0} true;
  $p147.dup := 0;
  $i1096 := $load.i128($M.373,$p147);
  $i1096.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  $p148.dup := 0;
  $M.374 := $store.i128($M.374,$p148,$i1096);
  $M.374.dup := $store.i1($M.374.dup,$p148,$i1096.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  $p1097 := $bitcast.ref.ref($p148);
  $p1097.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  $p1098 := $add.ref($add.ref($p1097,$mul.ref(0,16)),$mul.ref(0,1));
  $p1098.dup := $or.i1($or.i1($p1097.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  $p1098.dup := 0;
  $i1099 := $load.i64($M.374,$p1098);
  $i1099.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  $p1100 := $add.ref($add.ref($p1097,$mul.ref(0,16)),$mul.ref(8,1));
  $p1100.dup := $or.i1($or.i1($p1097.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  $p1100.dup := 0;
  $i1101 := $load.i64($M.374,$p1100);
  $i1101.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 561, 17} true;
  assume {:verifier.code 0} true;
  call $i1102, $i1102.dup := FStar_UInt128_uint128_to_uint64($i1099, $i1099.dup, $i1101, $i1101.dup);
  call {:cexpr "c1"} boogie_si_record_i64($i1102);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  call $p1103, $p1103.dup := FStar_UInt128_uint64_to_uint128($i1102, $i1102.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  $p1104 := $bitcast.ref.ref($p149);
  $p1104.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  $p1105 := $add.ref($add.ref($p1104,$mul.ref(0,16)),$mul.ref(0,1));
  $p1105.dup := $or.i1($or.i1($p1104.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  $i1106 := $extractvalue.i64($p1103,0);
  $i1106.dup := $or.i1($p1103.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  $p1105.dup := 0;
  $M.375 := $store.i64($M.375,$p1105,$i1106);
  $M.375.dup := $store.i1($M.375.dup,$p1105,$i1106.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  $p1107 := $add.ref($add.ref($p1104,$mul.ref(0,16)),$mul.ref(8,1));
  $p1107.dup := $or.i1($or.i1($p1104.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  $i1108 := $extractvalue.i64($p1103,1);
  $i1108.dup := $or.i1($p1103.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  $p1107.dup := 0;
  $M.375 := $store.i64($M.375,$p1107,$i1108);
  $M.375.dup := $store.i1($M.375.dup,$p1107,$i1108.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 55} true;
  assume {:verifier.code 0} true;
  $p149.dup := 0;
  $i1109 := $load.i128($M.375,$p149);
  $i1109.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p150.dup := 0;
  $M.376 := $store.i128($M.376,$p150,$i644);
  $M.376.dup := $store.i1($M.376.dup,$p150,$i644.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1110 := $bitcast.ref.ref($p150);
  $p1110.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1111 := $add.ref($add.ref($p1110,$mul.ref(0,16)),$mul.ref(0,1));
  $p1111.dup := $or.i1($or.i1($p1110.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1111.dup := 0;
  $i1112 := $load.i64($M.376,$p1111);
  $i1112.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1113 := $add.ref($add.ref($p1110,$mul.ref(0,16)),$mul.ref(8,1));
  $p1113.dup := $or.i1($or.i1($p1110.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1113.dup := 0;
  $i1114 := $load.i64($M.376,$p1113);
  $i1114.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p151.dup := 0;
  $M.377 := $store.i128($M.377,$p151,$i1109);
  $M.377.dup := $store.i1($M.377.dup,$p151,$i1109.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1115 := $bitcast.ref.ref($p151);
  $p1115.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1116 := $add.ref($add.ref($p1115,$mul.ref(0,16)),$mul.ref(0,1));
  $p1116.dup := $or.i1($or.i1($p1115.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1116.dup := 0;
  $i1117 := $load.i64($M.377,$p1116);
  $i1117.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1118 := $add.ref($add.ref($p1115,$mul.ref(0,16)),$mul.ref(8,1));
  $p1118.dup := $or.i1($or.i1($p1115.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1118.dup := 0;
  $i1119 := $load.i64($M.377,$p1118);
  $i1119.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  call $p1120, $p1120.dup := FStar_UInt128_add($i1112, $i1112.dup, $i1114, $i1114.dup, $i1117, $i1117.dup, $i1119, $i1119.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1121 := $bitcast.ref.ref($p152);
  $p1121.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1122 := $add.ref($add.ref($p1121,$mul.ref(0,16)),$mul.ref(0,1));
  $p1122.dup := $or.i1($or.i1($p1121.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $i1123 := $extractvalue.i64($p1120,0);
  $i1123.dup := $or.i1($p1120.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1122.dup := 0;
  $M.378 := $store.i64($M.378,$p1122,$i1123);
  $M.378.dup := $store.i1($M.378.dup,$p1122,$i1123.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1124 := $add.ref($add.ref($p1121,$mul.ref(0,16)),$mul.ref(8,1));
  $p1124.dup := $or.i1($or.i1($p1121.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $i1125 := $extractvalue.i64($p1120,1);
  $i1125.dup := $or.i1($p1120.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p1124.dup := 0;
  $M.378 := $store.i64($M.378,$p1124,$i1125);
  $M.378.dup := $store.i1($M.378.dup,$p1124,$i1125.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 562, 31} true;
  assume {:verifier.code 0} true;
  $p152.dup := 0;
  $i1126 := $load.i128($M.378,$p152);
  $i1126.dup := 0;
  call {:cexpr "l_7"} boogie_si_record_i128($i1126);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  $p153.dup := 0;
  $M.379 := $store.i128($M.379,$p153,$i1126);
  $M.379.dup := $store.i1($M.379.dup,$p153,$i1126.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  $p1127 := $bitcast.ref.ref($p153);
  $p1127.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  $p1128 := $add.ref($add.ref($p1127,$mul.ref(0,16)),$mul.ref(0,1));
  $p1128.dup := $or.i1($or.i1($p1127.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  $p1128.dup := 0;
  $i1129 := $load.i64($M.379,$p1128);
  $i1129.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  $p1130 := $add.ref($add.ref($p1127,$mul.ref(0,16)),$mul.ref(8,1));
  $p1130.dup := $or.i1($or.i1($p1127.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  $p1130.dup := 0;
  $i1131 := $load.i64($M.379,$p1130);
  $i1131.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 19} true;
  assume {:verifier.code 0} true;
  call $i1132, $i1132.dup := FStar_UInt128_uint128_to_uint64($i1129, $i1129.dup, $i1131, $i1131.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 563, 56} true;
  assume {:verifier.code 0} true;
  $i1133 := $and.i64($i1132,2251799813685247);
  $i1133.dup := $or.i1($i1132.dup,0);
  call {:cexpr "tmp2"} boogie_si_record_i64($i1133);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $p154.dup := 0;
  $M.380 := $store.i128($M.380,$p154,$i1126);
  $M.380.dup := $store.i1($M.380.dup,$p154,$i1126.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $p1134 := $bitcast.ref.ref($p154);
  $p1134.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $p1135 := $add.ref($add.ref($p1134,$mul.ref(0,16)),$mul.ref(0,1));
  $p1135.dup := $or.i1($or.i1($p1134.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $p1135.dup := 0;
  $i1136 := $load.i64($M.380,$p1135);
  $i1136.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $p1137 := $add.ref($add.ref($p1134,$mul.ref(0,16)),$mul.ref(8,1));
  $p1137.dup := $or.i1($or.i1($p1134.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $p1137.dup := 0;
  $i1138 := $load.i64($M.380,$p1137);
  $i1138.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  call $p1139, $p1139.dup := FStar_UInt128_shift_right($i1136, $i1136.dup, $i1138, $i1138.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $p1140 := $bitcast.ref.ref($p155);
  $p1140.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $p1141 := $add.ref($add.ref($p1140,$mul.ref(0,16)),$mul.ref(0,1));
  $p1141.dup := $or.i1($or.i1($p1140.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $i1142 := $extractvalue.i64($p1139,0);
  $i1142.dup := $or.i1($p1139.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $p1141.dup := 0;
  $M.381 := $store.i64($M.381,$p1141,$i1142);
  $M.381.dup := $store.i1($M.381.dup,$p1141,$i1142.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $p1143 := $add.ref($add.ref($p1140,$mul.ref(0,16)),$mul.ref(8,1));
  $p1143.dup := $or.i1($or.i1($p1140.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $i1144 := $extractvalue.i64($p1139,1);
  $i1144.dup := $or.i1($p1139.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $p1143.dup := 0;
  $M.381 := $store.i64($M.381,$p1143,$i1144);
  $M.381.dup := $store.i1($M.381.dup,$p1143,$i1144.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 49} true;
  assume {:verifier.code 0} true;
  $p155.dup := 0;
  $i1145 := $load.i128($M.381,$p155);
  $i1145.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  $p156.dup := 0;
  $M.382 := $store.i128($M.382,$p156,$i1145);
  $M.382.dup := $store.i1($M.382.dup,$p156,$i1145.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  $p1146 := $bitcast.ref.ref($p156);
  $p1146.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  $p1147 := $add.ref($add.ref($p1146,$mul.ref(0,16)),$mul.ref(0,1));
  $p1147.dup := $or.i1($or.i1($p1146.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  $p1147.dup := 0;
  $i1148 := $load.i64($M.382,$p1147);
  $i1148.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  $p1149 := $add.ref($add.ref($p1146,$mul.ref(0,16)),$mul.ref(8,1));
  $p1149.dup := $or.i1($or.i1($p1146.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  $p1149.dup := 0;
  $i1150 := $load.i64($M.382,$p1149);
  $i1150.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 564, 17} true;
  assume {:verifier.code 0} true;
  call $i1151, $i1151.dup := FStar_UInt128_uint128_to_uint64($i1148, $i1148.dup, $i1150, $i1150.dup);
  call {:cexpr "c2"} boogie_si_record_i64($i1151);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  call $p1152, $p1152.dup := FStar_UInt128_uint64_to_uint128($i1151, $i1151.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  $p1153 := $bitcast.ref.ref($p157);
  $p1153.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  $p1154 := $add.ref($add.ref($p1153,$mul.ref(0,16)),$mul.ref(0,1));
  $p1154.dup := $or.i1($or.i1($p1153.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  $i1155 := $extractvalue.i64($p1152,0);
  $i1155.dup := $or.i1($p1152.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  $p1154.dup := 0;
  $M.383 := $store.i64($M.383,$p1154,$i1155);
  $M.383.dup := $store.i1($M.383.dup,$p1154,$i1155.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  $p1156 := $add.ref($add.ref($p1153,$mul.ref(0,16)),$mul.ref(8,1));
  $p1156.dup := $or.i1($or.i1($p1153.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  $i1157 := $extractvalue.i64($p1152,1);
  $i1157.dup := $or.i1($p1152.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  $p1156.dup := 0;
  $M.383 := $store.i64($M.383,$p1156,$i1157);
  $M.383.dup := $store.i1($M.383.dup,$p1156,$i1157.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 55} true;
  assume {:verifier.code 0} true;
  $p157.dup := 0;
  $i1158 := $load.i128($M.383,$p157);
  $i1158.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p158.dup := 0;
  $M.384 := $store.i128($M.384,$p158,$i699);
  $M.384.dup := $store.i1($M.384.dup,$p158,$i699.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1159 := $bitcast.ref.ref($p158);
  $p1159.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1160 := $add.ref($add.ref($p1159,$mul.ref(0,16)),$mul.ref(0,1));
  $p1160.dup := $or.i1($or.i1($p1159.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1160.dup := 0;
  $i1161 := $load.i64($M.384,$p1160);
  $i1161.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1162 := $add.ref($add.ref($p1159,$mul.ref(0,16)),$mul.ref(8,1));
  $p1162.dup := $or.i1($or.i1($p1159.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1162.dup := 0;
  $i1163 := $load.i64($M.384,$p1162);
  $i1163.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p159.dup := 0;
  $M.385 := $store.i128($M.385,$p159,$i1158);
  $M.385.dup := $store.i1($M.385.dup,$p159,$i1158.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1164 := $bitcast.ref.ref($p159);
  $p1164.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1165 := $add.ref($add.ref($p1164,$mul.ref(0,16)),$mul.ref(0,1));
  $p1165.dup := $or.i1($or.i1($p1164.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1165.dup := 0;
  $i1166 := $load.i64($M.385,$p1165);
  $i1166.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1167 := $add.ref($add.ref($p1164,$mul.ref(0,16)),$mul.ref(8,1));
  $p1167.dup := $or.i1($or.i1($p1164.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1167.dup := 0;
  $i1168 := $load.i64($M.385,$p1167);
  $i1168.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  call $p1169, $p1169.dup := FStar_UInt128_add($i1161, $i1161.dup, $i1163, $i1163.dup, $i1166, $i1166.dup, $i1168, $i1168.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1170 := $bitcast.ref.ref($p160);
  $p1170.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1171 := $add.ref($add.ref($p1170,$mul.ref(0,16)),$mul.ref(0,1));
  $p1171.dup := $or.i1($or.i1($p1170.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $i1172 := $extractvalue.i64($p1169,0);
  $i1172.dup := $or.i1($p1169.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1171.dup := 0;
  $M.386 := $store.i64($M.386,$p1171,$i1172);
  $M.386.dup := $store.i1($M.386.dup,$p1171,$i1172.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1173 := $add.ref($add.ref($p1170,$mul.ref(0,16)),$mul.ref(8,1));
  $p1173.dup := $or.i1($or.i1($p1170.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $i1174 := $extractvalue.i64($p1169,1);
  $i1174.dup := $or.i1($p1169.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p1173.dup := 0;
  $M.386 := $store.i64($M.386,$p1173,$i1174);
  $M.386.dup := $store.i1($M.386.dup,$p1173,$i1174.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 565, 31} true;
  assume {:verifier.code 0} true;
  $p160.dup := 0;
  $i1175 := $load.i128($M.386,$p160);
  $i1175.dup := 0;
  call {:cexpr "l_8"} boogie_si_record_i128($i1175);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  $p161.dup := 0;
  $M.387 := $store.i128($M.387,$p161,$i1175);
  $M.387.dup := $store.i1($M.387.dup,$p161,$i1175.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  $p1176 := $bitcast.ref.ref($p161);
  $p1176.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  $p1177 := $add.ref($add.ref($p1176,$mul.ref(0,16)),$mul.ref(0,1));
  $p1177.dup := $or.i1($or.i1($p1176.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  $p1177.dup := 0;
  $i1178 := $load.i64($M.387,$p1177);
  $i1178.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  $p1179 := $add.ref($add.ref($p1176,$mul.ref(0,16)),$mul.ref(8,1));
  $p1179.dup := $or.i1($or.i1($p1176.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  $p1179.dup := 0;
  $i1180 := $load.i64($M.387,$p1179);
  $i1180.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 19} true;
  assume {:verifier.code 0} true;
  call $i1181, $i1181.dup := FStar_UInt128_uint128_to_uint64($i1178, $i1178.dup, $i1180, $i1180.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 566, 56} true;
  assume {:verifier.code 0} true;
  $i1182 := $and.i64($i1181,2251799813685247);
  $i1182.dup := $or.i1($i1181.dup,0);
  call {:cexpr "tmp3"} boogie_si_record_i64($i1182);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $p162.dup := 0;
  $M.388 := $store.i128($M.388,$p162,$i1175);
  $M.388.dup := $store.i1($M.388.dup,$p162,$i1175.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $p1183 := $bitcast.ref.ref($p162);
  $p1183.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $p1184 := $add.ref($add.ref($p1183,$mul.ref(0,16)),$mul.ref(0,1));
  $p1184.dup := $or.i1($or.i1($p1183.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $p1184.dup := 0;
  $i1185 := $load.i64($M.388,$p1184);
  $i1185.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $p1186 := $add.ref($add.ref($p1183,$mul.ref(0,16)),$mul.ref(8,1));
  $p1186.dup := $or.i1($or.i1($p1183.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $p1186.dup := 0;
  $i1187 := $load.i64($M.388,$p1186);
  $i1187.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  call $p1188, $p1188.dup := FStar_UInt128_shift_right($i1185, $i1185.dup, $i1187, $i1187.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $p1189 := $bitcast.ref.ref($p163);
  $p1189.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $p1190 := $add.ref($add.ref($p1189,$mul.ref(0,16)),$mul.ref(0,1));
  $p1190.dup := $or.i1($or.i1($p1189.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $i1191 := $extractvalue.i64($p1188,0);
  $i1191.dup := $or.i1($p1188.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $p1190.dup := 0;
  $M.389 := $store.i64($M.389,$p1190,$i1191);
  $M.389.dup := $store.i1($M.389.dup,$p1190,$i1191.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $p1192 := $add.ref($add.ref($p1189,$mul.ref(0,16)),$mul.ref(8,1));
  $p1192.dup := $or.i1($or.i1($p1189.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $i1193 := $extractvalue.i64($p1188,1);
  $i1193.dup := $or.i1($p1188.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $p1192.dup := 0;
  $M.389 := $store.i64($M.389,$p1192,$i1193);
  $M.389.dup := $store.i1($M.389.dup,$p1192,$i1193.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 49} true;
  assume {:verifier.code 0} true;
  $p163.dup := 0;
  $i1194 := $load.i128($M.389,$p163);
  $i1194.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  $p164.dup := 0;
  $M.390 := $store.i128($M.390,$p164,$i1194);
  $M.390.dup := $store.i1($M.390.dup,$p164,$i1194.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  $p1195 := $bitcast.ref.ref($p164);
  $p1195.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  $p1196 := $add.ref($add.ref($p1195,$mul.ref(0,16)),$mul.ref(0,1));
  $p1196.dup := $or.i1($or.i1($p1195.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  $p1196.dup := 0;
  $i1197 := $load.i64($M.390,$p1196);
  $i1197.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  $p1198 := $add.ref($add.ref($p1195,$mul.ref(0,16)),$mul.ref(8,1));
  $p1198.dup := $or.i1($or.i1($p1195.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  $p1198.dup := 0;
  $i1199 := $load.i64($M.390,$p1198);
  $i1199.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 567, 17} true;
  assume {:verifier.code 0} true;
  call $i1200, $i1200.dup := FStar_UInt128_uint128_to_uint64($i1197, $i1197.dup, $i1199, $i1199.dup);
  call {:cexpr "c3"} boogie_si_record_i64($i1200);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  call $p1201, $p1201.dup := FStar_UInt128_uint64_to_uint128($i1200, $i1200.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  $p1202 := $bitcast.ref.ref($p165);
  $p1202.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  $p1203 := $add.ref($add.ref($p1202,$mul.ref(0,16)),$mul.ref(0,1));
  $p1203.dup := $or.i1($or.i1($p1202.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  $i1204 := $extractvalue.i64($p1201,0);
  $i1204.dup := $or.i1($p1201.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  $p1203.dup := 0;
  $M.391 := $store.i64($M.391,$p1203,$i1204);
  $M.391.dup := $store.i1($M.391.dup,$p1203,$i1204.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  $p1205 := $add.ref($add.ref($p1202,$mul.ref(0,16)),$mul.ref(8,1));
  $p1205.dup := $or.i1($or.i1($p1202.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  $i1206 := $extractvalue.i64($p1201,1);
  $i1206.dup := $or.i1($p1201.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  $p1205.dup := 0;
  $M.391 := $store.i64($M.391,$p1205,$i1206);
  $M.391.dup := $store.i1($M.391.dup,$p1205,$i1206.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 55} true;
  assume {:verifier.code 0} true;
  $p165.dup := 0;
  $i1207 := $load.i128($M.391,$p165);
  $i1207.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p166.dup := 0;
  $M.392 := $store.i128($M.392,$p166,$i754);
  $M.392.dup := $store.i1($M.392.dup,$p166,$i754.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1208 := $bitcast.ref.ref($p166);
  $p1208.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1209 := $add.ref($add.ref($p1208,$mul.ref(0,16)),$mul.ref(0,1));
  $p1209.dup := $or.i1($or.i1($p1208.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1209.dup := 0;
  $i1210 := $load.i64($M.392,$p1209);
  $i1210.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1211 := $add.ref($add.ref($p1208,$mul.ref(0,16)),$mul.ref(8,1));
  $p1211.dup := $or.i1($or.i1($p1208.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1211.dup := 0;
  $i1212 := $load.i64($M.392,$p1211);
  $i1212.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p167.dup := 0;
  $M.393 := $store.i128($M.393,$p167,$i1207);
  $M.393.dup := $store.i1($M.393.dup,$p167,$i1207.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1213 := $bitcast.ref.ref($p167);
  $p1213.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1214 := $add.ref($add.ref($p1213,$mul.ref(0,16)),$mul.ref(0,1));
  $p1214.dup := $or.i1($or.i1($p1213.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1214.dup := 0;
  $i1215 := $load.i64($M.393,$p1214);
  $i1215.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1216 := $add.ref($add.ref($p1213,$mul.ref(0,16)),$mul.ref(8,1));
  $p1216.dup := $or.i1($or.i1($p1213.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1216.dup := 0;
  $i1217 := $load.i64($M.393,$p1216);
  $i1217.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  call $p1218, $p1218.dup := FStar_UInt128_add($i1210, $i1210.dup, $i1212, $i1212.dup, $i1215, $i1215.dup, $i1217, $i1217.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1219 := $bitcast.ref.ref($p168);
  $p1219.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1220 := $add.ref($add.ref($p1219,$mul.ref(0,16)),$mul.ref(0,1));
  $p1220.dup := $or.i1($or.i1($p1219.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $i1221 := $extractvalue.i64($p1218,0);
  $i1221.dup := $or.i1($p1218.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1220.dup := 0;
  $M.394 := $store.i64($M.394,$p1220,$i1221);
  $M.394.dup := $store.i1($M.394.dup,$p1220,$i1221.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1222 := $add.ref($add.ref($p1219,$mul.ref(0,16)),$mul.ref(8,1));
  $p1222.dup := $or.i1($or.i1($p1219.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $i1223 := $extractvalue.i64($p1218,1);
  $i1223.dup := $or.i1($p1218.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p1222.dup := 0;
  $M.394 := $store.i64($M.394,$p1222,$i1223);
  $M.394.dup := $store.i1($M.394.dup,$p1222,$i1223.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 568, 31} true;
  assume {:verifier.code 0} true;
  $p168.dup := 0;
  $i1224 := $load.i128($M.394,$p168);
  $i1224.dup := 0;
  call {:cexpr "l_9"} boogie_si_record_i128($i1224);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  $p169.dup := 0;
  $M.395 := $store.i128($M.395,$p169,$i1224);
  $M.395.dup := $store.i1($M.395.dup,$p169,$i1224.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  $p1225 := $bitcast.ref.ref($p169);
  $p1225.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  $p1226 := $add.ref($add.ref($p1225,$mul.ref(0,16)),$mul.ref(0,1));
  $p1226.dup := $or.i1($or.i1($p1225.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  $p1226.dup := 0;
  $i1227 := $load.i64($M.395,$p1226);
  $i1227.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  $p1228 := $add.ref($add.ref($p1225,$mul.ref(0,16)),$mul.ref(8,1));
  $p1228.dup := $or.i1($or.i1($p1225.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  $p1228.dup := 0;
  $i1229 := $load.i64($M.395,$p1228);
  $i1229.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 19} true;
  assume {:verifier.code 0} true;
  call $i1230, $i1230.dup := FStar_UInt128_uint128_to_uint64($i1227, $i1227.dup, $i1229, $i1229.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 569, 56} true;
  assume {:verifier.code 0} true;
  $i1231 := $and.i64($i1230,2251799813685247);
  $i1231.dup := $or.i1($i1230.dup,0);
  call {:cexpr "tmp4"} boogie_si_record_i64($i1231);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $p170.dup := 0;
  $M.396 := $store.i128($M.396,$p170,$i1224);
  $M.396.dup := $store.i1($M.396.dup,$p170,$i1224.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $p1232 := $bitcast.ref.ref($p170);
  $p1232.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $p1233 := $add.ref($add.ref($p1232,$mul.ref(0,16)),$mul.ref(0,1));
  $p1233.dup := $or.i1($or.i1($p1232.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $p1233.dup := 0;
  $i1234 := $load.i64($M.396,$p1233);
  $i1234.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $p1235 := $add.ref($add.ref($p1232,$mul.ref(0,16)),$mul.ref(8,1));
  $p1235.dup := $or.i1($or.i1($p1232.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $p1235.dup := 0;
  $i1236 := $load.i64($M.396,$p1235);
  $i1236.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  call $p1237, $p1237.dup := FStar_UInt128_shift_right($i1234, $i1234.dup, $i1236, $i1236.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $p1238 := $bitcast.ref.ref($p171);
  $p1238.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $p1239 := $add.ref($add.ref($p1238,$mul.ref(0,16)),$mul.ref(0,1));
  $p1239.dup := $or.i1($or.i1($p1238.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $i1240 := $extractvalue.i64($p1237,0);
  $i1240.dup := $or.i1($p1237.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $p1239.dup := 0;
  $M.397 := $store.i64($M.397,$p1239,$i1240);
  $M.397.dup := $store.i1($M.397.dup,$p1239,$i1240.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $p1241 := $add.ref($add.ref($p1238,$mul.ref(0,16)),$mul.ref(8,1));
  $p1241.dup := $or.i1($or.i1($p1238.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $i1242 := $extractvalue.i64($p1237,1);
  $i1242.dup := $or.i1($p1237.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $p1241.dup := 0;
  $M.397 := $store.i64($M.397,$p1241,$i1242);
  $M.397.dup := $store.i1($M.397.dup,$p1241,$i1242.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 49} true;
  assume {:verifier.code 0} true;
  $p171.dup := 0;
  $i1243 := $load.i128($M.397,$p171);
  $i1243.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  $p172.dup := 0;
  $M.398 := $store.i128($M.398,$p172,$i1243);
  $M.398.dup := $store.i1($M.398.dup,$p172,$i1243.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  $p1244 := $bitcast.ref.ref($p172);
  $p1244.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  $p1245 := $add.ref($add.ref($p1244,$mul.ref(0,16)),$mul.ref(0,1));
  $p1245.dup := $or.i1($or.i1($p1244.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  $p1245.dup := 0;
  $i1246 := $load.i64($M.398,$p1245);
  $i1246.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  $p1247 := $add.ref($add.ref($p1244,$mul.ref(0,16)),$mul.ref(8,1));
  $p1247.dup := $or.i1($or.i1($p1244.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  $p1247.dup := 0;
  $i1248 := $load.i64($M.398,$p1247);
  $i1248.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 570, 17} true;
  assume {:verifier.code 0} true;
  call $i1249, $i1249.dup := FStar_UInt128_uint128_to_uint64($i1246, $i1246.dup, $i1248, $i1248.dup);
  call {:cexpr "c4"} boogie_si_record_i64($i1249);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 571, 29} true;
  assume {:verifier.code 0} true;
  $i1250 := $mul.i64($i1249,19);
  $i1250.dup := $or.i1($i1249.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 571, 24} true;
  assume {:verifier.code 0} true;
  $i1251 := $add.i64($i1035,$i1250);
  $i1251.dup := 0;
  call {:cexpr "l_10"} boogie_si_record_i64($i1251);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 572, 26} true;
  assume {:verifier.code 0} true;
  $i1252 := $and.i64($i1251,2251799813685247);
  $i1252.dup := $or.i1($i1251.dup,0);
  call {:cexpr "tmp0_0"} boogie_si_record_i64($i1252);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 573, 22} true;
  assume {:verifier.code 0} true;
  $i1253 := $lshr.i64($i1251,51);
  $i1253.dup := $or.i1($i1251.dup,0);
  call {:cexpr "c5"} boogie_si_record_i64($i1253);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 575, 24} true;
  assume {:verifier.code 0} true;
  $i1254 := $add.i64($i1084,$i1253);
  $i1254.dup := 0;
  call {:cexpr "o211"} boogie_si_record_i64($i1254);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 589, 3} true;
  assume {:verifier.code 0} true;
  $p1255 := $add.ref($p0,$mul.ref(0,8));
  $p1255.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 589, 11} true;
  assume {:verifier.code 0} true;
  $p1255.dup := 0;
  $M.0 := $store.i64($M.0,$p1255,$i1002);
  $M.0.dup := $store.i1($M.0.dup,$p1255,$i1002.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 590, 3} true;
  assume {:verifier.code 0} true;
  $p1256 := $add.ref($p0,$mul.ref(1,8));
  $p1256.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 590, 11} true;
  assume {:verifier.code 0} true;
  $p1256.dup := 0;
  $M.0 := $store.i64($M.0,$p1256,$i1004);
  $M.0.dup := $store.i1($M.0.dup,$p1256,$i1004.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 591, 3} true;
  assume {:verifier.code 0} true;
  $p1257 := $add.ref($p0,$mul.ref(2,8));
  $p1257.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 591, 11} true;
  assume {:verifier.code 0} true;
  $p1257.dup := 0;
  $M.0 := $store.i64($M.0,$p1257,$i883);
  $M.0.dup := $store.i1($M.0.dup,$p1257,$i883.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 592, 3} true;
  assume {:verifier.code 0} true;
  $p1258 := $add.ref($p0,$mul.ref(3,8));
  $p1258.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 592, 11} true;
  assume {:verifier.code 0} true;
  $p1258.dup := 0;
  $M.0 := $store.i64($M.0,$p1258,$i932);
  $M.0.dup := $store.i1($M.0.dup,$p1258,$i932.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 593, 3} true;
  assume {:verifier.code 0} true;
  $p1259 := $add.ref($p0,$mul.ref(4,8));
  $p1259.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 593, 11} true;
  assume {:verifier.code 0} true;
  $p1259.dup := 0;
  $M.0 := $store.i64($M.0,$p1259,$i981);
  $M.0.dup := $store.i1($M.0.dup,$p1259,$i981.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 594, 3} true;
  assume {:verifier.code 0} true;
  $p1260 := $add.ref($p0,$mul.ref(5,8));
  $p1260.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 594, 11} true;
  assume {:verifier.code 0} true;
  $p1260.dup := 0;
  $M.0 := $store.i64($M.0,$p1260,$i1252);
  $M.0.dup := $store.i1($M.0.dup,$p1260,$i1252.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 595, 3} true;
  assume {:verifier.code 0} true;
  $p1261 := $add.ref($p0,$mul.ref(6,8));
  $p1261.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 595, 11} true;
  assume {:verifier.code 0} true;
  $p1261.dup := 0;
  $M.0 := $store.i64($M.0,$p1261,$i1254);
  $M.0.dup := $store.i1($M.0.dup,$p1261,$i1254.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 596, 3} true;
  assume {:verifier.code 0} true;
  $p1262 := $add.ref($p0,$mul.ref(7,8));
  $p1262.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 596, 11} true;
  assume {:verifier.code 0} true;
  $p1262.dup := 0;
  $M.0 := $store.i64($M.0,$p1262,$i1133);
  $M.0.dup := $store.i1($M.0.dup,$p1262,$i1133.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 597, 3} true;
  assume {:verifier.code 0} true;
  $p1263 := $add.ref($p0,$mul.ref(8,8));
  $p1263.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 597, 11} true;
  assume {:verifier.code 0} true;
  $p1263.dup := 0;
  $M.0 := $store.i64($M.0,$p1263,$i1182);
  $M.0.dup := $store.i1($M.0.dup,$p1263,$i1182.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 598, 3} true;
  assume {:verifier.code 0} true;
  $p1264 := $add.ref($p0,$mul.ref(9,8));
  $p1264.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 598, 11} true;
  assume {:verifier.code 0} true;
  $p1264.dup := 0;
  $M.0 := $store.i64($M.0,$p1264,$i1231);
  $M.0.dup := $store.i1($M.0.dup,$p1264,$i1231.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 599, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_fmul1: ref;
axiom (Hacl_Impl_Curve25519_Field51_fmul1 == $sub.ref(0,29928));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fmul1($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $i2: i64, $i2.dup: i1)
modifies $M.399, $M.400, $M.401, $M.402, $M.403, $M.404, $M.405, $M.406, $M.407, $M.408, $M.409, $M.410, $M.411, $M.412, $M.413, $M.414, $M.415, $M.416, $M.417, $M.418, $M.419, $M.420, $M.421, $M.422, $M.423, $M.424, $M.425, $M.426, $M.427, $M.428, $M.429, $M.430, $M.431, $M.432, $M.433, $M.434, $M.435, $M.436, $M.437, $M.438, $M.439, $M.440, $M.441, $M.442, $M.443, $M.0, $exn;
modifies $M.86;
modifies $M.87, $M.88, $M.89;
modifies $M.90;
modifies $M.91;
modifies $M.92, $M.93;
modifies $CurrAddr;
{
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $p8: ref;
  var $p8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $p10: ref;
  var $p10.dup: i1;
  var $p11: ref;
  var $p11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
  var $p13: ref;
  var $p13.dup: i1;
  var $p14: ref;
  var $p14.dup: i1;
  var $p15: ref;
  var $p15.dup: i1;
  var $p16: ref;
  var $p16.dup: i1;
  var $p17: ref;
  var $p17.dup: i1;
  var $p18: ref;
  var $p18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $p20: ref;
  var $p20.dup: i1;
  var $p21: ref;
  var $p21.dup: i1;
  var $p22: ref;
  var $p22.dup: i1;
  var $p23: ref;
  var $p23.dup: i1;
  var $p24: ref;
  var $p24.dup: i1;
  var $p25: ref;
  var $p25.dup: i1;
  var $p26: ref;
  var $p26.dup: i1;
  var $p27: ref;
  var $p27.dup: i1;
  var $p28: ref;
  var $p28.dup: i1;
  var $p29: ref;
  var $p29.dup: i1;
  var $p30: ref;
  var $p30.dup: i1;
  var $p31: ref;
  var $p31.dup: i1;
  var $p32: ref;
  var $p32.dup: i1;
  var $p33: ref;
  var $p33.dup: i1;
  var $p34: ref;
  var $p34.dup: i1;
  var $p35: ref;
  var $p35.dup: i1;
  var $p36: ref;
  var $p36.dup: i1;
  var $p37: ref;
  var $p37.dup: i1;
  var $p38: ref;
  var $p38.dup: i1;
  var $p39: ref;
  var $p39.dup: i1;
  var $p40: ref;
  var $p40.dup: i1;
  var $p41: ref;
  var $p41.dup: i1;
  var $p42: ref;
  var $p42.dup: i1;
  var $p43: ref;
  var $p43.dup: i1;
  var $p44: ref;
  var $p44.dup: i1;
  var $p45: ref;
  var $p45.dup: i1;
  var $p46: ref;
  var $p46.dup: i1;
  var $p47: ref;
  var $p47.dup: i1;
  var $p48: ref;
  var $p48.dup: i1;
  var $i49: i64;
  var $i49.dup: i1;
  var $p50: ref;
  var $p50.dup: i1;
  var $i51: i64;
  var $i51.dup: i1;
  var $p52: ref;
  var $p52.dup: i1;
  var $i53: i64;
  var $i53.dup: i1;
  var $p54: ref;
  var $p54.dup: i1;
  var $i55: i64;
  var $i55.dup: i1;
  var $p56: ref;
  var $p56.dup: i1;
  var $i57: i64;
  var $i57.dup: i1;
  var $p58: ref;
  var $p58.dup: i1;
  var $p59: ref;
  var $p59.dup: i1;
  var $p60: ref;
  var $p60.dup: i1;
  var $i61: i64;
  var $i61.dup: i1;
  var $p62: ref;
  var $p62.dup: i1;
  var $i63: i64;
  var $i63.dup: i1;
  var $i64: i128;
  var $i64.dup: i1;
  var $p65: ref;
  var $p65.dup: i1;
  var $p66: ref;
  var $p66.dup: i1;
  var $p67: ref;
  var $p67.dup: i1;
  var $i68: i64;
  var $i68.dup: i1;
  var $p69: ref;
  var $p69.dup: i1;
  var $i70: i64;
  var $i70.dup: i1;
  var $i71: i128;
  var $i71.dup: i1;
  var $p72: ref;
  var $p72.dup: i1;
  var $p73: ref;
  var $p73.dup: i1;
  var $p74: ref;
  var $p74.dup: i1;
  var $i75: i64;
  var $i75.dup: i1;
  var $p76: ref;
  var $p76.dup: i1;
  var $i77: i64;
  var $i77.dup: i1;
  var $i78: i128;
  var $i78.dup: i1;
  var $p79: ref;
  var $p79.dup: i1;
  var $p80: ref;
  var $p80.dup: i1;
  var $p81: ref;
  var $p81.dup: i1;
  var $i82: i64;
  var $i82.dup: i1;
  var $p83: ref;
  var $p83.dup: i1;
  var $i84: i64;
  var $i84.dup: i1;
  var $i85: i128;
  var $i85.dup: i1;
  var $p86: ref;
  var $p86.dup: i1;
  var $p87: ref;
  var $p87.dup: i1;
  var $p88: ref;
  var $p88.dup: i1;
  var $i89: i64;
  var $i89.dup: i1;
  var $p90: ref;
  var $p90.dup: i1;
  var $i91: i64;
  var $i91.dup: i1;
  var $i92: i128;
  var $i92.dup: i1;
  var $p93: ref;
  var $p93.dup: i1;
  var $p94: ref;
  var $p94.dup: i1;
  var $p95: ref;
  var $p95.dup: i1;
  var $i96: i64;
  var $i96.dup: i1;
  var $p97: ref;
  var $p97.dup: i1;
  var $i98: i64;
  var $i98.dup: i1;
  var $i99: i128;
  var $i99.dup: i1;
  var $p100: ref;
  var $p100.dup: i1;
  var $p101: ref;
  var $p101.dup: i1;
  var $i102: i64;
  var $i102.dup: i1;
  var $p103: ref;
  var $p103.dup: i1;
  var $i104: i64;
  var $i104.dup: i1;
  var $p105: ref;
  var $p105.dup: i1;
  var $p106: ref;
  var $p106.dup: i1;
  var $i107: i64;
  var $i107.dup: i1;
  var $p108: ref;
  var $p108.dup: i1;
  var $i109: i64;
  var $i109.dup: i1;
  var $p110: ref;
  var $p110.dup: i1;
  var $p111: ref;
  var $p111.dup: i1;
  var $p112: ref;
  var $p112.dup: i1;
  var $i113: i64;
  var $i113.dup: i1;
  var $p114: ref;
  var $p114.dup: i1;
  var $i115: i64;
  var $i115.dup: i1;
  var $i116: i128;
  var $i116.dup: i1;
  var $p117: ref;
  var $p117.dup: i1;
  var $p118: ref;
  var $p118.dup: i1;
  var $i119: i64;
  var $i119.dup: i1;
  var $p120: ref;
  var $p120.dup: i1;
  var $i121: i64;
  var $i121.dup: i1;
  var $i122: i64;
  var $i122.dup: i1;
  var $i123: i64;
  var $i123.dup: i1;
  var $p124: ref;
  var $p124.dup: i1;
  var $p125: ref;
  var $p125.dup: i1;
  var $i126: i64;
  var $i126.dup: i1;
  var $p127: ref;
  var $p127.dup: i1;
  var $i128: i64;
  var $i128.dup: i1;
  var $p129: ref;
  var $p129.dup: i1;
  var $p130: ref;
  var $p130.dup: i1;
  var $p131: ref;
  var $p131.dup: i1;
  var $i132: i64;
  var $i132.dup: i1;
  var $p133: ref;
  var $p133.dup: i1;
  var $i134: i64;
  var $i134.dup: i1;
  var $i135: i128;
  var $i135.dup: i1;
  var $p136: ref;
  var $p136.dup: i1;
  var $p137: ref;
  var $p137.dup: i1;
  var $i138: i64;
  var $i138.dup: i1;
  var $p139: ref;
  var $p139.dup: i1;
  var $i140: i64;
  var $i140.dup: i1;
  var $i141: i64;
  var $i141.dup: i1;
  var $p142: ref;
  var $p142.dup: i1;
  var $p143: ref;
  var $p143.dup: i1;
  var $p144: ref;
  var $p144.dup: i1;
  var $i145: i64;
  var $i145.dup: i1;
  var $p146: ref;
  var $p146.dup: i1;
  var $i147: i64;
  var $i147.dup: i1;
  var $i148: i128;
  var $i148.dup: i1;
  var $p149: ref;
  var $p149.dup: i1;
  var $p150: ref;
  var $p150.dup: i1;
  var $i151: i64;
  var $i151.dup: i1;
  var $p152: ref;
  var $p152.dup: i1;
  var $i153: i64;
  var $i153.dup: i1;
  var $p154: ref;
  var $p154.dup: i1;
  var $p155: ref;
  var $p155.dup: i1;
  var $i156: i64;
  var $i156.dup: i1;
  var $p157: ref;
  var $p157.dup: i1;
  var $i158: i64;
  var $i158.dup: i1;
  var $p159: ref;
  var $p159.dup: i1;
  var $p160: ref;
  var $p160.dup: i1;
  var $p161: ref;
  var $p161.dup: i1;
  var $i162: i64;
  var $i162.dup: i1;
  var $p163: ref;
  var $p163.dup: i1;
  var $i164: i64;
  var $i164.dup: i1;
  var $i165: i128;
  var $i165.dup: i1;
  var $p166: ref;
  var $p166.dup: i1;
  var $p167: ref;
  var $p167.dup: i1;
  var $i168: i64;
  var $i168.dup: i1;
  var $p169: ref;
  var $p169.dup: i1;
  var $i170: i64;
  var $i170.dup: i1;
  var $i171: i64;
  var $i171.dup: i1;
  var $i172: i64;
  var $i172.dup: i1;
  var $p173: ref;
  var $p173.dup: i1;
  var $p174: ref;
  var $p174.dup: i1;
  var $i175: i64;
  var $i175.dup: i1;
  var $p176: ref;
  var $p176.dup: i1;
  var $i177: i64;
  var $i177.dup: i1;
  var $p178: ref;
  var $p178.dup: i1;
  var $p179: ref;
  var $p179.dup: i1;
  var $p180: ref;
  var $p180.dup: i1;
  var $i181: i64;
  var $i181.dup: i1;
  var $p182: ref;
  var $p182.dup: i1;
  var $i183: i64;
  var $i183.dup: i1;
  var $i184: i128;
  var $i184.dup: i1;
  var $p185: ref;
  var $p185.dup: i1;
  var $p186: ref;
  var $p186.dup: i1;
  var $i187: i64;
  var $i187.dup: i1;
  var $p188: ref;
  var $p188.dup: i1;
  var $i189: i64;
  var $i189.dup: i1;
  var $i190: i64;
  var $i190.dup: i1;
  var $p191: ref;
  var $p191.dup: i1;
  var $p192: ref;
  var $p192.dup: i1;
  var $p193: ref;
  var $p193.dup: i1;
  var $i194: i64;
  var $i194.dup: i1;
  var $p195: ref;
  var $p195.dup: i1;
  var $i196: i64;
  var $i196.dup: i1;
  var $i197: i128;
  var $i197.dup: i1;
  var $p198: ref;
  var $p198.dup: i1;
  var $p199: ref;
  var $p199.dup: i1;
  var $i200: i64;
  var $i200.dup: i1;
  var $p201: ref;
  var $p201.dup: i1;
  var $i202: i64;
  var $i202.dup: i1;
  var $p203: ref;
  var $p203.dup: i1;
  var $p204: ref;
  var $p204.dup: i1;
  var $i205: i64;
  var $i205.dup: i1;
  var $p206: ref;
  var $p206.dup: i1;
  var $i207: i64;
  var $i207.dup: i1;
  var $p208: ref;
  var $p208.dup: i1;
  var $p209: ref;
  var $p209.dup: i1;
  var $p210: ref;
  var $p210.dup: i1;
  var $i211: i64;
  var $i211.dup: i1;
  var $p212: ref;
  var $p212.dup: i1;
  var $i213: i64;
  var $i213.dup: i1;
  var $i214: i128;
  var $i214.dup: i1;
  var $p215: ref;
  var $p215.dup: i1;
  var $p216: ref;
  var $p216.dup: i1;
  var $i217: i64;
  var $i217.dup: i1;
  var $p218: ref;
  var $p218.dup: i1;
  var $i219: i64;
  var $i219.dup: i1;
  var $i220: i64;
  var $i220.dup: i1;
  var $i221: i64;
  var $i221.dup: i1;
  var $p222: ref;
  var $p222.dup: i1;
  var $p223: ref;
  var $p223.dup: i1;
  var $i224: i64;
  var $i224.dup: i1;
  var $p225: ref;
  var $p225.dup: i1;
  var $i226: i64;
  var $i226.dup: i1;
  var $p227: ref;
  var $p227.dup: i1;
  var $p228: ref;
  var $p228.dup: i1;
  var $p229: ref;
  var $p229.dup: i1;
  var $i230: i64;
  var $i230.dup: i1;
  var $p231: ref;
  var $p231.dup: i1;
  var $i232: i64;
  var $i232.dup: i1;
  var $i233: i128;
  var $i233.dup: i1;
  var $p234: ref;
  var $p234.dup: i1;
  var $p235: ref;
  var $p235.dup: i1;
  var $i236: i64;
  var $i236.dup: i1;
  var $p237: ref;
  var $p237.dup: i1;
  var $i238: i64;
  var $i238.dup: i1;
  var $i239: i64;
  var $i239.dup: i1;
  var $p240: ref;
  var $p240.dup: i1;
  var $p241: ref;
  var $p241.dup: i1;
  var $p242: ref;
  var $p242.dup: i1;
  var $i243: i64;
  var $i243.dup: i1;
  var $p244: ref;
  var $p244.dup: i1;
  var $i245: i64;
  var $i245.dup: i1;
  var $i246: i128;
  var $i246.dup: i1;
  var $p247: ref;
  var $p247.dup: i1;
  var $p248: ref;
  var $p248.dup: i1;
  var $i249: i64;
  var $i249.dup: i1;
  var $p250: ref;
  var $p250.dup: i1;
  var $i251: i64;
  var $i251.dup: i1;
  var $p252: ref;
  var $p252.dup: i1;
  var $p253: ref;
  var $p253.dup: i1;
  var $i254: i64;
  var $i254.dup: i1;
  var $p255: ref;
  var $p255.dup: i1;
  var $i256: i64;
  var $i256.dup: i1;
  var $p257: ref;
  var $p257.dup: i1;
  var $p258: ref;
  var $p258.dup: i1;
  var $p259: ref;
  var $p259.dup: i1;
  var $i260: i64;
  var $i260.dup: i1;
  var $p261: ref;
  var $p261.dup: i1;
  var $i262: i64;
  var $i262.dup: i1;
  var $i263: i128;
  var $i263.dup: i1;
  var $p264: ref;
  var $p264.dup: i1;
  var $p265: ref;
  var $p265.dup: i1;
  var $i266: i64;
  var $i266.dup: i1;
  var $p267: ref;
  var $p267.dup: i1;
  var $i268: i64;
  var $i268.dup: i1;
  var $i269: i64;
  var $i269.dup: i1;
  var $i270: i64;
  var $i270.dup: i1;
  var $p271: ref;
  var $p271.dup: i1;
  var $p272: ref;
  var $p272.dup: i1;
  var $i273: i64;
  var $i273.dup: i1;
  var $p274: ref;
  var $p274.dup: i1;
  var $i275: i64;
  var $i275.dup: i1;
  var $p276: ref;
  var $p276.dup: i1;
  var $p277: ref;
  var $p277.dup: i1;
  var $p278: ref;
  var $p278.dup: i1;
  var $i279: i64;
  var $i279.dup: i1;
  var $p280: ref;
  var $p280.dup: i1;
  var $i281: i64;
  var $i281.dup: i1;
  var $i282: i128;
  var $i282.dup: i1;
  var $p283: ref;
  var $p283.dup: i1;
  var $p284: ref;
  var $p284.dup: i1;
  var $i285: i64;
  var $i285.dup: i1;
  var $p286: ref;
  var $p286.dup: i1;
  var $i287: i64;
  var $i287.dup: i1;
  var $i288: i64;
  var $i288.dup: i1;
  var $p289: ref;
  var $p289.dup: i1;
  var $p290: ref;
  var $p290.dup: i1;
  var $p291: ref;
  var $p291.dup: i1;
  var $i292: i64;
  var $i292.dup: i1;
  var $p293: ref;
  var $p293.dup: i1;
  var $i294: i64;
  var $i294.dup: i1;
  var $i295: i128;
  var $i295.dup: i1;
  var $p296: ref;
  var $p296.dup: i1;
  var $p297: ref;
  var $p297.dup: i1;
  var $i298: i64;
  var $i298.dup: i1;
  var $p299: ref;
  var $p299.dup: i1;
  var $i300: i64;
  var $i300.dup: i1;
  var $p301: ref;
  var $p301.dup: i1;
  var $p302: ref;
  var $p302.dup: i1;
  var $i303: i64;
  var $i303.dup: i1;
  var $p304: ref;
  var $p304.dup: i1;
  var $i305: i64;
  var $i305.dup: i1;
  var $p306: ref;
  var $p306.dup: i1;
  var $p307: ref;
  var $p307.dup: i1;
  var $p308: ref;
  var $p308.dup: i1;
  var $i309: i64;
  var $i309.dup: i1;
  var $p310: ref;
  var $p310.dup: i1;
  var $i311: i64;
  var $i311.dup: i1;
  var $i312: i128;
  var $i312.dup: i1;
  var $p313: ref;
  var $p313.dup: i1;
  var $p314: ref;
  var $p314.dup: i1;
  var $i315: i64;
  var $i315.dup: i1;
  var $p316: ref;
  var $p316.dup: i1;
  var $i317: i64;
  var $i317.dup: i1;
  var $i318: i64;
  var $i318.dup: i1;
  var $i319: i64;
  var $i319.dup: i1;
  var $p320: ref;
  var $p320.dup: i1;
  var $p321: ref;
  var $p321.dup: i1;
  var $i322: i64;
  var $i322.dup: i1;
  var $p323: ref;
  var $p323.dup: i1;
  var $i324: i64;
  var $i324.dup: i1;
  var $p325: ref;
  var $p325.dup: i1;
  var $p326: ref;
  var $p326.dup: i1;
  var $p327: ref;
  var $p327.dup: i1;
  var $i328: i64;
  var $i328.dup: i1;
  var $p329: ref;
  var $p329.dup: i1;
  var $i330: i64;
  var $i330.dup: i1;
  var $i331: i128;
  var $i331.dup: i1;
  var $p332: ref;
  var $p332.dup: i1;
  var $p333: ref;
  var $p333.dup: i1;
  var $i334: i64;
  var $i334.dup: i1;
  var $p335: ref;
  var $p335.dup: i1;
  var $i336: i64;
  var $i336.dup: i1;
  var $i337: i64;
  var $i337.dup: i1;
  var $i338: i64;
  var $i338.dup: i1;
  var $i339: i64;
  var $i339.dup: i1;
  var $i340: i64;
  var $i340.dup: i1;
  var $i341: i64;
  var $i341.dup: i1;
  var $i342: i64;
  var $i342.dup: i1;
  var $p343: ref;
  var $p343.dup: i1;
  var $p344: ref;
  var $p344.dup: i1;
  var $p345: ref;
  var $p345.dup: i1;
  var $p346: ref;
  var $p346.dup: i1;
  var $p347: ref;
  var $p347.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 330, 18} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p3.dup := 0;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p4.dup := 0;
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p5.dup := 0;
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p6.dup := 0;
  assume {:verifier.code 0} true;
  call $p7 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p7.dup := 0;
  assume {:verifier.code 0} true;
  call $p8 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p8.dup := 0;
  assume {:verifier.code 0} true;
  call $p9 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p9.dup := 0;
  assume {:verifier.code 0} true;
  call $p10 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p10.dup := 0;
  assume {:verifier.code 0} true;
  call $p11 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p11.dup := 0;
  assume {:verifier.code 0} true;
  call $p12 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p12.dup := 0;
  assume {:verifier.code 0} true;
  call $p13 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p13.dup := 0;
  assume {:verifier.code 0} true;
  call $p14 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p14.dup := 0;
  assume {:verifier.code 0} true;
  call $p15 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p15.dup := 0;
  assume {:verifier.code 0} true;
  call $p16 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p16.dup := 0;
  assume {:verifier.code 0} true;
  call $p17 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p17.dup := 0;
  assume {:verifier.code 0} true;
  call $p18 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p18.dup := 0;
  assume {:verifier.code 0} true;
  call $p19 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p19.dup := 0;
  assume {:verifier.code 0} true;
  call $p20 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p20.dup := 0;
  assume {:verifier.code 0} true;
  call $p21 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p21.dup := 0;
  assume {:verifier.code 0} true;
  call $p22 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p22.dup := 0;
  assume {:verifier.code 0} true;
  call $p23 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p23.dup := 0;
  assume {:verifier.code 0} true;
  call $p24 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p24.dup := 0;
  assume {:verifier.code 0} true;
  call $p25 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p25.dup := 0;
  assume {:verifier.code 0} true;
  call $p26 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p26.dup := 0;
  assume {:verifier.code 0} true;
  call $p27 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p27.dup := 0;
  assume {:verifier.code 0} true;
  call $p28 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p28.dup := 0;
  assume {:verifier.code 0} true;
  call $p29 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p29.dup := 0;
  assume {:verifier.code 0} true;
  call $p30 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p30.dup := 0;
  assume {:verifier.code 0} true;
  call $p31 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p31.dup := 0;
  assume {:verifier.code 0} true;
  call $p32 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p32.dup := 0;
  assume {:verifier.code 0} true;
  call $p33 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p33.dup := 0;
  assume {:verifier.code 0} true;
  call $p34 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p34.dup := 0;
  assume {:verifier.code 0} true;
  call $p35 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p35.dup := 0;
  assume {:verifier.code 0} true;
  call $p36 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p36.dup := 0;
  assume {:verifier.code 0} true;
  call $p37 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p37.dup := 0;
  assume {:verifier.code 0} true;
  call $p38 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p38.dup := 0;
  assume {:verifier.code 0} true;
  call $p39 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p39.dup := 0;
  assume {:verifier.code 0} true;
  call $p40 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p40.dup := 0;
  assume {:verifier.code 0} true;
  call $p41 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p41.dup := 0;
  assume {:verifier.code 0} true;
  call $p42 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p42.dup := 0;
  assume {:verifier.code 0} true;
  call $p43 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p43.dup := 0;
  assume {:verifier.code 0} true;
  call $p44 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p44.dup := 0;
  assume {:verifier.code 0} true;
  call $p45 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p45.dup := 0;
  assume {:verifier.code 0} true;
  call $p46 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p46.dup := 0;
  assume {:verifier.code 0} true;
  call $p47 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p47.dup := 0;
  call {:cexpr "Hacl_Impl_Curve25519_Field51_fmul1:arg:f2"} boogie_si_record_i64($i2);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 330, 18} true;
  assume {:verifier.code 0} true;
  $p48 := $add.ref($p1,$mul.ref(0,8));
  $p48.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 330, 18} true;
  assume {:verifier.code 0} true;
  $p48.dup := 0;
  $i49 := $load.i64($M.0,$p48);
  $i49.dup := $load.i1($M.0.dup,$p48);
  call {:cexpr "f10"} boogie_si_record_i64($i49);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 331, 18} true;
  assume {:verifier.code 0} true;
  $p50 := $add.ref($p1,$mul.ref(1,8));
  $p50.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 331, 18} true;
  assume {:verifier.code 0} true;
  $p50.dup := 0;
  $i51 := $load.i64($M.0,$p50);
  $i51.dup := $load.i1($M.0.dup,$p50);
  call {:cexpr "f11"} boogie_si_record_i64($i51);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 332, 18} true;
  assume {:verifier.code 0} true;
  $p52 := $add.ref($p1,$mul.ref(2,8));
  $p52.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 332, 18} true;
  assume {:verifier.code 0} true;
  $p52.dup := 0;
  $i53 := $load.i64($M.0,$p52);
  $i53.dup := $load.i1($M.0.dup,$p52);
  call {:cexpr "f12"} boogie_si_record_i64($i53);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 333, 18} true;
  assume {:verifier.code 0} true;
  $p54 := $add.ref($p1,$mul.ref(3,8));
  $p54.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 333, 18} true;
  assume {:verifier.code 0} true;
  $p54.dup := 0;
  $i55 := $load.i64($M.0,$p54);
  $i55.dup := $load.i1($M.0.dup,$p54);
  call {:cexpr "f13"} boogie_si_record_i64($i55);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 334, 18} true;
  assume {:verifier.code 0} true;
  $p56 := $add.ref($p1,$mul.ref(4,8));
  $p56.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 334, 18} true;
  assume {:verifier.code 0} true;
  $p56.dup := 0;
  $i57 := $load.i64($M.0,$p56);
  $i57.dup := $load.i1($M.0.dup,$p56);
  call {:cexpr "f14"} boogie_si_record_i64($i57);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  call $p58, $p58.dup := FStar_UInt128_mul_wide($i2, $i2.dup, $i49, $i49.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  $p59 := $bitcast.ref.ref($p3);
  $p59.dup := $p3.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  $p60 := $add.ref($add.ref($p59,$mul.ref(0,16)),$mul.ref(0,1));
  $p60.dup := $or.i1($or.i1($p59.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  $i61 := $extractvalue.i64($p58,0);
  $i61.dup := $or.i1($p58.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  $p60.dup := 0;
  $M.399 := $store.i64($M.399,$p60,$i61);
  $M.399.dup := $store.i1($M.399.dup,$p60,$i61.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  $p62 := $add.ref($add.ref($p59,$mul.ref(0,16)),$mul.ref(8,1));
  $p62.dup := $or.i1($or.i1($p59.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  $i63 := $extractvalue.i64($p58,1);
  $i63.dup := $or.i1($p58.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  $p62.dup := 0;
  $M.399 := $store.i64($M.399,$p62,$i63);
  $M.399.dup := $store.i1($M.399.dup,$p62,$i63.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 335, 34} true;
  assume {:verifier.code 0} true;
  $p3.dup := 0;
  $i64 := $load.i128($M.399,$p3);
  $i64.dup := 0;
  call {:cexpr "tmp_w0"} boogie_si_record_i128($i64);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  call $p65, $p65.dup := FStar_UInt128_mul_wide($i2, $i2.dup, $i51, $i51.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  $p66 := $bitcast.ref.ref($p4);
  $p66.dup := $p4.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  $p67 := $add.ref($add.ref($p66,$mul.ref(0,16)),$mul.ref(0,1));
  $p67.dup := $or.i1($or.i1($p66.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  $i68 := $extractvalue.i64($p65,0);
  $i68.dup := $or.i1($p65.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  $p67.dup := 0;
  $M.400 := $store.i64($M.400,$p67,$i68);
  $M.400.dup := $store.i1($M.400.dup,$p67,$i68.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  $p69 := $add.ref($add.ref($p66,$mul.ref(0,16)),$mul.ref(8,1));
  $p69.dup := $or.i1($or.i1($p66.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  $i70 := $extractvalue.i64($p65,1);
  $i70.dup := $or.i1($p65.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  $p69.dup := 0;
  $M.400 := $store.i64($M.400,$p69,$i70);
  $M.400.dup := $store.i1($M.400.dup,$p69,$i70.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 336, 34} true;
  assume {:verifier.code 0} true;
  $p4.dup := 0;
  $i71 := $load.i128($M.400,$p4);
  $i71.dup := 0;
  call {:cexpr "tmp_w1"} boogie_si_record_i128($i71);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  call $p72, $p72.dup := FStar_UInt128_mul_wide($i2, $i2.dup, $i53, $i53.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  $p73 := $bitcast.ref.ref($p5);
  $p73.dup := $p5.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  $p74 := $add.ref($add.ref($p73,$mul.ref(0,16)),$mul.ref(0,1));
  $p74.dup := $or.i1($or.i1($p73.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  $i75 := $extractvalue.i64($p72,0);
  $i75.dup := $or.i1($p72.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  $p74.dup := 0;
  $M.401 := $store.i64($M.401,$p74,$i75);
  $M.401.dup := $store.i1($M.401.dup,$p74,$i75.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  $p76 := $add.ref($add.ref($p73,$mul.ref(0,16)),$mul.ref(8,1));
  $p76.dup := $or.i1($or.i1($p73.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  $i77 := $extractvalue.i64($p72,1);
  $i77.dup := $or.i1($p72.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  $p76.dup := 0;
  $M.401 := $store.i64($M.401,$p76,$i77);
  $M.401.dup := $store.i1($M.401.dup,$p76,$i77.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 337, 34} true;
  assume {:verifier.code 0} true;
  $p5.dup := 0;
  $i78 := $load.i128($M.401,$p5);
  $i78.dup := 0;
  call {:cexpr "tmp_w2"} boogie_si_record_i128($i78);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  call $p79, $p79.dup := FStar_UInt128_mul_wide($i2, $i2.dup, $i55, $i55.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  $p80 := $bitcast.ref.ref($p6);
  $p80.dup := $p6.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  $p81 := $add.ref($add.ref($p80,$mul.ref(0,16)),$mul.ref(0,1));
  $p81.dup := $or.i1($or.i1($p80.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  $i82 := $extractvalue.i64($p79,0);
  $i82.dup := $or.i1($p79.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  $p81.dup := 0;
  $M.402 := $store.i64($M.402,$p81,$i82);
  $M.402.dup := $store.i1($M.402.dup,$p81,$i82.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  $p83 := $add.ref($add.ref($p80,$mul.ref(0,16)),$mul.ref(8,1));
  $p83.dup := $or.i1($or.i1($p80.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  $i84 := $extractvalue.i64($p79,1);
  $i84.dup := $or.i1($p79.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  $p83.dup := 0;
  $M.402 := $store.i64($M.402,$p83,$i84);
  $M.402.dup := $store.i1($M.402.dup,$p83,$i84.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 338, 34} true;
  assume {:verifier.code 0} true;
  $p6.dup := 0;
  $i85 := $load.i128($M.402,$p6);
  $i85.dup := 0;
  call {:cexpr "tmp_w3"} boogie_si_record_i128($i85);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  call $p86, $p86.dup := FStar_UInt128_mul_wide($i2, $i2.dup, $i57, $i57.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  $p87 := $bitcast.ref.ref($p7);
  $p87.dup := $p7.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  $p88 := $add.ref($add.ref($p87,$mul.ref(0,16)),$mul.ref(0,1));
  $p88.dup := $or.i1($or.i1($p87.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  $i89 := $extractvalue.i64($p86,0);
  $i89.dup := $or.i1($p86.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  $p88.dup := 0;
  $M.403 := $store.i64($M.403,$p88,$i89);
  $M.403.dup := $store.i1($M.403.dup,$p88,$i89.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  $p90 := $add.ref($add.ref($p87,$mul.ref(0,16)),$mul.ref(8,1));
  $p90.dup := $or.i1($or.i1($p87.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  $i91 := $extractvalue.i64($p86,1);
  $i91.dup := $or.i1($p86.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  $p90.dup := 0;
  $M.403 := $store.i64($M.403,$p90,$i91);
  $M.403.dup := $store.i1($M.403.dup,$p90,$i91.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 339, 34} true;
  assume {:verifier.code 0} true;
  $p7.dup := 0;
  $i92 := $load.i128($M.403,$p7);
  $i92.dup := 0;
  call {:cexpr "tmp_w4"} boogie_si_record_i128($i92);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  call $p93, $p93.dup := FStar_UInt128_uint64_to_uint128(0, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  $p94 := $bitcast.ref.ref($p8);
  $p94.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  $p95 := $add.ref($add.ref($p94,$mul.ref(0,16)),$mul.ref(0,1));
  $p95.dup := $or.i1($or.i1($p94.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  $i96 := $extractvalue.i64($p93,0);
  $i96.dup := $or.i1($p93.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  $p95.dup := 0;
  $M.404 := $store.i64($M.404,$p95,$i96);
  $M.404.dup := $store.i1($M.404.dup,$p95,$i96.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  $p97 := $add.ref($add.ref($p94,$mul.ref(0,16)),$mul.ref(8,1));
  $p97.dup := $or.i1($or.i1($p94.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  $i98 := $extractvalue.i64($p93,1);
  $i98.dup := $or.i1($p93.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  $p97.dup := 0;
  $M.404 := $store.i64($M.404,$p97,$i98);
  $M.404.dup := $store.i1($M.404.dup,$p97,$i98.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 34} true;
  assume {:verifier.code 0} true;
  $p8.dup := 0;
  $i99 := $load.i128($M.404,$p8);
  $i99.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p9.dup := 0;
  $M.405 := $store.i128($M.405,$p9,$i64);
  $M.405.dup := $store.i1($M.405.dup,$p9,$i64.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p100 := $bitcast.ref.ref($p9);
  $p100.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p101 := $add.ref($add.ref($p100,$mul.ref(0,16)),$mul.ref(0,1));
  $p101.dup := $or.i1($or.i1($p100.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p101.dup := 0;
  $i102 := $load.i64($M.405,$p101);
  $i102.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p103 := $add.ref($add.ref($p100,$mul.ref(0,16)),$mul.ref(8,1));
  $p103.dup := $or.i1($or.i1($p100.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p103.dup := 0;
  $i104 := $load.i64($M.405,$p103);
  $i104.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p10.dup := 0;
  $M.406 := $store.i128($M.406,$p10,$i99);
  $M.406.dup := $store.i1($M.406.dup,$p10,$i99.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p105 := $bitcast.ref.ref($p10);
  $p105.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p106 := $add.ref($add.ref($p105,$mul.ref(0,16)),$mul.ref(0,1));
  $p106.dup := $or.i1($or.i1($p105.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p106.dup := 0;
  $i107 := $load.i64($M.406,$p106);
  $i107.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p108 := $add.ref($add.ref($p105,$mul.ref(0,16)),$mul.ref(8,1));
  $p108.dup := $or.i1($or.i1($p105.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p108.dup := 0;
  $i109 := $load.i64($M.406,$p108);
  $i109.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  call $p110, $p110.dup := FStar_UInt128_add($i102, $i102.dup, $i104, $i104.dup, $i107, $i107.dup, $i109, $i109.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p111 := $bitcast.ref.ref($p11);
  $p111.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p112 := $add.ref($add.ref($p111,$mul.ref(0,16)),$mul.ref(0,1));
  $p112.dup := $or.i1($or.i1($p111.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $i113 := $extractvalue.i64($p110,0);
  $i113.dup := $or.i1($p110.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p112.dup := 0;
  $M.407 := $store.i64($M.407,$p112,$i113);
  $M.407.dup := $store.i1($M.407.dup,$p112,$i113.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p114 := $add.ref($add.ref($p111,$mul.ref(0,16)),$mul.ref(8,1));
  $p114.dup := $or.i1($or.i1($p111.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $i115 := $extractvalue.i64($p110,1);
  $i115.dup := $or.i1($p110.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p114.dup := 0;
  $M.407 := $store.i64($M.407,$p114,$i115);
  $M.407.dup := $store.i1($M.407.dup,$p114,$i115.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 341, 8} true;
  assume {:verifier.code 0} true;
  $p11.dup := 0;
  $i116 := $load.i128($M.407,$p11);
  $i116.dup := 0;
  call {:cexpr "l_"} boogie_si_record_i128($i116);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  $p12.dup := 0;
  $M.408 := $store.i128($M.408,$p12,$i116);
  $M.408.dup := $store.i1($M.408.dup,$p12,$i116.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  $p117 := $bitcast.ref.ref($p12);
  $p117.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  $p118 := $add.ref($add.ref($p117,$mul.ref(0,16)),$mul.ref(0,1));
  $p118.dup := $or.i1($or.i1($p117.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  $p118.dup := 0;
  $i119 := $load.i64($M.408,$p118);
  $i119.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  $p120 := $add.ref($add.ref($p117,$mul.ref(0,16)),$mul.ref(8,1));
  $p120.dup := $or.i1($or.i1($p117.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  $p120.dup := 0;
  $i121 := $load.i64($M.408,$p120);
  $i121.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 19} true;
  assume {:verifier.code 0} true;
  call $i122, $i122.dup := FStar_UInt128_uint128_to_uint64($i119, $i119.dup, $i121, $i121.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 342, 55} true;
  assume {:verifier.code 0} true;
  $i123 := $and.i64($i122,2251799813685247);
  $i123.dup := $or.i1($i122.dup,0);
  call {:cexpr "tmp0"} boogie_si_record_i64($i123);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $p13.dup := 0;
  $M.409 := $store.i128($M.409,$p13,$i116);
  $M.409.dup := $store.i1($M.409.dup,$p13,$i116.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $p124 := $bitcast.ref.ref($p13);
  $p124.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $p125 := $add.ref($add.ref($p124,$mul.ref(0,16)),$mul.ref(0,1));
  $p125.dup := $or.i1($or.i1($p124.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $p125.dup := 0;
  $i126 := $load.i64($M.409,$p125);
  $i126.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $p127 := $add.ref($add.ref($p124,$mul.ref(0,16)),$mul.ref(8,1));
  $p127.dup := $or.i1($or.i1($p124.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $p127.dup := 0;
  $i128 := $load.i64($M.409,$p127);
  $i128.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  call $p129, $p129.dup := FStar_UInt128_shift_right($i126, $i126.dup, $i128, $i128.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $p130 := $bitcast.ref.ref($p14);
  $p130.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $p131 := $add.ref($add.ref($p130,$mul.ref(0,16)),$mul.ref(0,1));
  $p131.dup := $or.i1($or.i1($p130.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $i132 := $extractvalue.i64($p129,0);
  $i132.dup := $or.i1($p129.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $p131.dup := 0;
  $M.410 := $store.i64($M.410,$p131,$i132);
  $M.410.dup := $store.i1($M.410.dup,$p131,$i132.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $p133 := $add.ref($add.ref($p130,$mul.ref(0,16)),$mul.ref(8,1));
  $p133.dup := $or.i1($or.i1($p130.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $i134 := $extractvalue.i64($p129,1);
  $i134.dup := $or.i1($p129.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $p133.dup := 0;
  $M.410 := $store.i64($M.410,$p133,$i134);
  $M.410.dup := $store.i1($M.410.dup,$p133,$i134.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 49} true;
  assume {:verifier.code 0} true;
  $p14.dup := 0;
  $i135 := $load.i128($M.410,$p14);
  $i135.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  $p15.dup := 0;
  $M.411 := $store.i128($M.411,$p15,$i135);
  $M.411.dup := $store.i1($M.411.dup,$p15,$i135.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  $p136 := $bitcast.ref.ref($p15);
  $p136.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  $p137 := $add.ref($add.ref($p136,$mul.ref(0,16)),$mul.ref(0,1));
  $p137.dup := $or.i1($or.i1($p136.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  $p137.dup := 0;
  $i138 := $load.i64($M.411,$p137);
  $i138.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  $p139 := $add.ref($add.ref($p136,$mul.ref(0,16)),$mul.ref(8,1));
  $p139.dup := $or.i1($or.i1($p136.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  $p139.dup := 0;
  $i140 := $load.i64($M.411,$p139);
  $i140.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 343, 17} true;
  assume {:verifier.code 0} true;
  call $i141, $i141.dup := FStar_UInt128_uint128_to_uint64($i138, $i138.dup, $i140, $i140.dup);
  call {:cexpr "c0"} boogie_si_record_i64($i141);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  call $p142, $p142.dup := FStar_UInt128_uint64_to_uint128($i141, $i141.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  $p143 := $bitcast.ref.ref($p16);
  $p143.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  $p144 := $add.ref($add.ref($p143,$mul.ref(0,16)),$mul.ref(0,1));
  $p144.dup := $or.i1($or.i1($p143.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  $i145 := $extractvalue.i64($p142,0);
  $i145.dup := $or.i1($p142.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  $p144.dup := 0;
  $M.412 := $store.i64($M.412,$p144,$i145);
  $M.412.dup := $store.i1($M.412.dup,$p144,$i145.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  $p146 := $add.ref($add.ref($p143,$mul.ref(0,16)),$mul.ref(8,1));
  $p146.dup := $or.i1($or.i1($p143.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  $i147 := $extractvalue.i64($p142,1);
  $i147.dup := $or.i1($p142.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  $p146.dup := 0;
  $M.412 := $store.i64($M.412,$p146,$i147);
  $M.412.dup := $store.i1($M.412.dup,$p146,$i147.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 57} true;
  assume {:verifier.code 0} true;
  $p16.dup := 0;
  $i148 := $load.i128($M.412,$p16);
  $i148.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p17.dup := 0;
  $M.413 := $store.i128($M.413,$p17,$i71);
  $M.413.dup := $store.i1($M.413.dup,$p17,$i71.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p149 := $bitcast.ref.ref($p17);
  $p149.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p150 := $add.ref($add.ref($p149,$mul.ref(0,16)),$mul.ref(0,1));
  $p150.dup := $or.i1($or.i1($p149.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p150.dup := 0;
  $i151 := $load.i64($M.413,$p150);
  $i151.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p152 := $add.ref($add.ref($p149,$mul.ref(0,16)),$mul.ref(8,1));
  $p152.dup := $or.i1($or.i1($p149.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p152.dup := 0;
  $i153 := $load.i64($M.413,$p152);
  $i153.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p18.dup := 0;
  $M.414 := $store.i128($M.414,$p18,$i148);
  $M.414.dup := $store.i1($M.414.dup,$p18,$i148.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p154 := $bitcast.ref.ref($p18);
  $p154.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p155 := $add.ref($add.ref($p154,$mul.ref(0,16)),$mul.ref(0,1));
  $p155.dup := $or.i1($or.i1($p154.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p155.dup := 0;
  $i156 := $load.i64($M.414,$p155);
  $i156.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p157 := $add.ref($add.ref($p154,$mul.ref(0,16)),$mul.ref(8,1));
  $p157.dup := $or.i1($or.i1($p154.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p157.dup := 0;
  $i158 := $load.i64($M.414,$p157);
  $i158.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  call $p159, $p159.dup := FStar_UInt128_add($i151, $i151.dup, $i153, $i153.dup, $i156, $i156.dup, $i158, $i158.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p160 := $bitcast.ref.ref($p19);
  $p160.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p161 := $add.ref($add.ref($p160,$mul.ref(0,16)),$mul.ref(0,1));
  $p161.dup := $or.i1($or.i1($p160.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $i162 := $extractvalue.i64($p159,0);
  $i162.dup := $or.i1($p159.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p161.dup := 0;
  $M.415 := $store.i64($M.415,$p161,$i162);
  $M.415.dup := $store.i1($M.415.dup,$p161,$i162.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p163 := $add.ref($add.ref($p160,$mul.ref(0,16)),$mul.ref(8,1));
  $p163.dup := $or.i1($or.i1($p160.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $i164 := $extractvalue.i64($p159,1);
  $i164.dup := $or.i1($p159.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p163.dup := 0;
  $M.415 := $store.i64($M.415,$p163,$i164);
  $M.415.dup := $store.i1($M.415.dup,$p163,$i164.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 344, 31} true;
  assume {:verifier.code 0} true;
  $p19.dup := 0;
  $i165 := $load.i128($M.415,$p19);
  $i165.dup := 0;
  call {:cexpr "l_0"} boogie_si_record_i128($i165);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  $p20.dup := 0;
  $M.416 := $store.i128($M.416,$p20,$i165);
  $M.416.dup := $store.i1($M.416.dup,$p20,$i165.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  $p166 := $bitcast.ref.ref($p20);
  $p166.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  $p167 := $add.ref($add.ref($p166,$mul.ref(0,16)),$mul.ref(0,1));
  $p167.dup := $or.i1($or.i1($p166.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  $p167.dup := 0;
  $i168 := $load.i64($M.416,$p167);
  $i168.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  $p169 := $add.ref($add.ref($p166,$mul.ref(0,16)),$mul.ref(8,1));
  $p169.dup := $or.i1($or.i1($p166.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  $p169.dup := 0;
  $i170 := $load.i64($M.416,$p169);
  $i170.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 19} true;
  assume {:verifier.code 0} true;
  call $i171, $i171.dup := FStar_UInt128_uint128_to_uint64($i168, $i168.dup, $i170, $i170.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 345, 56} true;
  assume {:verifier.code 0} true;
  $i172 := $and.i64($i171,2251799813685247);
  $i172.dup := $or.i1($i171.dup,0);
  call {:cexpr "tmp1"} boogie_si_record_i64($i172);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $p21.dup := 0;
  $M.417 := $store.i128($M.417,$p21,$i165);
  $M.417.dup := $store.i1($M.417.dup,$p21,$i165.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $p173 := $bitcast.ref.ref($p21);
  $p173.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $p174 := $add.ref($add.ref($p173,$mul.ref(0,16)),$mul.ref(0,1));
  $p174.dup := $or.i1($or.i1($p173.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $p174.dup := 0;
  $i175 := $load.i64($M.417,$p174);
  $i175.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $p176 := $add.ref($add.ref($p173,$mul.ref(0,16)),$mul.ref(8,1));
  $p176.dup := $or.i1($or.i1($p173.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $p176.dup := 0;
  $i177 := $load.i64($M.417,$p176);
  $i177.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  call $p178, $p178.dup := FStar_UInt128_shift_right($i175, $i175.dup, $i177, $i177.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $p179 := $bitcast.ref.ref($p22);
  $p179.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $p180 := $add.ref($add.ref($p179,$mul.ref(0,16)),$mul.ref(0,1));
  $p180.dup := $or.i1($or.i1($p179.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $i181 := $extractvalue.i64($p178,0);
  $i181.dup := $or.i1($p178.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $p180.dup := 0;
  $M.418 := $store.i64($M.418,$p180,$i181);
  $M.418.dup := $store.i1($M.418.dup,$p180,$i181.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $p182 := $add.ref($add.ref($p179,$mul.ref(0,16)),$mul.ref(8,1));
  $p182.dup := $or.i1($or.i1($p179.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $i183 := $extractvalue.i64($p178,1);
  $i183.dup := $or.i1($p178.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $p182.dup := 0;
  $M.418 := $store.i64($M.418,$p182,$i183);
  $M.418.dup := $store.i1($M.418.dup,$p182,$i183.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 49} true;
  assume {:verifier.code 0} true;
  $p22.dup := 0;
  $i184 := $load.i128($M.418,$p22);
  $i184.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  $p23.dup := 0;
  $M.419 := $store.i128($M.419,$p23,$i184);
  $M.419.dup := $store.i1($M.419.dup,$p23,$i184.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  $p185 := $bitcast.ref.ref($p23);
  $p185.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  $p186 := $add.ref($add.ref($p185,$mul.ref(0,16)),$mul.ref(0,1));
  $p186.dup := $or.i1($or.i1($p185.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  $p186.dup := 0;
  $i187 := $load.i64($M.419,$p186);
  $i187.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  $p188 := $add.ref($add.ref($p185,$mul.ref(0,16)),$mul.ref(8,1));
  $p188.dup := $or.i1($or.i1($p185.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  $p188.dup := 0;
  $i189 := $load.i64($M.419,$p188);
  $i189.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 346, 17} true;
  assume {:verifier.code 0} true;
  call $i190, $i190.dup := FStar_UInt128_uint128_to_uint64($i187, $i187.dup, $i189, $i189.dup);
  call {:cexpr "c1"} boogie_si_record_i64($i190);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  call $p191, $p191.dup := FStar_UInt128_uint64_to_uint128($i190, $i190.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  $p192 := $bitcast.ref.ref($p24);
  $p192.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  $p193 := $add.ref($add.ref($p192,$mul.ref(0,16)),$mul.ref(0,1));
  $p193.dup := $or.i1($or.i1($p192.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  $i194 := $extractvalue.i64($p191,0);
  $i194.dup := $or.i1($p191.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  $p193.dup := 0;
  $M.420 := $store.i64($M.420,$p193,$i194);
  $M.420.dup := $store.i1($M.420.dup,$p193,$i194.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  $p195 := $add.ref($add.ref($p192,$mul.ref(0,16)),$mul.ref(8,1));
  $p195.dup := $or.i1($or.i1($p192.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  $i196 := $extractvalue.i64($p191,1);
  $i196.dup := $or.i1($p191.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  $p195.dup := 0;
  $M.420 := $store.i64($M.420,$p195,$i196);
  $M.420.dup := $store.i1($M.420.dup,$p195,$i196.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 57} true;
  assume {:verifier.code 0} true;
  $p24.dup := 0;
  $i197 := $load.i128($M.420,$p24);
  $i197.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p25.dup := 0;
  $M.421 := $store.i128($M.421,$p25,$i78);
  $M.421.dup := $store.i1($M.421.dup,$p25,$i78.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p198 := $bitcast.ref.ref($p25);
  $p198.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p199 := $add.ref($add.ref($p198,$mul.ref(0,16)),$mul.ref(0,1));
  $p199.dup := $or.i1($or.i1($p198.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p199.dup := 0;
  $i200 := $load.i64($M.421,$p199);
  $i200.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p201 := $add.ref($add.ref($p198,$mul.ref(0,16)),$mul.ref(8,1));
  $p201.dup := $or.i1($or.i1($p198.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p201.dup := 0;
  $i202 := $load.i64($M.421,$p201);
  $i202.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p26.dup := 0;
  $M.422 := $store.i128($M.422,$p26,$i197);
  $M.422.dup := $store.i1($M.422.dup,$p26,$i197.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p203 := $bitcast.ref.ref($p26);
  $p203.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p204 := $add.ref($add.ref($p203,$mul.ref(0,16)),$mul.ref(0,1));
  $p204.dup := $or.i1($or.i1($p203.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p204.dup := 0;
  $i205 := $load.i64($M.422,$p204);
  $i205.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p206 := $add.ref($add.ref($p203,$mul.ref(0,16)),$mul.ref(8,1));
  $p206.dup := $or.i1($or.i1($p203.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p206.dup := 0;
  $i207 := $load.i64($M.422,$p206);
  $i207.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  call $p208, $p208.dup := FStar_UInt128_add($i200, $i200.dup, $i202, $i202.dup, $i205, $i205.dup, $i207, $i207.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p209 := $bitcast.ref.ref($p27);
  $p209.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p210 := $add.ref($add.ref($p209,$mul.ref(0,16)),$mul.ref(0,1));
  $p210.dup := $or.i1($or.i1($p209.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $i211 := $extractvalue.i64($p208,0);
  $i211.dup := $or.i1($p208.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p210.dup := 0;
  $M.423 := $store.i64($M.423,$p210,$i211);
  $M.423.dup := $store.i1($M.423.dup,$p210,$i211.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p212 := $add.ref($add.ref($p209,$mul.ref(0,16)),$mul.ref(8,1));
  $p212.dup := $or.i1($or.i1($p209.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $i213 := $extractvalue.i64($p208,1);
  $i213.dup := $or.i1($p208.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p212.dup := 0;
  $M.423 := $store.i64($M.423,$p212,$i213);
  $M.423.dup := $store.i1($M.423.dup,$p212,$i213.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 347, 31} true;
  assume {:verifier.code 0} true;
  $p27.dup := 0;
  $i214 := $load.i128($M.423,$p27);
  $i214.dup := 0;
  call {:cexpr "l_1"} boogie_si_record_i128($i214);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  $p28.dup := 0;
  $M.424 := $store.i128($M.424,$p28,$i214);
  $M.424.dup := $store.i1($M.424.dup,$p28,$i214.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  $p215 := $bitcast.ref.ref($p28);
  $p215.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  $p216 := $add.ref($add.ref($p215,$mul.ref(0,16)),$mul.ref(0,1));
  $p216.dup := $or.i1($or.i1($p215.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  $p216.dup := 0;
  $i217 := $load.i64($M.424,$p216);
  $i217.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  $p218 := $add.ref($add.ref($p215,$mul.ref(0,16)),$mul.ref(8,1));
  $p218.dup := $or.i1($or.i1($p215.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  $p218.dup := 0;
  $i219 := $load.i64($M.424,$p218);
  $i219.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 19} true;
  assume {:verifier.code 0} true;
  call $i220, $i220.dup := FStar_UInt128_uint128_to_uint64($i217, $i217.dup, $i219, $i219.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 348, 56} true;
  assume {:verifier.code 0} true;
  $i221 := $and.i64($i220,2251799813685247);
  $i221.dup := $or.i1($i220.dup,0);
  call {:cexpr "tmp2"} boogie_si_record_i64($i221);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $p29.dup := 0;
  $M.425 := $store.i128($M.425,$p29,$i214);
  $M.425.dup := $store.i1($M.425.dup,$p29,$i214.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $p222 := $bitcast.ref.ref($p29);
  $p222.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $p223 := $add.ref($add.ref($p222,$mul.ref(0,16)),$mul.ref(0,1));
  $p223.dup := $or.i1($or.i1($p222.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $p223.dup := 0;
  $i224 := $load.i64($M.425,$p223);
  $i224.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $p225 := $add.ref($add.ref($p222,$mul.ref(0,16)),$mul.ref(8,1));
  $p225.dup := $or.i1($or.i1($p222.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $p225.dup := 0;
  $i226 := $load.i64($M.425,$p225);
  $i226.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  call $p227, $p227.dup := FStar_UInt128_shift_right($i224, $i224.dup, $i226, $i226.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $p228 := $bitcast.ref.ref($p30);
  $p228.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $p229 := $add.ref($add.ref($p228,$mul.ref(0,16)),$mul.ref(0,1));
  $p229.dup := $or.i1($or.i1($p228.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $i230 := $extractvalue.i64($p227,0);
  $i230.dup := $or.i1($p227.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $p229.dup := 0;
  $M.426 := $store.i64($M.426,$p229,$i230);
  $M.426.dup := $store.i1($M.426.dup,$p229,$i230.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $p231 := $add.ref($add.ref($p228,$mul.ref(0,16)),$mul.ref(8,1));
  $p231.dup := $or.i1($or.i1($p228.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $i232 := $extractvalue.i64($p227,1);
  $i232.dup := $or.i1($p227.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $p231.dup := 0;
  $M.426 := $store.i64($M.426,$p231,$i232);
  $M.426.dup := $store.i1($M.426.dup,$p231,$i232.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 49} true;
  assume {:verifier.code 0} true;
  $p30.dup := 0;
  $i233 := $load.i128($M.426,$p30);
  $i233.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  $p31.dup := 0;
  $M.427 := $store.i128($M.427,$p31,$i233);
  $M.427.dup := $store.i1($M.427.dup,$p31,$i233.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  $p234 := $bitcast.ref.ref($p31);
  $p234.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  $p235 := $add.ref($add.ref($p234,$mul.ref(0,16)),$mul.ref(0,1));
  $p235.dup := $or.i1($or.i1($p234.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  $p235.dup := 0;
  $i236 := $load.i64($M.427,$p235);
  $i236.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  $p237 := $add.ref($add.ref($p234,$mul.ref(0,16)),$mul.ref(8,1));
  $p237.dup := $or.i1($or.i1($p234.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  $p237.dup := 0;
  $i238 := $load.i64($M.427,$p237);
  $i238.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 349, 17} true;
  assume {:verifier.code 0} true;
  call $i239, $i239.dup := FStar_UInt128_uint128_to_uint64($i236, $i236.dup, $i238, $i238.dup);
  call {:cexpr "c2"} boogie_si_record_i64($i239);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  call $p240, $p240.dup := FStar_UInt128_uint64_to_uint128($i239, $i239.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  $p241 := $bitcast.ref.ref($p32);
  $p241.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  $p242 := $add.ref($add.ref($p241,$mul.ref(0,16)),$mul.ref(0,1));
  $p242.dup := $or.i1($or.i1($p241.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  $i243 := $extractvalue.i64($p240,0);
  $i243.dup := $or.i1($p240.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  $p242.dup := 0;
  $M.428 := $store.i64($M.428,$p242,$i243);
  $M.428.dup := $store.i1($M.428.dup,$p242,$i243.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  $p244 := $add.ref($add.ref($p241,$mul.ref(0,16)),$mul.ref(8,1));
  $p244.dup := $or.i1($or.i1($p241.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  $i245 := $extractvalue.i64($p240,1);
  $i245.dup := $or.i1($p240.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  $p244.dup := 0;
  $M.428 := $store.i64($M.428,$p244,$i245);
  $M.428.dup := $store.i1($M.428.dup,$p244,$i245.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 57} true;
  assume {:verifier.code 0} true;
  $p32.dup := 0;
  $i246 := $load.i128($M.428,$p32);
  $i246.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p33.dup := 0;
  $M.429 := $store.i128($M.429,$p33,$i85);
  $M.429.dup := $store.i1($M.429.dup,$p33,$i85.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p247 := $bitcast.ref.ref($p33);
  $p247.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p248 := $add.ref($add.ref($p247,$mul.ref(0,16)),$mul.ref(0,1));
  $p248.dup := $or.i1($or.i1($p247.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p248.dup := 0;
  $i249 := $load.i64($M.429,$p248);
  $i249.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p250 := $add.ref($add.ref($p247,$mul.ref(0,16)),$mul.ref(8,1));
  $p250.dup := $or.i1($or.i1($p247.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p250.dup := 0;
  $i251 := $load.i64($M.429,$p250);
  $i251.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p34.dup := 0;
  $M.430 := $store.i128($M.430,$p34,$i246);
  $M.430.dup := $store.i1($M.430.dup,$p34,$i246.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p252 := $bitcast.ref.ref($p34);
  $p252.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p253 := $add.ref($add.ref($p252,$mul.ref(0,16)),$mul.ref(0,1));
  $p253.dup := $or.i1($or.i1($p252.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p253.dup := 0;
  $i254 := $load.i64($M.430,$p253);
  $i254.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p255 := $add.ref($add.ref($p252,$mul.ref(0,16)),$mul.ref(8,1));
  $p255.dup := $or.i1($or.i1($p252.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p255.dup := 0;
  $i256 := $load.i64($M.430,$p255);
  $i256.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  call $p257, $p257.dup := FStar_UInt128_add($i249, $i249.dup, $i251, $i251.dup, $i254, $i254.dup, $i256, $i256.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p258 := $bitcast.ref.ref($p35);
  $p258.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p259 := $add.ref($add.ref($p258,$mul.ref(0,16)),$mul.ref(0,1));
  $p259.dup := $or.i1($or.i1($p258.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $i260 := $extractvalue.i64($p257,0);
  $i260.dup := $or.i1($p257.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p259.dup := 0;
  $M.431 := $store.i64($M.431,$p259,$i260);
  $M.431.dup := $store.i1($M.431.dup,$p259,$i260.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p261 := $add.ref($add.ref($p258,$mul.ref(0,16)),$mul.ref(8,1));
  $p261.dup := $or.i1($or.i1($p258.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $i262 := $extractvalue.i64($p257,1);
  $i262.dup := $or.i1($p257.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p261.dup := 0;
  $M.431 := $store.i64($M.431,$p261,$i262);
  $M.431.dup := $store.i1($M.431.dup,$p261,$i262.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 350, 31} true;
  assume {:verifier.code 0} true;
  $p35.dup := 0;
  $i263 := $load.i128($M.431,$p35);
  $i263.dup := 0;
  call {:cexpr "l_2"} boogie_si_record_i128($i263);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  $p36.dup := 0;
  $M.432 := $store.i128($M.432,$p36,$i263);
  $M.432.dup := $store.i1($M.432.dup,$p36,$i263.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  $p264 := $bitcast.ref.ref($p36);
  $p264.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  $p265 := $add.ref($add.ref($p264,$mul.ref(0,16)),$mul.ref(0,1));
  $p265.dup := $or.i1($or.i1($p264.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  $p265.dup := 0;
  $i266 := $load.i64($M.432,$p265);
  $i266.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  $p267 := $add.ref($add.ref($p264,$mul.ref(0,16)),$mul.ref(8,1));
  $p267.dup := $or.i1($or.i1($p264.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  $p267.dup := 0;
  $i268 := $load.i64($M.432,$p267);
  $i268.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 19} true;
  assume {:verifier.code 0} true;
  call $i269, $i269.dup := FStar_UInt128_uint128_to_uint64($i266, $i266.dup, $i268, $i268.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 351, 56} true;
  assume {:verifier.code 0} true;
  $i270 := $and.i64($i269,2251799813685247);
  $i270.dup := $or.i1($i269.dup,0);
  call {:cexpr "tmp3"} boogie_si_record_i64($i270);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $p37.dup := 0;
  $M.433 := $store.i128($M.433,$p37,$i263);
  $M.433.dup := $store.i1($M.433.dup,$p37,$i263.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $p271 := $bitcast.ref.ref($p37);
  $p271.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $p272 := $add.ref($add.ref($p271,$mul.ref(0,16)),$mul.ref(0,1));
  $p272.dup := $or.i1($or.i1($p271.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $p272.dup := 0;
  $i273 := $load.i64($M.433,$p272);
  $i273.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $p274 := $add.ref($add.ref($p271,$mul.ref(0,16)),$mul.ref(8,1));
  $p274.dup := $or.i1($or.i1($p271.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $p274.dup := 0;
  $i275 := $load.i64($M.433,$p274);
  $i275.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  call $p276, $p276.dup := FStar_UInt128_shift_right($i273, $i273.dup, $i275, $i275.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $p277 := $bitcast.ref.ref($p38);
  $p277.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $p278 := $add.ref($add.ref($p277,$mul.ref(0,16)),$mul.ref(0,1));
  $p278.dup := $or.i1($or.i1($p277.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $i279 := $extractvalue.i64($p276,0);
  $i279.dup := $or.i1($p276.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $p278.dup := 0;
  $M.434 := $store.i64($M.434,$p278,$i279);
  $M.434.dup := $store.i1($M.434.dup,$p278,$i279.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $p280 := $add.ref($add.ref($p277,$mul.ref(0,16)),$mul.ref(8,1));
  $p280.dup := $or.i1($or.i1($p277.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $i281 := $extractvalue.i64($p276,1);
  $i281.dup := $or.i1($p276.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $p280.dup := 0;
  $M.434 := $store.i64($M.434,$p280,$i281);
  $M.434.dup := $store.i1($M.434.dup,$p280,$i281.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 49} true;
  assume {:verifier.code 0} true;
  $p38.dup := 0;
  $i282 := $load.i128($M.434,$p38);
  $i282.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  $p39.dup := 0;
  $M.435 := $store.i128($M.435,$p39,$i282);
  $M.435.dup := $store.i1($M.435.dup,$p39,$i282.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  $p283 := $bitcast.ref.ref($p39);
  $p283.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  $p284 := $add.ref($add.ref($p283,$mul.ref(0,16)),$mul.ref(0,1));
  $p284.dup := $or.i1($or.i1($p283.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  $p284.dup := 0;
  $i285 := $load.i64($M.435,$p284);
  $i285.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  $p286 := $add.ref($add.ref($p283,$mul.ref(0,16)),$mul.ref(8,1));
  $p286.dup := $or.i1($or.i1($p283.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  $p286.dup := 0;
  $i287 := $load.i64($M.435,$p286);
  $i287.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 352, 17} true;
  assume {:verifier.code 0} true;
  call $i288, $i288.dup := FStar_UInt128_uint128_to_uint64($i285, $i285.dup, $i287, $i287.dup);
  call {:cexpr "c3"} boogie_si_record_i64($i288);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  call $p289, $p289.dup := FStar_UInt128_uint64_to_uint128($i288, $i288.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  $p290 := $bitcast.ref.ref($p40);
  $p290.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  $p291 := $add.ref($add.ref($p290,$mul.ref(0,16)),$mul.ref(0,1));
  $p291.dup := $or.i1($or.i1($p290.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  $i292 := $extractvalue.i64($p289,0);
  $i292.dup := $or.i1($p289.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  $p291.dup := 0;
  $M.436 := $store.i64($M.436,$p291,$i292);
  $M.436.dup := $store.i1($M.436.dup,$p291,$i292.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  $p293 := $add.ref($add.ref($p290,$mul.ref(0,16)),$mul.ref(8,1));
  $p293.dup := $or.i1($or.i1($p290.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  $i294 := $extractvalue.i64($p289,1);
  $i294.dup := $or.i1($p289.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  $p293.dup := 0;
  $M.436 := $store.i64($M.436,$p293,$i294);
  $M.436.dup := $store.i1($M.436.dup,$p293,$i294.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 57} true;
  assume {:verifier.code 0} true;
  $p40.dup := 0;
  $i295 := $load.i128($M.436,$p40);
  $i295.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p41.dup := 0;
  $M.437 := $store.i128($M.437,$p41,$i92);
  $M.437.dup := $store.i1($M.437.dup,$p41,$i92.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p296 := $bitcast.ref.ref($p41);
  $p296.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p297 := $add.ref($add.ref($p296,$mul.ref(0,16)),$mul.ref(0,1));
  $p297.dup := $or.i1($or.i1($p296.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p297.dup := 0;
  $i298 := $load.i64($M.437,$p297);
  $i298.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p299 := $add.ref($add.ref($p296,$mul.ref(0,16)),$mul.ref(8,1));
  $p299.dup := $or.i1($or.i1($p296.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p299.dup := 0;
  $i300 := $load.i64($M.437,$p299);
  $i300.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p42.dup := 0;
  $M.438 := $store.i128($M.438,$p42,$i295);
  $M.438.dup := $store.i1($M.438.dup,$p42,$i295.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p301 := $bitcast.ref.ref($p42);
  $p301.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p302 := $add.ref($add.ref($p301,$mul.ref(0,16)),$mul.ref(0,1));
  $p302.dup := $or.i1($or.i1($p301.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p302.dup := 0;
  $i303 := $load.i64($M.438,$p302);
  $i303.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p304 := $add.ref($add.ref($p301,$mul.ref(0,16)),$mul.ref(8,1));
  $p304.dup := $or.i1($or.i1($p301.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p304.dup := 0;
  $i305 := $load.i64($M.438,$p304);
  $i305.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  call $p306, $p306.dup := FStar_UInt128_add($i298, $i298.dup, $i300, $i300.dup, $i303, $i303.dup, $i305, $i305.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p307 := $bitcast.ref.ref($p43);
  $p307.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p308 := $add.ref($add.ref($p307,$mul.ref(0,16)),$mul.ref(0,1));
  $p308.dup := $or.i1($or.i1($p307.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $i309 := $extractvalue.i64($p306,0);
  $i309.dup := $or.i1($p306.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p308.dup := 0;
  $M.439 := $store.i64($M.439,$p308,$i309);
  $M.439.dup := $store.i1($M.439.dup,$p308,$i309.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p310 := $add.ref($add.ref($p307,$mul.ref(0,16)),$mul.ref(8,1));
  $p310.dup := $or.i1($or.i1($p307.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $i311 := $extractvalue.i64($p306,1);
  $i311.dup := $or.i1($p306.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p310.dup := 0;
  $M.439 := $store.i64($M.439,$p310,$i311);
  $M.439.dup := $store.i1($M.439.dup,$p310,$i311.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 353, 31} true;
  assume {:verifier.code 0} true;
  $p43.dup := 0;
  $i312 := $load.i128($M.439,$p43);
  $i312.dup := 0;
  call {:cexpr "l_3"} boogie_si_record_i128($i312);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  $p44.dup := 0;
  $M.440 := $store.i128($M.440,$p44,$i312);
  $M.440.dup := $store.i1($M.440.dup,$p44,$i312.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  $p313 := $bitcast.ref.ref($p44);
  $p313.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  $p314 := $add.ref($add.ref($p313,$mul.ref(0,16)),$mul.ref(0,1));
  $p314.dup := $or.i1($or.i1($p313.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  $p314.dup := 0;
  $i315 := $load.i64($M.440,$p314);
  $i315.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  $p316 := $add.ref($add.ref($p313,$mul.ref(0,16)),$mul.ref(8,1));
  $p316.dup := $or.i1($or.i1($p313.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  $p316.dup := 0;
  $i317 := $load.i64($M.440,$p316);
  $i317.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 19} true;
  assume {:verifier.code 0} true;
  call $i318, $i318.dup := FStar_UInt128_uint128_to_uint64($i315, $i315.dup, $i317, $i317.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 354, 56} true;
  assume {:verifier.code 0} true;
  $i319 := $and.i64($i318,2251799813685247);
  $i319.dup := $or.i1($i318.dup,0);
  call {:cexpr "tmp4"} boogie_si_record_i64($i319);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $p45.dup := 0;
  $M.441 := $store.i128($M.441,$p45,$i312);
  $M.441.dup := $store.i1($M.441.dup,$p45,$i312.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $p320 := $bitcast.ref.ref($p45);
  $p320.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $p321 := $add.ref($add.ref($p320,$mul.ref(0,16)),$mul.ref(0,1));
  $p321.dup := $or.i1($or.i1($p320.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $p321.dup := 0;
  $i322 := $load.i64($M.441,$p321);
  $i322.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $p323 := $add.ref($add.ref($p320,$mul.ref(0,16)),$mul.ref(8,1));
  $p323.dup := $or.i1($or.i1($p320.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $p323.dup := 0;
  $i324 := $load.i64($M.441,$p323);
  $i324.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  call $p325, $p325.dup := FStar_UInt128_shift_right($i322, $i322.dup, $i324, $i324.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $p326 := $bitcast.ref.ref($p46);
  $p326.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $p327 := $add.ref($add.ref($p326,$mul.ref(0,16)),$mul.ref(0,1));
  $p327.dup := $or.i1($or.i1($p326.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $i328 := $extractvalue.i64($p325,0);
  $i328.dup := $or.i1($p325.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $p327.dup := 0;
  $M.442 := $store.i64($M.442,$p327,$i328);
  $M.442.dup := $store.i1($M.442.dup,$p327,$i328.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $p329 := $add.ref($add.ref($p326,$mul.ref(0,16)),$mul.ref(8,1));
  $p329.dup := $or.i1($or.i1($p326.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $i330 := $extractvalue.i64($p325,1);
  $i330.dup := $or.i1($p325.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $p329.dup := 0;
  $M.442 := $store.i64($M.442,$p329,$i330);
  $M.442.dup := $store.i1($M.442.dup,$p329,$i330.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 49} true;
  assume {:verifier.code 0} true;
  $p46.dup := 0;
  $i331 := $load.i128($M.442,$p46);
  $i331.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  $p47.dup := 0;
  $M.443 := $store.i128($M.443,$p47,$i331);
  $M.443.dup := $store.i1($M.443.dup,$p47,$i331.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  $p332 := $bitcast.ref.ref($p47);
  $p332.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  $p333 := $add.ref($add.ref($p332,$mul.ref(0,16)),$mul.ref(0,1));
  $p333.dup := $or.i1($or.i1($p332.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  $p333.dup := 0;
  $i334 := $load.i64($M.443,$p333);
  $i334.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  $p335 := $add.ref($add.ref($p332,$mul.ref(0,16)),$mul.ref(8,1));
  $p335.dup := $or.i1($or.i1($p332.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  $p335.dup := 0;
  $i336 := $load.i64($M.443,$p335);
  $i336.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 355, 17} true;
  assume {:verifier.code 0} true;
  call $i337, $i337.dup := FStar_UInt128_uint128_to_uint64($i334, $i334.dup, $i336, $i336.dup);
  call {:cexpr "c4"} boogie_si_record_i64($i337);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 356, 28} true;
  assume {:verifier.code 0} true;
  $i338 := $mul.i64($i337,19);
  $i338.dup := $or.i1($i337.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 356, 23} true;
  assume {:verifier.code 0} true;
  $i339 := $add.i64($i123,$i338);
  $i339.dup := 0;
  call {:cexpr "l_4"} boogie_si_record_i64($i339);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 357, 24} true;
  assume {:verifier.code 0} true;
  $i340 := $and.i64($i339,2251799813685247);
  $i340.dup := $or.i1($i339.dup,0);
  call {:cexpr "tmp0_"} boogie_si_record_i64($i340);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 358, 21} true;
  assume {:verifier.code 0} true;
  $i341 := $lshr.i64($i339,51);
  $i341.dup := $or.i1($i339.dup,0);
  call {:cexpr "c5"} boogie_si_record_i64($i341);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 360, 22} true;
  assume {:verifier.code 0} true;
  $i342 := $add.i64($i172,$i341);
  $i342.dup := 0;
  call {:cexpr "o1"} boogie_si_record_i64($i342);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 364, 3} true;
  assume {:verifier.code 0} true;
  $p343 := $add.ref($p0,$mul.ref(0,8));
  $p343.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 364, 11} true;
  assume {:verifier.code 0} true;
  $p343.dup := 0;
  $M.0 := $store.i64($M.0,$p343,$i340);
  $M.0.dup := $store.i1($M.0.dup,$p343,$i340.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 365, 3} true;
  assume {:verifier.code 0} true;
  $p344 := $add.ref($p0,$mul.ref(1,8));
  $p344.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 365, 11} true;
  assume {:verifier.code 0} true;
  $p344.dup := 0;
  $M.0 := $store.i64($M.0,$p344,$i342);
  $M.0.dup := $store.i1($M.0.dup,$p344,$i342.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 366, 3} true;
  assume {:verifier.code 0} true;
  $p345 := $add.ref($p0,$mul.ref(2,8));
  $p345.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 366, 11} true;
  assume {:verifier.code 0} true;
  $p345.dup := 0;
  $M.0 := $store.i64($M.0,$p345,$i221);
  $M.0.dup := $store.i1($M.0.dup,$p345,$i221.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 367, 3} true;
  assume {:verifier.code 0} true;
  $p346 := $add.ref($p0,$mul.ref(3,8));
  $p346.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 367, 11} true;
  assume {:verifier.code 0} true;
  $p346.dup := 0;
  $M.0 := $store.i64($M.0,$p346,$i270);
  $M.0.dup := $store.i1($M.0.dup,$p346,$i270.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 368, 3} true;
  assume {:verifier.code 0} true;
  $p347 := $add.ref($p0,$mul.ref(4,8));
  $p347.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 368, 11} true;
  assume {:verifier.code 0} true;
  $p347.dup := 0;
  $M.0 := $store.i64($M.0,$p347,$i319);
  $M.0.dup := $store.i1($M.0.dup,$p347,$i319.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 369, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const Hacl_Impl_Curve25519_Field51_fmul2: ref;
axiom (Hacl_Impl_Curve25519_Field51_fmul2 == $sub.ref(0,30960));
procedure {:inline 1} Hacl_Impl_Curve25519_Field51_fmul2($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1, $p3: ref, $p3.dup: i1)
modifies $M.444, $M.445, $M.446, $M.447, $M.448, $M.449, $M.450, $M.451, $M.452, $M.453, $M.454, $M.455, $M.456, $M.457, $M.458, $M.459, $M.460, $M.461, $M.462, $M.463, $M.464, $M.465, $M.466, $M.467, $M.468, $M.469, $M.470, $M.471, $M.472, $M.473, $M.474, $M.475, $M.476, $M.477, $M.478, $M.479, $M.480, $M.481, $M.482, $M.483, $M.484, $M.485, $M.486, $M.487, $M.488, $M.489, $M.490, $M.491, $M.492, $M.493, $M.494, $M.495, $M.496, $M.497, $M.498, $M.499, $M.500, $M.501, $M.502, $M.503, $M.504, $M.505, $M.506, $M.507, $M.508, $M.509, $M.510, $M.511, $M.512, $M.513, $M.514, $M.515, $M.516, $M.517, $M.518, $M.519, $M.520, $M.521, $M.522, $M.523, $M.524, $M.525, $M.526, $M.527, $M.528, $M.529, $M.530, $M.531, $M.532, $M.533, $M.534, $M.535, $M.536, $M.537, $M.538, $M.539, $M.540, $M.541, $M.542, $M.543, $M.544, $M.545, $M.546, $M.547, $M.548, $M.549, $M.550, $M.551, $M.552, $M.553, $M.554, $M.555, $M.556, $M.557, $M.558, $M.559, $M.560, $M.561, $M.562, $M.563, $M.564, $M.565, $M.566, $M.567, $M.568, $M.569, $M.570, $M.571, $M.572, $M.573, $M.574, $M.575, $M.576, $M.577, $M.578, $M.579, $M.580, $M.581, $M.582, $M.583, $M.584, $M.585, $M.586, $M.587, $M.588, $M.589, $M.590, $M.591, $M.592, $M.593, $M.594, $M.595, $M.596, $M.597, $M.598, $M.599, $M.600, $M.601, $M.602, $M.603, $M.604, $M.605, $M.606, $M.607, $M.608, $M.609, $M.610, $M.611, $M.612, $M.613, $M.614, $M.615, $M.616, $M.617, $M.618, $M.619, $M.620, $M.621, $M.622, $M.623, $M.624, $M.625, $M.626, $M.627, $M.628, $M.629, $M.630, $M.631, $M.632, $M.633, $M.634, $M.635, $M.636, $M.637, $M.638, $M.639, $M.640, $M.641, $M.642, $M.643, $M.644, $M.645, $M.646, $M.647, $M.648, $M.649, $M.650, $M.651, $M.652, $M.653, $M.654, $M.655, $M.656, $M.657, $M.658, $M.659, $M.660, $M.661, $M.662, $M.663, $M.664, $M.665, $M.666, $M.667, $M.668, $M.669, $M.670, $M.671, $M.672, $M.673, $M.674, $M.675, $M.676, $M.677, $M.678, $M.679, $M.680, $M.681, $M.682, $M.683, $M.684, $M.685, $M.686, $M.687, $M.688, $M.689, $M.690, $M.691, $M.692, $M.693, $M.0, $exn;
modifies $M.86;
modifies $M.87, $M.88, $M.89;
modifies $M.90;
modifies $M.91;
modifies $M.92, $M.93;
modifies $CurrAddr;
{
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $p7: ref;
  var $p7.dup: i1;
  var $p8: ref;
  var $p8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $p10: ref;
  var $p10.dup: i1;
  var $p11: ref;
  var $p11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
  var $p13: ref;
  var $p13.dup: i1;
  var $p14: ref;
  var $p14.dup: i1;
  var $p15: ref;
  var $p15.dup: i1;
  var $p16: ref;
  var $p16.dup: i1;
  var $p17: ref;
  var $p17.dup: i1;
  var $p18: ref;
  var $p18.dup: i1;
  var $p19: ref;
  var $p19.dup: i1;
  var $p20: ref;
  var $p20.dup: i1;
  var $p21: ref;
  var $p21.dup: i1;
  var $p22: ref;
  var $p22.dup: i1;
  var $p23: ref;
  var $p23.dup: i1;
  var $p24: ref;
  var $p24.dup: i1;
  var $p25: ref;
  var $p25.dup: i1;
  var $p26: ref;
  var $p26.dup: i1;
  var $p27: ref;
  var $p27.dup: i1;
  var $p28: ref;
  var $p28.dup: i1;
  var $p29: ref;
  var $p29.dup: i1;
  var $p30: ref;
  var $p30.dup: i1;
  var $p31: ref;
  var $p31.dup: i1;
  var $p32: ref;
  var $p32.dup: i1;
  var $p33: ref;
  var $p33.dup: i1;
  var $p34: ref;
  var $p34.dup: i1;
  var $p35: ref;
  var $p35.dup: i1;
  var $p36: ref;
  var $p36.dup: i1;
  var $p37: ref;
  var $p37.dup: i1;
  var $p38: ref;
  var $p38.dup: i1;
  var $p39: ref;
  var $p39.dup: i1;
  var $p40: ref;
  var $p40.dup: i1;
  var $p41: ref;
  var $p41.dup: i1;
  var $p42: ref;
  var $p42.dup: i1;
  var $p43: ref;
  var $p43.dup: i1;
  var $p44: ref;
  var $p44.dup: i1;
  var $p45: ref;
  var $p45.dup: i1;
  var $p46: ref;
  var $p46.dup: i1;
  var $p47: ref;
  var $p47.dup: i1;
  var $p48: ref;
  var $p48.dup: i1;
  var $p49: ref;
  var $p49.dup: i1;
  var $p50: ref;
  var $p50.dup: i1;
  var $p51: ref;
  var $p51.dup: i1;
  var $p52: ref;
  var $p52.dup: i1;
  var $p53: ref;
  var $p53.dup: i1;
  var $p54: ref;
  var $p54.dup: i1;
  var $p55: ref;
  var $p55.dup: i1;
  var $p56: ref;
  var $p56.dup: i1;
  var $p57: ref;
  var $p57.dup: i1;
  var $p58: ref;
  var $p58.dup: i1;
  var $p59: ref;
  var $p59.dup: i1;
  var $p60: ref;
  var $p60.dup: i1;
  var $p61: ref;
  var $p61.dup: i1;
  var $p62: ref;
  var $p62.dup: i1;
  var $p63: ref;
  var $p63.dup: i1;
  var $p64: ref;
  var $p64.dup: i1;
  var $p65: ref;
  var $p65.dup: i1;
  var $p66: ref;
  var $p66.dup: i1;
  var $p67: ref;
  var $p67.dup: i1;
  var $p68: ref;
  var $p68.dup: i1;
  var $p69: ref;
  var $p69.dup: i1;
  var $p70: ref;
  var $p70.dup: i1;
  var $p71: ref;
  var $p71.dup: i1;
  var $p72: ref;
  var $p72.dup: i1;
  var $p73: ref;
  var $p73.dup: i1;
  var $p74: ref;
  var $p74.dup: i1;
  var $p75: ref;
  var $p75.dup: i1;
  var $p76: ref;
  var $p76.dup: i1;
  var $p77: ref;
  var $p77.dup: i1;
  var $p78: ref;
  var $p78.dup: i1;
  var $p79: ref;
  var $p79.dup: i1;
  var $p80: ref;
  var $p80.dup: i1;
  var $p81: ref;
  var $p81.dup: i1;
  var $p82: ref;
  var $p82.dup: i1;
  var $p83: ref;
  var $p83.dup: i1;
  var $p84: ref;
  var $p84.dup: i1;
  var $p85: ref;
  var $p85.dup: i1;
  var $p86: ref;
  var $p86.dup: i1;
  var $p87: ref;
  var $p87.dup: i1;
  var $p88: ref;
  var $p88.dup: i1;
  var $p89: ref;
  var $p89.dup: i1;
  var $p90: ref;
  var $p90.dup: i1;
  var $p91: ref;
  var $p91.dup: i1;
  var $p92: ref;
  var $p92.dup: i1;
  var $p93: ref;
  var $p93.dup: i1;
  var $p94: ref;
  var $p94.dup: i1;
  var $p95: ref;
  var $p95.dup: i1;
  var $p96: ref;
  var $p96.dup: i1;
  var $p97: ref;
  var $p97.dup: i1;
  var $p98: ref;
  var $p98.dup: i1;
  var $p99: ref;
  var $p99.dup: i1;
  var $p100: ref;
  var $p100.dup: i1;
  var $p101: ref;
  var $p101.dup: i1;
  var $p102: ref;
  var $p102.dup: i1;
  var $p103: ref;
  var $p103.dup: i1;
  var $p104: ref;
  var $p104.dup: i1;
  var $p105: ref;
  var $p105.dup: i1;
  var $p106: ref;
  var $p106.dup: i1;
  var $p107: ref;
  var $p107.dup: i1;
  var $p108: ref;
  var $p108.dup: i1;
  var $p109: ref;
  var $p109.dup: i1;
  var $p110: ref;
  var $p110.dup: i1;
  var $p111: ref;
  var $p111.dup: i1;
  var $p112: ref;
  var $p112.dup: i1;
  var $p113: ref;
  var $p113.dup: i1;
  var $p114: ref;
  var $p114.dup: i1;
  var $p115: ref;
  var $p115.dup: i1;
  var $p116: ref;
  var $p116.dup: i1;
  var $p117: ref;
  var $p117.dup: i1;
  var $p118: ref;
  var $p118.dup: i1;
  var $p119: ref;
  var $p119.dup: i1;
  var $p120: ref;
  var $p120.dup: i1;
  var $p121: ref;
  var $p121.dup: i1;
  var $p122: ref;
  var $p122.dup: i1;
  var $p123: ref;
  var $p123.dup: i1;
  var $p124: ref;
  var $p124.dup: i1;
  var $p125: ref;
  var $p125.dup: i1;
  var $p126: ref;
  var $p126.dup: i1;
  var $p127: ref;
  var $p127.dup: i1;
  var $p128: ref;
  var $p128.dup: i1;
  var $p129: ref;
  var $p129.dup: i1;
  var $p130: ref;
  var $p130.dup: i1;
  var $p131: ref;
  var $p131.dup: i1;
  var $p132: ref;
  var $p132.dup: i1;
  var $p133: ref;
  var $p133.dup: i1;
  var $p134: ref;
  var $p134.dup: i1;
  var $p135: ref;
  var $p135.dup: i1;
  var $p136: ref;
  var $p136.dup: i1;
  var $p137: ref;
  var $p137.dup: i1;
  var $p138: ref;
  var $p138.dup: i1;
  var $p139: ref;
  var $p139.dup: i1;
  var $p140: ref;
  var $p140.dup: i1;
  var $p141: ref;
  var $p141.dup: i1;
  var $p142: ref;
  var $p142.dup: i1;
  var $p143: ref;
  var $p143.dup: i1;
  var $p144: ref;
  var $p144.dup: i1;
  var $p145: ref;
  var $p145.dup: i1;
  var $p146: ref;
  var $p146.dup: i1;
  var $p147: ref;
  var $p147.dup: i1;
  var $p148: ref;
  var $p148.dup: i1;
  var $p149: ref;
  var $p149.dup: i1;
  var $p150: ref;
  var $p150.dup: i1;
  var $p151: ref;
  var $p151.dup: i1;
  var $p152: ref;
  var $p152.dup: i1;
  var $p153: ref;
  var $p153.dup: i1;
  var $p154: ref;
  var $p154.dup: i1;
  var $p155: ref;
  var $p155.dup: i1;
  var $p156: ref;
  var $p156.dup: i1;
  var $p157: ref;
  var $p157.dup: i1;
  var $p158: ref;
  var $p158.dup: i1;
  var $p159: ref;
  var $p159.dup: i1;
  var $p160: ref;
  var $p160.dup: i1;
  var $p161: ref;
  var $p161.dup: i1;
  var $p162: ref;
  var $p162.dup: i1;
  var $p163: ref;
  var $p163.dup: i1;
  var $p164: ref;
  var $p164.dup: i1;
  var $p165: ref;
  var $p165.dup: i1;
  var $p166: ref;
  var $p166.dup: i1;
  var $p167: ref;
  var $p167.dup: i1;
  var $p168: ref;
  var $p168.dup: i1;
  var $p169: ref;
  var $p169.dup: i1;
  var $p170: ref;
  var $p170.dup: i1;
  var $p171: ref;
  var $p171.dup: i1;
  var $p172: ref;
  var $p172.dup: i1;
  var $p173: ref;
  var $p173.dup: i1;
  var $p174: ref;
  var $p174.dup: i1;
  var $p175: ref;
  var $p175.dup: i1;
  var $p176: ref;
  var $p176.dup: i1;
  var $p177: ref;
  var $p177.dup: i1;
  var $p178: ref;
  var $p178.dup: i1;
  var $p179: ref;
  var $p179.dup: i1;
  var $p180: ref;
  var $p180.dup: i1;
  var $p181: ref;
  var $p181.dup: i1;
  var $p182: ref;
  var $p182.dup: i1;
  var $p183: ref;
  var $p183.dup: i1;
  var $p184: ref;
  var $p184.dup: i1;
  var $p185: ref;
  var $p185.dup: i1;
  var $p186: ref;
  var $p186.dup: i1;
  var $p187: ref;
  var $p187.dup: i1;
  var $p188: ref;
  var $p188.dup: i1;
  var $p189: ref;
  var $p189.dup: i1;
  var $p190: ref;
  var $p190.dup: i1;
  var $p191: ref;
  var $p191.dup: i1;
  var $p192: ref;
  var $p192.dup: i1;
  var $p193: ref;
  var $p193.dup: i1;
  var $p194: ref;
  var $p194.dup: i1;
  var $p195: ref;
  var $p195.dup: i1;
  var $p196: ref;
  var $p196.dup: i1;
  var $p197: ref;
  var $p197.dup: i1;
  var $p198: ref;
  var $p198.dup: i1;
  var $p199: ref;
  var $p199.dup: i1;
  var $p200: ref;
  var $p200.dup: i1;
  var $p201: ref;
  var $p201.dup: i1;
  var $p202: ref;
  var $p202.dup: i1;
  var $p203: ref;
  var $p203.dup: i1;
  var $p204: ref;
  var $p204.dup: i1;
  var $p205: ref;
  var $p205.dup: i1;
  var $p206: ref;
  var $p206.dup: i1;
  var $p207: ref;
  var $p207.dup: i1;
  var $p208: ref;
  var $p208.dup: i1;
  var $p209: ref;
  var $p209.dup: i1;
  var $p210: ref;
  var $p210.dup: i1;
  var $p211: ref;
  var $p211.dup: i1;
  var $p212: ref;
  var $p212.dup: i1;
  var $p213: ref;
  var $p213.dup: i1;
  var $p214: ref;
  var $p214.dup: i1;
  var $p215: ref;
  var $p215.dup: i1;
  var $p216: ref;
  var $p216.dup: i1;
  var $p217: ref;
  var $p217.dup: i1;
  var $p218: ref;
  var $p218.dup: i1;
  var $p219: ref;
  var $p219.dup: i1;
  var $p220: ref;
  var $p220.dup: i1;
  var $p221: ref;
  var $p221.dup: i1;
  var $p222: ref;
  var $p222.dup: i1;
  var $p223: ref;
  var $p223.dup: i1;
  var $p224: ref;
  var $p224.dup: i1;
  var $p225: ref;
  var $p225.dup: i1;
  var $p226: ref;
  var $p226.dup: i1;
  var $p227: ref;
  var $p227.dup: i1;
  var $p228: ref;
  var $p228.dup: i1;
  var $p229: ref;
  var $p229.dup: i1;
  var $p230: ref;
  var $p230.dup: i1;
  var $p231: ref;
  var $p231.dup: i1;
  var $p232: ref;
  var $p232.dup: i1;
  var $p233: ref;
  var $p233.dup: i1;
  var $p234: ref;
  var $p234.dup: i1;
  var $p235: ref;
  var $p235.dup: i1;
  var $p236: ref;
  var $p236.dup: i1;
  var $p237: ref;
  var $p237.dup: i1;
  var $p238: ref;
  var $p238.dup: i1;
  var $p239: ref;
  var $p239.dup: i1;
  var $p240: ref;
  var $p240.dup: i1;
  var $p241: ref;
  var $p241.dup: i1;
  var $p242: ref;
  var $p242.dup: i1;
  var $p243: ref;
  var $p243.dup: i1;
  var $p244: ref;
  var $p244.dup: i1;
  var $p245: ref;
  var $p245.dup: i1;
  var $p246: ref;
  var $p246.dup: i1;
  var $p247: ref;
  var $p247.dup: i1;
  var $p248: ref;
  var $p248.dup: i1;
  var $p249: ref;
  var $p249.dup: i1;
  var $p250: ref;
  var $p250.dup: i1;
  var $p251: ref;
  var $p251.dup: i1;
  var $p252: ref;
  var $p252.dup: i1;
  var $p253: ref;
  var $p253.dup: i1;
  var $p254: ref;
  var $p254.dup: i1;
  var $i255: i64;
  var $i255.dup: i1;
  var $p256: ref;
  var $p256.dup: i1;
  var $i257: i64;
  var $i257.dup: i1;
  var $p258: ref;
  var $p258.dup: i1;
  var $i259: i64;
  var $i259.dup: i1;
  var $p260: ref;
  var $p260.dup: i1;
  var $i261: i64;
  var $i261.dup: i1;
  var $p262: ref;
  var $p262.dup: i1;
  var $i263: i64;
  var $i263.dup: i1;
  var $p264: ref;
  var $p264.dup: i1;
  var $i265: i64;
  var $i265.dup: i1;
  var $p266: ref;
  var $p266.dup: i1;
  var $i267: i64;
  var $i267.dup: i1;
  var $p268: ref;
  var $p268.dup: i1;
  var $i269: i64;
  var $i269.dup: i1;
  var $p270: ref;
  var $p270.dup: i1;
  var $i271: i64;
  var $i271.dup: i1;
  var $p272: ref;
  var $p272.dup: i1;
  var $i273: i64;
  var $i273.dup: i1;
  var $p274: ref;
  var $p274.dup: i1;
  var $i275: i64;
  var $i275.dup: i1;
  var $p276: ref;
  var $p276.dup: i1;
  var $i277: i64;
  var $i277.dup: i1;
  var $p278: ref;
  var $p278.dup: i1;
  var $i279: i64;
  var $i279.dup: i1;
  var $p280: ref;
  var $p280.dup: i1;
  var $i281: i64;
  var $i281.dup: i1;
  var $p282: ref;
  var $p282.dup: i1;
  var $i283: i64;
  var $i283.dup: i1;
  var $p284: ref;
  var $p284.dup: i1;
  var $i285: i64;
  var $i285.dup: i1;
  var $p286: ref;
  var $p286.dup: i1;
  var $i287: i64;
  var $i287.dup: i1;
  var $p288: ref;
  var $p288.dup: i1;
  var $i289: i64;
  var $i289.dup: i1;
  var $p290: ref;
  var $p290.dup: i1;
  var $i291: i64;
  var $i291.dup: i1;
  var $p292: ref;
  var $p292.dup: i1;
  var $i293: i64;
  var $i293.dup: i1;
  var $i294: i64;
  var $i294.dup: i1;
  var $i295: i64;
  var $i295.dup: i1;
  var $i296: i64;
  var $i296.dup: i1;
  var $i297: i64;
  var $i297.dup: i1;
  var $i298: i64;
  var $i298.dup: i1;
  var $i299: i64;
  var $i299.dup: i1;
  var $i300: i64;
  var $i300.dup: i1;
  var $i301: i64;
  var $i301.dup: i1;
  var $p302: ref;
  var $p302.dup: i1;
  var $p303: ref;
  var $p303.dup: i1;
  var $p304: ref;
  var $p304.dup: i1;
  var $i305: i64;
  var $i305.dup: i1;
  var $p306: ref;
  var $p306.dup: i1;
  var $i307: i64;
  var $i307.dup: i1;
  var $i308: i128;
  var $i308.dup: i1;
  var $p309: ref;
  var $p309.dup: i1;
  var $p310: ref;
  var $p310.dup: i1;
  var $p311: ref;
  var $p311.dup: i1;
  var $i312: i64;
  var $i312.dup: i1;
  var $p313: ref;
  var $p313.dup: i1;
  var $i314: i64;
  var $i314.dup: i1;
  var $i315: i128;
  var $i315.dup: i1;
  var $p316: ref;
  var $p316.dup: i1;
  var $p317: ref;
  var $p317.dup: i1;
  var $p318: ref;
  var $p318.dup: i1;
  var $i319: i64;
  var $i319.dup: i1;
  var $p320: ref;
  var $p320.dup: i1;
  var $i321: i64;
  var $i321.dup: i1;
  var $i322: i128;
  var $i322.dup: i1;
  var $p323: ref;
  var $p323.dup: i1;
  var $p324: ref;
  var $p324.dup: i1;
  var $p325: ref;
  var $p325.dup: i1;
  var $i326: i64;
  var $i326.dup: i1;
  var $p327: ref;
  var $p327.dup: i1;
  var $i328: i64;
  var $i328.dup: i1;
  var $i329: i128;
  var $i329.dup: i1;
  var $p330: ref;
  var $p330.dup: i1;
  var $p331: ref;
  var $p331.dup: i1;
  var $p332: ref;
  var $p332.dup: i1;
  var $i333: i64;
  var $i333.dup: i1;
  var $p334: ref;
  var $p334.dup: i1;
  var $i335: i64;
  var $i335.dup: i1;
  var $i336: i128;
  var $i336.dup: i1;
  var $p337: ref;
  var $p337.dup: i1;
  var $p338: ref;
  var $p338.dup: i1;
  var $p339: ref;
  var $p339.dup: i1;
  var $i340: i64;
  var $i340.dup: i1;
  var $p341: ref;
  var $p341.dup: i1;
  var $i342: i64;
  var $i342.dup: i1;
  var $i343: i128;
  var $i343.dup: i1;
  var $p344: ref;
  var $p344.dup: i1;
  var $p345: ref;
  var $p345.dup: i1;
  var $i346: i64;
  var $i346.dup: i1;
  var $p347: ref;
  var $p347.dup: i1;
  var $i348: i64;
  var $i348.dup: i1;
  var $p349: ref;
  var $p349.dup: i1;
  var $p350: ref;
  var $p350.dup: i1;
  var $i351: i64;
  var $i351.dup: i1;
  var $p352: ref;
  var $p352.dup: i1;
  var $i353: i64;
  var $i353.dup: i1;
  var $p354: ref;
  var $p354.dup: i1;
  var $p355: ref;
  var $p355.dup: i1;
  var $p356: ref;
  var $p356.dup: i1;
  var $i357: i64;
  var $i357.dup: i1;
  var $p358: ref;
  var $p358.dup: i1;
  var $i359: i64;
  var $i359.dup: i1;
  var $i360: i128;
  var $i360.dup: i1;
  var $p361: ref;
  var $p361.dup: i1;
  var $p362: ref;
  var $p362.dup: i1;
  var $p363: ref;
  var $p363.dup: i1;
  var $i364: i64;
  var $i364.dup: i1;
  var $p365: ref;
  var $p365.dup: i1;
  var $i366: i64;
  var $i366.dup: i1;
  var $i367: i128;
  var $i367.dup: i1;
  var $p368: ref;
  var $p368.dup: i1;
  var $p369: ref;
  var $p369.dup: i1;
  var $i370: i64;
  var $i370.dup: i1;
  var $p371: ref;
  var $p371.dup: i1;
  var $i372: i64;
  var $i372.dup: i1;
  var $p373: ref;
  var $p373.dup: i1;
  var $p374: ref;
  var $p374.dup: i1;
  var $i375: i64;
  var $i375.dup: i1;
  var $p376: ref;
  var $p376.dup: i1;
  var $i377: i64;
  var $i377.dup: i1;
  var $p378: ref;
  var $p378.dup: i1;
  var $p379: ref;
  var $p379.dup: i1;
  var $p380: ref;
  var $p380.dup: i1;
  var $i381: i64;
  var $i381.dup: i1;
  var $p382: ref;
  var $p382.dup: i1;
  var $i383: i64;
  var $i383.dup: i1;
  var $i384: i128;
  var $i384.dup: i1;
  var $p385: ref;
  var $p385.dup: i1;
  var $p386: ref;
  var $p386.dup: i1;
  var $p387: ref;
  var $p387.dup: i1;
  var $i388: i64;
  var $i388.dup: i1;
  var $p389: ref;
  var $p389.dup: i1;
  var $i390: i64;
  var $i390.dup: i1;
  var $i391: i128;
  var $i391.dup: i1;
  var $p392: ref;
  var $p392.dup: i1;
  var $p393: ref;
  var $p393.dup: i1;
  var $i394: i64;
  var $i394.dup: i1;
  var $p395: ref;
  var $p395.dup: i1;
  var $i396: i64;
  var $i396.dup: i1;
  var $p397: ref;
  var $p397.dup: i1;
  var $p398: ref;
  var $p398.dup: i1;
  var $i399: i64;
  var $i399.dup: i1;
  var $p400: ref;
  var $p400.dup: i1;
  var $i401: i64;
  var $i401.dup: i1;
  var $p402: ref;
  var $p402.dup: i1;
  var $p403: ref;
  var $p403.dup: i1;
  var $p404: ref;
  var $p404.dup: i1;
  var $i405: i64;
  var $i405.dup: i1;
  var $p406: ref;
  var $p406.dup: i1;
  var $i407: i64;
  var $i407.dup: i1;
  var $i408: i128;
  var $i408.dup: i1;
  var $p409: ref;
  var $p409.dup: i1;
  var $p410: ref;
  var $p410.dup: i1;
  var $p411: ref;
  var $p411.dup: i1;
  var $i412: i64;
  var $i412.dup: i1;
  var $p413: ref;
  var $p413.dup: i1;
  var $i414: i64;
  var $i414.dup: i1;
  var $i415: i128;
  var $i415.dup: i1;
  var $p416: ref;
  var $p416.dup: i1;
  var $p417: ref;
  var $p417.dup: i1;
  var $i418: i64;
  var $i418.dup: i1;
  var $p419: ref;
  var $p419.dup: i1;
  var $i420: i64;
  var $i420.dup: i1;
  var $p421: ref;
  var $p421.dup: i1;
  var $p422: ref;
  var $p422.dup: i1;
  var $i423: i64;
  var $i423.dup: i1;
  var $p424: ref;
  var $p424.dup: i1;
  var $i425: i64;
  var $i425.dup: i1;
  var $p426: ref;
  var $p426.dup: i1;
  var $p427: ref;
  var $p427.dup: i1;
  var $p428: ref;
  var $p428.dup: i1;
  var $i429: i64;
  var $i429.dup: i1;
  var $p430: ref;
  var $p430.dup: i1;
  var $i431: i64;
  var $i431.dup: i1;
  var $i432: i128;
  var $i432.dup: i1;
  var $p433: ref;
  var $p433.dup: i1;
  var $p434: ref;
  var $p434.dup: i1;
  var $p435: ref;
  var $p435.dup: i1;
  var $i436: i64;
  var $i436.dup: i1;
  var $p437: ref;
  var $p437.dup: i1;
  var $i438: i64;
  var $i438.dup: i1;
  var $i439: i128;
  var $i439.dup: i1;
  var $p440: ref;
  var $p440.dup: i1;
  var $p441: ref;
  var $p441.dup: i1;
  var $i442: i64;
  var $i442.dup: i1;
  var $p443: ref;
  var $p443.dup: i1;
  var $i444: i64;
  var $i444.dup: i1;
  var $p445: ref;
  var $p445.dup: i1;
  var $p446: ref;
  var $p446.dup: i1;
  var $i447: i64;
  var $i447.dup: i1;
  var $p448: ref;
  var $p448.dup: i1;
  var $i449: i64;
  var $i449.dup: i1;
  var $p450: ref;
  var $p450.dup: i1;
  var $p451: ref;
  var $p451.dup: i1;
  var $p452: ref;
  var $p452.dup: i1;
  var $i453: i64;
  var $i453.dup: i1;
  var $p454: ref;
  var $p454.dup: i1;
  var $i455: i64;
  var $i455.dup: i1;
  var $i456: i128;
  var $i456.dup: i1;
  var $p457: ref;
  var $p457.dup: i1;
  var $p458: ref;
  var $p458.dup: i1;
  var $p459: ref;
  var $p459.dup: i1;
  var $i460: i64;
  var $i460.dup: i1;
  var $p461: ref;
  var $p461.dup: i1;
  var $i462: i64;
  var $i462.dup: i1;
  var $i463: i128;
  var $i463.dup: i1;
  var $p464: ref;
  var $p464.dup: i1;
  var $p465: ref;
  var $p465.dup: i1;
  var $i466: i64;
  var $i466.dup: i1;
  var $p467: ref;
  var $p467.dup: i1;
  var $i468: i64;
  var $i468.dup: i1;
  var $p469: ref;
  var $p469.dup: i1;
  var $p470: ref;
  var $p470.dup: i1;
  var $i471: i64;
  var $i471.dup: i1;
  var $p472: ref;
  var $p472.dup: i1;
  var $i473: i64;
  var $i473.dup: i1;
  var $p474: ref;
  var $p474.dup: i1;
  var $p475: ref;
  var $p475.dup: i1;
  var $p476: ref;
  var $p476.dup: i1;
  var $i477: i64;
  var $i477.dup: i1;
  var $p478: ref;
  var $p478.dup: i1;
  var $i479: i64;
  var $i479.dup: i1;
  var $i480: i128;
  var $i480.dup: i1;
  var $p481: ref;
  var $p481.dup: i1;
  var $p482: ref;
  var $p482.dup: i1;
  var $p483: ref;
  var $p483.dup: i1;
  var $i484: i64;
  var $i484.dup: i1;
  var $p485: ref;
  var $p485.dup: i1;
  var $i486: i64;
  var $i486.dup: i1;
  var $i487: i128;
  var $i487.dup: i1;
  var $p488: ref;
  var $p488.dup: i1;
  var $p489: ref;
  var $p489.dup: i1;
  var $i490: i64;
  var $i490.dup: i1;
  var $p491: ref;
  var $p491.dup: i1;
  var $i492: i64;
  var $i492.dup: i1;
  var $p493: ref;
  var $p493.dup: i1;
  var $p494: ref;
  var $p494.dup: i1;
  var $i495: i64;
  var $i495.dup: i1;
  var $p496: ref;
  var $p496.dup: i1;
  var $i497: i64;
  var $i497.dup: i1;
  var $p498: ref;
  var $p498.dup: i1;
  var $p499: ref;
  var $p499.dup: i1;
  var $p500: ref;
  var $p500.dup: i1;
  var $i501: i64;
  var $i501.dup: i1;
  var $p502: ref;
  var $p502.dup: i1;
  var $i503: i64;
  var $i503.dup: i1;
  var $i504: i128;
  var $i504.dup: i1;
  var $p505: ref;
  var $p505.dup: i1;
  var $p506: ref;
  var $p506.dup: i1;
  var $p507: ref;
  var $p507.dup: i1;
  var $i508: i64;
  var $i508.dup: i1;
  var $p509: ref;
  var $p509.dup: i1;
  var $i510: i64;
  var $i510.dup: i1;
  var $i511: i128;
  var $i511.dup: i1;
  var $p512: ref;
  var $p512.dup: i1;
  var $p513: ref;
  var $p513.dup: i1;
  var $i514: i64;
  var $i514.dup: i1;
  var $p515: ref;
  var $p515.dup: i1;
  var $i516: i64;
  var $i516.dup: i1;
  var $p517: ref;
  var $p517.dup: i1;
  var $p518: ref;
  var $p518.dup: i1;
  var $i519: i64;
  var $i519.dup: i1;
  var $p520: ref;
  var $p520.dup: i1;
  var $i521: i64;
  var $i521.dup: i1;
  var $p522: ref;
  var $p522.dup: i1;
  var $p523: ref;
  var $p523.dup: i1;
  var $p524: ref;
  var $p524.dup: i1;
  var $i525: i64;
  var $i525.dup: i1;
  var $p526: ref;
  var $p526.dup: i1;
  var $i527: i64;
  var $i527.dup: i1;
  var $i528: i128;
  var $i528.dup: i1;
  var $p529: ref;
  var $p529.dup: i1;
  var $p530: ref;
  var $p530.dup: i1;
  var $p531: ref;
  var $p531.dup: i1;
  var $i532: i64;
  var $i532.dup: i1;
  var $p533: ref;
  var $p533.dup: i1;
  var $i534: i64;
  var $i534.dup: i1;
  var $i535: i128;
  var $i535.dup: i1;
  var $p536: ref;
  var $p536.dup: i1;
  var $p537: ref;
  var $p537.dup: i1;
  var $i538: i64;
  var $i538.dup: i1;
  var $p539: ref;
  var $p539.dup: i1;
  var $i540: i64;
  var $i540.dup: i1;
  var $p541: ref;
  var $p541.dup: i1;
  var $p542: ref;
  var $p542.dup: i1;
  var $i543: i64;
  var $i543.dup: i1;
  var $p544: ref;
  var $p544.dup: i1;
  var $i545: i64;
  var $i545.dup: i1;
  var $p546: ref;
  var $p546.dup: i1;
  var $p547: ref;
  var $p547.dup: i1;
  var $p548: ref;
  var $p548.dup: i1;
  var $i549: i64;
  var $i549.dup: i1;
  var $p550: ref;
  var $p550.dup: i1;
  var $i551: i64;
  var $i551.dup: i1;
  var $i552: i128;
  var $i552.dup: i1;
  var $p553: ref;
  var $p553.dup: i1;
  var $p554: ref;
  var $p554.dup: i1;
  var $p555: ref;
  var $p555.dup: i1;
  var $i556: i64;
  var $i556.dup: i1;
  var $p557: ref;
  var $p557.dup: i1;
  var $i558: i64;
  var $i558.dup: i1;
  var $i559: i128;
  var $i559.dup: i1;
  var $p560: ref;
  var $p560.dup: i1;
  var $p561: ref;
  var $p561.dup: i1;
  var $i562: i64;
  var $i562.dup: i1;
  var $p563: ref;
  var $p563.dup: i1;
  var $i564: i64;
  var $i564.dup: i1;
  var $p565: ref;
  var $p565.dup: i1;
  var $p566: ref;
  var $p566.dup: i1;
  var $i567: i64;
  var $i567.dup: i1;
  var $p568: ref;
  var $p568.dup: i1;
  var $i569: i64;
  var $i569.dup: i1;
  var $p570: ref;
  var $p570.dup: i1;
  var $p571: ref;
  var $p571.dup: i1;
  var $p572: ref;
  var $p572.dup: i1;
  var $i573: i64;
  var $i573.dup: i1;
  var $p574: ref;
  var $p574.dup: i1;
  var $i575: i64;
  var $i575.dup: i1;
  var $i576: i128;
  var $i576.dup: i1;
  var $p577: ref;
  var $p577.dup: i1;
  var $p578: ref;
  var $p578.dup: i1;
  var $p579: ref;
  var $p579.dup: i1;
  var $i580: i64;
  var $i580.dup: i1;
  var $p581: ref;
  var $p581.dup: i1;
  var $i582: i64;
  var $i582.dup: i1;
  var $i583: i128;
  var $i583.dup: i1;
  var $p584: ref;
  var $p584.dup: i1;
  var $p585: ref;
  var $p585.dup: i1;
  var $i586: i64;
  var $i586.dup: i1;
  var $p587: ref;
  var $p587.dup: i1;
  var $i588: i64;
  var $i588.dup: i1;
  var $p589: ref;
  var $p589.dup: i1;
  var $p590: ref;
  var $p590.dup: i1;
  var $i591: i64;
  var $i591.dup: i1;
  var $p592: ref;
  var $p592.dup: i1;
  var $i593: i64;
  var $i593.dup: i1;
  var $p594: ref;
  var $p594.dup: i1;
  var $p595: ref;
  var $p595.dup: i1;
  var $p596: ref;
  var $p596.dup: i1;
  var $i597: i64;
  var $i597.dup: i1;
  var $p598: ref;
  var $p598.dup: i1;
  var $i599: i64;
  var $i599.dup: i1;
  var $i600: i128;
  var $i600.dup: i1;
  var $p601: ref;
  var $p601.dup: i1;
  var $p602: ref;
  var $p602.dup: i1;
  var $p603: ref;
  var $p603.dup: i1;
  var $i604: i64;
  var $i604.dup: i1;
  var $p605: ref;
  var $p605.dup: i1;
  var $i606: i64;
  var $i606.dup: i1;
  var $i607: i128;
  var $i607.dup: i1;
  var $p608: ref;
  var $p608.dup: i1;
  var $p609: ref;
  var $p609.dup: i1;
  var $i610: i64;
  var $i610.dup: i1;
  var $p611: ref;
  var $p611.dup: i1;
  var $i612: i64;
  var $i612.dup: i1;
  var $p613: ref;
  var $p613.dup: i1;
  var $p614: ref;
  var $p614.dup: i1;
  var $i615: i64;
  var $i615.dup: i1;
  var $p616: ref;
  var $p616.dup: i1;
  var $i617: i64;
  var $i617.dup: i1;
  var $p618: ref;
  var $p618.dup: i1;
  var $p619: ref;
  var $p619.dup: i1;
  var $p620: ref;
  var $p620.dup: i1;
  var $i621: i64;
  var $i621.dup: i1;
  var $p622: ref;
  var $p622.dup: i1;
  var $i623: i64;
  var $i623.dup: i1;
  var $i624: i128;
  var $i624.dup: i1;
  var $p625: ref;
  var $p625.dup: i1;
  var $p626: ref;
  var $p626.dup: i1;
  var $p627: ref;
  var $p627.dup: i1;
  var $i628: i64;
  var $i628.dup: i1;
  var $p629: ref;
  var $p629.dup: i1;
  var $i630: i64;
  var $i630.dup: i1;
  var $i631: i128;
  var $i631.dup: i1;
  var $p632: ref;
  var $p632.dup: i1;
  var $p633: ref;
  var $p633.dup: i1;
  var $i634: i64;
  var $i634.dup: i1;
  var $p635: ref;
  var $p635.dup: i1;
  var $i636: i64;
  var $i636.dup: i1;
  var $p637: ref;
  var $p637.dup: i1;
  var $p638: ref;
  var $p638.dup: i1;
  var $i639: i64;
  var $i639.dup: i1;
  var $p640: ref;
  var $p640.dup: i1;
  var $i641: i64;
  var $i641.dup: i1;
  var $p642: ref;
  var $p642.dup: i1;
  var $p643: ref;
  var $p643.dup: i1;
  var $p644: ref;
  var $p644.dup: i1;
  var $i645: i64;
  var $i645.dup: i1;
  var $p646: ref;
  var $p646.dup: i1;
  var $i647: i64;
  var $i647.dup: i1;
  var $i648: i128;
  var $i648.dup: i1;
  var $p649: ref;
  var $p649.dup: i1;
  var $p650: ref;
  var $p650.dup: i1;
  var $p651: ref;
  var $p651.dup: i1;
  var $i652: i64;
  var $i652.dup: i1;
  var $p653: ref;
  var $p653.dup: i1;
  var $i654: i64;
  var $i654.dup: i1;
  var $i655: i128;
  var $i655.dup: i1;
  var $p656: ref;
  var $p656.dup: i1;
  var $p657: ref;
  var $p657.dup: i1;
  var $i658: i64;
  var $i658.dup: i1;
  var $p659: ref;
  var $p659.dup: i1;
  var $i660: i64;
  var $i660.dup: i1;
  var $p661: ref;
  var $p661.dup: i1;
  var $p662: ref;
  var $p662.dup: i1;
  var $i663: i64;
  var $i663.dup: i1;
  var $p664: ref;
  var $p664.dup: i1;
  var $i665: i64;
  var $i665.dup: i1;
  var $p666: ref;
  var $p666.dup: i1;
  var $p667: ref;
  var $p667.dup: i1;
  var $p668: ref;
  var $p668.dup: i1;
  var $i669: i64;
  var $i669.dup: i1;
  var $p670: ref;
  var $p670.dup: i1;
  var $i671: i64;
  var $i671.dup: i1;
  var $i672: i128;
  var $i672.dup: i1;
  var $p673: ref;
  var $p673.dup: i1;
  var $p674: ref;
  var $p674.dup: i1;
  var $p675: ref;
  var $p675.dup: i1;
  var $i676: i64;
  var $i676.dup: i1;
  var $p677: ref;
  var $p677.dup: i1;
  var $i678: i64;
  var $i678.dup: i1;
  var $i679: i128;
  var $i679.dup: i1;
  var $p680: ref;
  var $p680.dup: i1;
  var $p681: ref;
  var $p681.dup: i1;
  var $i682: i64;
  var $i682.dup: i1;
  var $p683: ref;
  var $p683.dup: i1;
  var $i684: i64;
  var $i684.dup: i1;
  var $p685: ref;
  var $p685.dup: i1;
  var $p686: ref;
  var $p686.dup: i1;
  var $i687: i64;
  var $i687.dup: i1;
  var $p688: ref;
  var $p688.dup: i1;
  var $i689: i64;
  var $i689.dup: i1;
  var $p690: ref;
  var $p690.dup: i1;
  var $p691: ref;
  var $p691.dup: i1;
  var $p692: ref;
  var $p692.dup: i1;
  var $i693: i64;
  var $i693.dup: i1;
  var $p694: ref;
  var $p694.dup: i1;
  var $i695: i64;
  var $i695.dup: i1;
  var $i696: i128;
  var $i696.dup: i1;
  var $p697: ref;
  var $p697.dup: i1;
  var $p698: ref;
  var $p698.dup: i1;
  var $p699: ref;
  var $p699.dup: i1;
  var $i700: i64;
  var $i700.dup: i1;
  var $p701: ref;
  var $p701.dup: i1;
  var $i702: i64;
  var $i702.dup: i1;
  var $i703: i128;
  var $i703.dup: i1;
  var $p704: ref;
  var $p704.dup: i1;
  var $p705: ref;
  var $p705.dup: i1;
  var $i706: i64;
  var $i706.dup: i1;
  var $p707: ref;
  var $p707.dup: i1;
  var $i708: i64;
  var $i708.dup: i1;
  var $p709: ref;
  var $p709.dup: i1;
  var $p710: ref;
  var $p710.dup: i1;
  var $i711: i64;
  var $i711.dup: i1;
  var $p712: ref;
  var $p712.dup: i1;
  var $i713: i64;
  var $i713.dup: i1;
  var $p714: ref;
  var $p714.dup: i1;
  var $p715: ref;
  var $p715.dup: i1;
  var $p716: ref;
  var $p716.dup: i1;
  var $i717: i64;
  var $i717.dup: i1;
  var $p718: ref;
  var $p718.dup: i1;
  var $i719: i64;
  var $i719.dup: i1;
  var $i720: i128;
  var $i720.dup: i1;
  var $p721: ref;
  var $p721.dup: i1;
  var $p722: ref;
  var $p722.dup: i1;
  var $p723: ref;
  var $p723.dup: i1;
  var $i724: i64;
  var $i724.dup: i1;
  var $p725: ref;
  var $p725.dup: i1;
  var $i726: i64;
  var $i726.dup: i1;
  var $i727: i128;
  var $i727.dup: i1;
  var $p728: ref;
  var $p728.dup: i1;
  var $p729: ref;
  var $p729.dup: i1;
  var $i730: i64;
  var $i730.dup: i1;
  var $p731: ref;
  var $p731.dup: i1;
  var $i732: i64;
  var $i732.dup: i1;
  var $p733: ref;
  var $p733.dup: i1;
  var $p734: ref;
  var $p734.dup: i1;
  var $i735: i64;
  var $i735.dup: i1;
  var $p736: ref;
  var $p736.dup: i1;
  var $i737: i64;
  var $i737.dup: i1;
  var $p738: ref;
  var $p738.dup: i1;
  var $p739: ref;
  var $p739.dup: i1;
  var $p740: ref;
  var $p740.dup: i1;
  var $i741: i64;
  var $i741.dup: i1;
  var $p742: ref;
  var $p742.dup: i1;
  var $i743: i64;
  var $i743.dup: i1;
  var $i744: i128;
  var $i744.dup: i1;
  var $p745: ref;
  var $p745.dup: i1;
  var $p746: ref;
  var $p746.dup: i1;
  var $p747: ref;
  var $p747.dup: i1;
  var $i748: i64;
  var $i748.dup: i1;
  var $p749: ref;
  var $p749.dup: i1;
  var $i750: i64;
  var $i750.dup: i1;
  var $i751: i128;
  var $i751.dup: i1;
  var $p752: ref;
  var $p752.dup: i1;
  var $p753: ref;
  var $p753.dup: i1;
  var $i754: i64;
  var $i754.dup: i1;
  var $p755: ref;
  var $p755.dup: i1;
  var $i756: i64;
  var $i756.dup: i1;
  var $p757: ref;
  var $p757.dup: i1;
  var $p758: ref;
  var $p758.dup: i1;
  var $i759: i64;
  var $i759.dup: i1;
  var $p760: ref;
  var $p760.dup: i1;
  var $i761: i64;
  var $i761.dup: i1;
  var $p762: ref;
  var $p762.dup: i1;
  var $p763: ref;
  var $p763.dup: i1;
  var $p764: ref;
  var $p764.dup: i1;
  var $i765: i64;
  var $i765.dup: i1;
  var $p766: ref;
  var $p766.dup: i1;
  var $i767: i64;
  var $i767.dup: i1;
  var $i768: i128;
  var $i768.dup: i1;
  var $p769: ref;
  var $p769.dup: i1;
  var $p770: ref;
  var $p770.dup: i1;
  var $p771: ref;
  var $p771.dup: i1;
  var $i772: i64;
  var $i772.dup: i1;
  var $p773: ref;
  var $p773.dup: i1;
  var $i774: i64;
  var $i774.dup: i1;
  var $i775: i128;
  var $i775.dup: i1;
  var $p776: ref;
  var $p776.dup: i1;
  var $p777: ref;
  var $p777.dup: i1;
  var $i778: i64;
  var $i778.dup: i1;
  var $p779: ref;
  var $p779.dup: i1;
  var $i780: i64;
  var $i780.dup: i1;
  var $p781: ref;
  var $p781.dup: i1;
  var $p782: ref;
  var $p782.dup: i1;
  var $i783: i64;
  var $i783.dup: i1;
  var $p784: ref;
  var $p784.dup: i1;
  var $i785: i64;
  var $i785.dup: i1;
  var $p786: ref;
  var $p786.dup: i1;
  var $p787: ref;
  var $p787.dup: i1;
  var $p788: ref;
  var $p788.dup: i1;
  var $i789: i64;
  var $i789.dup: i1;
  var $p790: ref;
  var $p790.dup: i1;
  var $i791: i64;
  var $i791.dup: i1;
  var $i792: i128;
  var $i792.dup: i1;
  var $p793: ref;
  var $p793.dup: i1;
  var $p794: ref;
  var $p794.dup: i1;
  var $p795: ref;
  var $p795.dup: i1;
  var $i796: i64;
  var $i796.dup: i1;
  var $p797: ref;
  var $p797.dup: i1;
  var $i798: i64;
  var $i798.dup: i1;
  var $i799: i128;
  var $i799.dup: i1;
  var $p800: ref;
  var $p800.dup: i1;
  var $p801: ref;
  var $p801.dup: i1;
  var $i802: i64;
  var $i802.dup: i1;
  var $p803: ref;
  var $p803.dup: i1;
  var $i804: i64;
  var $i804.dup: i1;
  var $p805: ref;
  var $p805.dup: i1;
  var $p806: ref;
  var $p806.dup: i1;
  var $i807: i64;
  var $i807.dup: i1;
  var $p808: ref;
  var $p808.dup: i1;
  var $i809: i64;
  var $i809.dup: i1;
  var $p810: ref;
  var $p810.dup: i1;
  var $p811: ref;
  var $p811.dup: i1;
  var $p812: ref;
  var $p812.dup: i1;
  var $i813: i64;
  var $i813.dup: i1;
  var $p814: ref;
  var $p814.dup: i1;
  var $i815: i64;
  var $i815.dup: i1;
  var $i816: i128;
  var $i816.dup: i1;
  var $p817: ref;
  var $p817.dup: i1;
  var $p818: ref;
  var $p818.dup: i1;
  var $p819: ref;
  var $p819.dup: i1;
  var $i820: i64;
  var $i820.dup: i1;
  var $p821: ref;
  var $p821.dup: i1;
  var $i822: i64;
  var $i822.dup: i1;
  var $i823: i128;
  var $i823.dup: i1;
  var $p824: ref;
  var $p824.dup: i1;
  var $p825: ref;
  var $p825.dup: i1;
  var $p826: ref;
  var $p826.dup: i1;
  var $i827: i64;
  var $i827.dup: i1;
  var $p828: ref;
  var $p828.dup: i1;
  var $i829: i64;
  var $i829.dup: i1;
  var $i830: i128;
  var $i830.dup: i1;
  var $p831: ref;
  var $p831.dup: i1;
  var $p832: ref;
  var $p832.dup: i1;
  var $p833: ref;
  var $p833.dup: i1;
  var $i834: i64;
  var $i834.dup: i1;
  var $p835: ref;
  var $p835.dup: i1;
  var $i836: i64;
  var $i836.dup: i1;
  var $i837: i128;
  var $i837.dup: i1;
  var $p838: ref;
  var $p838.dup: i1;
  var $p839: ref;
  var $p839.dup: i1;
  var $p840: ref;
  var $p840.dup: i1;
  var $i841: i64;
  var $i841.dup: i1;
  var $p842: ref;
  var $p842.dup: i1;
  var $i843: i64;
  var $i843.dup: i1;
  var $i844: i128;
  var $i844.dup: i1;
  var $p845: ref;
  var $p845.dup: i1;
  var $p846: ref;
  var $p846.dup: i1;
  var $p847: ref;
  var $p847.dup: i1;
  var $i848: i64;
  var $i848.dup: i1;
  var $p849: ref;
  var $p849.dup: i1;
  var $i850: i64;
  var $i850.dup: i1;
  var $i851: i128;
  var $i851.dup: i1;
  var $p852: ref;
  var $p852.dup: i1;
  var $p853: ref;
  var $p853.dup: i1;
  var $p854: ref;
  var $p854.dup: i1;
  var $i855: i64;
  var $i855.dup: i1;
  var $p856: ref;
  var $p856.dup: i1;
  var $i857: i64;
  var $i857.dup: i1;
  var $i858: i128;
  var $i858.dup: i1;
  var $p859: ref;
  var $p859.dup: i1;
  var $p860: ref;
  var $p860.dup: i1;
  var $i861: i64;
  var $i861.dup: i1;
  var $p862: ref;
  var $p862.dup: i1;
  var $i863: i64;
  var $i863.dup: i1;
  var $p864: ref;
  var $p864.dup: i1;
  var $p865: ref;
  var $p865.dup: i1;
  var $i866: i64;
  var $i866.dup: i1;
  var $p867: ref;
  var $p867.dup: i1;
  var $i868: i64;
  var $i868.dup: i1;
  var $p869: ref;
  var $p869.dup: i1;
  var $p870: ref;
  var $p870.dup: i1;
  var $p871: ref;
  var $p871.dup: i1;
  var $i872: i64;
  var $i872.dup: i1;
  var $p873: ref;
  var $p873.dup: i1;
  var $i874: i64;
  var $i874.dup: i1;
  var $i875: i128;
  var $i875.dup: i1;
  var $p876: ref;
  var $p876.dup: i1;
  var $p877: ref;
  var $p877.dup: i1;
  var $p878: ref;
  var $p878.dup: i1;
  var $i879: i64;
  var $i879.dup: i1;
  var $p880: ref;
  var $p880.dup: i1;
  var $i881: i64;
  var $i881.dup: i1;
  var $i882: i128;
  var $i882.dup: i1;
  var $p883: ref;
  var $p883.dup: i1;
  var $p884: ref;
  var $p884.dup: i1;
  var $i885: i64;
  var $i885.dup: i1;
  var $p886: ref;
  var $p886.dup: i1;
  var $i887: i64;
  var $i887.dup: i1;
  var $p888: ref;
  var $p888.dup: i1;
  var $p889: ref;
  var $p889.dup: i1;
  var $i890: i64;
  var $i890.dup: i1;
  var $p891: ref;
  var $p891.dup: i1;
  var $i892: i64;
  var $i892.dup: i1;
  var $p893: ref;
  var $p893.dup: i1;
  var $p894: ref;
  var $p894.dup: i1;
  var $p895: ref;
  var $p895.dup: i1;
  var $i896: i64;
  var $i896.dup: i1;
  var $p897: ref;
  var $p897.dup: i1;
  var $i898: i64;
  var $i898.dup: i1;
  var $i899: i128;
  var $i899.dup: i1;
  var $p900: ref;
  var $p900.dup: i1;
  var $p901: ref;
  var $p901.dup: i1;
  var $p902: ref;
  var $p902.dup: i1;
  var $i903: i64;
  var $i903.dup: i1;
  var $p904: ref;
  var $p904.dup: i1;
  var $i905: i64;
  var $i905.dup: i1;
  var $i906: i128;
  var $i906.dup: i1;
  var $p907: ref;
  var $p907.dup: i1;
  var $p908: ref;
  var $p908.dup: i1;
  var $i909: i64;
  var $i909.dup: i1;
  var $p910: ref;
  var $p910.dup: i1;
  var $i911: i64;
  var $i911.dup: i1;
  var $p912: ref;
  var $p912.dup: i1;
  var $p913: ref;
  var $p913.dup: i1;
  var $i914: i64;
  var $i914.dup: i1;
  var $p915: ref;
  var $p915.dup: i1;
  var $i916: i64;
  var $i916.dup: i1;
  var $p917: ref;
  var $p917.dup: i1;
  var $p918: ref;
  var $p918.dup: i1;
  var $p919: ref;
  var $p919.dup: i1;
  var $i920: i64;
  var $i920.dup: i1;
  var $p921: ref;
  var $p921.dup: i1;
  var $i922: i64;
  var $i922.dup: i1;
  var $i923: i128;
  var $i923.dup: i1;
  var $p924: ref;
  var $p924.dup: i1;
  var $p925: ref;
  var $p925.dup: i1;
  var $p926: ref;
  var $p926.dup: i1;
  var $i927: i64;
  var $i927.dup: i1;
  var $p928: ref;
  var $p928.dup: i1;
  var $i929: i64;
  var $i929.dup: i1;
  var $i930: i128;
  var $i930.dup: i1;
  var $p931: ref;
  var $p931.dup: i1;
  var $p932: ref;
  var $p932.dup: i1;
  var $i933: i64;
  var $i933.dup: i1;
  var $p934: ref;
  var $p934.dup: i1;
  var $i935: i64;
  var $i935.dup: i1;
  var $p936: ref;
  var $p936.dup: i1;
  var $p937: ref;
  var $p937.dup: i1;
  var $i938: i64;
  var $i938.dup: i1;
  var $p939: ref;
  var $p939.dup: i1;
  var $i940: i64;
  var $i940.dup: i1;
  var $p941: ref;
  var $p941.dup: i1;
  var $p942: ref;
  var $p942.dup: i1;
  var $p943: ref;
  var $p943.dup: i1;
  var $i944: i64;
  var $i944.dup: i1;
  var $p945: ref;
  var $p945.dup: i1;
  var $i946: i64;
  var $i946.dup: i1;
  var $i947: i128;
  var $i947.dup: i1;
  var $p948: ref;
  var $p948.dup: i1;
  var $p949: ref;
  var $p949.dup: i1;
  var $p950: ref;
  var $p950.dup: i1;
  var $i951: i64;
  var $i951.dup: i1;
  var $p952: ref;
  var $p952.dup: i1;
  var $i953: i64;
  var $i953.dup: i1;
  var $i954: i128;
  var $i954.dup: i1;
  var $p955: ref;
  var $p955.dup: i1;
  var $p956: ref;
  var $p956.dup: i1;
  var $i957: i64;
  var $i957.dup: i1;
  var $p958: ref;
  var $p958.dup: i1;
  var $i959: i64;
  var $i959.dup: i1;
  var $p960: ref;
  var $p960.dup: i1;
  var $p961: ref;
  var $p961.dup: i1;
  var $i962: i64;
  var $i962.dup: i1;
  var $p963: ref;
  var $p963.dup: i1;
  var $i964: i64;
  var $i964.dup: i1;
  var $p965: ref;
  var $p965.dup: i1;
  var $p966: ref;
  var $p966.dup: i1;
  var $p967: ref;
  var $p967.dup: i1;
  var $i968: i64;
  var $i968.dup: i1;
  var $p969: ref;
  var $p969.dup: i1;
  var $i970: i64;
  var $i970.dup: i1;
  var $i971: i128;
  var $i971.dup: i1;
  var $p972: ref;
  var $p972.dup: i1;
  var $p973: ref;
  var $p973.dup: i1;
  var $p974: ref;
  var $p974.dup: i1;
  var $i975: i64;
  var $i975.dup: i1;
  var $p976: ref;
  var $p976.dup: i1;
  var $i977: i64;
  var $i977.dup: i1;
  var $i978: i128;
  var $i978.dup: i1;
  var $p979: ref;
  var $p979.dup: i1;
  var $p980: ref;
  var $p980.dup: i1;
  var $i981: i64;
  var $i981.dup: i1;
  var $p982: ref;
  var $p982.dup: i1;
  var $i983: i64;
  var $i983.dup: i1;
  var $p984: ref;
  var $p984.dup: i1;
  var $p985: ref;
  var $p985.dup: i1;
  var $i986: i64;
  var $i986.dup: i1;
  var $p987: ref;
  var $p987.dup: i1;
  var $i988: i64;
  var $i988.dup: i1;
  var $p989: ref;
  var $p989.dup: i1;
  var $p990: ref;
  var $p990.dup: i1;
  var $p991: ref;
  var $p991.dup: i1;
  var $i992: i64;
  var $i992.dup: i1;
  var $p993: ref;
  var $p993.dup: i1;
  var $i994: i64;
  var $i994.dup: i1;
  var $i995: i128;
  var $i995.dup: i1;
  var $p996: ref;
  var $p996.dup: i1;
  var $p997: ref;
  var $p997.dup: i1;
  var $p998: ref;
  var $p998.dup: i1;
  var $i999: i64;
  var $i999.dup: i1;
  var $p1000: ref;
  var $p1000.dup: i1;
  var $i1001: i64;
  var $i1001.dup: i1;
  var $i1002: i128;
  var $i1002.dup: i1;
  var $p1003: ref;
  var $p1003.dup: i1;
  var $p1004: ref;
  var $p1004.dup: i1;
  var $i1005: i64;
  var $i1005.dup: i1;
  var $p1006: ref;
  var $p1006.dup: i1;
  var $i1007: i64;
  var $i1007.dup: i1;
  var $p1008: ref;
  var $p1008.dup: i1;
  var $p1009: ref;
  var $p1009.dup: i1;
  var $i1010: i64;
  var $i1010.dup: i1;
  var $p1011: ref;
  var $p1011.dup: i1;
  var $i1012: i64;
  var $i1012.dup: i1;
  var $p1013: ref;
  var $p1013.dup: i1;
  var $p1014: ref;
  var $p1014.dup: i1;
  var $p1015: ref;
  var $p1015.dup: i1;
  var $i1016: i64;
  var $i1016.dup: i1;
  var $p1017: ref;
  var $p1017.dup: i1;
  var $i1018: i64;
  var $i1018.dup: i1;
  var $i1019: i128;
  var $i1019.dup: i1;
  var $p1020: ref;
  var $p1020.dup: i1;
  var $p1021: ref;
  var $p1021.dup: i1;
  var $p1022: ref;
  var $p1022.dup: i1;
  var $i1023: i64;
  var $i1023.dup: i1;
  var $p1024: ref;
  var $p1024.dup: i1;
  var $i1025: i64;
  var $i1025.dup: i1;
  var $i1026: i128;
  var $i1026.dup: i1;
  var $p1027: ref;
  var $p1027.dup: i1;
  var $p1028: ref;
  var $p1028.dup: i1;
  var $i1029: i64;
  var $i1029.dup: i1;
  var $p1030: ref;
  var $p1030.dup: i1;
  var $i1031: i64;
  var $i1031.dup: i1;
  var $p1032: ref;
  var $p1032.dup: i1;
  var $p1033: ref;
  var $p1033.dup: i1;
  var $i1034: i64;
  var $i1034.dup: i1;
  var $p1035: ref;
  var $p1035.dup: i1;
  var $i1036: i64;
  var $i1036.dup: i1;
  var $p1037: ref;
  var $p1037.dup: i1;
  var $p1038: ref;
  var $p1038.dup: i1;
  var $p1039: ref;
  var $p1039.dup: i1;
  var $i1040: i64;
  var $i1040.dup: i1;
  var $p1041: ref;
  var $p1041.dup: i1;
  var $i1042: i64;
  var $i1042.dup: i1;
  var $i1043: i128;
  var $i1043.dup: i1;
  var $p1044: ref;
  var $p1044.dup: i1;
  var $p1045: ref;
  var $p1045.dup: i1;
  var $p1046: ref;
  var $p1046.dup: i1;
  var $i1047: i64;
  var $i1047.dup: i1;
  var $p1048: ref;
  var $p1048.dup: i1;
  var $i1049: i64;
  var $i1049.dup: i1;
  var $i1050: i128;
  var $i1050.dup: i1;
  var $p1051: ref;
  var $p1051.dup: i1;
  var $p1052: ref;
  var $p1052.dup: i1;
  var $i1053: i64;
  var $i1053.dup: i1;
  var $p1054: ref;
  var $p1054.dup: i1;
  var $i1055: i64;
  var $i1055.dup: i1;
  var $p1056: ref;
  var $p1056.dup: i1;
  var $p1057: ref;
  var $p1057.dup: i1;
  var $i1058: i64;
  var $i1058.dup: i1;
  var $p1059: ref;
  var $p1059.dup: i1;
  var $i1060: i64;
  var $i1060.dup: i1;
  var $p1061: ref;
  var $p1061.dup: i1;
  var $p1062: ref;
  var $p1062.dup: i1;
  var $p1063: ref;
  var $p1063.dup: i1;
  var $i1064: i64;
  var $i1064.dup: i1;
  var $p1065: ref;
  var $p1065.dup: i1;
  var $i1066: i64;
  var $i1066.dup: i1;
  var $i1067: i128;
  var $i1067.dup: i1;
  var $p1068: ref;
  var $p1068.dup: i1;
  var $p1069: ref;
  var $p1069.dup: i1;
  var $p1070: ref;
  var $p1070.dup: i1;
  var $i1071: i64;
  var $i1071.dup: i1;
  var $p1072: ref;
  var $p1072.dup: i1;
  var $i1073: i64;
  var $i1073.dup: i1;
  var $i1074: i128;
  var $i1074.dup: i1;
  var $p1075: ref;
  var $p1075.dup: i1;
  var $p1076: ref;
  var $p1076.dup: i1;
  var $i1077: i64;
  var $i1077.dup: i1;
  var $p1078: ref;
  var $p1078.dup: i1;
  var $i1079: i64;
  var $i1079.dup: i1;
  var $p1080: ref;
  var $p1080.dup: i1;
  var $p1081: ref;
  var $p1081.dup: i1;
  var $i1082: i64;
  var $i1082.dup: i1;
  var $p1083: ref;
  var $p1083.dup: i1;
  var $i1084: i64;
  var $i1084.dup: i1;
  var $p1085: ref;
  var $p1085.dup: i1;
  var $p1086: ref;
  var $p1086.dup: i1;
  var $p1087: ref;
  var $p1087.dup: i1;
  var $i1088: i64;
  var $i1088.dup: i1;
  var $p1089: ref;
  var $p1089.dup: i1;
  var $i1090: i64;
  var $i1090.dup: i1;
  var $i1091: i128;
  var $i1091.dup: i1;
  var $p1092: ref;
  var $p1092.dup: i1;
  var $p1093: ref;
  var $p1093.dup: i1;
  var $p1094: ref;
  var $p1094.dup: i1;
  var $i1095: i64;
  var $i1095.dup: i1;
  var $p1096: ref;
  var $p1096.dup: i1;
  var $i1097: i64;
  var $i1097.dup: i1;
  var $i1098: i128;
  var $i1098.dup: i1;
  var $p1099: ref;
  var $p1099.dup: i1;
  var $p1100: ref;
  var $p1100.dup: i1;
  var $i1101: i64;
  var $i1101.dup: i1;
  var $p1102: ref;
  var $p1102.dup: i1;
  var $i1103: i64;
  var $i1103.dup: i1;
  var $p1104: ref;
  var $p1104.dup: i1;
  var $p1105: ref;
  var $p1105.dup: i1;
  var $i1106: i64;
  var $i1106.dup: i1;
  var $p1107: ref;
  var $p1107.dup: i1;
  var $i1108: i64;
  var $i1108.dup: i1;
  var $p1109: ref;
  var $p1109.dup: i1;
  var $p1110: ref;
  var $p1110.dup: i1;
  var $p1111: ref;
  var $p1111.dup: i1;
  var $i1112: i64;
  var $i1112.dup: i1;
  var $p1113: ref;
  var $p1113.dup: i1;
  var $i1114: i64;
  var $i1114.dup: i1;
  var $i1115: i128;
  var $i1115.dup: i1;
  var $p1116: ref;
  var $p1116.dup: i1;
  var $p1117: ref;
  var $p1117.dup: i1;
  var $p1118: ref;
  var $p1118.dup: i1;
  var $i1119: i64;
  var $i1119.dup: i1;
  var $p1120: ref;
  var $p1120.dup: i1;
  var $i1121: i64;
  var $i1121.dup: i1;
  var $i1122: i128;
  var $i1122.dup: i1;
  var $p1123: ref;
  var $p1123.dup: i1;
  var $p1124: ref;
  var $p1124.dup: i1;
  var $i1125: i64;
  var $i1125.dup: i1;
  var $p1126: ref;
  var $p1126.dup: i1;
  var $i1127: i64;
  var $i1127.dup: i1;
  var $p1128: ref;
  var $p1128.dup: i1;
  var $p1129: ref;
  var $p1129.dup: i1;
  var $i1130: i64;
  var $i1130.dup: i1;
  var $p1131: ref;
  var $p1131.dup: i1;
  var $i1132: i64;
  var $i1132.dup: i1;
  var $p1133: ref;
  var $p1133.dup: i1;
  var $p1134: ref;
  var $p1134.dup: i1;
  var $p1135: ref;
  var $p1135.dup: i1;
  var $i1136: i64;
  var $i1136.dup: i1;
  var $p1137: ref;
  var $p1137.dup: i1;
  var $i1138: i64;
  var $i1138.dup: i1;
  var $i1139: i128;
  var $i1139.dup: i1;
  var $p1140: ref;
  var $p1140.dup: i1;
  var $p1141: ref;
  var $p1141.dup: i1;
  var $p1142: ref;
  var $p1142.dup: i1;
  var $i1143: i64;
  var $i1143.dup: i1;
  var $p1144: ref;
  var $p1144.dup: i1;
  var $i1145: i64;
  var $i1145.dup: i1;
  var $i1146: i128;
  var $i1146.dup: i1;
  var $p1147: ref;
  var $p1147.dup: i1;
  var $p1148: ref;
  var $p1148.dup: i1;
  var $i1149: i64;
  var $i1149.dup: i1;
  var $p1150: ref;
  var $p1150.dup: i1;
  var $i1151: i64;
  var $i1151.dup: i1;
  var $p1152: ref;
  var $p1152.dup: i1;
  var $p1153: ref;
  var $p1153.dup: i1;
  var $i1154: i64;
  var $i1154.dup: i1;
  var $p1155: ref;
  var $p1155.dup: i1;
  var $i1156: i64;
  var $i1156.dup: i1;
  var $p1157: ref;
  var $p1157.dup: i1;
  var $p1158: ref;
  var $p1158.dup: i1;
  var $p1159: ref;
  var $p1159.dup: i1;
  var $i1160: i64;
  var $i1160.dup: i1;
  var $p1161: ref;
  var $p1161.dup: i1;
  var $i1162: i64;
  var $i1162.dup: i1;
  var $i1163: i128;
  var $i1163.dup: i1;
  var $p1164: ref;
  var $p1164.dup: i1;
  var $p1165: ref;
  var $p1165.dup: i1;
  var $p1166: ref;
  var $p1166.dup: i1;
  var $i1167: i64;
  var $i1167.dup: i1;
  var $p1168: ref;
  var $p1168.dup: i1;
  var $i1169: i64;
  var $i1169.dup: i1;
  var $i1170: i128;
  var $i1170.dup: i1;
  var $p1171: ref;
  var $p1171.dup: i1;
  var $p1172: ref;
  var $p1172.dup: i1;
  var $i1173: i64;
  var $i1173.dup: i1;
  var $p1174: ref;
  var $p1174.dup: i1;
  var $i1175: i64;
  var $i1175.dup: i1;
  var $p1176: ref;
  var $p1176.dup: i1;
  var $p1177: ref;
  var $p1177.dup: i1;
  var $i1178: i64;
  var $i1178.dup: i1;
  var $p1179: ref;
  var $p1179.dup: i1;
  var $i1180: i64;
  var $i1180.dup: i1;
  var $p1181: ref;
  var $p1181.dup: i1;
  var $p1182: ref;
  var $p1182.dup: i1;
  var $p1183: ref;
  var $p1183.dup: i1;
  var $i1184: i64;
  var $i1184.dup: i1;
  var $p1185: ref;
  var $p1185.dup: i1;
  var $i1186: i64;
  var $i1186.dup: i1;
  var $i1187: i128;
  var $i1187.dup: i1;
  var $p1188: ref;
  var $p1188.dup: i1;
  var $p1189: ref;
  var $p1189.dup: i1;
  var $p1190: ref;
  var $p1190.dup: i1;
  var $i1191: i64;
  var $i1191.dup: i1;
  var $p1192: ref;
  var $p1192.dup: i1;
  var $i1193: i64;
  var $i1193.dup: i1;
  var $i1194: i128;
  var $i1194.dup: i1;
  var $p1195: ref;
  var $p1195.dup: i1;
  var $p1196: ref;
  var $p1196.dup: i1;
  var $i1197: i64;
  var $i1197.dup: i1;
  var $p1198: ref;
  var $p1198.dup: i1;
  var $i1199: i64;
  var $i1199.dup: i1;
  var $p1200: ref;
  var $p1200.dup: i1;
  var $p1201: ref;
  var $p1201.dup: i1;
  var $i1202: i64;
  var $i1202.dup: i1;
  var $p1203: ref;
  var $p1203.dup: i1;
  var $i1204: i64;
  var $i1204.dup: i1;
  var $p1205: ref;
  var $p1205.dup: i1;
  var $p1206: ref;
  var $p1206.dup: i1;
  var $p1207: ref;
  var $p1207.dup: i1;
  var $i1208: i64;
  var $i1208.dup: i1;
  var $p1209: ref;
  var $p1209.dup: i1;
  var $i1210: i64;
  var $i1210.dup: i1;
  var $i1211: i128;
  var $i1211.dup: i1;
  var $p1212: ref;
  var $p1212.dup: i1;
  var $p1213: ref;
  var $p1213.dup: i1;
  var $p1214: ref;
  var $p1214.dup: i1;
  var $i1215: i64;
  var $i1215.dup: i1;
  var $p1216: ref;
  var $p1216.dup: i1;
  var $i1217: i64;
  var $i1217.dup: i1;
  var $i1218: i128;
  var $i1218.dup: i1;
  var $p1219: ref;
  var $p1219.dup: i1;
  var $p1220: ref;
  var $p1220.dup: i1;
  var $i1221: i64;
  var $i1221.dup: i1;
  var $p1222: ref;
  var $p1222.dup: i1;
  var $i1223: i64;
  var $i1223.dup: i1;
  var $p1224: ref;
  var $p1224.dup: i1;
  var $p1225: ref;
  var $p1225.dup: i1;
  var $i1226: i64;
  var $i1226.dup: i1;
  var $p1227: ref;
  var $p1227.dup: i1;
  var $i1228: i64;
  var $i1228.dup: i1;
  var $p1229: ref;
  var $p1229.dup: i1;
  var $p1230: ref;
  var $p1230.dup: i1;
  var $p1231: ref;
  var $p1231.dup: i1;
  var $i1232: i64;
  var $i1232.dup: i1;
  var $p1233: ref;
  var $p1233.dup: i1;
  var $i1234: i64;
  var $i1234.dup: i1;
  var $i1235: i128;
  var $i1235.dup: i1;
  var $p1236: ref;
  var $p1236.dup: i1;
  var $p1237: ref;
  var $p1237.dup: i1;
  var $p1238: ref;
  var $p1238.dup: i1;
  var $i1239: i64;
  var $i1239.dup: i1;
  var $p1240: ref;
  var $p1240.dup: i1;
  var $i1241: i64;
  var $i1241.dup: i1;
  var $i1242: i128;
  var $i1242.dup: i1;
  var $p1243: ref;
  var $p1243.dup: i1;
  var $p1244: ref;
  var $p1244.dup: i1;
  var $i1245: i64;
  var $i1245.dup: i1;
  var $p1246: ref;
  var $p1246.dup: i1;
  var $i1247: i64;
  var $i1247.dup: i1;
  var $p1248: ref;
  var $p1248.dup: i1;
  var $p1249: ref;
  var $p1249.dup: i1;
  var $i1250: i64;
  var $i1250.dup: i1;
  var $p1251: ref;
  var $p1251.dup: i1;
  var $i1252: i64;
  var $i1252.dup: i1;
  var $p1253: ref;
  var $p1253.dup: i1;
  var $p1254: ref;
  var $p1254.dup: i1;
  var $p1255: ref;
  var $p1255.dup: i1;
  var $i1256: i64;
  var $i1256.dup: i1;
  var $p1257: ref;
  var $p1257.dup: i1;
  var $i1258: i64;
  var $i1258.dup: i1;
  var $i1259: i128;
  var $i1259.dup: i1;
  var $p1260: ref;
  var $p1260.dup: i1;
  var $p1261: ref;
  var $p1261.dup: i1;
  var $p1262: ref;
  var $p1262.dup: i1;
  var $i1263: i64;
  var $i1263.dup: i1;
  var $p1264: ref;
  var $p1264.dup: i1;
  var $i1265: i64;
  var $i1265.dup: i1;
  var $i1266: i128;
  var $i1266.dup: i1;
  var $p1267: ref;
  var $p1267.dup: i1;
  var $p1268: ref;
  var $p1268.dup: i1;
  var $i1269: i64;
  var $i1269.dup: i1;
  var $p1270: ref;
  var $p1270.dup: i1;
  var $i1271: i64;
  var $i1271.dup: i1;
  var $p1272: ref;
  var $p1272.dup: i1;
  var $p1273: ref;
  var $p1273.dup: i1;
  var $i1274: i64;
  var $i1274.dup: i1;
  var $p1275: ref;
  var $p1275.dup: i1;
  var $i1276: i64;
  var $i1276.dup: i1;
  var $p1277: ref;
  var $p1277.dup: i1;
  var $p1278: ref;
  var $p1278.dup: i1;
  var $p1279: ref;
  var $p1279.dup: i1;
  var $i1280: i64;
  var $i1280.dup: i1;
  var $p1281: ref;
  var $p1281.dup: i1;
  var $i1282: i64;
  var $i1282.dup: i1;
  var $i1283: i128;
  var $i1283.dup: i1;
  var $p1284: ref;
  var $p1284.dup: i1;
  var $p1285: ref;
  var $p1285.dup: i1;
  var $p1286: ref;
  var $p1286.dup: i1;
  var $i1287: i64;
  var $i1287.dup: i1;
  var $p1288: ref;
  var $p1288.dup: i1;
  var $i1289: i64;
  var $i1289.dup: i1;
  var $i1290: i128;
  var $i1290.dup: i1;
  var $p1291: ref;
  var $p1291.dup: i1;
  var $p1292: ref;
  var $p1292.dup: i1;
  var $i1293: i64;
  var $i1293.dup: i1;
  var $p1294: ref;
  var $p1294.dup: i1;
  var $i1295: i64;
  var $i1295.dup: i1;
  var $p1296: ref;
  var $p1296.dup: i1;
  var $p1297: ref;
  var $p1297.dup: i1;
  var $i1298: i64;
  var $i1298.dup: i1;
  var $p1299: ref;
  var $p1299.dup: i1;
  var $i1300: i64;
  var $i1300.dup: i1;
  var $p1301: ref;
  var $p1301.dup: i1;
  var $p1302: ref;
  var $p1302.dup: i1;
  var $p1303: ref;
  var $p1303.dup: i1;
  var $i1304: i64;
  var $i1304.dup: i1;
  var $p1305: ref;
  var $p1305.dup: i1;
  var $i1306: i64;
  var $i1306.dup: i1;
  var $i1307: i128;
  var $i1307.dup: i1;
  var $p1308: ref;
  var $p1308.dup: i1;
  var $p1309: ref;
  var $p1309.dup: i1;
  var $p1310: ref;
  var $p1310.dup: i1;
  var $i1311: i64;
  var $i1311.dup: i1;
  var $p1312: ref;
  var $p1312.dup: i1;
  var $i1313: i64;
  var $i1313.dup: i1;
  var $i1314: i128;
  var $i1314.dup: i1;
  var $p1315: ref;
  var $p1315.dup: i1;
  var $p1316: ref;
  var $p1316.dup: i1;
  var $i1317: i64;
  var $i1317.dup: i1;
  var $p1318: ref;
  var $p1318.dup: i1;
  var $i1319: i64;
  var $i1319.dup: i1;
  var $p1320: ref;
  var $p1320.dup: i1;
  var $p1321: ref;
  var $p1321.dup: i1;
  var $i1322: i64;
  var $i1322.dup: i1;
  var $p1323: ref;
  var $p1323.dup: i1;
  var $i1324: i64;
  var $i1324.dup: i1;
  var $p1325: ref;
  var $p1325.dup: i1;
  var $p1326: ref;
  var $p1326.dup: i1;
  var $p1327: ref;
  var $p1327.dup: i1;
  var $i1328: i64;
  var $i1328.dup: i1;
  var $p1329: ref;
  var $p1329.dup: i1;
  var $i1330: i64;
  var $i1330.dup: i1;
  var $i1331: i128;
  var $i1331.dup: i1;
  var $p1332: ref;
  var $p1332.dup: i1;
  var $p1333: ref;
  var $p1333.dup: i1;
  var $p1334: ref;
  var $p1334.dup: i1;
  var $i1335: i64;
  var $i1335.dup: i1;
  var $p1336: ref;
  var $p1336.dup: i1;
  var $i1337: i64;
  var $i1337.dup: i1;
  var $i1338: i128;
  var $i1338.dup: i1;
  var $p1339: ref;
  var $p1339.dup: i1;
  var $p1340: ref;
  var $p1340.dup: i1;
  var $i1341: i64;
  var $i1341.dup: i1;
  var $p1342: ref;
  var $p1342.dup: i1;
  var $i1343: i64;
  var $i1343.dup: i1;
  var $p1344: ref;
  var $p1344.dup: i1;
  var $p1345: ref;
  var $p1345.dup: i1;
  var $i1346: i64;
  var $i1346.dup: i1;
  var $p1347: ref;
  var $p1347.dup: i1;
  var $i1348: i64;
  var $i1348.dup: i1;
  var $p1349: ref;
  var $p1349.dup: i1;
  var $p1350: ref;
  var $p1350.dup: i1;
  var $p1351: ref;
  var $p1351.dup: i1;
  var $i1352: i64;
  var $i1352.dup: i1;
  var $p1353: ref;
  var $p1353.dup: i1;
  var $i1354: i64;
  var $i1354.dup: i1;
  var $i1355: i128;
  var $i1355.dup: i1;
  var $p1356: ref;
  var $p1356.dup: i1;
  var $p1357: ref;
  var $p1357.dup: i1;
  var $i1358: i64;
  var $i1358.dup: i1;
  var $p1359: ref;
  var $p1359.dup: i1;
  var $i1360: i64;
  var $i1360.dup: i1;
  var $i1361: i64;
  var $i1361.dup: i1;
  var $i1362: i64;
  var $i1362.dup: i1;
  var $p1363: ref;
  var $p1363.dup: i1;
  var $p1364: ref;
  var $p1364.dup: i1;
  var $i1365: i64;
  var $i1365.dup: i1;
  var $p1366: ref;
  var $p1366.dup: i1;
  var $i1367: i64;
  var $i1367.dup: i1;
  var $p1368: ref;
  var $p1368.dup: i1;
  var $p1369: ref;
  var $p1369.dup: i1;
  var $p1370: ref;
  var $p1370.dup: i1;
  var $i1371: i64;
  var $i1371.dup: i1;
  var $p1372: ref;
  var $p1372.dup: i1;
  var $i1373: i64;
  var $i1373.dup: i1;
  var $i1374: i128;
  var $i1374.dup: i1;
  var $p1375: ref;
  var $p1375.dup: i1;
  var $p1376: ref;
  var $p1376.dup: i1;
  var $i1377: i64;
  var $i1377.dup: i1;
  var $p1378: ref;
  var $p1378.dup: i1;
  var $i1379: i64;
  var $i1379.dup: i1;
  var $i1380: i64;
  var $i1380.dup: i1;
  var $p1381: ref;
  var $p1381.dup: i1;
  var $p1382: ref;
  var $p1382.dup: i1;
  var $p1383: ref;
  var $p1383.dup: i1;
  var $i1384: i64;
  var $i1384.dup: i1;
  var $p1385: ref;
  var $p1385.dup: i1;
  var $i1386: i64;
  var $i1386.dup: i1;
  var $i1387: i128;
  var $i1387.dup: i1;
  var $p1388: ref;
  var $p1388.dup: i1;
  var $p1389: ref;
  var $p1389.dup: i1;
  var $i1390: i64;
  var $i1390.dup: i1;
  var $p1391: ref;
  var $p1391.dup: i1;
  var $i1392: i64;
  var $i1392.dup: i1;
  var $p1393: ref;
  var $p1393.dup: i1;
  var $p1394: ref;
  var $p1394.dup: i1;
  var $i1395: i64;
  var $i1395.dup: i1;
  var $p1396: ref;
  var $p1396.dup: i1;
  var $i1397: i64;
  var $i1397.dup: i1;
  var $p1398: ref;
  var $p1398.dup: i1;
  var $p1399: ref;
  var $p1399.dup: i1;
  var $p1400: ref;
  var $p1400.dup: i1;
  var $i1401: i64;
  var $i1401.dup: i1;
  var $p1402: ref;
  var $p1402.dup: i1;
  var $i1403: i64;
  var $i1403.dup: i1;
  var $i1404: i128;
  var $i1404.dup: i1;
  var $p1405: ref;
  var $p1405.dup: i1;
  var $p1406: ref;
  var $p1406.dup: i1;
  var $i1407: i64;
  var $i1407.dup: i1;
  var $p1408: ref;
  var $p1408.dup: i1;
  var $i1409: i64;
  var $i1409.dup: i1;
  var $i1410: i64;
  var $i1410.dup: i1;
  var $i1411: i64;
  var $i1411.dup: i1;
  var $p1412: ref;
  var $p1412.dup: i1;
  var $p1413: ref;
  var $p1413.dup: i1;
  var $i1414: i64;
  var $i1414.dup: i1;
  var $p1415: ref;
  var $p1415.dup: i1;
  var $i1416: i64;
  var $i1416.dup: i1;
  var $p1417: ref;
  var $p1417.dup: i1;
  var $p1418: ref;
  var $p1418.dup: i1;
  var $p1419: ref;
  var $p1419.dup: i1;
  var $i1420: i64;
  var $i1420.dup: i1;
  var $p1421: ref;
  var $p1421.dup: i1;
  var $i1422: i64;
  var $i1422.dup: i1;
  var $i1423: i128;
  var $i1423.dup: i1;
  var $p1424: ref;
  var $p1424.dup: i1;
  var $p1425: ref;
  var $p1425.dup: i1;
  var $i1426: i64;
  var $i1426.dup: i1;
  var $p1427: ref;
  var $p1427.dup: i1;
  var $i1428: i64;
  var $i1428.dup: i1;
  var $i1429: i64;
  var $i1429.dup: i1;
  var $p1430: ref;
  var $p1430.dup: i1;
  var $p1431: ref;
  var $p1431.dup: i1;
  var $p1432: ref;
  var $p1432.dup: i1;
  var $i1433: i64;
  var $i1433.dup: i1;
  var $p1434: ref;
  var $p1434.dup: i1;
  var $i1435: i64;
  var $i1435.dup: i1;
  var $i1436: i128;
  var $i1436.dup: i1;
  var $p1437: ref;
  var $p1437.dup: i1;
  var $p1438: ref;
  var $p1438.dup: i1;
  var $i1439: i64;
  var $i1439.dup: i1;
  var $p1440: ref;
  var $p1440.dup: i1;
  var $i1441: i64;
  var $i1441.dup: i1;
  var $p1442: ref;
  var $p1442.dup: i1;
  var $p1443: ref;
  var $p1443.dup: i1;
  var $i1444: i64;
  var $i1444.dup: i1;
  var $p1445: ref;
  var $p1445.dup: i1;
  var $i1446: i64;
  var $i1446.dup: i1;
  var $p1447: ref;
  var $p1447.dup: i1;
  var $p1448: ref;
  var $p1448.dup: i1;
  var $p1449: ref;
  var $p1449.dup: i1;
  var $i1450: i64;
  var $i1450.dup: i1;
  var $p1451: ref;
  var $p1451.dup: i1;
  var $i1452: i64;
  var $i1452.dup: i1;
  var $i1453: i128;
  var $i1453.dup: i1;
  var $p1454: ref;
  var $p1454.dup: i1;
  var $p1455: ref;
  var $p1455.dup: i1;
  var $i1456: i64;
  var $i1456.dup: i1;
  var $p1457: ref;
  var $p1457.dup: i1;
  var $i1458: i64;
  var $i1458.dup: i1;
  var $i1459: i64;
  var $i1459.dup: i1;
  var $i1460: i64;
  var $i1460.dup: i1;
  var $p1461: ref;
  var $p1461.dup: i1;
  var $p1462: ref;
  var $p1462.dup: i1;
  var $i1463: i64;
  var $i1463.dup: i1;
  var $p1464: ref;
  var $p1464.dup: i1;
  var $i1465: i64;
  var $i1465.dup: i1;
  var $p1466: ref;
  var $p1466.dup: i1;
  var $p1467: ref;
  var $p1467.dup: i1;
  var $p1468: ref;
  var $p1468.dup: i1;
  var $i1469: i64;
  var $i1469.dup: i1;
  var $p1470: ref;
  var $p1470.dup: i1;
  var $i1471: i64;
  var $i1471.dup: i1;
  var $i1472: i128;
  var $i1472.dup: i1;
  var $p1473: ref;
  var $p1473.dup: i1;
  var $p1474: ref;
  var $p1474.dup: i1;
  var $i1475: i64;
  var $i1475.dup: i1;
  var $p1476: ref;
  var $p1476.dup: i1;
  var $i1477: i64;
  var $i1477.dup: i1;
  var $i1478: i64;
  var $i1478.dup: i1;
  var $p1479: ref;
  var $p1479.dup: i1;
  var $p1480: ref;
  var $p1480.dup: i1;
  var $p1481: ref;
  var $p1481.dup: i1;
  var $i1482: i64;
  var $i1482.dup: i1;
  var $p1483: ref;
  var $p1483.dup: i1;
  var $i1484: i64;
  var $i1484.dup: i1;
  var $i1485: i128;
  var $i1485.dup: i1;
  var $p1486: ref;
  var $p1486.dup: i1;
  var $p1487: ref;
  var $p1487.dup: i1;
  var $i1488: i64;
  var $i1488.dup: i1;
  var $p1489: ref;
  var $p1489.dup: i1;
  var $i1490: i64;
  var $i1490.dup: i1;
  var $p1491: ref;
  var $p1491.dup: i1;
  var $p1492: ref;
  var $p1492.dup: i1;
  var $i1493: i64;
  var $i1493.dup: i1;
  var $p1494: ref;
  var $p1494.dup: i1;
  var $i1495: i64;
  var $i1495.dup: i1;
  var $p1496: ref;
  var $p1496.dup: i1;
  var $p1497: ref;
  var $p1497.dup: i1;
  var $p1498: ref;
  var $p1498.dup: i1;
  var $i1499: i64;
  var $i1499.dup: i1;
  var $p1500: ref;
  var $p1500.dup: i1;
  var $i1501: i64;
  var $i1501.dup: i1;
  var $i1502: i128;
  var $i1502.dup: i1;
  var $p1503: ref;
  var $p1503.dup: i1;
  var $p1504: ref;
  var $p1504.dup: i1;
  var $i1505: i64;
  var $i1505.dup: i1;
  var $p1506: ref;
  var $p1506.dup: i1;
  var $i1507: i64;
  var $i1507.dup: i1;
  var $i1508: i64;
  var $i1508.dup: i1;
  var $i1509: i64;
  var $i1509.dup: i1;
  var $p1510: ref;
  var $p1510.dup: i1;
  var $p1511: ref;
  var $p1511.dup: i1;
  var $i1512: i64;
  var $i1512.dup: i1;
  var $p1513: ref;
  var $p1513.dup: i1;
  var $i1514: i64;
  var $i1514.dup: i1;
  var $p1515: ref;
  var $p1515.dup: i1;
  var $p1516: ref;
  var $p1516.dup: i1;
  var $p1517: ref;
  var $p1517.dup: i1;
  var $i1518: i64;
  var $i1518.dup: i1;
  var $p1519: ref;
  var $p1519.dup: i1;
  var $i1520: i64;
  var $i1520.dup: i1;
  var $i1521: i128;
  var $i1521.dup: i1;
  var $p1522: ref;
  var $p1522.dup: i1;
  var $p1523: ref;
  var $p1523.dup: i1;
  var $i1524: i64;
  var $i1524.dup: i1;
  var $p1525: ref;
  var $p1525.dup: i1;
  var $i1526: i64;
  var $i1526.dup: i1;
  var $i1527: i64;
  var $i1527.dup: i1;
  var $p1528: ref;
  var $p1528.dup: i1;
  var $p1529: ref;
  var $p1529.dup: i1;
  var $p1530: ref;
  var $p1530.dup: i1;
  var $i1531: i64;
  var $i1531.dup: i1;
  var $p1532: ref;
  var $p1532.dup: i1;
  var $i1533: i64;
  var $i1533.dup: i1;
  var $i1534: i128;
  var $i1534.dup: i1;
  var $p1535: ref;
  var $p1535.dup: i1;
  var $p1536: ref;
  var $p1536.dup: i1;
  var $i1537: i64;
  var $i1537.dup: i1;
  var $p1538: ref;
  var $p1538.dup: i1;
  var $i1539: i64;
  var $i1539.dup: i1;
  var $p1540: ref;
  var $p1540.dup: i1;
  var $p1541: ref;
  var $p1541.dup: i1;
  var $i1542: i64;
  var $i1542.dup: i1;
  var $p1543: ref;
  var $p1543.dup: i1;
  var $i1544: i64;
  var $i1544.dup: i1;
  var $p1545: ref;
  var $p1545.dup: i1;
  var $p1546: ref;
  var $p1546.dup: i1;
  var $p1547: ref;
  var $p1547.dup: i1;
  var $i1548: i64;
  var $i1548.dup: i1;
  var $p1549: ref;
  var $p1549.dup: i1;
  var $i1550: i64;
  var $i1550.dup: i1;
  var $i1551: i128;
  var $i1551.dup: i1;
  var $p1552: ref;
  var $p1552.dup: i1;
  var $p1553: ref;
  var $p1553.dup: i1;
  var $i1554: i64;
  var $i1554.dup: i1;
  var $p1555: ref;
  var $p1555.dup: i1;
  var $i1556: i64;
  var $i1556.dup: i1;
  var $i1557: i64;
  var $i1557.dup: i1;
  var $i1558: i64;
  var $i1558.dup: i1;
  var $p1559: ref;
  var $p1559.dup: i1;
  var $p1560: ref;
  var $p1560.dup: i1;
  var $i1561: i64;
  var $i1561.dup: i1;
  var $p1562: ref;
  var $p1562.dup: i1;
  var $i1563: i64;
  var $i1563.dup: i1;
  var $p1564: ref;
  var $p1564.dup: i1;
  var $p1565: ref;
  var $p1565.dup: i1;
  var $p1566: ref;
  var $p1566.dup: i1;
  var $i1567: i64;
  var $i1567.dup: i1;
  var $p1568: ref;
  var $p1568.dup: i1;
  var $i1569: i64;
  var $i1569.dup: i1;
  var $i1570: i128;
  var $i1570.dup: i1;
  var $p1571: ref;
  var $p1571.dup: i1;
  var $p1572: ref;
  var $p1572.dup: i1;
  var $i1573: i64;
  var $i1573.dup: i1;
  var $p1574: ref;
  var $p1574.dup: i1;
  var $i1575: i64;
  var $i1575.dup: i1;
  var $i1576: i64;
  var $i1576.dup: i1;
  var $i1577: i64;
  var $i1577.dup: i1;
  var $i1578: i64;
  var $i1578.dup: i1;
  var $i1579: i64;
  var $i1579.dup: i1;
  var $i1580: i64;
  var $i1580.dup: i1;
  var $i1581: i64;
  var $i1581.dup: i1;
  var $p1582: ref;
  var $p1582.dup: i1;
  var $p1583: ref;
  var $p1583.dup: i1;
  var $p1584: ref;
  var $p1584.dup: i1;
  var $i1585: i64;
  var $i1585.dup: i1;
  var $p1586: ref;
  var $p1586.dup: i1;
  var $i1587: i64;
  var $i1587.dup: i1;
  var $i1588: i128;
  var $i1588.dup: i1;
  var $p1589: ref;
  var $p1589.dup: i1;
  var $p1590: ref;
  var $p1590.dup: i1;
  var $i1591: i64;
  var $i1591.dup: i1;
  var $p1592: ref;
  var $p1592.dup: i1;
  var $i1593: i64;
  var $i1593.dup: i1;
  var $p1594: ref;
  var $p1594.dup: i1;
  var $p1595: ref;
  var $p1595.dup: i1;
  var $i1596: i64;
  var $i1596.dup: i1;
  var $p1597: ref;
  var $p1597.dup: i1;
  var $i1598: i64;
  var $i1598.dup: i1;
  var $p1599: ref;
  var $p1599.dup: i1;
  var $p1600: ref;
  var $p1600.dup: i1;
  var $p1601: ref;
  var $p1601.dup: i1;
  var $i1602: i64;
  var $i1602.dup: i1;
  var $p1603: ref;
  var $p1603.dup: i1;
  var $i1604: i64;
  var $i1604.dup: i1;
  var $i1605: i128;
  var $i1605.dup: i1;
  var $p1606: ref;
  var $p1606.dup: i1;
  var $p1607: ref;
  var $p1607.dup: i1;
  var $i1608: i64;
  var $i1608.dup: i1;
  var $p1609: ref;
  var $p1609.dup: i1;
  var $i1610: i64;
  var $i1610.dup: i1;
  var $i1611: i64;
  var $i1611.dup: i1;
  var $i1612: i64;
  var $i1612.dup: i1;
  var $p1613: ref;
  var $p1613.dup: i1;
  var $p1614: ref;
  var $p1614.dup: i1;
  var $i1615: i64;
  var $i1615.dup: i1;
  var $p1616: ref;
  var $p1616.dup: i1;
  var $i1617: i64;
  var $i1617.dup: i1;
  var $p1618: ref;
  var $p1618.dup: i1;
  var $p1619: ref;
  var $p1619.dup: i1;
  var $p1620: ref;
  var $p1620.dup: i1;
  var $i1621: i64;
  var $i1621.dup: i1;
  var $p1622: ref;
  var $p1622.dup: i1;
  var $i1623: i64;
  var $i1623.dup: i1;
  var $i1624: i128;
  var $i1624.dup: i1;
  var $p1625: ref;
  var $p1625.dup: i1;
  var $p1626: ref;
  var $p1626.dup: i1;
  var $i1627: i64;
  var $i1627.dup: i1;
  var $p1628: ref;
  var $p1628.dup: i1;
  var $i1629: i64;
  var $i1629.dup: i1;
  var $i1630: i64;
  var $i1630.dup: i1;
  var $p1631: ref;
  var $p1631.dup: i1;
  var $p1632: ref;
  var $p1632.dup: i1;
  var $p1633: ref;
  var $p1633.dup: i1;
  var $i1634: i64;
  var $i1634.dup: i1;
  var $p1635: ref;
  var $p1635.dup: i1;
  var $i1636: i64;
  var $i1636.dup: i1;
  var $i1637: i128;
  var $i1637.dup: i1;
  var $p1638: ref;
  var $p1638.dup: i1;
  var $p1639: ref;
  var $p1639.dup: i1;
  var $i1640: i64;
  var $i1640.dup: i1;
  var $p1641: ref;
  var $p1641.dup: i1;
  var $i1642: i64;
  var $i1642.dup: i1;
  var $p1643: ref;
  var $p1643.dup: i1;
  var $p1644: ref;
  var $p1644.dup: i1;
  var $i1645: i64;
  var $i1645.dup: i1;
  var $p1646: ref;
  var $p1646.dup: i1;
  var $i1647: i64;
  var $i1647.dup: i1;
  var $p1648: ref;
  var $p1648.dup: i1;
  var $p1649: ref;
  var $p1649.dup: i1;
  var $p1650: ref;
  var $p1650.dup: i1;
  var $i1651: i64;
  var $i1651.dup: i1;
  var $p1652: ref;
  var $p1652.dup: i1;
  var $i1653: i64;
  var $i1653.dup: i1;
  var $i1654: i128;
  var $i1654.dup: i1;
  var $p1655: ref;
  var $p1655.dup: i1;
  var $p1656: ref;
  var $p1656.dup: i1;
  var $i1657: i64;
  var $i1657.dup: i1;
  var $p1658: ref;
  var $p1658.dup: i1;
  var $i1659: i64;
  var $i1659.dup: i1;
  var $i1660: i64;
  var $i1660.dup: i1;
  var $i1661: i64;
  var $i1661.dup: i1;
  var $p1662: ref;
  var $p1662.dup: i1;
  var $p1663: ref;
  var $p1663.dup: i1;
  var $i1664: i64;
  var $i1664.dup: i1;
  var $p1665: ref;
  var $p1665.dup: i1;
  var $i1666: i64;
  var $i1666.dup: i1;
  var $p1667: ref;
  var $p1667.dup: i1;
  var $p1668: ref;
  var $p1668.dup: i1;
  var $p1669: ref;
  var $p1669.dup: i1;
  var $i1670: i64;
  var $i1670.dup: i1;
  var $p1671: ref;
  var $p1671.dup: i1;
  var $i1672: i64;
  var $i1672.dup: i1;
  var $i1673: i128;
  var $i1673.dup: i1;
  var $p1674: ref;
  var $p1674.dup: i1;
  var $p1675: ref;
  var $p1675.dup: i1;
  var $i1676: i64;
  var $i1676.dup: i1;
  var $p1677: ref;
  var $p1677.dup: i1;
  var $i1678: i64;
  var $i1678.dup: i1;
  var $i1679: i64;
  var $i1679.dup: i1;
  var $p1680: ref;
  var $p1680.dup: i1;
  var $p1681: ref;
  var $p1681.dup: i1;
  var $p1682: ref;
  var $p1682.dup: i1;
  var $i1683: i64;
  var $i1683.dup: i1;
  var $p1684: ref;
  var $p1684.dup: i1;
  var $i1685: i64;
  var $i1685.dup: i1;
  var $i1686: i128;
  var $i1686.dup: i1;
  var $p1687: ref;
  var $p1687.dup: i1;
  var $p1688: ref;
  var $p1688.dup: i1;
  var $i1689: i64;
  var $i1689.dup: i1;
  var $p1690: ref;
  var $p1690.dup: i1;
  var $i1691: i64;
  var $i1691.dup: i1;
  var $p1692: ref;
  var $p1692.dup: i1;
  var $p1693: ref;
  var $p1693.dup: i1;
  var $i1694: i64;
  var $i1694.dup: i1;
  var $p1695: ref;
  var $p1695.dup: i1;
  var $i1696: i64;
  var $i1696.dup: i1;
  var $p1697: ref;
  var $p1697.dup: i1;
  var $p1698: ref;
  var $p1698.dup: i1;
  var $p1699: ref;
  var $p1699.dup: i1;
  var $i1700: i64;
  var $i1700.dup: i1;
  var $p1701: ref;
  var $p1701.dup: i1;
  var $i1702: i64;
  var $i1702.dup: i1;
  var $i1703: i128;
  var $i1703.dup: i1;
  var $p1704: ref;
  var $p1704.dup: i1;
  var $p1705: ref;
  var $p1705.dup: i1;
  var $i1706: i64;
  var $i1706.dup: i1;
  var $p1707: ref;
  var $p1707.dup: i1;
  var $i1708: i64;
  var $i1708.dup: i1;
  var $i1709: i64;
  var $i1709.dup: i1;
  var $i1710: i64;
  var $i1710.dup: i1;
  var $p1711: ref;
  var $p1711.dup: i1;
  var $p1712: ref;
  var $p1712.dup: i1;
  var $i1713: i64;
  var $i1713.dup: i1;
  var $p1714: ref;
  var $p1714.dup: i1;
  var $i1715: i64;
  var $i1715.dup: i1;
  var $p1716: ref;
  var $p1716.dup: i1;
  var $p1717: ref;
  var $p1717.dup: i1;
  var $p1718: ref;
  var $p1718.dup: i1;
  var $i1719: i64;
  var $i1719.dup: i1;
  var $p1720: ref;
  var $p1720.dup: i1;
  var $i1721: i64;
  var $i1721.dup: i1;
  var $i1722: i128;
  var $i1722.dup: i1;
  var $p1723: ref;
  var $p1723.dup: i1;
  var $p1724: ref;
  var $p1724.dup: i1;
  var $i1725: i64;
  var $i1725.dup: i1;
  var $p1726: ref;
  var $p1726.dup: i1;
  var $i1727: i64;
  var $i1727.dup: i1;
  var $i1728: i64;
  var $i1728.dup: i1;
  var $p1729: ref;
  var $p1729.dup: i1;
  var $p1730: ref;
  var $p1730.dup: i1;
  var $p1731: ref;
  var $p1731.dup: i1;
  var $i1732: i64;
  var $i1732.dup: i1;
  var $p1733: ref;
  var $p1733.dup: i1;
  var $i1734: i64;
  var $i1734.dup: i1;
  var $i1735: i128;
  var $i1735.dup: i1;
  var $p1736: ref;
  var $p1736.dup: i1;
  var $p1737: ref;
  var $p1737.dup: i1;
  var $i1738: i64;
  var $i1738.dup: i1;
  var $p1739: ref;
  var $p1739.dup: i1;
  var $i1740: i64;
  var $i1740.dup: i1;
  var $p1741: ref;
  var $p1741.dup: i1;
  var $p1742: ref;
  var $p1742.dup: i1;
  var $i1743: i64;
  var $i1743.dup: i1;
  var $p1744: ref;
  var $p1744.dup: i1;
  var $i1745: i64;
  var $i1745.dup: i1;
  var $p1746: ref;
  var $p1746.dup: i1;
  var $p1747: ref;
  var $p1747.dup: i1;
  var $p1748: ref;
  var $p1748.dup: i1;
  var $i1749: i64;
  var $i1749.dup: i1;
  var $p1750: ref;
  var $p1750.dup: i1;
  var $i1751: i64;
  var $i1751.dup: i1;
  var $i1752: i128;
  var $i1752.dup: i1;
  var $p1753: ref;
  var $p1753.dup: i1;
  var $p1754: ref;
  var $p1754.dup: i1;
  var $i1755: i64;
  var $i1755.dup: i1;
  var $p1756: ref;
  var $p1756.dup: i1;
  var $i1757: i64;
  var $i1757.dup: i1;
  var $i1758: i64;
  var $i1758.dup: i1;
  var $i1759: i64;
  var $i1759.dup: i1;
  var $p1760: ref;
  var $p1760.dup: i1;
  var $p1761: ref;
  var $p1761.dup: i1;
  var $i1762: i64;
  var $i1762.dup: i1;
  var $p1763: ref;
  var $p1763.dup: i1;
  var $i1764: i64;
  var $i1764.dup: i1;
  var $p1765: ref;
  var $p1765.dup: i1;
  var $p1766: ref;
  var $p1766.dup: i1;
  var $p1767: ref;
  var $p1767.dup: i1;
  var $i1768: i64;
  var $i1768.dup: i1;
  var $p1769: ref;
  var $p1769.dup: i1;
  var $i1770: i64;
  var $i1770.dup: i1;
  var $i1771: i128;
  var $i1771.dup: i1;
  var $p1772: ref;
  var $p1772.dup: i1;
  var $p1773: ref;
  var $p1773.dup: i1;
  var $i1774: i64;
  var $i1774.dup: i1;
  var $p1775: ref;
  var $p1775.dup: i1;
  var $i1776: i64;
  var $i1776.dup: i1;
  var $i1777: i64;
  var $i1777.dup: i1;
  var $p1778: ref;
  var $p1778.dup: i1;
  var $p1779: ref;
  var $p1779.dup: i1;
  var $p1780: ref;
  var $p1780.dup: i1;
  var $i1781: i64;
  var $i1781.dup: i1;
  var $p1782: ref;
  var $p1782.dup: i1;
  var $i1783: i64;
  var $i1783.dup: i1;
  var $i1784: i128;
  var $i1784.dup: i1;
  var $p1785: ref;
  var $p1785.dup: i1;
  var $p1786: ref;
  var $p1786.dup: i1;
  var $i1787: i64;
  var $i1787.dup: i1;
  var $p1788: ref;
  var $p1788.dup: i1;
  var $i1789: i64;
  var $i1789.dup: i1;
  var $p1790: ref;
  var $p1790.dup: i1;
  var $p1791: ref;
  var $p1791.dup: i1;
  var $i1792: i64;
  var $i1792.dup: i1;
  var $p1793: ref;
  var $p1793.dup: i1;
  var $i1794: i64;
  var $i1794.dup: i1;
  var $p1795: ref;
  var $p1795.dup: i1;
  var $p1796: ref;
  var $p1796.dup: i1;
  var $p1797: ref;
  var $p1797.dup: i1;
  var $i1798: i64;
  var $i1798.dup: i1;
  var $p1799: ref;
  var $p1799.dup: i1;
  var $i1800: i64;
  var $i1800.dup: i1;
  var $i1801: i128;
  var $i1801.dup: i1;
  var $p1802: ref;
  var $p1802.dup: i1;
  var $p1803: ref;
  var $p1803.dup: i1;
  var $i1804: i64;
  var $i1804.dup: i1;
  var $p1805: ref;
  var $p1805.dup: i1;
  var $i1806: i64;
  var $i1806.dup: i1;
  var $i1807: i64;
  var $i1807.dup: i1;
  var $i1808: i64;
  var $i1808.dup: i1;
  var $p1809: ref;
  var $p1809.dup: i1;
  var $p1810: ref;
  var $p1810.dup: i1;
  var $i1811: i64;
  var $i1811.dup: i1;
  var $p1812: ref;
  var $p1812.dup: i1;
  var $i1813: i64;
  var $i1813.dup: i1;
  var $p1814: ref;
  var $p1814.dup: i1;
  var $p1815: ref;
  var $p1815.dup: i1;
  var $p1816: ref;
  var $p1816.dup: i1;
  var $i1817: i64;
  var $i1817.dup: i1;
  var $p1818: ref;
  var $p1818.dup: i1;
  var $i1819: i64;
  var $i1819.dup: i1;
  var $i1820: i128;
  var $i1820.dup: i1;
  var $p1821: ref;
  var $p1821.dup: i1;
  var $p1822: ref;
  var $p1822.dup: i1;
  var $i1823: i64;
  var $i1823.dup: i1;
  var $p1824: ref;
  var $p1824.dup: i1;
  var $i1825: i64;
  var $i1825.dup: i1;
  var $i1826: i64;
  var $i1826.dup: i1;
  var $i1827: i64;
  var $i1827.dup: i1;
  var $i1828: i64;
  var $i1828.dup: i1;
  var $i1829: i64;
  var $i1829.dup: i1;
  var $i1830: i64;
  var $i1830.dup: i1;
  var $i1831: i64;
  var $i1831.dup: i1;
  var $p1832: ref;
  var $p1832.dup: i1;
  var $p1833: ref;
  var $p1833.dup: i1;
  var $p1834: ref;
  var $p1834.dup: i1;
  var $p1835: ref;
  var $p1835.dup: i1;
  var $p1836: ref;
  var $p1836.dup: i1;
  var $p1837: ref;
  var $p1837.dup: i1;
  var $p1838: ref;
  var $p1838.dup: i1;
  var $p1839: ref;
  var $p1839.dup: i1;
  var $p1840: ref;
  var $p1840.dup: i1;
  var $p1841: ref;
  var $p1841.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 170, 18} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p4 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p4.dup := 0;
  assume {:verifier.code 0} true;
  call $p5 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p5.dup := 0;
  assume {:verifier.code 0} true;
  call $p6 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p6.dup := 0;
  assume {:verifier.code 0} true;
  call $p7 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p7.dup := 0;
  assume {:verifier.code 0} true;
  call $p8 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p8.dup := 0;
  assume {:verifier.code 0} true;
  call $p9 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p9.dup := 0;
  assume {:verifier.code 0} true;
  call $p10 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p10.dup := 0;
  assume {:verifier.code 0} true;
  call $p11 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p11.dup := 0;
  assume {:verifier.code 0} true;
  call $p12 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p12.dup := 0;
  assume {:verifier.code 0} true;
  call $p13 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p13.dup := 0;
  assume {:verifier.code 0} true;
  call $p14 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p14.dup := 0;
  assume {:verifier.code 0} true;
  call $p15 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p15.dup := 0;
  assume {:verifier.code 0} true;
  call $p16 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p16.dup := 0;
  assume {:verifier.code 0} true;
  call $p17 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p17.dup := 0;
  assume {:verifier.code 0} true;
  call $p18 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p18.dup := 0;
  assume {:verifier.code 0} true;
  call $p19 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p19.dup := 0;
  assume {:verifier.code 0} true;
  call $p20 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p20.dup := 0;
  assume {:verifier.code 0} true;
  call $p21 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p21.dup := 0;
  assume {:verifier.code 0} true;
  call $p22 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p22.dup := 0;
  assume {:verifier.code 0} true;
  call $p23 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p23.dup := 0;
  assume {:verifier.code 0} true;
  call $p24 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p24.dup := 0;
  assume {:verifier.code 0} true;
  call $p25 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p25.dup := 0;
  assume {:verifier.code 0} true;
  call $p26 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p26.dup := 0;
  assume {:verifier.code 0} true;
  call $p27 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p27.dup := 0;
  assume {:verifier.code 0} true;
  call $p28 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p28.dup := 0;
  assume {:verifier.code 0} true;
  call $p29 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p29.dup := 0;
  assume {:verifier.code 0} true;
  call $p30 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p30.dup := 0;
  assume {:verifier.code 0} true;
  call $p31 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p31.dup := 0;
  assume {:verifier.code 0} true;
  call $p32 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p32.dup := 0;
  assume {:verifier.code 0} true;
  call $p33 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p33.dup := 0;
  assume {:verifier.code 0} true;
  call $p34 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p34.dup := 0;
  assume {:verifier.code 0} true;
  call $p35 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p35.dup := 0;
  assume {:verifier.code 0} true;
  call $p36 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p36.dup := 0;
  assume {:verifier.code 0} true;
  call $p37 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p37.dup := 0;
  assume {:verifier.code 0} true;
  call $p38 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p38.dup := 0;
  assume {:verifier.code 0} true;
  call $p39 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p39.dup := 0;
  assume {:verifier.code 0} true;
  call $p40 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p40.dup := 0;
  assume {:verifier.code 0} true;
  call $p41 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p41.dup := 0;
  assume {:verifier.code 0} true;
  call $p42 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p42.dup := 0;
  assume {:verifier.code 0} true;
  call $p43 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p43.dup := 0;
  assume {:verifier.code 0} true;
  call $p44 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p44.dup := 0;
  assume {:verifier.code 0} true;
  call $p45 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p45.dup := 0;
  assume {:verifier.code 0} true;
  call $p46 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p46.dup := 0;
  assume {:verifier.code 0} true;
  call $p47 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p47.dup := 0;
  assume {:verifier.code 0} true;
  call $p48 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p48.dup := 0;
  assume {:verifier.code 0} true;
  call $p49 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p49.dup := 0;
  assume {:verifier.code 0} true;
  call $p50 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p50.dup := 0;
  assume {:verifier.code 0} true;
  call $p51 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p51.dup := 0;
  assume {:verifier.code 0} true;
  call $p52 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p52.dup := 0;
  assume {:verifier.code 0} true;
  call $p53 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p53.dup := 0;
  assume {:verifier.code 0} true;
  call $p54 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p54.dup := 0;
  assume {:verifier.code 0} true;
  call $p55 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p55.dup := 0;
  assume {:verifier.code 0} true;
  call $p56 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p56.dup := 0;
  assume {:verifier.code 0} true;
  call $p57 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p57.dup := 0;
  assume {:verifier.code 0} true;
  call $p58 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p58.dup := 0;
  assume {:verifier.code 0} true;
  call $p59 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p59.dup := 0;
  assume {:verifier.code 0} true;
  call $p60 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p60.dup := 0;
  assume {:verifier.code 0} true;
  call $p61 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p61.dup := 0;
  assume {:verifier.code 0} true;
  call $p62 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p62.dup := 0;
  assume {:verifier.code 0} true;
  call $p63 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p63.dup := 0;
  assume {:verifier.code 0} true;
  call $p64 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p64.dup := 0;
  assume {:verifier.code 0} true;
  call $p65 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p65.dup := 0;
  assume {:verifier.code 0} true;
  call $p66 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p66.dup := 0;
  assume {:verifier.code 0} true;
  call $p67 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p67.dup := 0;
  assume {:verifier.code 0} true;
  call $p68 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p68.dup := 0;
  assume {:verifier.code 0} true;
  call $p69 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p69.dup := 0;
  assume {:verifier.code 0} true;
  call $p70 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p70.dup := 0;
  assume {:verifier.code 0} true;
  call $p71 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p71.dup := 0;
  assume {:verifier.code 0} true;
  call $p72 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p72.dup := 0;
  assume {:verifier.code 0} true;
  call $p73 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p73.dup := 0;
  assume {:verifier.code 0} true;
  call $p74 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p74.dup := 0;
  assume {:verifier.code 0} true;
  call $p75 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p75.dup := 0;
  assume {:verifier.code 0} true;
  call $p76 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p76.dup := 0;
  assume {:verifier.code 0} true;
  call $p77 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p77.dup := 0;
  assume {:verifier.code 0} true;
  call $p78 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p78.dup := 0;
  assume {:verifier.code 0} true;
  call $p79 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p79.dup := 0;
  assume {:verifier.code 0} true;
  call $p80 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p80.dup := 0;
  assume {:verifier.code 0} true;
  call $p81 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p81.dup := 0;
  assume {:verifier.code 0} true;
  call $p82 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p82.dup := 0;
  assume {:verifier.code 0} true;
  call $p83 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p83.dup := 0;
  assume {:verifier.code 0} true;
  call $p84 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p84.dup := 0;
  assume {:verifier.code 0} true;
  call $p85 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p85.dup := 0;
  assume {:verifier.code 0} true;
  call $p86 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p86.dup := 0;
  assume {:verifier.code 0} true;
  call $p87 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p87.dup := 0;
  assume {:verifier.code 0} true;
  call $p88 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p88.dup := 0;
  assume {:verifier.code 0} true;
  call $p89 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p89.dup := 0;
  assume {:verifier.code 0} true;
  call $p90 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p90.dup := 0;
  assume {:verifier.code 0} true;
  call $p91 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p91.dup := 0;
  assume {:verifier.code 0} true;
  call $p92 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p92.dup := 0;
  assume {:verifier.code 0} true;
  call $p93 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p93.dup := 0;
  assume {:verifier.code 0} true;
  call $p94 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p94.dup := 0;
  assume {:verifier.code 0} true;
  call $p95 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p95.dup := 0;
  assume {:verifier.code 0} true;
  call $p96 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p96.dup := 0;
  assume {:verifier.code 0} true;
  call $p97 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p97.dup := 0;
  assume {:verifier.code 0} true;
  call $p98 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p98.dup := 0;
  assume {:verifier.code 0} true;
  call $p99 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p99.dup := 0;
  assume {:verifier.code 0} true;
  call $p100 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p100.dup := 0;
  assume {:verifier.code 0} true;
  call $p101 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p101.dup := 0;
  assume {:verifier.code 0} true;
  call $p102 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p102.dup := 0;
  assume {:verifier.code 0} true;
  call $p103 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p103.dup := 0;
  assume {:verifier.code 0} true;
  call $p104 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p104.dup := 0;
  assume {:verifier.code 0} true;
  call $p105 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p105.dup := 0;
  assume {:verifier.code 0} true;
  call $p106 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p106.dup := 0;
  assume {:verifier.code 0} true;
  call $p107 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p107.dup := 0;
  assume {:verifier.code 0} true;
  call $p108 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p108.dup := 0;
  assume {:verifier.code 0} true;
  call $p109 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p109.dup := 0;
  assume {:verifier.code 0} true;
  call $p110 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p110.dup := 0;
  assume {:verifier.code 0} true;
  call $p111 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p111.dup := 0;
  assume {:verifier.code 0} true;
  call $p112 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p112.dup := 0;
  assume {:verifier.code 0} true;
  call $p113 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p113.dup := 0;
  assume {:verifier.code 0} true;
  call $p114 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p114.dup := 0;
  assume {:verifier.code 0} true;
  call $p115 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p115.dup := 0;
  assume {:verifier.code 0} true;
  call $p116 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p116.dup := 0;
  assume {:verifier.code 0} true;
  call $p117 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p117.dup := 0;
  assume {:verifier.code 0} true;
  call $p118 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p118.dup := 0;
  assume {:verifier.code 0} true;
  call $p119 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p119.dup := 0;
  assume {:verifier.code 0} true;
  call $p120 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p120.dup := 0;
  assume {:verifier.code 0} true;
  call $p121 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p121.dup := 0;
  assume {:verifier.code 0} true;
  call $p122 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p122.dup := 0;
  assume {:verifier.code 0} true;
  call $p123 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p123.dup := 0;
  assume {:verifier.code 0} true;
  call $p124 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p124.dup := 0;
  assume {:verifier.code 0} true;
  call $p125 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p125.dup := 0;
  assume {:verifier.code 0} true;
  call $p126 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p126.dup := 0;
  assume {:verifier.code 0} true;
  call $p127 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p127.dup := 0;
  assume {:verifier.code 0} true;
  call $p128 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p128.dup := 0;
  assume {:verifier.code 0} true;
  call $p129 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p129.dup := 0;
  assume {:verifier.code 0} true;
  call $p130 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p130.dup := 0;
  assume {:verifier.code 0} true;
  call $p131 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p131.dup := 0;
  assume {:verifier.code 0} true;
  call $p132 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p132.dup := 0;
  assume {:verifier.code 0} true;
  call $p133 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p133.dup := 0;
  assume {:verifier.code 0} true;
  call $p134 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p134.dup := 0;
  assume {:verifier.code 0} true;
  call $p135 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p135.dup := 0;
  assume {:verifier.code 0} true;
  call $p136 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p136.dup := 0;
  assume {:verifier.code 0} true;
  call $p137 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p137.dup := 0;
  assume {:verifier.code 0} true;
  call $p138 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p138.dup := 0;
  assume {:verifier.code 0} true;
  call $p139 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p139.dup := 0;
  assume {:verifier.code 0} true;
  call $p140 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p140.dup := 0;
  assume {:verifier.code 0} true;
  call $p141 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p141.dup := 0;
  assume {:verifier.code 0} true;
  call $p142 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p142.dup := 0;
  assume {:verifier.code 0} true;
  call $p143 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p143.dup := 0;
  assume {:verifier.code 0} true;
  call $p144 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p144.dup := 0;
  assume {:verifier.code 0} true;
  call $p145 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p145.dup := 0;
  assume {:verifier.code 0} true;
  call $p146 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p146.dup := 0;
  assume {:verifier.code 0} true;
  call $p147 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p147.dup := 0;
  assume {:verifier.code 0} true;
  call $p148 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p148.dup := 0;
  assume {:verifier.code 0} true;
  call $p149 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p149.dup := 0;
  assume {:verifier.code 0} true;
  call $p150 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p150.dup := 0;
  assume {:verifier.code 0} true;
  call $p151 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p151.dup := 0;
  assume {:verifier.code 0} true;
  call $p152 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p152.dup := 0;
  assume {:verifier.code 0} true;
  call $p153 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p153.dup := 0;
  assume {:verifier.code 0} true;
  call $p154 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p154.dup := 0;
  assume {:verifier.code 0} true;
  call $p155 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p155.dup := 0;
  assume {:verifier.code 0} true;
  call $p156 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p156.dup := 0;
  assume {:verifier.code 0} true;
  call $p157 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p157.dup := 0;
  assume {:verifier.code 0} true;
  call $p158 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p158.dup := 0;
  assume {:verifier.code 0} true;
  call $p159 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p159.dup := 0;
  assume {:verifier.code 0} true;
  call $p160 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p160.dup := 0;
  assume {:verifier.code 0} true;
  call $p161 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p161.dup := 0;
  assume {:verifier.code 0} true;
  call $p162 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p162.dup := 0;
  assume {:verifier.code 0} true;
  call $p163 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p163.dup := 0;
  assume {:verifier.code 0} true;
  call $p164 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p164.dup := 0;
  assume {:verifier.code 0} true;
  call $p165 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p165.dup := 0;
  assume {:verifier.code 0} true;
  call $p166 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p166.dup := 0;
  assume {:verifier.code 0} true;
  call $p167 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p167.dup := 0;
  assume {:verifier.code 0} true;
  call $p168 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p168.dup := 0;
  assume {:verifier.code 0} true;
  call $p169 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p169.dup := 0;
  assume {:verifier.code 0} true;
  call $p170 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p170.dup := 0;
  assume {:verifier.code 0} true;
  call $p171 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p171.dup := 0;
  assume {:verifier.code 0} true;
  call $p172 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p172.dup := 0;
  assume {:verifier.code 0} true;
  call $p173 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p173.dup := 0;
  assume {:verifier.code 0} true;
  call $p174 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p174.dup := 0;
  assume {:verifier.code 0} true;
  call $p175 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p175.dup := 0;
  assume {:verifier.code 0} true;
  call $p176 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p176.dup := 0;
  assume {:verifier.code 0} true;
  call $p177 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p177.dup := 0;
  assume {:verifier.code 0} true;
  call $p178 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p178.dup := 0;
  assume {:verifier.code 0} true;
  call $p179 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p179.dup := 0;
  assume {:verifier.code 0} true;
  call $p180 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p180.dup := 0;
  assume {:verifier.code 0} true;
  call $p181 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p181.dup := 0;
  assume {:verifier.code 0} true;
  call $p182 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p182.dup := 0;
  assume {:verifier.code 0} true;
  call $p183 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p183.dup := 0;
  assume {:verifier.code 0} true;
  call $p184 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p184.dup := 0;
  assume {:verifier.code 0} true;
  call $p185 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p185.dup := 0;
  assume {:verifier.code 0} true;
  call $p186 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p186.dup := 0;
  assume {:verifier.code 0} true;
  call $p187 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p187.dup := 0;
  assume {:verifier.code 0} true;
  call $p188 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p188.dup := 0;
  assume {:verifier.code 0} true;
  call $p189 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p189.dup := 0;
  assume {:verifier.code 0} true;
  call $p190 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p190.dup := 0;
  assume {:verifier.code 0} true;
  call $p191 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p191.dup := 0;
  assume {:verifier.code 0} true;
  call $p192 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p192.dup := 0;
  assume {:verifier.code 0} true;
  call $p193 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p193.dup := 0;
  assume {:verifier.code 0} true;
  call $p194 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p194.dup := 0;
  assume {:verifier.code 0} true;
  call $p195 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p195.dup := 0;
  assume {:verifier.code 0} true;
  call $p196 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p196.dup := 0;
  assume {:verifier.code 0} true;
  call $p197 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p197.dup := 0;
  assume {:verifier.code 0} true;
  call $p198 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p198.dup := 0;
  assume {:verifier.code 0} true;
  call $p199 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p199.dup := 0;
  assume {:verifier.code 0} true;
  call $p200 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p200.dup := 0;
  assume {:verifier.code 0} true;
  call $p201 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p201.dup := 0;
  assume {:verifier.code 0} true;
  call $p202 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p202.dup := 0;
  assume {:verifier.code 0} true;
  call $p203 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p203.dup := 0;
  assume {:verifier.code 0} true;
  call $p204 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p204.dup := 0;
  assume {:verifier.code 0} true;
  call $p205 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p205.dup := 0;
  assume {:verifier.code 0} true;
  call $p206 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p206.dup := 0;
  assume {:verifier.code 0} true;
  call $p207 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p207.dup := 0;
  assume {:verifier.code 0} true;
  call $p208 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p208.dup := 0;
  assume {:verifier.code 0} true;
  call $p209 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p209.dup := 0;
  assume {:verifier.code 0} true;
  call $p210 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p210.dup := 0;
  assume {:verifier.code 0} true;
  call $p211 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p211.dup := 0;
  assume {:verifier.code 0} true;
  call $p212 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p212.dup := 0;
  assume {:verifier.code 0} true;
  call $p213 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p213.dup := 0;
  assume {:verifier.code 0} true;
  call $p214 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p214.dup := 0;
  assume {:verifier.code 0} true;
  call $p215 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p215.dup := 0;
  assume {:verifier.code 0} true;
  call $p216 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p216.dup := 0;
  assume {:verifier.code 0} true;
  call $p217 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p217.dup := 0;
  assume {:verifier.code 0} true;
  call $p218 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p218.dup := 0;
  assume {:verifier.code 0} true;
  call $p219 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p219.dup := 0;
  assume {:verifier.code 0} true;
  call $p220 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p220.dup := 0;
  assume {:verifier.code 0} true;
  call $p221 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p221.dup := 0;
  assume {:verifier.code 0} true;
  call $p222 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p222.dup := 0;
  assume {:verifier.code 0} true;
  call $p223 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p223.dup := 0;
  assume {:verifier.code 0} true;
  call $p224 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p224.dup := 0;
  assume {:verifier.code 0} true;
  call $p225 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p225.dup := 0;
  assume {:verifier.code 0} true;
  call $p226 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p226.dup := 0;
  assume {:verifier.code 0} true;
  call $p227 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p227.dup := 0;
  assume {:verifier.code 0} true;
  call $p228 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p228.dup := 0;
  assume {:verifier.code 0} true;
  call $p229 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p229.dup := 0;
  assume {:verifier.code 0} true;
  call $p230 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p230.dup := 0;
  assume {:verifier.code 0} true;
  call $p231 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p231.dup := 0;
  assume {:verifier.code 0} true;
  call $p232 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p232.dup := 0;
  assume {:verifier.code 0} true;
  call $p233 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p233.dup := 0;
  assume {:verifier.code 0} true;
  call $p234 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p234.dup := 0;
  assume {:verifier.code 0} true;
  call $p235 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p235.dup := 0;
  assume {:verifier.code 0} true;
  call $p236 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p236.dup := 0;
  assume {:verifier.code 0} true;
  call $p237 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p237.dup := 0;
  assume {:verifier.code 0} true;
  call $p238 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p238.dup := 0;
  assume {:verifier.code 0} true;
  call $p239 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p239.dup := 0;
  assume {:verifier.code 0} true;
  call $p240 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p240.dup := 0;
  assume {:verifier.code 0} true;
  call $p241 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p241.dup := 0;
  assume {:verifier.code 0} true;
  call $p242 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p242.dup := 0;
  assume {:verifier.code 0} true;
  call $p243 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p243.dup := 0;
  assume {:verifier.code 0} true;
  call $p244 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p244.dup := 0;
  assume {:verifier.code 0} true;
  call $p245 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p245.dup := 0;
  assume {:verifier.code 0} true;
  call $p246 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p246.dup := 0;
  assume {:verifier.code 0} true;
  call $p247 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p247.dup := 0;
  assume {:verifier.code 0} true;
  call $p248 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p248.dup := 0;
  assume {:verifier.code 0} true;
  call $p249 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p249.dup := 0;
  assume {:verifier.code 0} true;
  call $p250 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p250.dup := 0;
  assume {:verifier.code 0} true;
  call $p251 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p251.dup := 0;
  assume {:verifier.code 0} true;
  call $p252 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p252.dup := 0;
  assume {:verifier.code 0} true;
  call $p253 := $alloc($mul.ref(16,$zext.i32.i64(1)));
  $p253.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 170, 18} true;
  assume {:verifier.code 0} true;
  $p254 := $add.ref($p1,$mul.ref(0,8));
  $p254.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 170, 18} true;
  assume {:verifier.code 0} true;
  $p254.dup := 0;
  $i255 := $load.i64($M.0,$p254);
  $i255.dup := $load.i1($M.0.dup,$p254);
  call {:cexpr "f10"} boogie_si_record_i64($i255);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 171, 18} true;
  assume {:verifier.code 0} true;
  $p256 := $add.ref($p1,$mul.ref(1,8));
  $p256.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 171, 18} true;
  assume {:verifier.code 0} true;
  $p256.dup := 0;
  $i257 := $load.i64($M.0,$p256);
  $i257.dup := $load.i1($M.0.dup,$p256);
  call {:cexpr "f11"} boogie_si_record_i64($i257);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 172, 18} true;
  assume {:verifier.code 0} true;
  $p258 := $add.ref($p1,$mul.ref(2,8));
  $p258.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 172, 18} true;
  assume {:verifier.code 0} true;
  $p258.dup := 0;
  $i259 := $load.i64($M.0,$p258);
  $i259.dup := $load.i1($M.0.dup,$p258);
  call {:cexpr "f12"} boogie_si_record_i64($i259);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 173, 18} true;
  assume {:verifier.code 0} true;
  $p260 := $add.ref($p1,$mul.ref(3,8));
  $p260.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 173, 18} true;
  assume {:verifier.code 0} true;
  $p260.dup := 0;
  $i261 := $load.i64($M.0,$p260);
  $i261.dup := $load.i1($M.0.dup,$p260);
  call {:cexpr "f13"} boogie_si_record_i64($i261);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 174, 18} true;
  assume {:verifier.code 0} true;
  $p262 := $add.ref($p1,$mul.ref(4,8));
  $p262.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 174, 18} true;
  assume {:verifier.code 0} true;
  $p262.dup := 0;
  $i263 := $load.i64($M.0,$p262);
  $i263.dup := $load.i1($M.0.dup,$p262);
  call {:cexpr "f14"} boogie_si_record_i64($i263);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 175, 18} true;
  assume {:verifier.code 0} true;
  $p264 := $add.ref($p2,$mul.ref(0,8));
  $p264.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 175, 18} true;
  assume {:verifier.code 0} true;
  $p264.dup := 0;
  $i265 := $load.i64($M.0,$p264);
  $i265.dup := $load.i1($M.0.dup,$p264);
  call {:cexpr "f20"} boogie_si_record_i64($i265);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 176, 18} true;
  assume {:verifier.code 0} true;
  $p266 := $add.ref($p2,$mul.ref(1,8));
  $p266.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 176, 18} true;
  assume {:verifier.code 0} true;
  $p266.dup := 0;
  $i267 := $load.i64($M.0,$p266);
  $i267.dup := $load.i1($M.0.dup,$p266);
  call {:cexpr "f21"} boogie_si_record_i64($i267);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 177, 18} true;
  assume {:verifier.code 0} true;
  $p268 := $add.ref($p2,$mul.ref(2,8));
  $p268.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 177, 18} true;
  assume {:verifier.code 0} true;
  $p268.dup := 0;
  $i269 := $load.i64($M.0,$p268);
  $i269.dup := $load.i1($M.0.dup,$p268);
  call {:cexpr "f22"} boogie_si_record_i64($i269);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 178, 18} true;
  assume {:verifier.code 0} true;
  $p270 := $add.ref($p2,$mul.ref(3,8));
  $p270.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 178, 18} true;
  assume {:verifier.code 0} true;
  $p270.dup := 0;
  $i271 := $load.i64($M.0,$p270);
  $i271.dup := $load.i1($M.0.dup,$p270);
  call {:cexpr "f23"} boogie_si_record_i64($i271);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 179, 18} true;
  assume {:verifier.code 0} true;
  $p272 := $add.ref($p2,$mul.ref(4,8));
  $p272.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 179, 18} true;
  assume {:verifier.code 0} true;
  $p272.dup := 0;
  $i273 := $load.i64($M.0,$p272);
  $i273.dup := $load.i1($M.0.dup,$p272);
  call {:cexpr "f24"} boogie_si_record_i64($i273);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 180, 18} true;
  assume {:verifier.code 0} true;
  $p274 := $add.ref($p1,$mul.ref(5,8));
  $p274.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 180, 18} true;
  assume {:verifier.code 0} true;
  $p274.dup := 0;
  $i275 := $load.i64($M.0,$p274);
  $i275.dup := $load.i1($M.0.dup,$p274);
  call {:cexpr "f30"} boogie_si_record_i64($i275);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 181, 18} true;
  assume {:verifier.code 0} true;
  $p276 := $add.ref($p1,$mul.ref(6,8));
  $p276.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 181, 18} true;
  assume {:verifier.code 0} true;
  $p276.dup := 0;
  $i277 := $load.i64($M.0,$p276);
  $i277.dup := $load.i1($M.0.dup,$p276);
  call {:cexpr "f31"} boogie_si_record_i64($i277);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 182, 18} true;
  assume {:verifier.code 0} true;
  $p278 := $add.ref($p1,$mul.ref(7,8));
  $p278.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 182, 18} true;
  assume {:verifier.code 0} true;
  $p278.dup := 0;
  $i279 := $load.i64($M.0,$p278);
  $i279.dup := $load.i1($M.0.dup,$p278);
  call {:cexpr "f32"} boogie_si_record_i64($i279);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 183, 18} true;
  assume {:verifier.code 0} true;
  $p280 := $add.ref($p1,$mul.ref(8,8));
  $p280.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 183, 18} true;
  assume {:verifier.code 0} true;
  $p280.dup := 0;
  $i281 := $load.i64($M.0,$p280);
  $i281.dup := $load.i1($M.0.dup,$p280);
  call {:cexpr "f33"} boogie_si_record_i64($i281);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 184, 18} true;
  assume {:verifier.code 0} true;
  $p282 := $add.ref($p1,$mul.ref(9,8));
  $p282.dup := $or.i1($p1.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 184, 18} true;
  assume {:verifier.code 0} true;
  $p282.dup := 0;
  $i283 := $load.i64($M.0,$p282);
  $i283.dup := $load.i1($M.0.dup,$p282);
  call {:cexpr "f34"} boogie_si_record_i64($i283);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 185, 18} true;
  assume {:verifier.code 0} true;
  $p284 := $add.ref($p2,$mul.ref(5,8));
  $p284.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 185, 18} true;
  assume {:verifier.code 0} true;
  $p284.dup := 0;
  $i285 := $load.i64($M.0,$p284);
  $i285.dup := $load.i1($M.0.dup,$p284);
  call {:cexpr "f40"} boogie_si_record_i64($i285);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 186, 18} true;
  assume {:verifier.code 0} true;
  $p286 := $add.ref($p2,$mul.ref(6,8));
  $p286.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 186, 18} true;
  assume {:verifier.code 0} true;
  $p286.dup := 0;
  $i287 := $load.i64($M.0,$p286);
  $i287.dup := $load.i1($M.0.dup,$p286);
  call {:cexpr "f41"} boogie_si_record_i64($i287);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 187, 18} true;
  assume {:verifier.code 0} true;
  $p288 := $add.ref($p2,$mul.ref(7,8));
  $p288.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 187, 18} true;
  assume {:verifier.code 0} true;
  $p288.dup := 0;
  $i289 := $load.i64($M.0,$p288);
  $i289.dup := $load.i1($M.0.dup,$p288);
  call {:cexpr "f42"} boogie_si_record_i64($i289);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 188, 18} true;
  assume {:verifier.code 0} true;
  $p290 := $add.ref($p2,$mul.ref(8,8));
  $p290.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 188, 18} true;
  assume {:verifier.code 0} true;
  $p290.dup := 0;
  $i291 := $load.i64($M.0,$p290);
  $i291.dup := $load.i1($M.0.dup,$p290);
  call {:cexpr "f43"} boogie_si_record_i64($i291);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 189, 18} true;
  assume {:verifier.code 0} true;
  $p292 := $add.ref($p2,$mul.ref(9,8));
  $p292.dup := $or.i1($p2.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 189, 18} true;
  assume {:verifier.code 0} true;
  $p292.dup := 0;
  $i293 := $load.i64($M.0,$p292);
  $i293.dup := $load.i1($M.0.dup,$p292);
  call {:cexpr "f44"} boogie_si_record_i64($i293);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 190, 24} true;
  assume {:verifier.code 0} true;
  $i294 := $mul.i64($i267,19);
  $i294.dup := $or.i1($i267.dup,0);
  call {:cexpr "tmp11"} boogie_si_record_i64($i294);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 191, 24} true;
  assume {:verifier.code 0} true;
  $i295 := $mul.i64($i269,19);
  $i295.dup := $or.i1($i269.dup,0);
  call {:cexpr "tmp12"} boogie_si_record_i64($i295);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 192, 24} true;
  assume {:verifier.code 0} true;
  $i296 := $mul.i64($i271,19);
  $i296.dup := $or.i1($i271.dup,0);
  call {:cexpr "tmp13"} boogie_si_record_i64($i296);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 193, 24} true;
  assume {:verifier.code 0} true;
  $i297 := $mul.i64($i273,19);
  $i297.dup := $or.i1($i273.dup,0);
  call {:cexpr "tmp14"} boogie_si_record_i64($i297);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 194, 24} true;
  assume {:verifier.code 0} true;
  $i298 := $mul.i64($i287,19);
  $i298.dup := $or.i1($i287.dup,0);
  call {:cexpr "tmp21"} boogie_si_record_i64($i298);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 195, 24} true;
  assume {:verifier.code 0} true;
  $i299 := $mul.i64($i289,19);
  $i299.dup := $or.i1($i289.dup,0);
  call {:cexpr "tmp22"} boogie_si_record_i64($i299);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 196, 24} true;
  assume {:verifier.code 0} true;
  $i300 := $mul.i64($i291,19);
  $i300.dup := $or.i1($i291.dup,0);
  call {:cexpr "tmp23"} boogie_si_record_i64($i300);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 197, 24} true;
  assume {:verifier.code 0} true;
  $i301 := $mul.i64($i293,19);
  $i301.dup := $or.i1($i293.dup,0);
  call {:cexpr "tmp24"} boogie_si_record_i64($i301);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  call $p302, $p302.dup := FStar_UInt128_mul_wide($i255, $i255.dup, $i265, $i265.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  $p303 := $bitcast.ref.ref($p4);
  $p303.dup := $p4.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  $p304 := $add.ref($add.ref($p303,$mul.ref(0,16)),$mul.ref(0,1));
  $p304.dup := $or.i1($or.i1($p303.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  $i305 := $extractvalue.i64($p302,0);
  $i305.dup := $or.i1($p302.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  $p304.dup := 0;
  $M.444 := $store.i64($M.444,$p304,$i305);
  $M.444.dup := $store.i1($M.444.dup,$p304,$i305.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  $p306 := $add.ref($add.ref($p303,$mul.ref(0,16)),$mul.ref(8,1));
  $p306.dup := $or.i1($or.i1($p303.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  $i307 := $extractvalue.i64($p302,1);
  $i307.dup := $or.i1($p302.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  $p306.dup := 0;
  $M.444 := $store.i64($M.444,$p306,$i307);
  $M.444.dup := $store.i1($M.444.dup,$p306,$i307.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 198, 31} true;
  assume {:verifier.code 0} true;
  $p4.dup := 0;
  $i308 := $load.i128($M.444,$p4);
  $i308.dup := 0;
  call {:cexpr "o00"} boogie_si_record_i128($i308);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  call $p309, $p309.dup := FStar_UInt128_mul_wide($i255, $i255.dup, $i267, $i267.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  $p310 := $bitcast.ref.ref($p5);
  $p310.dup := $p5.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  $p311 := $add.ref($add.ref($p310,$mul.ref(0,16)),$mul.ref(0,1));
  $p311.dup := $or.i1($or.i1($p310.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  $i312 := $extractvalue.i64($p309,0);
  $i312.dup := $or.i1($p309.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  $p311.dup := 0;
  $M.445 := $store.i64($M.445,$p311,$i312);
  $M.445.dup := $store.i1($M.445.dup,$p311,$i312.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  $p313 := $add.ref($add.ref($p310,$mul.ref(0,16)),$mul.ref(8,1));
  $p313.dup := $or.i1($or.i1($p310.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  $i314 := $extractvalue.i64($p309,1);
  $i314.dup := $or.i1($p309.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  $p313.dup := 0;
  $M.445 := $store.i64($M.445,$p313,$i314);
  $M.445.dup := $store.i1($M.445.dup,$p313,$i314.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 199, 31} true;
  assume {:verifier.code 0} true;
  $p5.dup := 0;
  $i315 := $load.i128($M.445,$p5);
  $i315.dup := 0;
  call {:cexpr "o15"} boogie_si_record_i128($i315);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  call $p316, $p316.dup := FStar_UInt128_mul_wide($i255, $i255.dup, $i269, $i269.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  $p317 := $bitcast.ref.ref($p6);
  $p317.dup := $p6.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  $p318 := $add.ref($add.ref($p317,$mul.ref(0,16)),$mul.ref(0,1));
  $p318.dup := $or.i1($or.i1($p317.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  $i319 := $extractvalue.i64($p316,0);
  $i319.dup := $or.i1($p316.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  $p318.dup := 0;
  $M.446 := $store.i64($M.446,$p318,$i319);
  $M.446.dup := $store.i1($M.446.dup,$p318,$i319.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  $p320 := $add.ref($add.ref($p317,$mul.ref(0,16)),$mul.ref(8,1));
  $p320.dup := $or.i1($or.i1($p317.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  $i321 := $extractvalue.i64($p316,1);
  $i321.dup := $or.i1($p316.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  $p320.dup := 0;
  $M.446 := $store.i64($M.446,$p320,$i321);
  $M.446.dup := $store.i1($M.446.dup,$p320,$i321.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 200, 31} true;
  assume {:verifier.code 0} true;
  $p6.dup := 0;
  $i322 := $load.i128($M.446,$p6);
  $i322.dup := 0;
  call {:cexpr "o25"} boogie_si_record_i128($i322);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  call $p323, $p323.dup := FStar_UInt128_mul_wide($i255, $i255.dup, $i271, $i271.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  $p324 := $bitcast.ref.ref($p7);
  $p324.dup := $p7.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  $p325 := $add.ref($add.ref($p324,$mul.ref(0,16)),$mul.ref(0,1));
  $p325.dup := $or.i1($or.i1($p324.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  $i326 := $extractvalue.i64($p323,0);
  $i326.dup := $or.i1($p323.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  $p325.dup := 0;
  $M.447 := $store.i64($M.447,$p325,$i326);
  $M.447.dup := $store.i1($M.447.dup,$p325,$i326.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  $p327 := $add.ref($add.ref($p324,$mul.ref(0,16)),$mul.ref(8,1));
  $p327.dup := $or.i1($or.i1($p324.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  $i328 := $extractvalue.i64($p323,1);
  $i328.dup := $or.i1($p323.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  $p327.dup := 0;
  $M.447 := $store.i64($M.447,$p327,$i328);
  $M.447.dup := $store.i1($M.447.dup,$p327,$i328.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 201, 31} true;
  assume {:verifier.code 0} true;
  $p7.dup := 0;
  $i329 := $load.i128($M.447,$p7);
  $i329.dup := 0;
  call {:cexpr "o30"} boogie_si_record_i128($i329);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  call $p330, $p330.dup := FStar_UInt128_mul_wide($i255, $i255.dup, $i273, $i273.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  $p331 := $bitcast.ref.ref($p8);
  $p331.dup := $p8.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  $p332 := $add.ref($add.ref($p331,$mul.ref(0,16)),$mul.ref(0,1));
  $p332.dup := $or.i1($or.i1($p331.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  $i333 := $extractvalue.i64($p330,0);
  $i333.dup := $or.i1($p330.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  $p332.dup := 0;
  $M.448 := $store.i64($M.448,$p332,$i333);
  $M.448.dup := $store.i1($M.448.dup,$p332,$i333.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  $p334 := $add.ref($add.ref($p331,$mul.ref(0,16)),$mul.ref(8,1));
  $p334.dup := $or.i1($or.i1($p331.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  $i335 := $extractvalue.i64($p330,1);
  $i335.dup := $or.i1($p330.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  $p334.dup := 0;
  $M.448 := $store.i64($M.448,$p334,$i335);
  $M.448.dup := $store.i1($M.448.dup,$p334,$i335.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 202, 31} true;
  assume {:verifier.code 0} true;
  $p8.dup := 0;
  $i336 := $load.i128($M.448,$p8);
  $i336.dup := 0;
  call {:cexpr "o40"} boogie_si_record_i128($i336);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  call $p337, $p337.dup := FStar_UInt128_mul_wide($i257, $i257.dup, $i297, $i297.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  $p338 := $bitcast.ref.ref($p9);
  $p338.dup := $p9.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  $p339 := $add.ref($add.ref($p338,$mul.ref(0,16)),$mul.ref(0,1));
  $p339.dup := $or.i1($or.i1($p338.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  $i340 := $extractvalue.i64($p337,0);
  $i340.dup := $or.i1($p337.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  $p339.dup := 0;
  $M.449 := $store.i64($M.449,$p339,$i340);
  $M.449.dup := $store.i1($M.449.dup,$p339,$i340.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  $p341 := $add.ref($add.ref($p338,$mul.ref(0,16)),$mul.ref(8,1));
  $p341.dup := $or.i1($or.i1($p338.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  $i342 := $extractvalue.i64($p337,1);
  $i342.dup := $or.i1($p337.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  $p341.dup := 0;
  $M.449 := $store.i64($M.449,$p341,$i342);
  $M.449.dup := $store.i1($M.449.dup,$p341,$i342.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 55} true;
  assume {:verifier.code 0} true;
  $p9.dup := 0;
  $i343 := $load.i128($M.449,$p9);
  $i343.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p10.dup := 0;
  $M.450 := $store.i128($M.450,$p10,$i308);
  $M.450.dup := $store.i1($M.450.dup,$p10,$i308.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p344 := $bitcast.ref.ref($p10);
  $p344.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p345 := $add.ref($add.ref($p344,$mul.ref(0,16)),$mul.ref(0,1));
  $p345.dup := $or.i1($or.i1($p344.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p345.dup := 0;
  $i346 := $load.i64($M.450,$p345);
  $i346.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p347 := $add.ref($add.ref($p344,$mul.ref(0,16)),$mul.ref(8,1));
  $p347.dup := $or.i1($or.i1($p344.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p347.dup := 0;
  $i348 := $load.i64($M.450,$p347);
  $i348.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p11.dup := 0;
  $M.451 := $store.i128($M.451,$p11,$i343);
  $M.451.dup := $store.i1($M.451.dup,$p11,$i343.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p349 := $bitcast.ref.ref($p11);
  $p349.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p350 := $add.ref($add.ref($p349,$mul.ref(0,16)),$mul.ref(0,1));
  $p350.dup := $or.i1($or.i1($p349.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p350.dup := 0;
  $i351 := $load.i64($M.451,$p350);
  $i351.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p352 := $add.ref($add.ref($p349,$mul.ref(0,16)),$mul.ref(8,1));
  $p352.dup := $or.i1($or.i1($p349.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p352.dup := 0;
  $i353 := $load.i64($M.451,$p352);
  $i353.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  call $p354, $p354.dup := FStar_UInt128_add($i346, $i346.dup, $i348, $i348.dup, $i351, $i351.dup, $i353, $i353.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p355 := $bitcast.ref.ref($p12);
  $p355.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p356 := $add.ref($add.ref($p355,$mul.ref(0,16)),$mul.ref(0,1));
  $p356.dup := $or.i1($or.i1($p355.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $i357 := $extractvalue.i64($p354,0);
  $i357.dup := $or.i1($p354.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p356.dup := 0;
  $M.452 := $store.i64($M.452,$p356,$i357);
  $M.452.dup := $store.i1($M.452.dup,$p356,$i357.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p358 := $add.ref($add.ref($p355,$mul.ref(0,16)),$mul.ref(8,1));
  $p358.dup := $or.i1($or.i1($p355.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $i359 := $extractvalue.i64($p354,1);
  $i359.dup := $or.i1($p354.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p358.dup := 0;
  $M.452 := $store.i64($M.452,$p358,$i359);
  $M.452.dup := $store.i1($M.452.dup,$p358,$i359.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 203, 32} true;
  assume {:verifier.code 0} true;
  $p12.dup := 0;
  $i360 := $load.i128($M.452,$p12);
  $i360.dup := 0;
  call {:cexpr "o010"} boogie_si_record_i128($i360);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  call $p361, $p361.dup := FStar_UInt128_mul_wide($i257, $i257.dup, $i265, $i265.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  $p362 := $bitcast.ref.ref($p13);
  $p362.dup := $p13.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  $p363 := $add.ref($add.ref($p362,$mul.ref(0,16)),$mul.ref(0,1));
  $p363.dup := $or.i1($or.i1($p362.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  $i364 := $extractvalue.i64($p361,0);
  $i364.dup := $or.i1($p361.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  $p363.dup := 0;
  $M.453 := $store.i64($M.453,$p363,$i364);
  $M.453.dup := $store.i1($M.453.dup,$p363,$i364.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  $p365 := $add.ref($add.ref($p362,$mul.ref(0,16)),$mul.ref(8,1));
  $p365.dup := $or.i1($or.i1($p362.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  $i366 := $extractvalue.i64($p361,1);
  $i366.dup := $or.i1($p361.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  $p365.dup := 0;
  $M.453 := $store.i64($M.453,$p365,$i366);
  $M.453.dup := $store.i1($M.453.dup,$p365,$i366.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 55} true;
  assume {:verifier.code 0} true;
  $p13.dup := 0;
  $i367 := $load.i128($M.453,$p13);
  $i367.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p14.dup := 0;
  $M.454 := $store.i128($M.454,$p14,$i315);
  $M.454.dup := $store.i1($M.454.dup,$p14,$i315.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p368 := $bitcast.ref.ref($p14);
  $p368.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p369 := $add.ref($add.ref($p368,$mul.ref(0,16)),$mul.ref(0,1));
  $p369.dup := $or.i1($or.i1($p368.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p369.dup := 0;
  $i370 := $load.i64($M.454,$p369);
  $i370.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p371 := $add.ref($add.ref($p368,$mul.ref(0,16)),$mul.ref(8,1));
  $p371.dup := $or.i1($or.i1($p368.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p371.dup := 0;
  $i372 := $load.i64($M.454,$p371);
  $i372.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p15.dup := 0;
  $M.455 := $store.i128($M.455,$p15,$i367);
  $M.455.dup := $store.i1($M.455.dup,$p15,$i367.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p373 := $bitcast.ref.ref($p15);
  $p373.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p374 := $add.ref($add.ref($p373,$mul.ref(0,16)),$mul.ref(0,1));
  $p374.dup := $or.i1($or.i1($p373.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p374.dup := 0;
  $i375 := $load.i64($M.455,$p374);
  $i375.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p376 := $add.ref($add.ref($p373,$mul.ref(0,16)),$mul.ref(8,1));
  $p376.dup := $or.i1($or.i1($p373.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p376.dup := 0;
  $i377 := $load.i64($M.455,$p376);
  $i377.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  call $p378, $p378.dup := FStar_UInt128_add($i370, $i370.dup, $i372, $i372.dup, $i375, $i375.dup, $i377, $i377.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p379 := $bitcast.ref.ref($p16);
  $p379.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p380 := $add.ref($add.ref($p379,$mul.ref(0,16)),$mul.ref(0,1));
  $p380.dup := $or.i1($or.i1($p379.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $i381 := $extractvalue.i64($p378,0);
  $i381.dup := $or.i1($p378.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p380.dup := 0;
  $M.456 := $store.i64($M.456,$p380,$i381);
  $M.456.dup := $store.i1($M.456.dup,$p380,$i381.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p382 := $add.ref($add.ref($p379,$mul.ref(0,16)),$mul.ref(8,1));
  $p382.dup := $or.i1($or.i1($p379.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $i383 := $extractvalue.i64($p378,1);
  $i383.dup := $or.i1($p378.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p382.dup := 0;
  $M.456 := $store.i64($M.456,$p382,$i383);
  $M.456.dup := $store.i1($M.456.dup,$p382,$i383.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 204, 32} true;
  assume {:verifier.code 0} true;
  $p16.dup := 0;
  $i384 := $load.i128($M.456,$p16);
  $i384.dup := 0;
  call {:cexpr "o110"} boogie_si_record_i128($i384);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  call $p385, $p385.dup := FStar_UInt128_mul_wide($i257, $i257.dup, $i267, $i267.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  $p386 := $bitcast.ref.ref($p17);
  $p386.dup := $p17.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  $p387 := $add.ref($add.ref($p386,$mul.ref(0,16)),$mul.ref(0,1));
  $p387.dup := $or.i1($or.i1($p386.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  $i388 := $extractvalue.i64($p385,0);
  $i388.dup := $or.i1($p385.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  $p387.dup := 0;
  $M.457 := $store.i64($M.457,$p387,$i388);
  $M.457.dup := $store.i1($M.457.dup,$p387,$i388.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  $p389 := $add.ref($add.ref($p386,$mul.ref(0,16)),$mul.ref(8,1));
  $p389.dup := $or.i1($or.i1($p386.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  $i390 := $extractvalue.i64($p385,1);
  $i390.dup := $or.i1($p385.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  $p389.dup := 0;
  $M.457 := $store.i64($M.457,$p389,$i390);
  $M.457.dup := $store.i1($M.457.dup,$p389,$i390.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 55} true;
  assume {:verifier.code 0} true;
  $p17.dup := 0;
  $i391 := $load.i128($M.457,$p17);
  $i391.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p18.dup := 0;
  $M.458 := $store.i128($M.458,$p18,$i322);
  $M.458.dup := $store.i1($M.458.dup,$p18,$i322.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p392 := $bitcast.ref.ref($p18);
  $p392.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p393 := $add.ref($add.ref($p392,$mul.ref(0,16)),$mul.ref(0,1));
  $p393.dup := $or.i1($or.i1($p392.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p393.dup := 0;
  $i394 := $load.i64($M.458,$p393);
  $i394.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p395 := $add.ref($add.ref($p392,$mul.ref(0,16)),$mul.ref(8,1));
  $p395.dup := $or.i1($or.i1($p392.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p395.dup := 0;
  $i396 := $load.i64($M.458,$p395);
  $i396.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p19.dup := 0;
  $M.459 := $store.i128($M.459,$p19,$i391);
  $M.459.dup := $store.i1($M.459.dup,$p19,$i391.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p397 := $bitcast.ref.ref($p19);
  $p397.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p398 := $add.ref($add.ref($p397,$mul.ref(0,16)),$mul.ref(0,1));
  $p398.dup := $or.i1($or.i1($p397.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p398.dup := 0;
  $i399 := $load.i64($M.459,$p398);
  $i399.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p400 := $add.ref($add.ref($p397,$mul.ref(0,16)),$mul.ref(8,1));
  $p400.dup := $or.i1($or.i1($p397.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p400.dup := 0;
  $i401 := $load.i64($M.459,$p400);
  $i401.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  call $p402, $p402.dup := FStar_UInt128_add($i394, $i394.dup, $i396, $i396.dup, $i399, $i399.dup, $i401, $i401.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p403 := $bitcast.ref.ref($p20);
  $p403.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p404 := $add.ref($add.ref($p403,$mul.ref(0,16)),$mul.ref(0,1));
  $p404.dup := $or.i1($or.i1($p403.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $i405 := $extractvalue.i64($p402,0);
  $i405.dup := $or.i1($p402.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p404.dup := 0;
  $M.460 := $store.i64($M.460,$p404,$i405);
  $M.460.dup := $store.i1($M.460.dup,$p404,$i405.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p406 := $add.ref($add.ref($p403,$mul.ref(0,16)),$mul.ref(8,1));
  $p406.dup := $or.i1($or.i1($p403.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $i407 := $extractvalue.i64($p402,1);
  $i407.dup := $or.i1($p402.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p406.dup := 0;
  $M.460 := $store.i64($M.460,$p406,$i407);
  $M.460.dup := $store.i1($M.460.dup,$p406,$i407.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 205, 32} true;
  assume {:verifier.code 0} true;
  $p20.dup := 0;
  $i408 := $load.i128($M.460,$p20);
  $i408.dup := 0;
  call {:cexpr "o210"} boogie_si_record_i128($i408);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  call $p409, $p409.dup := FStar_UInt128_mul_wide($i257, $i257.dup, $i269, $i269.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  $p410 := $bitcast.ref.ref($p21);
  $p410.dup := $p21.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  $p411 := $add.ref($add.ref($p410,$mul.ref(0,16)),$mul.ref(0,1));
  $p411.dup := $or.i1($or.i1($p410.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  $i412 := $extractvalue.i64($p409,0);
  $i412.dup := $or.i1($p409.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  $p411.dup := 0;
  $M.461 := $store.i64($M.461,$p411,$i412);
  $M.461.dup := $store.i1($M.461.dup,$p411,$i412.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  $p413 := $add.ref($add.ref($p410,$mul.ref(0,16)),$mul.ref(8,1));
  $p413.dup := $or.i1($or.i1($p410.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  $i414 := $extractvalue.i64($p409,1);
  $i414.dup := $or.i1($p409.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  $p413.dup := 0;
  $M.461 := $store.i64($M.461,$p413,$i414);
  $M.461.dup := $store.i1($M.461.dup,$p413,$i414.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 55} true;
  assume {:verifier.code 0} true;
  $p21.dup := 0;
  $i415 := $load.i128($M.461,$p21);
  $i415.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p22.dup := 0;
  $M.462 := $store.i128($M.462,$p22,$i329);
  $M.462.dup := $store.i1($M.462.dup,$p22,$i329.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p416 := $bitcast.ref.ref($p22);
  $p416.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p417 := $add.ref($add.ref($p416,$mul.ref(0,16)),$mul.ref(0,1));
  $p417.dup := $or.i1($or.i1($p416.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p417.dup := 0;
  $i418 := $load.i64($M.462,$p417);
  $i418.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p419 := $add.ref($add.ref($p416,$mul.ref(0,16)),$mul.ref(8,1));
  $p419.dup := $or.i1($or.i1($p416.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p419.dup := 0;
  $i420 := $load.i64($M.462,$p419);
  $i420.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p23.dup := 0;
  $M.463 := $store.i128($M.463,$p23,$i415);
  $M.463.dup := $store.i1($M.463.dup,$p23,$i415.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p421 := $bitcast.ref.ref($p23);
  $p421.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p422 := $add.ref($add.ref($p421,$mul.ref(0,16)),$mul.ref(0,1));
  $p422.dup := $or.i1($or.i1($p421.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p422.dup := 0;
  $i423 := $load.i64($M.463,$p422);
  $i423.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p424 := $add.ref($add.ref($p421,$mul.ref(0,16)),$mul.ref(8,1));
  $p424.dup := $or.i1($or.i1($p421.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p424.dup := 0;
  $i425 := $load.i64($M.463,$p424);
  $i425.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  call $p426, $p426.dup := FStar_UInt128_add($i418, $i418.dup, $i420, $i420.dup, $i423, $i423.dup, $i425, $i425.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p427 := $bitcast.ref.ref($p24);
  $p427.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p428 := $add.ref($add.ref($p427,$mul.ref(0,16)),$mul.ref(0,1));
  $p428.dup := $or.i1($or.i1($p427.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $i429 := $extractvalue.i64($p426,0);
  $i429.dup := $or.i1($p426.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p428.dup := 0;
  $M.464 := $store.i64($M.464,$p428,$i429);
  $M.464.dup := $store.i1($M.464.dup,$p428,$i429.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p430 := $add.ref($add.ref($p427,$mul.ref(0,16)),$mul.ref(8,1));
  $p430.dup := $or.i1($or.i1($p427.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $i431 := $extractvalue.i64($p426,1);
  $i431.dup := $or.i1($p426.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p430.dup := 0;
  $M.464 := $store.i64($M.464,$p430,$i431);
  $M.464.dup := $store.i1($M.464.dup,$p430,$i431.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 206, 32} true;
  assume {:verifier.code 0} true;
  $p24.dup := 0;
  $i432 := $load.i128($M.464,$p24);
  $i432.dup := 0;
  call {:cexpr "o310"} boogie_si_record_i128($i432);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  call $p433, $p433.dup := FStar_UInt128_mul_wide($i257, $i257.dup, $i271, $i271.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  $p434 := $bitcast.ref.ref($p25);
  $p434.dup := $p25.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  $p435 := $add.ref($add.ref($p434,$mul.ref(0,16)),$mul.ref(0,1));
  $p435.dup := $or.i1($or.i1($p434.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  $i436 := $extractvalue.i64($p433,0);
  $i436.dup := $or.i1($p433.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  $p435.dup := 0;
  $M.465 := $store.i64($M.465,$p435,$i436);
  $M.465.dup := $store.i1($M.465.dup,$p435,$i436.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  $p437 := $add.ref($add.ref($p434,$mul.ref(0,16)),$mul.ref(8,1));
  $p437.dup := $or.i1($or.i1($p434.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  $i438 := $extractvalue.i64($p433,1);
  $i438.dup := $or.i1($p433.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  $p437.dup := 0;
  $M.465 := $store.i64($M.465,$p437,$i438);
  $M.465.dup := $store.i1($M.465.dup,$p437,$i438.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 55} true;
  assume {:verifier.code 0} true;
  $p25.dup := 0;
  $i439 := $load.i128($M.465,$p25);
  $i439.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p26.dup := 0;
  $M.466 := $store.i128($M.466,$p26,$i336);
  $M.466.dup := $store.i1($M.466.dup,$p26,$i336.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p440 := $bitcast.ref.ref($p26);
  $p440.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p441 := $add.ref($add.ref($p440,$mul.ref(0,16)),$mul.ref(0,1));
  $p441.dup := $or.i1($or.i1($p440.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p441.dup := 0;
  $i442 := $load.i64($M.466,$p441);
  $i442.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p443 := $add.ref($add.ref($p440,$mul.ref(0,16)),$mul.ref(8,1));
  $p443.dup := $or.i1($or.i1($p440.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p443.dup := 0;
  $i444 := $load.i64($M.466,$p443);
  $i444.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p27.dup := 0;
  $M.467 := $store.i128($M.467,$p27,$i439);
  $M.467.dup := $store.i1($M.467.dup,$p27,$i439.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p445 := $bitcast.ref.ref($p27);
  $p445.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p446 := $add.ref($add.ref($p445,$mul.ref(0,16)),$mul.ref(0,1));
  $p446.dup := $or.i1($or.i1($p445.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p446.dup := 0;
  $i447 := $load.i64($M.467,$p446);
  $i447.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p448 := $add.ref($add.ref($p445,$mul.ref(0,16)),$mul.ref(8,1));
  $p448.dup := $or.i1($or.i1($p445.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p448.dup := 0;
  $i449 := $load.i64($M.467,$p448);
  $i449.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  call $p450, $p450.dup := FStar_UInt128_add($i442, $i442.dup, $i444, $i444.dup, $i447, $i447.dup, $i449, $i449.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p451 := $bitcast.ref.ref($p28);
  $p451.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p452 := $add.ref($add.ref($p451,$mul.ref(0,16)),$mul.ref(0,1));
  $p452.dup := $or.i1($or.i1($p451.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $i453 := $extractvalue.i64($p450,0);
  $i453.dup := $or.i1($p450.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p452.dup := 0;
  $M.468 := $store.i64($M.468,$p452,$i453);
  $M.468.dup := $store.i1($M.468.dup,$p452,$i453.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p454 := $add.ref($add.ref($p451,$mul.ref(0,16)),$mul.ref(8,1));
  $p454.dup := $or.i1($or.i1($p451.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $i455 := $extractvalue.i64($p450,1);
  $i455.dup := $or.i1($p450.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p454.dup := 0;
  $M.468 := $store.i64($M.468,$p454,$i455);
  $M.468.dup := $store.i1($M.468.dup,$p454,$i455.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 207, 32} true;
  assume {:verifier.code 0} true;
  $p28.dup := 0;
  $i456 := $load.i128($M.468,$p28);
  $i456.dup := 0;
  call {:cexpr "o410"} boogie_si_record_i128($i456);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  call $p457, $p457.dup := FStar_UInt128_mul_wide($i259, $i259.dup, $i296, $i296.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  $p458 := $bitcast.ref.ref($p29);
  $p458.dup := $p29.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  $p459 := $add.ref($add.ref($p458,$mul.ref(0,16)),$mul.ref(0,1));
  $p459.dup := $or.i1($or.i1($p458.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  $i460 := $extractvalue.i64($p457,0);
  $i460.dup := $or.i1($p457.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  $p459.dup := 0;
  $M.469 := $store.i64($M.469,$p459,$i460);
  $M.469.dup := $store.i1($M.469.dup,$p459,$i460.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  $p461 := $add.ref($add.ref($p458,$mul.ref(0,16)),$mul.ref(8,1));
  $p461.dup := $or.i1($or.i1($p458.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  $i462 := $extractvalue.i64($p457,1);
  $i462.dup := $or.i1($p457.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  $p461.dup := 0;
  $M.469 := $store.i64($M.469,$p461,$i462);
  $M.469.dup := $store.i1($M.469.dup,$p461,$i462.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 56} true;
  assume {:verifier.code 0} true;
  $p29.dup := 0;
  $i463 := $load.i128($M.469,$p29);
  $i463.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p30.dup := 0;
  $M.470 := $store.i128($M.470,$p30,$i360);
  $M.470.dup := $store.i1($M.470.dup,$p30,$i360.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p464 := $bitcast.ref.ref($p30);
  $p464.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p465 := $add.ref($add.ref($p464,$mul.ref(0,16)),$mul.ref(0,1));
  $p465.dup := $or.i1($or.i1($p464.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p465.dup := 0;
  $i466 := $load.i64($M.470,$p465);
  $i466.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p467 := $add.ref($add.ref($p464,$mul.ref(0,16)),$mul.ref(8,1));
  $p467.dup := $or.i1($or.i1($p464.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p467.dup := 0;
  $i468 := $load.i64($M.470,$p467);
  $i468.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p31.dup := 0;
  $M.471 := $store.i128($M.471,$p31,$i463);
  $M.471.dup := $store.i1($M.471.dup,$p31,$i463.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p469 := $bitcast.ref.ref($p31);
  $p469.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p470 := $add.ref($add.ref($p469,$mul.ref(0,16)),$mul.ref(0,1));
  $p470.dup := $or.i1($or.i1($p469.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p470.dup := 0;
  $i471 := $load.i64($M.471,$p470);
  $i471.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p472 := $add.ref($add.ref($p469,$mul.ref(0,16)),$mul.ref(8,1));
  $p472.dup := $or.i1($or.i1($p469.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p472.dup := 0;
  $i473 := $load.i64($M.471,$p472);
  $i473.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  call $p474, $p474.dup := FStar_UInt128_add($i466, $i466.dup, $i468, $i468.dup, $i471, $i471.dup, $i473, $i473.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p475 := $bitcast.ref.ref($p32);
  $p475.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p476 := $add.ref($add.ref($p475,$mul.ref(0,16)),$mul.ref(0,1));
  $p476.dup := $or.i1($or.i1($p475.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $i477 := $extractvalue.i64($p474,0);
  $i477.dup := $or.i1($p474.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p476.dup := 0;
  $M.472 := $store.i64($M.472,$p476,$i477);
  $M.472.dup := $store.i1($M.472.dup,$p476,$i477.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p478 := $add.ref($add.ref($p475,$mul.ref(0,16)),$mul.ref(8,1));
  $p478.dup := $or.i1($or.i1($p475.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $i479 := $extractvalue.i64($p474,1);
  $i479.dup := $or.i1($p474.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p478.dup := 0;
  $M.472 := $store.i64($M.472,$p478,$i479);
  $M.472.dup := $store.i1($M.472.dup,$p478,$i479.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 208, 32} true;
  assume {:verifier.code 0} true;
  $p32.dup := 0;
  $i480 := $load.i128($M.472,$p32);
  $i480.dup := 0;
  call {:cexpr "o020"} boogie_si_record_i128($i480);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  call $p481, $p481.dup := FStar_UInt128_mul_wide($i259, $i259.dup, $i297, $i297.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  $p482 := $bitcast.ref.ref($p33);
  $p482.dup := $p33.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  $p483 := $add.ref($add.ref($p482,$mul.ref(0,16)),$mul.ref(0,1));
  $p483.dup := $or.i1($or.i1($p482.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  $i484 := $extractvalue.i64($p481,0);
  $i484.dup := $or.i1($p481.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  $p483.dup := 0;
  $M.473 := $store.i64($M.473,$p483,$i484);
  $M.473.dup := $store.i1($M.473.dup,$p483,$i484.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  $p485 := $add.ref($add.ref($p482,$mul.ref(0,16)),$mul.ref(8,1));
  $p485.dup := $or.i1($or.i1($p482.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  $i486 := $extractvalue.i64($p481,1);
  $i486.dup := $or.i1($p481.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  $p485.dup := 0;
  $M.473 := $store.i64($M.473,$p485,$i486);
  $M.473.dup := $store.i1($M.473.dup,$p485,$i486.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 56} true;
  assume {:verifier.code 0} true;
  $p33.dup := 0;
  $i487 := $load.i128($M.473,$p33);
  $i487.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p34.dup := 0;
  $M.474 := $store.i128($M.474,$p34,$i384);
  $M.474.dup := $store.i1($M.474.dup,$p34,$i384.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p488 := $bitcast.ref.ref($p34);
  $p488.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p489 := $add.ref($add.ref($p488,$mul.ref(0,16)),$mul.ref(0,1));
  $p489.dup := $or.i1($or.i1($p488.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p489.dup := 0;
  $i490 := $load.i64($M.474,$p489);
  $i490.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p491 := $add.ref($add.ref($p488,$mul.ref(0,16)),$mul.ref(8,1));
  $p491.dup := $or.i1($or.i1($p488.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p491.dup := 0;
  $i492 := $load.i64($M.474,$p491);
  $i492.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p35.dup := 0;
  $M.475 := $store.i128($M.475,$p35,$i487);
  $M.475.dup := $store.i1($M.475.dup,$p35,$i487.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p493 := $bitcast.ref.ref($p35);
  $p493.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p494 := $add.ref($add.ref($p493,$mul.ref(0,16)),$mul.ref(0,1));
  $p494.dup := $or.i1($or.i1($p493.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p494.dup := 0;
  $i495 := $load.i64($M.475,$p494);
  $i495.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p496 := $add.ref($add.ref($p493,$mul.ref(0,16)),$mul.ref(8,1));
  $p496.dup := $or.i1($or.i1($p493.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p496.dup := 0;
  $i497 := $load.i64($M.475,$p496);
  $i497.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  call $p498, $p498.dup := FStar_UInt128_add($i490, $i490.dup, $i492, $i492.dup, $i495, $i495.dup, $i497, $i497.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p499 := $bitcast.ref.ref($p36);
  $p499.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p500 := $add.ref($add.ref($p499,$mul.ref(0,16)),$mul.ref(0,1));
  $p500.dup := $or.i1($or.i1($p499.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $i501 := $extractvalue.i64($p498,0);
  $i501.dup := $or.i1($p498.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p500.dup := 0;
  $M.476 := $store.i64($M.476,$p500,$i501);
  $M.476.dup := $store.i1($M.476.dup,$p500,$i501.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p502 := $add.ref($add.ref($p499,$mul.ref(0,16)),$mul.ref(8,1));
  $p502.dup := $or.i1($or.i1($p499.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $i503 := $extractvalue.i64($p498,1);
  $i503.dup := $or.i1($p498.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p502.dup := 0;
  $M.476 := $store.i64($M.476,$p502,$i503);
  $M.476.dup := $store.i1($M.476.dup,$p502,$i503.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 209, 32} true;
  assume {:verifier.code 0} true;
  $p36.dup := 0;
  $i504 := $load.i128($M.476,$p36);
  $i504.dup := 0;
  call {:cexpr "o120"} boogie_si_record_i128($i504);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  call $p505, $p505.dup := FStar_UInt128_mul_wide($i259, $i259.dup, $i265, $i265.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  $p506 := $bitcast.ref.ref($p37);
  $p506.dup := $p37.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  $p507 := $add.ref($add.ref($p506,$mul.ref(0,16)),$mul.ref(0,1));
  $p507.dup := $or.i1($or.i1($p506.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  $i508 := $extractvalue.i64($p505,0);
  $i508.dup := $or.i1($p505.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  $p507.dup := 0;
  $M.477 := $store.i64($M.477,$p507,$i508);
  $M.477.dup := $store.i1($M.477.dup,$p507,$i508.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  $p509 := $add.ref($add.ref($p506,$mul.ref(0,16)),$mul.ref(8,1));
  $p509.dup := $or.i1($or.i1($p506.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  $i510 := $extractvalue.i64($p505,1);
  $i510.dup := $or.i1($p505.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  $p509.dup := 0;
  $M.477 := $store.i64($M.477,$p509,$i510);
  $M.477.dup := $store.i1($M.477.dup,$p509,$i510.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 56} true;
  assume {:verifier.code 0} true;
  $p37.dup := 0;
  $i511 := $load.i128($M.477,$p37);
  $i511.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p38.dup := 0;
  $M.478 := $store.i128($M.478,$p38,$i408);
  $M.478.dup := $store.i1($M.478.dup,$p38,$i408.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p512 := $bitcast.ref.ref($p38);
  $p512.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p513 := $add.ref($add.ref($p512,$mul.ref(0,16)),$mul.ref(0,1));
  $p513.dup := $or.i1($or.i1($p512.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p513.dup := 0;
  $i514 := $load.i64($M.478,$p513);
  $i514.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p515 := $add.ref($add.ref($p512,$mul.ref(0,16)),$mul.ref(8,1));
  $p515.dup := $or.i1($or.i1($p512.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p515.dup := 0;
  $i516 := $load.i64($M.478,$p515);
  $i516.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p39.dup := 0;
  $M.479 := $store.i128($M.479,$p39,$i511);
  $M.479.dup := $store.i1($M.479.dup,$p39,$i511.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p517 := $bitcast.ref.ref($p39);
  $p517.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p518 := $add.ref($add.ref($p517,$mul.ref(0,16)),$mul.ref(0,1));
  $p518.dup := $or.i1($or.i1($p517.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p518.dup := 0;
  $i519 := $load.i64($M.479,$p518);
  $i519.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p520 := $add.ref($add.ref($p517,$mul.ref(0,16)),$mul.ref(8,1));
  $p520.dup := $or.i1($or.i1($p517.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p520.dup := 0;
  $i521 := $load.i64($M.479,$p520);
  $i521.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  call $p522, $p522.dup := FStar_UInt128_add($i514, $i514.dup, $i516, $i516.dup, $i519, $i519.dup, $i521, $i521.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p523 := $bitcast.ref.ref($p40);
  $p523.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p524 := $add.ref($add.ref($p523,$mul.ref(0,16)),$mul.ref(0,1));
  $p524.dup := $or.i1($or.i1($p523.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $i525 := $extractvalue.i64($p522,0);
  $i525.dup := $or.i1($p522.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p524.dup := 0;
  $M.480 := $store.i64($M.480,$p524,$i525);
  $M.480.dup := $store.i1($M.480.dup,$p524,$i525.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p526 := $add.ref($add.ref($p523,$mul.ref(0,16)),$mul.ref(8,1));
  $p526.dup := $or.i1($or.i1($p523.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $i527 := $extractvalue.i64($p522,1);
  $i527.dup := $or.i1($p522.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p526.dup := 0;
  $M.480 := $store.i64($M.480,$p526,$i527);
  $M.480.dup := $store.i1($M.480.dup,$p526,$i527.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 210, 32} true;
  assume {:verifier.code 0} true;
  $p40.dup := 0;
  $i528 := $load.i128($M.480,$p40);
  $i528.dup := 0;
  call {:cexpr "o220"} boogie_si_record_i128($i528);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  call $p529, $p529.dup := FStar_UInt128_mul_wide($i259, $i259.dup, $i267, $i267.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  $p530 := $bitcast.ref.ref($p41);
  $p530.dup := $p41.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  $p531 := $add.ref($add.ref($p530,$mul.ref(0,16)),$mul.ref(0,1));
  $p531.dup := $or.i1($or.i1($p530.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  $i532 := $extractvalue.i64($p529,0);
  $i532.dup := $or.i1($p529.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  $p531.dup := 0;
  $M.481 := $store.i64($M.481,$p531,$i532);
  $M.481.dup := $store.i1($M.481.dup,$p531,$i532.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  $p533 := $add.ref($add.ref($p530,$mul.ref(0,16)),$mul.ref(8,1));
  $p533.dup := $or.i1($or.i1($p530.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  $i534 := $extractvalue.i64($p529,1);
  $i534.dup := $or.i1($p529.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  $p533.dup := 0;
  $M.481 := $store.i64($M.481,$p533,$i534);
  $M.481.dup := $store.i1($M.481.dup,$p533,$i534.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 56} true;
  assume {:verifier.code 0} true;
  $p41.dup := 0;
  $i535 := $load.i128($M.481,$p41);
  $i535.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p42.dup := 0;
  $M.482 := $store.i128($M.482,$p42,$i432);
  $M.482.dup := $store.i1($M.482.dup,$p42,$i432.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p536 := $bitcast.ref.ref($p42);
  $p536.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p537 := $add.ref($add.ref($p536,$mul.ref(0,16)),$mul.ref(0,1));
  $p537.dup := $or.i1($or.i1($p536.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p537.dup := 0;
  $i538 := $load.i64($M.482,$p537);
  $i538.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p539 := $add.ref($add.ref($p536,$mul.ref(0,16)),$mul.ref(8,1));
  $p539.dup := $or.i1($or.i1($p536.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p539.dup := 0;
  $i540 := $load.i64($M.482,$p539);
  $i540.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p43.dup := 0;
  $M.483 := $store.i128($M.483,$p43,$i535);
  $M.483.dup := $store.i1($M.483.dup,$p43,$i535.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p541 := $bitcast.ref.ref($p43);
  $p541.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p542 := $add.ref($add.ref($p541,$mul.ref(0,16)),$mul.ref(0,1));
  $p542.dup := $or.i1($or.i1($p541.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p542.dup := 0;
  $i543 := $load.i64($M.483,$p542);
  $i543.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p544 := $add.ref($add.ref($p541,$mul.ref(0,16)),$mul.ref(8,1));
  $p544.dup := $or.i1($or.i1($p541.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p544.dup := 0;
  $i545 := $load.i64($M.483,$p544);
  $i545.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  call $p546, $p546.dup := FStar_UInt128_add($i538, $i538.dup, $i540, $i540.dup, $i543, $i543.dup, $i545, $i545.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p547 := $bitcast.ref.ref($p44);
  $p547.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p548 := $add.ref($add.ref($p547,$mul.ref(0,16)),$mul.ref(0,1));
  $p548.dup := $or.i1($or.i1($p547.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $i549 := $extractvalue.i64($p546,0);
  $i549.dup := $or.i1($p546.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p548.dup := 0;
  $M.484 := $store.i64($M.484,$p548,$i549);
  $M.484.dup := $store.i1($M.484.dup,$p548,$i549.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p550 := $add.ref($add.ref($p547,$mul.ref(0,16)),$mul.ref(8,1));
  $p550.dup := $or.i1($or.i1($p547.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $i551 := $extractvalue.i64($p546,1);
  $i551.dup := $or.i1($p546.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p550.dup := 0;
  $M.484 := $store.i64($M.484,$p550,$i551);
  $M.484.dup := $store.i1($M.484.dup,$p550,$i551.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 211, 32} true;
  assume {:verifier.code 0} true;
  $p44.dup := 0;
  $i552 := $load.i128($M.484,$p44);
  $i552.dup := 0;
  call {:cexpr "o320"} boogie_si_record_i128($i552);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  call $p553, $p553.dup := FStar_UInt128_mul_wide($i259, $i259.dup, $i269, $i269.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  $p554 := $bitcast.ref.ref($p45);
  $p554.dup := $p45.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  $p555 := $add.ref($add.ref($p554,$mul.ref(0,16)),$mul.ref(0,1));
  $p555.dup := $or.i1($or.i1($p554.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  $i556 := $extractvalue.i64($p553,0);
  $i556.dup := $or.i1($p553.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  $p555.dup := 0;
  $M.485 := $store.i64($M.485,$p555,$i556);
  $M.485.dup := $store.i1($M.485.dup,$p555,$i556.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  $p557 := $add.ref($add.ref($p554,$mul.ref(0,16)),$mul.ref(8,1));
  $p557.dup := $or.i1($or.i1($p554.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  $i558 := $extractvalue.i64($p553,1);
  $i558.dup := $or.i1($p553.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  $p557.dup := 0;
  $M.485 := $store.i64($M.485,$p557,$i558);
  $M.485.dup := $store.i1($M.485.dup,$p557,$i558.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 56} true;
  assume {:verifier.code 0} true;
  $p45.dup := 0;
  $i559 := $load.i128($M.485,$p45);
  $i559.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p46.dup := 0;
  $M.486 := $store.i128($M.486,$p46,$i456);
  $M.486.dup := $store.i1($M.486.dup,$p46,$i456.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p560 := $bitcast.ref.ref($p46);
  $p560.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p561 := $add.ref($add.ref($p560,$mul.ref(0,16)),$mul.ref(0,1));
  $p561.dup := $or.i1($or.i1($p560.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p561.dup := 0;
  $i562 := $load.i64($M.486,$p561);
  $i562.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p563 := $add.ref($add.ref($p560,$mul.ref(0,16)),$mul.ref(8,1));
  $p563.dup := $or.i1($or.i1($p560.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p563.dup := 0;
  $i564 := $load.i64($M.486,$p563);
  $i564.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p47.dup := 0;
  $M.487 := $store.i128($M.487,$p47,$i559);
  $M.487.dup := $store.i1($M.487.dup,$p47,$i559.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p565 := $bitcast.ref.ref($p47);
  $p565.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p566 := $add.ref($add.ref($p565,$mul.ref(0,16)),$mul.ref(0,1));
  $p566.dup := $or.i1($or.i1($p565.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p566.dup := 0;
  $i567 := $load.i64($M.487,$p566);
  $i567.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p568 := $add.ref($add.ref($p565,$mul.ref(0,16)),$mul.ref(8,1));
  $p568.dup := $or.i1($or.i1($p565.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p568.dup := 0;
  $i569 := $load.i64($M.487,$p568);
  $i569.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  call $p570, $p570.dup := FStar_UInt128_add($i562, $i562.dup, $i564, $i564.dup, $i567, $i567.dup, $i569, $i569.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p571 := $bitcast.ref.ref($p48);
  $p571.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p572 := $add.ref($add.ref($p571,$mul.ref(0,16)),$mul.ref(0,1));
  $p572.dup := $or.i1($or.i1($p571.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $i573 := $extractvalue.i64($p570,0);
  $i573.dup := $or.i1($p570.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p572.dup := 0;
  $M.488 := $store.i64($M.488,$p572,$i573);
  $M.488.dup := $store.i1($M.488.dup,$p572,$i573.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p574 := $add.ref($add.ref($p571,$mul.ref(0,16)),$mul.ref(8,1));
  $p574.dup := $or.i1($or.i1($p571.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $i575 := $extractvalue.i64($p570,1);
  $i575.dup := $or.i1($p570.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p574.dup := 0;
  $M.488 := $store.i64($M.488,$p574,$i575);
  $M.488.dup := $store.i1($M.488.dup,$p574,$i575.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 212, 32} true;
  assume {:verifier.code 0} true;
  $p48.dup := 0;
  $i576 := $load.i128($M.488,$p48);
  $i576.dup := 0;
  call {:cexpr "o420"} boogie_si_record_i128($i576);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  call $p577, $p577.dup := FStar_UInt128_mul_wide($i261, $i261.dup, $i295, $i295.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  $p578 := $bitcast.ref.ref($p49);
  $p578.dup := $p49.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  $p579 := $add.ref($add.ref($p578,$mul.ref(0,16)),$mul.ref(0,1));
  $p579.dup := $or.i1($or.i1($p578.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  $i580 := $extractvalue.i64($p577,0);
  $i580.dup := $or.i1($p577.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  $p579.dup := 0;
  $M.489 := $store.i64($M.489,$p579,$i580);
  $M.489.dup := $store.i1($M.489.dup,$p579,$i580.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  $p581 := $add.ref($add.ref($p578,$mul.ref(0,16)),$mul.ref(8,1));
  $p581.dup := $or.i1($or.i1($p578.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  $i582 := $extractvalue.i64($p577,1);
  $i582.dup := $or.i1($p577.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  $p581.dup := 0;
  $M.489 := $store.i64($M.489,$p581,$i582);
  $M.489.dup := $store.i1($M.489.dup,$p581,$i582.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 56} true;
  assume {:verifier.code 0} true;
  $p49.dup := 0;
  $i583 := $load.i128($M.489,$p49);
  $i583.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p50.dup := 0;
  $M.490 := $store.i128($M.490,$p50,$i480);
  $M.490.dup := $store.i1($M.490.dup,$p50,$i480.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p584 := $bitcast.ref.ref($p50);
  $p584.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p585 := $add.ref($add.ref($p584,$mul.ref(0,16)),$mul.ref(0,1));
  $p585.dup := $or.i1($or.i1($p584.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p585.dup := 0;
  $i586 := $load.i64($M.490,$p585);
  $i586.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p587 := $add.ref($add.ref($p584,$mul.ref(0,16)),$mul.ref(8,1));
  $p587.dup := $or.i1($or.i1($p584.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p587.dup := 0;
  $i588 := $load.i64($M.490,$p587);
  $i588.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p51.dup := 0;
  $M.491 := $store.i128($M.491,$p51,$i583);
  $M.491.dup := $store.i1($M.491.dup,$p51,$i583.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p589 := $bitcast.ref.ref($p51);
  $p589.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p590 := $add.ref($add.ref($p589,$mul.ref(0,16)),$mul.ref(0,1));
  $p590.dup := $or.i1($or.i1($p589.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p590.dup := 0;
  $i591 := $load.i64($M.491,$p590);
  $i591.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p592 := $add.ref($add.ref($p589,$mul.ref(0,16)),$mul.ref(8,1));
  $p592.dup := $or.i1($or.i1($p589.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p592.dup := 0;
  $i593 := $load.i64($M.491,$p592);
  $i593.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  call $p594, $p594.dup := FStar_UInt128_add($i586, $i586.dup, $i588, $i588.dup, $i591, $i591.dup, $i593, $i593.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p595 := $bitcast.ref.ref($p52);
  $p595.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p596 := $add.ref($add.ref($p595,$mul.ref(0,16)),$mul.ref(0,1));
  $p596.dup := $or.i1($or.i1($p595.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $i597 := $extractvalue.i64($p594,0);
  $i597.dup := $or.i1($p594.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p596.dup := 0;
  $M.492 := $store.i64($M.492,$p596,$i597);
  $M.492.dup := $store.i1($M.492.dup,$p596,$i597.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p598 := $add.ref($add.ref($p595,$mul.ref(0,16)),$mul.ref(8,1));
  $p598.dup := $or.i1($or.i1($p595.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $i599 := $extractvalue.i64($p594,1);
  $i599.dup := $or.i1($p594.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p598.dup := 0;
  $M.492 := $store.i64($M.492,$p598,$i599);
  $M.492.dup := $store.i1($M.492.dup,$p598,$i599.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 213, 32} true;
  assume {:verifier.code 0} true;
  $p52.dup := 0;
  $i600 := $load.i128($M.492,$p52);
  $i600.dup := 0;
  call {:cexpr "o030"} boogie_si_record_i128($i600);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  call $p601, $p601.dup := FStar_UInt128_mul_wide($i261, $i261.dup, $i296, $i296.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  $p602 := $bitcast.ref.ref($p53);
  $p602.dup := $p53.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  $p603 := $add.ref($add.ref($p602,$mul.ref(0,16)),$mul.ref(0,1));
  $p603.dup := $or.i1($or.i1($p602.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  $i604 := $extractvalue.i64($p601,0);
  $i604.dup := $or.i1($p601.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  $p603.dup := 0;
  $M.493 := $store.i64($M.493,$p603,$i604);
  $M.493.dup := $store.i1($M.493.dup,$p603,$i604.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  $p605 := $add.ref($add.ref($p602,$mul.ref(0,16)),$mul.ref(8,1));
  $p605.dup := $or.i1($or.i1($p602.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  $i606 := $extractvalue.i64($p601,1);
  $i606.dup := $or.i1($p601.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  $p605.dup := 0;
  $M.493 := $store.i64($M.493,$p605,$i606);
  $M.493.dup := $store.i1($M.493.dup,$p605,$i606.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 56} true;
  assume {:verifier.code 0} true;
  $p53.dup := 0;
  $i607 := $load.i128($M.493,$p53);
  $i607.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p54.dup := 0;
  $M.494 := $store.i128($M.494,$p54,$i504);
  $M.494.dup := $store.i1($M.494.dup,$p54,$i504.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p608 := $bitcast.ref.ref($p54);
  $p608.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p609 := $add.ref($add.ref($p608,$mul.ref(0,16)),$mul.ref(0,1));
  $p609.dup := $or.i1($or.i1($p608.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p609.dup := 0;
  $i610 := $load.i64($M.494,$p609);
  $i610.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p611 := $add.ref($add.ref($p608,$mul.ref(0,16)),$mul.ref(8,1));
  $p611.dup := $or.i1($or.i1($p608.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p611.dup := 0;
  $i612 := $load.i64($M.494,$p611);
  $i612.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p55.dup := 0;
  $M.495 := $store.i128($M.495,$p55,$i607);
  $M.495.dup := $store.i1($M.495.dup,$p55,$i607.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p613 := $bitcast.ref.ref($p55);
  $p613.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p614 := $add.ref($add.ref($p613,$mul.ref(0,16)),$mul.ref(0,1));
  $p614.dup := $or.i1($or.i1($p613.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p614.dup := 0;
  $i615 := $load.i64($M.495,$p614);
  $i615.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p616 := $add.ref($add.ref($p613,$mul.ref(0,16)),$mul.ref(8,1));
  $p616.dup := $or.i1($or.i1($p613.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p616.dup := 0;
  $i617 := $load.i64($M.495,$p616);
  $i617.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  call $p618, $p618.dup := FStar_UInt128_add($i610, $i610.dup, $i612, $i612.dup, $i615, $i615.dup, $i617, $i617.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p619 := $bitcast.ref.ref($p56);
  $p619.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p620 := $add.ref($add.ref($p619,$mul.ref(0,16)),$mul.ref(0,1));
  $p620.dup := $or.i1($or.i1($p619.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $i621 := $extractvalue.i64($p618,0);
  $i621.dup := $or.i1($p618.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p620.dup := 0;
  $M.496 := $store.i64($M.496,$p620,$i621);
  $M.496.dup := $store.i1($M.496.dup,$p620,$i621.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p622 := $add.ref($add.ref($p619,$mul.ref(0,16)),$mul.ref(8,1));
  $p622.dup := $or.i1($or.i1($p619.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $i623 := $extractvalue.i64($p618,1);
  $i623.dup := $or.i1($p618.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p622.dup := 0;
  $M.496 := $store.i64($M.496,$p622,$i623);
  $M.496.dup := $store.i1($M.496.dup,$p622,$i623.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 214, 32} true;
  assume {:verifier.code 0} true;
  $p56.dup := 0;
  $i624 := $load.i128($M.496,$p56);
  $i624.dup := 0;
  call {:cexpr "o130"} boogie_si_record_i128($i624);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  call $p625, $p625.dup := FStar_UInt128_mul_wide($i261, $i261.dup, $i297, $i297.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  $p626 := $bitcast.ref.ref($p57);
  $p626.dup := $p57.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  $p627 := $add.ref($add.ref($p626,$mul.ref(0,16)),$mul.ref(0,1));
  $p627.dup := $or.i1($or.i1($p626.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  $i628 := $extractvalue.i64($p625,0);
  $i628.dup := $or.i1($p625.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  $p627.dup := 0;
  $M.497 := $store.i64($M.497,$p627,$i628);
  $M.497.dup := $store.i1($M.497.dup,$p627,$i628.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  $p629 := $add.ref($add.ref($p626,$mul.ref(0,16)),$mul.ref(8,1));
  $p629.dup := $or.i1($or.i1($p626.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  $i630 := $extractvalue.i64($p625,1);
  $i630.dup := $or.i1($p625.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  $p629.dup := 0;
  $M.497 := $store.i64($M.497,$p629,$i630);
  $M.497.dup := $store.i1($M.497.dup,$p629,$i630.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 56} true;
  assume {:verifier.code 0} true;
  $p57.dup := 0;
  $i631 := $load.i128($M.497,$p57);
  $i631.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p58.dup := 0;
  $M.498 := $store.i128($M.498,$p58,$i528);
  $M.498.dup := $store.i1($M.498.dup,$p58,$i528.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p632 := $bitcast.ref.ref($p58);
  $p632.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p633 := $add.ref($add.ref($p632,$mul.ref(0,16)),$mul.ref(0,1));
  $p633.dup := $or.i1($or.i1($p632.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p633.dup := 0;
  $i634 := $load.i64($M.498,$p633);
  $i634.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p635 := $add.ref($add.ref($p632,$mul.ref(0,16)),$mul.ref(8,1));
  $p635.dup := $or.i1($or.i1($p632.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p635.dup := 0;
  $i636 := $load.i64($M.498,$p635);
  $i636.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p59.dup := 0;
  $M.499 := $store.i128($M.499,$p59,$i631);
  $M.499.dup := $store.i1($M.499.dup,$p59,$i631.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p637 := $bitcast.ref.ref($p59);
  $p637.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p638 := $add.ref($add.ref($p637,$mul.ref(0,16)),$mul.ref(0,1));
  $p638.dup := $or.i1($or.i1($p637.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p638.dup := 0;
  $i639 := $load.i64($M.499,$p638);
  $i639.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p640 := $add.ref($add.ref($p637,$mul.ref(0,16)),$mul.ref(8,1));
  $p640.dup := $or.i1($or.i1($p637.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p640.dup := 0;
  $i641 := $load.i64($M.499,$p640);
  $i641.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  call $p642, $p642.dup := FStar_UInt128_add($i634, $i634.dup, $i636, $i636.dup, $i639, $i639.dup, $i641, $i641.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p643 := $bitcast.ref.ref($p60);
  $p643.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p644 := $add.ref($add.ref($p643,$mul.ref(0,16)),$mul.ref(0,1));
  $p644.dup := $or.i1($or.i1($p643.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $i645 := $extractvalue.i64($p642,0);
  $i645.dup := $or.i1($p642.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p644.dup := 0;
  $M.500 := $store.i64($M.500,$p644,$i645);
  $M.500.dup := $store.i1($M.500.dup,$p644,$i645.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p646 := $add.ref($add.ref($p643,$mul.ref(0,16)),$mul.ref(8,1));
  $p646.dup := $or.i1($or.i1($p643.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $i647 := $extractvalue.i64($p642,1);
  $i647.dup := $or.i1($p642.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p646.dup := 0;
  $M.500 := $store.i64($M.500,$p646,$i647);
  $M.500.dup := $store.i1($M.500.dup,$p646,$i647.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 215, 32} true;
  assume {:verifier.code 0} true;
  $p60.dup := 0;
  $i648 := $load.i128($M.500,$p60);
  $i648.dup := 0;
  call {:cexpr "o230"} boogie_si_record_i128($i648);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  call $p649, $p649.dup := FStar_UInt128_mul_wide($i261, $i261.dup, $i265, $i265.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  $p650 := $bitcast.ref.ref($p61);
  $p650.dup := $p61.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  $p651 := $add.ref($add.ref($p650,$mul.ref(0,16)),$mul.ref(0,1));
  $p651.dup := $or.i1($or.i1($p650.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  $i652 := $extractvalue.i64($p649,0);
  $i652.dup := $or.i1($p649.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  $p651.dup := 0;
  $M.501 := $store.i64($M.501,$p651,$i652);
  $M.501.dup := $store.i1($M.501.dup,$p651,$i652.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  $p653 := $add.ref($add.ref($p650,$mul.ref(0,16)),$mul.ref(8,1));
  $p653.dup := $or.i1($or.i1($p650.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  $i654 := $extractvalue.i64($p649,1);
  $i654.dup := $or.i1($p649.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  $p653.dup := 0;
  $M.501 := $store.i64($M.501,$p653,$i654);
  $M.501.dup := $store.i1($M.501.dup,$p653,$i654.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 56} true;
  assume {:verifier.code 0} true;
  $p61.dup := 0;
  $i655 := $load.i128($M.501,$p61);
  $i655.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p62.dup := 0;
  $M.502 := $store.i128($M.502,$p62,$i552);
  $M.502.dup := $store.i1($M.502.dup,$p62,$i552.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p656 := $bitcast.ref.ref($p62);
  $p656.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p657 := $add.ref($add.ref($p656,$mul.ref(0,16)),$mul.ref(0,1));
  $p657.dup := $or.i1($or.i1($p656.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p657.dup := 0;
  $i658 := $load.i64($M.502,$p657);
  $i658.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p659 := $add.ref($add.ref($p656,$mul.ref(0,16)),$mul.ref(8,1));
  $p659.dup := $or.i1($or.i1($p656.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p659.dup := 0;
  $i660 := $load.i64($M.502,$p659);
  $i660.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p63.dup := 0;
  $M.503 := $store.i128($M.503,$p63,$i655);
  $M.503.dup := $store.i1($M.503.dup,$p63,$i655.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p661 := $bitcast.ref.ref($p63);
  $p661.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p662 := $add.ref($add.ref($p661,$mul.ref(0,16)),$mul.ref(0,1));
  $p662.dup := $or.i1($or.i1($p661.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p662.dup := 0;
  $i663 := $load.i64($M.503,$p662);
  $i663.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p664 := $add.ref($add.ref($p661,$mul.ref(0,16)),$mul.ref(8,1));
  $p664.dup := $or.i1($or.i1($p661.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p664.dup := 0;
  $i665 := $load.i64($M.503,$p664);
  $i665.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  call $p666, $p666.dup := FStar_UInt128_add($i658, $i658.dup, $i660, $i660.dup, $i663, $i663.dup, $i665, $i665.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p667 := $bitcast.ref.ref($p64);
  $p667.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p668 := $add.ref($add.ref($p667,$mul.ref(0,16)),$mul.ref(0,1));
  $p668.dup := $or.i1($or.i1($p667.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $i669 := $extractvalue.i64($p666,0);
  $i669.dup := $or.i1($p666.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p668.dup := 0;
  $M.504 := $store.i64($M.504,$p668,$i669);
  $M.504.dup := $store.i1($M.504.dup,$p668,$i669.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p670 := $add.ref($add.ref($p667,$mul.ref(0,16)),$mul.ref(8,1));
  $p670.dup := $or.i1($or.i1($p667.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $i671 := $extractvalue.i64($p666,1);
  $i671.dup := $or.i1($p666.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p670.dup := 0;
  $M.504 := $store.i64($M.504,$p670,$i671);
  $M.504.dup := $store.i1($M.504.dup,$p670,$i671.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 216, 32} true;
  assume {:verifier.code 0} true;
  $p64.dup := 0;
  $i672 := $load.i128($M.504,$p64);
  $i672.dup := 0;
  call {:cexpr "o330"} boogie_si_record_i128($i672);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  call $p673, $p673.dup := FStar_UInt128_mul_wide($i261, $i261.dup, $i267, $i267.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  $p674 := $bitcast.ref.ref($p65);
  $p674.dup := $p65.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  $p675 := $add.ref($add.ref($p674,$mul.ref(0,16)),$mul.ref(0,1));
  $p675.dup := $or.i1($or.i1($p674.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  $i676 := $extractvalue.i64($p673,0);
  $i676.dup := $or.i1($p673.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  $p675.dup := 0;
  $M.505 := $store.i64($M.505,$p675,$i676);
  $M.505.dup := $store.i1($M.505.dup,$p675,$i676.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  $p677 := $add.ref($add.ref($p674,$mul.ref(0,16)),$mul.ref(8,1));
  $p677.dup := $or.i1($or.i1($p674.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  $i678 := $extractvalue.i64($p673,1);
  $i678.dup := $or.i1($p673.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  $p677.dup := 0;
  $M.505 := $store.i64($M.505,$p677,$i678);
  $M.505.dup := $store.i1($M.505.dup,$p677,$i678.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 56} true;
  assume {:verifier.code 0} true;
  $p65.dup := 0;
  $i679 := $load.i128($M.505,$p65);
  $i679.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p66.dup := 0;
  $M.506 := $store.i128($M.506,$p66,$i576);
  $M.506.dup := $store.i1($M.506.dup,$p66,$i576.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p680 := $bitcast.ref.ref($p66);
  $p680.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p681 := $add.ref($add.ref($p680,$mul.ref(0,16)),$mul.ref(0,1));
  $p681.dup := $or.i1($or.i1($p680.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p681.dup := 0;
  $i682 := $load.i64($M.506,$p681);
  $i682.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p683 := $add.ref($add.ref($p680,$mul.ref(0,16)),$mul.ref(8,1));
  $p683.dup := $or.i1($or.i1($p680.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p683.dup := 0;
  $i684 := $load.i64($M.506,$p683);
  $i684.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p67.dup := 0;
  $M.507 := $store.i128($M.507,$p67,$i679);
  $M.507.dup := $store.i1($M.507.dup,$p67,$i679.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p685 := $bitcast.ref.ref($p67);
  $p685.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p686 := $add.ref($add.ref($p685,$mul.ref(0,16)),$mul.ref(0,1));
  $p686.dup := $or.i1($or.i1($p685.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p686.dup := 0;
  $i687 := $load.i64($M.507,$p686);
  $i687.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p688 := $add.ref($add.ref($p685,$mul.ref(0,16)),$mul.ref(8,1));
  $p688.dup := $or.i1($or.i1($p685.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p688.dup := 0;
  $i689 := $load.i64($M.507,$p688);
  $i689.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  call $p690, $p690.dup := FStar_UInt128_add($i682, $i682.dup, $i684, $i684.dup, $i687, $i687.dup, $i689, $i689.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p691 := $bitcast.ref.ref($p68);
  $p691.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p692 := $add.ref($add.ref($p691,$mul.ref(0,16)),$mul.ref(0,1));
  $p692.dup := $or.i1($or.i1($p691.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $i693 := $extractvalue.i64($p690,0);
  $i693.dup := $or.i1($p690.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p692.dup := 0;
  $M.508 := $store.i64($M.508,$p692,$i693);
  $M.508.dup := $store.i1($M.508.dup,$p692,$i693.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p694 := $add.ref($add.ref($p691,$mul.ref(0,16)),$mul.ref(8,1));
  $p694.dup := $or.i1($or.i1($p691.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $i695 := $extractvalue.i64($p690,1);
  $i695.dup := $or.i1($p690.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p694.dup := 0;
  $M.508 := $store.i64($M.508,$p694,$i695);
  $M.508.dup := $store.i1($M.508.dup,$p694,$i695.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 217, 32} true;
  assume {:verifier.code 0} true;
  $p68.dup := 0;
  $i696 := $load.i128($M.508,$p68);
  $i696.dup := 0;
  call {:cexpr "o430"} boogie_si_record_i128($i696);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  call $p697, $p697.dup := FStar_UInt128_mul_wide($i263, $i263.dup, $i294, $i294.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  $p698 := $bitcast.ref.ref($p69);
  $p698.dup := $p69.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  $p699 := $add.ref($add.ref($p698,$mul.ref(0,16)),$mul.ref(0,1));
  $p699.dup := $or.i1($or.i1($p698.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  $i700 := $extractvalue.i64($p697,0);
  $i700.dup := $or.i1($p697.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  $p699.dup := 0;
  $M.509 := $store.i64($M.509,$p699,$i700);
  $M.509.dup := $store.i1($M.509.dup,$p699,$i700.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  $p701 := $add.ref($add.ref($p698,$mul.ref(0,16)),$mul.ref(8,1));
  $p701.dup := $or.i1($or.i1($p698.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  $i702 := $extractvalue.i64($p697,1);
  $i702.dup := $or.i1($p697.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  $p701.dup := 0;
  $M.509 := $store.i64($M.509,$p701,$i702);
  $M.509.dup := $store.i1($M.509.dup,$p701,$i702.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 56} true;
  assume {:verifier.code 0} true;
  $p69.dup := 0;
  $i703 := $load.i128($M.509,$p69);
  $i703.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p70.dup := 0;
  $M.510 := $store.i128($M.510,$p70,$i600);
  $M.510.dup := $store.i1($M.510.dup,$p70,$i600.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p704 := $bitcast.ref.ref($p70);
  $p704.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p705 := $add.ref($add.ref($p704,$mul.ref(0,16)),$mul.ref(0,1));
  $p705.dup := $or.i1($or.i1($p704.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p705.dup := 0;
  $i706 := $load.i64($M.510,$p705);
  $i706.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p707 := $add.ref($add.ref($p704,$mul.ref(0,16)),$mul.ref(8,1));
  $p707.dup := $or.i1($or.i1($p704.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p707.dup := 0;
  $i708 := $load.i64($M.510,$p707);
  $i708.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p71.dup := 0;
  $M.511 := $store.i128($M.511,$p71,$i703);
  $M.511.dup := $store.i1($M.511.dup,$p71,$i703.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p709 := $bitcast.ref.ref($p71);
  $p709.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p710 := $add.ref($add.ref($p709,$mul.ref(0,16)),$mul.ref(0,1));
  $p710.dup := $or.i1($or.i1($p709.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p710.dup := 0;
  $i711 := $load.i64($M.511,$p710);
  $i711.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p712 := $add.ref($add.ref($p709,$mul.ref(0,16)),$mul.ref(8,1));
  $p712.dup := $or.i1($or.i1($p709.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p712.dup := 0;
  $i713 := $load.i64($M.511,$p712);
  $i713.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  call $p714, $p714.dup := FStar_UInt128_add($i706, $i706.dup, $i708, $i708.dup, $i711, $i711.dup, $i713, $i713.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p715 := $bitcast.ref.ref($p72);
  $p715.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p716 := $add.ref($add.ref($p715,$mul.ref(0,16)),$mul.ref(0,1));
  $p716.dup := $or.i1($or.i1($p715.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $i717 := $extractvalue.i64($p714,0);
  $i717.dup := $or.i1($p714.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p716.dup := 0;
  $M.512 := $store.i64($M.512,$p716,$i717);
  $M.512.dup := $store.i1($M.512.dup,$p716,$i717.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p718 := $add.ref($add.ref($p715,$mul.ref(0,16)),$mul.ref(8,1));
  $p718.dup := $or.i1($or.i1($p715.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $i719 := $extractvalue.i64($p714,1);
  $i719.dup := $or.i1($p714.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p718.dup := 0;
  $M.512 := $store.i64($M.512,$p718,$i719);
  $M.512.dup := $store.i1($M.512.dup,$p718,$i719.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 218, 32} true;
  assume {:verifier.code 0} true;
  $p72.dup := 0;
  $i720 := $load.i128($M.512,$p72);
  $i720.dup := 0;
  call {:cexpr "o040"} boogie_si_record_i128($i720);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  call $p721, $p721.dup := FStar_UInt128_mul_wide($i263, $i263.dup, $i295, $i295.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  $p722 := $bitcast.ref.ref($p73);
  $p722.dup := $p73.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  $p723 := $add.ref($add.ref($p722,$mul.ref(0,16)),$mul.ref(0,1));
  $p723.dup := $or.i1($or.i1($p722.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  $i724 := $extractvalue.i64($p721,0);
  $i724.dup := $or.i1($p721.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  $p723.dup := 0;
  $M.513 := $store.i64($M.513,$p723,$i724);
  $M.513.dup := $store.i1($M.513.dup,$p723,$i724.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  $p725 := $add.ref($add.ref($p722,$mul.ref(0,16)),$mul.ref(8,1));
  $p725.dup := $or.i1($or.i1($p722.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  $i726 := $extractvalue.i64($p721,1);
  $i726.dup := $or.i1($p721.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  $p725.dup := 0;
  $M.513 := $store.i64($M.513,$p725,$i726);
  $M.513.dup := $store.i1($M.513.dup,$p725,$i726.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 56} true;
  assume {:verifier.code 0} true;
  $p73.dup := 0;
  $i727 := $load.i128($M.513,$p73);
  $i727.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p74.dup := 0;
  $M.514 := $store.i128($M.514,$p74,$i624);
  $M.514.dup := $store.i1($M.514.dup,$p74,$i624.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p728 := $bitcast.ref.ref($p74);
  $p728.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p729 := $add.ref($add.ref($p728,$mul.ref(0,16)),$mul.ref(0,1));
  $p729.dup := $or.i1($or.i1($p728.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p729.dup := 0;
  $i730 := $load.i64($M.514,$p729);
  $i730.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p731 := $add.ref($add.ref($p728,$mul.ref(0,16)),$mul.ref(8,1));
  $p731.dup := $or.i1($or.i1($p728.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p731.dup := 0;
  $i732 := $load.i64($M.514,$p731);
  $i732.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p75.dup := 0;
  $M.515 := $store.i128($M.515,$p75,$i727);
  $M.515.dup := $store.i1($M.515.dup,$p75,$i727.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p733 := $bitcast.ref.ref($p75);
  $p733.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p734 := $add.ref($add.ref($p733,$mul.ref(0,16)),$mul.ref(0,1));
  $p734.dup := $or.i1($or.i1($p733.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p734.dup := 0;
  $i735 := $load.i64($M.515,$p734);
  $i735.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p736 := $add.ref($add.ref($p733,$mul.ref(0,16)),$mul.ref(8,1));
  $p736.dup := $or.i1($or.i1($p733.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p736.dup := 0;
  $i737 := $load.i64($M.515,$p736);
  $i737.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  call $p738, $p738.dup := FStar_UInt128_add($i730, $i730.dup, $i732, $i732.dup, $i735, $i735.dup, $i737, $i737.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p739 := $bitcast.ref.ref($p76);
  $p739.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p740 := $add.ref($add.ref($p739,$mul.ref(0,16)),$mul.ref(0,1));
  $p740.dup := $or.i1($or.i1($p739.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $i741 := $extractvalue.i64($p738,0);
  $i741.dup := $or.i1($p738.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p740.dup := 0;
  $M.516 := $store.i64($M.516,$p740,$i741);
  $M.516.dup := $store.i1($M.516.dup,$p740,$i741.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p742 := $add.ref($add.ref($p739,$mul.ref(0,16)),$mul.ref(8,1));
  $p742.dup := $or.i1($or.i1($p739.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $i743 := $extractvalue.i64($p738,1);
  $i743.dup := $or.i1($p738.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p742.dup := 0;
  $M.516 := $store.i64($M.516,$p742,$i743);
  $M.516.dup := $store.i1($M.516.dup,$p742,$i743.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 219, 32} true;
  assume {:verifier.code 0} true;
  $p76.dup := 0;
  $i744 := $load.i128($M.516,$p76);
  $i744.dup := 0;
  call {:cexpr "o140"} boogie_si_record_i128($i744);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  call $p745, $p745.dup := FStar_UInt128_mul_wide($i263, $i263.dup, $i296, $i296.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  $p746 := $bitcast.ref.ref($p77);
  $p746.dup := $p77.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  $p747 := $add.ref($add.ref($p746,$mul.ref(0,16)),$mul.ref(0,1));
  $p747.dup := $or.i1($or.i1($p746.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  $i748 := $extractvalue.i64($p745,0);
  $i748.dup := $or.i1($p745.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  $p747.dup := 0;
  $M.517 := $store.i64($M.517,$p747,$i748);
  $M.517.dup := $store.i1($M.517.dup,$p747,$i748.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  $p749 := $add.ref($add.ref($p746,$mul.ref(0,16)),$mul.ref(8,1));
  $p749.dup := $or.i1($or.i1($p746.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  $i750 := $extractvalue.i64($p745,1);
  $i750.dup := $or.i1($p745.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  $p749.dup := 0;
  $M.517 := $store.i64($M.517,$p749,$i750);
  $M.517.dup := $store.i1($M.517.dup,$p749,$i750.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 56} true;
  assume {:verifier.code 0} true;
  $p77.dup := 0;
  $i751 := $load.i128($M.517,$p77);
  $i751.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p78.dup := 0;
  $M.518 := $store.i128($M.518,$p78,$i648);
  $M.518.dup := $store.i1($M.518.dup,$p78,$i648.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p752 := $bitcast.ref.ref($p78);
  $p752.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p753 := $add.ref($add.ref($p752,$mul.ref(0,16)),$mul.ref(0,1));
  $p753.dup := $or.i1($or.i1($p752.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p753.dup := 0;
  $i754 := $load.i64($M.518,$p753);
  $i754.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p755 := $add.ref($add.ref($p752,$mul.ref(0,16)),$mul.ref(8,1));
  $p755.dup := $or.i1($or.i1($p752.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p755.dup := 0;
  $i756 := $load.i64($M.518,$p755);
  $i756.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p79.dup := 0;
  $M.519 := $store.i128($M.519,$p79,$i751);
  $M.519.dup := $store.i1($M.519.dup,$p79,$i751.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p757 := $bitcast.ref.ref($p79);
  $p757.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p758 := $add.ref($add.ref($p757,$mul.ref(0,16)),$mul.ref(0,1));
  $p758.dup := $or.i1($or.i1($p757.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p758.dup := 0;
  $i759 := $load.i64($M.519,$p758);
  $i759.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p760 := $add.ref($add.ref($p757,$mul.ref(0,16)),$mul.ref(8,1));
  $p760.dup := $or.i1($or.i1($p757.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p760.dup := 0;
  $i761 := $load.i64($M.519,$p760);
  $i761.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  call $p762, $p762.dup := FStar_UInt128_add($i754, $i754.dup, $i756, $i756.dup, $i759, $i759.dup, $i761, $i761.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p763 := $bitcast.ref.ref($p80);
  $p763.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p764 := $add.ref($add.ref($p763,$mul.ref(0,16)),$mul.ref(0,1));
  $p764.dup := $or.i1($or.i1($p763.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $i765 := $extractvalue.i64($p762,0);
  $i765.dup := $or.i1($p762.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p764.dup := 0;
  $M.520 := $store.i64($M.520,$p764,$i765);
  $M.520.dup := $store.i1($M.520.dup,$p764,$i765.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p766 := $add.ref($add.ref($p763,$mul.ref(0,16)),$mul.ref(8,1));
  $p766.dup := $or.i1($or.i1($p763.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $i767 := $extractvalue.i64($p762,1);
  $i767.dup := $or.i1($p762.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p766.dup := 0;
  $M.520 := $store.i64($M.520,$p766,$i767);
  $M.520.dup := $store.i1($M.520.dup,$p766,$i767.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 220, 32} true;
  assume {:verifier.code 0} true;
  $p80.dup := 0;
  $i768 := $load.i128($M.520,$p80);
  $i768.dup := 0;
  call {:cexpr "o240"} boogie_si_record_i128($i768);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  call $p769, $p769.dup := FStar_UInt128_mul_wide($i263, $i263.dup, $i297, $i297.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  $p770 := $bitcast.ref.ref($p81);
  $p770.dup := $p81.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  $p771 := $add.ref($add.ref($p770,$mul.ref(0,16)),$mul.ref(0,1));
  $p771.dup := $or.i1($or.i1($p770.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  $i772 := $extractvalue.i64($p769,0);
  $i772.dup := $or.i1($p769.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  $p771.dup := 0;
  $M.521 := $store.i64($M.521,$p771,$i772);
  $M.521.dup := $store.i1($M.521.dup,$p771,$i772.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  $p773 := $add.ref($add.ref($p770,$mul.ref(0,16)),$mul.ref(8,1));
  $p773.dup := $or.i1($or.i1($p770.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  $i774 := $extractvalue.i64($p769,1);
  $i774.dup := $or.i1($p769.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  $p773.dup := 0;
  $M.521 := $store.i64($M.521,$p773,$i774);
  $M.521.dup := $store.i1($M.521.dup,$p773,$i774.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 56} true;
  assume {:verifier.code 0} true;
  $p81.dup := 0;
  $i775 := $load.i128($M.521,$p81);
  $i775.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p82.dup := 0;
  $M.522 := $store.i128($M.522,$p82,$i672);
  $M.522.dup := $store.i1($M.522.dup,$p82,$i672.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p776 := $bitcast.ref.ref($p82);
  $p776.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p777 := $add.ref($add.ref($p776,$mul.ref(0,16)),$mul.ref(0,1));
  $p777.dup := $or.i1($or.i1($p776.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p777.dup := 0;
  $i778 := $load.i64($M.522,$p777);
  $i778.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p779 := $add.ref($add.ref($p776,$mul.ref(0,16)),$mul.ref(8,1));
  $p779.dup := $or.i1($or.i1($p776.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p779.dup := 0;
  $i780 := $load.i64($M.522,$p779);
  $i780.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p83.dup := 0;
  $M.523 := $store.i128($M.523,$p83,$i775);
  $M.523.dup := $store.i1($M.523.dup,$p83,$i775.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p781 := $bitcast.ref.ref($p83);
  $p781.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p782 := $add.ref($add.ref($p781,$mul.ref(0,16)),$mul.ref(0,1));
  $p782.dup := $or.i1($or.i1($p781.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p782.dup := 0;
  $i783 := $load.i64($M.523,$p782);
  $i783.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p784 := $add.ref($add.ref($p781,$mul.ref(0,16)),$mul.ref(8,1));
  $p784.dup := $or.i1($or.i1($p781.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p784.dup := 0;
  $i785 := $load.i64($M.523,$p784);
  $i785.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  call $p786, $p786.dup := FStar_UInt128_add($i778, $i778.dup, $i780, $i780.dup, $i783, $i783.dup, $i785, $i785.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p787 := $bitcast.ref.ref($p84);
  $p787.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p788 := $add.ref($add.ref($p787,$mul.ref(0,16)),$mul.ref(0,1));
  $p788.dup := $or.i1($or.i1($p787.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $i789 := $extractvalue.i64($p786,0);
  $i789.dup := $or.i1($p786.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p788.dup := 0;
  $M.524 := $store.i64($M.524,$p788,$i789);
  $M.524.dup := $store.i1($M.524.dup,$p788,$i789.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p790 := $add.ref($add.ref($p787,$mul.ref(0,16)),$mul.ref(8,1));
  $p790.dup := $or.i1($or.i1($p787.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $i791 := $extractvalue.i64($p786,1);
  $i791.dup := $or.i1($p786.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p790.dup := 0;
  $M.524 := $store.i64($M.524,$p790,$i791);
  $M.524.dup := $store.i1($M.524.dup,$p790,$i791.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 221, 32} true;
  assume {:verifier.code 0} true;
  $p84.dup := 0;
  $i792 := $load.i128($M.524,$p84);
  $i792.dup := 0;
  call {:cexpr "o340"} boogie_si_record_i128($i792);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  call $p793, $p793.dup := FStar_UInt128_mul_wide($i263, $i263.dup, $i265, $i265.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  $p794 := $bitcast.ref.ref($p85);
  $p794.dup := $p85.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  $p795 := $add.ref($add.ref($p794,$mul.ref(0,16)),$mul.ref(0,1));
  $p795.dup := $or.i1($or.i1($p794.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  $i796 := $extractvalue.i64($p793,0);
  $i796.dup := $or.i1($p793.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  $p795.dup := 0;
  $M.525 := $store.i64($M.525,$p795,$i796);
  $M.525.dup := $store.i1($M.525.dup,$p795,$i796.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  $p797 := $add.ref($add.ref($p794,$mul.ref(0,16)),$mul.ref(8,1));
  $p797.dup := $or.i1($or.i1($p794.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  $i798 := $extractvalue.i64($p793,1);
  $i798.dup := $or.i1($p793.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  $p797.dup := 0;
  $M.525 := $store.i64($M.525,$p797,$i798);
  $M.525.dup := $store.i1($M.525.dup,$p797,$i798.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 56} true;
  assume {:verifier.code 0} true;
  $p85.dup := 0;
  $i799 := $load.i128($M.525,$p85);
  $i799.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p86.dup := 0;
  $M.526 := $store.i128($M.526,$p86,$i696);
  $M.526.dup := $store.i1($M.526.dup,$p86,$i696.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p800 := $bitcast.ref.ref($p86);
  $p800.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p801 := $add.ref($add.ref($p800,$mul.ref(0,16)),$mul.ref(0,1));
  $p801.dup := $or.i1($or.i1($p800.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p801.dup := 0;
  $i802 := $load.i64($M.526,$p801);
  $i802.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p803 := $add.ref($add.ref($p800,$mul.ref(0,16)),$mul.ref(8,1));
  $p803.dup := $or.i1($or.i1($p800.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p803.dup := 0;
  $i804 := $load.i64($M.526,$p803);
  $i804.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p87.dup := 0;
  $M.527 := $store.i128($M.527,$p87,$i799);
  $M.527.dup := $store.i1($M.527.dup,$p87,$i799.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p805 := $bitcast.ref.ref($p87);
  $p805.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p806 := $add.ref($add.ref($p805,$mul.ref(0,16)),$mul.ref(0,1));
  $p806.dup := $or.i1($or.i1($p805.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p806.dup := 0;
  $i807 := $load.i64($M.527,$p806);
  $i807.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p808 := $add.ref($add.ref($p805,$mul.ref(0,16)),$mul.ref(8,1));
  $p808.dup := $or.i1($or.i1($p805.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p808.dup := 0;
  $i809 := $load.i64($M.527,$p808);
  $i809.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  call $p810, $p810.dup := FStar_UInt128_add($i802, $i802.dup, $i804, $i804.dup, $i807, $i807.dup, $i809, $i809.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p811 := $bitcast.ref.ref($p88);
  $p811.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p812 := $add.ref($add.ref($p811,$mul.ref(0,16)),$mul.ref(0,1));
  $p812.dup := $or.i1($or.i1($p811.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $i813 := $extractvalue.i64($p810,0);
  $i813.dup := $or.i1($p810.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p812.dup := 0;
  $M.528 := $store.i64($M.528,$p812,$i813);
  $M.528.dup := $store.i1($M.528.dup,$p812,$i813.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p814 := $add.ref($add.ref($p811,$mul.ref(0,16)),$mul.ref(8,1));
  $p814.dup := $or.i1($or.i1($p811.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $i815 := $extractvalue.i64($p810,1);
  $i815.dup := $or.i1($p810.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p814.dup := 0;
  $M.528 := $store.i64($M.528,$p814,$i815);
  $M.528.dup := $store.i1($M.528.dup,$p814,$i815.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 222, 32} true;
  assume {:verifier.code 0} true;
  $p88.dup := 0;
  $i816 := $load.i128($M.528,$p88);
  $i816.dup := 0;
  call {:cexpr "o440"} boogie_si_record_i128($i816);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  call $p817, $p817.dup := FStar_UInt128_mul_wide($i275, $i275.dup, $i285, $i285.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  $p818 := $bitcast.ref.ref($p89);
  $p818.dup := $p89.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  $p819 := $add.ref($add.ref($p818,$mul.ref(0,16)),$mul.ref(0,1));
  $p819.dup := $or.i1($or.i1($p818.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  $i820 := $extractvalue.i64($p817,0);
  $i820.dup := $or.i1($p817.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  $p819.dup := 0;
  $M.529 := $store.i64($M.529,$p819,$i820);
  $M.529.dup := $store.i1($M.529.dup,$p819,$i820.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  $p821 := $add.ref($add.ref($p818,$mul.ref(0,16)),$mul.ref(8,1));
  $p821.dup := $or.i1($or.i1($p818.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  $i822 := $extractvalue.i64($p817,1);
  $i822.dup := $or.i1($p817.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  $p821.dup := 0;
  $M.529 := $store.i64($M.529,$p821,$i822);
  $M.529.dup := $store.i1($M.529.dup,$p821,$i822.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 228, 30} true;
  assume {:verifier.code 0} true;
  $p89.dup := 0;
  $i823 := $load.i128($M.529,$p89);
  $i823.dup := 0;
  call {:cexpr "o0"} boogie_si_record_i128($i823);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  call $p824, $p824.dup := FStar_UInt128_mul_wide($i275, $i275.dup, $i287, $i287.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  $p825 := $bitcast.ref.ref($p90);
  $p825.dup := $p90.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  $p826 := $add.ref($add.ref($p825,$mul.ref(0,16)),$mul.ref(0,1));
  $p826.dup := $or.i1($or.i1($p825.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  $i827 := $extractvalue.i64($p824,0);
  $i827.dup := $or.i1($p824.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  $p826.dup := 0;
  $M.530 := $store.i64($M.530,$p826,$i827);
  $M.530.dup := $store.i1($M.530.dup,$p826,$i827.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  $p828 := $add.ref($add.ref($p825,$mul.ref(0,16)),$mul.ref(8,1));
  $p828.dup := $or.i1($or.i1($p825.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  $i829 := $extractvalue.i64($p824,1);
  $i829.dup := $or.i1($p824.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  $p828.dup := 0;
  $M.530 := $store.i64($M.530,$p828,$i829);
  $M.530.dup := $store.i1($M.530.dup,$p828,$i829.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 229, 30} true;
  assume {:verifier.code 0} true;
  $p90.dup := 0;
  $i830 := $load.i128($M.530,$p90);
  $i830.dup := 0;
  call {:cexpr "o1"} boogie_si_record_i128($i830);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  call $p831, $p831.dup := FStar_UInt128_mul_wide($i275, $i275.dup, $i289, $i289.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  $p832 := $bitcast.ref.ref($p91);
  $p832.dup := $p91.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  $p833 := $add.ref($add.ref($p832,$mul.ref(0,16)),$mul.ref(0,1));
  $p833.dup := $or.i1($or.i1($p832.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  $i834 := $extractvalue.i64($p831,0);
  $i834.dup := $or.i1($p831.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  $p833.dup := 0;
  $M.531 := $store.i64($M.531,$p833,$i834);
  $M.531.dup := $store.i1($M.531.dup,$p833,$i834.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  $p835 := $add.ref($add.ref($p832,$mul.ref(0,16)),$mul.ref(8,1));
  $p835.dup := $or.i1($or.i1($p832.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  $i836 := $extractvalue.i64($p831,1);
  $i836.dup := $or.i1($p831.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  $p835.dup := 0;
  $M.531 := $store.i64($M.531,$p835,$i836);
  $M.531.dup := $store.i1($M.531.dup,$p835,$i836.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 230, 30} true;
  assume {:verifier.code 0} true;
  $p91.dup := 0;
  $i837 := $load.i128($M.531,$p91);
  $i837.dup := 0;
  call {:cexpr "o2"} boogie_si_record_i128($i837);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  call $p838, $p838.dup := FStar_UInt128_mul_wide($i275, $i275.dup, $i291, $i291.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  $p839 := $bitcast.ref.ref($p92);
  $p839.dup := $p92.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  $p840 := $add.ref($add.ref($p839,$mul.ref(0,16)),$mul.ref(0,1));
  $p840.dup := $or.i1($or.i1($p839.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  $i841 := $extractvalue.i64($p838,0);
  $i841.dup := $or.i1($p838.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  $p840.dup := 0;
  $M.532 := $store.i64($M.532,$p840,$i841);
  $M.532.dup := $store.i1($M.532.dup,$p840,$i841.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  $p842 := $add.ref($add.ref($p839,$mul.ref(0,16)),$mul.ref(8,1));
  $p842.dup := $or.i1($or.i1($p839.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  $i843 := $extractvalue.i64($p838,1);
  $i843.dup := $or.i1($p838.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  $p842.dup := 0;
  $M.532 := $store.i64($M.532,$p842,$i843);
  $M.532.dup := $store.i1($M.532.dup,$p842,$i843.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 231, 30} true;
  assume {:verifier.code 0} true;
  $p92.dup := 0;
  $i844 := $load.i128($M.532,$p92);
  $i844.dup := 0;
  call {:cexpr "o3"} boogie_si_record_i128($i844);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  call $p845, $p845.dup := FStar_UInt128_mul_wide($i275, $i275.dup, $i293, $i293.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  $p846 := $bitcast.ref.ref($p93);
  $p846.dup := $p93.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  $p847 := $add.ref($add.ref($p846,$mul.ref(0,16)),$mul.ref(0,1));
  $p847.dup := $or.i1($or.i1($p846.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  $i848 := $extractvalue.i64($p845,0);
  $i848.dup := $or.i1($p845.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  $p847.dup := 0;
  $M.533 := $store.i64($M.533,$p847,$i848);
  $M.533.dup := $store.i1($M.533.dup,$p847,$i848.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  $p849 := $add.ref($add.ref($p846,$mul.ref(0,16)),$mul.ref(8,1));
  $p849.dup := $or.i1($or.i1($p846.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  $i850 := $extractvalue.i64($p845,1);
  $i850.dup := $or.i1($p845.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  $p849.dup := 0;
  $M.533 := $store.i64($M.533,$p849,$i850);
  $M.533.dup := $store.i1($M.533.dup,$p849,$i850.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 232, 30} true;
  assume {:verifier.code 0} true;
  $p93.dup := 0;
  $i851 := $load.i128($M.533,$p93);
  $i851.dup := 0;
  call {:cexpr "o4"} boogie_si_record_i128($i851);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  call $p852, $p852.dup := FStar_UInt128_mul_wide($i277, $i277.dup, $i301, $i301.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  $p853 := $bitcast.ref.ref($p94);
  $p853.dup := $p94.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  $p854 := $add.ref($add.ref($p853,$mul.ref(0,16)),$mul.ref(0,1));
  $p854.dup := $or.i1($or.i1($p853.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  $i855 := $extractvalue.i64($p852,0);
  $i855.dup := $or.i1($p852.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  $p854.dup := 0;
  $M.534 := $store.i64($M.534,$p854,$i855);
  $M.534.dup := $store.i1($M.534.dup,$p854,$i855.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  $p856 := $add.ref($add.ref($p853,$mul.ref(0,16)),$mul.ref(8,1));
  $p856.dup := $or.i1($or.i1($p853.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  $i857 := $extractvalue.i64($p852,1);
  $i857.dup := $or.i1($p852.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  $p856.dup := 0;
  $M.534 := $store.i64($M.534,$p856,$i857);
  $M.534.dup := $store.i1($M.534.dup,$p856,$i857.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 53} true;
  assume {:verifier.code 0} true;
  $p94.dup := 0;
  $i858 := $load.i128($M.534,$p94);
  $i858.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p95.dup := 0;
  $M.535 := $store.i128($M.535,$p95,$i823);
  $M.535.dup := $store.i1($M.535.dup,$p95,$i823.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p859 := $bitcast.ref.ref($p95);
  $p859.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p860 := $add.ref($add.ref($p859,$mul.ref(0,16)),$mul.ref(0,1));
  $p860.dup := $or.i1($or.i1($p859.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p860.dup := 0;
  $i861 := $load.i64($M.535,$p860);
  $i861.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p862 := $add.ref($add.ref($p859,$mul.ref(0,16)),$mul.ref(8,1));
  $p862.dup := $or.i1($or.i1($p859.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p862.dup := 0;
  $i863 := $load.i64($M.535,$p862);
  $i863.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p96.dup := 0;
  $M.536 := $store.i128($M.536,$p96,$i858);
  $M.536.dup := $store.i1($M.536.dup,$p96,$i858.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p864 := $bitcast.ref.ref($p96);
  $p864.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p865 := $add.ref($add.ref($p864,$mul.ref(0,16)),$mul.ref(0,1));
  $p865.dup := $or.i1($or.i1($p864.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p865.dup := 0;
  $i866 := $load.i64($M.536,$p865);
  $i866.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p867 := $add.ref($add.ref($p864,$mul.ref(0,16)),$mul.ref(8,1));
  $p867.dup := $or.i1($or.i1($p864.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p867.dup := 0;
  $i868 := $load.i64($M.536,$p867);
  $i868.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  call $p869, $p869.dup := FStar_UInt128_add($i861, $i861.dup, $i863, $i863.dup, $i866, $i866.dup, $i868, $i868.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p870 := $bitcast.ref.ref($p97);
  $p870.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p871 := $add.ref($add.ref($p870,$mul.ref(0,16)),$mul.ref(0,1));
  $p871.dup := $or.i1($or.i1($p870.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $i872 := $extractvalue.i64($p869,0);
  $i872.dup := $or.i1($p869.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p871.dup := 0;
  $M.537 := $store.i64($M.537,$p871,$i872);
  $M.537.dup := $store.i1($M.537.dup,$p871,$i872.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p873 := $add.ref($add.ref($p870,$mul.ref(0,16)),$mul.ref(8,1));
  $p873.dup := $or.i1($or.i1($p870.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $i874 := $extractvalue.i64($p869,1);
  $i874.dup := $or.i1($p869.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p873.dup := 0;
  $M.537 := $store.i64($M.537,$p873,$i874);
  $M.537.dup := $store.i1($M.537.dup,$p873,$i874.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 233, 31} true;
  assume {:verifier.code 0} true;
  $p97.dup := 0;
  $i875 := $load.i128($M.537,$p97);
  $i875.dup := 0;
  call {:cexpr "o01"} boogie_si_record_i128($i875);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  call $p876, $p876.dup := FStar_UInt128_mul_wide($i277, $i277.dup, $i285, $i285.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  $p877 := $bitcast.ref.ref($p98);
  $p877.dup := $p98.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  $p878 := $add.ref($add.ref($p877,$mul.ref(0,16)),$mul.ref(0,1));
  $p878.dup := $or.i1($or.i1($p877.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  $i879 := $extractvalue.i64($p876,0);
  $i879.dup := $or.i1($p876.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  $p878.dup := 0;
  $M.538 := $store.i64($M.538,$p878,$i879);
  $M.538.dup := $store.i1($M.538.dup,$p878,$i879.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  $p880 := $add.ref($add.ref($p877,$mul.ref(0,16)),$mul.ref(8,1));
  $p880.dup := $or.i1($or.i1($p877.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  $i881 := $extractvalue.i64($p876,1);
  $i881.dup := $or.i1($p876.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  $p880.dup := 0;
  $M.538 := $store.i64($M.538,$p880,$i881);
  $M.538.dup := $store.i1($M.538.dup,$p880,$i881.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 54} true;
  assume {:verifier.code 0} true;
  $p98.dup := 0;
  $i882 := $load.i128($M.538,$p98);
  $i882.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p99.dup := 0;
  $M.539 := $store.i128($M.539,$p99,$i830);
  $M.539.dup := $store.i1($M.539.dup,$p99,$i830.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p883 := $bitcast.ref.ref($p99);
  $p883.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p884 := $add.ref($add.ref($p883,$mul.ref(0,16)),$mul.ref(0,1));
  $p884.dup := $or.i1($or.i1($p883.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p884.dup := 0;
  $i885 := $load.i64($M.539,$p884);
  $i885.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p886 := $add.ref($add.ref($p883,$mul.ref(0,16)),$mul.ref(8,1));
  $p886.dup := $or.i1($or.i1($p883.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p886.dup := 0;
  $i887 := $load.i64($M.539,$p886);
  $i887.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p100.dup := 0;
  $M.540 := $store.i128($M.540,$p100,$i882);
  $M.540.dup := $store.i1($M.540.dup,$p100,$i882.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p888 := $bitcast.ref.ref($p100);
  $p888.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p889 := $add.ref($add.ref($p888,$mul.ref(0,16)),$mul.ref(0,1));
  $p889.dup := $or.i1($or.i1($p888.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p889.dup := 0;
  $i890 := $load.i64($M.540,$p889);
  $i890.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p891 := $add.ref($add.ref($p888,$mul.ref(0,16)),$mul.ref(8,1));
  $p891.dup := $or.i1($or.i1($p888.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p891.dup := 0;
  $i892 := $load.i64($M.540,$p891);
  $i892.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  call $p893, $p893.dup := FStar_UInt128_add($i885, $i885.dup, $i887, $i887.dup, $i890, $i890.dup, $i892, $i892.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p894 := $bitcast.ref.ref($p101);
  $p894.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p895 := $add.ref($add.ref($p894,$mul.ref(0,16)),$mul.ref(0,1));
  $p895.dup := $or.i1($or.i1($p894.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $i896 := $extractvalue.i64($p893,0);
  $i896.dup := $or.i1($p893.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p895.dup := 0;
  $M.541 := $store.i64($M.541,$p895,$i896);
  $M.541.dup := $store.i1($M.541.dup,$p895,$i896.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p897 := $add.ref($add.ref($p894,$mul.ref(0,16)),$mul.ref(8,1));
  $p897.dup := $or.i1($or.i1($p894.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $i898 := $extractvalue.i64($p893,1);
  $i898.dup := $or.i1($p893.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p897.dup := 0;
  $M.541 := $store.i64($M.541,$p897,$i898);
  $M.541.dup := $store.i1($M.541.dup,$p897,$i898.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 234, 32} true;
  assume {:verifier.code 0} true;
  $p101.dup := 0;
  $i899 := $load.i128($M.541,$p101);
  $i899.dup := 0;
  call {:cexpr "o111"} boogie_si_record_i128($i899);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  call $p900, $p900.dup := FStar_UInt128_mul_wide($i277, $i277.dup, $i287, $i287.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  $p901 := $bitcast.ref.ref($p102);
  $p901.dup := $p102.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  $p902 := $add.ref($add.ref($p901,$mul.ref(0,16)),$mul.ref(0,1));
  $p902.dup := $or.i1($or.i1($p901.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  $i903 := $extractvalue.i64($p900,0);
  $i903.dup := $or.i1($p900.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  $p902.dup := 0;
  $M.542 := $store.i64($M.542,$p902,$i903);
  $M.542.dup := $store.i1($M.542.dup,$p902,$i903.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  $p904 := $add.ref($add.ref($p901,$mul.ref(0,16)),$mul.ref(8,1));
  $p904.dup := $or.i1($or.i1($p901.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  $i905 := $extractvalue.i64($p900,1);
  $i905.dup := $or.i1($p900.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  $p904.dup := 0;
  $M.542 := $store.i64($M.542,$p904,$i905);
  $M.542.dup := $store.i1($M.542.dup,$p904,$i905.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 54} true;
  assume {:verifier.code 0} true;
  $p102.dup := 0;
  $i906 := $load.i128($M.542,$p102);
  $i906.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p103.dup := 0;
  $M.543 := $store.i128($M.543,$p103,$i837);
  $M.543.dup := $store.i1($M.543.dup,$p103,$i837.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p907 := $bitcast.ref.ref($p103);
  $p907.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p908 := $add.ref($add.ref($p907,$mul.ref(0,16)),$mul.ref(0,1));
  $p908.dup := $or.i1($or.i1($p907.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p908.dup := 0;
  $i909 := $load.i64($M.543,$p908);
  $i909.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p910 := $add.ref($add.ref($p907,$mul.ref(0,16)),$mul.ref(8,1));
  $p910.dup := $or.i1($or.i1($p907.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p910.dup := 0;
  $i911 := $load.i64($M.543,$p910);
  $i911.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p104.dup := 0;
  $M.544 := $store.i128($M.544,$p104,$i906);
  $M.544.dup := $store.i1($M.544.dup,$p104,$i906.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p912 := $bitcast.ref.ref($p104);
  $p912.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p913 := $add.ref($add.ref($p912,$mul.ref(0,16)),$mul.ref(0,1));
  $p913.dup := $or.i1($or.i1($p912.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p913.dup := 0;
  $i914 := $load.i64($M.544,$p913);
  $i914.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p915 := $add.ref($add.ref($p912,$mul.ref(0,16)),$mul.ref(8,1));
  $p915.dup := $or.i1($or.i1($p912.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p915.dup := 0;
  $i916 := $load.i64($M.544,$p915);
  $i916.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  call $p917, $p917.dup := FStar_UInt128_add($i909, $i909.dup, $i911, $i911.dup, $i914, $i914.dup, $i916, $i916.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p918 := $bitcast.ref.ref($p105);
  $p918.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p919 := $add.ref($add.ref($p918,$mul.ref(0,16)),$mul.ref(0,1));
  $p919.dup := $or.i1($or.i1($p918.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $i920 := $extractvalue.i64($p917,0);
  $i920.dup := $or.i1($p917.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p919.dup := 0;
  $M.545 := $store.i64($M.545,$p919,$i920);
  $M.545.dup := $store.i1($M.545.dup,$p919,$i920.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p921 := $add.ref($add.ref($p918,$mul.ref(0,16)),$mul.ref(8,1));
  $p921.dup := $or.i1($or.i1($p918.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $i922 := $extractvalue.i64($p917,1);
  $i922.dup := $or.i1($p917.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p921.dup := 0;
  $M.545 := $store.i64($M.545,$p921,$i922);
  $M.545.dup := $store.i1($M.545.dup,$p921,$i922.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 235, 32} true;
  assume {:verifier.code 0} true;
  $p105.dup := 0;
  $i923 := $load.i128($M.545,$p105);
  $i923.dup := 0;
  call {:cexpr "o211"} boogie_si_record_i128($i923);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  call $p924, $p924.dup := FStar_UInt128_mul_wide($i277, $i277.dup, $i289, $i289.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  $p925 := $bitcast.ref.ref($p106);
  $p925.dup := $p106.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  $p926 := $add.ref($add.ref($p925,$mul.ref(0,16)),$mul.ref(0,1));
  $p926.dup := $or.i1($or.i1($p925.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  $i927 := $extractvalue.i64($p924,0);
  $i927.dup := $or.i1($p924.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  $p926.dup := 0;
  $M.546 := $store.i64($M.546,$p926,$i927);
  $M.546.dup := $store.i1($M.546.dup,$p926,$i927.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  $p928 := $add.ref($add.ref($p925,$mul.ref(0,16)),$mul.ref(8,1));
  $p928.dup := $or.i1($or.i1($p925.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  $i929 := $extractvalue.i64($p924,1);
  $i929.dup := $or.i1($p924.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  $p928.dup := 0;
  $M.546 := $store.i64($M.546,$p928,$i929);
  $M.546.dup := $store.i1($M.546.dup,$p928,$i929.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 53} true;
  assume {:verifier.code 0} true;
  $p106.dup := 0;
  $i930 := $load.i128($M.546,$p106);
  $i930.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p107.dup := 0;
  $M.547 := $store.i128($M.547,$p107,$i844);
  $M.547.dup := $store.i1($M.547.dup,$p107,$i844.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p931 := $bitcast.ref.ref($p107);
  $p931.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p932 := $add.ref($add.ref($p931,$mul.ref(0,16)),$mul.ref(0,1));
  $p932.dup := $or.i1($or.i1($p931.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p932.dup := 0;
  $i933 := $load.i64($M.547,$p932);
  $i933.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p934 := $add.ref($add.ref($p931,$mul.ref(0,16)),$mul.ref(8,1));
  $p934.dup := $or.i1($or.i1($p931.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p934.dup := 0;
  $i935 := $load.i64($M.547,$p934);
  $i935.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p108.dup := 0;
  $M.548 := $store.i128($M.548,$p108,$i930);
  $M.548.dup := $store.i1($M.548.dup,$p108,$i930.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p936 := $bitcast.ref.ref($p108);
  $p936.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p937 := $add.ref($add.ref($p936,$mul.ref(0,16)),$mul.ref(0,1));
  $p937.dup := $or.i1($or.i1($p936.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p937.dup := 0;
  $i938 := $load.i64($M.548,$p937);
  $i938.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p939 := $add.ref($add.ref($p936,$mul.ref(0,16)),$mul.ref(8,1));
  $p939.dup := $or.i1($or.i1($p936.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p939.dup := 0;
  $i940 := $load.i64($M.548,$p939);
  $i940.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  call $p941, $p941.dup := FStar_UInt128_add($i933, $i933.dup, $i935, $i935.dup, $i938, $i938.dup, $i940, $i940.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p942 := $bitcast.ref.ref($p109);
  $p942.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p943 := $add.ref($add.ref($p942,$mul.ref(0,16)),$mul.ref(0,1));
  $p943.dup := $or.i1($or.i1($p942.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $i944 := $extractvalue.i64($p941,0);
  $i944.dup := $or.i1($p941.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p943.dup := 0;
  $M.549 := $store.i64($M.549,$p943,$i944);
  $M.549.dup := $store.i1($M.549.dup,$p943,$i944.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p945 := $add.ref($add.ref($p942,$mul.ref(0,16)),$mul.ref(8,1));
  $p945.dup := $or.i1($or.i1($p942.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $i946 := $extractvalue.i64($p941,1);
  $i946.dup := $or.i1($p941.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p945.dup := 0;
  $M.549 := $store.i64($M.549,$p945,$i946);
  $M.549.dup := $store.i1($M.549.dup,$p945,$i946.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 236, 31} true;
  assume {:verifier.code 0} true;
  $p109.dup := 0;
  $i947 := $load.i128($M.549,$p109);
  $i947.dup := 0;
  call {:cexpr "o31"} boogie_si_record_i128($i947);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  call $p948, $p948.dup := FStar_UInt128_mul_wide($i277, $i277.dup, $i291, $i291.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  $p949 := $bitcast.ref.ref($p110);
  $p949.dup := $p110.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  $p950 := $add.ref($add.ref($p949,$mul.ref(0,16)),$mul.ref(0,1));
  $p950.dup := $or.i1($or.i1($p949.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  $i951 := $extractvalue.i64($p948,0);
  $i951.dup := $or.i1($p948.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  $p950.dup := 0;
  $M.550 := $store.i64($M.550,$p950,$i951);
  $M.550.dup := $store.i1($M.550.dup,$p950,$i951.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  $p952 := $add.ref($add.ref($p949,$mul.ref(0,16)),$mul.ref(8,1));
  $p952.dup := $or.i1($or.i1($p949.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  $i953 := $extractvalue.i64($p948,1);
  $i953.dup := $or.i1($p948.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  $p952.dup := 0;
  $M.550 := $store.i64($M.550,$p952,$i953);
  $M.550.dup := $store.i1($M.550.dup,$p952,$i953.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 53} true;
  assume {:verifier.code 0} true;
  $p110.dup := 0;
  $i954 := $load.i128($M.550,$p110);
  $i954.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p111.dup := 0;
  $M.551 := $store.i128($M.551,$p111,$i851);
  $M.551.dup := $store.i1($M.551.dup,$p111,$i851.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p955 := $bitcast.ref.ref($p111);
  $p955.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p956 := $add.ref($add.ref($p955,$mul.ref(0,16)),$mul.ref(0,1));
  $p956.dup := $or.i1($or.i1($p955.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p956.dup := 0;
  $i957 := $load.i64($M.551,$p956);
  $i957.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p958 := $add.ref($add.ref($p955,$mul.ref(0,16)),$mul.ref(8,1));
  $p958.dup := $or.i1($or.i1($p955.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p958.dup := 0;
  $i959 := $load.i64($M.551,$p958);
  $i959.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p112.dup := 0;
  $M.552 := $store.i128($M.552,$p112,$i954);
  $M.552.dup := $store.i1($M.552.dup,$p112,$i954.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p960 := $bitcast.ref.ref($p112);
  $p960.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p961 := $add.ref($add.ref($p960,$mul.ref(0,16)),$mul.ref(0,1));
  $p961.dup := $or.i1($or.i1($p960.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p961.dup := 0;
  $i962 := $load.i64($M.552,$p961);
  $i962.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p963 := $add.ref($add.ref($p960,$mul.ref(0,16)),$mul.ref(8,1));
  $p963.dup := $or.i1($or.i1($p960.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p963.dup := 0;
  $i964 := $load.i64($M.552,$p963);
  $i964.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  call $p965, $p965.dup := FStar_UInt128_add($i957, $i957.dup, $i959, $i959.dup, $i962, $i962.dup, $i964, $i964.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p966 := $bitcast.ref.ref($p113);
  $p966.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p967 := $add.ref($add.ref($p966,$mul.ref(0,16)),$mul.ref(0,1));
  $p967.dup := $or.i1($or.i1($p966.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $i968 := $extractvalue.i64($p965,0);
  $i968.dup := $or.i1($p965.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p967.dup := 0;
  $M.553 := $store.i64($M.553,$p967,$i968);
  $M.553.dup := $store.i1($M.553.dup,$p967,$i968.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p969 := $add.ref($add.ref($p966,$mul.ref(0,16)),$mul.ref(8,1));
  $p969.dup := $or.i1($or.i1($p966.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $i970 := $extractvalue.i64($p965,1);
  $i970.dup := $or.i1($p965.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p969.dup := 0;
  $M.553 := $store.i64($M.553,$p969,$i970);
  $M.553.dup := $store.i1($M.553.dup,$p969,$i970.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 237, 31} true;
  assume {:verifier.code 0} true;
  $p113.dup := 0;
  $i971 := $load.i128($M.553,$p113);
  $i971.dup := 0;
  call {:cexpr "o41"} boogie_si_record_i128($i971);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  call $p972, $p972.dup := FStar_UInt128_mul_wide($i279, $i279.dup, $i300, $i300.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  $p973 := $bitcast.ref.ref($p114);
  $p973.dup := $p114.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  $p974 := $add.ref($add.ref($p973,$mul.ref(0,16)),$mul.ref(0,1));
  $p974.dup := $or.i1($or.i1($p973.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  $i975 := $extractvalue.i64($p972,0);
  $i975.dup := $or.i1($p972.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  $p974.dup := 0;
  $M.554 := $store.i64($M.554,$p974,$i975);
  $M.554.dup := $store.i1($M.554.dup,$p974,$i975.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  $p976 := $add.ref($add.ref($p973,$mul.ref(0,16)),$mul.ref(8,1));
  $p976.dup := $or.i1($or.i1($p973.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  $i977 := $extractvalue.i64($p972,1);
  $i977.dup := $or.i1($p972.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  $p976.dup := 0;
  $M.554 := $store.i64($M.554,$p976,$i977);
  $M.554.dup := $store.i1($M.554.dup,$p976,$i977.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 54} true;
  assume {:verifier.code 0} true;
  $p114.dup := 0;
  $i978 := $load.i128($M.554,$p114);
  $i978.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p115.dup := 0;
  $M.555 := $store.i128($M.555,$p115,$i875);
  $M.555.dup := $store.i1($M.555.dup,$p115,$i875.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p979 := $bitcast.ref.ref($p115);
  $p979.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p980 := $add.ref($add.ref($p979,$mul.ref(0,16)),$mul.ref(0,1));
  $p980.dup := $or.i1($or.i1($p979.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p980.dup := 0;
  $i981 := $load.i64($M.555,$p980);
  $i981.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p982 := $add.ref($add.ref($p979,$mul.ref(0,16)),$mul.ref(8,1));
  $p982.dup := $or.i1($or.i1($p979.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p982.dup := 0;
  $i983 := $load.i64($M.555,$p982);
  $i983.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p116.dup := 0;
  $M.556 := $store.i128($M.556,$p116,$i978);
  $M.556.dup := $store.i1($M.556.dup,$p116,$i978.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p984 := $bitcast.ref.ref($p116);
  $p984.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p985 := $add.ref($add.ref($p984,$mul.ref(0,16)),$mul.ref(0,1));
  $p985.dup := $or.i1($or.i1($p984.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p985.dup := 0;
  $i986 := $load.i64($M.556,$p985);
  $i986.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p987 := $add.ref($add.ref($p984,$mul.ref(0,16)),$mul.ref(8,1));
  $p987.dup := $or.i1($or.i1($p984.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p987.dup := 0;
  $i988 := $load.i64($M.556,$p987);
  $i988.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  call $p989, $p989.dup := FStar_UInt128_add($i981, $i981.dup, $i983, $i983.dup, $i986, $i986.dup, $i988, $i988.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p990 := $bitcast.ref.ref($p117);
  $p990.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p991 := $add.ref($add.ref($p990,$mul.ref(0,16)),$mul.ref(0,1));
  $p991.dup := $or.i1($or.i1($p990.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $i992 := $extractvalue.i64($p989,0);
  $i992.dup := $or.i1($p989.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p991.dup := 0;
  $M.557 := $store.i64($M.557,$p991,$i992);
  $M.557.dup := $store.i1($M.557.dup,$p991,$i992.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p993 := $add.ref($add.ref($p990,$mul.ref(0,16)),$mul.ref(8,1));
  $p993.dup := $or.i1($or.i1($p990.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $i994 := $extractvalue.i64($p989,1);
  $i994.dup := $or.i1($p989.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p993.dup := 0;
  $M.557 := $store.i64($M.557,$p993,$i994);
  $M.557.dup := $store.i1($M.557.dup,$p993,$i994.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 238, 31} true;
  assume {:verifier.code 0} true;
  $p117.dup := 0;
  $i995 := $load.i128($M.557,$p117);
  $i995.dup := 0;
  call {:cexpr "o02"} boogie_si_record_i128($i995);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  call $p996, $p996.dup := FStar_UInt128_mul_wide($i279, $i279.dup, $i301, $i301.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  $p997 := $bitcast.ref.ref($p118);
  $p997.dup := $p118.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  $p998 := $add.ref($add.ref($p997,$mul.ref(0,16)),$mul.ref(0,1));
  $p998.dup := $or.i1($or.i1($p997.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  $i999 := $extractvalue.i64($p996,0);
  $i999.dup := $or.i1($p996.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  $p998.dup := 0;
  $M.558 := $store.i64($M.558,$p998,$i999);
  $M.558.dup := $store.i1($M.558.dup,$p998,$i999.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  $p1000 := $add.ref($add.ref($p997,$mul.ref(0,16)),$mul.ref(8,1));
  $p1000.dup := $or.i1($or.i1($p997.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  $i1001 := $extractvalue.i64($p996,1);
  $i1001.dup := $or.i1($p996.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  $p1000.dup := 0;
  $M.558 := $store.i64($M.558,$p1000,$i1001);
  $M.558.dup := $store.i1($M.558.dup,$p1000,$i1001.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 56} true;
  assume {:verifier.code 0} true;
  $p118.dup := 0;
  $i1002 := $load.i128($M.558,$p118);
  $i1002.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p119.dup := 0;
  $M.559 := $store.i128($M.559,$p119,$i899);
  $M.559.dup := $store.i1($M.559.dup,$p119,$i899.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1003 := $bitcast.ref.ref($p119);
  $p1003.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1004 := $add.ref($add.ref($p1003,$mul.ref(0,16)),$mul.ref(0,1));
  $p1004.dup := $or.i1($or.i1($p1003.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1004.dup := 0;
  $i1005 := $load.i64($M.559,$p1004);
  $i1005.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1006 := $add.ref($add.ref($p1003,$mul.ref(0,16)),$mul.ref(8,1));
  $p1006.dup := $or.i1($or.i1($p1003.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1006.dup := 0;
  $i1007 := $load.i64($M.559,$p1006);
  $i1007.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p120.dup := 0;
  $M.560 := $store.i128($M.560,$p120,$i1002);
  $M.560.dup := $store.i1($M.560.dup,$p120,$i1002.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1008 := $bitcast.ref.ref($p120);
  $p1008.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1009 := $add.ref($add.ref($p1008,$mul.ref(0,16)),$mul.ref(0,1));
  $p1009.dup := $or.i1($or.i1($p1008.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1009.dup := 0;
  $i1010 := $load.i64($M.560,$p1009);
  $i1010.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1011 := $add.ref($add.ref($p1008,$mul.ref(0,16)),$mul.ref(8,1));
  $p1011.dup := $or.i1($or.i1($p1008.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1011.dup := 0;
  $i1012 := $load.i64($M.560,$p1011);
  $i1012.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  call $p1013, $p1013.dup := FStar_UInt128_add($i1005, $i1005.dup, $i1007, $i1007.dup, $i1010, $i1010.dup, $i1012, $i1012.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1014 := $bitcast.ref.ref($p121);
  $p1014.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1015 := $add.ref($add.ref($p1014,$mul.ref(0,16)),$mul.ref(0,1));
  $p1015.dup := $or.i1($or.i1($p1014.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $i1016 := $extractvalue.i64($p1013,0);
  $i1016.dup := $or.i1($p1013.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1015.dup := 0;
  $M.561 := $store.i64($M.561,$p1015,$i1016);
  $M.561.dup := $store.i1($M.561.dup,$p1015,$i1016.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1017 := $add.ref($add.ref($p1014,$mul.ref(0,16)),$mul.ref(8,1));
  $p1017.dup := $or.i1($or.i1($p1014.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $i1018 := $extractvalue.i64($p1013,1);
  $i1018.dup := $or.i1($p1013.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p1017.dup := 0;
  $M.561 := $store.i64($M.561,$p1017,$i1018);
  $M.561.dup := $store.i1($M.561.dup,$p1017,$i1018.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 239, 32} true;
  assume {:verifier.code 0} true;
  $p121.dup := 0;
  $i1019 := $load.i128($M.561,$p121);
  $i1019.dup := 0;
  call {:cexpr "o121"} boogie_si_record_i128($i1019);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  call $p1020, $p1020.dup := FStar_UInt128_mul_wide($i279, $i279.dup, $i285, $i285.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  $p1021 := $bitcast.ref.ref($p122);
  $p1021.dup := $p122.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  $p1022 := $add.ref($add.ref($p1021,$mul.ref(0,16)),$mul.ref(0,1));
  $p1022.dup := $or.i1($or.i1($p1021.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  $i1023 := $extractvalue.i64($p1020,0);
  $i1023.dup := $or.i1($p1020.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  $p1022.dup := 0;
  $M.562 := $store.i64($M.562,$p1022,$i1023);
  $M.562.dup := $store.i1($M.562.dup,$p1022,$i1023.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  $p1024 := $add.ref($add.ref($p1021,$mul.ref(0,16)),$mul.ref(8,1));
  $p1024.dup := $or.i1($or.i1($p1021.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  $i1025 := $extractvalue.i64($p1020,1);
  $i1025.dup := $or.i1($p1020.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  $p1024.dup := 0;
  $M.562 := $store.i64($M.562,$p1024,$i1025);
  $M.562.dup := $store.i1($M.562.dup,$p1024,$i1025.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 56} true;
  assume {:verifier.code 0} true;
  $p122.dup := 0;
  $i1026 := $load.i128($M.562,$p122);
  $i1026.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p123.dup := 0;
  $M.563 := $store.i128($M.563,$p123,$i923);
  $M.563.dup := $store.i1($M.563.dup,$p123,$i923.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1027 := $bitcast.ref.ref($p123);
  $p1027.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1028 := $add.ref($add.ref($p1027,$mul.ref(0,16)),$mul.ref(0,1));
  $p1028.dup := $or.i1($or.i1($p1027.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1028.dup := 0;
  $i1029 := $load.i64($M.563,$p1028);
  $i1029.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1030 := $add.ref($add.ref($p1027,$mul.ref(0,16)),$mul.ref(8,1));
  $p1030.dup := $or.i1($or.i1($p1027.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1030.dup := 0;
  $i1031 := $load.i64($M.563,$p1030);
  $i1031.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p124.dup := 0;
  $M.564 := $store.i128($M.564,$p124,$i1026);
  $M.564.dup := $store.i1($M.564.dup,$p124,$i1026.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1032 := $bitcast.ref.ref($p124);
  $p1032.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1033 := $add.ref($add.ref($p1032,$mul.ref(0,16)),$mul.ref(0,1));
  $p1033.dup := $or.i1($or.i1($p1032.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1033.dup := 0;
  $i1034 := $load.i64($M.564,$p1033);
  $i1034.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1035 := $add.ref($add.ref($p1032,$mul.ref(0,16)),$mul.ref(8,1));
  $p1035.dup := $or.i1($or.i1($p1032.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1035.dup := 0;
  $i1036 := $load.i64($M.564,$p1035);
  $i1036.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  call $p1037, $p1037.dup := FStar_UInt128_add($i1029, $i1029.dup, $i1031, $i1031.dup, $i1034, $i1034.dup, $i1036, $i1036.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1038 := $bitcast.ref.ref($p125);
  $p1038.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1039 := $add.ref($add.ref($p1038,$mul.ref(0,16)),$mul.ref(0,1));
  $p1039.dup := $or.i1($or.i1($p1038.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $i1040 := $extractvalue.i64($p1037,0);
  $i1040.dup := $or.i1($p1037.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1039.dup := 0;
  $M.565 := $store.i64($M.565,$p1039,$i1040);
  $M.565.dup := $store.i1($M.565.dup,$p1039,$i1040.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1041 := $add.ref($add.ref($p1038,$mul.ref(0,16)),$mul.ref(8,1));
  $p1041.dup := $or.i1($or.i1($p1038.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $i1042 := $extractvalue.i64($p1037,1);
  $i1042.dup := $or.i1($p1037.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p1041.dup := 0;
  $M.565 := $store.i64($M.565,$p1041,$i1042);
  $M.565.dup := $store.i1($M.565.dup,$p1041,$i1042.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 240, 32} true;
  assume {:verifier.code 0} true;
  $p125.dup := 0;
  $i1043 := $load.i128($M.565,$p125);
  $i1043.dup := 0;
  call {:cexpr "o221"} boogie_si_record_i128($i1043);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  call $p1044, $p1044.dup := FStar_UInt128_mul_wide($i279, $i279.dup, $i287, $i287.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  $p1045 := $bitcast.ref.ref($p126);
  $p1045.dup := $p126.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  $p1046 := $add.ref($add.ref($p1045,$mul.ref(0,16)),$mul.ref(0,1));
  $p1046.dup := $or.i1($or.i1($p1045.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  $i1047 := $extractvalue.i64($p1044,0);
  $i1047.dup := $or.i1($p1044.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  $p1046.dup := 0;
  $M.566 := $store.i64($M.566,$p1046,$i1047);
  $M.566.dup := $store.i1($M.566.dup,$p1046,$i1047.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  $p1048 := $add.ref($add.ref($p1045,$mul.ref(0,16)),$mul.ref(8,1));
  $p1048.dup := $or.i1($or.i1($p1045.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  $i1049 := $extractvalue.i64($p1044,1);
  $i1049.dup := $or.i1($p1044.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  $p1048.dup := 0;
  $M.566 := $store.i64($M.566,$p1048,$i1049);
  $M.566.dup := $store.i1($M.566.dup,$p1048,$i1049.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 54} true;
  assume {:verifier.code 0} true;
  $p126.dup := 0;
  $i1050 := $load.i128($M.566,$p126);
  $i1050.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p127.dup := 0;
  $M.567 := $store.i128($M.567,$p127,$i947);
  $M.567.dup := $store.i1($M.567.dup,$p127,$i947.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1051 := $bitcast.ref.ref($p127);
  $p1051.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1052 := $add.ref($add.ref($p1051,$mul.ref(0,16)),$mul.ref(0,1));
  $p1052.dup := $or.i1($or.i1($p1051.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1052.dup := 0;
  $i1053 := $load.i64($M.567,$p1052);
  $i1053.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1054 := $add.ref($add.ref($p1051,$mul.ref(0,16)),$mul.ref(8,1));
  $p1054.dup := $or.i1($or.i1($p1051.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1054.dup := 0;
  $i1055 := $load.i64($M.567,$p1054);
  $i1055.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p128.dup := 0;
  $M.568 := $store.i128($M.568,$p128,$i1050);
  $M.568.dup := $store.i1($M.568.dup,$p128,$i1050.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1056 := $bitcast.ref.ref($p128);
  $p1056.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1057 := $add.ref($add.ref($p1056,$mul.ref(0,16)),$mul.ref(0,1));
  $p1057.dup := $or.i1($or.i1($p1056.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1057.dup := 0;
  $i1058 := $load.i64($M.568,$p1057);
  $i1058.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1059 := $add.ref($add.ref($p1056,$mul.ref(0,16)),$mul.ref(8,1));
  $p1059.dup := $or.i1($or.i1($p1056.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1059.dup := 0;
  $i1060 := $load.i64($M.568,$p1059);
  $i1060.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  call $p1061, $p1061.dup := FStar_UInt128_add($i1053, $i1053.dup, $i1055, $i1055.dup, $i1058, $i1058.dup, $i1060, $i1060.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1062 := $bitcast.ref.ref($p129);
  $p1062.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1063 := $add.ref($add.ref($p1062,$mul.ref(0,16)),$mul.ref(0,1));
  $p1063.dup := $or.i1($or.i1($p1062.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $i1064 := $extractvalue.i64($p1061,0);
  $i1064.dup := $or.i1($p1061.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1063.dup := 0;
  $M.569 := $store.i64($M.569,$p1063,$i1064);
  $M.569.dup := $store.i1($M.569.dup,$p1063,$i1064.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1065 := $add.ref($add.ref($p1062,$mul.ref(0,16)),$mul.ref(8,1));
  $p1065.dup := $or.i1($or.i1($p1062.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $i1066 := $extractvalue.i64($p1061,1);
  $i1066.dup := $or.i1($p1061.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p1065.dup := 0;
  $M.569 := $store.i64($M.569,$p1065,$i1066);
  $M.569.dup := $store.i1($M.569.dup,$p1065,$i1066.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 241, 31} true;
  assume {:verifier.code 0} true;
  $p129.dup := 0;
  $i1067 := $load.i128($M.569,$p129);
  $i1067.dup := 0;
  call {:cexpr "o32"} boogie_si_record_i128($i1067);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  call $p1068, $p1068.dup := FStar_UInt128_mul_wide($i279, $i279.dup, $i289, $i289.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  $p1069 := $bitcast.ref.ref($p130);
  $p1069.dup := $p130.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  $p1070 := $add.ref($add.ref($p1069,$mul.ref(0,16)),$mul.ref(0,1));
  $p1070.dup := $or.i1($or.i1($p1069.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  $i1071 := $extractvalue.i64($p1068,0);
  $i1071.dup := $or.i1($p1068.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  $p1070.dup := 0;
  $M.570 := $store.i64($M.570,$p1070,$i1071);
  $M.570.dup := $store.i1($M.570.dup,$p1070,$i1071.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  $p1072 := $add.ref($add.ref($p1069,$mul.ref(0,16)),$mul.ref(8,1));
  $p1072.dup := $or.i1($or.i1($p1069.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  $i1073 := $extractvalue.i64($p1068,1);
  $i1073.dup := $or.i1($p1068.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  $p1072.dup := 0;
  $M.570 := $store.i64($M.570,$p1072,$i1073);
  $M.570.dup := $store.i1($M.570.dup,$p1072,$i1073.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 54} true;
  assume {:verifier.code 0} true;
  $p130.dup := 0;
  $i1074 := $load.i128($M.570,$p130);
  $i1074.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p131.dup := 0;
  $M.571 := $store.i128($M.571,$p131,$i971);
  $M.571.dup := $store.i1($M.571.dup,$p131,$i971.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1075 := $bitcast.ref.ref($p131);
  $p1075.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1076 := $add.ref($add.ref($p1075,$mul.ref(0,16)),$mul.ref(0,1));
  $p1076.dup := $or.i1($or.i1($p1075.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1076.dup := 0;
  $i1077 := $load.i64($M.571,$p1076);
  $i1077.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1078 := $add.ref($add.ref($p1075,$mul.ref(0,16)),$mul.ref(8,1));
  $p1078.dup := $or.i1($or.i1($p1075.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1078.dup := 0;
  $i1079 := $load.i64($M.571,$p1078);
  $i1079.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p132.dup := 0;
  $M.572 := $store.i128($M.572,$p132,$i1074);
  $M.572.dup := $store.i1($M.572.dup,$p132,$i1074.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1080 := $bitcast.ref.ref($p132);
  $p1080.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1081 := $add.ref($add.ref($p1080,$mul.ref(0,16)),$mul.ref(0,1));
  $p1081.dup := $or.i1($or.i1($p1080.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1081.dup := 0;
  $i1082 := $load.i64($M.572,$p1081);
  $i1082.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1083 := $add.ref($add.ref($p1080,$mul.ref(0,16)),$mul.ref(8,1));
  $p1083.dup := $or.i1($or.i1($p1080.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1083.dup := 0;
  $i1084 := $load.i64($M.572,$p1083);
  $i1084.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  call $p1085, $p1085.dup := FStar_UInt128_add($i1077, $i1077.dup, $i1079, $i1079.dup, $i1082, $i1082.dup, $i1084, $i1084.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1086 := $bitcast.ref.ref($p133);
  $p1086.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1087 := $add.ref($add.ref($p1086,$mul.ref(0,16)),$mul.ref(0,1));
  $p1087.dup := $or.i1($or.i1($p1086.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $i1088 := $extractvalue.i64($p1085,0);
  $i1088.dup := $or.i1($p1085.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1087.dup := 0;
  $M.573 := $store.i64($M.573,$p1087,$i1088);
  $M.573.dup := $store.i1($M.573.dup,$p1087,$i1088.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1089 := $add.ref($add.ref($p1086,$mul.ref(0,16)),$mul.ref(8,1));
  $p1089.dup := $or.i1($or.i1($p1086.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $i1090 := $extractvalue.i64($p1085,1);
  $i1090.dup := $or.i1($p1085.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p1089.dup := 0;
  $M.573 := $store.i64($M.573,$p1089,$i1090);
  $M.573.dup := $store.i1($M.573.dup,$p1089,$i1090.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 242, 31} true;
  assume {:verifier.code 0} true;
  $p133.dup := 0;
  $i1091 := $load.i128($M.573,$p133);
  $i1091.dup := 0;
  call {:cexpr "o42"} boogie_si_record_i128($i1091);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  call $p1092, $p1092.dup := FStar_UInt128_mul_wide($i281, $i281.dup, $i299, $i299.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  $p1093 := $bitcast.ref.ref($p134);
  $p1093.dup := $p134.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  $p1094 := $add.ref($add.ref($p1093,$mul.ref(0,16)),$mul.ref(0,1));
  $p1094.dup := $or.i1($or.i1($p1093.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  $i1095 := $extractvalue.i64($p1092,0);
  $i1095.dup := $or.i1($p1092.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  $p1094.dup := 0;
  $M.574 := $store.i64($M.574,$p1094,$i1095);
  $M.574.dup := $store.i1($M.574.dup,$p1094,$i1095.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  $p1096 := $add.ref($add.ref($p1093,$mul.ref(0,16)),$mul.ref(8,1));
  $p1096.dup := $or.i1($or.i1($p1093.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  $i1097 := $extractvalue.i64($p1092,1);
  $i1097.dup := $or.i1($p1092.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  $p1096.dup := 0;
  $M.574 := $store.i64($M.574,$p1096,$i1097);
  $M.574.dup := $store.i1($M.574.dup,$p1096,$i1097.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 54} true;
  assume {:verifier.code 0} true;
  $p134.dup := 0;
  $i1098 := $load.i128($M.574,$p134);
  $i1098.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p135.dup := 0;
  $M.575 := $store.i128($M.575,$p135,$i995);
  $M.575.dup := $store.i1($M.575.dup,$p135,$i995.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1099 := $bitcast.ref.ref($p135);
  $p1099.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1100 := $add.ref($add.ref($p1099,$mul.ref(0,16)),$mul.ref(0,1));
  $p1100.dup := $or.i1($or.i1($p1099.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1100.dup := 0;
  $i1101 := $load.i64($M.575,$p1100);
  $i1101.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1102 := $add.ref($add.ref($p1099,$mul.ref(0,16)),$mul.ref(8,1));
  $p1102.dup := $or.i1($or.i1($p1099.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1102.dup := 0;
  $i1103 := $load.i64($M.575,$p1102);
  $i1103.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p136.dup := 0;
  $M.576 := $store.i128($M.576,$p136,$i1098);
  $M.576.dup := $store.i1($M.576.dup,$p136,$i1098.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1104 := $bitcast.ref.ref($p136);
  $p1104.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1105 := $add.ref($add.ref($p1104,$mul.ref(0,16)),$mul.ref(0,1));
  $p1105.dup := $or.i1($or.i1($p1104.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1105.dup := 0;
  $i1106 := $load.i64($M.576,$p1105);
  $i1106.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1107 := $add.ref($add.ref($p1104,$mul.ref(0,16)),$mul.ref(8,1));
  $p1107.dup := $or.i1($or.i1($p1104.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1107.dup := 0;
  $i1108 := $load.i64($M.576,$p1107);
  $i1108.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  call $p1109, $p1109.dup := FStar_UInt128_add($i1101, $i1101.dup, $i1103, $i1103.dup, $i1106, $i1106.dup, $i1108, $i1108.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1110 := $bitcast.ref.ref($p137);
  $p1110.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1111 := $add.ref($add.ref($p1110,$mul.ref(0,16)),$mul.ref(0,1));
  $p1111.dup := $or.i1($or.i1($p1110.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $i1112 := $extractvalue.i64($p1109,0);
  $i1112.dup := $or.i1($p1109.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1111.dup := 0;
  $M.577 := $store.i64($M.577,$p1111,$i1112);
  $M.577.dup := $store.i1($M.577.dup,$p1111,$i1112.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1113 := $add.ref($add.ref($p1110,$mul.ref(0,16)),$mul.ref(8,1));
  $p1113.dup := $or.i1($or.i1($p1110.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $i1114 := $extractvalue.i64($p1109,1);
  $i1114.dup := $or.i1($p1109.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p1113.dup := 0;
  $M.577 := $store.i64($M.577,$p1113,$i1114);
  $M.577.dup := $store.i1($M.577.dup,$p1113,$i1114.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 243, 31} true;
  assume {:verifier.code 0} true;
  $p137.dup := 0;
  $i1115 := $load.i128($M.577,$p137);
  $i1115.dup := 0;
  call {:cexpr "o03"} boogie_si_record_i128($i1115);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  call $p1116, $p1116.dup := FStar_UInt128_mul_wide($i281, $i281.dup, $i300, $i300.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  $p1117 := $bitcast.ref.ref($p138);
  $p1117.dup := $p138.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  $p1118 := $add.ref($add.ref($p1117,$mul.ref(0,16)),$mul.ref(0,1));
  $p1118.dup := $or.i1($or.i1($p1117.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  $i1119 := $extractvalue.i64($p1116,0);
  $i1119.dup := $or.i1($p1116.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  $p1118.dup := 0;
  $M.578 := $store.i64($M.578,$p1118,$i1119);
  $M.578.dup := $store.i1($M.578.dup,$p1118,$i1119.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  $p1120 := $add.ref($add.ref($p1117,$mul.ref(0,16)),$mul.ref(8,1));
  $p1120.dup := $or.i1($or.i1($p1117.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  $i1121 := $extractvalue.i64($p1116,1);
  $i1121.dup := $or.i1($p1116.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  $p1120.dup := 0;
  $M.578 := $store.i64($M.578,$p1120,$i1121);
  $M.578.dup := $store.i1($M.578.dup,$p1120,$i1121.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 56} true;
  assume {:verifier.code 0} true;
  $p138.dup := 0;
  $i1122 := $load.i128($M.578,$p138);
  $i1122.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p139.dup := 0;
  $M.579 := $store.i128($M.579,$p139,$i1019);
  $M.579.dup := $store.i1($M.579.dup,$p139,$i1019.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1123 := $bitcast.ref.ref($p139);
  $p1123.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1124 := $add.ref($add.ref($p1123,$mul.ref(0,16)),$mul.ref(0,1));
  $p1124.dup := $or.i1($or.i1($p1123.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1124.dup := 0;
  $i1125 := $load.i64($M.579,$p1124);
  $i1125.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1126 := $add.ref($add.ref($p1123,$mul.ref(0,16)),$mul.ref(8,1));
  $p1126.dup := $or.i1($or.i1($p1123.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1126.dup := 0;
  $i1127 := $load.i64($M.579,$p1126);
  $i1127.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p140.dup := 0;
  $M.580 := $store.i128($M.580,$p140,$i1122);
  $M.580.dup := $store.i1($M.580.dup,$p140,$i1122.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1128 := $bitcast.ref.ref($p140);
  $p1128.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1129 := $add.ref($add.ref($p1128,$mul.ref(0,16)),$mul.ref(0,1));
  $p1129.dup := $or.i1($or.i1($p1128.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1129.dup := 0;
  $i1130 := $load.i64($M.580,$p1129);
  $i1130.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1131 := $add.ref($add.ref($p1128,$mul.ref(0,16)),$mul.ref(8,1));
  $p1131.dup := $or.i1($or.i1($p1128.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1131.dup := 0;
  $i1132 := $load.i64($M.580,$p1131);
  $i1132.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  call $p1133, $p1133.dup := FStar_UInt128_add($i1125, $i1125.dup, $i1127, $i1127.dup, $i1130, $i1130.dup, $i1132, $i1132.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1134 := $bitcast.ref.ref($p141);
  $p1134.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1135 := $add.ref($add.ref($p1134,$mul.ref(0,16)),$mul.ref(0,1));
  $p1135.dup := $or.i1($or.i1($p1134.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $i1136 := $extractvalue.i64($p1133,0);
  $i1136.dup := $or.i1($p1133.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1135.dup := 0;
  $M.581 := $store.i64($M.581,$p1135,$i1136);
  $M.581.dup := $store.i1($M.581.dup,$p1135,$i1136.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1137 := $add.ref($add.ref($p1134,$mul.ref(0,16)),$mul.ref(8,1));
  $p1137.dup := $or.i1($or.i1($p1134.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $i1138 := $extractvalue.i64($p1133,1);
  $i1138.dup := $or.i1($p1133.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p1137.dup := 0;
  $M.581 := $store.i64($M.581,$p1137,$i1138);
  $M.581.dup := $store.i1($M.581.dup,$p1137,$i1138.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 244, 32} true;
  assume {:verifier.code 0} true;
  $p141.dup := 0;
  $i1139 := $load.i128($M.581,$p141);
  $i1139.dup := 0;
  call {:cexpr "o131"} boogie_si_record_i128($i1139);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  call $p1140, $p1140.dup := FStar_UInt128_mul_wide($i281, $i281.dup, $i301, $i301.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  $p1141 := $bitcast.ref.ref($p142);
  $p1141.dup := $p142.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  $p1142 := $add.ref($add.ref($p1141,$mul.ref(0,16)),$mul.ref(0,1));
  $p1142.dup := $or.i1($or.i1($p1141.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  $i1143 := $extractvalue.i64($p1140,0);
  $i1143.dup := $or.i1($p1140.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  $p1142.dup := 0;
  $M.582 := $store.i64($M.582,$p1142,$i1143);
  $M.582.dup := $store.i1($M.582.dup,$p1142,$i1143.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  $p1144 := $add.ref($add.ref($p1141,$mul.ref(0,16)),$mul.ref(8,1));
  $p1144.dup := $or.i1($or.i1($p1141.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  $i1145 := $extractvalue.i64($p1140,1);
  $i1145.dup := $or.i1($p1140.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  $p1144.dup := 0;
  $M.582 := $store.i64($M.582,$p1144,$i1145);
  $M.582.dup := $store.i1($M.582.dup,$p1144,$i1145.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 56} true;
  assume {:verifier.code 0} true;
  $p142.dup := 0;
  $i1146 := $load.i128($M.582,$p142);
  $i1146.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p143.dup := 0;
  $M.583 := $store.i128($M.583,$p143,$i1043);
  $M.583.dup := $store.i1($M.583.dup,$p143,$i1043.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1147 := $bitcast.ref.ref($p143);
  $p1147.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1148 := $add.ref($add.ref($p1147,$mul.ref(0,16)),$mul.ref(0,1));
  $p1148.dup := $or.i1($or.i1($p1147.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1148.dup := 0;
  $i1149 := $load.i64($M.583,$p1148);
  $i1149.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1150 := $add.ref($add.ref($p1147,$mul.ref(0,16)),$mul.ref(8,1));
  $p1150.dup := $or.i1($or.i1($p1147.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1150.dup := 0;
  $i1151 := $load.i64($M.583,$p1150);
  $i1151.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p144.dup := 0;
  $M.584 := $store.i128($M.584,$p144,$i1146);
  $M.584.dup := $store.i1($M.584.dup,$p144,$i1146.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1152 := $bitcast.ref.ref($p144);
  $p1152.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1153 := $add.ref($add.ref($p1152,$mul.ref(0,16)),$mul.ref(0,1));
  $p1153.dup := $or.i1($or.i1($p1152.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1153.dup := 0;
  $i1154 := $load.i64($M.584,$p1153);
  $i1154.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1155 := $add.ref($add.ref($p1152,$mul.ref(0,16)),$mul.ref(8,1));
  $p1155.dup := $or.i1($or.i1($p1152.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1155.dup := 0;
  $i1156 := $load.i64($M.584,$p1155);
  $i1156.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  call $p1157, $p1157.dup := FStar_UInt128_add($i1149, $i1149.dup, $i1151, $i1151.dup, $i1154, $i1154.dup, $i1156, $i1156.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1158 := $bitcast.ref.ref($p145);
  $p1158.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1159 := $add.ref($add.ref($p1158,$mul.ref(0,16)),$mul.ref(0,1));
  $p1159.dup := $or.i1($or.i1($p1158.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $i1160 := $extractvalue.i64($p1157,0);
  $i1160.dup := $or.i1($p1157.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1159.dup := 0;
  $M.585 := $store.i64($M.585,$p1159,$i1160);
  $M.585.dup := $store.i1($M.585.dup,$p1159,$i1160.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1161 := $add.ref($add.ref($p1158,$mul.ref(0,16)),$mul.ref(8,1));
  $p1161.dup := $or.i1($or.i1($p1158.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $i1162 := $extractvalue.i64($p1157,1);
  $i1162.dup := $or.i1($p1157.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p1161.dup := 0;
  $M.585 := $store.i64($M.585,$p1161,$i1162);
  $M.585.dup := $store.i1($M.585.dup,$p1161,$i1162.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 245, 32} true;
  assume {:verifier.code 0} true;
  $p145.dup := 0;
  $i1163 := $load.i128($M.585,$p145);
  $i1163.dup := 0;
  call {:cexpr "o231"} boogie_si_record_i128($i1163);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  call $p1164, $p1164.dup := FStar_UInt128_mul_wide($i281, $i281.dup, $i285, $i285.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  $p1165 := $bitcast.ref.ref($p146);
  $p1165.dup := $p146.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  $p1166 := $add.ref($add.ref($p1165,$mul.ref(0,16)),$mul.ref(0,1));
  $p1166.dup := $or.i1($or.i1($p1165.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  $i1167 := $extractvalue.i64($p1164,0);
  $i1167.dup := $or.i1($p1164.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  $p1166.dup := 0;
  $M.586 := $store.i64($M.586,$p1166,$i1167);
  $M.586.dup := $store.i1($M.586.dup,$p1166,$i1167.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  $p1168 := $add.ref($add.ref($p1165,$mul.ref(0,16)),$mul.ref(8,1));
  $p1168.dup := $or.i1($or.i1($p1165.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  $i1169 := $extractvalue.i64($p1164,1);
  $i1169.dup := $or.i1($p1164.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  $p1168.dup := 0;
  $M.586 := $store.i64($M.586,$p1168,$i1169);
  $M.586.dup := $store.i1($M.586.dup,$p1168,$i1169.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 54} true;
  assume {:verifier.code 0} true;
  $p146.dup := 0;
  $i1170 := $load.i128($M.586,$p146);
  $i1170.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p147.dup := 0;
  $M.587 := $store.i128($M.587,$p147,$i1067);
  $M.587.dup := $store.i1($M.587.dup,$p147,$i1067.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1171 := $bitcast.ref.ref($p147);
  $p1171.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1172 := $add.ref($add.ref($p1171,$mul.ref(0,16)),$mul.ref(0,1));
  $p1172.dup := $or.i1($or.i1($p1171.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1172.dup := 0;
  $i1173 := $load.i64($M.587,$p1172);
  $i1173.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1174 := $add.ref($add.ref($p1171,$mul.ref(0,16)),$mul.ref(8,1));
  $p1174.dup := $or.i1($or.i1($p1171.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1174.dup := 0;
  $i1175 := $load.i64($M.587,$p1174);
  $i1175.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p148.dup := 0;
  $M.588 := $store.i128($M.588,$p148,$i1170);
  $M.588.dup := $store.i1($M.588.dup,$p148,$i1170.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1176 := $bitcast.ref.ref($p148);
  $p1176.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1177 := $add.ref($add.ref($p1176,$mul.ref(0,16)),$mul.ref(0,1));
  $p1177.dup := $or.i1($or.i1($p1176.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1177.dup := 0;
  $i1178 := $load.i64($M.588,$p1177);
  $i1178.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1179 := $add.ref($add.ref($p1176,$mul.ref(0,16)),$mul.ref(8,1));
  $p1179.dup := $or.i1($or.i1($p1176.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1179.dup := 0;
  $i1180 := $load.i64($M.588,$p1179);
  $i1180.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  call $p1181, $p1181.dup := FStar_UInt128_add($i1173, $i1173.dup, $i1175, $i1175.dup, $i1178, $i1178.dup, $i1180, $i1180.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1182 := $bitcast.ref.ref($p149);
  $p1182.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1183 := $add.ref($add.ref($p1182,$mul.ref(0,16)),$mul.ref(0,1));
  $p1183.dup := $or.i1($or.i1($p1182.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $i1184 := $extractvalue.i64($p1181,0);
  $i1184.dup := $or.i1($p1181.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1183.dup := 0;
  $M.589 := $store.i64($M.589,$p1183,$i1184);
  $M.589.dup := $store.i1($M.589.dup,$p1183,$i1184.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1185 := $add.ref($add.ref($p1182,$mul.ref(0,16)),$mul.ref(8,1));
  $p1185.dup := $or.i1($or.i1($p1182.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $i1186 := $extractvalue.i64($p1181,1);
  $i1186.dup := $or.i1($p1181.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p1185.dup := 0;
  $M.589 := $store.i64($M.589,$p1185,$i1186);
  $M.589.dup := $store.i1($M.589.dup,$p1185,$i1186.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 246, 31} true;
  assume {:verifier.code 0} true;
  $p149.dup := 0;
  $i1187 := $load.i128($M.589,$p149);
  $i1187.dup := 0;
  call {:cexpr "o33"} boogie_si_record_i128($i1187);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  call $p1188, $p1188.dup := FStar_UInt128_mul_wide($i281, $i281.dup, $i287, $i287.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  $p1189 := $bitcast.ref.ref($p150);
  $p1189.dup := $p150.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  $p1190 := $add.ref($add.ref($p1189,$mul.ref(0,16)),$mul.ref(0,1));
  $p1190.dup := $or.i1($or.i1($p1189.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  $i1191 := $extractvalue.i64($p1188,0);
  $i1191.dup := $or.i1($p1188.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  $p1190.dup := 0;
  $M.590 := $store.i64($M.590,$p1190,$i1191);
  $M.590.dup := $store.i1($M.590.dup,$p1190,$i1191.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  $p1192 := $add.ref($add.ref($p1189,$mul.ref(0,16)),$mul.ref(8,1));
  $p1192.dup := $or.i1($or.i1($p1189.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  $i1193 := $extractvalue.i64($p1188,1);
  $i1193.dup := $or.i1($p1188.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  $p1192.dup := 0;
  $M.590 := $store.i64($M.590,$p1192,$i1193);
  $M.590.dup := $store.i1($M.590.dup,$p1192,$i1193.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 54} true;
  assume {:verifier.code 0} true;
  $p150.dup := 0;
  $i1194 := $load.i128($M.590,$p150);
  $i1194.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p151.dup := 0;
  $M.591 := $store.i128($M.591,$p151,$i1091);
  $M.591.dup := $store.i1($M.591.dup,$p151,$i1091.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1195 := $bitcast.ref.ref($p151);
  $p1195.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1196 := $add.ref($add.ref($p1195,$mul.ref(0,16)),$mul.ref(0,1));
  $p1196.dup := $or.i1($or.i1($p1195.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1196.dup := 0;
  $i1197 := $load.i64($M.591,$p1196);
  $i1197.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1198 := $add.ref($add.ref($p1195,$mul.ref(0,16)),$mul.ref(8,1));
  $p1198.dup := $or.i1($or.i1($p1195.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1198.dup := 0;
  $i1199 := $load.i64($M.591,$p1198);
  $i1199.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p152.dup := 0;
  $M.592 := $store.i128($M.592,$p152,$i1194);
  $M.592.dup := $store.i1($M.592.dup,$p152,$i1194.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1200 := $bitcast.ref.ref($p152);
  $p1200.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1201 := $add.ref($add.ref($p1200,$mul.ref(0,16)),$mul.ref(0,1));
  $p1201.dup := $or.i1($or.i1($p1200.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1201.dup := 0;
  $i1202 := $load.i64($M.592,$p1201);
  $i1202.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1203 := $add.ref($add.ref($p1200,$mul.ref(0,16)),$mul.ref(8,1));
  $p1203.dup := $or.i1($or.i1($p1200.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1203.dup := 0;
  $i1204 := $load.i64($M.592,$p1203);
  $i1204.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  call $p1205, $p1205.dup := FStar_UInt128_add($i1197, $i1197.dup, $i1199, $i1199.dup, $i1202, $i1202.dup, $i1204, $i1204.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1206 := $bitcast.ref.ref($p153);
  $p1206.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1207 := $add.ref($add.ref($p1206,$mul.ref(0,16)),$mul.ref(0,1));
  $p1207.dup := $or.i1($or.i1($p1206.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $i1208 := $extractvalue.i64($p1205,0);
  $i1208.dup := $or.i1($p1205.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1207.dup := 0;
  $M.593 := $store.i64($M.593,$p1207,$i1208);
  $M.593.dup := $store.i1($M.593.dup,$p1207,$i1208.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1209 := $add.ref($add.ref($p1206,$mul.ref(0,16)),$mul.ref(8,1));
  $p1209.dup := $or.i1($or.i1($p1206.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $i1210 := $extractvalue.i64($p1205,1);
  $i1210.dup := $or.i1($p1205.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p1209.dup := 0;
  $M.593 := $store.i64($M.593,$p1209,$i1210);
  $M.593.dup := $store.i1($M.593.dup,$p1209,$i1210.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 247, 31} true;
  assume {:verifier.code 0} true;
  $p153.dup := 0;
  $i1211 := $load.i128($M.593,$p153);
  $i1211.dup := 0;
  call {:cexpr "o43"} boogie_si_record_i128($i1211);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  call $p1212, $p1212.dup := FStar_UInt128_mul_wide($i283, $i283.dup, $i298, $i298.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  $p1213 := $bitcast.ref.ref($p154);
  $p1213.dup := $p154.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  $p1214 := $add.ref($add.ref($p1213,$mul.ref(0,16)),$mul.ref(0,1));
  $p1214.dup := $or.i1($or.i1($p1213.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  $i1215 := $extractvalue.i64($p1212,0);
  $i1215.dup := $or.i1($p1212.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  $p1214.dup := 0;
  $M.594 := $store.i64($M.594,$p1214,$i1215);
  $M.594.dup := $store.i1($M.594.dup,$p1214,$i1215.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  $p1216 := $add.ref($add.ref($p1213,$mul.ref(0,16)),$mul.ref(8,1));
  $p1216.dup := $or.i1($or.i1($p1213.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  $i1217 := $extractvalue.i64($p1212,1);
  $i1217.dup := $or.i1($p1212.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  $p1216.dup := 0;
  $M.594 := $store.i64($M.594,$p1216,$i1217);
  $M.594.dup := $store.i1($M.594.dup,$p1216,$i1217.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 54} true;
  assume {:verifier.code 0} true;
  $p154.dup := 0;
  $i1218 := $load.i128($M.594,$p154);
  $i1218.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p155.dup := 0;
  $M.595 := $store.i128($M.595,$p155,$i1115);
  $M.595.dup := $store.i1($M.595.dup,$p155,$i1115.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1219 := $bitcast.ref.ref($p155);
  $p1219.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1220 := $add.ref($add.ref($p1219,$mul.ref(0,16)),$mul.ref(0,1));
  $p1220.dup := $or.i1($or.i1($p1219.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1220.dup := 0;
  $i1221 := $load.i64($M.595,$p1220);
  $i1221.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1222 := $add.ref($add.ref($p1219,$mul.ref(0,16)),$mul.ref(8,1));
  $p1222.dup := $or.i1($or.i1($p1219.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1222.dup := 0;
  $i1223 := $load.i64($M.595,$p1222);
  $i1223.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p156.dup := 0;
  $M.596 := $store.i128($M.596,$p156,$i1218);
  $M.596.dup := $store.i1($M.596.dup,$p156,$i1218.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1224 := $bitcast.ref.ref($p156);
  $p1224.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1225 := $add.ref($add.ref($p1224,$mul.ref(0,16)),$mul.ref(0,1));
  $p1225.dup := $or.i1($or.i1($p1224.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1225.dup := 0;
  $i1226 := $load.i64($M.596,$p1225);
  $i1226.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1227 := $add.ref($add.ref($p1224,$mul.ref(0,16)),$mul.ref(8,1));
  $p1227.dup := $or.i1($or.i1($p1224.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1227.dup := 0;
  $i1228 := $load.i64($M.596,$p1227);
  $i1228.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  call $p1229, $p1229.dup := FStar_UInt128_add($i1221, $i1221.dup, $i1223, $i1223.dup, $i1226, $i1226.dup, $i1228, $i1228.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1230 := $bitcast.ref.ref($p157);
  $p1230.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1231 := $add.ref($add.ref($p1230,$mul.ref(0,16)),$mul.ref(0,1));
  $p1231.dup := $or.i1($or.i1($p1230.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $i1232 := $extractvalue.i64($p1229,0);
  $i1232.dup := $or.i1($p1229.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1231.dup := 0;
  $M.597 := $store.i64($M.597,$p1231,$i1232);
  $M.597.dup := $store.i1($M.597.dup,$p1231,$i1232.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1233 := $add.ref($add.ref($p1230,$mul.ref(0,16)),$mul.ref(8,1));
  $p1233.dup := $or.i1($or.i1($p1230.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $i1234 := $extractvalue.i64($p1229,1);
  $i1234.dup := $or.i1($p1229.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p1233.dup := 0;
  $M.597 := $store.i64($M.597,$p1233,$i1234);
  $M.597.dup := $store.i1($M.597.dup,$p1233,$i1234.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 248, 31} true;
  assume {:verifier.code 0} true;
  $p157.dup := 0;
  $i1235 := $load.i128($M.597,$p157);
  $i1235.dup := 0;
  call {:cexpr "o04"} boogie_si_record_i128($i1235);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  call $p1236, $p1236.dup := FStar_UInt128_mul_wide($i283, $i283.dup, $i299, $i299.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  $p1237 := $bitcast.ref.ref($p158);
  $p1237.dup := $p158.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  $p1238 := $add.ref($add.ref($p1237,$mul.ref(0,16)),$mul.ref(0,1));
  $p1238.dup := $or.i1($or.i1($p1237.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  $i1239 := $extractvalue.i64($p1236,0);
  $i1239.dup := $or.i1($p1236.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  $p1238.dup := 0;
  $M.598 := $store.i64($M.598,$p1238,$i1239);
  $M.598.dup := $store.i1($M.598.dup,$p1238,$i1239.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  $p1240 := $add.ref($add.ref($p1237,$mul.ref(0,16)),$mul.ref(8,1));
  $p1240.dup := $or.i1($or.i1($p1237.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  $i1241 := $extractvalue.i64($p1236,1);
  $i1241.dup := $or.i1($p1236.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  $p1240.dup := 0;
  $M.598 := $store.i64($M.598,$p1240,$i1241);
  $M.598.dup := $store.i1($M.598.dup,$p1240,$i1241.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 56} true;
  assume {:verifier.code 0} true;
  $p158.dup := 0;
  $i1242 := $load.i128($M.598,$p158);
  $i1242.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p159.dup := 0;
  $M.599 := $store.i128($M.599,$p159,$i1139);
  $M.599.dup := $store.i1($M.599.dup,$p159,$i1139.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1243 := $bitcast.ref.ref($p159);
  $p1243.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1244 := $add.ref($add.ref($p1243,$mul.ref(0,16)),$mul.ref(0,1));
  $p1244.dup := $or.i1($or.i1($p1243.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1244.dup := 0;
  $i1245 := $load.i64($M.599,$p1244);
  $i1245.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1246 := $add.ref($add.ref($p1243,$mul.ref(0,16)),$mul.ref(8,1));
  $p1246.dup := $or.i1($or.i1($p1243.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1246.dup := 0;
  $i1247 := $load.i64($M.599,$p1246);
  $i1247.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p160.dup := 0;
  $M.600 := $store.i128($M.600,$p160,$i1242);
  $M.600.dup := $store.i1($M.600.dup,$p160,$i1242.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1248 := $bitcast.ref.ref($p160);
  $p1248.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1249 := $add.ref($add.ref($p1248,$mul.ref(0,16)),$mul.ref(0,1));
  $p1249.dup := $or.i1($or.i1($p1248.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1249.dup := 0;
  $i1250 := $load.i64($M.600,$p1249);
  $i1250.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1251 := $add.ref($add.ref($p1248,$mul.ref(0,16)),$mul.ref(8,1));
  $p1251.dup := $or.i1($or.i1($p1248.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1251.dup := 0;
  $i1252 := $load.i64($M.600,$p1251);
  $i1252.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  call $p1253, $p1253.dup := FStar_UInt128_add($i1245, $i1245.dup, $i1247, $i1247.dup, $i1250, $i1250.dup, $i1252, $i1252.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1254 := $bitcast.ref.ref($p161);
  $p1254.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1255 := $add.ref($add.ref($p1254,$mul.ref(0,16)),$mul.ref(0,1));
  $p1255.dup := $or.i1($or.i1($p1254.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $i1256 := $extractvalue.i64($p1253,0);
  $i1256.dup := $or.i1($p1253.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1255.dup := 0;
  $M.601 := $store.i64($M.601,$p1255,$i1256);
  $M.601.dup := $store.i1($M.601.dup,$p1255,$i1256.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1257 := $add.ref($add.ref($p1254,$mul.ref(0,16)),$mul.ref(8,1));
  $p1257.dup := $or.i1($or.i1($p1254.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $i1258 := $extractvalue.i64($p1253,1);
  $i1258.dup := $or.i1($p1253.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p1257.dup := 0;
  $M.601 := $store.i64($M.601,$p1257,$i1258);
  $M.601.dup := $store.i1($M.601.dup,$p1257,$i1258.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 249, 32} true;
  assume {:verifier.code 0} true;
  $p161.dup := 0;
  $i1259 := $load.i128($M.601,$p161);
  $i1259.dup := 0;
  call {:cexpr "o141"} boogie_si_record_i128($i1259);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  call $p1260, $p1260.dup := FStar_UInt128_mul_wide($i283, $i283.dup, $i300, $i300.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  $p1261 := $bitcast.ref.ref($p162);
  $p1261.dup := $p162.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  $p1262 := $add.ref($add.ref($p1261,$mul.ref(0,16)),$mul.ref(0,1));
  $p1262.dup := $or.i1($or.i1($p1261.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  $i1263 := $extractvalue.i64($p1260,0);
  $i1263.dup := $or.i1($p1260.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  $p1262.dup := 0;
  $M.602 := $store.i64($M.602,$p1262,$i1263);
  $M.602.dup := $store.i1($M.602.dup,$p1262,$i1263.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  $p1264 := $add.ref($add.ref($p1261,$mul.ref(0,16)),$mul.ref(8,1));
  $p1264.dup := $or.i1($or.i1($p1261.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  $i1265 := $extractvalue.i64($p1260,1);
  $i1265.dup := $or.i1($p1260.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  $p1264.dup := 0;
  $M.602 := $store.i64($M.602,$p1264,$i1265);
  $M.602.dup := $store.i1($M.602.dup,$p1264,$i1265.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 56} true;
  assume {:verifier.code 0} true;
  $p162.dup := 0;
  $i1266 := $load.i128($M.602,$p162);
  $i1266.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p163.dup := 0;
  $M.603 := $store.i128($M.603,$p163,$i1163);
  $M.603.dup := $store.i1($M.603.dup,$p163,$i1163.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1267 := $bitcast.ref.ref($p163);
  $p1267.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1268 := $add.ref($add.ref($p1267,$mul.ref(0,16)),$mul.ref(0,1));
  $p1268.dup := $or.i1($or.i1($p1267.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1268.dup := 0;
  $i1269 := $load.i64($M.603,$p1268);
  $i1269.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1270 := $add.ref($add.ref($p1267,$mul.ref(0,16)),$mul.ref(8,1));
  $p1270.dup := $or.i1($or.i1($p1267.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1270.dup := 0;
  $i1271 := $load.i64($M.603,$p1270);
  $i1271.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p164.dup := 0;
  $M.604 := $store.i128($M.604,$p164,$i1266);
  $M.604.dup := $store.i1($M.604.dup,$p164,$i1266.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1272 := $bitcast.ref.ref($p164);
  $p1272.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1273 := $add.ref($add.ref($p1272,$mul.ref(0,16)),$mul.ref(0,1));
  $p1273.dup := $or.i1($or.i1($p1272.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1273.dup := 0;
  $i1274 := $load.i64($M.604,$p1273);
  $i1274.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1275 := $add.ref($add.ref($p1272,$mul.ref(0,16)),$mul.ref(8,1));
  $p1275.dup := $or.i1($or.i1($p1272.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1275.dup := 0;
  $i1276 := $load.i64($M.604,$p1275);
  $i1276.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  call $p1277, $p1277.dup := FStar_UInt128_add($i1269, $i1269.dup, $i1271, $i1271.dup, $i1274, $i1274.dup, $i1276, $i1276.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1278 := $bitcast.ref.ref($p165);
  $p1278.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1279 := $add.ref($add.ref($p1278,$mul.ref(0,16)),$mul.ref(0,1));
  $p1279.dup := $or.i1($or.i1($p1278.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $i1280 := $extractvalue.i64($p1277,0);
  $i1280.dup := $or.i1($p1277.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1279.dup := 0;
  $M.605 := $store.i64($M.605,$p1279,$i1280);
  $M.605.dup := $store.i1($M.605.dup,$p1279,$i1280.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1281 := $add.ref($add.ref($p1278,$mul.ref(0,16)),$mul.ref(8,1));
  $p1281.dup := $or.i1($or.i1($p1278.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $i1282 := $extractvalue.i64($p1277,1);
  $i1282.dup := $or.i1($p1277.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p1281.dup := 0;
  $M.605 := $store.i64($M.605,$p1281,$i1282);
  $M.605.dup := $store.i1($M.605.dup,$p1281,$i1282.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 250, 32} true;
  assume {:verifier.code 0} true;
  $p165.dup := 0;
  $i1283 := $load.i128($M.605,$p165);
  $i1283.dup := 0;
  call {:cexpr "o241"} boogie_si_record_i128($i1283);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  call $p1284, $p1284.dup := FStar_UInt128_mul_wide($i283, $i283.dup, $i301, $i301.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  $p1285 := $bitcast.ref.ref($p166);
  $p1285.dup := $p166.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  $p1286 := $add.ref($add.ref($p1285,$mul.ref(0,16)),$mul.ref(0,1));
  $p1286.dup := $or.i1($or.i1($p1285.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  $i1287 := $extractvalue.i64($p1284,0);
  $i1287.dup := $or.i1($p1284.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  $p1286.dup := 0;
  $M.606 := $store.i64($M.606,$p1286,$i1287);
  $M.606.dup := $store.i1($M.606.dup,$p1286,$i1287.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  $p1288 := $add.ref($add.ref($p1285,$mul.ref(0,16)),$mul.ref(8,1));
  $p1288.dup := $or.i1($or.i1($p1285.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  $i1289 := $extractvalue.i64($p1284,1);
  $i1289.dup := $or.i1($p1284.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  $p1288.dup := 0;
  $M.606 := $store.i64($M.606,$p1288,$i1289);
  $M.606.dup := $store.i1($M.606.dup,$p1288,$i1289.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 54} true;
  assume {:verifier.code 0} true;
  $p166.dup := 0;
  $i1290 := $load.i128($M.606,$p166);
  $i1290.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p167.dup := 0;
  $M.607 := $store.i128($M.607,$p167,$i1187);
  $M.607.dup := $store.i1($M.607.dup,$p167,$i1187.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1291 := $bitcast.ref.ref($p167);
  $p1291.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1292 := $add.ref($add.ref($p1291,$mul.ref(0,16)),$mul.ref(0,1));
  $p1292.dup := $or.i1($or.i1($p1291.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1292.dup := 0;
  $i1293 := $load.i64($M.607,$p1292);
  $i1293.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1294 := $add.ref($add.ref($p1291,$mul.ref(0,16)),$mul.ref(8,1));
  $p1294.dup := $or.i1($or.i1($p1291.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1294.dup := 0;
  $i1295 := $load.i64($M.607,$p1294);
  $i1295.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p168.dup := 0;
  $M.608 := $store.i128($M.608,$p168,$i1290);
  $M.608.dup := $store.i1($M.608.dup,$p168,$i1290.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1296 := $bitcast.ref.ref($p168);
  $p1296.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1297 := $add.ref($add.ref($p1296,$mul.ref(0,16)),$mul.ref(0,1));
  $p1297.dup := $or.i1($or.i1($p1296.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1297.dup := 0;
  $i1298 := $load.i64($M.608,$p1297);
  $i1298.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1299 := $add.ref($add.ref($p1296,$mul.ref(0,16)),$mul.ref(8,1));
  $p1299.dup := $or.i1($or.i1($p1296.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1299.dup := 0;
  $i1300 := $load.i64($M.608,$p1299);
  $i1300.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  call $p1301, $p1301.dup := FStar_UInt128_add($i1293, $i1293.dup, $i1295, $i1295.dup, $i1298, $i1298.dup, $i1300, $i1300.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1302 := $bitcast.ref.ref($p169);
  $p1302.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1303 := $add.ref($add.ref($p1302,$mul.ref(0,16)),$mul.ref(0,1));
  $p1303.dup := $or.i1($or.i1($p1302.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $i1304 := $extractvalue.i64($p1301,0);
  $i1304.dup := $or.i1($p1301.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1303.dup := 0;
  $M.609 := $store.i64($M.609,$p1303,$i1304);
  $M.609.dup := $store.i1($M.609.dup,$p1303,$i1304.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1305 := $add.ref($add.ref($p1302,$mul.ref(0,16)),$mul.ref(8,1));
  $p1305.dup := $or.i1($or.i1($p1302.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $i1306 := $extractvalue.i64($p1301,1);
  $i1306.dup := $or.i1($p1301.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p1305.dup := 0;
  $M.609 := $store.i64($M.609,$p1305,$i1306);
  $M.609.dup := $store.i1($M.609.dup,$p1305,$i1306.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 251, 31} true;
  assume {:verifier.code 0} true;
  $p169.dup := 0;
  $i1307 := $load.i128($M.609,$p169);
  $i1307.dup := 0;
  call {:cexpr "o34"} boogie_si_record_i128($i1307);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  call $p1308, $p1308.dup := FStar_UInt128_mul_wide($i283, $i283.dup, $i285, $i285.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  $p1309 := $bitcast.ref.ref($p170);
  $p1309.dup := $p170.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  $p1310 := $add.ref($add.ref($p1309,$mul.ref(0,16)),$mul.ref(0,1));
  $p1310.dup := $or.i1($or.i1($p1309.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  $i1311 := $extractvalue.i64($p1308,0);
  $i1311.dup := $or.i1($p1308.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  $p1310.dup := 0;
  $M.610 := $store.i64($M.610,$p1310,$i1311);
  $M.610.dup := $store.i1($M.610.dup,$p1310,$i1311.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  $p1312 := $add.ref($add.ref($p1309,$mul.ref(0,16)),$mul.ref(8,1));
  $p1312.dup := $or.i1($or.i1($p1309.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  $i1313 := $extractvalue.i64($p1308,1);
  $i1313.dup := $or.i1($p1308.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  $p1312.dup := 0;
  $M.610 := $store.i64($M.610,$p1312,$i1313);
  $M.610.dup := $store.i1($M.610.dup,$p1312,$i1313.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 54} true;
  assume {:verifier.code 0} true;
  $p170.dup := 0;
  $i1314 := $load.i128($M.610,$p170);
  $i1314.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p171.dup := 0;
  $M.611 := $store.i128($M.611,$p171,$i1211);
  $M.611.dup := $store.i1($M.611.dup,$p171,$i1211.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1315 := $bitcast.ref.ref($p171);
  $p1315.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1316 := $add.ref($add.ref($p1315,$mul.ref(0,16)),$mul.ref(0,1));
  $p1316.dup := $or.i1($or.i1($p1315.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1316.dup := 0;
  $i1317 := $load.i64($M.611,$p1316);
  $i1317.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1318 := $add.ref($add.ref($p1315,$mul.ref(0,16)),$mul.ref(8,1));
  $p1318.dup := $or.i1($or.i1($p1315.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1318.dup := 0;
  $i1319 := $load.i64($M.611,$p1318);
  $i1319.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p172.dup := 0;
  $M.612 := $store.i128($M.612,$p172,$i1314);
  $M.612.dup := $store.i1($M.612.dup,$p172,$i1314.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1320 := $bitcast.ref.ref($p172);
  $p1320.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1321 := $add.ref($add.ref($p1320,$mul.ref(0,16)),$mul.ref(0,1));
  $p1321.dup := $or.i1($or.i1($p1320.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1321.dup := 0;
  $i1322 := $load.i64($M.612,$p1321);
  $i1322.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1323 := $add.ref($add.ref($p1320,$mul.ref(0,16)),$mul.ref(8,1));
  $p1323.dup := $or.i1($or.i1($p1320.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1323.dup := 0;
  $i1324 := $load.i64($M.612,$p1323);
  $i1324.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  call $p1325, $p1325.dup := FStar_UInt128_add($i1317, $i1317.dup, $i1319, $i1319.dup, $i1322, $i1322.dup, $i1324, $i1324.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1326 := $bitcast.ref.ref($p173);
  $p1326.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1327 := $add.ref($add.ref($p1326,$mul.ref(0,16)),$mul.ref(0,1));
  $p1327.dup := $or.i1($or.i1($p1326.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $i1328 := $extractvalue.i64($p1325,0);
  $i1328.dup := $or.i1($p1325.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1327.dup := 0;
  $M.613 := $store.i64($M.613,$p1327,$i1328);
  $M.613.dup := $store.i1($M.613.dup,$p1327,$i1328.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1329 := $add.ref($add.ref($p1326,$mul.ref(0,16)),$mul.ref(8,1));
  $p1329.dup := $or.i1($or.i1($p1326.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $i1330 := $extractvalue.i64($p1325,1);
  $i1330.dup := $or.i1($p1325.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p1329.dup := 0;
  $M.613 := $store.i64($M.613,$p1329,$i1330);
  $M.613.dup := $store.i1($M.613.dup,$p1329,$i1330.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 252, 31} true;
  assume {:verifier.code 0} true;
  $p173.dup := 0;
  $i1331 := $load.i128($M.613,$p173);
  $i1331.dup := 0;
  call {:cexpr "o44"} boogie_si_record_i128($i1331);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  call $p1332, $p1332.dup := FStar_UInt128_uint64_to_uint128(0, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  $p1333 := $bitcast.ref.ref($p174);
  $p1333.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  $p1334 := $add.ref($add.ref($p1333,$mul.ref(0,16)),$mul.ref(0,1));
  $p1334.dup := $or.i1($or.i1($p1333.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  $i1335 := $extractvalue.i64($p1332,0);
  $i1335.dup := $or.i1($p1332.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  $p1334.dup := 0;
  $M.614 := $store.i64($M.614,$p1334,$i1335);
  $M.614.dup := $store.i1($M.614.dup,$p1334,$i1335.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  $p1336 := $add.ref($add.ref($p1333,$mul.ref(0,16)),$mul.ref(8,1));
  $p1336.dup := $or.i1($or.i1($p1333.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  $i1337 := $extractvalue.i64($p1332,1);
  $i1337.dup := $or.i1($p1332.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  $p1336.dup := 0;
  $M.614 := $store.i64($M.614,$p1336,$i1337);
  $M.614.dup := $store.i1($M.614.dup,$p1336,$i1337.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 35} true;
  assume {:verifier.code 0} true;
  $p174.dup := 0;
  $i1338 := $load.i128($M.614,$p174);
  $i1338.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p175.dup := 0;
  $M.615 := $store.i128($M.615,$p175,$i720);
  $M.615.dup := $store.i1($M.615.dup,$p175,$i720.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1339 := $bitcast.ref.ref($p175);
  $p1339.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1340 := $add.ref($add.ref($p1339,$mul.ref(0,16)),$mul.ref(0,1));
  $p1340.dup := $or.i1($or.i1($p1339.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1340.dup := 0;
  $i1341 := $load.i64($M.615,$p1340);
  $i1341.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1342 := $add.ref($add.ref($p1339,$mul.ref(0,16)),$mul.ref(8,1));
  $p1342.dup := $or.i1($or.i1($p1339.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1342.dup := 0;
  $i1343 := $load.i64($M.615,$p1342);
  $i1343.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p176.dup := 0;
  $M.616 := $store.i128($M.616,$p176,$i1338);
  $M.616.dup := $store.i1($M.616.dup,$p176,$i1338.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1344 := $bitcast.ref.ref($p176);
  $p1344.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1345 := $add.ref($add.ref($p1344,$mul.ref(0,16)),$mul.ref(0,1));
  $p1345.dup := $or.i1($or.i1($p1344.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1345.dup := 0;
  $i1346 := $load.i64($M.616,$p1345);
  $i1346.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1347 := $add.ref($add.ref($p1344,$mul.ref(0,16)),$mul.ref(8,1));
  $p1347.dup := $or.i1($or.i1($p1344.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1347.dup := 0;
  $i1348 := $load.i64($M.616,$p1347);
  $i1348.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  call $p1349, $p1349.dup := FStar_UInt128_add($i1341, $i1341.dup, $i1343, $i1343.dup, $i1346, $i1346.dup, $i1348, $i1348.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1350 := $bitcast.ref.ref($p177);
  $p1350.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1351 := $add.ref($add.ref($p1350,$mul.ref(0,16)),$mul.ref(0,1));
  $p1351.dup := $or.i1($or.i1($p1350.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $i1352 := $extractvalue.i64($p1349,0);
  $i1352.dup := $or.i1($p1349.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1351.dup := 0;
  $M.617 := $store.i64($M.617,$p1351,$i1352);
  $M.617.dup := $store.i1($M.617.dup,$p1351,$i1352.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1353 := $add.ref($add.ref($p1350,$mul.ref(0,16)),$mul.ref(8,1));
  $p1353.dup := $or.i1($or.i1($p1350.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $i1354 := $extractvalue.i64($p1349,1);
  $i1354.dup := $or.i1($p1349.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p1353.dup := 0;
  $M.617 := $store.i64($M.617,$p1353,$i1354);
  $M.617.dup := $store.i1($M.617.dup,$p1353,$i1354.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 259, 8} true;
  assume {:verifier.code 0} true;
  $p177.dup := 0;
  $i1355 := $load.i128($M.617,$p177);
  $i1355.dup := 0;
  call {:cexpr "l_"} boogie_si_record_i128($i1355);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  $p178.dup := 0;
  $M.618 := $store.i128($M.618,$p178,$i1355);
  $M.618.dup := $store.i1($M.618.dup,$p178,$i1355.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  $p1356 := $bitcast.ref.ref($p178);
  $p1356.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  $p1357 := $add.ref($add.ref($p1356,$mul.ref(0,16)),$mul.ref(0,1));
  $p1357.dup := $or.i1($or.i1($p1356.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  $p1357.dup := 0;
  $i1358 := $load.i64($M.618,$p1357);
  $i1358.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  $p1359 := $add.ref($add.ref($p1356,$mul.ref(0,16)),$mul.ref(8,1));
  $p1359.dup := $or.i1($or.i1($p1356.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  $p1359.dup := 0;
  $i1360 := $load.i64($M.618,$p1359);
  $i1360.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 20} true;
  assume {:verifier.code 0} true;
  call $i1361, $i1361.dup := FStar_UInt128_uint128_to_uint64($i1358, $i1358.dup, $i1360, $i1360.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 260, 56} true;
  assume {:verifier.code 0} true;
  $i1362 := $and.i64($i1361,2251799813685247);
  $i1362.dup := $or.i1($i1361.dup,0);
  call {:cexpr "tmp00"} boogie_si_record_i64($i1362);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $p179.dup := 0;
  $M.619 := $store.i128($M.619,$p179,$i1355);
  $M.619.dup := $store.i1($M.619.dup,$p179,$i1355.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $p1363 := $bitcast.ref.ref($p179);
  $p1363.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $p1364 := $add.ref($add.ref($p1363,$mul.ref(0,16)),$mul.ref(0,1));
  $p1364.dup := $or.i1($or.i1($p1363.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $p1364.dup := 0;
  $i1365 := $load.i64($M.619,$p1364);
  $i1365.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $p1366 := $add.ref($add.ref($p1363,$mul.ref(0,16)),$mul.ref(8,1));
  $p1366.dup := $or.i1($or.i1($p1363.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $p1366.dup := 0;
  $i1367 := $load.i64($M.619,$p1366);
  $i1367.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  call $p1368, $p1368.dup := FStar_UInt128_shift_right($i1365, $i1365.dup, $i1367, $i1367.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $p1369 := $bitcast.ref.ref($p180);
  $p1369.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $p1370 := $add.ref($add.ref($p1369,$mul.ref(0,16)),$mul.ref(0,1));
  $p1370.dup := $or.i1($or.i1($p1369.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $i1371 := $extractvalue.i64($p1368,0);
  $i1371.dup := $or.i1($p1368.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $p1370.dup := 0;
  $M.620 := $store.i64($M.620,$p1370,$i1371);
  $M.620.dup := $store.i1($M.620.dup,$p1370,$i1371.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $p1372 := $add.ref($add.ref($p1369,$mul.ref(0,16)),$mul.ref(8,1));
  $p1372.dup := $or.i1($or.i1($p1369.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $i1373 := $extractvalue.i64($p1368,1);
  $i1373.dup := $or.i1($p1368.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $p1372.dup := 0;
  $M.620 := $store.i64($M.620,$p1372,$i1373);
  $M.620.dup := $store.i1($M.620.dup,$p1372,$i1373.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 50} true;
  assume {:verifier.code 0} true;
  $p180.dup := 0;
  $i1374 := $load.i128($M.620,$p180);
  $i1374.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  $p181.dup := 0;
  $M.621 := $store.i128($M.621,$p181,$i1374);
  $M.621.dup := $store.i1($M.621.dup,$p181,$i1374.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  $p1375 := $bitcast.ref.ref($p181);
  $p1375.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  $p1376 := $add.ref($add.ref($p1375,$mul.ref(0,16)),$mul.ref(0,1));
  $p1376.dup := $or.i1($or.i1($p1375.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  $p1376.dup := 0;
  $i1377 := $load.i64($M.621,$p1376);
  $i1377.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  $p1378 := $add.ref($add.ref($p1375,$mul.ref(0,16)),$mul.ref(8,1));
  $p1378.dup := $or.i1($or.i1($p1375.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  $p1378.dup := 0;
  $i1379 := $load.i64($M.621,$p1378);
  $i1379.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 261, 18} true;
  assume {:verifier.code 0} true;
  call $i1380, $i1380.dup := FStar_UInt128_uint128_to_uint64($i1377, $i1377.dup, $i1379, $i1379.dup);
  call {:cexpr "c00"} boogie_si_record_i64($i1380);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  call $p1381, $p1381.dup := FStar_UInt128_uint64_to_uint128($i1380, $i1380.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  $p1382 := $bitcast.ref.ref($p182);
  $p1382.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  $p1383 := $add.ref($add.ref($p1382,$mul.ref(0,16)),$mul.ref(0,1));
  $p1383.dup := $or.i1($or.i1($p1382.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  $i1384 := $extractvalue.i64($p1381,0);
  $i1384.dup := $or.i1($p1381.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  $p1383.dup := 0;
  $M.622 := $store.i64($M.622,$p1383,$i1384);
  $M.622.dup := $store.i1($M.622.dup,$p1383,$i1384.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  $p1385 := $add.ref($add.ref($p1382,$mul.ref(0,16)),$mul.ref(8,1));
  $p1385.dup := $or.i1($or.i1($p1382.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  $i1386 := $extractvalue.i64($p1381,1);
  $i1386.dup := $or.i1($p1381.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  $p1385.dup := 0;
  $M.622 := $store.i64($M.622,$p1385,$i1386);
  $M.622.dup := $store.i1($M.622.dup,$p1385,$i1386.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 58} true;
  assume {:verifier.code 0} true;
  $p182.dup := 0;
  $i1387 := $load.i128($M.622,$p182);
  $i1387.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p183.dup := 0;
  $M.623 := $store.i128($M.623,$p183,$i744);
  $M.623.dup := $store.i1($M.623.dup,$p183,$i744.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1388 := $bitcast.ref.ref($p183);
  $p1388.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1389 := $add.ref($add.ref($p1388,$mul.ref(0,16)),$mul.ref(0,1));
  $p1389.dup := $or.i1($or.i1($p1388.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1389.dup := 0;
  $i1390 := $load.i64($M.623,$p1389);
  $i1390.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1391 := $add.ref($add.ref($p1388,$mul.ref(0,16)),$mul.ref(8,1));
  $p1391.dup := $or.i1($or.i1($p1388.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1391.dup := 0;
  $i1392 := $load.i64($M.623,$p1391);
  $i1392.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p184.dup := 0;
  $M.624 := $store.i128($M.624,$p184,$i1387);
  $M.624.dup := $store.i1($M.624.dup,$p184,$i1387.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1393 := $bitcast.ref.ref($p184);
  $p1393.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1394 := $add.ref($add.ref($p1393,$mul.ref(0,16)),$mul.ref(0,1));
  $p1394.dup := $or.i1($or.i1($p1393.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1394.dup := 0;
  $i1395 := $load.i64($M.624,$p1394);
  $i1395.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1396 := $add.ref($add.ref($p1393,$mul.ref(0,16)),$mul.ref(8,1));
  $p1396.dup := $or.i1($or.i1($p1393.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1396.dup := 0;
  $i1397 := $load.i64($M.624,$p1396);
  $i1397.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  call $p1398, $p1398.dup := FStar_UInt128_add($i1390, $i1390.dup, $i1392, $i1392.dup, $i1395, $i1395.dup, $i1397, $i1397.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1399 := $bitcast.ref.ref($p185);
  $p1399.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1400 := $add.ref($add.ref($p1399,$mul.ref(0,16)),$mul.ref(0,1));
  $p1400.dup := $or.i1($or.i1($p1399.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $i1401 := $extractvalue.i64($p1398,0);
  $i1401.dup := $or.i1($p1398.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1400.dup := 0;
  $M.625 := $store.i64($M.625,$p1400,$i1401);
  $M.625.dup := $store.i1($M.625.dup,$p1400,$i1401.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1402 := $add.ref($add.ref($p1399,$mul.ref(0,16)),$mul.ref(8,1));
  $p1402.dup := $or.i1($or.i1($p1399.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $i1403 := $extractvalue.i64($p1398,1);
  $i1403.dup := $or.i1($p1398.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p1402.dup := 0;
  $M.625 := $store.i64($M.625,$p1402,$i1403);
  $M.625.dup := $store.i1($M.625.dup,$p1402,$i1403.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 262, 31} true;
  assume {:verifier.code 0} true;
  $p185.dup := 0;
  $i1404 := $load.i128($M.625,$p185);
  $i1404.dup := 0;
  call {:cexpr "l_0"} boogie_si_record_i128($i1404);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  $p186.dup := 0;
  $M.626 := $store.i128($M.626,$p186,$i1404);
  $M.626.dup := $store.i1($M.626.dup,$p186,$i1404.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  $p1405 := $bitcast.ref.ref($p186);
  $p1405.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  $p1406 := $add.ref($add.ref($p1405,$mul.ref(0,16)),$mul.ref(0,1));
  $p1406.dup := $or.i1($or.i1($p1405.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  $p1406.dup := 0;
  $i1407 := $load.i64($M.626,$p1406);
  $i1407.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  $p1408 := $add.ref($add.ref($p1405,$mul.ref(0,16)),$mul.ref(8,1));
  $p1408.dup := $or.i1($or.i1($p1405.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  $p1408.dup := 0;
  $i1409 := $load.i64($M.626,$p1408);
  $i1409.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 20} true;
  assume {:verifier.code 0} true;
  call $i1410, $i1410.dup := FStar_UInt128_uint128_to_uint64($i1407, $i1407.dup, $i1409, $i1409.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 263, 57} true;
  assume {:verifier.code 0} true;
  $i1411 := $and.i64($i1410,2251799813685247);
  $i1411.dup := $or.i1($i1410.dup,0);
  call {:cexpr "tmp10"} boogie_si_record_i64($i1411);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $p187.dup := 0;
  $M.627 := $store.i128($M.627,$p187,$i1404);
  $M.627.dup := $store.i1($M.627.dup,$p187,$i1404.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $p1412 := $bitcast.ref.ref($p187);
  $p1412.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $p1413 := $add.ref($add.ref($p1412,$mul.ref(0,16)),$mul.ref(0,1));
  $p1413.dup := $or.i1($or.i1($p1412.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $p1413.dup := 0;
  $i1414 := $load.i64($M.627,$p1413);
  $i1414.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $p1415 := $add.ref($add.ref($p1412,$mul.ref(0,16)),$mul.ref(8,1));
  $p1415.dup := $or.i1($or.i1($p1412.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $p1415.dup := 0;
  $i1416 := $load.i64($M.627,$p1415);
  $i1416.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  call $p1417, $p1417.dup := FStar_UInt128_shift_right($i1414, $i1414.dup, $i1416, $i1416.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $p1418 := $bitcast.ref.ref($p188);
  $p1418.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $p1419 := $add.ref($add.ref($p1418,$mul.ref(0,16)),$mul.ref(0,1));
  $p1419.dup := $or.i1($or.i1($p1418.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $i1420 := $extractvalue.i64($p1417,0);
  $i1420.dup := $or.i1($p1417.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $p1419.dup := 0;
  $M.628 := $store.i64($M.628,$p1419,$i1420);
  $M.628.dup := $store.i1($M.628.dup,$p1419,$i1420.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $p1421 := $add.ref($add.ref($p1418,$mul.ref(0,16)),$mul.ref(8,1));
  $p1421.dup := $or.i1($or.i1($p1418.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $i1422 := $extractvalue.i64($p1417,1);
  $i1422.dup := $or.i1($p1417.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $p1421.dup := 0;
  $M.628 := $store.i64($M.628,$p1421,$i1422);
  $M.628.dup := $store.i1($M.628.dup,$p1421,$i1422.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 50} true;
  assume {:verifier.code 0} true;
  $p188.dup := 0;
  $i1423 := $load.i128($M.628,$p188);
  $i1423.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  $p189.dup := 0;
  $M.629 := $store.i128($M.629,$p189,$i1423);
  $M.629.dup := $store.i1($M.629.dup,$p189,$i1423.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  $p1424 := $bitcast.ref.ref($p189);
  $p1424.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  $p1425 := $add.ref($add.ref($p1424,$mul.ref(0,16)),$mul.ref(0,1));
  $p1425.dup := $or.i1($or.i1($p1424.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  $p1425.dup := 0;
  $i1426 := $load.i64($M.629,$p1425);
  $i1426.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  $p1427 := $add.ref($add.ref($p1424,$mul.ref(0,16)),$mul.ref(8,1));
  $p1427.dup := $or.i1($or.i1($p1424.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  $p1427.dup := 0;
  $i1428 := $load.i64($M.629,$p1427);
  $i1428.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 264, 18} true;
  assume {:verifier.code 0} true;
  call $i1429, $i1429.dup := FStar_UInt128_uint128_to_uint64($i1426, $i1426.dup, $i1428, $i1428.dup);
  call {:cexpr "c10"} boogie_si_record_i64($i1429);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  call $p1430, $p1430.dup := FStar_UInt128_uint64_to_uint128($i1429, $i1429.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  $p1431 := $bitcast.ref.ref($p190);
  $p1431.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  $p1432 := $add.ref($add.ref($p1431,$mul.ref(0,16)),$mul.ref(0,1));
  $p1432.dup := $or.i1($or.i1($p1431.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  $i1433 := $extractvalue.i64($p1430,0);
  $i1433.dup := $or.i1($p1430.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  $p1432.dup := 0;
  $M.630 := $store.i64($M.630,$p1432,$i1433);
  $M.630.dup := $store.i1($M.630.dup,$p1432,$i1433.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  $p1434 := $add.ref($add.ref($p1431,$mul.ref(0,16)),$mul.ref(8,1));
  $p1434.dup := $or.i1($or.i1($p1431.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  $i1435 := $extractvalue.i64($p1430,1);
  $i1435.dup := $or.i1($p1430.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  $p1434.dup := 0;
  $M.630 := $store.i64($M.630,$p1434,$i1435);
  $M.630.dup := $store.i1($M.630.dup,$p1434,$i1435.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 58} true;
  assume {:verifier.code 0} true;
  $p190.dup := 0;
  $i1436 := $load.i128($M.630,$p190);
  $i1436.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p191.dup := 0;
  $M.631 := $store.i128($M.631,$p191,$i768);
  $M.631.dup := $store.i1($M.631.dup,$p191,$i768.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1437 := $bitcast.ref.ref($p191);
  $p1437.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1438 := $add.ref($add.ref($p1437,$mul.ref(0,16)),$mul.ref(0,1));
  $p1438.dup := $or.i1($or.i1($p1437.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1438.dup := 0;
  $i1439 := $load.i64($M.631,$p1438);
  $i1439.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1440 := $add.ref($add.ref($p1437,$mul.ref(0,16)),$mul.ref(8,1));
  $p1440.dup := $or.i1($or.i1($p1437.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1440.dup := 0;
  $i1441 := $load.i64($M.631,$p1440);
  $i1441.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p192.dup := 0;
  $M.632 := $store.i128($M.632,$p192,$i1436);
  $M.632.dup := $store.i1($M.632.dup,$p192,$i1436.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1442 := $bitcast.ref.ref($p192);
  $p1442.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1443 := $add.ref($add.ref($p1442,$mul.ref(0,16)),$mul.ref(0,1));
  $p1443.dup := $or.i1($or.i1($p1442.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1443.dup := 0;
  $i1444 := $load.i64($M.632,$p1443);
  $i1444.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1445 := $add.ref($add.ref($p1442,$mul.ref(0,16)),$mul.ref(8,1));
  $p1445.dup := $or.i1($or.i1($p1442.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1445.dup := 0;
  $i1446 := $load.i64($M.632,$p1445);
  $i1446.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  call $p1447, $p1447.dup := FStar_UInt128_add($i1439, $i1439.dup, $i1441, $i1441.dup, $i1444, $i1444.dup, $i1446, $i1446.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1448 := $bitcast.ref.ref($p193);
  $p1448.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1449 := $add.ref($add.ref($p1448,$mul.ref(0,16)),$mul.ref(0,1));
  $p1449.dup := $or.i1($or.i1($p1448.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $i1450 := $extractvalue.i64($p1447,0);
  $i1450.dup := $or.i1($p1447.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1449.dup := 0;
  $M.633 := $store.i64($M.633,$p1449,$i1450);
  $M.633.dup := $store.i1($M.633.dup,$p1449,$i1450.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1451 := $add.ref($add.ref($p1448,$mul.ref(0,16)),$mul.ref(8,1));
  $p1451.dup := $or.i1($or.i1($p1448.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $i1452 := $extractvalue.i64($p1447,1);
  $i1452.dup := $or.i1($p1447.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p1451.dup := 0;
  $M.633 := $store.i64($M.633,$p1451,$i1452);
  $M.633.dup := $store.i1($M.633.dup,$p1451,$i1452.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 265, 31} true;
  assume {:verifier.code 0} true;
  $p193.dup := 0;
  $i1453 := $load.i128($M.633,$p193);
  $i1453.dup := 0;
  call {:cexpr "l_1"} boogie_si_record_i128($i1453);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  $p194.dup := 0;
  $M.634 := $store.i128($M.634,$p194,$i1453);
  $M.634.dup := $store.i1($M.634.dup,$p194,$i1453.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  $p1454 := $bitcast.ref.ref($p194);
  $p1454.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  $p1455 := $add.ref($add.ref($p1454,$mul.ref(0,16)),$mul.ref(0,1));
  $p1455.dup := $or.i1($or.i1($p1454.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  $p1455.dup := 0;
  $i1456 := $load.i64($M.634,$p1455);
  $i1456.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  $p1457 := $add.ref($add.ref($p1454,$mul.ref(0,16)),$mul.ref(8,1));
  $p1457.dup := $or.i1($or.i1($p1454.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  $p1457.dup := 0;
  $i1458 := $load.i64($M.634,$p1457);
  $i1458.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 20} true;
  assume {:verifier.code 0} true;
  call $i1459, $i1459.dup := FStar_UInt128_uint128_to_uint64($i1456, $i1456.dup, $i1458, $i1458.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 266, 57} true;
  assume {:verifier.code 0} true;
  $i1460 := $and.i64($i1459,2251799813685247);
  $i1460.dup := $or.i1($i1459.dup,0);
  call {:cexpr "tmp20"} boogie_si_record_i64($i1460);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $p195.dup := 0;
  $M.635 := $store.i128($M.635,$p195,$i1453);
  $M.635.dup := $store.i1($M.635.dup,$p195,$i1453.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $p1461 := $bitcast.ref.ref($p195);
  $p1461.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $p1462 := $add.ref($add.ref($p1461,$mul.ref(0,16)),$mul.ref(0,1));
  $p1462.dup := $or.i1($or.i1($p1461.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $p1462.dup := 0;
  $i1463 := $load.i64($M.635,$p1462);
  $i1463.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $p1464 := $add.ref($add.ref($p1461,$mul.ref(0,16)),$mul.ref(8,1));
  $p1464.dup := $or.i1($or.i1($p1461.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $p1464.dup := 0;
  $i1465 := $load.i64($M.635,$p1464);
  $i1465.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  call $p1466, $p1466.dup := FStar_UInt128_shift_right($i1463, $i1463.dup, $i1465, $i1465.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $p1467 := $bitcast.ref.ref($p196);
  $p1467.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $p1468 := $add.ref($add.ref($p1467,$mul.ref(0,16)),$mul.ref(0,1));
  $p1468.dup := $or.i1($or.i1($p1467.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $i1469 := $extractvalue.i64($p1466,0);
  $i1469.dup := $or.i1($p1466.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $p1468.dup := 0;
  $M.636 := $store.i64($M.636,$p1468,$i1469);
  $M.636.dup := $store.i1($M.636.dup,$p1468,$i1469.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $p1470 := $add.ref($add.ref($p1467,$mul.ref(0,16)),$mul.ref(8,1));
  $p1470.dup := $or.i1($or.i1($p1467.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $i1471 := $extractvalue.i64($p1466,1);
  $i1471.dup := $or.i1($p1466.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $p1470.dup := 0;
  $M.636 := $store.i64($M.636,$p1470,$i1471);
  $M.636.dup := $store.i1($M.636.dup,$p1470,$i1471.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 50} true;
  assume {:verifier.code 0} true;
  $p196.dup := 0;
  $i1472 := $load.i128($M.636,$p196);
  $i1472.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  $p197.dup := 0;
  $M.637 := $store.i128($M.637,$p197,$i1472);
  $M.637.dup := $store.i1($M.637.dup,$p197,$i1472.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  $p1473 := $bitcast.ref.ref($p197);
  $p1473.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  $p1474 := $add.ref($add.ref($p1473,$mul.ref(0,16)),$mul.ref(0,1));
  $p1474.dup := $or.i1($or.i1($p1473.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  $p1474.dup := 0;
  $i1475 := $load.i64($M.637,$p1474);
  $i1475.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  $p1476 := $add.ref($add.ref($p1473,$mul.ref(0,16)),$mul.ref(8,1));
  $p1476.dup := $or.i1($or.i1($p1473.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  $p1476.dup := 0;
  $i1477 := $load.i64($M.637,$p1476);
  $i1477.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 267, 18} true;
  assume {:verifier.code 0} true;
  call $i1478, $i1478.dup := FStar_UInt128_uint128_to_uint64($i1475, $i1475.dup, $i1477, $i1477.dup);
  call {:cexpr "c20"} boogie_si_record_i64($i1478);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  call $p1479, $p1479.dup := FStar_UInt128_uint64_to_uint128($i1478, $i1478.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  $p1480 := $bitcast.ref.ref($p198);
  $p1480.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  $p1481 := $add.ref($add.ref($p1480,$mul.ref(0,16)),$mul.ref(0,1));
  $p1481.dup := $or.i1($or.i1($p1480.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  $i1482 := $extractvalue.i64($p1479,0);
  $i1482.dup := $or.i1($p1479.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  $p1481.dup := 0;
  $M.638 := $store.i64($M.638,$p1481,$i1482);
  $M.638.dup := $store.i1($M.638.dup,$p1481,$i1482.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  $p1483 := $add.ref($add.ref($p1480,$mul.ref(0,16)),$mul.ref(8,1));
  $p1483.dup := $or.i1($or.i1($p1480.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  $i1484 := $extractvalue.i64($p1479,1);
  $i1484.dup := $or.i1($p1479.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  $p1483.dup := 0;
  $M.638 := $store.i64($M.638,$p1483,$i1484);
  $M.638.dup := $store.i1($M.638.dup,$p1483,$i1484.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 58} true;
  assume {:verifier.code 0} true;
  $p198.dup := 0;
  $i1485 := $load.i128($M.638,$p198);
  $i1485.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p199.dup := 0;
  $M.639 := $store.i128($M.639,$p199,$i792);
  $M.639.dup := $store.i1($M.639.dup,$p199,$i792.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1486 := $bitcast.ref.ref($p199);
  $p1486.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1487 := $add.ref($add.ref($p1486,$mul.ref(0,16)),$mul.ref(0,1));
  $p1487.dup := $or.i1($or.i1($p1486.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1487.dup := 0;
  $i1488 := $load.i64($M.639,$p1487);
  $i1488.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1489 := $add.ref($add.ref($p1486,$mul.ref(0,16)),$mul.ref(8,1));
  $p1489.dup := $or.i1($or.i1($p1486.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1489.dup := 0;
  $i1490 := $load.i64($M.639,$p1489);
  $i1490.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p200.dup := 0;
  $M.640 := $store.i128($M.640,$p200,$i1485);
  $M.640.dup := $store.i1($M.640.dup,$p200,$i1485.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1491 := $bitcast.ref.ref($p200);
  $p1491.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1492 := $add.ref($add.ref($p1491,$mul.ref(0,16)),$mul.ref(0,1));
  $p1492.dup := $or.i1($or.i1($p1491.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1492.dup := 0;
  $i1493 := $load.i64($M.640,$p1492);
  $i1493.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1494 := $add.ref($add.ref($p1491,$mul.ref(0,16)),$mul.ref(8,1));
  $p1494.dup := $or.i1($or.i1($p1491.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1494.dup := 0;
  $i1495 := $load.i64($M.640,$p1494);
  $i1495.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  call $p1496, $p1496.dup := FStar_UInt128_add($i1488, $i1488.dup, $i1490, $i1490.dup, $i1493, $i1493.dup, $i1495, $i1495.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1497 := $bitcast.ref.ref($p201);
  $p1497.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1498 := $add.ref($add.ref($p1497,$mul.ref(0,16)),$mul.ref(0,1));
  $p1498.dup := $or.i1($or.i1($p1497.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $i1499 := $extractvalue.i64($p1496,0);
  $i1499.dup := $or.i1($p1496.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1498.dup := 0;
  $M.641 := $store.i64($M.641,$p1498,$i1499);
  $M.641.dup := $store.i1($M.641.dup,$p1498,$i1499.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1500 := $add.ref($add.ref($p1497,$mul.ref(0,16)),$mul.ref(8,1));
  $p1500.dup := $or.i1($or.i1($p1497.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $i1501 := $extractvalue.i64($p1496,1);
  $i1501.dup := $or.i1($p1496.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p1500.dup := 0;
  $M.641 := $store.i64($M.641,$p1500,$i1501);
  $M.641.dup := $store.i1($M.641.dup,$p1500,$i1501.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 268, 31} true;
  assume {:verifier.code 0} true;
  $p201.dup := 0;
  $i1502 := $load.i128($M.641,$p201);
  $i1502.dup := 0;
  call {:cexpr "l_2"} boogie_si_record_i128($i1502);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  $p202.dup := 0;
  $M.642 := $store.i128($M.642,$p202,$i1502);
  $M.642.dup := $store.i1($M.642.dup,$p202,$i1502.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  $p1503 := $bitcast.ref.ref($p202);
  $p1503.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  $p1504 := $add.ref($add.ref($p1503,$mul.ref(0,16)),$mul.ref(0,1));
  $p1504.dup := $or.i1($or.i1($p1503.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  $p1504.dup := 0;
  $i1505 := $load.i64($M.642,$p1504);
  $i1505.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  $p1506 := $add.ref($add.ref($p1503,$mul.ref(0,16)),$mul.ref(8,1));
  $p1506.dup := $or.i1($or.i1($p1503.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  $p1506.dup := 0;
  $i1507 := $load.i64($M.642,$p1506);
  $i1507.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 20} true;
  assume {:verifier.code 0} true;
  call $i1508, $i1508.dup := FStar_UInt128_uint128_to_uint64($i1505, $i1505.dup, $i1507, $i1507.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 269, 57} true;
  assume {:verifier.code 0} true;
  $i1509 := $and.i64($i1508,2251799813685247);
  $i1509.dup := $or.i1($i1508.dup,0);
  call {:cexpr "tmp30"} boogie_si_record_i64($i1509);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $p203.dup := 0;
  $M.643 := $store.i128($M.643,$p203,$i1502);
  $M.643.dup := $store.i1($M.643.dup,$p203,$i1502.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $p1510 := $bitcast.ref.ref($p203);
  $p1510.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $p1511 := $add.ref($add.ref($p1510,$mul.ref(0,16)),$mul.ref(0,1));
  $p1511.dup := $or.i1($or.i1($p1510.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $p1511.dup := 0;
  $i1512 := $load.i64($M.643,$p1511);
  $i1512.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $p1513 := $add.ref($add.ref($p1510,$mul.ref(0,16)),$mul.ref(8,1));
  $p1513.dup := $or.i1($or.i1($p1510.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $p1513.dup := 0;
  $i1514 := $load.i64($M.643,$p1513);
  $i1514.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  call $p1515, $p1515.dup := FStar_UInt128_shift_right($i1512, $i1512.dup, $i1514, $i1514.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $p1516 := $bitcast.ref.ref($p204);
  $p1516.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $p1517 := $add.ref($add.ref($p1516,$mul.ref(0,16)),$mul.ref(0,1));
  $p1517.dup := $or.i1($or.i1($p1516.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $i1518 := $extractvalue.i64($p1515,0);
  $i1518.dup := $or.i1($p1515.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $p1517.dup := 0;
  $M.644 := $store.i64($M.644,$p1517,$i1518);
  $M.644.dup := $store.i1($M.644.dup,$p1517,$i1518.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $p1519 := $add.ref($add.ref($p1516,$mul.ref(0,16)),$mul.ref(8,1));
  $p1519.dup := $or.i1($or.i1($p1516.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $i1520 := $extractvalue.i64($p1515,1);
  $i1520.dup := $or.i1($p1515.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $p1519.dup := 0;
  $M.644 := $store.i64($M.644,$p1519,$i1520);
  $M.644.dup := $store.i1($M.644.dup,$p1519,$i1520.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 50} true;
  assume {:verifier.code 0} true;
  $p204.dup := 0;
  $i1521 := $load.i128($M.644,$p204);
  $i1521.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  $p205.dup := 0;
  $M.645 := $store.i128($M.645,$p205,$i1521);
  $M.645.dup := $store.i1($M.645.dup,$p205,$i1521.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  $p1522 := $bitcast.ref.ref($p205);
  $p1522.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  $p1523 := $add.ref($add.ref($p1522,$mul.ref(0,16)),$mul.ref(0,1));
  $p1523.dup := $or.i1($or.i1($p1522.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  $p1523.dup := 0;
  $i1524 := $load.i64($M.645,$p1523);
  $i1524.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  $p1525 := $add.ref($add.ref($p1522,$mul.ref(0,16)),$mul.ref(8,1));
  $p1525.dup := $or.i1($or.i1($p1522.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  $p1525.dup := 0;
  $i1526 := $load.i64($M.645,$p1525);
  $i1526.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 270, 18} true;
  assume {:verifier.code 0} true;
  call $i1527, $i1527.dup := FStar_UInt128_uint128_to_uint64($i1524, $i1524.dup, $i1526, $i1526.dup);
  call {:cexpr "c30"} boogie_si_record_i64($i1527);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  call $p1528, $p1528.dup := FStar_UInt128_uint64_to_uint128($i1527, $i1527.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  $p1529 := $bitcast.ref.ref($p206);
  $p1529.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  $p1530 := $add.ref($add.ref($p1529,$mul.ref(0,16)),$mul.ref(0,1));
  $p1530.dup := $or.i1($or.i1($p1529.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  $i1531 := $extractvalue.i64($p1528,0);
  $i1531.dup := $or.i1($p1528.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  $p1530.dup := 0;
  $M.646 := $store.i64($M.646,$p1530,$i1531);
  $M.646.dup := $store.i1($M.646.dup,$p1530,$i1531.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  $p1532 := $add.ref($add.ref($p1529,$mul.ref(0,16)),$mul.ref(8,1));
  $p1532.dup := $or.i1($or.i1($p1529.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  $i1533 := $extractvalue.i64($p1528,1);
  $i1533.dup := $or.i1($p1528.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  $p1532.dup := 0;
  $M.646 := $store.i64($M.646,$p1532,$i1533);
  $M.646.dup := $store.i1($M.646.dup,$p1532,$i1533.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 58} true;
  assume {:verifier.code 0} true;
  $p206.dup := 0;
  $i1534 := $load.i128($M.646,$p206);
  $i1534.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p207.dup := 0;
  $M.647 := $store.i128($M.647,$p207,$i816);
  $M.647.dup := $store.i1($M.647.dup,$p207,$i816.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1535 := $bitcast.ref.ref($p207);
  $p1535.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1536 := $add.ref($add.ref($p1535,$mul.ref(0,16)),$mul.ref(0,1));
  $p1536.dup := $or.i1($or.i1($p1535.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1536.dup := 0;
  $i1537 := $load.i64($M.647,$p1536);
  $i1537.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1538 := $add.ref($add.ref($p1535,$mul.ref(0,16)),$mul.ref(8,1));
  $p1538.dup := $or.i1($or.i1($p1535.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1538.dup := 0;
  $i1539 := $load.i64($M.647,$p1538);
  $i1539.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p208.dup := 0;
  $M.648 := $store.i128($M.648,$p208,$i1534);
  $M.648.dup := $store.i1($M.648.dup,$p208,$i1534.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1540 := $bitcast.ref.ref($p208);
  $p1540.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1541 := $add.ref($add.ref($p1540,$mul.ref(0,16)),$mul.ref(0,1));
  $p1541.dup := $or.i1($or.i1($p1540.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1541.dup := 0;
  $i1542 := $load.i64($M.648,$p1541);
  $i1542.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1543 := $add.ref($add.ref($p1540,$mul.ref(0,16)),$mul.ref(8,1));
  $p1543.dup := $or.i1($or.i1($p1540.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1543.dup := 0;
  $i1544 := $load.i64($M.648,$p1543);
  $i1544.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  call $p1545, $p1545.dup := FStar_UInt128_add($i1537, $i1537.dup, $i1539, $i1539.dup, $i1542, $i1542.dup, $i1544, $i1544.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1546 := $bitcast.ref.ref($p209);
  $p1546.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1547 := $add.ref($add.ref($p1546,$mul.ref(0,16)),$mul.ref(0,1));
  $p1547.dup := $or.i1($or.i1($p1546.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $i1548 := $extractvalue.i64($p1545,0);
  $i1548.dup := $or.i1($p1545.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1547.dup := 0;
  $M.649 := $store.i64($M.649,$p1547,$i1548);
  $M.649.dup := $store.i1($M.649.dup,$p1547,$i1548.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1549 := $add.ref($add.ref($p1546,$mul.ref(0,16)),$mul.ref(8,1));
  $p1549.dup := $or.i1($or.i1($p1546.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $i1550 := $extractvalue.i64($p1545,1);
  $i1550.dup := $or.i1($p1545.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p1549.dup := 0;
  $M.649 := $store.i64($M.649,$p1549,$i1550);
  $M.649.dup := $store.i1($M.649.dup,$p1549,$i1550.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 271, 31} true;
  assume {:verifier.code 0} true;
  $p209.dup := 0;
  $i1551 := $load.i128($M.649,$p209);
  $i1551.dup := 0;
  call {:cexpr "l_3"} boogie_si_record_i128($i1551);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  $p210.dup := 0;
  $M.650 := $store.i128($M.650,$p210,$i1551);
  $M.650.dup := $store.i1($M.650.dup,$p210,$i1551.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  $p1552 := $bitcast.ref.ref($p210);
  $p1552.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  $p1553 := $add.ref($add.ref($p1552,$mul.ref(0,16)),$mul.ref(0,1));
  $p1553.dup := $or.i1($or.i1($p1552.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  $p1553.dup := 0;
  $i1554 := $load.i64($M.650,$p1553);
  $i1554.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  $p1555 := $add.ref($add.ref($p1552,$mul.ref(0,16)),$mul.ref(8,1));
  $p1555.dup := $or.i1($or.i1($p1552.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  $p1555.dup := 0;
  $i1556 := $load.i64($M.650,$p1555);
  $i1556.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 20} true;
  assume {:verifier.code 0} true;
  call $i1557, $i1557.dup := FStar_UInt128_uint128_to_uint64($i1554, $i1554.dup, $i1556, $i1556.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 272, 57} true;
  assume {:verifier.code 0} true;
  $i1558 := $and.i64($i1557,2251799813685247);
  $i1558.dup := $or.i1($i1557.dup,0);
  call {:cexpr "tmp40"} boogie_si_record_i64($i1558);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $p211.dup := 0;
  $M.651 := $store.i128($M.651,$p211,$i1551);
  $M.651.dup := $store.i1($M.651.dup,$p211,$i1551.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $p1559 := $bitcast.ref.ref($p211);
  $p1559.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $p1560 := $add.ref($add.ref($p1559,$mul.ref(0,16)),$mul.ref(0,1));
  $p1560.dup := $or.i1($or.i1($p1559.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $p1560.dup := 0;
  $i1561 := $load.i64($M.651,$p1560);
  $i1561.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $p1562 := $add.ref($add.ref($p1559,$mul.ref(0,16)),$mul.ref(8,1));
  $p1562.dup := $or.i1($or.i1($p1559.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $p1562.dup := 0;
  $i1563 := $load.i64($M.651,$p1562);
  $i1563.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  call $p1564, $p1564.dup := FStar_UInt128_shift_right($i1561, $i1561.dup, $i1563, $i1563.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $p1565 := $bitcast.ref.ref($p212);
  $p1565.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $p1566 := $add.ref($add.ref($p1565,$mul.ref(0,16)),$mul.ref(0,1));
  $p1566.dup := $or.i1($or.i1($p1565.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $i1567 := $extractvalue.i64($p1564,0);
  $i1567.dup := $or.i1($p1564.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $p1566.dup := 0;
  $M.652 := $store.i64($M.652,$p1566,$i1567);
  $M.652.dup := $store.i1($M.652.dup,$p1566,$i1567.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $p1568 := $add.ref($add.ref($p1565,$mul.ref(0,16)),$mul.ref(8,1));
  $p1568.dup := $or.i1($or.i1($p1565.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $i1569 := $extractvalue.i64($p1564,1);
  $i1569.dup := $or.i1($p1564.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $p1568.dup := 0;
  $M.652 := $store.i64($M.652,$p1568,$i1569);
  $M.652.dup := $store.i1($M.652.dup,$p1568,$i1569.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 50} true;
  assume {:verifier.code 0} true;
  $p212.dup := 0;
  $i1570 := $load.i128($M.652,$p212);
  $i1570.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  $p213.dup := 0;
  $M.653 := $store.i128($M.653,$p213,$i1570);
  $M.653.dup := $store.i1($M.653.dup,$p213,$i1570.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  $p1571 := $bitcast.ref.ref($p213);
  $p1571.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  $p1572 := $add.ref($add.ref($p1571,$mul.ref(0,16)),$mul.ref(0,1));
  $p1572.dup := $or.i1($or.i1($p1571.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  $p1572.dup := 0;
  $i1573 := $load.i64($M.653,$p1572);
  $i1573.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  $p1574 := $add.ref($add.ref($p1571,$mul.ref(0,16)),$mul.ref(8,1));
  $p1574.dup := $or.i1($or.i1($p1571.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  $p1574.dup := 0;
  $i1575 := $load.i64($M.653,$p1574);
  $i1575.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 273, 18} true;
  assume {:verifier.code 0} true;
  call $i1576, $i1576.dup := FStar_UInt128_uint128_to_uint64($i1573, $i1573.dup, $i1575, $i1575.dup);
  call {:cexpr "c40"} boogie_si_record_i64($i1576);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 274, 30} true;
  assume {:verifier.code 0} true;
  $i1577 := $mul.i64($i1576,19);
  $i1577.dup := $or.i1($i1576.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 274, 24} true;
  assume {:verifier.code 0} true;
  $i1578 := $add.i64($i1362,$i1577);
  $i1578.dup := 0;
  call {:cexpr "l_4"} boogie_si_record_i64($i1578);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 275, 24} true;
  assume {:verifier.code 0} true;
  $i1579 := $and.i64($i1578,2251799813685247);
  $i1579.dup := $or.i1($i1578.dup,0);
  call {:cexpr "tmp0_"} boogie_si_record_i64($i1579);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 276, 22} true;
  assume {:verifier.code 0} true;
  $i1580 := $lshr.i64($i1578,51);
  $i1580.dup := $or.i1($i1578.dup,0);
  call {:cexpr "c50"} boogie_si_record_i64($i1580);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 278, 25} true;
  assume {:verifier.code 0} true;
  $i1581 := $add.i64($i1411,$i1580);
  $i1581.dup := 0;
  call {:cexpr "o112"} boogie_si_record_i64($i1581);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  call $p1582, $p1582.dup := FStar_UInt128_uint64_to_uint128(0, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  $p1583 := $bitcast.ref.ref($p214);
  $p1583.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  $p1584 := $add.ref($add.ref($p1583,$mul.ref(0,16)),$mul.ref(0,1));
  $p1584.dup := $or.i1($or.i1($p1583.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  $i1585 := $extractvalue.i64($p1582,0);
  $i1585.dup := $or.i1($p1582.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  $p1584.dup := 0;
  $M.654 := $store.i64($M.654,$p1584,$i1585);
  $M.654.dup := $store.i1($M.654.dup,$p1584,$i1585.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  $p1586 := $add.ref($add.ref($p1583,$mul.ref(0,16)),$mul.ref(8,1));
  $p1586.dup := $or.i1($or.i1($p1583.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  $i1587 := $extractvalue.i64($p1582,1);
  $i1587.dup := $or.i1($p1582.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  $p1586.dup := 0;
  $M.654 := $store.i64($M.654,$p1586,$i1587);
  $M.654.dup := $store.i1($M.654.dup,$p1586,$i1587.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 36} true;
  assume {:verifier.code 0} true;
  $p214.dup := 0;
  $i1588 := $load.i128($M.654,$p214);
  $i1588.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p215.dup := 0;
  $M.655 := $store.i128($M.655,$p215,$i1235);
  $M.655.dup := $store.i1($M.655.dup,$p215,$i1235.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1589 := $bitcast.ref.ref($p215);
  $p1589.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1590 := $add.ref($add.ref($p1589,$mul.ref(0,16)),$mul.ref(0,1));
  $p1590.dup := $or.i1($or.i1($p1589.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1590.dup := 0;
  $i1591 := $load.i64($M.655,$p1590);
  $i1591.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1592 := $add.ref($add.ref($p1589,$mul.ref(0,16)),$mul.ref(8,1));
  $p1592.dup := $or.i1($or.i1($p1589.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1592.dup := 0;
  $i1593 := $load.i64($M.655,$p1592);
  $i1593.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p216.dup := 0;
  $M.656 := $store.i128($M.656,$p216,$i1588);
  $M.656.dup := $store.i1($M.656.dup,$p216,$i1588.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1594 := $bitcast.ref.ref($p216);
  $p1594.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1595 := $add.ref($add.ref($p1594,$mul.ref(0,16)),$mul.ref(0,1));
  $p1595.dup := $or.i1($or.i1($p1594.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1595.dup := 0;
  $i1596 := $load.i64($M.656,$p1595);
  $i1596.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1597 := $add.ref($add.ref($p1594,$mul.ref(0,16)),$mul.ref(8,1));
  $p1597.dup := $or.i1($or.i1($p1594.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1597.dup := 0;
  $i1598 := $load.i64($M.656,$p1597);
  $i1598.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  call $p1599, $p1599.dup := FStar_UInt128_add($i1591, $i1591.dup, $i1593, $i1593.dup, $i1596, $i1596.dup, $i1598, $i1598.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1600 := $bitcast.ref.ref($p217);
  $p1600.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1601 := $add.ref($add.ref($p1600,$mul.ref(0,16)),$mul.ref(0,1));
  $p1601.dup := $or.i1($or.i1($p1600.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $i1602 := $extractvalue.i64($p1599,0);
  $i1602.dup := $or.i1($p1599.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1601.dup := 0;
  $M.657 := $store.i64($M.657,$p1601,$i1602);
  $M.657.dup := $store.i1($M.657.dup,$p1601,$i1602.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1603 := $add.ref($add.ref($p1600,$mul.ref(0,16)),$mul.ref(8,1));
  $p1603.dup := $or.i1($or.i1($p1600.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $i1604 := $extractvalue.i64($p1599,1);
  $i1604.dup := $or.i1($p1599.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p1603.dup := 0;
  $M.657 := $store.i64($M.657,$p1603,$i1604);
  $M.657.dup := $store.i1($M.657.dup,$p1603,$i1604.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 283, 9} true;
  assume {:verifier.code 0} true;
  $p217.dup := 0;
  $i1605 := $load.i128($M.657,$p217);
  $i1605.dup := 0;
  call {:cexpr "l_5"} boogie_si_record_i128($i1605);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  $p218.dup := 0;
  $M.658 := $store.i128($M.658,$p218,$i1605);
  $M.658.dup := $store.i1($M.658.dup,$p218,$i1605.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  $p1606 := $bitcast.ref.ref($p218);
  $p1606.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  $p1607 := $add.ref($add.ref($p1606,$mul.ref(0,16)),$mul.ref(0,1));
  $p1607.dup := $or.i1($or.i1($p1606.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  $p1607.dup := 0;
  $i1608 := $load.i64($M.658,$p1607);
  $i1608.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  $p1609 := $add.ref($add.ref($p1606,$mul.ref(0,16)),$mul.ref(8,1));
  $p1609.dup := $or.i1($or.i1($p1606.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  $p1609.dup := 0;
  $i1610 := $load.i64($M.658,$p1609);
  $i1610.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 19} true;
  assume {:verifier.code 0} true;
  call $i1611, $i1611.dup := FStar_UInt128_uint128_to_uint64($i1608, $i1608.dup, $i1610, $i1610.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 284, 56} true;
  assume {:verifier.code 0} true;
  $i1612 := $and.i64($i1611,2251799813685247);
  $i1612.dup := $or.i1($i1611.dup,0);
  call {:cexpr "tmp0"} boogie_si_record_i64($i1612);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $p219.dup := 0;
  $M.659 := $store.i128($M.659,$p219,$i1605);
  $M.659.dup := $store.i1($M.659.dup,$p219,$i1605.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $p1613 := $bitcast.ref.ref($p219);
  $p1613.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $p1614 := $add.ref($add.ref($p1613,$mul.ref(0,16)),$mul.ref(0,1));
  $p1614.dup := $or.i1($or.i1($p1613.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $p1614.dup := 0;
  $i1615 := $load.i64($M.659,$p1614);
  $i1615.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $p1616 := $add.ref($add.ref($p1613,$mul.ref(0,16)),$mul.ref(8,1));
  $p1616.dup := $or.i1($or.i1($p1613.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $p1616.dup := 0;
  $i1617 := $load.i64($M.659,$p1616);
  $i1617.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  call $p1618, $p1618.dup := FStar_UInt128_shift_right($i1615, $i1615.dup, $i1617, $i1617.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $p1619 := $bitcast.ref.ref($p220);
  $p1619.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $p1620 := $add.ref($add.ref($p1619,$mul.ref(0,16)),$mul.ref(0,1));
  $p1620.dup := $or.i1($or.i1($p1619.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $i1621 := $extractvalue.i64($p1618,0);
  $i1621.dup := $or.i1($p1618.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $p1620.dup := 0;
  $M.660 := $store.i64($M.660,$p1620,$i1621);
  $M.660.dup := $store.i1($M.660.dup,$p1620,$i1621.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $p1622 := $add.ref($add.ref($p1619,$mul.ref(0,16)),$mul.ref(8,1));
  $p1622.dup := $or.i1($or.i1($p1619.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $i1623 := $extractvalue.i64($p1618,1);
  $i1623.dup := $or.i1($p1618.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $p1622.dup := 0;
  $M.660 := $store.i64($M.660,$p1622,$i1623);
  $M.660.dup := $store.i1($M.660.dup,$p1622,$i1623.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 49} true;
  assume {:verifier.code 0} true;
  $p220.dup := 0;
  $i1624 := $load.i128($M.660,$p220);
  $i1624.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  $p221.dup := 0;
  $M.661 := $store.i128($M.661,$p221,$i1624);
  $M.661.dup := $store.i1($M.661.dup,$p221,$i1624.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  $p1625 := $bitcast.ref.ref($p221);
  $p1625.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  $p1626 := $add.ref($add.ref($p1625,$mul.ref(0,16)),$mul.ref(0,1));
  $p1626.dup := $or.i1($or.i1($p1625.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  $p1626.dup := 0;
  $i1627 := $load.i64($M.661,$p1626);
  $i1627.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  $p1628 := $add.ref($add.ref($p1625,$mul.ref(0,16)),$mul.ref(8,1));
  $p1628.dup := $or.i1($or.i1($p1625.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  $p1628.dup := 0;
  $i1629 := $load.i64($M.661,$p1628);
  $i1629.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 285, 17} true;
  assume {:verifier.code 0} true;
  call $i1630, $i1630.dup := FStar_UInt128_uint128_to_uint64($i1627, $i1627.dup, $i1629, $i1629.dup);
  call {:cexpr "c0"} boogie_si_record_i64($i1630);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  call $p1631, $p1631.dup := FStar_UInt128_uint64_to_uint128($i1630, $i1630.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  $p1632 := $bitcast.ref.ref($p222);
  $p1632.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  $p1633 := $add.ref($add.ref($p1632,$mul.ref(0,16)),$mul.ref(0,1));
  $p1633.dup := $or.i1($or.i1($p1632.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  $i1634 := $extractvalue.i64($p1631,0);
  $i1634.dup := $or.i1($p1631.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  $p1633.dup := 0;
  $M.662 := $store.i64($M.662,$p1633,$i1634);
  $M.662.dup := $store.i1($M.662.dup,$p1633,$i1634.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  $p1635 := $add.ref($add.ref($p1632,$mul.ref(0,16)),$mul.ref(8,1));
  $p1635.dup := $or.i1($or.i1($p1632.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  $i1636 := $extractvalue.i64($p1631,1);
  $i1636.dup := $or.i1($p1631.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  $p1635.dup := 0;
  $M.662 := $store.i64($M.662,$p1635,$i1636);
  $M.662.dup := $store.i1($M.662.dup,$p1635,$i1636.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 58} true;
  assume {:verifier.code 0} true;
  $p222.dup := 0;
  $i1637 := $load.i128($M.662,$p222);
  $i1637.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p223.dup := 0;
  $M.663 := $store.i128($M.663,$p223,$i1259);
  $M.663.dup := $store.i1($M.663.dup,$p223,$i1259.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1638 := $bitcast.ref.ref($p223);
  $p1638.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1639 := $add.ref($add.ref($p1638,$mul.ref(0,16)),$mul.ref(0,1));
  $p1639.dup := $or.i1($or.i1($p1638.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1639.dup := 0;
  $i1640 := $load.i64($M.663,$p1639);
  $i1640.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1641 := $add.ref($add.ref($p1638,$mul.ref(0,16)),$mul.ref(8,1));
  $p1641.dup := $or.i1($or.i1($p1638.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1641.dup := 0;
  $i1642 := $load.i64($M.663,$p1641);
  $i1642.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p224.dup := 0;
  $M.664 := $store.i128($M.664,$p224,$i1637);
  $M.664.dup := $store.i1($M.664.dup,$p224,$i1637.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1643 := $bitcast.ref.ref($p224);
  $p1643.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1644 := $add.ref($add.ref($p1643,$mul.ref(0,16)),$mul.ref(0,1));
  $p1644.dup := $or.i1($or.i1($p1643.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1644.dup := 0;
  $i1645 := $load.i64($M.664,$p1644);
  $i1645.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1646 := $add.ref($add.ref($p1643,$mul.ref(0,16)),$mul.ref(8,1));
  $p1646.dup := $or.i1($or.i1($p1643.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1646.dup := 0;
  $i1647 := $load.i64($M.664,$p1646);
  $i1647.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  call $p1648, $p1648.dup := FStar_UInt128_add($i1640, $i1640.dup, $i1642, $i1642.dup, $i1645, $i1645.dup, $i1647, $i1647.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1649 := $bitcast.ref.ref($p225);
  $p1649.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1650 := $add.ref($add.ref($p1649,$mul.ref(0,16)),$mul.ref(0,1));
  $p1650.dup := $or.i1($or.i1($p1649.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $i1651 := $extractvalue.i64($p1648,0);
  $i1651.dup := $or.i1($p1648.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1650.dup := 0;
  $M.665 := $store.i64($M.665,$p1650,$i1651);
  $M.665.dup := $store.i1($M.665.dup,$p1650,$i1651.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1652 := $add.ref($add.ref($p1649,$mul.ref(0,16)),$mul.ref(8,1));
  $p1652.dup := $or.i1($or.i1($p1649.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $i1653 := $extractvalue.i64($p1648,1);
  $i1653.dup := $or.i1($p1648.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p1652.dup := 0;
  $M.665 := $store.i64($M.665,$p1652,$i1653);
  $M.665.dup := $store.i1($M.665.dup,$p1652,$i1653.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 286, 31} true;
  assume {:verifier.code 0} true;
  $p225.dup := 0;
  $i1654 := $load.i128($M.665,$p225);
  $i1654.dup := 0;
  call {:cexpr "l_6"} boogie_si_record_i128($i1654);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  $p226.dup := 0;
  $M.666 := $store.i128($M.666,$p226,$i1654);
  $M.666.dup := $store.i1($M.666.dup,$p226,$i1654.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  $p1655 := $bitcast.ref.ref($p226);
  $p1655.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  $p1656 := $add.ref($add.ref($p1655,$mul.ref(0,16)),$mul.ref(0,1));
  $p1656.dup := $or.i1($or.i1($p1655.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  $p1656.dup := 0;
  $i1657 := $load.i64($M.666,$p1656);
  $i1657.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  $p1658 := $add.ref($add.ref($p1655,$mul.ref(0,16)),$mul.ref(8,1));
  $p1658.dup := $or.i1($or.i1($p1655.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  $p1658.dup := 0;
  $i1659 := $load.i64($M.666,$p1658);
  $i1659.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 19} true;
  assume {:verifier.code 0} true;
  call $i1660, $i1660.dup := FStar_UInt128_uint128_to_uint64($i1657, $i1657.dup, $i1659, $i1659.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 287, 56} true;
  assume {:verifier.code 0} true;
  $i1661 := $and.i64($i1660,2251799813685247);
  $i1661.dup := $or.i1($i1660.dup,0);
  call {:cexpr "tmp1"} boogie_si_record_i64($i1661);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $p227.dup := 0;
  $M.667 := $store.i128($M.667,$p227,$i1654);
  $M.667.dup := $store.i1($M.667.dup,$p227,$i1654.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $p1662 := $bitcast.ref.ref($p227);
  $p1662.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $p1663 := $add.ref($add.ref($p1662,$mul.ref(0,16)),$mul.ref(0,1));
  $p1663.dup := $or.i1($or.i1($p1662.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $p1663.dup := 0;
  $i1664 := $load.i64($M.667,$p1663);
  $i1664.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $p1665 := $add.ref($add.ref($p1662,$mul.ref(0,16)),$mul.ref(8,1));
  $p1665.dup := $or.i1($or.i1($p1662.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $p1665.dup := 0;
  $i1666 := $load.i64($M.667,$p1665);
  $i1666.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  call $p1667, $p1667.dup := FStar_UInt128_shift_right($i1664, $i1664.dup, $i1666, $i1666.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $p1668 := $bitcast.ref.ref($p228);
  $p1668.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $p1669 := $add.ref($add.ref($p1668,$mul.ref(0,16)),$mul.ref(0,1));
  $p1669.dup := $or.i1($or.i1($p1668.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $i1670 := $extractvalue.i64($p1667,0);
  $i1670.dup := $or.i1($p1667.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $p1669.dup := 0;
  $M.668 := $store.i64($M.668,$p1669,$i1670);
  $M.668.dup := $store.i1($M.668.dup,$p1669,$i1670.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $p1671 := $add.ref($add.ref($p1668,$mul.ref(0,16)),$mul.ref(8,1));
  $p1671.dup := $or.i1($or.i1($p1668.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $i1672 := $extractvalue.i64($p1667,1);
  $i1672.dup := $or.i1($p1667.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $p1671.dup := 0;
  $M.668 := $store.i64($M.668,$p1671,$i1672);
  $M.668.dup := $store.i1($M.668.dup,$p1671,$i1672.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 49} true;
  assume {:verifier.code 0} true;
  $p228.dup := 0;
  $i1673 := $load.i128($M.668,$p228);
  $i1673.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  $p229.dup := 0;
  $M.669 := $store.i128($M.669,$p229,$i1673);
  $M.669.dup := $store.i1($M.669.dup,$p229,$i1673.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  $p1674 := $bitcast.ref.ref($p229);
  $p1674.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  $p1675 := $add.ref($add.ref($p1674,$mul.ref(0,16)),$mul.ref(0,1));
  $p1675.dup := $or.i1($or.i1($p1674.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  $p1675.dup := 0;
  $i1676 := $load.i64($M.669,$p1675);
  $i1676.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  $p1677 := $add.ref($add.ref($p1674,$mul.ref(0,16)),$mul.ref(8,1));
  $p1677.dup := $or.i1($or.i1($p1674.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  $p1677.dup := 0;
  $i1678 := $load.i64($M.669,$p1677);
  $i1678.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 288, 17} true;
  assume {:verifier.code 0} true;
  call $i1679, $i1679.dup := FStar_UInt128_uint128_to_uint64($i1676, $i1676.dup, $i1678, $i1678.dup);
  call {:cexpr "c1"} boogie_si_record_i64($i1679);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  call $p1680, $p1680.dup := FStar_UInt128_uint64_to_uint128($i1679, $i1679.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  $p1681 := $bitcast.ref.ref($p230);
  $p1681.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  $p1682 := $add.ref($add.ref($p1681,$mul.ref(0,16)),$mul.ref(0,1));
  $p1682.dup := $or.i1($or.i1($p1681.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  $i1683 := $extractvalue.i64($p1680,0);
  $i1683.dup := $or.i1($p1680.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  $p1682.dup := 0;
  $M.670 := $store.i64($M.670,$p1682,$i1683);
  $M.670.dup := $store.i1($M.670.dup,$p1682,$i1683.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  $p1684 := $add.ref($add.ref($p1681,$mul.ref(0,16)),$mul.ref(8,1));
  $p1684.dup := $or.i1($or.i1($p1681.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  $i1685 := $extractvalue.i64($p1680,1);
  $i1685.dup := $or.i1($p1680.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  $p1684.dup := 0;
  $M.670 := $store.i64($M.670,$p1684,$i1685);
  $M.670.dup := $store.i1($M.670.dup,$p1684,$i1685.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 58} true;
  assume {:verifier.code 0} true;
  $p230.dup := 0;
  $i1686 := $load.i128($M.670,$p230);
  $i1686.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p231.dup := 0;
  $M.671 := $store.i128($M.671,$p231,$i1283);
  $M.671.dup := $store.i1($M.671.dup,$p231,$i1283.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1687 := $bitcast.ref.ref($p231);
  $p1687.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1688 := $add.ref($add.ref($p1687,$mul.ref(0,16)),$mul.ref(0,1));
  $p1688.dup := $or.i1($or.i1($p1687.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1688.dup := 0;
  $i1689 := $load.i64($M.671,$p1688);
  $i1689.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1690 := $add.ref($add.ref($p1687,$mul.ref(0,16)),$mul.ref(8,1));
  $p1690.dup := $or.i1($or.i1($p1687.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1690.dup := 0;
  $i1691 := $load.i64($M.671,$p1690);
  $i1691.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p232.dup := 0;
  $M.672 := $store.i128($M.672,$p232,$i1686);
  $M.672.dup := $store.i1($M.672.dup,$p232,$i1686.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1692 := $bitcast.ref.ref($p232);
  $p1692.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1693 := $add.ref($add.ref($p1692,$mul.ref(0,16)),$mul.ref(0,1));
  $p1693.dup := $or.i1($or.i1($p1692.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1693.dup := 0;
  $i1694 := $load.i64($M.672,$p1693);
  $i1694.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1695 := $add.ref($add.ref($p1692,$mul.ref(0,16)),$mul.ref(8,1));
  $p1695.dup := $or.i1($or.i1($p1692.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1695.dup := 0;
  $i1696 := $load.i64($M.672,$p1695);
  $i1696.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  call $p1697, $p1697.dup := FStar_UInt128_add($i1689, $i1689.dup, $i1691, $i1691.dup, $i1694, $i1694.dup, $i1696, $i1696.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1698 := $bitcast.ref.ref($p233);
  $p1698.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1699 := $add.ref($add.ref($p1698,$mul.ref(0,16)),$mul.ref(0,1));
  $p1699.dup := $or.i1($or.i1($p1698.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $i1700 := $extractvalue.i64($p1697,0);
  $i1700.dup := $or.i1($p1697.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1699.dup := 0;
  $M.673 := $store.i64($M.673,$p1699,$i1700);
  $M.673.dup := $store.i1($M.673.dup,$p1699,$i1700.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1701 := $add.ref($add.ref($p1698,$mul.ref(0,16)),$mul.ref(8,1));
  $p1701.dup := $or.i1($or.i1($p1698.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $i1702 := $extractvalue.i64($p1697,1);
  $i1702.dup := $or.i1($p1697.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p1701.dup := 0;
  $M.673 := $store.i64($M.673,$p1701,$i1702);
  $M.673.dup := $store.i1($M.673.dup,$p1701,$i1702.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 289, 31} true;
  assume {:verifier.code 0} true;
  $p233.dup := 0;
  $i1703 := $load.i128($M.673,$p233);
  $i1703.dup := 0;
  call {:cexpr "l_7"} boogie_si_record_i128($i1703);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  $p234.dup := 0;
  $M.674 := $store.i128($M.674,$p234,$i1703);
  $M.674.dup := $store.i1($M.674.dup,$p234,$i1703.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  $p1704 := $bitcast.ref.ref($p234);
  $p1704.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  $p1705 := $add.ref($add.ref($p1704,$mul.ref(0,16)),$mul.ref(0,1));
  $p1705.dup := $or.i1($or.i1($p1704.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  $p1705.dup := 0;
  $i1706 := $load.i64($M.674,$p1705);
  $i1706.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  $p1707 := $add.ref($add.ref($p1704,$mul.ref(0,16)),$mul.ref(8,1));
  $p1707.dup := $or.i1($or.i1($p1704.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  $p1707.dup := 0;
  $i1708 := $load.i64($M.674,$p1707);
  $i1708.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 19} true;
  assume {:verifier.code 0} true;
  call $i1709, $i1709.dup := FStar_UInt128_uint128_to_uint64($i1706, $i1706.dup, $i1708, $i1708.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 290, 56} true;
  assume {:verifier.code 0} true;
  $i1710 := $and.i64($i1709,2251799813685247);
  $i1710.dup := $or.i1($i1709.dup,0);
  call {:cexpr "tmp2"} boogie_si_record_i64($i1710);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $p235.dup := 0;
  $M.675 := $store.i128($M.675,$p235,$i1703);
  $M.675.dup := $store.i1($M.675.dup,$p235,$i1703.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $p1711 := $bitcast.ref.ref($p235);
  $p1711.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $p1712 := $add.ref($add.ref($p1711,$mul.ref(0,16)),$mul.ref(0,1));
  $p1712.dup := $or.i1($or.i1($p1711.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $p1712.dup := 0;
  $i1713 := $load.i64($M.675,$p1712);
  $i1713.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $p1714 := $add.ref($add.ref($p1711,$mul.ref(0,16)),$mul.ref(8,1));
  $p1714.dup := $or.i1($or.i1($p1711.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $p1714.dup := 0;
  $i1715 := $load.i64($M.675,$p1714);
  $i1715.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  call $p1716, $p1716.dup := FStar_UInt128_shift_right($i1713, $i1713.dup, $i1715, $i1715.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $p1717 := $bitcast.ref.ref($p236);
  $p1717.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $p1718 := $add.ref($add.ref($p1717,$mul.ref(0,16)),$mul.ref(0,1));
  $p1718.dup := $or.i1($or.i1($p1717.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $i1719 := $extractvalue.i64($p1716,0);
  $i1719.dup := $or.i1($p1716.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $p1718.dup := 0;
  $M.676 := $store.i64($M.676,$p1718,$i1719);
  $M.676.dup := $store.i1($M.676.dup,$p1718,$i1719.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $p1720 := $add.ref($add.ref($p1717,$mul.ref(0,16)),$mul.ref(8,1));
  $p1720.dup := $or.i1($or.i1($p1717.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $i1721 := $extractvalue.i64($p1716,1);
  $i1721.dup := $or.i1($p1716.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $p1720.dup := 0;
  $M.676 := $store.i64($M.676,$p1720,$i1721);
  $M.676.dup := $store.i1($M.676.dup,$p1720,$i1721.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 49} true;
  assume {:verifier.code 0} true;
  $p236.dup := 0;
  $i1722 := $load.i128($M.676,$p236);
  $i1722.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  $p237.dup := 0;
  $M.677 := $store.i128($M.677,$p237,$i1722);
  $M.677.dup := $store.i1($M.677.dup,$p237,$i1722.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  $p1723 := $bitcast.ref.ref($p237);
  $p1723.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  $p1724 := $add.ref($add.ref($p1723,$mul.ref(0,16)),$mul.ref(0,1));
  $p1724.dup := $or.i1($or.i1($p1723.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  $p1724.dup := 0;
  $i1725 := $load.i64($M.677,$p1724);
  $i1725.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  $p1726 := $add.ref($add.ref($p1723,$mul.ref(0,16)),$mul.ref(8,1));
  $p1726.dup := $or.i1($or.i1($p1723.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  $p1726.dup := 0;
  $i1727 := $load.i64($M.677,$p1726);
  $i1727.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 291, 17} true;
  assume {:verifier.code 0} true;
  call $i1728, $i1728.dup := FStar_UInt128_uint128_to_uint64($i1725, $i1725.dup, $i1727, $i1727.dup);
  call {:cexpr "c2"} boogie_si_record_i64($i1728);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  call $p1729, $p1729.dup := FStar_UInt128_uint64_to_uint128($i1728, $i1728.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  $p1730 := $bitcast.ref.ref($p238);
  $p1730.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  $p1731 := $add.ref($add.ref($p1730,$mul.ref(0,16)),$mul.ref(0,1));
  $p1731.dup := $or.i1($or.i1($p1730.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  $i1732 := $extractvalue.i64($p1729,0);
  $i1732.dup := $or.i1($p1729.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  $p1731.dup := 0;
  $M.678 := $store.i64($M.678,$p1731,$i1732);
  $M.678.dup := $store.i1($M.678.dup,$p1731,$i1732.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  $p1733 := $add.ref($add.ref($p1730,$mul.ref(0,16)),$mul.ref(8,1));
  $p1733.dup := $or.i1($or.i1($p1730.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  $i1734 := $extractvalue.i64($p1729,1);
  $i1734.dup := $or.i1($p1729.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  $p1733.dup := 0;
  $M.678 := $store.i64($M.678,$p1733,$i1734);
  $M.678.dup := $store.i1($M.678.dup,$p1733,$i1734.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 58} true;
  assume {:verifier.code 0} true;
  $p238.dup := 0;
  $i1735 := $load.i128($M.678,$p238);
  $i1735.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p239.dup := 0;
  $M.679 := $store.i128($M.679,$p239,$i1307);
  $M.679.dup := $store.i1($M.679.dup,$p239,$i1307.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1736 := $bitcast.ref.ref($p239);
  $p1736.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1737 := $add.ref($add.ref($p1736,$mul.ref(0,16)),$mul.ref(0,1));
  $p1737.dup := $or.i1($or.i1($p1736.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1737.dup := 0;
  $i1738 := $load.i64($M.679,$p1737);
  $i1738.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1739 := $add.ref($add.ref($p1736,$mul.ref(0,16)),$mul.ref(8,1));
  $p1739.dup := $or.i1($or.i1($p1736.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1739.dup := 0;
  $i1740 := $load.i64($M.679,$p1739);
  $i1740.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p240.dup := 0;
  $M.680 := $store.i128($M.680,$p240,$i1735);
  $M.680.dup := $store.i1($M.680.dup,$p240,$i1735.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1741 := $bitcast.ref.ref($p240);
  $p1741.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1742 := $add.ref($add.ref($p1741,$mul.ref(0,16)),$mul.ref(0,1));
  $p1742.dup := $or.i1($or.i1($p1741.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1742.dup := 0;
  $i1743 := $load.i64($M.680,$p1742);
  $i1743.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1744 := $add.ref($add.ref($p1741,$mul.ref(0,16)),$mul.ref(8,1));
  $p1744.dup := $or.i1($or.i1($p1741.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1744.dup := 0;
  $i1745 := $load.i64($M.680,$p1744);
  $i1745.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  call $p1746, $p1746.dup := FStar_UInt128_add($i1738, $i1738.dup, $i1740, $i1740.dup, $i1743, $i1743.dup, $i1745, $i1745.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1747 := $bitcast.ref.ref($p241);
  $p1747.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1748 := $add.ref($add.ref($p1747,$mul.ref(0,16)),$mul.ref(0,1));
  $p1748.dup := $or.i1($or.i1($p1747.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $i1749 := $extractvalue.i64($p1746,0);
  $i1749.dup := $or.i1($p1746.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1748.dup := 0;
  $M.681 := $store.i64($M.681,$p1748,$i1749);
  $M.681.dup := $store.i1($M.681.dup,$p1748,$i1749.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1750 := $add.ref($add.ref($p1747,$mul.ref(0,16)),$mul.ref(8,1));
  $p1750.dup := $or.i1($or.i1($p1747.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $i1751 := $extractvalue.i64($p1746,1);
  $i1751.dup := $or.i1($p1746.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p1750.dup := 0;
  $M.681 := $store.i64($M.681,$p1750,$i1751);
  $M.681.dup := $store.i1($M.681.dup,$p1750,$i1751.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 292, 31} true;
  assume {:verifier.code 0} true;
  $p241.dup := 0;
  $i1752 := $load.i128($M.681,$p241);
  $i1752.dup := 0;
  call {:cexpr "l_8"} boogie_si_record_i128($i1752);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  $p242.dup := 0;
  $M.682 := $store.i128($M.682,$p242,$i1752);
  $M.682.dup := $store.i1($M.682.dup,$p242,$i1752.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  $p1753 := $bitcast.ref.ref($p242);
  $p1753.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  $p1754 := $add.ref($add.ref($p1753,$mul.ref(0,16)),$mul.ref(0,1));
  $p1754.dup := $or.i1($or.i1($p1753.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  $p1754.dup := 0;
  $i1755 := $load.i64($M.682,$p1754);
  $i1755.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  $p1756 := $add.ref($add.ref($p1753,$mul.ref(0,16)),$mul.ref(8,1));
  $p1756.dup := $or.i1($or.i1($p1753.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  $p1756.dup := 0;
  $i1757 := $load.i64($M.682,$p1756);
  $i1757.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 19} true;
  assume {:verifier.code 0} true;
  call $i1758, $i1758.dup := FStar_UInt128_uint128_to_uint64($i1755, $i1755.dup, $i1757, $i1757.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 293, 56} true;
  assume {:verifier.code 0} true;
  $i1759 := $and.i64($i1758,2251799813685247);
  $i1759.dup := $or.i1($i1758.dup,0);
  call {:cexpr "tmp3"} boogie_si_record_i64($i1759);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $p243.dup := 0;
  $M.683 := $store.i128($M.683,$p243,$i1752);
  $M.683.dup := $store.i1($M.683.dup,$p243,$i1752.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $p1760 := $bitcast.ref.ref($p243);
  $p1760.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $p1761 := $add.ref($add.ref($p1760,$mul.ref(0,16)),$mul.ref(0,1));
  $p1761.dup := $or.i1($or.i1($p1760.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $p1761.dup := 0;
  $i1762 := $load.i64($M.683,$p1761);
  $i1762.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $p1763 := $add.ref($add.ref($p1760,$mul.ref(0,16)),$mul.ref(8,1));
  $p1763.dup := $or.i1($or.i1($p1760.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $p1763.dup := 0;
  $i1764 := $load.i64($M.683,$p1763);
  $i1764.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  call $p1765, $p1765.dup := FStar_UInt128_shift_right($i1762, $i1762.dup, $i1764, $i1764.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $p1766 := $bitcast.ref.ref($p244);
  $p1766.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $p1767 := $add.ref($add.ref($p1766,$mul.ref(0,16)),$mul.ref(0,1));
  $p1767.dup := $or.i1($or.i1($p1766.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $i1768 := $extractvalue.i64($p1765,0);
  $i1768.dup := $or.i1($p1765.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $p1767.dup := 0;
  $M.684 := $store.i64($M.684,$p1767,$i1768);
  $M.684.dup := $store.i1($M.684.dup,$p1767,$i1768.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $p1769 := $add.ref($add.ref($p1766,$mul.ref(0,16)),$mul.ref(8,1));
  $p1769.dup := $or.i1($or.i1($p1766.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $i1770 := $extractvalue.i64($p1765,1);
  $i1770.dup := $or.i1($p1765.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $p1769.dup := 0;
  $M.684 := $store.i64($M.684,$p1769,$i1770);
  $M.684.dup := $store.i1($M.684.dup,$p1769,$i1770.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 49} true;
  assume {:verifier.code 0} true;
  $p244.dup := 0;
  $i1771 := $load.i128($M.684,$p244);
  $i1771.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  $p245.dup := 0;
  $M.685 := $store.i128($M.685,$p245,$i1771);
  $M.685.dup := $store.i1($M.685.dup,$p245,$i1771.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  $p1772 := $bitcast.ref.ref($p245);
  $p1772.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  $p1773 := $add.ref($add.ref($p1772,$mul.ref(0,16)),$mul.ref(0,1));
  $p1773.dup := $or.i1($or.i1($p1772.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  $p1773.dup := 0;
  $i1774 := $load.i64($M.685,$p1773);
  $i1774.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  $p1775 := $add.ref($add.ref($p1772,$mul.ref(0,16)),$mul.ref(8,1));
  $p1775.dup := $or.i1($or.i1($p1772.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  $p1775.dup := 0;
  $i1776 := $load.i64($M.685,$p1775);
  $i1776.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 294, 17} true;
  assume {:verifier.code 0} true;
  call $i1777, $i1777.dup := FStar_UInt128_uint128_to_uint64($i1774, $i1774.dup, $i1776, $i1776.dup);
  call {:cexpr "c3"} boogie_si_record_i64($i1777);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  call $p1778, $p1778.dup := FStar_UInt128_uint64_to_uint128($i1777, $i1777.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  $p1779 := $bitcast.ref.ref($p246);
  $p1779.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  $p1780 := $add.ref($add.ref($p1779,$mul.ref(0,16)),$mul.ref(0,1));
  $p1780.dup := $or.i1($or.i1($p1779.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  $i1781 := $extractvalue.i64($p1778,0);
  $i1781.dup := $or.i1($p1778.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  $p1780.dup := 0;
  $M.686 := $store.i64($M.686,$p1780,$i1781);
  $M.686.dup := $store.i1($M.686.dup,$p1780,$i1781.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  $p1782 := $add.ref($add.ref($p1779,$mul.ref(0,16)),$mul.ref(8,1));
  $p1782.dup := $or.i1($or.i1($p1779.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  $i1783 := $extractvalue.i64($p1778,1);
  $i1783.dup := $or.i1($p1778.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  $p1782.dup := 0;
  $M.686 := $store.i64($M.686,$p1782,$i1783);
  $M.686.dup := $store.i1($M.686.dup,$p1782,$i1783.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 58} true;
  assume {:verifier.code 0} true;
  $p246.dup := 0;
  $i1784 := $load.i128($M.686,$p246);
  $i1784.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p247.dup := 0;
  $M.687 := $store.i128($M.687,$p247,$i1331);
  $M.687.dup := $store.i1($M.687.dup,$p247,$i1331.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1785 := $bitcast.ref.ref($p247);
  $p1785.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1786 := $add.ref($add.ref($p1785,$mul.ref(0,16)),$mul.ref(0,1));
  $p1786.dup := $or.i1($or.i1($p1785.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1786.dup := 0;
  $i1787 := $load.i64($M.687,$p1786);
  $i1787.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1788 := $add.ref($add.ref($p1785,$mul.ref(0,16)),$mul.ref(8,1));
  $p1788.dup := $or.i1($or.i1($p1785.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1788.dup := 0;
  $i1789 := $load.i64($M.687,$p1788);
  $i1789.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p248.dup := 0;
  $M.688 := $store.i128($M.688,$p248,$i1784);
  $M.688.dup := $store.i1($M.688.dup,$p248,$i1784.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1790 := $bitcast.ref.ref($p248);
  $p1790.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1791 := $add.ref($add.ref($p1790,$mul.ref(0,16)),$mul.ref(0,1));
  $p1791.dup := $or.i1($or.i1($p1790.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1791.dup := 0;
  $i1792 := $load.i64($M.688,$p1791);
  $i1792.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1793 := $add.ref($add.ref($p1790,$mul.ref(0,16)),$mul.ref(8,1));
  $p1793.dup := $or.i1($or.i1($p1790.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1793.dup := 0;
  $i1794 := $load.i64($M.688,$p1793);
  $i1794.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  call $p1795, $p1795.dup := FStar_UInt128_add($i1787, $i1787.dup, $i1789, $i1789.dup, $i1792, $i1792.dup, $i1794, $i1794.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1796 := $bitcast.ref.ref($p249);
  $p1796.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1797 := $add.ref($add.ref($p1796,$mul.ref(0,16)),$mul.ref(0,1));
  $p1797.dup := $or.i1($or.i1($p1796.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $i1798 := $extractvalue.i64($p1795,0);
  $i1798.dup := $or.i1($p1795.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1797.dup := 0;
  $M.689 := $store.i64($M.689,$p1797,$i1798);
  $M.689.dup := $store.i1($M.689.dup,$p1797,$i1798.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1799 := $add.ref($add.ref($p1796,$mul.ref(0,16)),$mul.ref(8,1));
  $p1799.dup := $or.i1($or.i1($p1796.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $i1800 := $extractvalue.i64($p1795,1);
  $i1800.dup := $or.i1($p1795.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p1799.dup := 0;
  $M.689 := $store.i64($M.689,$p1799,$i1800);
  $M.689.dup := $store.i1($M.689.dup,$p1799,$i1800.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 295, 31} true;
  assume {:verifier.code 0} true;
  $p249.dup := 0;
  $i1801 := $load.i128($M.689,$p249);
  $i1801.dup := 0;
  call {:cexpr "l_9"} boogie_si_record_i128($i1801);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  $p250.dup := 0;
  $M.690 := $store.i128($M.690,$p250,$i1801);
  $M.690.dup := $store.i1($M.690.dup,$p250,$i1801.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  $p1802 := $bitcast.ref.ref($p250);
  $p1802.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  $p1803 := $add.ref($add.ref($p1802,$mul.ref(0,16)),$mul.ref(0,1));
  $p1803.dup := $or.i1($or.i1($p1802.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  $p1803.dup := 0;
  $i1804 := $load.i64($M.690,$p1803);
  $i1804.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  $p1805 := $add.ref($add.ref($p1802,$mul.ref(0,16)),$mul.ref(8,1));
  $p1805.dup := $or.i1($or.i1($p1802.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  $p1805.dup := 0;
  $i1806 := $load.i64($M.690,$p1805);
  $i1806.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 19} true;
  assume {:verifier.code 0} true;
  call $i1807, $i1807.dup := FStar_UInt128_uint128_to_uint64($i1804, $i1804.dup, $i1806, $i1806.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 296, 56} true;
  assume {:verifier.code 0} true;
  $i1808 := $and.i64($i1807,2251799813685247);
  $i1808.dup := $or.i1($i1807.dup,0);
  call {:cexpr "tmp4"} boogie_si_record_i64($i1808);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $p251.dup := 0;
  $M.691 := $store.i128($M.691,$p251,$i1801);
  $M.691.dup := $store.i1($M.691.dup,$p251,$i1801.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $p1809 := $bitcast.ref.ref($p251);
  $p1809.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $p1810 := $add.ref($add.ref($p1809,$mul.ref(0,16)),$mul.ref(0,1));
  $p1810.dup := $or.i1($or.i1($p1809.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $p1810.dup := 0;
  $i1811 := $load.i64($M.691,$p1810);
  $i1811.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $p1812 := $add.ref($add.ref($p1809,$mul.ref(0,16)),$mul.ref(8,1));
  $p1812.dup := $or.i1($or.i1($p1809.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $p1812.dup := 0;
  $i1813 := $load.i64($M.691,$p1812);
  $i1813.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  call $p1814, $p1814.dup := FStar_UInt128_shift_right($i1811, $i1811.dup, $i1813, $i1813.dup, 51, 0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $p1815 := $bitcast.ref.ref($p252);
  $p1815.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $p1816 := $add.ref($add.ref($p1815,$mul.ref(0,16)),$mul.ref(0,1));
  $p1816.dup := $or.i1($or.i1($p1815.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $i1817 := $extractvalue.i64($p1814,0);
  $i1817.dup := $or.i1($p1814.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $p1816.dup := 0;
  $M.692 := $store.i64($M.692,$p1816,$i1817);
  $M.692.dup := $store.i1($M.692.dup,$p1816,$i1817.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $p1818 := $add.ref($add.ref($p1815,$mul.ref(0,16)),$mul.ref(8,1));
  $p1818.dup := $or.i1($or.i1($p1815.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $i1819 := $extractvalue.i64($p1814,1);
  $i1819.dup := $or.i1($p1814.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $p1818.dup := 0;
  $M.692 := $store.i64($M.692,$p1818,$i1819);
  $M.692.dup := $store.i1($M.692.dup,$p1818,$i1819.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 49} true;
  assume {:verifier.code 0} true;
  $p252.dup := 0;
  $i1820 := $load.i128($M.692,$p252);
  $i1820.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  $p253.dup := 0;
  $M.693 := $store.i128($M.693,$p253,$i1820);
  $M.693.dup := $store.i1($M.693.dup,$p253,$i1820.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  $p1821 := $bitcast.ref.ref($p253);
  $p1821.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  $p1822 := $add.ref($add.ref($p1821,$mul.ref(0,16)),$mul.ref(0,1));
  $p1822.dup := $or.i1($or.i1($p1821.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  $p1822.dup := 0;
  $i1823 := $load.i64($M.693,$p1822);
  $i1823.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  $p1824 := $add.ref($add.ref($p1821,$mul.ref(0,16)),$mul.ref(8,1));
  $p1824.dup := $or.i1($or.i1($p1821.dup,$or.i1(0,0)),$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  $p1824.dup := 0;
  $i1825 := $load.i64($M.693,$p1824);
  $i1825.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 297, 17} true;
  assume {:verifier.code 0} true;
  call $i1826, $i1826.dup := FStar_UInt128_uint128_to_uint64($i1823, $i1823.dup, $i1825, $i1825.dup);
  call {:cexpr "c4"} boogie_si_record_i64($i1826);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 298, 29} true;
  assume {:verifier.code 0} true;
  $i1827 := $mul.i64($i1826,19);
  $i1827.dup := $or.i1($i1826.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 298, 24} true;
  assume {:verifier.code 0} true;
  $i1828 := $add.i64($i1612,$i1827);
  $i1828.dup := 0;
  call {:cexpr "l_10"} boogie_si_record_i64($i1828);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 299, 26} true;
  assume {:verifier.code 0} true;
  $i1829 := $and.i64($i1828,2251799813685247);
  $i1829.dup := $or.i1($i1828.dup,0);
  call {:cexpr "tmp0_0"} boogie_si_record_i64($i1829);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 300, 22} true;
  assume {:verifier.code 0} true;
  $i1830 := $lshr.i64($i1828,51);
  $i1830.dup := $or.i1($i1828.dup,0);
  call {:cexpr "c5"} boogie_si_record_i64($i1830);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 302, 24} true;
  assume {:verifier.code 0} true;
  $i1831 := $add.i64($i1661,$i1830);
  $i1831.dup := 0;
  call {:cexpr "o212"} boogie_si_record_i64($i1831);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 316, 3} true;
  assume {:verifier.code 0} true;
  $p1832 := $add.ref($p0,$mul.ref(0,8));
  $p1832.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 316, 11} true;
  assume {:verifier.code 0} true;
  $p1832.dup := 0;
  $M.0 := $store.i64($M.0,$p1832,$i1579);
  $M.0.dup := $store.i1($M.0.dup,$p1832,$i1579.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 317, 3} true;
  assume {:verifier.code 0} true;
  $p1833 := $add.ref($p0,$mul.ref(1,8));
  $p1833.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 317, 11} true;
  assume {:verifier.code 0} true;
  $p1833.dup := 0;
  $M.0 := $store.i64($M.0,$p1833,$i1581);
  $M.0.dup := $store.i1($M.0.dup,$p1833,$i1581.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 318, 3} true;
  assume {:verifier.code 0} true;
  $p1834 := $add.ref($p0,$mul.ref(2,8));
  $p1834.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 318, 11} true;
  assume {:verifier.code 0} true;
  $p1834.dup := 0;
  $M.0 := $store.i64($M.0,$p1834,$i1460);
  $M.0.dup := $store.i1($M.0.dup,$p1834,$i1460.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 319, 3} true;
  assume {:verifier.code 0} true;
  $p1835 := $add.ref($p0,$mul.ref(3,8));
  $p1835.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 319, 11} true;
  assume {:verifier.code 0} true;
  $p1835.dup := 0;
  $M.0 := $store.i64($M.0,$p1835,$i1509);
  $M.0.dup := $store.i1($M.0.dup,$p1835,$i1509.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 320, 3} true;
  assume {:verifier.code 0} true;
  $p1836 := $add.ref($p0,$mul.ref(4,8));
  $p1836.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 320, 11} true;
  assume {:verifier.code 0} true;
  $p1836.dup := 0;
  $M.0 := $store.i64($M.0,$p1836,$i1558);
  $M.0.dup := $store.i1($M.0.dup,$p1836,$i1558.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 321, 3} true;
  assume {:verifier.code 0} true;
  $p1837 := $add.ref($p0,$mul.ref(5,8));
  $p1837.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 321, 11} true;
  assume {:verifier.code 0} true;
  $p1837.dup := 0;
  $M.0 := $store.i64($M.0,$p1837,$i1829);
  $M.0.dup := $store.i1($M.0.dup,$p1837,$i1829.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 322, 3} true;
  assume {:verifier.code 0} true;
  $p1838 := $add.ref($p0,$mul.ref(6,8));
  $p1838.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 322, 11} true;
  assume {:verifier.code 0} true;
  $p1838.dup := 0;
  $M.0 := $store.i64($M.0,$p1838,$i1831);
  $M.0.dup := $store.i1($M.0.dup,$p1838,$i1831.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 323, 3} true;
  assume {:verifier.code 0} true;
  $p1839 := $add.ref($p0,$mul.ref(7,8));
  $p1839.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 323, 11} true;
  assume {:verifier.code 0} true;
  $p1839.dup := 0;
  $M.0 := $store.i64($M.0,$p1839,$i1710);
  $M.0.dup := $store.i1($M.0.dup,$p1839,$i1710.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 324, 3} true;
  assume {:verifier.code 0} true;
  $p1840 := $add.ref($p0,$mul.ref(8,8));
  $p1840.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 324, 11} true;
  assume {:verifier.code 0} true;
  $p1840.dup := 0;
  $M.0 := $store.i64($M.0,$p1840,$i1759);
  $M.0.dup := $store.i1($M.0.dup,$p1840,$i1759.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 325, 3} true;
  assume {:verifier.code 0} true;
  $p1841 := $add.ref($p0,$mul.ref(9,8));
  $p1841.dup := $or.i1($p0.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 325, 11} true;
  assume {:verifier.code 0} true;
  $p1841.dup := 0;
  $M.0 := $store.i64($M.0,$p1841,$i1808);
  $M.0.dup := $store.i1($M.0.dup,$p1841,$i1808.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/internal/Hacl_Bignum25519_51.h", 326, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  return;
}
const Hacl_Curve25519_51_ecdh: ref;
axiom (Hacl_Curve25519_51_ecdh == $sub.ref(0,31992));
procedure {:inline 1} Hacl_Curve25519_51_ecdh($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1) returns ($r: i1, $r.dup: i1)
modifies $M.694, $exn;
modifies $M.0, $M.219;
modifies $M.221, $M.222, $M.223, $M.90, $M.225, $M.226, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.86, $M.87, $M.88, $M.89, $M.91, $M.92, $M.93;
modifies $CurrAddr;
modifies $M.227, $M.228, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85;
modifies $M.229, $M.230, $M.231, $M.232, $M.233, $M.234, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.256, $M.257, $M.258, $M.259, $M.260, $M.261, $M.262, $M.263, $M.264, $M.265, $M.266, $M.267, $M.268, $M.269, $M.270, $M.271, $M.272, $M.273, $M.274, $M.275, $M.276, $M.277, $M.278, $M.279, $M.280, $M.281, $M.282, $M.283, $M.284, $M.285, $M.286, $M.287, $M.288, $M.289, $M.290, $M.291, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $M.298, $M.299, $M.300, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $M.308, $M.309, $M.310, $M.311, $M.312, $M.313, $M.314, $M.315, $M.316, $M.317, $M.318, $M.319, $M.320, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $M.333, $M.334, $M.335, $M.336, $M.337, $M.338, $M.339, $M.340, $M.341, $M.342, $M.343, $M.344, $M.345, $M.346, $M.347, $M.348, $M.349, $M.350, $M.351, $M.352, $M.353, $M.354, $M.355, $M.356, $M.357, $M.358, $M.359, $M.360, $M.361, $M.362, $M.363, $M.364, $M.365, $M.366, $M.367, $M.368, $M.369, $M.370, $M.371, $M.372, $M.373, $M.374, $M.375, $M.376, $M.377, $M.378, $M.379, $M.380, $M.381, $M.382, $M.383, $M.384, $M.385, $M.386, $M.387, $M.388, $M.389, $M.390, $M.391, $M.392, $M.393, $M.394, $M.395, $M.396, $M.397, $M.398, $M.399, $M.400, $M.401, $M.402, $M.403, $M.404, $M.405, $M.406, $M.407, $M.408, $M.409, $M.410, $M.411, $M.412, $M.413, $M.414, $M.415, $M.416, $M.417, $M.418, $M.419, $M.420, $M.421, $M.422, $M.423, $M.424, $M.425, $M.426, $M.427, $M.428, $M.429, $M.430, $M.431, $M.432, $M.433, $M.434, $M.435, $M.436, $M.437, $M.438, $M.439, $M.440, $M.441, $M.442, $M.443, $M.444, $M.445, $M.446, $M.447, $M.448, $M.449, $M.450, $M.451, $M.452, $M.453, $M.454, $M.455, $M.456, $M.457, $M.458, $M.459, $M.460, $M.461, $M.462, $M.463, $M.464, $M.465, $M.466, $M.467, $M.468, $M.469, $M.470, $M.471, $M.472, $M.473, $M.474, $M.475, $M.476, $M.477, $M.478, $M.479, $M.480, $M.481, $M.482, $M.483, $M.484, $M.485, $M.486, $M.487, $M.488, $M.489, $M.490, $M.491, $M.492, $M.493, $M.494, $M.495, $M.496, $M.497, $M.498, $M.499, $M.500, $M.501, $M.502, $M.503, $M.504, $M.505, $M.506, $M.507, $M.508, $M.509, $M.510, $M.511, $M.512, $M.513, $M.514, $M.515, $M.516, $M.517, $M.518, $M.519, $M.520, $M.521, $M.522, $M.523, $M.524, $M.525, $M.526, $M.527, $M.528, $M.529, $M.530, $M.531, $M.532, $M.533, $M.534, $M.535, $M.536, $M.537, $M.538, $M.539, $M.540, $M.541, $M.542, $M.543, $M.544, $M.545, $M.546, $M.547, $M.548, $M.549, $M.550, $M.551, $M.552, $M.553, $M.554, $M.555, $M.556, $M.557, $M.558, $M.559, $M.560, $M.561, $M.562, $M.563, $M.564, $M.565, $M.566, $M.567, $M.568, $M.569, $M.570, $M.571, $M.572, $M.573, $M.574, $M.575, $M.576, $M.577, $M.578, $M.579, $M.580, $M.581, $M.582, $M.583, $M.584, $M.585, $M.586, $M.587, $M.588, $M.589, $M.590, $M.591, $M.592, $M.593, $M.594, $M.595, $M.596, $M.597, $M.598, $M.599, $M.600, $M.601, $M.602, $M.603, $M.604, $M.605, $M.606, $M.607, $M.608, $M.609, $M.610, $M.611, $M.612, $M.613, $M.614, $M.615, $M.616, $M.617, $M.618, $M.619, $M.620, $M.621, $M.622, $M.623, $M.624, $M.625, $M.626, $M.627, $M.628, $M.629, $M.630, $M.631, $M.632, $M.633, $M.634, $M.635, $M.636, $M.637, $M.638, $M.639, $M.640, $M.641, $M.642, $M.643, $M.644, $M.645, $M.646, $M.647, $M.648, $M.649, $M.650, $M.651, $M.652, $M.653, $M.654, $M.655, $M.656, $M.657, $M.658, $M.659, $M.660, $M.661, $M.662, $M.663, $M.664, $M.665, $M.666, $M.667, $M.668, $M.669, $M.670, $M.671, $M.672, $M.673, $M.674, $M.675, $M.676, $M.677, $M.678, $M.679, $M.680, $M.681, $M.682, $M.683, $M.684, $M.685, $M.686, $M.687, $M.688, $M.689, $M.690, $M.691, $M.692, $M.693;
{
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $i5: i8;
  var $i5.dup: i1;
  var $i6: i32;
  var $i6.dup: i1;
  var $i7: i1;
  var $i7.dup: i1;
  var $i8: i64;
  var $i8.dup: i1;
  var $p9: ref;
  var $p9.dup: i1;
  var $i10: i8;
  var $i10.dup: i1;
  var $i11: i64;
  var $i11.dup: i1;
  var $p12: ref;
  var $p12.dup: i1;
  var $i13: i8;
  var $i13.dup: i1;
  var $i14: i8;
  var $i14.dup: i1;
  var $i15: i32;
  var $i15.dup: i1;
  var $i16: i32;
  var $i16.dup: i1;
  var $i17: i32;
  var $i17.dup: i1;
  var $i18: i8;
  var $i18.dup: i1;
  var $i19: i32;
  var $i19.dup: i1;
  var $i20: i32;
  var $i20.dup: i1;
  var $i21: i1;
  var $i21.dup: i1;
  var $i22: i8;
  var $i22.dup: i1;
  var $i23: i1;
  var $i23.dup: i1;
  var $i24: i1;
  var $i24.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 310, 11} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  call $p3 := $alloc($mul.ref(32,$zext.i32.i64(1)));
  $p3.dup := 0;
  assume true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 310, 11} true;
  assume {:verifier.code 0} true;
  $p4 := $bitcast.ref.ref($p3);
  $p4.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 310, 11} true;
  assume {:verifier.code 0} true;
  $p4.dup := 0;
  call $M.694, $M.694.dup := $memset.i8($M.694, $M.694.dup, $p4, $p4.dup, 0, 0, 32, 0, false, false);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 311, 3} true;
  assume {:verifier.code 0} true;
  call Hacl_Curve25519_51_scalarmult($p0, $p0.dup, $p1, $p1.dup, $p2, $p2.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 313, 8} true;
  assume {:verifier.code 0} true;
  $i5 := $sub.i8(0,1);
  $i5.dup := $or.i1(0,0);
  $i6 := 0;
  $i6.dup := 0;
  goto $bb1;
$bb1:
  assert {:shadow_invariant} $shadow_ok;
  assert {:likely_shadow_invariant} ($p3.dup == 0);
  assert {:unlikely_shadow_invariant ($i6.dup == 0)} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 313, 37} true;
  assume {:verifier.code 0} true;
  $i7 := $ult.i32($i6,32);
  $i7.dup := $or.i1($i6.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 313, 3} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i7} true;
  $i7.dup := 0;
  goto $bb2, $bb3;
$bb2:
  assume ($i7 == 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 315, 43} true;
  assume {:verifier.code 0} true;
  $i8 := $zext.i32.i64($i6);
  $i8.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 315, 43} true;
  assume {:verifier.code 0} true;
  assume {:PointTainted} true;
  $p9 := $add.ref($p0,$mul.ref($i8,1));
  $p9.dup := $or.i1($p0.dup,$or.i1($i8.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 315, 43} true;
  assume {:verifier.code 0} true;
  $p9.dup := 0;
  $i10 := $load.i8($M.228,$p9);
  $i10.dup := $load.i1($M.228.dup,$p9);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 315, 51} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i32.i64($i6);
  $i11.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 315, 51} true;
  assume {:verifier.code 0} true;
  $p12 := $add.ref($add.ref($p3,$mul.ref(0,32)),$mul.ref($i11,1));
  $p12.dup := $or.i1($or.i1($p3.dup,$or.i1(0,0)),$or.i1($i11.dup,0));
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 315, 51} true;
  assume {:verifier.code 0} true;
  $p12.dup := 0;
  $i13 := $load.i8($M.694,$p12);
  $i13.dup := 0;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 315, 23} true;
  assume {:verifier.code 0} true;
  call $i14, $i14.dup := FStar_UInt8_eq_mask($i10, $i10.dup, $i13, $i13.dup);
  call {:cexpr "uu____0"} boogie_si_record_i8($i14);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 316, 11} true;
  assume {:verifier.code 0} true;
  $i15 := $zext.i8.i32($i14);
  $i15.dup := $i14.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 316, 21} true;
  assume {:verifier.code 0} true;
  $i16 := $zext.i8.i32($i5);
  $i16.dup := $i5.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 316, 19} true;
  assume {:verifier.code 0} true;
  $i17 := $and.i32($i15,$i16);
  $i17.dup := $or.i1($i15.dup,$i16.dup);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 316, 11} true;
  assume {:verifier.code 0} true;
  $i18 := $trunc.i32.i8($i17);
  $i18.dup := $i17.dup;
  call {:cexpr "res"} boogie_si_record_i8($i18);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 317, 3} true;
  assume {:verifier.code 0} true;
  goto $bb4;
$bb3:
  assume !($i7 == 1);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 319, 12} true;
  assume {:verifier.code 0} true;
  $i20 := $zext.i8.i32($i5);
  $i20.dup := $i5.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 319, 14} true;
  assume {:verifier.code 0} true;
  $i21 := $eq.i32($i20,255);
  $i21.dup := $or.i1($i20.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 319, 8} true;
  assume {:verifier.code 0} true;
  $i22 := $zext.i1.i8($i21);
  $i22.dup := $i21.dup;
  call {:cexpr "r"} boogie_si_record_i8($i22);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 320, 11} true;
  assume {:verifier.code 0} true;
  $i23 := $trunc.i8.i1($i22);
  $i23.dup := $i22.dup;
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 320, 10} true;
  assume {:verifier.code 0} true;
  $i24 := $xor.i1($i23,1);
  $i24.dup := $or.i1($i23.dup,0);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 320, 3} true;
  assume {:verifier.code 0} true;
  $r := $i24;
  $r.dup := 0;
  $exn := false;
  $exn.dup := false;
  return;
$bb4:
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 313, 55} true;
  assume {:verifier.code 0} true;
  $i19 := $add.i32($i6,1);
  $i19.dup := $or.i1($i6.dup,0);
  call {:cexpr "i"} boogie_si_record_i32($i19);
  assume {:sourceloc "../hacl-star/dist/gcc-compatible/Hacl_Curve25519_51.c", 313, 3} true;
  assume {:verifier.code 0} true;
  $i5 := $i18;
  $i5.dup := 0;
  $i6 := $i19;
  $i6.dup := 0;
  goto $bb1;
}
const FStar_UInt8_eq_mask: ref;
axiom (FStar_UInt8_eq_mask == $sub.ref(0,33024));
procedure {:inline 1} FStar_UInt8_eq_mask($i0: i8, $i0.dup: i1, $i1: i8, $i1.dup: i1) returns ($r: i8, $r.dup: i1)
modifies $exn;
{
  var $i2: i32;
  var $i2.dup: i1;
  var $i3: i32;
  var $i3.dup: i1;
  var $i4: i32;
  var $i4.dup: i1;
  var $i5: i8;
  var $i5.dup: i1;
  var $i6: i32;
  var $i6.dup: i1;
  var $i7: i32;
  var $i7.dup: i1;
  var $i8: i32;
  var $i8.dup: i1;
  var $i9: i8;
  var $i9.dup: i1;
  var $i10: i32;
  var $i10.dup: i1;
  var $i11: i32;
  var $i11.dup: i1;
  var $i12: i32;
  var $i12.dup: i1;
  var $i13: i8;
  var $i13.dup: i1;
  var $i14: i32;
  var $i14.dup: i1;
  var $i15: i32;
  var $i15.dup: i1;
  var $i16: i8;
  var $i16.dup: i1;
  var $i17: i32;
  var $i17.dup: i1;
  var $i18: i32;
  var $i18.dup: i1;
  var $i19: i8;
  var $i19.dup: i1;
$bb0:
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 181, 15} true;
  assume {:verifier.code 0} true;
  call {:cexpr "FStar_UInt8_eq_mask:arg:a"} boogie_si_record_i8($i0);
  call {:cexpr "FStar_UInt8_eq_mask:arg:b"} boogie_si_record_i8($i1);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 181, 15} true;
  assume {:verifier.code 0} true;
  $i2 := $zext.i8.i32($i0);
  $i2.dup := $i0.dup;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 181, 19} true;
  assume {:verifier.code 0} true;
  $i3 := $zext.i8.i32($i1);
  $i3.dup := 0;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 181, 17} true;
  assume {:verifier.code 0} true;
  $i4 := $xor.i32($i2,$i3);
  $i4.dup := $or.i1($i2.dup,$i3.dup);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 181, 15} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i32.i8($i4);
  $i5.dup := $i4.dup;
  call {:cexpr "x"} boogie_si_record_i8($i5);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 182, 22} true;
  assume {:verifier.code 0} true;
  $i6 := $zext.i8.i32($i5);
  $i6.dup := $i5.dup;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 182, 21} true;
  assume {:verifier.code 0} true;
  $i7 := $xor.i32($i6,$sub.i32(0,1));
  $i7.dup := $or.i1($i6.dup,$or.i1(0,0));
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 182, 24} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i32($i7,1);
  $i8.dup := $or.i1($i7.dup,0);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 182, 21} true;
  assume {:verifier.code 0} true;
  $i9 := $trunc.i32.i8($i8);
  $i9.dup := $i8.dup;
  call {:cexpr "minus_x"} boogie_si_record_i8($i9);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 183, 26} true;
  assume {:verifier.code 0} true;
  $i10 := $zext.i8.i32($i5);
  $i10.dup := $i5.dup;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 183, 30} true;
  assume {:verifier.code 0} true;
  $i11 := $zext.i8.i32($i9);
  $i11.dup := $i9.dup;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 183, 28} true;
  assume {:verifier.code 0} true;
  $i12 := $or.i32($i10,$i11);
  $i12.dup := $or.i1($i10.dup,$i11.dup);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 183, 26} true;
  assume {:verifier.code 0} true;
  $i13 := $trunc.i32.i8($i12);
  $i13.dup := $i12.dup;
  call {:cexpr "x_or_minus_x"} boogie_si_record_i8($i13);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 184, 17} true;
  assume {:verifier.code 0} true;
  $i14 := $zext.i8.i32($i13);
  $i14.dup := $i13.dup;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 184, 30} true;
  assume {:verifier.code 0} true;
  $i15 := $ashr.i32($i14,7);
  $i15.dup := $or.i1($i14.dup,0);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 184, 17} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.i32.i8($i15);
  $i16.dup := $i15.dup;
  call {:cexpr "xnx"} boogie_si_record_i8($i16);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 185, 10} true;
  assume {:verifier.code 0} true;
  $i17 := $zext.i8.i32($i16);
  $i17.dup := $i16.dup;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 185, 14} true;
  assume {:verifier.code 0} true;
  $i18 := $sub.i32($i17,1);
  $i18.dup := $or.i1($i17.dup,0);
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 185, 10} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.i32.i8($i18);
  $i19.dup := $i18.dup;
  assume {:sourceloc "../hacl-star/dist/karamel/krmllib/dist/minimal/FStar_UInt_8_16_32_64.h", 185, 3} true;
  assume {:verifier.code 0} true;
  $r := $i19;
  $r.dup := 0;
  $exn := false;
  $exn.dup := false;
  return;
}
const Hacl_Curve25519_51_ecdh_wrapper: ref;
axiom (Hacl_Curve25519_51_ecdh_wrapper == $sub.ref(0,34056));
procedure {:entrypoint} Hacl_Curve25519_51_ecdh_wrapper($p0: ref, $p0.dup: i1, $p1: ref, $p1.dup: i1, $p2: ref, $p2.dup: i1)
requires {:public_in $p0} true;
requires {:public_in $p1} true;
requires {:public_in $p2} true;
requires {:public_in $load.i8, $M.220, $p2, 1, 32} true;
modifies $exn;
modifies $M.694, $M.0, $M.219;
modifies $CurrAddr;
modifies $M.221, $M.222, $M.223, $M.90, $M.225, $M.226, $M.94, $M.95, $M.96, $M.97, $M.98, $M.99, $M.100, $M.101, $M.102, $M.103, $M.104, $M.105, $M.106, $M.107, $M.108, $M.109, $M.110, $M.111, $M.112, $M.113, $M.114, $M.115, $M.116, $M.117, $M.118, $M.119, $M.120, $M.121, $M.122, $M.123, $M.124, $M.125, $M.126, $M.127, $M.128, $M.129, $M.130, $M.131, $M.132, $M.133, $M.134, $M.135, $M.136, $M.137, $M.138, $M.139, $M.140, $M.141, $M.142, $M.143, $M.144, $M.145, $M.146, $M.147, $M.148, $M.149, $M.150, $M.151, $M.152, $M.153, $M.154, $M.155, $M.156, $M.157, $M.158, $M.159, $M.160, $M.161, $M.162, $M.163, $M.164, $M.165, $M.166, $M.167, $M.168, $M.169, $M.170, $M.171, $M.172, $M.173, $M.174, $M.175, $M.176, $M.177, $M.178, $M.179, $M.180, $M.181, $M.182, $M.183, $M.184, $M.185, $M.186, $M.187, $M.188, $M.189, $M.190, $M.191, $M.192, $M.193, $M.194, $M.195, $M.196, $M.197, $M.198, $M.199, $M.200, $M.201, $M.202, $M.203, $M.204, $M.205, $M.206, $M.207, $M.208, $M.209, $M.210, $M.211, $M.212, $M.213, $M.214, $M.215, $M.216, $M.217, $M.218, $M.86, $M.87, $M.88, $M.89, $M.91, $M.92, $M.93;
modifies $M.227, $M.228, $M.1, $M.2, $M.3, $M.4, $M.5, $M.6, $M.7, $M.8, $M.9, $M.10, $M.11, $M.12, $M.13, $M.14, $M.15, $M.16, $M.17, $M.18, $M.19, $M.20, $M.21, $M.22, $M.23, $M.24, $M.25, $M.26, $M.27, $M.28, $M.29, $M.30, $M.31, $M.32, $M.33, $M.34, $M.35, $M.36, $M.37, $M.38, $M.39, $M.40, $M.41, $M.42, $M.43, $M.44, $M.45, $M.46, $M.47, $M.48, $M.49, $M.50, $M.51, $M.52, $M.53, $M.54, $M.55, $M.56, $M.57, $M.58, $M.59, $M.60, $M.61, $M.62, $M.63, $M.64, $M.65, $M.66, $M.67, $M.68, $M.69, $M.70, $M.71, $M.72, $M.73, $M.74, $M.75, $M.76, $M.77, $M.78, $M.79, $M.80, $M.81, $M.82, $M.83, $M.84, $M.85;
modifies $M.229, $M.230, $M.231, $M.232, $M.233, $M.234, $M.235, $M.236, $M.237, $M.238, $M.239, $M.240, $M.241, $M.242, $M.243, $M.244, $M.245, $M.246, $M.247, $M.248, $M.249, $M.250, $M.251, $M.252, $M.253, $M.254, $M.255, $M.256, $M.257, $M.258, $M.259, $M.260, $M.261, $M.262, $M.263, $M.264, $M.265, $M.266, $M.267, $M.268, $M.269, $M.270, $M.271, $M.272, $M.273, $M.274, $M.275, $M.276, $M.277, $M.278, $M.279, $M.280, $M.281, $M.282, $M.283, $M.284, $M.285, $M.286, $M.287, $M.288, $M.289, $M.290, $M.291, $M.292, $M.293, $M.294, $M.295, $M.296, $M.297, $M.298, $M.299, $M.300, $M.301, $M.302, $M.303, $M.304, $M.305, $M.306, $M.307, $M.308, $M.309, $M.310, $M.311, $M.312, $M.313, $M.314, $M.315, $M.316, $M.317, $M.318, $M.319, $M.320, $M.321, $M.322, $M.323, $M.324, $M.325, $M.326, $M.327, $M.328, $M.329, $M.330, $M.331, $M.332, $M.333, $M.334, $M.335, $M.336, $M.337, $M.338, $M.339, $M.340, $M.341, $M.342, $M.343, $M.344, $M.345, $M.346, $M.347, $M.348, $M.349, $M.350, $M.351, $M.352, $M.353, $M.354, $M.355, $M.356, $M.357, $M.358, $M.359, $M.360, $M.361, $M.362, $M.363, $M.364, $M.365, $M.366, $M.367, $M.368, $M.369, $M.370, $M.371, $M.372, $M.373, $M.374, $M.375, $M.376, $M.377, $M.378, $M.379, $M.380, $M.381, $M.382, $M.383, $M.384, $M.385, $M.386, $M.387, $M.388, $M.389, $M.390, $M.391, $M.392, $M.393, $M.394, $M.395, $M.396, $M.397, $M.398, $M.399, $M.400, $M.401, $M.402, $M.403, $M.404, $M.405, $M.406, $M.407, $M.408, $M.409, $M.410, $M.411, $M.412, $M.413, $M.414, $M.415, $M.416, $M.417, $M.418, $M.419, $M.420, $M.421, $M.422, $M.423, $M.424, $M.425, $M.426, $M.427, $M.428, $M.429, $M.430, $M.431, $M.432, $M.433, $M.434, $M.435, $M.436, $M.437, $M.438, $M.439, $M.440, $M.441, $M.442, $M.443, $M.444, $M.445, $M.446, $M.447, $M.448, $M.449, $M.450, $M.451, $M.452, $M.453, $M.454, $M.455, $M.456, $M.457, $M.458, $M.459, $M.460, $M.461, $M.462, $M.463, $M.464, $M.465, $M.466, $M.467, $M.468, $M.469, $M.470, $M.471, $M.472, $M.473, $M.474, $M.475, $M.476, $M.477, $M.478, $M.479, $M.480, $M.481, $M.482, $M.483, $M.484, $M.485, $M.486, $M.487, $M.488, $M.489, $M.490, $M.491, $M.492, $M.493, $M.494, $M.495, $M.496, $M.497, $M.498, $M.499, $M.500, $M.501, $M.502, $M.503, $M.504, $M.505, $M.506, $M.507, $M.508, $M.509, $M.510, $M.511, $M.512, $M.513, $M.514, $M.515, $M.516, $M.517, $M.518, $M.519, $M.520, $M.521, $M.522, $M.523, $M.524, $M.525, $M.526, $M.527, $M.528, $M.529, $M.530, $M.531, $M.532, $M.533, $M.534, $M.535, $M.536, $M.537, $M.538, $M.539, $M.540, $M.541, $M.542, $M.543, $M.544, $M.545, $M.546, $M.547, $M.548, $M.549, $M.550, $M.551, $M.552, $M.553, $M.554, $M.555, $M.556, $M.557, $M.558, $M.559, $M.560, $M.561, $M.562, $M.563, $M.564, $M.565, $M.566, $M.567, $M.568, $M.569, $M.570, $M.571, $M.572, $M.573, $M.574, $M.575, $M.576, $M.577, $M.578, $M.579, $M.580, $M.581, $M.582, $M.583, $M.584, $M.585, $M.586, $M.587, $M.588, $M.589, $M.590, $M.591, $M.592, $M.593, $M.594, $M.595, $M.596, $M.597, $M.598, $M.599, $M.600, $M.601, $M.602, $M.603, $M.604, $M.605, $M.606, $M.607, $M.608, $M.609, $M.610, $M.611, $M.612, $M.613, $M.614, $M.615, $M.616, $M.617, $M.618, $M.619, $M.620, $M.621, $M.622, $M.623, $M.624, $M.625, $M.626, $M.627, $M.628, $M.629, $M.630, $M.631, $M.632, $M.633, $M.634, $M.635, $M.636, $M.637, $M.638, $M.639, $M.640, $M.641, $M.642, $M.643, $M.644, $M.645, $M.646, $M.647, $M.648, $M.649, $M.650, $M.651, $M.652, $M.653, $M.654, $M.655, $M.656, $M.657, $M.658, $M.659, $M.660, $M.661, $M.662, $M.663, $M.664, $M.665, $M.666, $M.667, $M.668, $M.669, $M.670, $M.671, $M.672, $M.673, $M.674, $M.675, $M.676, $M.677, $M.678, $M.679, $M.680, $M.681, $M.682, $M.683, $M.684, $M.685, $M.686, $M.687, $M.688, $M.689, $M.690, $M.691, $M.692, $M.693;
requires ($p0.dup == 0);
requires ($p1.dup == 0);
requires ($p2.dup == 0);
requires ($load.i8($M.220.dup,($p2 + 0)) == 0);
requires ($load.i8($M.220.dup,($p2 + 1)) == 0);
requires ($load.i8($M.220.dup,($p2 + 2)) == 0);
requires ($load.i8($M.220.dup,($p2 + 3)) == 0);
requires ($load.i8($M.220.dup,($p2 + 4)) == 0);
requires ($load.i8($M.220.dup,($p2 + 5)) == 0);
requires ($load.i8($M.220.dup,($p2 + 6)) == 0);
requires ($load.i8($M.220.dup,($p2 + 7)) == 0);
requires ($load.i8($M.220.dup,($p2 + 8)) == 0);
requires ($load.i8($M.220.dup,($p2 + 9)) == 0);
requires ($load.i8($M.220.dup,($p2 + 10)) == 0);
requires ($load.i8($M.220.dup,($p2 + 11)) == 0);
requires ($load.i8($M.220.dup,($p2 + 12)) == 0);
requires ($load.i8($M.220.dup,($p2 + 13)) == 0);
requires ($load.i8($M.220.dup,($p2 + 14)) == 0);
requires ($load.i8($M.220.dup,($p2 + 15)) == 0);
requires ($load.i8($M.220.dup,($p2 + 16)) == 0);
requires ($load.i8($M.220.dup,($p2 + 17)) == 0);
requires ($load.i8($M.220.dup,($p2 + 18)) == 0);
requires ($load.i8($M.220.dup,($p2 + 19)) == 0);
requires ($load.i8($M.220.dup,($p2 + 20)) == 0);
requires ($load.i8($M.220.dup,($p2 + 21)) == 0);
requires ($load.i8($M.220.dup,($p2 + 22)) == 0);
requires ($load.i8($M.220.dup,($p2 + 23)) == 0);
requires ($load.i8($M.220.dup,($p2 + 24)) == 0);
requires ($load.i8($M.220.dup,($p2 + 25)) == 0);
requires ($load.i8($M.220.dup,($p2 + 26)) == 0);
requires ($load.i8($M.220.dup,($p2 + 27)) == 0);
requires ($load.i8($M.220.dup,($p2 + 28)) == 0);
requires ($load.i8($M.220.dup,($p2 + 29)) == 0);
requires ($load.i8($M.220.dup,($p2 + 30)) == 0);
requires ($load.i8($M.220.dup,($p2 + 31)) == 0);
{
  var $p3: ref;
  var $p3.dup: i1;
  var $p4: ref;
  var $p4.dup: i1;
  var $p5: ref;
  var $p5.dup: i1;
  var $p6: ref;
  var $p6.dup: i1;
  var $i7: i1;
  var $i7.dup: i1;
$bb0:
  $shadow_ok := true;
  call $initialize();
  assume {:sourceloc "Hacl_Curve25519_51_ecdh.c", 5, 13} true;
  assume {:verifier.code 0} true;
  call {:cexpr "smack:entry:Hacl_Curve25519_51_ecdh_wrapper"} boogie_si_record_ref(Hacl_Curve25519_51_ecdh_wrapper);
  call {:cexpr "smack:arg:Hacl_Curve25519_51_ecdh_wrapper:$p0"} boogie_si_record_ref($p0);
  call {:cexpr "smack:arg:Hacl_Curve25519_51_ecdh_wrapper:$p1"} boogie_si_record_ref($p1);
  call {:cexpr "smack:arg:Hacl_Curve25519_51_ecdh_wrapper:$p2"} boogie_si_record_ref($p2);
  assume {:sourceloc "Hacl_Curve25519_51_ecdh.c", 5, 13} true;
  assume {:verifier.code 0} true;
  call {:name $p0} $p3 := __SMACK_value.ref($p0);
  $p3.dup := 0;
  assume $isExternal($p3);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p3);
  assume {:sourceloc "Hacl_Curve25519_51_ecdh.c", 5, 3} true;
  assume {:verifier.code 0} true;
  call public_in($p3, $p3.dup);
  assume {:sourceloc "Hacl_Curve25519_51_ecdh.c", 6, 13} true;
  assume {:verifier.code 0} true;
  call {:name $p1} $p4 := __SMACK_value.ref($p1);
  $p4.dup := 0;
  assume $isExternal($p4);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p4);
  assume {:sourceloc "Hacl_Curve25519_51_ecdh.c", 6, 3} true;
  assume {:verifier.code 0} true;
  call public_in($p4, $p4.dup);
  assume {:sourceloc "Hacl_Curve25519_51_ecdh.c", 7, 13} true;
  assume {:verifier.code 0} true;
  call {:name $p2} $p5 := __SMACK_value.ref($p2);
  $p5.dup := 0;
  assume $isExternal($p5);
  call {:cexpr "smack:ext:__SMACK_value"} boogie_si_record_ref($p5);
  assume {:sourceloc "Hacl_Curve25519_51_ecdh.c", 7, 3} true;
  assume {:verifier.code 0} true;
  call public_in($p5, $p5.dup);
  assume {:sourceloc "Hacl_Curve25519_51_ecdh.c", 8, 13} true;
  assume {:verifier.code 1} true;
  call {:name $p2} {:array "$load.i8", $M.220, $p2, 1, 32} $p6 := __SMACK_values($p2, 32);
  $p6.dup := 0;
  assume $isExternal($p6);
  call {:cexpr "smack:ext:__SMACK_values"} boogie_si_record_ref($p6);
  assume {:sourceloc "Hacl_Curve25519_51_ecdh.c", 8, 3} true;
  assume {:verifier.code 0} true;
  call public_in($p6, $p6.dup);
  assume {:sourceloc "Hacl_Curve25519_51_ecdh.c", 9, 3} true;
  assume {:verifier.code 0} true;
  call $i7, $i7.dup := Hacl_Curve25519_51_ecdh($p0, $p0.dup, $p1, $p1.dup, $p2, $p2.dup);
  assume {:sourceloc "Hacl_Curve25519_51_ecdh.c", 10, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  $exn.dup := false;
  assert $shadow_ok;
  return;
}
const __SMACK_value: ref;
axiom (__SMACK_value == $sub.ref(0,35088));
procedure {:inline 1} __SMACK_value.ref(p.0: ref) returns ($r: ref);
const public_in: ref;
axiom (public_in == $sub.ref(0,36120));
procedure {:inline 1} public_in($p0: ref, $p0.dup: i1);
const __SMACK_values: ref;
axiom (__SMACK_values == $sub.ref(0,37152));
procedure {:inline 1} __SMACK_values($p0: ref, $i1: i32) returns ($r: ref);
const __SMACK_code: ref;
axiom (__SMACK_code == $sub.ref(0,38184));
procedure {:inline 1} __SMACK_code.ref($p0: ref);
procedure {:inline 1} __SMACK_code.ref.i32($p0: ref, p.1: i32);
const __VERIFIER_assume: ref;
axiom (__VERIFIER_assume == $sub.ref(0,39216));
procedure {:inline 1} __VERIFIER_assume($i0: i32)
modifies $exn;
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__VERIFIER_assume:arg:x"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 45, 3} true;
  assume {:verifier.code 1} true;
  assume ($i0 != $0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 46, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_dummy: ref;
axiom (__SMACK_dummy == $sub.ref(0,40248));
procedure {:inline 1} __SMACK_dummy($i0: i32)
modifies $exn;
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_dummy:arg:v"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 59} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_and32: ref;
axiom (__SMACK_and32 == $sub.ref(0,41280));
procedure {:inline 1} __SMACK_and32($i0: i32, $i1: i32) returns ($r: i32)
modifies $exn;
{
  var $i2: i32;
  var $i3: i1;
  var $i5: i1;
  var $i6: i1;
  var $i8: i32;
  var $i7: i32;
  var $i4: i32;
  var $i9: i64;
  var $i10: i64;
  var $i11: i32;
  var $i12: i32;
  var $i13: i64;
  var $i14: i64;
  var $i15: i32;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i20: i1;
  var $i21: i1;
  var $i23: i32;
  var $i22: i32;
  var $i19: i32;
  var $i24: i64;
  var $i25: i64;
  var $i26: i32;
  var $i27: i32;
  var $i28: i64;
  var $i29: i64;
  var $i30: i32;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i35: i1;
  var $i36: i1;
  var $i38: i32;
  var $i37: i32;
  var $i34: i32;
  var $i39: i64;
  var $i40: i64;
  var $i41: i32;
  var $i42: i32;
  var $i43: i64;
  var $i44: i64;
  var $i45: i32;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i50: i1;
  var $i51: i1;
  var $i53: i32;
  var $i52: i32;
  var $i49: i32;
  var $i54: i64;
  var $i55: i64;
  var $i56: i32;
  var $i57: i32;
  var $i58: i64;
  var $i59: i64;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i65: i1;
  var $i66: i1;
  var $i68: i32;
  var $i67: i32;
  var $i64: i32;
  var $i69: i64;
  var $i70: i64;
  var $i71: i32;
  var $i72: i32;
  var $i73: i64;
  var $i74: i64;
  var $i75: i32;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i80: i1;
  var $i81: i1;
  var $i83: i32;
  var $i82: i32;
  var $i79: i32;
  var $i84: i64;
  var $i85: i64;
  var $i86: i32;
  var $i87: i32;
  var $i88: i64;
  var $i89: i64;
  var $i90: i32;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i95: i1;
  var $i96: i1;
  var $i98: i32;
  var $i97: i32;
  var $i94: i32;
  var $i99: i64;
  var $i100: i64;
  var $i101: i32;
  var $i102: i32;
  var $i103: i64;
  var $i104: i64;
  var $i105: i32;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i110: i1;
  var $i111: i1;
  var $i113: i32;
  var $i112: i32;
  var $i109: i32;
  var $i114: i64;
  var $i115: i64;
  var $i116: i32;
  var $i117: i32;
  var $i118: i64;
  var $i119: i64;
  var $i120: i32;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i125: i1;
  var $i126: i1;
  var $i128: i32;
  var $i127: i32;
  var $i124: i32;
  var $i129: i64;
  var $i130: i64;
  var $i131: i32;
  var $i132: i32;
  var $i133: i64;
  var $i134: i64;
  var $i135: i32;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i140: i1;
  var $i141: i1;
  var $i143: i32;
  var $i142: i32;
  var $i139: i32;
  var $i144: i64;
  var $i145: i64;
  var $i146: i32;
  var $i147: i32;
  var $i148: i64;
  var $i149: i64;
  var $i150: i32;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i155: i1;
  var $i156: i1;
  var $i158: i32;
  var $i157: i32;
  var $i154: i32;
  var $i159: i64;
  var $i160: i64;
  var $i161: i32;
  var $i162: i32;
  var $i163: i64;
  var $i164: i64;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i170: i1;
  var $i171: i1;
  var $i173: i32;
  var $i172: i32;
  var $i169: i32;
  var $i174: i64;
  var $i175: i64;
  var $i176: i32;
  var $i177: i32;
  var $i178: i64;
  var $i179: i64;
  var $i180: i32;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i185: i1;
  var $i186: i1;
  var $i188: i32;
  var $i187: i32;
  var $i184: i32;
  var $i189: i64;
  var $i190: i64;
  var $i191: i32;
  var $i192: i32;
  var $i193: i64;
  var $i194: i64;
  var $i195: i32;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $i200: i1;
  var $i201: i1;
  var $i203: i32;
  var $i202: i32;
  var $i199: i32;
  var $i204: i64;
  var $i205: i64;
  var $i206: i32;
  var $i207: i32;
  var $i208: i64;
  var $i209: i64;
  var $i210: i32;
  var $i211: i32;
  var $i212: i32;
  var $i213: i1;
  var $i215: i1;
  var $i216: i1;
  var $i218: i32;
  var $i217: i32;
  var $i214: i32;
  var $i219: i64;
  var $i220: i64;
  var $i221: i32;
  var $i222: i32;
  var $i223: i64;
  var $i224: i64;
  var $i225: i32;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $i230: i1;
  var $i231: i1;
  var $i233: i32;
  var $i232: i32;
  var $i229: i32;
  var $i234: i64;
  var $i235: i64;
  var $i236: i32;
  var $i237: i32;
  var $i238: i64;
  var $i239: i64;
  var $i240: i32;
  var $i241: i32;
  var $i242: i32;
  var $i243: i1;
  var $i245: i1;
  var $i246: i1;
  var $i248: i32;
  var $i247: i32;
  var $i244: i32;
  var $i249: i64;
  var $i250: i64;
  var $i251: i32;
  var $i252: i32;
  var $i253: i64;
  var $i254: i64;
  var $i255: i32;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i260: i1;
  var $i261: i1;
  var $i263: i32;
  var $i262: i32;
  var $i259: i32;
  var $i264: i64;
  var $i265: i64;
  var $i266: i32;
  var $i267: i32;
  var $i268: i64;
  var $i269: i64;
  var $i270: i32;
  var $i271: i32;
  var $i272: i32;
  var $i273: i1;
  var $i275: i1;
  var $i276: i1;
  var $i278: i32;
  var $i277: i32;
  var $i274: i32;
  var $i279: i64;
  var $i280: i64;
  var $i281: i32;
  var $i282: i32;
  var $i283: i64;
  var $i284: i64;
  var $i285: i32;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $i290: i1;
  var $i291: i1;
  var $i293: i32;
  var $i292: i32;
  var $i289: i32;
  var $i294: i64;
  var $i295: i64;
  var $i296: i32;
  var $i297: i32;
  var $i298: i64;
  var $i299: i64;
  var $i300: i32;
  var $i301: i32;
  var $i302: i32;
  var $i303: i1;
  var $i305: i1;
  var $i306: i1;
  var $i308: i32;
  var $i307: i32;
  var $i304: i32;
  var $i309: i64;
  var $i310: i64;
  var $i311: i32;
  var $i312: i32;
  var $i313: i64;
  var $i314: i64;
  var $i315: i32;
  var $i316: i32;
  var $i317: i32;
  var $i318: i1;
  var $i320: i1;
  var $i321: i1;
  var $i323: i32;
  var $i322: i32;
  var $i319: i32;
  var $i324: i64;
  var $i325: i64;
  var $i326: i32;
  var $i327: i32;
  var $i328: i64;
  var $i329: i64;
  var $i330: i32;
  var $i331: i32;
  var $i332: i32;
  var $i333: i1;
  var $i335: i1;
  var $i336: i1;
  var $i338: i32;
  var $i337: i32;
  var $i334: i32;
  var $i339: i64;
  var $i340: i64;
  var $i341: i32;
  var $i342: i32;
  var $i343: i64;
  var $i344: i64;
  var $i345: i32;
  var $i346: i32;
  var $i347: i32;
  var $i348: i1;
  var $i350: i1;
  var $i351: i1;
  var $i353: i32;
  var $i352: i32;
  var $i349: i32;
  var $i354: i64;
  var $i355: i64;
  var $i356: i32;
  var $i357: i32;
  var $i358: i64;
  var $i359: i64;
  var $i360: i32;
  var $i361: i32;
  var $i362: i32;
  var $i363: i1;
  var $i365: i1;
  var $i366: i1;
  var $i368: i32;
  var $i367: i32;
  var $i364: i32;
  var $i369: i64;
  var $i370: i64;
  var $i371: i32;
  var $i372: i32;
  var $i373: i64;
  var $i374: i64;
  var $i375: i32;
  var $i376: i32;
  var $i377: i32;
  var $i378: i1;
  var $i380: i1;
  var $i381: i1;
  var $i383: i32;
  var $i382: i32;
  var $i379: i32;
  var $i384: i64;
  var $i385: i64;
  var $i386: i32;
  var $i387: i32;
  var $i388: i64;
  var $i389: i64;
  var $i390: i32;
  var $i391: i32;
  var $i392: i32;
  var $i393: i1;
  var $i395: i1;
  var $i396: i1;
  var $i398: i32;
  var $i397: i32;
  var $i394: i32;
  var $i399: i64;
  var $i400: i64;
  var $i401: i32;
  var $i402: i32;
  var $i403: i64;
  var $i404: i64;
  var $i405: i32;
  var $i406: i32;
  var $i407: i32;
  var $i408: i1;
  var $i410: i1;
  var $i411: i1;
  var $i413: i32;
  var $i412: i32;
  var $i409: i32;
  var $i414: i64;
  var $i415: i64;
  var $i416: i32;
  var $i417: i32;
  var $i418: i64;
  var $i419: i64;
  var $i420: i32;
  var $i421: i32;
  var $i422: i32;
  var $i423: i1;
  var $i425: i1;
  var $i426: i1;
  var $i428: i32;
  var $i427: i32;
  var $i424: i32;
  var $i429: i64;
  var $i430: i64;
  var $i431: i32;
  var $i432: i32;
  var $i433: i64;
  var $i434: i64;
  var $i435: i32;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $i440: i1;
  var $i441: i1;
  var $i443: i32;
  var $i442: i32;
  var $i439: i32;
  var $i444: i64;
  var $i445: i64;
  var $i446: i32;
  var $i447: i32;
  var $i448: i64;
  var $i449: i64;
  var $i450: i32;
  var $i451: i32;
  var $i452: i32;
  var $i453: i1;
  var $i455: i1;
  var $i456: i1;
  var $i458: i32;
  var $i457: i32;
  var $i454: i32;
  var $i459: i64;
  var $i460: i64;
  var $i461: i32;
  var $i462: i32;
  var $i463: i64;
  var $i464: i64;
  var $i465: i32;
  var $i466: i32;
  var $i467: i32;
  var $i468: i1;
  var $i470: i1;
  var $i471: i1;
  var $i473: i32;
  var $i472: i32;
  var $i469: i32;
  var $i474: i64;
  var $i475: i64;
  var $i476: i32;
  var $i477: i32;
  var $i478: i64;
  var $i479: i64;
  var $i480: i32;
  var $i481: i32;
  var $i482: i32;
  var $i483: i1;
  var $i485: i1;
  var $i486: i1;
  var $i488: i32;
  var $i487: i32;
  var $i484: i32;
  var $i489: i64;
  var $i490: i64;
  var $i491: i32;
  var $i492: i32;
  var $i493: i64;
  var $i494: i64;
  var $i495: i32;
  var $i496: i32;
  var $i497: i32;
  var $i498: i1;
  var $i500: i1;
  var $i501: i1;
  var $i503: i32;
  var $i502: i32;
  var $i499: i32;
  var $i504: i64;
  var $i505: i64;
  var $i506: i32;
  var $i507: i32;
  var $i508: i64;
  var $i509: i64;
  var $i510: i32;
  var $i511: i32;
  var $i512: i32;
  var $i513: i1;
  var $i515: i1;
  var $i516: i1;
  var $i518: i32;
  var $i517: i32;
  var $i514: i32;
  var $i519: i64;
  var $i520: i64;
  var $i521: i32;
  var $i522: i32;
  var $i523: i64;
  var $i524: i64;
  var $i525: i32;
  var $i526: i32;
  var $i527: i32;
  var $i528: i1;
  var $i530: i1;
  var $i531: i1;
  var $i533: i32;
  var $i532: i32;
  var $i529: i32;
  var $i534: i64;
  var $i535: i64;
  var $i536: i32;
  var $i537: i32;
  var $i538: i64;
  var $i539: i64;
  var $i540: i32;
  var $i541: i32;
  var $i542: i32;
  var $i543: i1;
  var $i545: i1;
  var $i546: i1;
  var $i548: i32;
  var $i547: i32;
  var $i544: i32;
  var $i549: i64;
  var $i550: i64;
  var $i551: i32;
  var $i552: i32;
  var $i553: i64;
  var $i554: i64;
  var $i555: i32;
  var $i556: i32;
  var $i557: i32;
  var $i558: i1;
  var $i560: i1;
  var $i561: i1;
  var $i563: i32;
  var $i562: i32;
  var $i559: i32;
  var $i564: i64;
  var $i565: i64;
  var $i566: i32;
  var $i567: i32;
  var $i568: i64;
  var $i569: i64;
  var $i570: i32;
  var $i571: i32;
  var $i572: i32;
  var $i573: i1;
  var $i575: i1;
  var $i576: i1;
  var $i578: i32;
  var $i577: i32;
  var $i574: i32;
  var $i579: i64;
  var $i580: i64;
  var $i581: i32;
  var $i582: i32;
  var $i583: i64;
  var $i584: i64;
  var $i585: i32;
  var $i586: i32;
  var $i587: i32;
  var $i588: i1;
  var $i590: i1;
  var $i591: i1;
  var $i593: i32;
  var $i592: i32;
  var $i589: i32;
  var $i594: i64;
  var $i595: i64;
  var $i596: i32;
  var $i597: i32;
  var $i598: i64;
  var $i599: i64;
  var $i600: i32;
  var $i601: i32;
  var $i602: i32;
  var $i603: i1;
  var $i605: i1;
  var $i606: i1;
  var $i608: i32;
  var $i607: i32;
  var $i604: i32;
  var $i609: i64;
  var $i610: i64;
  var $i611: i32;
  var $i612: i32;
  var $i613: i64;
  var $i614: i64;
  var $i615: i32;
  var $i616: i32;
  var $i617: i32;
  var $i618: i1;
  var $i620: i1;
  var $i621: i1;
  var $i623: i32;
  var $i622: i32;
  var $i619: i32;
  var $i624: i64;
  var $i625: i64;
  var $i626: i32;
  var $i627: i32;
  var $i628: i64;
  var $i629: i64;
  var $i630: i32;
  var $i631: i32;
  var $i632: i32;
  var $i633: i1;
  var $i635: i1;
  var $i636: i1;
  var $i638: i32;
  var $i637: i32;
  var $i634: i32;
  var $i639: i64;
  var $i640: i64;
  var $i641: i32;
  var $i642: i32;
  var $i643: i64;
  var $i644: i64;
  var $i645: i32;
  var $i646: i32;
  var $i647: i32;
  var $i648: i1;
  var $i650: i1;
  var $i651: i1;
  var $i653: i32;
  var $i652: i32;
  var $i649: i32;
  var $i654: i64;
  var $i655: i64;
  var $i656: i32;
  var $i657: i32;
  var $i658: i64;
  var $i659: i64;
  var $i660: i32;
  var $i661: i32;
  var $i662: i32;
  var $i663: i1;
  var $i665: i1;
  var $i666: i1;
  var $i668: i32;
  var $i667: i32;
  var $i664: i32;
  var $i669: i64;
  var $i670: i64;
  var $i671: i32;
  var $i672: i32;
  var $i673: i64;
  var $i674: i64;
  var $i675: i32;
  var $i676: i32;
  var $i677: i32;
  var $i678: i1;
  var $i680: i1;
  var $i681: i1;
  var $i683: i32;
  var $i682: i32;
  var $i679: i32;
  var $i684: i64;
  var $i685: i64;
  var $i686: i32;
  var $i687: i32;
  var $i688: i64;
  var $i689: i64;
  var $i690: i32;
  var $i691: i32;
  var $i692: i32;
  var $i693: i1;
  var $i695: i1;
  var $i696: i1;
  var $i698: i32;
  var $i697: i32;
  var $i694: i32;
  var $i699: i64;
  var $i700: i64;
  var $i701: i32;
  var $i702: i32;
  var $i703: i64;
  var $i704: i64;
  var $i705: i32;
  var $i706: i32;
  var $i707: i32;
  var $i708: i1;
  var $i710: i1;
  var $i711: i1;
  var $i713: i32;
  var $i712: i32;
  var $i709: i32;
  var $i714: i64;
  var $i715: i64;
  var $i716: i32;
  var $i717: i32;
  var $i718: i64;
  var $i719: i64;
  var $i720: i32;
  var $i721: i32;
  var $i722: i32;
  var $i723: i1;
  var $i725: i1;
  var $i726: i1;
  var $i728: i32;
  var $i727: i32;
  var $i724: i32;
  var $i729: i64;
  var $i730: i64;
  var $i731: i32;
  var $i732: i32;
  var $i733: i64;
  var $i734: i64;
  var $i735: i32;
  var $i736: i32;
  var $i737: i32;
  var $i738: i1;
  var $i740: i1;
  var $i741: i1;
  var $i743: i32;
  var $i742: i32;
  var $i739: i32;
  var $i744: i64;
  var $i745: i64;
  var $i746: i32;
  var $i747: i32;
  var $i748: i64;
  var $i749: i64;
  var $i750: i32;
  var $i751: i32;
  var $i752: i32;
  var $i753: i1;
  var $i755: i1;
  var $i756: i1;
  var $i758: i32;
  var $i757: i32;
  var $i754: i32;
  var $i759: i64;
  var $i760: i64;
  var $i761: i32;
  var $i762: i32;
  var $i763: i64;
  var $i764: i64;
  var $i765: i32;
  var $i766: i32;
  var $i767: i32;
  var $i768: i1;
  var $i770: i1;
  var $i771: i1;
  var $i773: i32;
  var $i772: i32;
  var $i769: i32;
  var $i774: i64;
  var $i775: i64;
  var $i776: i32;
  var $i777: i32;
  var $i778: i64;
  var $i779: i64;
  var $i780: i32;
  var $i781: i32;
  var $i782: i32;
  var $i783: i1;
  var $i785: i1;
  var $i786: i1;
  var $i788: i32;
  var $i787: i32;
  var $i784: i32;
  var $i789: i64;
  var $i790: i64;
  var $i791: i32;
  var $i792: i32;
  var $i793: i64;
  var $i794: i64;
  var $i795: i32;
  var $i796: i32;
  var $i797: i32;
  var $i798: i1;
  var $i800: i1;
  var $i801: i1;
  var $i803: i32;
  var $i802: i32;
  var $i799: i32;
  var $i804: i64;
  var $i805: i64;
  var $i806: i32;
  var $i807: i32;
  var $i808: i64;
  var $i809: i64;
  var $i810: i32;
  var $i811: i32;
  var $i812: i32;
  var $i813: i1;
  var $i815: i1;
  var $i816: i1;
  var $i818: i32;
  var $i817: i32;
  var $i814: i32;
  var $i819: i64;
  var $i820: i64;
  var $i821: i32;
  var $i822: i32;
  var $i823: i64;
  var $i824: i64;
  var $i825: i32;
  var $i826: i32;
  var $i827: i32;
  var $i828: i1;
  var $i830: i1;
  var $i831: i1;
  var $i833: i32;
  var $i832: i32;
  var $i829: i32;
  var $i834: i64;
  var $i835: i64;
  var $i836: i32;
  var $i837: i32;
  var $i838: i64;
  var $i839: i64;
  var $i840: i32;
  var $i841: i32;
  var $i842: i32;
  var $i843: i1;
  var $i845: i1;
  var $i846: i1;
  var $i848: i32;
  var $i847: i32;
  var $i844: i32;
  var $i849: i64;
  var $i850: i64;
  var $i851: i32;
  var $i852: i32;
  var $i853: i64;
  var $i854: i64;
  var $i855: i32;
  var $i856: i32;
  var $i857: i32;
  var $i858: i1;
  var $i860: i1;
  var $i861: i1;
  var $i863: i32;
  var $i862: i32;
  var $i859: i32;
  var $i864: i64;
  var $i865: i64;
  var $i866: i32;
  var $i867: i32;
  var $i868: i64;
  var $i869: i64;
  var $i870: i32;
  var $i871: i32;
  var $i872: i32;
  var $i873: i1;
  var $i875: i1;
  var $i876: i1;
  var $i878: i32;
  var $i877: i32;
  var $i874: i32;
  var $i879: i64;
  var $i880: i64;
  var $i881: i32;
  var $i882: i32;
  var $i883: i64;
  var $i884: i64;
  var $i885: i32;
  var $i886: i32;
  var $i887: i32;
  var $i888: i1;
  var $i890: i1;
  var $i891: i1;
  var $i893: i32;
  var $i892: i32;
  var $i889: i32;
  var $i894: i64;
  var $i895: i64;
  var $i896: i32;
  var $i897: i32;
  var $i898: i64;
  var $i899: i64;
  var $i900: i32;
  var $i901: i32;
  var $i902: i32;
  var $i903: i1;
  var $i905: i1;
  var $i906: i1;
  var $i908: i32;
  var $i907: i32;
  var $i904: i32;
  var $i909: i64;
  var $i910: i64;
  var $i911: i32;
  var $i912: i32;
  var $i913: i64;
  var $i914: i64;
  var $i915: i32;
  var $i916: i32;
  var $i917: i32;
  var $i918: i1;
  var $i920: i1;
  var $i921: i1;
  var $i923: i32;
  var $i922: i32;
  var $i919: i32;
  var $i924: i64;
  var $i925: i64;
  var $i926: i32;
  var $i927: i32;
  var $i928: i64;
  var $i929: i64;
  var $i930: i32;
  var $i931: i32;
  var $i932: i32;
  var $i933: i1;
  var $i935: i1;
  var $i936: i1;
  var $i938: i32;
  var $i937: i32;
  var $i934: i32;
  var $i939: i64;
  var $i940: i64;
  var $i941: i32;
  var $i942: i32;
  var $i943: i64;
  var $i944: i64;
  var $i945: i32;
  var $i946: i32;
  var $i947: i32;
  var $i948: i1;
  var $i950: i1;
  var $i951: i1;
  var $i953: i32;
  var $i952: i32;
  var $i949: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 60, 5} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__SMACK_and32:arg:a"} boogie_si_record_i32($i0);
  call {:cexpr "__SMACK_and32:arg:b"} boogie_si_record_i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 60, 5} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i32(0,0);
  call {:cexpr "c"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 61, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.i32($i0,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 61, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $i2;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 11} true;
  assume {:verifier.code 0} true;
  $i5 := $slt.i32($i1,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i5} true;
  goto $bb4, $bb6;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 61, 7} true;
  assume {:verifier.code 0} true;
  assume !($i3 == 1);
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 7} true;
  assume {:verifier.code 0} true;
  $i9 := $sext.i32.i64($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 9} true;
  assume {:verifier.code 0} true;
  $i10 := $srem.i64($i9,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 66, 7} true;
  assume {:verifier.code 0} true;
  $i11 := $trunc.i64.i32($i10);
  call {:cexpr "a"} boogie_si_record_i32($i11);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 67, 5} true;
  assume {:verifier.code 0} true;
  $i12 := $add.i32($i11,$i11);
  call {:cexpr "a"} boogie_si_record_i32($i12);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 68, 7} true;
  assume {:verifier.code 0} true;
  $i13 := $sext.i32.i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 68, 9} true;
  assume {:verifier.code 0} true;
  $i14 := $srem.i64($i13,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 68, 7} true;
  assume {:verifier.code 0} true;
  $i15 := $trunc.i64.i32($i14);
  call {:cexpr "b"} boogie_si_record_i32($i15);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 69, 5} true;
  assume {:verifier.code 0} true;
  $i16 := $add.i32($i15,$i15);
  call {:cexpr "b"} boogie_si_record_i32($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 71, 5} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i32($i4,$i4);
  call {:cexpr "c"} boogie_si_record_i32($i17);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 72, 9} true;
  assume {:verifier.code 0} true;
  $i18 := $slt.i32($i12,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 72, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $i17;
  assume {:branchcond $i18} true;
  goto $bb10, $bb11;
$bb4:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 15} true;
  assume {:verifier.code 0} true;
  assume ($i5 == 1);
  goto $bb5;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 63, 9} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i32($i2,1);
  call {:cexpr "c"} boogie_si_record_i32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 64, 5} true;
  assume {:verifier.code 0} true;
  $i7 := $i8;
  goto $bb9;
$bb6:
  assume !($i5 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 20} true;
  assume {:verifier.code 0} true;
  $i6 := $sgt.i32($i1,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $i2;
  assume {:branchcond $i6} true;
  goto $bb7, $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 9} true;
  assume {:verifier.code 0} true;
  assume ($i6 == 1);
  goto $bb5;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 62, 9} true;
  assume {:verifier.code 0} true;
  assume !($i6 == 1);
  goto $bb9;
$bb9:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 65, 3} true;
  assume {:verifier.code 0} true;
  $i4 := $i7;
  goto $bb3;
$bb10:
  assume ($i18 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 11} true;
  assume {:verifier.code 0} true;
  $i20 := $slt.i32($i16,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i20} true;
  goto $bb13, $bb15;
$bb11:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 72, 7} true;
  assume {:verifier.code 0} true;
  assume !($i18 == 1);
  goto $bb12;
$bb12:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 77, 7} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.i32.i64($i12);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 77, 9} true;
  assume {:verifier.code 0} true;
  $i25 := $srem.i64($i24,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 77, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.i64.i32($i25);
  call {:cexpr "a"} boogie_si_record_i32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 78, 5} true;
  assume {:verifier.code 0} true;
  $i27 := $add.i32($i26,$i26);
  call {:cexpr "a"} boogie_si_record_i32($i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 79, 7} true;
  assume {:verifier.code 0} true;
  $i28 := $sext.i32.i64($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 79, 9} true;
  assume {:verifier.code 0} true;
  $i29 := $srem.i64($i28,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 79, 7} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.i64.i32($i29);
  call {:cexpr "b"} boogie_si_record_i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 80, 5} true;
  assume {:verifier.code 0} true;
  $i31 := $add.i32($i30,$i30);
  call {:cexpr "b"} boogie_si_record_i32($i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 82, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $add.i32($i19,$i19);
  call {:cexpr "c"} boogie_si_record_i32($i32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 83, 9} true;
  assume {:verifier.code 0} true;
  $i33 := $slt.i32($i27,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 83, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $i32;
  assume {:branchcond $i33} true;
  goto $bb19, $bb20;
$bb13:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 15} true;
  assume {:verifier.code 0} true;
  assume ($i20 == 1);
  goto $bb14;
$bb14:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 74, 9} true;
  assume {:verifier.code 0} true;
  $i23 := $add.i32($i17,1);
  call {:cexpr "c"} boogie_si_record_i32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 75, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $i23;
  goto $bb18;
$bb15:
  assume !($i20 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 20} true;
  assume {:verifier.code 0} true;
  $i21 := $sgt.i32($i16,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 9} true;
  assume {:verifier.code 0} true;
  $i22 := $i17;
  assume {:branchcond $i21} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 9} true;
  assume {:verifier.code 0} true;
  assume ($i21 == 1);
  goto $bb14;
$bb17:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 73, 9} true;
  assume {:verifier.code 0} true;
  assume !($i21 == 1);
  goto $bb18;
$bb18:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 76, 3} true;
  assume {:verifier.code 0} true;
  $i19 := $i22;
  goto $bb12;
$bb19:
  assume ($i33 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 11} true;
  assume {:verifier.code 0} true;
  $i35 := $slt.i32($i31,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i35} true;
  goto $bb22, $bb24;
$bb20:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 83, 7} true;
  assume {:verifier.code 0} true;
  assume !($i33 == 1);
  goto $bb21;
$bb21:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 88, 7} true;
  assume {:verifier.code 0} true;
  $i39 := $sext.i32.i64($i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 88, 9} true;
  assume {:verifier.code 0} true;
  $i40 := $srem.i64($i39,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 88, 7} true;
  assume {:verifier.code 0} true;
  $i41 := $trunc.i64.i32($i40);
  call {:cexpr "a"} boogie_si_record_i32($i41);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 89, 5} true;
  assume {:verifier.code 0} true;
  $i42 := $add.i32($i41,$i41);
  call {:cexpr "a"} boogie_si_record_i32($i42);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 90, 7} true;
  assume {:verifier.code 0} true;
  $i43 := $sext.i32.i64($i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 90, 9} true;
  assume {:verifier.code 0} true;
  $i44 := $srem.i64($i43,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 90, 7} true;
  assume {:verifier.code 0} true;
  $i45 := $trunc.i64.i32($i44);
  call {:cexpr "b"} boogie_si_record_i32($i45);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 91, 5} true;
  assume {:verifier.code 0} true;
  $i46 := $add.i32($i45,$i45);
  call {:cexpr "b"} boogie_si_record_i32($i46);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 93, 5} true;
  assume {:verifier.code 0} true;
  $i47 := $add.i32($i34,$i34);
  call {:cexpr "c"} boogie_si_record_i32($i47);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 94, 9} true;
  assume {:verifier.code 0} true;
  $i48 := $slt.i32($i42,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 94, 7} true;
  assume {:verifier.code 0} true;
  $i49 := $i47;
  assume {:branchcond $i48} true;
  goto $bb28, $bb29;
$bb22:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 15} true;
  assume {:verifier.code 0} true;
  assume ($i35 == 1);
  goto $bb23;
$bb23:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 85, 9} true;
  assume {:verifier.code 0} true;
  $i38 := $add.i32($i32,1);
  call {:cexpr "c"} boogie_si_record_i32($i38);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 86, 5} true;
  assume {:verifier.code 0} true;
  $i37 := $i38;
  goto $bb27;
$bb24:
  assume !($i35 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 20} true;
  assume {:verifier.code 0} true;
  $i36 := $sgt.i32($i31,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 9} true;
  assume {:verifier.code 0} true;
  $i37 := $i32;
  assume {:branchcond $i36} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 9} true;
  assume {:verifier.code 0} true;
  assume ($i36 == 1);
  goto $bb23;
$bb26:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 84, 9} true;
  assume {:verifier.code 0} true;
  assume !($i36 == 1);
  goto $bb27;
$bb27:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 87, 3} true;
  assume {:verifier.code 0} true;
  $i34 := $i37;
  goto $bb21;
$bb28:
  assume ($i48 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 11} true;
  assume {:verifier.code 0} true;
  $i50 := $slt.i32($i46,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i50} true;
  goto $bb31, $bb33;
$bb29:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 94, 7} true;
  assume {:verifier.code 0} true;
  assume !($i48 == 1);
  goto $bb30;
$bb30:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 99, 7} true;
  assume {:verifier.code 0} true;
  $i54 := $sext.i32.i64($i42);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 99, 9} true;
  assume {:verifier.code 0} true;
  $i55 := $srem.i64($i54,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 99, 7} true;
  assume {:verifier.code 0} true;
  $i56 := $trunc.i64.i32($i55);
  call {:cexpr "a"} boogie_si_record_i32($i56);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 100, 5} true;
  assume {:verifier.code 0} true;
  $i57 := $add.i32($i56,$i56);
  call {:cexpr "a"} boogie_si_record_i32($i57);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 101, 7} true;
  assume {:verifier.code 0} true;
  $i58 := $sext.i32.i64($i46);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 101, 9} true;
  assume {:verifier.code 0} true;
  $i59 := $srem.i64($i58,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 101, 7} true;
  assume {:verifier.code 0} true;
  $i60 := $trunc.i64.i32($i59);
  call {:cexpr "b"} boogie_si_record_i32($i60);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 102, 5} true;
  assume {:verifier.code 0} true;
  $i61 := $add.i32($i60,$i60);
  call {:cexpr "b"} boogie_si_record_i32($i61);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 104, 5} true;
  assume {:verifier.code 0} true;
  $i62 := $add.i32($i49,$i49);
  call {:cexpr "c"} boogie_si_record_i32($i62);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 9} true;
  assume {:verifier.code 0} true;
  $i63 := $slt.i32($i57,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $i62;
  assume {:branchcond $i63} true;
  goto $bb37, $bb38;
$bb31:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 15} true;
  assume {:verifier.code 0} true;
  assume ($i50 == 1);
  goto $bb32;
$bb32:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 96, 9} true;
  assume {:verifier.code 0} true;
  $i53 := $add.i32($i47,1);
  call {:cexpr "c"} boogie_si_record_i32($i53);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 97, 5} true;
  assume {:verifier.code 0} true;
  $i52 := $i53;
  goto $bb36;
$bb33:
  assume !($i50 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 20} true;
  assume {:verifier.code 0} true;
  $i51 := $sgt.i32($i46,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 9} true;
  assume {:verifier.code 0} true;
  $i52 := $i47;
  assume {:branchcond $i51} true;
  goto $bb34, $bb35;
$bb34:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 9} true;
  assume {:verifier.code 0} true;
  assume ($i51 == 1);
  goto $bb32;
$bb35:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 95, 9} true;
  assume {:verifier.code 0} true;
  assume !($i51 == 1);
  goto $bb36;
$bb36:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 98, 3} true;
  assume {:verifier.code 0} true;
  $i49 := $i52;
  goto $bb30;
$bb37:
  assume ($i63 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 11} true;
  assume {:verifier.code 0} true;
  $i65 := $slt.i32($i61,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i65} true;
  goto $bb40, $bb42;
$bb38:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 105, 7} true;
  assume {:verifier.code 0} true;
  assume !($i63 == 1);
  goto $bb39;
$bb39:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 110, 7} true;
  assume {:verifier.code 0} true;
  $i69 := $sext.i32.i64($i57);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 110, 9} true;
  assume {:verifier.code 0} true;
  $i70 := $srem.i64($i69,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 110, 7} true;
  assume {:verifier.code 0} true;
  $i71 := $trunc.i64.i32($i70);
  call {:cexpr "a"} boogie_si_record_i32($i71);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 111, 5} true;
  assume {:verifier.code 0} true;
  $i72 := $add.i32($i71,$i71);
  call {:cexpr "a"} boogie_si_record_i32($i72);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 112, 7} true;
  assume {:verifier.code 0} true;
  $i73 := $sext.i32.i64($i61);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 112, 9} true;
  assume {:verifier.code 0} true;
  $i74 := $srem.i64($i73,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 112, 7} true;
  assume {:verifier.code 0} true;
  $i75 := $trunc.i64.i32($i74);
  call {:cexpr "b"} boogie_si_record_i32($i75);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 113, 5} true;
  assume {:verifier.code 0} true;
  $i76 := $add.i32($i75,$i75);
  call {:cexpr "b"} boogie_si_record_i32($i76);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 115, 5} true;
  assume {:verifier.code 0} true;
  $i77 := $add.i32($i64,$i64);
  call {:cexpr "c"} boogie_si_record_i32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 9} true;
  assume {:verifier.code 0} true;
  $i78 := $slt.i32($i72,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 7} true;
  assume {:verifier.code 0} true;
  $i79 := $i77;
  assume {:branchcond $i78} true;
  goto $bb46, $bb47;
$bb40:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 15} true;
  assume {:verifier.code 0} true;
  assume ($i65 == 1);
  goto $bb41;
$bb41:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 107, 9} true;
  assume {:verifier.code 0} true;
  $i68 := $add.i32($i62,1);
  call {:cexpr "c"} boogie_si_record_i32($i68);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 108, 5} true;
  assume {:verifier.code 0} true;
  $i67 := $i68;
  goto $bb45;
$bb42:
  assume !($i65 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 20} true;
  assume {:verifier.code 0} true;
  $i66 := $sgt.i32($i61,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 9} true;
  assume {:verifier.code 0} true;
  $i67 := $i62;
  assume {:branchcond $i66} true;
  goto $bb43, $bb44;
$bb43:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 9} true;
  assume {:verifier.code 0} true;
  assume ($i66 == 1);
  goto $bb41;
$bb44:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 106, 9} true;
  assume {:verifier.code 0} true;
  assume !($i66 == 1);
  goto $bb45;
$bb45:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 109, 3} true;
  assume {:verifier.code 0} true;
  $i64 := $i67;
  goto $bb39;
$bb46:
  assume ($i78 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 11} true;
  assume {:verifier.code 0} true;
  $i80 := $slt.i32($i76,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i80} true;
  goto $bb49, $bb51;
$bb47:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 116, 7} true;
  assume {:verifier.code 0} true;
  assume !($i78 == 1);
  goto $bb48;
$bb48:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 121, 7} true;
  assume {:verifier.code 0} true;
  $i84 := $sext.i32.i64($i72);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 121, 9} true;
  assume {:verifier.code 0} true;
  $i85 := $srem.i64($i84,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 121, 7} true;
  assume {:verifier.code 0} true;
  $i86 := $trunc.i64.i32($i85);
  call {:cexpr "a"} boogie_si_record_i32($i86);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 122, 5} true;
  assume {:verifier.code 0} true;
  $i87 := $add.i32($i86,$i86);
  call {:cexpr "a"} boogie_si_record_i32($i87);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 123, 7} true;
  assume {:verifier.code 0} true;
  $i88 := $sext.i32.i64($i76);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 123, 9} true;
  assume {:verifier.code 0} true;
  $i89 := $srem.i64($i88,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 123, 7} true;
  assume {:verifier.code 0} true;
  $i90 := $trunc.i64.i32($i89);
  call {:cexpr "b"} boogie_si_record_i32($i90);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 124, 5} true;
  assume {:verifier.code 0} true;
  $i91 := $add.i32($i90,$i90);
  call {:cexpr "b"} boogie_si_record_i32($i91);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 126, 5} true;
  assume {:verifier.code 0} true;
  $i92 := $add.i32($i79,$i79);
  call {:cexpr "c"} boogie_si_record_i32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 127, 9} true;
  assume {:verifier.code 0} true;
  $i93 := $slt.i32($i87,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 127, 7} true;
  assume {:verifier.code 0} true;
  $i94 := $i92;
  assume {:branchcond $i93} true;
  goto $bb55, $bb56;
$bb49:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 15} true;
  assume {:verifier.code 0} true;
  assume ($i80 == 1);
  goto $bb50;
$bb50:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 118, 9} true;
  assume {:verifier.code 0} true;
  $i83 := $add.i32($i77,1);
  call {:cexpr "c"} boogie_si_record_i32($i83);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 119, 5} true;
  assume {:verifier.code 0} true;
  $i82 := $i83;
  goto $bb54;
$bb51:
  assume !($i80 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 20} true;
  assume {:verifier.code 0} true;
  $i81 := $sgt.i32($i76,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 9} true;
  assume {:verifier.code 0} true;
  $i82 := $i77;
  assume {:branchcond $i81} true;
  goto $bb52, $bb53;
$bb52:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 9} true;
  assume {:verifier.code 0} true;
  assume ($i81 == 1);
  goto $bb50;
$bb53:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 117, 9} true;
  assume {:verifier.code 0} true;
  assume !($i81 == 1);
  goto $bb54;
$bb54:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 120, 3} true;
  assume {:verifier.code 0} true;
  $i79 := $i82;
  goto $bb48;
$bb55:
  assume ($i93 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 11} true;
  assume {:verifier.code 0} true;
  $i95 := $slt.i32($i91,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i95} true;
  goto $bb58, $bb60;
$bb56:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 127, 7} true;
  assume {:verifier.code 0} true;
  assume !($i93 == 1);
  goto $bb57;
$bb57:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 132, 7} true;
  assume {:verifier.code 0} true;
  $i99 := $sext.i32.i64($i87);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 132, 9} true;
  assume {:verifier.code 0} true;
  $i100 := $srem.i64($i99,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 132, 7} true;
  assume {:verifier.code 0} true;
  $i101 := $trunc.i64.i32($i100);
  call {:cexpr "a"} boogie_si_record_i32($i101);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 133, 5} true;
  assume {:verifier.code 0} true;
  $i102 := $add.i32($i101,$i101);
  call {:cexpr "a"} boogie_si_record_i32($i102);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 134, 7} true;
  assume {:verifier.code 0} true;
  $i103 := $sext.i32.i64($i91);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 134, 9} true;
  assume {:verifier.code 0} true;
  $i104 := $srem.i64($i103,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 134, 7} true;
  assume {:verifier.code 0} true;
  $i105 := $trunc.i64.i32($i104);
  call {:cexpr "b"} boogie_si_record_i32($i105);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 135, 5} true;
  assume {:verifier.code 0} true;
  $i106 := $add.i32($i105,$i105);
  call {:cexpr "b"} boogie_si_record_i32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 137, 5} true;
  assume {:verifier.code 0} true;
  $i107 := $add.i32($i94,$i94);
  call {:cexpr "c"} boogie_si_record_i32($i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 9} true;
  assume {:verifier.code 0} true;
  $i108 := $slt.i32($i102,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 7} true;
  assume {:verifier.code 0} true;
  $i109 := $i107;
  assume {:branchcond $i108} true;
  goto $bb64, $bb65;
$bb58:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 15} true;
  assume {:verifier.code 0} true;
  assume ($i95 == 1);
  goto $bb59;
$bb59:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 129, 9} true;
  assume {:verifier.code 0} true;
  $i98 := $add.i32($i92,1);
  call {:cexpr "c"} boogie_si_record_i32($i98);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 130, 5} true;
  assume {:verifier.code 0} true;
  $i97 := $i98;
  goto $bb63;
$bb60:
  assume !($i95 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 20} true;
  assume {:verifier.code 0} true;
  $i96 := $sgt.i32($i91,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 9} true;
  assume {:verifier.code 0} true;
  $i97 := $i92;
  assume {:branchcond $i96} true;
  goto $bb61, $bb62;
$bb61:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 9} true;
  assume {:verifier.code 0} true;
  assume ($i96 == 1);
  goto $bb59;
$bb62:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 128, 9} true;
  assume {:verifier.code 0} true;
  assume !($i96 == 1);
  goto $bb63;
$bb63:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 131, 3} true;
  assume {:verifier.code 0} true;
  $i94 := $i97;
  goto $bb57;
$bb64:
  assume ($i108 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 11} true;
  assume {:verifier.code 0} true;
  $i110 := $slt.i32($i106,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i110} true;
  goto $bb67, $bb69;
$bb65:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 138, 7} true;
  assume {:verifier.code 0} true;
  assume !($i108 == 1);
  goto $bb66;
$bb66:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 143, 7} true;
  assume {:verifier.code 0} true;
  $i114 := $sext.i32.i64($i102);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 143, 9} true;
  assume {:verifier.code 0} true;
  $i115 := $srem.i64($i114,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 143, 7} true;
  assume {:verifier.code 0} true;
  $i116 := $trunc.i64.i32($i115);
  call {:cexpr "a"} boogie_si_record_i32($i116);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 144, 5} true;
  assume {:verifier.code 0} true;
  $i117 := $add.i32($i116,$i116);
  call {:cexpr "a"} boogie_si_record_i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 7} true;
  assume {:verifier.code 0} true;
  $i118 := $sext.i32.i64($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 9} true;
  assume {:verifier.code 0} true;
  $i119 := $srem.i64($i118,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 145, 7} true;
  assume {:verifier.code 0} true;
  $i120 := $trunc.i64.i32($i119);
  call {:cexpr "b"} boogie_si_record_i32($i120);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 146, 5} true;
  assume {:verifier.code 0} true;
  $i121 := $add.i32($i120,$i120);
  call {:cexpr "b"} boogie_si_record_i32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 148, 5} true;
  assume {:verifier.code 0} true;
  $i122 := $add.i32($i109,$i109);
  call {:cexpr "c"} boogie_si_record_i32($i122);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 149, 9} true;
  assume {:verifier.code 0} true;
  $i123 := $slt.i32($i117,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 149, 7} true;
  assume {:verifier.code 0} true;
  $i124 := $i122;
  assume {:branchcond $i123} true;
  goto $bb73, $bb74;
$bb67:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 15} true;
  assume {:verifier.code 0} true;
  assume ($i110 == 1);
  goto $bb68;
$bb68:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 140, 9} true;
  assume {:verifier.code 0} true;
  $i113 := $add.i32($i107,1);
  call {:cexpr "c"} boogie_si_record_i32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 141, 5} true;
  assume {:verifier.code 0} true;
  $i112 := $i113;
  goto $bb72;
$bb69:
  assume !($i110 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 20} true;
  assume {:verifier.code 0} true;
  $i111 := $sgt.i32($i106,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 9} true;
  assume {:verifier.code 0} true;
  $i112 := $i107;
  assume {:branchcond $i111} true;
  goto $bb70, $bb71;
$bb70:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 9} true;
  assume {:verifier.code 0} true;
  assume ($i111 == 1);
  goto $bb68;
$bb71:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 139, 9} true;
  assume {:verifier.code 0} true;
  assume !($i111 == 1);
  goto $bb72;
$bb72:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 142, 3} true;
  assume {:verifier.code 0} true;
  $i109 := $i112;
  goto $bb66;
$bb73:
  assume ($i123 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 11} true;
  assume {:verifier.code 0} true;
  $i125 := $slt.i32($i121,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i125} true;
  goto $bb76, $bb78;
$bb74:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 149, 7} true;
  assume {:verifier.code 0} true;
  assume !($i123 == 1);
  goto $bb75;
$bb75:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 154, 7} true;
  assume {:verifier.code 0} true;
  $i129 := $sext.i32.i64($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 154, 9} true;
  assume {:verifier.code 0} true;
  $i130 := $srem.i64($i129,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 154, 7} true;
  assume {:verifier.code 0} true;
  $i131 := $trunc.i64.i32($i130);
  call {:cexpr "a"} boogie_si_record_i32($i131);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 155, 5} true;
  assume {:verifier.code 0} true;
  $i132 := $add.i32($i131,$i131);
  call {:cexpr "a"} boogie_si_record_i32($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 156, 7} true;
  assume {:verifier.code 0} true;
  $i133 := $sext.i32.i64($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 156, 9} true;
  assume {:verifier.code 0} true;
  $i134 := $srem.i64($i133,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 156, 7} true;
  assume {:verifier.code 0} true;
  $i135 := $trunc.i64.i32($i134);
  call {:cexpr "b"} boogie_si_record_i32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 157, 5} true;
  assume {:verifier.code 0} true;
  $i136 := $add.i32($i135,$i135);
  call {:cexpr "b"} boogie_si_record_i32($i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 159, 5} true;
  assume {:verifier.code 0} true;
  $i137 := $add.i32($i124,$i124);
  call {:cexpr "c"} boogie_si_record_i32($i137);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 160, 9} true;
  assume {:verifier.code 0} true;
  $i138 := $slt.i32($i132,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 160, 7} true;
  assume {:verifier.code 0} true;
  $i139 := $i137;
  assume {:branchcond $i138} true;
  goto $bb82, $bb83;
$bb76:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 15} true;
  assume {:verifier.code 0} true;
  assume ($i125 == 1);
  goto $bb77;
$bb77:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 151, 9} true;
  assume {:verifier.code 0} true;
  $i128 := $add.i32($i122,1);
  call {:cexpr "c"} boogie_si_record_i32($i128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 152, 5} true;
  assume {:verifier.code 0} true;
  $i127 := $i128;
  goto $bb81;
$bb78:
  assume !($i125 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 20} true;
  assume {:verifier.code 0} true;
  $i126 := $sgt.i32($i121,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 9} true;
  assume {:verifier.code 0} true;
  $i127 := $i122;
  assume {:branchcond $i126} true;
  goto $bb79, $bb80;
$bb79:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 9} true;
  assume {:verifier.code 0} true;
  assume ($i126 == 1);
  goto $bb77;
$bb80:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 150, 9} true;
  assume {:verifier.code 0} true;
  assume !($i126 == 1);
  goto $bb81;
$bb81:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 153, 3} true;
  assume {:verifier.code 0} true;
  $i124 := $i127;
  goto $bb75;
$bb82:
  assume ($i138 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 11} true;
  assume {:verifier.code 0} true;
  $i140 := $slt.i32($i136,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i140} true;
  goto $bb85, $bb87;
$bb83:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 160, 7} true;
  assume {:verifier.code 0} true;
  assume !($i138 == 1);
  goto $bb84;
$bb84:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 165, 7} true;
  assume {:verifier.code 0} true;
  $i144 := $sext.i32.i64($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 165, 9} true;
  assume {:verifier.code 0} true;
  $i145 := $srem.i64($i144,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 165, 7} true;
  assume {:verifier.code 0} true;
  $i146 := $trunc.i64.i32($i145);
  call {:cexpr "a"} boogie_si_record_i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 166, 5} true;
  assume {:verifier.code 0} true;
  $i147 := $add.i32($i146,$i146);
  call {:cexpr "a"} boogie_si_record_i32($i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 167, 7} true;
  assume {:verifier.code 0} true;
  $i148 := $sext.i32.i64($i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 167, 9} true;
  assume {:verifier.code 0} true;
  $i149 := $srem.i64($i148,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 167, 7} true;
  assume {:verifier.code 0} true;
  $i150 := $trunc.i64.i32($i149);
  call {:cexpr "b"} boogie_si_record_i32($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 168, 5} true;
  assume {:verifier.code 0} true;
  $i151 := $add.i32($i150,$i150);
  call {:cexpr "b"} boogie_si_record_i32($i151);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 170, 5} true;
  assume {:verifier.code 0} true;
  $i152 := $add.i32($i139,$i139);
  call {:cexpr "c"} boogie_si_record_i32($i152);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 9} true;
  assume {:verifier.code 0} true;
  $i153 := $slt.i32($i147,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 7} true;
  assume {:verifier.code 0} true;
  $i154 := $i152;
  assume {:branchcond $i153} true;
  goto $bb91, $bb92;
$bb85:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 15} true;
  assume {:verifier.code 0} true;
  assume ($i140 == 1);
  goto $bb86;
$bb86:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 162, 9} true;
  assume {:verifier.code 0} true;
  $i143 := $add.i32($i137,1);
  call {:cexpr "c"} boogie_si_record_i32($i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 163, 5} true;
  assume {:verifier.code 0} true;
  $i142 := $i143;
  goto $bb90;
$bb87:
  assume !($i140 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 20} true;
  assume {:verifier.code 0} true;
  $i141 := $sgt.i32($i136,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 9} true;
  assume {:verifier.code 0} true;
  $i142 := $i137;
  assume {:branchcond $i141} true;
  goto $bb88, $bb89;
$bb88:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 9} true;
  assume {:verifier.code 0} true;
  assume ($i141 == 1);
  goto $bb86;
$bb89:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 161, 9} true;
  assume {:verifier.code 0} true;
  assume !($i141 == 1);
  goto $bb90;
$bb90:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 164, 3} true;
  assume {:verifier.code 0} true;
  $i139 := $i142;
  goto $bb84;
$bb91:
  assume ($i153 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 11} true;
  assume {:verifier.code 0} true;
  $i155 := $slt.i32($i151,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i155} true;
  goto $bb94, $bb96;
$bb92:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 171, 7} true;
  assume {:verifier.code 0} true;
  assume !($i153 == 1);
  goto $bb93;
$bb93:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 176, 7} true;
  assume {:verifier.code 0} true;
  $i159 := $sext.i32.i64($i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 176, 9} true;
  assume {:verifier.code 0} true;
  $i160 := $srem.i64($i159,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 176, 7} true;
  assume {:verifier.code 0} true;
  $i161 := $trunc.i64.i32($i160);
  call {:cexpr "a"} boogie_si_record_i32($i161);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 177, 5} true;
  assume {:verifier.code 0} true;
  $i162 := $add.i32($i161,$i161);
  call {:cexpr "a"} boogie_si_record_i32($i162);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 178, 7} true;
  assume {:verifier.code 0} true;
  $i163 := $sext.i32.i64($i151);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 178, 9} true;
  assume {:verifier.code 0} true;
  $i164 := $srem.i64($i163,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 178, 7} true;
  assume {:verifier.code 0} true;
  $i165 := $trunc.i64.i32($i164);
  call {:cexpr "b"} boogie_si_record_i32($i165);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 179, 5} true;
  assume {:verifier.code 0} true;
  $i166 := $add.i32($i165,$i165);
  call {:cexpr "b"} boogie_si_record_i32($i166);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 181, 5} true;
  assume {:verifier.code 0} true;
  $i167 := $add.i32($i154,$i154);
  call {:cexpr "c"} boogie_si_record_i32($i167);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 182, 9} true;
  assume {:verifier.code 0} true;
  $i168 := $slt.i32($i162,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 182, 7} true;
  assume {:verifier.code 0} true;
  $i169 := $i167;
  assume {:branchcond $i168} true;
  goto $bb100, $bb101;
$bb94:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 15} true;
  assume {:verifier.code 0} true;
  assume ($i155 == 1);
  goto $bb95;
$bb95:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 173, 9} true;
  assume {:verifier.code 0} true;
  $i158 := $add.i32($i152,1);
  call {:cexpr "c"} boogie_si_record_i32($i158);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 174, 5} true;
  assume {:verifier.code 0} true;
  $i157 := $i158;
  goto $bb99;
$bb96:
  assume !($i155 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 20} true;
  assume {:verifier.code 0} true;
  $i156 := $sgt.i32($i151,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 9} true;
  assume {:verifier.code 0} true;
  $i157 := $i152;
  assume {:branchcond $i156} true;
  goto $bb97, $bb98;
$bb97:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 9} true;
  assume {:verifier.code 0} true;
  assume ($i156 == 1);
  goto $bb95;
$bb98:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 172, 9} true;
  assume {:verifier.code 0} true;
  assume !($i156 == 1);
  goto $bb99;
$bb99:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 175, 3} true;
  assume {:verifier.code 0} true;
  $i154 := $i157;
  goto $bb93;
$bb100:
  assume ($i168 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 11} true;
  assume {:verifier.code 0} true;
  $i170 := $slt.i32($i166,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i170} true;
  goto $bb103, $bb105;
$bb101:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 182, 7} true;
  assume {:verifier.code 0} true;
  assume !($i168 == 1);
  goto $bb102;
$bb102:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 187, 7} true;
  assume {:verifier.code 0} true;
  $i174 := $sext.i32.i64($i162);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 187, 9} true;
  assume {:verifier.code 0} true;
  $i175 := $srem.i64($i174,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 187, 7} true;
  assume {:verifier.code 0} true;
  $i176 := $trunc.i64.i32($i175);
  call {:cexpr "a"} boogie_si_record_i32($i176);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 188, 5} true;
  assume {:verifier.code 0} true;
  $i177 := $add.i32($i176,$i176);
  call {:cexpr "a"} boogie_si_record_i32($i177);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 189, 7} true;
  assume {:verifier.code 0} true;
  $i178 := $sext.i32.i64($i166);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 189, 9} true;
  assume {:verifier.code 0} true;
  $i179 := $srem.i64($i178,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 189, 7} true;
  assume {:verifier.code 0} true;
  $i180 := $trunc.i64.i32($i179);
  call {:cexpr "b"} boogie_si_record_i32($i180);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 190, 5} true;
  assume {:verifier.code 0} true;
  $i181 := $add.i32($i180,$i180);
  call {:cexpr "b"} boogie_si_record_i32($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 192, 5} true;
  assume {:verifier.code 0} true;
  $i182 := $add.i32($i169,$i169);
  call {:cexpr "c"} boogie_si_record_i32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 193, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $slt.i32($i177,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 193, 7} true;
  assume {:verifier.code 0} true;
  $i184 := $i182;
  assume {:branchcond $i183} true;
  goto $bb109, $bb110;
$bb103:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 15} true;
  assume {:verifier.code 0} true;
  assume ($i170 == 1);
  goto $bb104;
$bb104:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 184, 9} true;
  assume {:verifier.code 0} true;
  $i173 := $add.i32($i167,1);
  call {:cexpr "c"} boogie_si_record_i32($i173);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 185, 5} true;
  assume {:verifier.code 0} true;
  $i172 := $i173;
  goto $bb108;
$bb105:
  assume !($i170 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 20} true;
  assume {:verifier.code 0} true;
  $i171 := $sgt.i32($i166,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 9} true;
  assume {:verifier.code 0} true;
  $i172 := $i167;
  assume {:branchcond $i171} true;
  goto $bb106, $bb107;
$bb106:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 9} true;
  assume {:verifier.code 0} true;
  assume ($i171 == 1);
  goto $bb104;
$bb107:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 183, 9} true;
  assume {:verifier.code 0} true;
  assume !($i171 == 1);
  goto $bb108;
$bb108:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 186, 3} true;
  assume {:verifier.code 0} true;
  $i169 := $i172;
  goto $bb102;
$bb109:
  assume ($i183 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 11} true;
  assume {:verifier.code 0} true;
  $i185 := $slt.i32($i181,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i185} true;
  goto $bb112, $bb114;
$bb110:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 193, 7} true;
  assume {:verifier.code 0} true;
  assume !($i183 == 1);
  goto $bb111;
$bb111:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 198, 7} true;
  assume {:verifier.code 0} true;
  $i189 := $sext.i32.i64($i177);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 198, 9} true;
  assume {:verifier.code 0} true;
  $i190 := $srem.i64($i189,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 198, 7} true;
  assume {:verifier.code 0} true;
  $i191 := $trunc.i64.i32($i190);
  call {:cexpr "a"} boogie_si_record_i32($i191);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 199, 5} true;
  assume {:verifier.code 0} true;
  $i192 := $add.i32($i191,$i191);
  call {:cexpr "a"} boogie_si_record_i32($i192);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 200, 7} true;
  assume {:verifier.code 0} true;
  $i193 := $sext.i32.i64($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 200, 9} true;
  assume {:verifier.code 0} true;
  $i194 := $srem.i64($i193,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 200, 7} true;
  assume {:verifier.code 0} true;
  $i195 := $trunc.i64.i32($i194);
  call {:cexpr "b"} boogie_si_record_i32($i195);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 201, 5} true;
  assume {:verifier.code 0} true;
  $i196 := $add.i32($i195,$i195);
  call {:cexpr "b"} boogie_si_record_i32($i196);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 203, 5} true;
  assume {:verifier.code 0} true;
  $i197 := $add.i32($i184,$i184);
  call {:cexpr "c"} boogie_si_record_i32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 204, 9} true;
  assume {:verifier.code 0} true;
  $i198 := $slt.i32($i192,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 204, 7} true;
  assume {:verifier.code 0} true;
  $i199 := $i197;
  assume {:branchcond $i198} true;
  goto $bb118, $bb119;
$bb112:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 15} true;
  assume {:verifier.code 0} true;
  assume ($i185 == 1);
  goto $bb113;
$bb113:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 195, 9} true;
  assume {:verifier.code 0} true;
  $i188 := $add.i32($i182,1);
  call {:cexpr "c"} boogie_si_record_i32($i188);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 196, 5} true;
  assume {:verifier.code 0} true;
  $i187 := $i188;
  goto $bb117;
$bb114:
  assume !($i185 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 20} true;
  assume {:verifier.code 0} true;
  $i186 := $sgt.i32($i181,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 9} true;
  assume {:verifier.code 0} true;
  $i187 := $i182;
  assume {:branchcond $i186} true;
  goto $bb115, $bb116;
$bb115:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 9} true;
  assume {:verifier.code 0} true;
  assume ($i186 == 1);
  goto $bb113;
$bb116:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 194, 9} true;
  assume {:verifier.code 0} true;
  assume !($i186 == 1);
  goto $bb117;
$bb117:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 197, 3} true;
  assume {:verifier.code 0} true;
  $i184 := $i187;
  goto $bb111;
$bb118:
  assume ($i198 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 11} true;
  assume {:verifier.code 0} true;
  $i200 := $slt.i32($i196,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i200} true;
  goto $bb121, $bb123;
$bb119:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 204, 7} true;
  assume {:verifier.code 0} true;
  assume !($i198 == 1);
  goto $bb120;
$bb120:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 209, 7} true;
  assume {:verifier.code 0} true;
  $i204 := $sext.i32.i64($i192);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 209, 9} true;
  assume {:verifier.code 0} true;
  $i205 := $srem.i64($i204,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 209, 7} true;
  assume {:verifier.code 0} true;
  $i206 := $trunc.i64.i32($i205);
  call {:cexpr "a"} boogie_si_record_i32($i206);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 210, 5} true;
  assume {:verifier.code 0} true;
  $i207 := $add.i32($i206,$i206);
  call {:cexpr "a"} boogie_si_record_i32($i207);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 211, 7} true;
  assume {:verifier.code 0} true;
  $i208 := $sext.i32.i64($i196);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 211, 9} true;
  assume {:verifier.code 0} true;
  $i209 := $srem.i64($i208,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 211, 7} true;
  assume {:verifier.code 0} true;
  $i210 := $trunc.i64.i32($i209);
  call {:cexpr "b"} boogie_si_record_i32($i210);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 212, 5} true;
  assume {:verifier.code 0} true;
  $i211 := $add.i32($i210,$i210);
  call {:cexpr "b"} boogie_si_record_i32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 214, 5} true;
  assume {:verifier.code 0} true;
  $i212 := $add.i32($i199,$i199);
  call {:cexpr "c"} boogie_si_record_i32($i212);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 215, 9} true;
  assume {:verifier.code 0} true;
  $i213 := $slt.i32($i207,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 215, 7} true;
  assume {:verifier.code 0} true;
  $i214 := $i212;
  assume {:branchcond $i213} true;
  goto $bb127, $bb128;
$bb121:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 15} true;
  assume {:verifier.code 0} true;
  assume ($i200 == 1);
  goto $bb122;
$bb122:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 206, 9} true;
  assume {:verifier.code 0} true;
  $i203 := $add.i32($i197,1);
  call {:cexpr "c"} boogie_si_record_i32($i203);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 207, 5} true;
  assume {:verifier.code 0} true;
  $i202 := $i203;
  goto $bb126;
$bb123:
  assume !($i200 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 20} true;
  assume {:verifier.code 0} true;
  $i201 := $sgt.i32($i196,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 9} true;
  assume {:verifier.code 0} true;
  $i202 := $i197;
  assume {:branchcond $i201} true;
  goto $bb124, $bb125;
$bb124:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 9} true;
  assume {:verifier.code 0} true;
  assume ($i201 == 1);
  goto $bb122;
$bb125:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 205, 9} true;
  assume {:verifier.code 0} true;
  assume !($i201 == 1);
  goto $bb126;
$bb126:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 208, 3} true;
  assume {:verifier.code 0} true;
  $i199 := $i202;
  goto $bb120;
$bb127:
  assume ($i213 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 11} true;
  assume {:verifier.code 0} true;
  $i215 := $slt.i32($i211,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i215} true;
  goto $bb130, $bb132;
$bb128:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 215, 7} true;
  assume {:verifier.code 0} true;
  assume !($i213 == 1);
  goto $bb129;
$bb129:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 7} true;
  assume {:verifier.code 0} true;
  $i219 := $sext.i32.i64($i207);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 9} true;
  assume {:verifier.code 0} true;
  $i220 := $srem.i64($i219,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 220, 7} true;
  assume {:verifier.code 0} true;
  $i221 := $trunc.i64.i32($i220);
  call {:cexpr "a"} boogie_si_record_i32($i221);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 221, 5} true;
  assume {:verifier.code 0} true;
  $i222 := $add.i32($i221,$i221);
  call {:cexpr "a"} boogie_si_record_i32($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 7} true;
  assume {:verifier.code 0} true;
  $i223 := $sext.i32.i64($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 9} true;
  assume {:verifier.code 0} true;
  $i224 := $srem.i64($i223,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 222, 7} true;
  assume {:verifier.code 0} true;
  $i225 := $trunc.i64.i32($i224);
  call {:cexpr "b"} boogie_si_record_i32($i225);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 223, 5} true;
  assume {:verifier.code 0} true;
  $i226 := $add.i32($i225,$i225);
  call {:cexpr "b"} boogie_si_record_i32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 225, 5} true;
  assume {:verifier.code 0} true;
  $i227 := $add.i32($i214,$i214);
  call {:cexpr "c"} boogie_si_record_i32($i227);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 226, 9} true;
  assume {:verifier.code 0} true;
  $i228 := $slt.i32($i222,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 226, 7} true;
  assume {:verifier.code 0} true;
  $i229 := $i227;
  assume {:branchcond $i228} true;
  goto $bb136, $bb137;
$bb130:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 15} true;
  assume {:verifier.code 0} true;
  assume ($i215 == 1);
  goto $bb131;
$bb131:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 217, 9} true;
  assume {:verifier.code 0} true;
  $i218 := $add.i32($i212,1);
  call {:cexpr "c"} boogie_si_record_i32($i218);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 218, 5} true;
  assume {:verifier.code 0} true;
  $i217 := $i218;
  goto $bb135;
$bb132:
  assume !($i215 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 20} true;
  assume {:verifier.code 0} true;
  $i216 := $sgt.i32($i211,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 9} true;
  assume {:verifier.code 0} true;
  $i217 := $i212;
  assume {:branchcond $i216} true;
  goto $bb133, $bb134;
$bb133:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 9} true;
  assume {:verifier.code 0} true;
  assume ($i216 == 1);
  goto $bb131;
$bb134:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 216, 9} true;
  assume {:verifier.code 0} true;
  assume !($i216 == 1);
  goto $bb135;
$bb135:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 219, 3} true;
  assume {:verifier.code 0} true;
  $i214 := $i217;
  goto $bb129;
$bb136:
  assume ($i228 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 11} true;
  assume {:verifier.code 0} true;
  $i230 := $slt.i32($i226,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i230} true;
  goto $bb139, $bb141;
$bb137:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 226, 7} true;
  assume {:verifier.code 0} true;
  assume !($i228 == 1);
  goto $bb138;
$bb138:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 7} true;
  assume {:verifier.code 0} true;
  $i234 := $sext.i32.i64($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 9} true;
  assume {:verifier.code 0} true;
  $i235 := $srem.i64($i234,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 231, 7} true;
  assume {:verifier.code 0} true;
  $i236 := $trunc.i64.i32($i235);
  call {:cexpr "a"} boogie_si_record_i32($i236);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 232, 5} true;
  assume {:verifier.code 0} true;
  $i237 := $add.i32($i236,$i236);
  call {:cexpr "a"} boogie_si_record_i32($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 7} true;
  assume {:verifier.code 0} true;
  $i238 := $sext.i32.i64($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 9} true;
  assume {:verifier.code 0} true;
  $i239 := $srem.i64($i238,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 233, 7} true;
  assume {:verifier.code 0} true;
  $i240 := $trunc.i64.i32($i239);
  call {:cexpr "b"} boogie_si_record_i32($i240);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 234, 5} true;
  assume {:verifier.code 0} true;
  $i241 := $add.i32($i240,$i240);
  call {:cexpr "b"} boogie_si_record_i32($i241);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 236, 5} true;
  assume {:verifier.code 0} true;
  $i242 := $add.i32($i229,$i229);
  call {:cexpr "c"} boogie_si_record_i32($i242);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 237, 9} true;
  assume {:verifier.code 0} true;
  $i243 := $slt.i32($i237,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 237, 7} true;
  assume {:verifier.code 0} true;
  $i244 := $i242;
  assume {:branchcond $i243} true;
  goto $bb145, $bb146;
$bb139:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 15} true;
  assume {:verifier.code 0} true;
  assume ($i230 == 1);
  goto $bb140;
$bb140:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 228, 9} true;
  assume {:verifier.code 0} true;
  $i233 := $add.i32($i227,1);
  call {:cexpr "c"} boogie_si_record_i32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 229, 5} true;
  assume {:verifier.code 0} true;
  $i232 := $i233;
  goto $bb144;
$bb141:
  assume !($i230 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 20} true;
  assume {:verifier.code 0} true;
  $i231 := $sgt.i32($i226,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 9} true;
  assume {:verifier.code 0} true;
  $i232 := $i227;
  assume {:branchcond $i231} true;
  goto $bb142, $bb143;
$bb142:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 9} true;
  assume {:verifier.code 0} true;
  assume ($i231 == 1);
  goto $bb140;
$bb143:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 227, 9} true;
  assume {:verifier.code 0} true;
  assume !($i231 == 1);
  goto $bb144;
$bb144:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 230, 3} true;
  assume {:verifier.code 0} true;
  $i229 := $i232;
  goto $bb138;
$bb145:
  assume ($i243 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 11} true;
  assume {:verifier.code 0} true;
  $i245 := $slt.i32($i241,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i245} true;
  goto $bb148, $bb150;
$bb146:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 237, 7} true;
  assume {:verifier.code 0} true;
  assume !($i243 == 1);
  goto $bb147;
$bb147:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 7} true;
  assume {:verifier.code 0} true;
  $i249 := $sext.i32.i64($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 9} true;
  assume {:verifier.code 0} true;
  $i250 := $srem.i64($i249,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 242, 7} true;
  assume {:verifier.code 0} true;
  $i251 := $trunc.i64.i32($i250);
  call {:cexpr "a"} boogie_si_record_i32($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 243, 5} true;
  assume {:verifier.code 0} true;
  $i252 := $add.i32($i251,$i251);
  call {:cexpr "a"} boogie_si_record_i32($i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 244, 7} true;
  assume {:verifier.code 0} true;
  $i253 := $sext.i32.i64($i241);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 244, 9} true;
  assume {:verifier.code 0} true;
  $i254 := $srem.i64($i253,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 244, 7} true;
  assume {:verifier.code 0} true;
  $i255 := $trunc.i64.i32($i254);
  call {:cexpr "b"} boogie_si_record_i32($i255);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 245, 5} true;
  assume {:verifier.code 0} true;
  $i256 := $add.i32($i255,$i255);
  call {:cexpr "b"} boogie_si_record_i32($i256);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 247, 5} true;
  assume {:verifier.code 0} true;
  $i257 := $add.i32($i244,$i244);
  call {:cexpr "c"} boogie_si_record_i32($i257);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 9} true;
  assume {:verifier.code 0} true;
  $i258 := $slt.i32($i252,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 7} true;
  assume {:verifier.code 0} true;
  $i259 := $i257;
  assume {:branchcond $i258} true;
  goto $bb154, $bb155;
$bb148:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 15} true;
  assume {:verifier.code 0} true;
  assume ($i245 == 1);
  goto $bb149;
$bb149:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 239, 9} true;
  assume {:verifier.code 0} true;
  $i248 := $add.i32($i242,1);
  call {:cexpr "c"} boogie_si_record_i32($i248);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 240, 5} true;
  assume {:verifier.code 0} true;
  $i247 := $i248;
  goto $bb153;
$bb150:
  assume !($i245 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 20} true;
  assume {:verifier.code 0} true;
  $i246 := $sgt.i32($i241,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 9} true;
  assume {:verifier.code 0} true;
  $i247 := $i242;
  assume {:branchcond $i246} true;
  goto $bb151, $bb152;
$bb151:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 9} true;
  assume {:verifier.code 0} true;
  assume ($i246 == 1);
  goto $bb149;
$bb152:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 238, 9} true;
  assume {:verifier.code 0} true;
  assume !($i246 == 1);
  goto $bb153;
$bb153:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 241, 3} true;
  assume {:verifier.code 0} true;
  $i244 := $i247;
  goto $bb147;
$bb154:
  assume ($i258 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 11} true;
  assume {:verifier.code 0} true;
  $i260 := $slt.i32($i256,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i260} true;
  goto $bb157, $bb159;
$bb155:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 248, 7} true;
  assume {:verifier.code 0} true;
  assume !($i258 == 1);
  goto $bb156;
$bb156:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 7} true;
  assume {:verifier.code 0} true;
  $i264 := $sext.i32.i64($i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 9} true;
  assume {:verifier.code 0} true;
  $i265 := $srem.i64($i264,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 253, 7} true;
  assume {:verifier.code 0} true;
  $i266 := $trunc.i64.i32($i265);
  call {:cexpr "a"} boogie_si_record_i32($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 254, 5} true;
  assume {:verifier.code 0} true;
  $i267 := $add.i32($i266,$i266);
  call {:cexpr "a"} boogie_si_record_i32($i267);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 255, 7} true;
  assume {:verifier.code 0} true;
  $i268 := $sext.i32.i64($i256);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 255, 9} true;
  assume {:verifier.code 0} true;
  $i269 := $srem.i64($i268,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 255, 7} true;
  assume {:verifier.code 0} true;
  $i270 := $trunc.i64.i32($i269);
  call {:cexpr "b"} boogie_si_record_i32($i270);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 256, 5} true;
  assume {:verifier.code 0} true;
  $i271 := $add.i32($i270,$i270);
  call {:cexpr "b"} boogie_si_record_i32($i271);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 258, 5} true;
  assume {:verifier.code 0} true;
  $i272 := $add.i32($i259,$i259);
  call {:cexpr "c"} boogie_si_record_i32($i272);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 259, 9} true;
  assume {:verifier.code 0} true;
  $i273 := $slt.i32($i267,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 259, 7} true;
  assume {:verifier.code 0} true;
  $i274 := $i272;
  assume {:branchcond $i273} true;
  goto $bb163, $bb164;
$bb157:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 15} true;
  assume {:verifier.code 0} true;
  assume ($i260 == 1);
  goto $bb158;
$bb158:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 250, 9} true;
  assume {:verifier.code 0} true;
  $i263 := $add.i32($i257,1);
  call {:cexpr "c"} boogie_si_record_i32($i263);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 251, 5} true;
  assume {:verifier.code 0} true;
  $i262 := $i263;
  goto $bb162;
$bb159:
  assume !($i260 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 20} true;
  assume {:verifier.code 0} true;
  $i261 := $sgt.i32($i256,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 9} true;
  assume {:verifier.code 0} true;
  $i262 := $i257;
  assume {:branchcond $i261} true;
  goto $bb160, $bb161;
$bb160:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 9} true;
  assume {:verifier.code 0} true;
  assume ($i261 == 1);
  goto $bb158;
$bb161:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 249, 9} true;
  assume {:verifier.code 0} true;
  assume !($i261 == 1);
  goto $bb162;
$bb162:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 252, 3} true;
  assume {:verifier.code 0} true;
  $i259 := $i262;
  goto $bb156;
$bb163:
  assume ($i273 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 11} true;
  assume {:verifier.code 0} true;
  $i275 := $slt.i32($i271,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i275} true;
  goto $bb166, $bb168;
$bb164:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 259, 7} true;
  assume {:verifier.code 0} true;
  assume !($i273 == 1);
  goto $bb165;
$bb165:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 264, 7} true;
  assume {:verifier.code 0} true;
  $i279 := $sext.i32.i64($i267);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 264, 9} true;
  assume {:verifier.code 0} true;
  $i280 := $srem.i64($i279,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 264, 7} true;
  assume {:verifier.code 0} true;
  $i281 := $trunc.i64.i32($i280);
  call {:cexpr "a"} boogie_si_record_i32($i281);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 265, 5} true;
  assume {:verifier.code 0} true;
  $i282 := $add.i32($i281,$i281);
  call {:cexpr "a"} boogie_si_record_i32($i282);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 266, 7} true;
  assume {:verifier.code 0} true;
  $i283 := $sext.i32.i64($i271);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 266, 9} true;
  assume {:verifier.code 0} true;
  $i284 := $srem.i64($i283,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 266, 7} true;
  assume {:verifier.code 0} true;
  $i285 := $trunc.i64.i32($i284);
  call {:cexpr "b"} boogie_si_record_i32($i285);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 267, 5} true;
  assume {:verifier.code 0} true;
  $i286 := $add.i32($i285,$i285);
  call {:cexpr "b"} boogie_si_record_i32($i286);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 269, 5} true;
  assume {:verifier.code 0} true;
  $i287 := $add.i32($i274,$i274);
  call {:cexpr "c"} boogie_si_record_i32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 270, 9} true;
  assume {:verifier.code 0} true;
  $i288 := $slt.i32($i282,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 270, 7} true;
  assume {:verifier.code 0} true;
  $i289 := $i287;
  assume {:branchcond $i288} true;
  goto $bb172, $bb173;
$bb166:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 15} true;
  assume {:verifier.code 0} true;
  assume ($i275 == 1);
  goto $bb167;
$bb167:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 261, 9} true;
  assume {:verifier.code 0} true;
  $i278 := $add.i32($i272,1);
  call {:cexpr "c"} boogie_si_record_i32($i278);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 262, 5} true;
  assume {:verifier.code 0} true;
  $i277 := $i278;
  goto $bb171;
$bb168:
  assume !($i275 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 20} true;
  assume {:verifier.code 0} true;
  $i276 := $sgt.i32($i271,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 9} true;
  assume {:verifier.code 0} true;
  $i277 := $i272;
  assume {:branchcond $i276} true;
  goto $bb169, $bb170;
$bb169:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 9} true;
  assume {:verifier.code 0} true;
  assume ($i276 == 1);
  goto $bb167;
$bb170:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 260, 9} true;
  assume {:verifier.code 0} true;
  assume !($i276 == 1);
  goto $bb171;
$bb171:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 263, 3} true;
  assume {:verifier.code 0} true;
  $i274 := $i277;
  goto $bb165;
$bb172:
  assume ($i288 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 11} true;
  assume {:verifier.code 0} true;
  $i290 := $slt.i32($i286,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i290} true;
  goto $bb175, $bb177;
$bb173:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 270, 7} true;
  assume {:verifier.code 0} true;
  assume !($i288 == 1);
  goto $bb174;
$bb174:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 275, 7} true;
  assume {:verifier.code 0} true;
  $i294 := $sext.i32.i64($i282);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 275, 9} true;
  assume {:verifier.code 0} true;
  $i295 := $srem.i64($i294,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 275, 7} true;
  assume {:verifier.code 0} true;
  $i296 := $trunc.i64.i32($i295);
  call {:cexpr "a"} boogie_si_record_i32($i296);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 276, 5} true;
  assume {:verifier.code 0} true;
  $i297 := $add.i32($i296,$i296);
  call {:cexpr "a"} boogie_si_record_i32($i297);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 277, 7} true;
  assume {:verifier.code 0} true;
  $i298 := $sext.i32.i64($i286);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 277, 9} true;
  assume {:verifier.code 0} true;
  $i299 := $srem.i64($i298,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 277, 7} true;
  assume {:verifier.code 0} true;
  $i300 := $trunc.i64.i32($i299);
  call {:cexpr "b"} boogie_si_record_i32($i300);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 278, 5} true;
  assume {:verifier.code 0} true;
  $i301 := $add.i32($i300,$i300);
  call {:cexpr "b"} boogie_si_record_i32($i301);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 280, 5} true;
  assume {:verifier.code 0} true;
  $i302 := $add.i32($i289,$i289);
  call {:cexpr "c"} boogie_si_record_i32($i302);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 281, 9} true;
  assume {:verifier.code 0} true;
  $i303 := $slt.i32($i297,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 281, 7} true;
  assume {:verifier.code 0} true;
  $i304 := $i302;
  assume {:branchcond $i303} true;
  goto $bb181, $bb182;
$bb175:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 15} true;
  assume {:verifier.code 0} true;
  assume ($i290 == 1);
  goto $bb176;
$bb176:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 272, 9} true;
  assume {:verifier.code 0} true;
  $i293 := $add.i32($i287,1);
  call {:cexpr "c"} boogie_si_record_i32($i293);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 273, 5} true;
  assume {:verifier.code 0} true;
  $i292 := $i293;
  goto $bb180;
$bb177:
  assume !($i290 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 20} true;
  assume {:verifier.code 0} true;
  $i291 := $sgt.i32($i286,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 9} true;
  assume {:verifier.code 0} true;
  $i292 := $i287;
  assume {:branchcond $i291} true;
  goto $bb178, $bb179;
$bb178:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 9} true;
  assume {:verifier.code 0} true;
  assume ($i291 == 1);
  goto $bb176;
$bb179:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 271, 9} true;
  assume {:verifier.code 0} true;
  assume !($i291 == 1);
  goto $bb180;
$bb180:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 274, 3} true;
  assume {:verifier.code 0} true;
  $i289 := $i292;
  goto $bb174;
$bb181:
  assume ($i303 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 11} true;
  assume {:verifier.code 0} true;
  $i305 := $slt.i32($i301,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i305} true;
  goto $bb184, $bb186;
$bb182:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 281, 7} true;
  assume {:verifier.code 0} true;
  assume !($i303 == 1);
  goto $bb183;
$bb183:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 286, 7} true;
  assume {:verifier.code 0} true;
  $i309 := $sext.i32.i64($i297);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 286, 9} true;
  assume {:verifier.code 0} true;
  $i310 := $srem.i64($i309,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 286, 7} true;
  assume {:verifier.code 0} true;
  $i311 := $trunc.i64.i32($i310);
  call {:cexpr "a"} boogie_si_record_i32($i311);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 287, 5} true;
  assume {:verifier.code 0} true;
  $i312 := $add.i32($i311,$i311);
  call {:cexpr "a"} boogie_si_record_i32($i312);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 288, 7} true;
  assume {:verifier.code 0} true;
  $i313 := $sext.i32.i64($i301);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 288, 9} true;
  assume {:verifier.code 0} true;
  $i314 := $srem.i64($i313,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 288, 7} true;
  assume {:verifier.code 0} true;
  $i315 := $trunc.i64.i32($i314);
  call {:cexpr "b"} boogie_si_record_i32($i315);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 289, 5} true;
  assume {:verifier.code 0} true;
  $i316 := $add.i32($i315,$i315);
  call {:cexpr "b"} boogie_si_record_i32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 291, 5} true;
  assume {:verifier.code 0} true;
  $i317 := $add.i32($i304,$i304);
  call {:cexpr "c"} boogie_si_record_i32($i317);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 292, 9} true;
  assume {:verifier.code 0} true;
  $i318 := $slt.i32($i312,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 292, 7} true;
  assume {:verifier.code 0} true;
  $i319 := $i317;
  assume {:branchcond $i318} true;
  goto $bb190, $bb191;
$bb184:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 15} true;
  assume {:verifier.code 0} true;
  assume ($i305 == 1);
  goto $bb185;
$bb185:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 283, 9} true;
  assume {:verifier.code 0} true;
  $i308 := $add.i32($i302,1);
  call {:cexpr "c"} boogie_si_record_i32($i308);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 284, 5} true;
  assume {:verifier.code 0} true;
  $i307 := $i308;
  goto $bb189;
$bb186:
  assume !($i305 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 20} true;
  assume {:verifier.code 0} true;
  $i306 := $sgt.i32($i301,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 9} true;
  assume {:verifier.code 0} true;
  $i307 := $i302;
  assume {:branchcond $i306} true;
  goto $bb187, $bb188;
$bb187:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 9} true;
  assume {:verifier.code 0} true;
  assume ($i306 == 1);
  goto $bb185;
$bb188:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 282, 9} true;
  assume {:verifier.code 0} true;
  assume !($i306 == 1);
  goto $bb189;
$bb189:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 285, 3} true;
  assume {:verifier.code 0} true;
  $i304 := $i307;
  goto $bb183;
$bb190:
  assume ($i318 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 11} true;
  assume {:verifier.code 0} true;
  $i320 := $slt.i32($i316,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i320} true;
  goto $bb193, $bb195;
$bb191:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 292, 7} true;
  assume {:verifier.code 0} true;
  assume !($i318 == 1);
  goto $bb192;
$bb192:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 297, 7} true;
  assume {:verifier.code 0} true;
  $i324 := $sext.i32.i64($i312);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 297, 9} true;
  assume {:verifier.code 0} true;
  $i325 := $srem.i64($i324,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 297, 7} true;
  assume {:verifier.code 0} true;
  $i326 := $trunc.i64.i32($i325);
  call {:cexpr "a"} boogie_si_record_i32($i326);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 298, 5} true;
  assume {:verifier.code 0} true;
  $i327 := $add.i32($i326,$i326);
  call {:cexpr "a"} boogie_si_record_i32($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 299, 7} true;
  assume {:verifier.code 0} true;
  $i328 := $sext.i32.i64($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 299, 9} true;
  assume {:verifier.code 0} true;
  $i329 := $srem.i64($i328,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 299, 7} true;
  assume {:verifier.code 0} true;
  $i330 := $trunc.i64.i32($i329);
  call {:cexpr "b"} boogie_si_record_i32($i330);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 300, 5} true;
  assume {:verifier.code 0} true;
  $i331 := $add.i32($i330,$i330);
  call {:cexpr "b"} boogie_si_record_i32($i331);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 302, 5} true;
  assume {:verifier.code 0} true;
  $i332 := $add.i32($i319,$i319);
  call {:cexpr "c"} boogie_si_record_i32($i332);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 303, 9} true;
  assume {:verifier.code 0} true;
  $i333 := $slt.i32($i327,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 303, 7} true;
  assume {:verifier.code 0} true;
  $i334 := $i332;
  assume {:branchcond $i333} true;
  goto $bb199, $bb200;
$bb193:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 15} true;
  assume {:verifier.code 0} true;
  assume ($i320 == 1);
  goto $bb194;
$bb194:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 294, 9} true;
  assume {:verifier.code 0} true;
  $i323 := $add.i32($i317,1);
  call {:cexpr "c"} boogie_si_record_i32($i323);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 295, 5} true;
  assume {:verifier.code 0} true;
  $i322 := $i323;
  goto $bb198;
$bb195:
  assume !($i320 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 20} true;
  assume {:verifier.code 0} true;
  $i321 := $sgt.i32($i316,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 9} true;
  assume {:verifier.code 0} true;
  $i322 := $i317;
  assume {:branchcond $i321} true;
  goto $bb196, $bb197;
$bb196:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 9} true;
  assume {:verifier.code 0} true;
  assume ($i321 == 1);
  goto $bb194;
$bb197:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 293, 9} true;
  assume {:verifier.code 0} true;
  assume !($i321 == 1);
  goto $bb198;
$bb198:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 296, 3} true;
  assume {:verifier.code 0} true;
  $i319 := $i322;
  goto $bb192;
$bb199:
  assume ($i333 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 11} true;
  assume {:verifier.code 0} true;
  $i335 := $slt.i32($i331,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i335} true;
  goto $bb202, $bb204;
$bb200:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 303, 7} true;
  assume {:verifier.code 0} true;
  assume !($i333 == 1);
  goto $bb201;
$bb201:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 308, 7} true;
  assume {:verifier.code 0} true;
  $i339 := $sext.i32.i64($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 308, 9} true;
  assume {:verifier.code 0} true;
  $i340 := $srem.i64($i339,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 308, 7} true;
  assume {:verifier.code 0} true;
  $i341 := $trunc.i64.i32($i340);
  call {:cexpr "a"} boogie_si_record_i32($i341);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 309, 5} true;
  assume {:verifier.code 0} true;
  $i342 := $add.i32($i341,$i341);
  call {:cexpr "a"} boogie_si_record_i32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 310, 7} true;
  assume {:verifier.code 0} true;
  $i343 := $sext.i32.i64($i331);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 310, 9} true;
  assume {:verifier.code 0} true;
  $i344 := $srem.i64($i343,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 310, 7} true;
  assume {:verifier.code 0} true;
  $i345 := $trunc.i64.i32($i344);
  call {:cexpr "b"} boogie_si_record_i32($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 311, 5} true;
  assume {:verifier.code 0} true;
  $i346 := $add.i32($i345,$i345);
  call {:cexpr "b"} boogie_si_record_i32($i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 313, 5} true;
  assume {:verifier.code 0} true;
  $i347 := $add.i32($i334,$i334);
  call {:cexpr "c"} boogie_si_record_i32($i347);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 314, 9} true;
  assume {:verifier.code 0} true;
  $i348 := $slt.i32($i342,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 314, 7} true;
  assume {:verifier.code 0} true;
  $i349 := $i347;
  assume {:branchcond $i348} true;
  goto $bb208, $bb209;
$bb202:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 15} true;
  assume {:verifier.code 0} true;
  assume ($i335 == 1);
  goto $bb203;
$bb203:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 305, 9} true;
  assume {:verifier.code 0} true;
  $i338 := $add.i32($i332,1);
  call {:cexpr "c"} boogie_si_record_i32($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 306, 5} true;
  assume {:verifier.code 0} true;
  $i337 := $i338;
  goto $bb207;
$bb204:
  assume !($i335 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 20} true;
  assume {:verifier.code 0} true;
  $i336 := $sgt.i32($i331,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 9} true;
  assume {:verifier.code 0} true;
  $i337 := $i332;
  assume {:branchcond $i336} true;
  goto $bb205, $bb206;
$bb205:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 9} true;
  assume {:verifier.code 0} true;
  assume ($i336 == 1);
  goto $bb203;
$bb206:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 304, 9} true;
  assume {:verifier.code 0} true;
  assume !($i336 == 1);
  goto $bb207;
$bb207:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 307, 3} true;
  assume {:verifier.code 0} true;
  $i334 := $i337;
  goto $bb201;
$bb208:
  assume ($i348 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 11} true;
  assume {:verifier.code 0} true;
  $i350 := $slt.i32($i346,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i350} true;
  goto $bb211, $bb213;
$bb209:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 314, 7} true;
  assume {:verifier.code 0} true;
  assume !($i348 == 1);
  goto $bb210;
$bb210:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 319, 7} true;
  assume {:verifier.code 0} true;
  $i354 := $sext.i32.i64($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 319, 9} true;
  assume {:verifier.code 0} true;
  $i355 := $srem.i64($i354,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 319, 7} true;
  assume {:verifier.code 0} true;
  $i356 := $trunc.i64.i32($i355);
  call {:cexpr "a"} boogie_si_record_i32($i356);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 320, 5} true;
  assume {:verifier.code 0} true;
  $i357 := $add.i32($i356,$i356);
  call {:cexpr "a"} boogie_si_record_i32($i357);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 321, 7} true;
  assume {:verifier.code 0} true;
  $i358 := $sext.i32.i64($i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 321, 9} true;
  assume {:verifier.code 0} true;
  $i359 := $srem.i64($i358,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 321, 7} true;
  assume {:verifier.code 0} true;
  $i360 := $trunc.i64.i32($i359);
  call {:cexpr "b"} boogie_si_record_i32($i360);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 322, 5} true;
  assume {:verifier.code 0} true;
  $i361 := $add.i32($i360,$i360);
  call {:cexpr "b"} boogie_si_record_i32($i361);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 324, 5} true;
  assume {:verifier.code 0} true;
  $i362 := $add.i32($i349,$i349);
  call {:cexpr "c"} boogie_si_record_i32($i362);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 325, 9} true;
  assume {:verifier.code 0} true;
  $i363 := $slt.i32($i357,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 325, 7} true;
  assume {:verifier.code 0} true;
  $i364 := $i362;
  assume {:branchcond $i363} true;
  goto $bb217, $bb218;
$bb211:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 15} true;
  assume {:verifier.code 0} true;
  assume ($i350 == 1);
  goto $bb212;
$bb212:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 316, 9} true;
  assume {:verifier.code 0} true;
  $i353 := $add.i32($i347,1);
  call {:cexpr "c"} boogie_si_record_i32($i353);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 317, 5} true;
  assume {:verifier.code 0} true;
  $i352 := $i353;
  goto $bb216;
$bb213:
  assume !($i350 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 20} true;
  assume {:verifier.code 0} true;
  $i351 := $sgt.i32($i346,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 9} true;
  assume {:verifier.code 0} true;
  $i352 := $i347;
  assume {:branchcond $i351} true;
  goto $bb214, $bb215;
$bb214:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 9} true;
  assume {:verifier.code 0} true;
  assume ($i351 == 1);
  goto $bb212;
$bb215:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 315, 9} true;
  assume {:verifier.code 0} true;
  assume !($i351 == 1);
  goto $bb216;
$bb216:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 318, 3} true;
  assume {:verifier.code 0} true;
  $i349 := $i352;
  goto $bb210;
$bb217:
  assume ($i363 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 11} true;
  assume {:verifier.code 0} true;
  $i365 := $slt.i32($i361,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i365} true;
  goto $bb220, $bb222;
$bb218:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 325, 7} true;
  assume {:verifier.code 0} true;
  assume !($i363 == 1);
  goto $bb219;
$bb219:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 330, 7} true;
  assume {:verifier.code 0} true;
  $i369 := $sext.i32.i64($i357);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 330, 9} true;
  assume {:verifier.code 0} true;
  $i370 := $srem.i64($i369,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 330, 7} true;
  assume {:verifier.code 0} true;
  $i371 := $trunc.i64.i32($i370);
  call {:cexpr "a"} boogie_si_record_i32($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 331, 5} true;
  assume {:verifier.code 0} true;
  $i372 := $add.i32($i371,$i371);
  call {:cexpr "a"} boogie_si_record_i32($i372);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 332, 7} true;
  assume {:verifier.code 0} true;
  $i373 := $sext.i32.i64($i361);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 332, 9} true;
  assume {:verifier.code 0} true;
  $i374 := $srem.i64($i373,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 332, 7} true;
  assume {:verifier.code 0} true;
  $i375 := $trunc.i64.i32($i374);
  call {:cexpr "b"} boogie_si_record_i32($i375);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 333, 5} true;
  assume {:verifier.code 0} true;
  $i376 := $add.i32($i375,$i375);
  call {:cexpr "b"} boogie_si_record_i32($i376);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 335, 5} true;
  assume {:verifier.code 0} true;
  $i377 := $add.i32($i364,$i364);
  call {:cexpr "c"} boogie_si_record_i32($i377);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 336, 9} true;
  assume {:verifier.code 0} true;
  $i378 := $slt.i32($i372,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 336, 7} true;
  assume {:verifier.code 0} true;
  $i379 := $i377;
  assume {:branchcond $i378} true;
  goto $bb226, $bb227;
$bb220:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 15} true;
  assume {:verifier.code 0} true;
  assume ($i365 == 1);
  goto $bb221;
$bb221:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 327, 9} true;
  assume {:verifier.code 0} true;
  $i368 := $add.i32($i362,1);
  call {:cexpr "c"} boogie_si_record_i32($i368);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 328, 5} true;
  assume {:verifier.code 0} true;
  $i367 := $i368;
  goto $bb225;
$bb222:
  assume !($i365 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 20} true;
  assume {:verifier.code 0} true;
  $i366 := $sgt.i32($i361,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 9} true;
  assume {:verifier.code 0} true;
  $i367 := $i362;
  assume {:branchcond $i366} true;
  goto $bb223, $bb224;
$bb223:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 9} true;
  assume {:verifier.code 0} true;
  assume ($i366 == 1);
  goto $bb221;
$bb224:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 326, 9} true;
  assume {:verifier.code 0} true;
  assume !($i366 == 1);
  goto $bb225;
$bb225:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 329, 3} true;
  assume {:verifier.code 0} true;
  $i364 := $i367;
  goto $bb219;
$bb226:
  assume ($i378 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 11} true;
  assume {:verifier.code 0} true;
  $i380 := $slt.i32($i376,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i380} true;
  goto $bb229, $bb231;
$bb227:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 336, 7} true;
  assume {:verifier.code 0} true;
  assume !($i378 == 1);
  goto $bb228;
$bb228:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 341, 7} true;
  assume {:verifier.code 0} true;
  $i384 := $sext.i32.i64($i372);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 341, 9} true;
  assume {:verifier.code 0} true;
  $i385 := $srem.i64($i384,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 341, 7} true;
  assume {:verifier.code 0} true;
  $i386 := $trunc.i64.i32($i385);
  call {:cexpr "a"} boogie_si_record_i32($i386);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 342, 5} true;
  assume {:verifier.code 0} true;
  $i387 := $add.i32($i386,$i386);
  call {:cexpr "a"} boogie_si_record_i32($i387);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 343, 7} true;
  assume {:verifier.code 0} true;
  $i388 := $sext.i32.i64($i376);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 343, 9} true;
  assume {:verifier.code 0} true;
  $i389 := $srem.i64($i388,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 343, 7} true;
  assume {:verifier.code 0} true;
  $i390 := $trunc.i64.i32($i389);
  call {:cexpr "b"} boogie_si_record_i32($i390);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 344, 5} true;
  assume {:verifier.code 0} true;
  $i391 := $add.i32($i390,$i390);
  call {:cexpr "b"} boogie_si_record_i32($i391);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 346, 5} true;
  assume {:verifier.code 0} true;
  $i392 := $add.i32($i379,$i379);
  call {:cexpr "c"} boogie_si_record_i32($i392);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 347, 9} true;
  assume {:verifier.code 0} true;
  $i393 := $slt.i32($i387,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 347, 7} true;
  assume {:verifier.code 0} true;
  $i394 := $i392;
  assume {:branchcond $i393} true;
  goto $bb235, $bb236;
$bb229:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 15} true;
  assume {:verifier.code 0} true;
  assume ($i380 == 1);
  goto $bb230;
$bb230:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 338, 9} true;
  assume {:verifier.code 0} true;
  $i383 := $add.i32($i377,1);
  call {:cexpr "c"} boogie_si_record_i32($i383);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 339, 5} true;
  assume {:verifier.code 0} true;
  $i382 := $i383;
  goto $bb234;
$bb231:
  assume !($i380 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 20} true;
  assume {:verifier.code 0} true;
  $i381 := $sgt.i32($i376,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 9} true;
  assume {:verifier.code 0} true;
  $i382 := $i377;
  assume {:branchcond $i381} true;
  goto $bb232, $bb233;
$bb232:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 9} true;
  assume {:verifier.code 0} true;
  assume ($i381 == 1);
  goto $bb230;
$bb233:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 337, 9} true;
  assume {:verifier.code 0} true;
  assume !($i381 == 1);
  goto $bb234;
$bb234:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 340, 3} true;
  assume {:verifier.code 0} true;
  $i379 := $i382;
  goto $bb228;
$bb235:
  assume ($i393 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 11} true;
  assume {:verifier.code 0} true;
  $i395 := $slt.i32($i391,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i395} true;
  goto $bb238, $bb240;
$bb236:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 347, 7} true;
  assume {:verifier.code 0} true;
  assume !($i393 == 1);
  goto $bb237;
$bb237:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 352, 7} true;
  assume {:verifier.code 0} true;
  $i399 := $sext.i32.i64($i387);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 352, 9} true;
  assume {:verifier.code 0} true;
  $i400 := $srem.i64($i399,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 352, 7} true;
  assume {:verifier.code 0} true;
  $i401 := $trunc.i64.i32($i400);
  call {:cexpr "a"} boogie_si_record_i32($i401);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 353, 5} true;
  assume {:verifier.code 0} true;
  $i402 := $add.i32($i401,$i401);
  call {:cexpr "a"} boogie_si_record_i32($i402);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 354, 7} true;
  assume {:verifier.code 0} true;
  $i403 := $sext.i32.i64($i391);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 354, 9} true;
  assume {:verifier.code 0} true;
  $i404 := $srem.i64($i403,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 354, 7} true;
  assume {:verifier.code 0} true;
  $i405 := $trunc.i64.i32($i404);
  call {:cexpr "b"} boogie_si_record_i32($i405);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 355, 5} true;
  assume {:verifier.code 0} true;
  $i406 := $add.i32($i405,$i405);
  call {:cexpr "b"} boogie_si_record_i32($i406);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 357, 5} true;
  assume {:verifier.code 0} true;
  $i407 := $add.i32($i394,$i394);
  call {:cexpr "c"} boogie_si_record_i32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 358, 9} true;
  assume {:verifier.code 0} true;
  $i408 := $slt.i32($i402,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 358, 7} true;
  assume {:verifier.code 0} true;
  $i409 := $i407;
  assume {:branchcond $i408} true;
  goto $bb244, $bb245;
$bb238:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 15} true;
  assume {:verifier.code 0} true;
  assume ($i395 == 1);
  goto $bb239;
$bb239:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 349, 9} true;
  assume {:verifier.code 0} true;
  $i398 := $add.i32($i392,1);
  call {:cexpr "c"} boogie_si_record_i32($i398);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 350, 5} true;
  assume {:verifier.code 0} true;
  $i397 := $i398;
  goto $bb243;
$bb240:
  assume !($i395 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 20} true;
  assume {:verifier.code 0} true;
  $i396 := $sgt.i32($i391,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 9} true;
  assume {:verifier.code 0} true;
  $i397 := $i392;
  assume {:branchcond $i396} true;
  goto $bb241, $bb242;
$bb241:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 9} true;
  assume {:verifier.code 0} true;
  assume ($i396 == 1);
  goto $bb239;
$bb242:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 348, 9} true;
  assume {:verifier.code 0} true;
  assume !($i396 == 1);
  goto $bb243;
$bb243:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 351, 3} true;
  assume {:verifier.code 0} true;
  $i394 := $i397;
  goto $bb237;
$bb244:
  assume ($i408 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 11} true;
  assume {:verifier.code 0} true;
  $i410 := $slt.i32($i406,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i410} true;
  goto $bb247, $bb249;
$bb245:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 358, 7} true;
  assume {:verifier.code 0} true;
  assume !($i408 == 1);
  goto $bb246;
$bb246:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 363, 7} true;
  assume {:verifier.code 0} true;
  $i414 := $sext.i32.i64($i402);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 363, 9} true;
  assume {:verifier.code 0} true;
  $i415 := $srem.i64($i414,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 363, 7} true;
  assume {:verifier.code 0} true;
  $i416 := $trunc.i64.i32($i415);
  call {:cexpr "a"} boogie_si_record_i32($i416);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 364, 5} true;
  assume {:verifier.code 0} true;
  $i417 := $add.i32($i416,$i416);
  call {:cexpr "a"} boogie_si_record_i32($i417);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 365, 7} true;
  assume {:verifier.code 0} true;
  $i418 := $sext.i32.i64($i406);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 365, 9} true;
  assume {:verifier.code 0} true;
  $i419 := $srem.i64($i418,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 365, 7} true;
  assume {:verifier.code 0} true;
  $i420 := $trunc.i64.i32($i419);
  call {:cexpr "b"} boogie_si_record_i32($i420);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 366, 5} true;
  assume {:verifier.code 0} true;
  $i421 := $add.i32($i420,$i420);
  call {:cexpr "b"} boogie_si_record_i32($i421);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 368, 5} true;
  assume {:verifier.code 0} true;
  $i422 := $add.i32($i409,$i409);
  call {:cexpr "c"} boogie_si_record_i32($i422);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 369, 9} true;
  assume {:verifier.code 0} true;
  $i423 := $slt.i32($i417,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 369, 7} true;
  assume {:verifier.code 0} true;
  $i424 := $i422;
  assume {:branchcond $i423} true;
  goto $bb253, $bb254;
$bb247:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 15} true;
  assume {:verifier.code 0} true;
  assume ($i410 == 1);
  goto $bb248;
$bb248:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 360, 9} true;
  assume {:verifier.code 0} true;
  $i413 := $add.i32($i407,1);
  call {:cexpr "c"} boogie_si_record_i32($i413);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 361, 5} true;
  assume {:verifier.code 0} true;
  $i412 := $i413;
  goto $bb252;
$bb249:
  assume !($i410 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 20} true;
  assume {:verifier.code 0} true;
  $i411 := $sgt.i32($i406,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 9} true;
  assume {:verifier.code 0} true;
  $i412 := $i407;
  assume {:branchcond $i411} true;
  goto $bb250, $bb251;
$bb250:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 9} true;
  assume {:verifier.code 0} true;
  assume ($i411 == 1);
  goto $bb248;
$bb251:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 359, 9} true;
  assume {:verifier.code 0} true;
  assume !($i411 == 1);
  goto $bb252;
$bb252:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 362, 3} true;
  assume {:verifier.code 0} true;
  $i409 := $i412;
  goto $bb246;
$bb253:
  assume ($i423 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 11} true;
  assume {:verifier.code 0} true;
  $i425 := $slt.i32($i421,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i425} true;
  goto $bb256, $bb258;
$bb254:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 369, 7} true;
  assume {:verifier.code 0} true;
  assume !($i423 == 1);
  goto $bb255;
$bb255:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 374, 7} true;
  assume {:verifier.code 0} true;
  $i429 := $sext.i32.i64($i417);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 374, 9} true;
  assume {:verifier.code 0} true;
  $i430 := $srem.i64($i429,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 374, 7} true;
  assume {:verifier.code 0} true;
  $i431 := $trunc.i64.i32($i430);
  call {:cexpr "a"} boogie_si_record_i32($i431);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 375, 5} true;
  assume {:verifier.code 0} true;
  $i432 := $add.i32($i431,$i431);
  call {:cexpr "a"} boogie_si_record_i32($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 376, 7} true;
  assume {:verifier.code 0} true;
  $i433 := $sext.i32.i64($i421);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 376, 9} true;
  assume {:verifier.code 0} true;
  $i434 := $srem.i64($i433,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 376, 7} true;
  assume {:verifier.code 0} true;
  $i435 := $trunc.i64.i32($i434);
  call {:cexpr "b"} boogie_si_record_i32($i435);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 377, 5} true;
  assume {:verifier.code 0} true;
  $i436 := $add.i32($i435,$i435);
  call {:cexpr "b"} boogie_si_record_i32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 379, 5} true;
  assume {:verifier.code 0} true;
  $i437 := $add.i32($i424,$i424);
  call {:cexpr "c"} boogie_si_record_i32($i437);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 380, 9} true;
  assume {:verifier.code 0} true;
  $i438 := $slt.i32($i432,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 380, 7} true;
  assume {:verifier.code 0} true;
  $i439 := $i437;
  assume {:branchcond $i438} true;
  goto $bb262, $bb263;
$bb256:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 15} true;
  assume {:verifier.code 0} true;
  assume ($i425 == 1);
  goto $bb257;
$bb257:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 371, 9} true;
  assume {:verifier.code 0} true;
  $i428 := $add.i32($i422,1);
  call {:cexpr "c"} boogie_si_record_i32($i428);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 372, 5} true;
  assume {:verifier.code 0} true;
  $i427 := $i428;
  goto $bb261;
$bb258:
  assume !($i425 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 20} true;
  assume {:verifier.code 0} true;
  $i426 := $sgt.i32($i421,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 9} true;
  assume {:verifier.code 0} true;
  $i427 := $i422;
  assume {:branchcond $i426} true;
  goto $bb259, $bb260;
$bb259:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 9} true;
  assume {:verifier.code 0} true;
  assume ($i426 == 1);
  goto $bb257;
$bb260:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 370, 9} true;
  assume {:verifier.code 0} true;
  assume !($i426 == 1);
  goto $bb261;
$bb261:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 373, 3} true;
  assume {:verifier.code 0} true;
  $i424 := $i427;
  goto $bb255;
$bb262:
  assume ($i438 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 11} true;
  assume {:verifier.code 0} true;
  $i440 := $slt.i32($i436,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i440} true;
  goto $bb265, $bb267;
$bb263:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 380, 7} true;
  assume {:verifier.code 0} true;
  assume !($i438 == 1);
  goto $bb264;
$bb264:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 385, 7} true;
  assume {:verifier.code 0} true;
  $i444 := $sext.i32.i64($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 385, 9} true;
  assume {:verifier.code 0} true;
  $i445 := $srem.i64($i444,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 385, 7} true;
  assume {:verifier.code 0} true;
  $i446 := $trunc.i64.i32($i445);
  call {:cexpr "a"} boogie_si_record_i32($i446);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 386, 5} true;
  assume {:verifier.code 0} true;
  $i447 := $add.i32($i446,$i446);
  call {:cexpr "a"} boogie_si_record_i32($i447);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 387, 7} true;
  assume {:verifier.code 0} true;
  $i448 := $sext.i32.i64($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 387, 9} true;
  assume {:verifier.code 0} true;
  $i449 := $srem.i64($i448,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 387, 7} true;
  assume {:verifier.code 0} true;
  $i450 := $trunc.i64.i32($i449);
  call {:cexpr "b"} boogie_si_record_i32($i450);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 388, 5} true;
  assume {:verifier.code 0} true;
  $i451 := $add.i32($i450,$i450);
  call {:cexpr "b"} boogie_si_record_i32($i451);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 390, 5} true;
  assume {:verifier.code 0} true;
  $i452 := $add.i32($i439,$i439);
  call {:cexpr "c"} boogie_si_record_i32($i452);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 391, 9} true;
  assume {:verifier.code 0} true;
  $i453 := $slt.i32($i447,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 391, 7} true;
  assume {:verifier.code 0} true;
  $i454 := $i452;
  assume {:branchcond $i453} true;
  goto $bb271, $bb272;
$bb265:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 15} true;
  assume {:verifier.code 0} true;
  assume ($i440 == 1);
  goto $bb266;
$bb266:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 382, 9} true;
  assume {:verifier.code 0} true;
  $i443 := $add.i32($i437,1);
  call {:cexpr "c"} boogie_si_record_i32($i443);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 383, 5} true;
  assume {:verifier.code 0} true;
  $i442 := $i443;
  goto $bb270;
$bb267:
  assume !($i440 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 20} true;
  assume {:verifier.code 0} true;
  $i441 := $sgt.i32($i436,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 9} true;
  assume {:verifier.code 0} true;
  $i442 := $i437;
  assume {:branchcond $i441} true;
  goto $bb268, $bb269;
$bb268:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 9} true;
  assume {:verifier.code 0} true;
  assume ($i441 == 1);
  goto $bb266;
$bb269:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 381, 9} true;
  assume {:verifier.code 0} true;
  assume !($i441 == 1);
  goto $bb270;
$bb270:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 384, 3} true;
  assume {:verifier.code 0} true;
  $i439 := $i442;
  goto $bb264;
$bb271:
  assume ($i453 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 11} true;
  assume {:verifier.code 0} true;
  $i455 := $slt.i32($i451,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i455} true;
  goto $bb274, $bb276;
$bb272:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 391, 7} true;
  assume {:verifier.code 0} true;
  assume !($i453 == 1);
  goto $bb273;
$bb273:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 396, 7} true;
  assume {:verifier.code 0} true;
  $i459 := $sext.i32.i64($i447);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 396, 9} true;
  assume {:verifier.code 0} true;
  $i460 := $srem.i64($i459,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 396, 7} true;
  assume {:verifier.code 0} true;
  $i461 := $trunc.i64.i32($i460);
  call {:cexpr "a"} boogie_si_record_i32($i461);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 397, 5} true;
  assume {:verifier.code 0} true;
  $i462 := $add.i32($i461,$i461);
  call {:cexpr "a"} boogie_si_record_i32($i462);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 398, 7} true;
  assume {:verifier.code 0} true;
  $i463 := $sext.i32.i64($i451);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 398, 9} true;
  assume {:verifier.code 0} true;
  $i464 := $srem.i64($i463,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 398, 7} true;
  assume {:verifier.code 0} true;
  $i465 := $trunc.i64.i32($i464);
  call {:cexpr "b"} boogie_si_record_i32($i465);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 399, 5} true;
  assume {:verifier.code 0} true;
  $i466 := $add.i32($i465,$i465);
  call {:cexpr "b"} boogie_si_record_i32($i466);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 401, 5} true;
  assume {:verifier.code 0} true;
  $i467 := $add.i32($i454,$i454);
  call {:cexpr "c"} boogie_si_record_i32($i467);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 402, 9} true;
  assume {:verifier.code 0} true;
  $i468 := $slt.i32($i462,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 402, 7} true;
  assume {:verifier.code 0} true;
  $i469 := $i467;
  assume {:branchcond $i468} true;
  goto $bb280, $bb281;
$bb274:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 15} true;
  assume {:verifier.code 0} true;
  assume ($i455 == 1);
  goto $bb275;
$bb275:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 393, 9} true;
  assume {:verifier.code 0} true;
  $i458 := $add.i32($i452,1);
  call {:cexpr "c"} boogie_si_record_i32($i458);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 394, 5} true;
  assume {:verifier.code 0} true;
  $i457 := $i458;
  goto $bb279;
$bb276:
  assume !($i455 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 20} true;
  assume {:verifier.code 0} true;
  $i456 := $sgt.i32($i451,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 9} true;
  assume {:verifier.code 0} true;
  $i457 := $i452;
  assume {:branchcond $i456} true;
  goto $bb277, $bb278;
$bb277:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 9} true;
  assume {:verifier.code 0} true;
  assume ($i456 == 1);
  goto $bb275;
$bb278:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 392, 9} true;
  assume {:verifier.code 0} true;
  assume !($i456 == 1);
  goto $bb279;
$bb279:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 395, 3} true;
  assume {:verifier.code 0} true;
  $i454 := $i457;
  goto $bb273;
$bb280:
  assume ($i468 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 11} true;
  assume {:verifier.code 0} true;
  $i470 := $slt.i32($i466,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i470} true;
  goto $bb283, $bb285;
$bb281:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 402, 7} true;
  assume {:verifier.code 0} true;
  assume !($i468 == 1);
  goto $bb282;
$bb282:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 407, 7} true;
  assume {:verifier.code 0} true;
  $i474 := $sext.i32.i64($i462);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 407, 9} true;
  assume {:verifier.code 0} true;
  $i475 := $srem.i64($i474,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 407, 7} true;
  assume {:verifier.code 0} true;
  $i476 := $trunc.i64.i32($i475);
  call {:cexpr "a"} boogie_si_record_i32($i476);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 408, 5} true;
  assume {:verifier.code 0} true;
  $i477 := $add.i32($i476,$i476);
  call {:cexpr "a"} boogie_si_record_i32($i477);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 409, 7} true;
  assume {:verifier.code 0} true;
  $i478 := $sext.i32.i64($i466);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 409, 9} true;
  assume {:verifier.code 0} true;
  $i479 := $srem.i64($i478,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 409, 7} true;
  assume {:verifier.code 0} true;
  $i480 := $trunc.i64.i32($i479);
  call {:cexpr "b"} boogie_si_record_i32($i480);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 410, 5} true;
  assume {:verifier.code 0} true;
  $i481 := $add.i32($i480,$i480);
  call {:cexpr "b"} boogie_si_record_i32($i481);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 412, 5} true;
  assume {:verifier.code 0} true;
  $i482 := $add.i32($i469,$i469);
  call {:cexpr "c"} boogie_si_record_i32($i482);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 413, 9} true;
  assume {:verifier.code 0} true;
  $i483 := $slt.i32($i477,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 413, 7} true;
  assume {:verifier.code 0} true;
  $i484 := $i482;
  assume {:branchcond $i483} true;
  goto $bb289, $bb290;
$bb283:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 15} true;
  assume {:verifier.code 0} true;
  assume ($i470 == 1);
  goto $bb284;
$bb284:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 404, 9} true;
  assume {:verifier.code 0} true;
  $i473 := $add.i32($i467,1);
  call {:cexpr "c"} boogie_si_record_i32($i473);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 405, 5} true;
  assume {:verifier.code 0} true;
  $i472 := $i473;
  goto $bb288;
$bb285:
  assume !($i470 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 20} true;
  assume {:verifier.code 0} true;
  $i471 := $sgt.i32($i466,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 9} true;
  assume {:verifier.code 0} true;
  $i472 := $i467;
  assume {:branchcond $i471} true;
  goto $bb286, $bb287;
$bb286:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 9} true;
  assume {:verifier.code 0} true;
  assume ($i471 == 1);
  goto $bb284;
$bb287:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 403, 9} true;
  assume {:verifier.code 0} true;
  assume !($i471 == 1);
  goto $bb288;
$bb288:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 406, 3} true;
  assume {:verifier.code 0} true;
  $i469 := $i472;
  goto $bb282;
$bb289:
  assume ($i483 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 11} true;
  assume {:verifier.code 0} true;
  $i485 := $slt.i32($i481,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i485} true;
  goto $bb292, $bb294;
$bb290:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 413, 7} true;
  assume {:verifier.code 0} true;
  assume !($i483 == 1);
  goto $bb291;
$bb291:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 418, 7} true;
  assume {:verifier.code 0} true;
  $i489 := $sext.i32.i64($i477);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 418, 9} true;
  assume {:verifier.code 0} true;
  $i490 := $srem.i64($i489,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 418, 7} true;
  assume {:verifier.code 0} true;
  $i491 := $trunc.i64.i32($i490);
  call {:cexpr "a"} boogie_si_record_i32($i491);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 419, 5} true;
  assume {:verifier.code 0} true;
  $i492 := $add.i32($i491,$i491);
  call {:cexpr "a"} boogie_si_record_i32($i492);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 420, 7} true;
  assume {:verifier.code 0} true;
  $i493 := $sext.i32.i64($i481);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 420, 9} true;
  assume {:verifier.code 0} true;
  $i494 := $srem.i64($i493,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 420, 7} true;
  assume {:verifier.code 0} true;
  $i495 := $trunc.i64.i32($i494);
  call {:cexpr "b"} boogie_si_record_i32($i495);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 421, 5} true;
  assume {:verifier.code 0} true;
  $i496 := $add.i32($i495,$i495);
  call {:cexpr "b"} boogie_si_record_i32($i496);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 423, 5} true;
  assume {:verifier.code 0} true;
  $i497 := $add.i32($i484,$i484);
  call {:cexpr "c"} boogie_si_record_i32($i497);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 9} true;
  assume {:verifier.code 0} true;
  $i498 := $slt.i32($i492,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 7} true;
  assume {:verifier.code 0} true;
  $i499 := $i497;
  assume {:branchcond $i498} true;
  goto $bb298, $bb299;
$bb292:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 15} true;
  assume {:verifier.code 0} true;
  assume ($i485 == 1);
  goto $bb293;
$bb293:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 415, 9} true;
  assume {:verifier.code 0} true;
  $i488 := $add.i32($i482,1);
  call {:cexpr "c"} boogie_si_record_i32($i488);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 416, 5} true;
  assume {:verifier.code 0} true;
  $i487 := $i488;
  goto $bb297;
$bb294:
  assume !($i485 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 20} true;
  assume {:verifier.code 0} true;
  $i486 := $sgt.i32($i481,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 9} true;
  assume {:verifier.code 0} true;
  $i487 := $i482;
  assume {:branchcond $i486} true;
  goto $bb295, $bb296;
$bb295:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 9} true;
  assume {:verifier.code 0} true;
  assume ($i486 == 1);
  goto $bb293;
$bb296:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 414, 9} true;
  assume {:verifier.code 0} true;
  assume !($i486 == 1);
  goto $bb297;
$bb297:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 417, 3} true;
  assume {:verifier.code 0} true;
  $i484 := $i487;
  goto $bb291;
$bb298:
  assume ($i498 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 11} true;
  assume {:verifier.code 0} true;
  $i500 := $slt.i32($i496,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i500} true;
  goto $bb301, $bb303;
$bb299:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 424, 7} true;
  assume {:verifier.code 0} true;
  assume !($i498 == 1);
  goto $bb300;
$bb300:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 429, 7} true;
  assume {:verifier.code 0} true;
  $i504 := $sext.i32.i64($i492);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 429, 9} true;
  assume {:verifier.code 0} true;
  $i505 := $srem.i64($i504,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 429, 7} true;
  assume {:verifier.code 0} true;
  $i506 := $trunc.i64.i32($i505);
  call {:cexpr "a"} boogie_si_record_i32($i506);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 430, 5} true;
  assume {:verifier.code 0} true;
  $i507 := $add.i32($i506,$i506);
  call {:cexpr "a"} boogie_si_record_i32($i507);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 431, 7} true;
  assume {:verifier.code 0} true;
  $i508 := $sext.i32.i64($i496);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 431, 9} true;
  assume {:verifier.code 0} true;
  $i509 := $srem.i64($i508,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 431, 7} true;
  assume {:verifier.code 0} true;
  $i510 := $trunc.i64.i32($i509);
  call {:cexpr "b"} boogie_si_record_i32($i510);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 432, 5} true;
  assume {:verifier.code 0} true;
  $i511 := $add.i32($i510,$i510);
  call {:cexpr "b"} boogie_si_record_i32($i511);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 434, 5} true;
  assume {:verifier.code 0} true;
  $i512 := $add.i32($i499,$i499);
  call {:cexpr "c"} boogie_si_record_i32($i512);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 435, 9} true;
  assume {:verifier.code 0} true;
  $i513 := $slt.i32($i507,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 435, 7} true;
  assume {:verifier.code 0} true;
  $i514 := $i512;
  assume {:branchcond $i513} true;
  goto $bb307, $bb308;
$bb301:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 15} true;
  assume {:verifier.code 0} true;
  assume ($i500 == 1);
  goto $bb302;
$bb302:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 426, 9} true;
  assume {:verifier.code 0} true;
  $i503 := $add.i32($i497,1);
  call {:cexpr "c"} boogie_si_record_i32($i503);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 427, 5} true;
  assume {:verifier.code 0} true;
  $i502 := $i503;
  goto $bb306;
$bb303:
  assume !($i500 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 20} true;
  assume {:verifier.code 0} true;
  $i501 := $sgt.i32($i496,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 9} true;
  assume {:verifier.code 0} true;
  $i502 := $i497;
  assume {:branchcond $i501} true;
  goto $bb304, $bb305;
$bb304:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 9} true;
  assume {:verifier.code 0} true;
  assume ($i501 == 1);
  goto $bb302;
$bb305:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 425, 9} true;
  assume {:verifier.code 0} true;
  assume !($i501 == 1);
  goto $bb306;
$bb306:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 428, 3} true;
  assume {:verifier.code 0} true;
  $i499 := $i502;
  goto $bb300;
$bb307:
  assume ($i513 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 11} true;
  assume {:verifier.code 0} true;
  $i515 := $slt.i32($i511,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i515} true;
  goto $bb310, $bb312;
$bb308:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 435, 7} true;
  assume {:verifier.code 0} true;
  assume !($i513 == 1);
  goto $bb309;
$bb309:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 440, 7} true;
  assume {:verifier.code 0} true;
  $i519 := $sext.i32.i64($i507);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 440, 9} true;
  assume {:verifier.code 0} true;
  $i520 := $srem.i64($i519,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 440, 7} true;
  assume {:verifier.code 0} true;
  $i521 := $trunc.i64.i32($i520);
  call {:cexpr "a"} boogie_si_record_i32($i521);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 441, 5} true;
  assume {:verifier.code 0} true;
  $i522 := $add.i32($i521,$i521);
  call {:cexpr "a"} boogie_si_record_i32($i522);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 442, 7} true;
  assume {:verifier.code 0} true;
  $i523 := $sext.i32.i64($i511);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 442, 9} true;
  assume {:verifier.code 0} true;
  $i524 := $srem.i64($i523,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 442, 7} true;
  assume {:verifier.code 0} true;
  $i525 := $trunc.i64.i32($i524);
  call {:cexpr "b"} boogie_si_record_i32($i525);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 443, 5} true;
  assume {:verifier.code 0} true;
  $i526 := $add.i32($i525,$i525);
  call {:cexpr "b"} boogie_si_record_i32($i526);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 445, 5} true;
  assume {:verifier.code 0} true;
  $i527 := $add.i32($i514,$i514);
  call {:cexpr "c"} boogie_si_record_i32($i527);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 9} true;
  assume {:verifier.code 0} true;
  $i528 := $slt.i32($i522,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 7} true;
  assume {:verifier.code 0} true;
  $i529 := $i527;
  assume {:branchcond $i528} true;
  goto $bb316, $bb317;
$bb310:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 15} true;
  assume {:verifier.code 0} true;
  assume ($i515 == 1);
  goto $bb311;
$bb311:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 437, 9} true;
  assume {:verifier.code 0} true;
  $i518 := $add.i32($i512,1);
  call {:cexpr "c"} boogie_si_record_i32($i518);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 438, 5} true;
  assume {:verifier.code 0} true;
  $i517 := $i518;
  goto $bb315;
$bb312:
  assume !($i515 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 20} true;
  assume {:verifier.code 0} true;
  $i516 := $sgt.i32($i511,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 9} true;
  assume {:verifier.code 0} true;
  $i517 := $i512;
  assume {:branchcond $i516} true;
  goto $bb313, $bb314;
$bb313:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 9} true;
  assume {:verifier.code 0} true;
  assume ($i516 == 1);
  goto $bb311;
$bb314:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 436, 9} true;
  assume {:verifier.code 0} true;
  assume !($i516 == 1);
  goto $bb315;
$bb315:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 439, 3} true;
  assume {:verifier.code 0} true;
  $i514 := $i517;
  goto $bb309;
$bb316:
  assume ($i528 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 11} true;
  assume {:verifier.code 0} true;
  $i530 := $slt.i32($i526,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i530} true;
  goto $bb319, $bb321;
$bb317:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 446, 7} true;
  assume {:verifier.code 0} true;
  assume !($i528 == 1);
  goto $bb318;
$bb318:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 451, 7} true;
  assume {:verifier.code 0} true;
  $i534 := $sext.i32.i64($i522);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 451, 9} true;
  assume {:verifier.code 0} true;
  $i535 := $srem.i64($i534,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 451, 7} true;
  assume {:verifier.code 0} true;
  $i536 := $trunc.i64.i32($i535);
  call {:cexpr "a"} boogie_si_record_i32($i536);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 452, 5} true;
  assume {:verifier.code 0} true;
  $i537 := $add.i32($i536,$i536);
  call {:cexpr "a"} boogie_si_record_i32($i537);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 453, 7} true;
  assume {:verifier.code 0} true;
  $i538 := $sext.i32.i64($i526);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 453, 9} true;
  assume {:verifier.code 0} true;
  $i539 := $srem.i64($i538,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 453, 7} true;
  assume {:verifier.code 0} true;
  $i540 := $trunc.i64.i32($i539);
  call {:cexpr "b"} boogie_si_record_i32($i540);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 454, 5} true;
  assume {:verifier.code 0} true;
  $i541 := $add.i32($i540,$i540);
  call {:cexpr "b"} boogie_si_record_i32($i541);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 456, 5} true;
  assume {:verifier.code 0} true;
  $i542 := $add.i32($i529,$i529);
  call {:cexpr "c"} boogie_si_record_i32($i542);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 457, 9} true;
  assume {:verifier.code 0} true;
  $i543 := $slt.i32($i537,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 457, 7} true;
  assume {:verifier.code 0} true;
  $i544 := $i542;
  assume {:branchcond $i543} true;
  goto $bb325, $bb326;
$bb319:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 15} true;
  assume {:verifier.code 0} true;
  assume ($i530 == 1);
  goto $bb320;
$bb320:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 448, 9} true;
  assume {:verifier.code 0} true;
  $i533 := $add.i32($i527,1);
  call {:cexpr "c"} boogie_si_record_i32($i533);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 449, 5} true;
  assume {:verifier.code 0} true;
  $i532 := $i533;
  goto $bb324;
$bb321:
  assume !($i530 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 20} true;
  assume {:verifier.code 0} true;
  $i531 := $sgt.i32($i526,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 9} true;
  assume {:verifier.code 0} true;
  $i532 := $i527;
  assume {:branchcond $i531} true;
  goto $bb322, $bb323;
$bb322:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 9} true;
  assume {:verifier.code 0} true;
  assume ($i531 == 1);
  goto $bb320;
$bb323:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 447, 9} true;
  assume {:verifier.code 0} true;
  assume !($i531 == 1);
  goto $bb324;
$bb324:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 450, 3} true;
  assume {:verifier.code 0} true;
  $i529 := $i532;
  goto $bb318;
$bb325:
  assume ($i543 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 11} true;
  assume {:verifier.code 0} true;
  $i545 := $slt.i32($i541,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i545} true;
  goto $bb328, $bb330;
$bb326:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 457, 7} true;
  assume {:verifier.code 0} true;
  assume !($i543 == 1);
  goto $bb327;
$bb327:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 462, 7} true;
  assume {:verifier.code 0} true;
  $i549 := $sext.i32.i64($i537);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 462, 9} true;
  assume {:verifier.code 0} true;
  $i550 := $srem.i64($i549,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 462, 7} true;
  assume {:verifier.code 0} true;
  $i551 := $trunc.i64.i32($i550);
  call {:cexpr "a"} boogie_si_record_i32($i551);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 463, 5} true;
  assume {:verifier.code 0} true;
  $i552 := $add.i32($i551,$i551);
  call {:cexpr "a"} boogie_si_record_i32($i552);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 464, 7} true;
  assume {:verifier.code 0} true;
  $i553 := $sext.i32.i64($i541);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 464, 9} true;
  assume {:verifier.code 0} true;
  $i554 := $srem.i64($i553,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 464, 7} true;
  assume {:verifier.code 0} true;
  $i555 := $trunc.i64.i32($i554);
  call {:cexpr "b"} boogie_si_record_i32($i555);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 465, 5} true;
  assume {:verifier.code 0} true;
  $i556 := $add.i32($i555,$i555);
  call {:cexpr "b"} boogie_si_record_i32($i556);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 467, 5} true;
  assume {:verifier.code 0} true;
  $i557 := $add.i32($i544,$i544);
  call {:cexpr "c"} boogie_si_record_i32($i557);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 9} true;
  assume {:verifier.code 0} true;
  $i558 := $slt.i32($i552,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 7} true;
  assume {:verifier.code 0} true;
  $i559 := $i557;
  assume {:branchcond $i558} true;
  goto $bb334, $bb335;
$bb328:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 15} true;
  assume {:verifier.code 0} true;
  assume ($i545 == 1);
  goto $bb329;
$bb329:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 459, 9} true;
  assume {:verifier.code 0} true;
  $i548 := $add.i32($i542,1);
  call {:cexpr "c"} boogie_si_record_i32($i548);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 460, 5} true;
  assume {:verifier.code 0} true;
  $i547 := $i548;
  goto $bb333;
$bb330:
  assume !($i545 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 20} true;
  assume {:verifier.code 0} true;
  $i546 := $sgt.i32($i541,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 9} true;
  assume {:verifier.code 0} true;
  $i547 := $i542;
  assume {:branchcond $i546} true;
  goto $bb331, $bb332;
$bb331:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 9} true;
  assume {:verifier.code 0} true;
  assume ($i546 == 1);
  goto $bb329;
$bb332:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 458, 9} true;
  assume {:verifier.code 0} true;
  assume !($i546 == 1);
  goto $bb333;
$bb333:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 461, 3} true;
  assume {:verifier.code 0} true;
  $i544 := $i547;
  goto $bb327;
$bb334:
  assume ($i558 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 11} true;
  assume {:verifier.code 0} true;
  $i560 := $slt.i32($i556,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i560} true;
  goto $bb337, $bb339;
$bb335:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 468, 7} true;
  assume {:verifier.code 0} true;
  assume !($i558 == 1);
  goto $bb336;
$bb336:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 473, 7} true;
  assume {:verifier.code 0} true;
  $i564 := $sext.i32.i64($i552);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 473, 9} true;
  assume {:verifier.code 0} true;
  $i565 := $srem.i64($i564,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 473, 7} true;
  assume {:verifier.code 0} true;
  $i566 := $trunc.i64.i32($i565);
  call {:cexpr "a"} boogie_si_record_i32($i566);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 474, 5} true;
  assume {:verifier.code 0} true;
  $i567 := $add.i32($i566,$i566);
  call {:cexpr "a"} boogie_si_record_i32($i567);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 475, 7} true;
  assume {:verifier.code 0} true;
  $i568 := $sext.i32.i64($i556);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 475, 9} true;
  assume {:verifier.code 0} true;
  $i569 := $srem.i64($i568,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 475, 7} true;
  assume {:verifier.code 0} true;
  $i570 := $trunc.i64.i32($i569);
  call {:cexpr "b"} boogie_si_record_i32($i570);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 476, 5} true;
  assume {:verifier.code 0} true;
  $i571 := $add.i32($i570,$i570);
  call {:cexpr "b"} boogie_si_record_i32($i571);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 478, 5} true;
  assume {:verifier.code 0} true;
  $i572 := $add.i32($i559,$i559);
  call {:cexpr "c"} boogie_si_record_i32($i572);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 479, 9} true;
  assume {:verifier.code 0} true;
  $i573 := $slt.i32($i567,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 479, 7} true;
  assume {:verifier.code 0} true;
  $i574 := $i572;
  assume {:branchcond $i573} true;
  goto $bb343, $bb344;
$bb337:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 15} true;
  assume {:verifier.code 0} true;
  assume ($i560 == 1);
  goto $bb338;
$bb338:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 470, 9} true;
  assume {:verifier.code 0} true;
  $i563 := $add.i32($i557,1);
  call {:cexpr "c"} boogie_si_record_i32($i563);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 471, 5} true;
  assume {:verifier.code 0} true;
  $i562 := $i563;
  goto $bb342;
$bb339:
  assume !($i560 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 20} true;
  assume {:verifier.code 0} true;
  $i561 := $sgt.i32($i556,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 9} true;
  assume {:verifier.code 0} true;
  $i562 := $i557;
  assume {:branchcond $i561} true;
  goto $bb340, $bb341;
$bb340:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 9} true;
  assume {:verifier.code 0} true;
  assume ($i561 == 1);
  goto $bb338;
$bb341:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 469, 9} true;
  assume {:verifier.code 0} true;
  assume !($i561 == 1);
  goto $bb342;
$bb342:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 472, 3} true;
  assume {:verifier.code 0} true;
  $i559 := $i562;
  goto $bb336;
$bb343:
  assume ($i573 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 11} true;
  assume {:verifier.code 0} true;
  $i575 := $slt.i32($i571,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i575} true;
  goto $bb346, $bb348;
$bb344:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 479, 7} true;
  assume {:verifier.code 0} true;
  assume !($i573 == 1);
  goto $bb345;
$bb345:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 484, 7} true;
  assume {:verifier.code 0} true;
  $i579 := $sext.i32.i64($i567);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 484, 9} true;
  assume {:verifier.code 0} true;
  $i580 := $srem.i64($i579,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 484, 7} true;
  assume {:verifier.code 0} true;
  $i581 := $trunc.i64.i32($i580);
  call {:cexpr "a"} boogie_si_record_i32($i581);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 485, 5} true;
  assume {:verifier.code 0} true;
  $i582 := $add.i32($i581,$i581);
  call {:cexpr "a"} boogie_si_record_i32($i582);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 486, 7} true;
  assume {:verifier.code 0} true;
  $i583 := $sext.i32.i64($i571);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 486, 9} true;
  assume {:verifier.code 0} true;
  $i584 := $srem.i64($i583,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 486, 7} true;
  assume {:verifier.code 0} true;
  $i585 := $trunc.i64.i32($i584);
  call {:cexpr "b"} boogie_si_record_i32($i585);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 487, 5} true;
  assume {:verifier.code 0} true;
  $i586 := $add.i32($i585,$i585);
  call {:cexpr "b"} boogie_si_record_i32($i586);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 489, 5} true;
  assume {:verifier.code 0} true;
  $i587 := $add.i32($i574,$i574);
  call {:cexpr "c"} boogie_si_record_i32($i587);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 9} true;
  assume {:verifier.code 0} true;
  $i588 := $slt.i32($i582,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 7} true;
  assume {:verifier.code 0} true;
  $i589 := $i587;
  assume {:branchcond $i588} true;
  goto $bb352, $bb353;
$bb346:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 15} true;
  assume {:verifier.code 0} true;
  assume ($i575 == 1);
  goto $bb347;
$bb347:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 481, 9} true;
  assume {:verifier.code 0} true;
  $i578 := $add.i32($i572,1);
  call {:cexpr "c"} boogie_si_record_i32($i578);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 482, 5} true;
  assume {:verifier.code 0} true;
  $i577 := $i578;
  goto $bb351;
$bb348:
  assume !($i575 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 20} true;
  assume {:verifier.code 0} true;
  $i576 := $sgt.i32($i571,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 9} true;
  assume {:verifier.code 0} true;
  $i577 := $i572;
  assume {:branchcond $i576} true;
  goto $bb349, $bb350;
$bb349:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 9} true;
  assume {:verifier.code 0} true;
  assume ($i576 == 1);
  goto $bb347;
$bb350:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 480, 9} true;
  assume {:verifier.code 0} true;
  assume !($i576 == 1);
  goto $bb351;
$bb351:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 483, 3} true;
  assume {:verifier.code 0} true;
  $i574 := $i577;
  goto $bb345;
$bb352:
  assume ($i588 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 11} true;
  assume {:verifier.code 0} true;
  $i590 := $slt.i32($i586,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i590} true;
  goto $bb355, $bb357;
$bb353:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 490, 7} true;
  assume {:verifier.code 0} true;
  assume !($i588 == 1);
  goto $bb354;
$bb354:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 495, 7} true;
  assume {:verifier.code 0} true;
  $i594 := $sext.i32.i64($i582);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 495, 9} true;
  assume {:verifier.code 0} true;
  $i595 := $srem.i64($i594,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 495, 7} true;
  assume {:verifier.code 0} true;
  $i596 := $trunc.i64.i32($i595);
  call {:cexpr "a"} boogie_si_record_i32($i596);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 496, 5} true;
  assume {:verifier.code 0} true;
  $i597 := $add.i32($i596,$i596);
  call {:cexpr "a"} boogie_si_record_i32($i597);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 497, 7} true;
  assume {:verifier.code 0} true;
  $i598 := $sext.i32.i64($i586);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 497, 9} true;
  assume {:verifier.code 0} true;
  $i599 := $srem.i64($i598,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 497, 7} true;
  assume {:verifier.code 0} true;
  $i600 := $trunc.i64.i32($i599);
  call {:cexpr "b"} boogie_si_record_i32($i600);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 498, 5} true;
  assume {:verifier.code 0} true;
  $i601 := $add.i32($i600,$i600);
  call {:cexpr "b"} boogie_si_record_i32($i601);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 500, 5} true;
  assume {:verifier.code 0} true;
  $i602 := $add.i32($i589,$i589);
  call {:cexpr "c"} boogie_si_record_i32($i602);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 501, 9} true;
  assume {:verifier.code 0} true;
  $i603 := $slt.i32($i597,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 501, 7} true;
  assume {:verifier.code 0} true;
  $i604 := $i602;
  assume {:branchcond $i603} true;
  goto $bb361, $bb362;
$bb355:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 15} true;
  assume {:verifier.code 0} true;
  assume ($i590 == 1);
  goto $bb356;
$bb356:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 492, 9} true;
  assume {:verifier.code 0} true;
  $i593 := $add.i32($i587,1);
  call {:cexpr "c"} boogie_si_record_i32($i593);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 493, 5} true;
  assume {:verifier.code 0} true;
  $i592 := $i593;
  goto $bb360;
$bb357:
  assume !($i590 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 20} true;
  assume {:verifier.code 0} true;
  $i591 := $sgt.i32($i586,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 9} true;
  assume {:verifier.code 0} true;
  $i592 := $i587;
  assume {:branchcond $i591} true;
  goto $bb358, $bb359;
$bb358:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 9} true;
  assume {:verifier.code 0} true;
  assume ($i591 == 1);
  goto $bb356;
$bb359:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 491, 9} true;
  assume {:verifier.code 0} true;
  assume !($i591 == 1);
  goto $bb360;
$bb360:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 494, 3} true;
  assume {:verifier.code 0} true;
  $i589 := $i592;
  goto $bb354;
$bb361:
  assume ($i603 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 11} true;
  assume {:verifier.code 0} true;
  $i605 := $slt.i32($i601,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i605} true;
  goto $bb364, $bb366;
$bb362:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 501, 7} true;
  assume {:verifier.code 0} true;
  assume !($i603 == 1);
  goto $bb363;
$bb363:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 506, 7} true;
  assume {:verifier.code 0} true;
  $i609 := $sext.i32.i64($i597);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 506, 9} true;
  assume {:verifier.code 0} true;
  $i610 := $srem.i64($i609,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 506, 7} true;
  assume {:verifier.code 0} true;
  $i611 := $trunc.i64.i32($i610);
  call {:cexpr "a"} boogie_si_record_i32($i611);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 507, 5} true;
  assume {:verifier.code 0} true;
  $i612 := $add.i32($i611,$i611);
  call {:cexpr "a"} boogie_si_record_i32($i612);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 508, 7} true;
  assume {:verifier.code 0} true;
  $i613 := $sext.i32.i64($i601);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 508, 9} true;
  assume {:verifier.code 0} true;
  $i614 := $srem.i64($i613,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 508, 7} true;
  assume {:verifier.code 0} true;
  $i615 := $trunc.i64.i32($i614);
  call {:cexpr "b"} boogie_si_record_i32($i615);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 509, 5} true;
  assume {:verifier.code 0} true;
  $i616 := $add.i32($i615,$i615);
  call {:cexpr "b"} boogie_si_record_i32($i616);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 511, 5} true;
  assume {:verifier.code 0} true;
  $i617 := $add.i32($i604,$i604);
  call {:cexpr "c"} boogie_si_record_i32($i617);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 9} true;
  assume {:verifier.code 0} true;
  $i618 := $slt.i32($i612,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 7} true;
  assume {:verifier.code 0} true;
  $i619 := $i617;
  assume {:branchcond $i618} true;
  goto $bb370, $bb371;
$bb364:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 15} true;
  assume {:verifier.code 0} true;
  assume ($i605 == 1);
  goto $bb365;
$bb365:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 503, 9} true;
  assume {:verifier.code 0} true;
  $i608 := $add.i32($i602,1);
  call {:cexpr "c"} boogie_si_record_i32($i608);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 504, 5} true;
  assume {:verifier.code 0} true;
  $i607 := $i608;
  goto $bb369;
$bb366:
  assume !($i605 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 20} true;
  assume {:verifier.code 0} true;
  $i606 := $sgt.i32($i601,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 9} true;
  assume {:verifier.code 0} true;
  $i607 := $i602;
  assume {:branchcond $i606} true;
  goto $bb367, $bb368;
$bb367:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 9} true;
  assume {:verifier.code 0} true;
  assume ($i606 == 1);
  goto $bb365;
$bb368:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 502, 9} true;
  assume {:verifier.code 0} true;
  assume !($i606 == 1);
  goto $bb369;
$bb369:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 505, 3} true;
  assume {:verifier.code 0} true;
  $i604 := $i607;
  goto $bb363;
$bb370:
  assume ($i618 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 11} true;
  assume {:verifier.code 0} true;
  $i620 := $slt.i32($i616,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i620} true;
  goto $bb373, $bb375;
$bb371:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 512, 7} true;
  assume {:verifier.code 0} true;
  assume !($i618 == 1);
  goto $bb372;
$bb372:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 517, 7} true;
  assume {:verifier.code 0} true;
  $i624 := $sext.i32.i64($i612);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 517, 9} true;
  assume {:verifier.code 0} true;
  $i625 := $srem.i64($i624,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 517, 7} true;
  assume {:verifier.code 0} true;
  $i626 := $trunc.i64.i32($i625);
  call {:cexpr "a"} boogie_si_record_i32($i626);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 518, 5} true;
  assume {:verifier.code 0} true;
  $i627 := $add.i32($i626,$i626);
  call {:cexpr "a"} boogie_si_record_i32($i627);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 519, 7} true;
  assume {:verifier.code 0} true;
  $i628 := $sext.i32.i64($i616);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 519, 9} true;
  assume {:verifier.code 0} true;
  $i629 := $srem.i64($i628,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 519, 7} true;
  assume {:verifier.code 0} true;
  $i630 := $trunc.i64.i32($i629);
  call {:cexpr "b"} boogie_si_record_i32($i630);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 520, 5} true;
  assume {:verifier.code 0} true;
  $i631 := $add.i32($i630,$i630);
  call {:cexpr "b"} boogie_si_record_i32($i631);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 522, 5} true;
  assume {:verifier.code 0} true;
  $i632 := $add.i32($i619,$i619);
  call {:cexpr "c"} boogie_si_record_i32($i632);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 523, 9} true;
  assume {:verifier.code 0} true;
  $i633 := $slt.i32($i627,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 523, 7} true;
  assume {:verifier.code 0} true;
  $i634 := $i632;
  assume {:branchcond $i633} true;
  goto $bb379, $bb380;
$bb373:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 15} true;
  assume {:verifier.code 0} true;
  assume ($i620 == 1);
  goto $bb374;
$bb374:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 514, 9} true;
  assume {:verifier.code 0} true;
  $i623 := $add.i32($i617,1);
  call {:cexpr "c"} boogie_si_record_i32($i623);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 515, 5} true;
  assume {:verifier.code 0} true;
  $i622 := $i623;
  goto $bb378;
$bb375:
  assume !($i620 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 20} true;
  assume {:verifier.code 0} true;
  $i621 := $sgt.i32($i616,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 9} true;
  assume {:verifier.code 0} true;
  $i622 := $i617;
  assume {:branchcond $i621} true;
  goto $bb376, $bb377;
$bb376:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 9} true;
  assume {:verifier.code 0} true;
  assume ($i621 == 1);
  goto $bb374;
$bb377:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 513, 9} true;
  assume {:verifier.code 0} true;
  assume !($i621 == 1);
  goto $bb378;
$bb378:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 516, 3} true;
  assume {:verifier.code 0} true;
  $i619 := $i622;
  goto $bb372;
$bb379:
  assume ($i633 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 11} true;
  assume {:verifier.code 0} true;
  $i635 := $slt.i32($i631,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i635} true;
  goto $bb382, $bb384;
$bb380:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 523, 7} true;
  assume {:verifier.code 0} true;
  assume !($i633 == 1);
  goto $bb381;
$bb381:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 7} true;
  assume {:verifier.code 0} true;
  $i639 := $sext.i32.i64($i627);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 9} true;
  assume {:verifier.code 0} true;
  $i640 := $srem.i64($i639,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 528, 7} true;
  assume {:verifier.code 0} true;
  $i641 := $trunc.i64.i32($i640);
  call {:cexpr "a"} boogie_si_record_i32($i641);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 529, 5} true;
  assume {:verifier.code 0} true;
  $i642 := $add.i32($i641,$i641);
  call {:cexpr "a"} boogie_si_record_i32($i642);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 530, 7} true;
  assume {:verifier.code 0} true;
  $i643 := $sext.i32.i64($i631);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 530, 9} true;
  assume {:verifier.code 0} true;
  $i644 := $srem.i64($i643,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 530, 7} true;
  assume {:verifier.code 0} true;
  $i645 := $trunc.i64.i32($i644);
  call {:cexpr "b"} boogie_si_record_i32($i645);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 531, 5} true;
  assume {:verifier.code 0} true;
  $i646 := $add.i32($i645,$i645);
  call {:cexpr "b"} boogie_si_record_i32($i646);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 533, 5} true;
  assume {:verifier.code 0} true;
  $i647 := $add.i32($i634,$i634);
  call {:cexpr "c"} boogie_si_record_i32($i647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 9} true;
  assume {:verifier.code 0} true;
  $i648 := $slt.i32($i642,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 7} true;
  assume {:verifier.code 0} true;
  $i649 := $i647;
  assume {:branchcond $i648} true;
  goto $bb388, $bb389;
$bb382:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 15} true;
  assume {:verifier.code 0} true;
  assume ($i635 == 1);
  goto $bb383;
$bb383:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 525, 9} true;
  assume {:verifier.code 0} true;
  $i638 := $add.i32($i632,1);
  call {:cexpr "c"} boogie_si_record_i32($i638);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 526, 5} true;
  assume {:verifier.code 0} true;
  $i637 := $i638;
  goto $bb387;
$bb384:
  assume !($i635 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 20} true;
  assume {:verifier.code 0} true;
  $i636 := $sgt.i32($i631,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 9} true;
  assume {:verifier.code 0} true;
  $i637 := $i632;
  assume {:branchcond $i636} true;
  goto $bb385, $bb386;
$bb385:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 9} true;
  assume {:verifier.code 0} true;
  assume ($i636 == 1);
  goto $bb383;
$bb386:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 524, 9} true;
  assume {:verifier.code 0} true;
  assume !($i636 == 1);
  goto $bb387;
$bb387:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 527, 3} true;
  assume {:verifier.code 0} true;
  $i634 := $i637;
  goto $bb381;
$bb388:
  assume ($i648 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 11} true;
  assume {:verifier.code 0} true;
  $i650 := $slt.i32($i646,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i650} true;
  goto $bb391, $bb393;
$bb389:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 534, 7} true;
  assume {:verifier.code 0} true;
  assume !($i648 == 1);
  goto $bb390;
$bb390:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 7} true;
  assume {:verifier.code 0} true;
  $i654 := $sext.i32.i64($i642);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 9} true;
  assume {:verifier.code 0} true;
  $i655 := $srem.i64($i654,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 539, 7} true;
  assume {:verifier.code 0} true;
  $i656 := $trunc.i64.i32($i655);
  call {:cexpr "a"} boogie_si_record_i32($i656);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 540, 5} true;
  assume {:verifier.code 0} true;
  $i657 := $add.i32($i656,$i656);
  call {:cexpr "a"} boogie_si_record_i32($i657);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 541, 7} true;
  assume {:verifier.code 0} true;
  $i658 := $sext.i32.i64($i646);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 541, 9} true;
  assume {:verifier.code 0} true;
  $i659 := $srem.i64($i658,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 541, 7} true;
  assume {:verifier.code 0} true;
  $i660 := $trunc.i64.i32($i659);
  call {:cexpr "b"} boogie_si_record_i32($i660);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 542, 5} true;
  assume {:verifier.code 0} true;
  $i661 := $add.i32($i660,$i660);
  call {:cexpr "b"} boogie_si_record_i32($i661);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 544, 5} true;
  assume {:verifier.code 0} true;
  $i662 := $add.i32($i649,$i649);
  call {:cexpr "c"} boogie_si_record_i32($i662);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 545, 9} true;
  assume {:verifier.code 0} true;
  $i663 := $slt.i32($i657,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 545, 7} true;
  assume {:verifier.code 0} true;
  $i664 := $i662;
  assume {:branchcond $i663} true;
  goto $bb397, $bb398;
$bb391:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 15} true;
  assume {:verifier.code 0} true;
  assume ($i650 == 1);
  goto $bb392;
$bb392:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 536, 9} true;
  assume {:verifier.code 0} true;
  $i653 := $add.i32($i647,1);
  call {:cexpr "c"} boogie_si_record_i32($i653);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 537, 5} true;
  assume {:verifier.code 0} true;
  $i652 := $i653;
  goto $bb396;
$bb393:
  assume !($i650 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 20} true;
  assume {:verifier.code 0} true;
  $i651 := $sgt.i32($i646,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 9} true;
  assume {:verifier.code 0} true;
  $i652 := $i647;
  assume {:branchcond $i651} true;
  goto $bb394, $bb395;
$bb394:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 9} true;
  assume {:verifier.code 0} true;
  assume ($i651 == 1);
  goto $bb392;
$bb395:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 535, 9} true;
  assume {:verifier.code 0} true;
  assume !($i651 == 1);
  goto $bb396;
$bb396:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 538, 3} true;
  assume {:verifier.code 0} true;
  $i649 := $i652;
  goto $bb390;
$bb397:
  assume ($i663 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 11} true;
  assume {:verifier.code 0} true;
  $i665 := $slt.i32($i661,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i665} true;
  goto $bb400, $bb402;
$bb398:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 545, 7} true;
  assume {:verifier.code 0} true;
  assume !($i663 == 1);
  goto $bb399;
$bb399:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 550, 7} true;
  assume {:verifier.code 0} true;
  $i669 := $sext.i32.i64($i657);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 550, 9} true;
  assume {:verifier.code 0} true;
  $i670 := $srem.i64($i669,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 550, 7} true;
  assume {:verifier.code 0} true;
  $i671 := $trunc.i64.i32($i670);
  call {:cexpr "a"} boogie_si_record_i32($i671);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 551, 5} true;
  assume {:verifier.code 0} true;
  $i672 := $add.i32($i671,$i671);
  call {:cexpr "a"} boogie_si_record_i32($i672);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 552, 7} true;
  assume {:verifier.code 0} true;
  $i673 := $sext.i32.i64($i661);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 552, 9} true;
  assume {:verifier.code 0} true;
  $i674 := $srem.i64($i673,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 552, 7} true;
  assume {:verifier.code 0} true;
  $i675 := $trunc.i64.i32($i674);
  call {:cexpr "b"} boogie_si_record_i32($i675);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 553, 5} true;
  assume {:verifier.code 0} true;
  $i676 := $add.i32($i675,$i675);
  call {:cexpr "b"} boogie_si_record_i32($i676);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 555, 5} true;
  assume {:verifier.code 0} true;
  $i677 := $add.i32($i664,$i664);
  call {:cexpr "c"} boogie_si_record_i32($i677);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 9} true;
  assume {:verifier.code 0} true;
  $i678 := $slt.i32($i672,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 7} true;
  assume {:verifier.code 0} true;
  $i679 := $i677;
  assume {:branchcond $i678} true;
  goto $bb406, $bb407;
$bb400:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 15} true;
  assume {:verifier.code 0} true;
  assume ($i665 == 1);
  goto $bb401;
$bb401:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 547, 9} true;
  assume {:verifier.code 0} true;
  $i668 := $add.i32($i662,1);
  call {:cexpr "c"} boogie_si_record_i32($i668);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 548, 5} true;
  assume {:verifier.code 0} true;
  $i667 := $i668;
  goto $bb405;
$bb402:
  assume !($i665 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 20} true;
  assume {:verifier.code 0} true;
  $i666 := $sgt.i32($i661,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 9} true;
  assume {:verifier.code 0} true;
  $i667 := $i662;
  assume {:branchcond $i666} true;
  goto $bb403, $bb404;
$bb403:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 9} true;
  assume {:verifier.code 0} true;
  assume ($i666 == 1);
  goto $bb401;
$bb404:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 546, 9} true;
  assume {:verifier.code 0} true;
  assume !($i666 == 1);
  goto $bb405;
$bb405:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 549, 3} true;
  assume {:verifier.code 0} true;
  $i664 := $i667;
  goto $bb399;
$bb406:
  assume ($i678 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 11} true;
  assume {:verifier.code 0} true;
  $i680 := $slt.i32($i676,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i680} true;
  goto $bb409, $bb411;
$bb407:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 556, 7} true;
  assume {:verifier.code 0} true;
  assume !($i678 == 1);
  goto $bb408;
$bb408:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 561, 7} true;
  assume {:verifier.code 0} true;
  $i684 := $sext.i32.i64($i672);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 561, 9} true;
  assume {:verifier.code 0} true;
  $i685 := $srem.i64($i684,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 561, 7} true;
  assume {:verifier.code 0} true;
  $i686 := $trunc.i64.i32($i685);
  call {:cexpr "a"} boogie_si_record_i32($i686);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 562, 5} true;
  assume {:verifier.code 0} true;
  $i687 := $add.i32($i686,$i686);
  call {:cexpr "a"} boogie_si_record_i32($i687);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 563, 7} true;
  assume {:verifier.code 0} true;
  $i688 := $sext.i32.i64($i676);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 563, 9} true;
  assume {:verifier.code 0} true;
  $i689 := $srem.i64($i688,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 563, 7} true;
  assume {:verifier.code 0} true;
  $i690 := $trunc.i64.i32($i689);
  call {:cexpr "b"} boogie_si_record_i32($i690);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 564, 5} true;
  assume {:verifier.code 0} true;
  $i691 := $add.i32($i690,$i690);
  call {:cexpr "b"} boogie_si_record_i32($i691);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 566, 5} true;
  assume {:verifier.code 0} true;
  $i692 := $add.i32($i679,$i679);
  call {:cexpr "c"} boogie_si_record_i32($i692);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 567, 9} true;
  assume {:verifier.code 0} true;
  $i693 := $slt.i32($i687,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 567, 7} true;
  assume {:verifier.code 0} true;
  $i694 := $i692;
  assume {:branchcond $i693} true;
  goto $bb415, $bb416;
$bb409:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 15} true;
  assume {:verifier.code 0} true;
  assume ($i680 == 1);
  goto $bb410;
$bb410:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 558, 9} true;
  assume {:verifier.code 0} true;
  $i683 := $add.i32($i677,1);
  call {:cexpr "c"} boogie_si_record_i32($i683);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 559, 5} true;
  assume {:verifier.code 0} true;
  $i682 := $i683;
  goto $bb414;
$bb411:
  assume !($i680 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 20} true;
  assume {:verifier.code 0} true;
  $i681 := $sgt.i32($i676,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 9} true;
  assume {:verifier.code 0} true;
  $i682 := $i677;
  assume {:branchcond $i681} true;
  goto $bb412, $bb413;
$bb412:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 9} true;
  assume {:verifier.code 0} true;
  assume ($i681 == 1);
  goto $bb410;
$bb413:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 557, 9} true;
  assume {:verifier.code 0} true;
  assume !($i681 == 1);
  goto $bb414;
$bb414:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 560, 3} true;
  assume {:verifier.code 0} true;
  $i679 := $i682;
  goto $bb408;
$bb415:
  assume ($i693 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 11} true;
  assume {:verifier.code 0} true;
  $i695 := $slt.i32($i691,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i695} true;
  goto $bb418, $bb420;
$bb416:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 567, 7} true;
  assume {:verifier.code 0} true;
  assume !($i693 == 1);
  goto $bb417;
$bb417:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 572, 7} true;
  assume {:verifier.code 0} true;
  $i699 := $sext.i32.i64($i687);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 572, 9} true;
  assume {:verifier.code 0} true;
  $i700 := $srem.i64($i699,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 572, 7} true;
  assume {:verifier.code 0} true;
  $i701 := $trunc.i64.i32($i700);
  call {:cexpr "a"} boogie_si_record_i32($i701);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 573, 5} true;
  assume {:verifier.code 0} true;
  $i702 := $add.i32($i701,$i701);
  call {:cexpr "a"} boogie_si_record_i32($i702);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 574, 7} true;
  assume {:verifier.code 0} true;
  $i703 := $sext.i32.i64($i691);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 574, 9} true;
  assume {:verifier.code 0} true;
  $i704 := $srem.i64($i703,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 574, 7} true;
  assume {:verifier.code 0} true;
  $i705 := $trunc.i64.i32($i704);
  call {:cexpr "b"} boogie_si_record_i32($i705);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 575, 5} true;
  assume {:verifier.code 0} true;
  $i706 := $add.i32($i705,$i705);
  call {:cexpr "b"} boogie_si_record_i32($i706);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 577, 5} true;
  assume {:verifier.code 0} true;
  $i707 := $add.i32($i694,$i694);
  call {:cexpr "c"} boogie_si_record_i32($i707);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 9} true;
  assume {:verifier.code 0} true;
  $i708 := $slt.i32($i702,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 7} true;
  assume {:verifier.code 0} true;
  $i709 := $i707;
  assume {:branchcond $i708} true;
  goto $bb424, $bb425;
$bb418:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 15} true;
  assume {:verifier.code 0} true;
  assume ($i695 == 1);
  goto $bb419;
$bb419:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 569, 9} true;
  assume {:verifier.code 0} true;
  $i698 := $add.i32($i692,1);
  call {:cexpr "c"} boogie_si_record_i32($i698);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 570, 5} true;
  assume {:verifier.code 0} true;
  $i697 := $i698;
  goto $bb423;
$bb420:
  assume !($i695 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 20} true;
  assume {:verifier.code 0} true;
  $i696 := $sgt.i32($i691,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 9} true;
  assume {:verifier.code 0} true;
  $i697 := $i692;
  assume {:branchcond $i696} true;
  goto $bb421, $bb422;
$bb421:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 9} true;
  assume {:verifier.code 0} true;
  assume ($i696 == 1);
  goto $bb419;
$bb422:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 568, 9} true;
  assume {:verifier.code 0} true;
  assume !($i696 == 1);
  goto $bb423;
$bb423:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 571, 3} true;
  assume {:verifier.code 0} true;
  $i694 := $i697;
  goto $bb417;
$bb424:
  assume ($i708 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 11} true;
  assume {:verifier.code 0} true;
  $i710 := $slt.i32($i706,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i710} true;
  goto $bb427, $bb429;
$bb425:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 578, 7} true;
  assume {:verifier.code 0} true;
  assume !($i708 == 1);
  goto $bb426;
$bb426:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 583, 7} true;
  assume {:verifier.code 0} true;
  $i714 := $sext.i32.i64($i702);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 583, 9} true;
  assume {:verifier.code 0} true;
  $i715 := $srem.i64($i714,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 583, 7} true;
  assume {:verifier.code 0} true;
  $i716 := $trunc.i64.i32($i715);
  call {:cexpr "a"} boogie_si_record_i32($i716);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 584, 5} true;
  assume {:verifier.code 0} true;
  $i717 := $add.i32($i716,$i716);
  call {:cexpr "a"} boogie_si_record_i32($i717);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 585, 7} true;
  assume {:verifier.code 0} true;
  $i718 := $sext.i32.i64($i706);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 585, 9} true;
  assume {:verifier.code 0} true;
  $i719 := $srem.i64($i718,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 585, 7} true;
  assume {:verifier.code 0} true;
  $i720 := $trunc.i64.i32($i719);
  call {:cexpr "b"} boogie_si_record_i32($i720);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 586, 5} true;
  assume {:verifier.code 0} true;
  $i721 := $add.i32($i720,$i720);
  call {:cexpr "b"} boogie_si_record_i32($i721);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 588, 5} true;
  assume {:verifier.code 0} true;
  $i722 := $add.i32($i709,$i709);
  call {:cexpr "c"} boogie_si_record_i32($i722);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 589, 9} true;
  assume {:verifier.code 0} true;
  $i723 := $slt.i32($i717,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 589, 7} true;
  assume {:verifier.code 0} true;
  $i724 := $i722;
  assume {:branchcond $i723} true;
  goto $bb433, $bb434;
$bb427:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 15} true;
  assume {:verifier.code 0} true;
  assume ($i710 == 1);
  goto $bb428;
$bb428:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 580, 9} true;
  assume {:verifier.code 0} true;
  $i713 := $add.i32($i707,1);
  call {:cexpr "c"} boogie_si_record_i32($i713);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 581, 5} true;
  assume {:verifier.code 0} true;
  $i712 := $i713;
  goto $bb432;
$bb429:
  assume !($i710 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 20} true;
  assume {:verifier.code 0} true;
  $i711 := $sgt.i32($i706,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 9} true;
  assume {:verifier.code 0} true;
  $i712 := $i707;
  assume {:branchcond $i711} true;
  goto $bb430, $bb431;
$bb430:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 9} true;
  assume {:verifier.code 0} true;
  assume ($i711 == 1);
  goto $bb428;
$bb431:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 579, 9} true;
  assume {:verifier.code 0} true;
  assume !($i711 == 1);
  goto $bb432;
$bb432:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 582, 3} true;
  assume {:verifier.code 0} true;
  $i709 := $i712;
  goto $bb426;
$bb433:
  assume ($i723 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 11} true;
  assume {:verifier.code 0} true;
  $i725 := $slt.i32($i721,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i725} true;
  goto $bb436, $bb438;
$bb434:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 589, 7} true;
  assume {:verifier.code 0} true;
  assume !($i723 == 1);
  goto $bb435;
$bb435:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 594, 7} true;
  assume {:verifier.code 0} true;
  $i729 := $sext.i32.i64($i717);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 594, 9} true;
  assume {:verifier.code 0} true;
  $i730 := $srem.i64($i729,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 594, 7} true;
  assume {:verifier.code 0} true;
  $i731 := $trunc.i64.i32($i730);
  call {:cexpr "a"} boogie_si_record_i32($i731);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 595, 5} true;
  assume {:verifier.code 0} true;
  $i732 := $add.i32($i731,$i731);
  call {:cexpr "a"} boogie_si_record_i32($i732);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 596, 7} true;
  assume {:verifier.code 0} true;
  $i733 := $sext.i32.i64($i721);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 596, 9} true;
  assume {:verifier.code 0} true;
  $i734 := $srem.i64($i733,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 596, 7} true;
  assume {:verifier.code 0} true;
  $i735 := $trunc.i64.i32($i734);
  call {:cexpr "b"} boogie_si_record_i32($i735);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 597, 5} true;
  assume {:verifier.code 0} true;
  $i736 := $add.i32($i735,$i735);
  call {:cexpr "b"} boogie_si_record_i32($i736);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 599, 5} true;
  assume {:verifier.code 0} true;
  $i737 := $add.i32($i724,$i724);
  call {:cexpr "c"} boogie_si_record_i32($i737);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 9} true;
  assume {:verifier.code 0} true;
  $i738 := $slt.i32($i732,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 7} true;
  assume {:verifier.code 0} true;
  $i739 := $i737;
  assume {:branchcond $i738} true;
  goto $bb442, $bb443;
$bb436:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 15} true;
  assume {:verifier.code 0} true;
  assume ($i725 == 1);
  goto $bb437;
$bb437:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 591, 9} true;
  assume {:verifier.code 0} true;
  $i728 := $add.i32($i722,1);
  call {:cexpr "c"} boogie_si_record_i32($i728);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 592, 5} true;
  assume {:verifier.code 0} true;
  $i727 := $i728;
  goto $bb441;
$bb438:
  assume !($i725 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 20} true;
  assume {:verifier.code 0} true;
  $i726 := $sgt.i32($i721,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 9} true;
  assume {:verifier.code 0} true;
  $i727 := $i722;
  assume {:branchcond $i726} true;
  goto $bb439, $bb440;
$bb439:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 9} true;
  assume {:verifier.code 0} true;
  assume ($i726 == 1);
  goto $bb437;
$bb440:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 590, 9} true;
  assume {:verifier.code 0} true;
  assume !($i726 == 1);
  goto $bb441;
$bb441:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 593, 3} true;
  assume {:verifier.code 0} true;
  $i724 := $i727;
  goto $bb435;
$bb442:
  assume ($i738 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 11} true;
  assume {:verifier.code 0} true;
  $i740 := $slt.i32($i736,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i740} true;
  goto $bb445, $bb447;
$bb443:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 600, 7} true;
  assume {:verifier.code 0} true;
  assume !($i738 == 1);
  goto $bb444;
$bb444:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 605, 7} true;
  assume {:verifier.code 0} true;
  $i744 := $sext.i32.i64($i732);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 605, 9} true;
  assume {:verifier.code 0} true;
  $i745 := $srem.i64($i744,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 605, 7} true;
  assume {:verifier.code 0} true;
  $i746 := $trunc.i64.i32($i745);
  call {:cexpr "a"} boogie_si_record_i32($i746);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 606, 5} true;
  assume {:verifier.code 0} true;
  $i747 := $add.i32($i746,$i746);
  call {:cexpr "a"} boogie_si_record_i32($i747);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 607, 7} true;
  assume {:verifier.code 0} true;
  $i748 := $sext.i32.i64($i736);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 607, 9} true;
  assume {:verifier.code 0} true;
  $i749 := $srem.i64($i748,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 607, 7} true;
  assume {:verifier.code 0} true;
  $i750 := $trunc.i64.i32($i749);
  call {:cexpr "b"} boogie_si_record_i32($i750);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 608, 5} true;
  assume {:verifier.code 0} true;
  $i751 := $add.i32($i750,$i750);
  call {:cexpr "b"} boogie_si_record_i32($i751);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 610, 5} true;
  assume {:verifier.code 0} true;
  $i752 := $add.i32($i739,$i739);
  call {:cexpr "c"} boogie_si_record_i32($i752);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 611, 9} true;
  assume {:verifier.code 0} true;
  $i753 := $slt.i32($i747,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 611, 7} true;
  assume {:verifier.code 0} true;
  $i754 := $i752;
  assume {:branchcond $i753} true;
  goto $bb451, $bb452;
$bb445:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 15} true;
  assume {:verifier.code 0} true;
  assume ($i740 == 1);
  goto $bb446;
$bb446:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 602, 9} true;
  assume {:verifier.code 0} true;
  $i743 := $add.i32($i737,1);
  call {:cexpr "c"} boogie_si_record_i32($i743);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 603, 5} true;
  assume {:verifier.code 0} true;
  $i742 := $i743;
  goto $bb450;
$bb447:
  assume !($i740 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 20} true;
  assume {:verifier.code 0} true;
  $i741 := $sgt.i32($i736,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 9} true;
  assume {:verifier.code 0} true;
  $i742 := $i737;
  assume {:branchcond $i741} true;
  goto $bb448, $bb449;
$bb448:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 9} true;
  assume {:verifier.code 0} true;
  assume ($i741 == 1);
  goto $bb446;
$bb449:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 601, 9} true;
  assume {:verifier.code 0} true;
  assume !($i741 == 1);
  goto $bb450;
$bb450:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 604, 3} true;
  assume {:verifier.code 0} true;
  $i739 := $i742;
  goto $bb444;
$bb451:
  assume ($i753 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 11} true;
  assume {:verifier.code 0} true;
  $i755 := $slt.i32($i751,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i755} true;
  goto $bb454, $bb456;
$bb452:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 611, 7} true;
  assume {:verifier.code 0} true;
  assume !($i753 == 1);
  goto $bb453;
$bb453:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 616, 7} true;
  assume {:verifier.code 0} true;
  $i759 := $sext.i32.i64($i747);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 616, 9} true;
  assume {:verifier.code 0} true;
  $i760 := $srem.i64($i759,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 616, 7} true;
  assume {:verifier.code 0} true;
  $i761 := $trunc.i64.i32($i760);
  call {:cexpr "a"} boogie_si_record_i32($i761);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 617, 5} true;
  assume {:verifier.code 0} true;
  $i762 := $add.i32($i761,$i761);
  call {:cexpr "a"} boogie_si_record_i32($i762);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 618, 7} true;
  assume {:verifier.code 0} true;
  $i763 := $sext.i32.i64($i751);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 618, 9} true;
  assume {:verifier.code 0} true;
  $i764 := $srem.i64($i763,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 618, 7} true;
  assume {:verifier.code 0} true;
  $i765 := $trunc.i64.i32($i764);
  call {:cexpr "b"} boogie_si_record_i32($i765);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 619, 5} true;
  assume {:verifier.code 0} true;
  $i766 := $add.i32($i765,$i765);
  call {:cexpr "b"} boogie_si_record_i32($i766);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 621, 5} true;
  assume {:verifier.code 0} true;
  $i767 := $add.i32($i754,$i754);
  call {:cexpr "c"} boogie_si_record_i32($i767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 9} true;
  assume {:verifier.code 0} true;
  $i768 := $slt.i32($i762,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 7} true;
  assume {:verifier.code 0} true;
  $i769 := $i767;
  assume {:branchcond $i768} true;
  goto $bb460, $bb461;
$bb454:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 15} true;
  assume {:verifier.code 0} true;
  assume ($i755 == 1);
  goto $bb455;
$bb455:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 613, 9} true;
  assume {:verifier.code 0} true;
  $i758 := $add.i32($i752,1);
  call {:cexpr "c"} boogie_si_record_i32($i758);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 614, 5} true;
  assume {:verifier.code 0} true;
  $i757 := $i758;
  goto $bb459;
$bb456:
  assume !($i755 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 20} true;
  assume {:verifier.code 0} true;
  $i756 := $sgt.i32($i751,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 9} true;
  assume {:verifier.code 0} true;
  $i757 := $i752;
  assume {:branchcond $i756} true;
  goto $bb457, $bb458;
$bb457:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 9} true;
  assume {:verifier.code 0} true;
  assume ($i756 == 1);
  goto $bb455;
$bb458:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 612, 9} true;
  assume {:verifier.code 0} true;
  assume !($i756 == 1);
  goto $bb459;
$bb459:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 615, 3} true;
  assume {:verifier.code 0} true;
  $i754 := $i757;
  goto $bb453;
$bb460:
  assume ($i768 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 11} true;
  assume {:verifier.code 0} true;
  $i770 := $slt.i32($i766,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i770} true;
  goto $bb463, $bb465;
$bb461:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 622, 7} true;
  assume {:verifier.code 0} true;
  assume !($i768 == 1);
  goto $bb462;
$bb462:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 627, 7} true;
  assume {:verifier.code 0} true;
  $i774 := $sext.i32.i64($i762);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 627, 9} true;
  assume {:verifier.code 0} true;
  $i775 := $srem.i64($i774,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 627, 7} true;
  assume {:verifier.code 0} true;
  $i776 := $trunc.i64.i32($i775);
  call {:cexpr "a"} boogie_si_record_i32($i776);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 628, 5} true;
  assume {:verifier.code 0} true;
  $i777 := $add.i32($i776,$i776);
  call {:cexpr "a"} boogie_si_record_i32($i777);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 629, 7} true;
  assume {:verifier.code 0} true;
  $i778 := $sext.i32.i64($i766);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 629, 9} true;
  assume {:verifier.code 0} true;
  $i779 := $srem.i64($i778,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 629, 7} true;
  assume {:verifier.code 0} true;
  $i780 := $trunc.i64.i32($i779);
  call {:cexpr "b"} boogie_si_record_i32($i780);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 630, 5} true;
  assume {:verifier.code 0} true;
  $i781 := $add.i32($i780,$i780);
  call {:cexpr "b"} boogie_si_record_i32($i781);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 632, 5} true;
  assume {:verifier.code 0} true;
  $i782 := $add.i32($i769,$i769);
  call {:cexpr "c"} boogie_si_record_i32($i782);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 633, 9} true;
  assume {:verifier.code 0} true;
  $i783 := $slt.i32($i777,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 633, 7} true;
  assume {:verifier.code 0} true;
  $i784 := $i782;
  assume {:branchcond $i783} true;
  goto $bb469, $bb470;
$bb463:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 15} true;
  assume {:verifier.code 0} true;
  assume ($i770 == 1);
  goto $bb464;
$bb464:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 624, 9} true;
  assume {:verifier.code 0} true;
  $i773 := $add.i32($i767,1);
  call {:cexpr "c"} boogie_si_record_i32($i773);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 625, 5} true;
  assume {:verifier.code 0} true;
  $i772 := $i773;
  goto $bb468;
$bb465:
  assume !($i770 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 20} true;
  assume {:verifier.code 0} true;
  $i771 := $sgt.i32($i766,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 9} true;
  assume {:verifier.code 0} true;
  $i772 := $i767;
  assume {:branchcond $i771} true;
  goto $bb466, $bb467;
$bb466:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 9} true;
  assume {:verifier.code 0} true;
  assume ($i771 == 1);
  goto $bb464;
$bb467:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 623, 9} true;
  assume {:verifier.code 0} true;
  assume !($i771 == 1);
  goto $bb468;
$bb468:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 626, 3} true;
  assume {:verifier.code 0} true;
  $i769 := $i772;
  goto $bb462;
$bb469:
  assume ($i783 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 11} true;
  assume {:verifier.code 0} true;
  $i785 := $slt.i32($i781,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i785} true;
  goto $bb472, $bb474;
$bb470:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 633, 7} true;
  assume {:verifier.code 0} true;
  assume !($i783 == 1);
  goto $bb471;
$bb471:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 638, 7} true;
  assume {:verifier.code 0} true;
  $i789 := $sext.i32.i64($i777);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 638, 9} true;
  assume {:verifier.code 0} true;
  $i790 := $srem.i64($i789,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 638, 7} true;
  assume {:verifier.code 0} true;
  $i791 := $trunc.i64.i32($i790);
  call {:cexpr "a"} boogie_si_record_i32($i791);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 639, 5} true;
  assume {:verifier.code 0} true;
  $i792 := $add.i32($i791,$i791);
  call {:cexpr "a"} boogie_si_record_i32($i792);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 640, 7} true;
  assume {:verifier.code 0} true;
  $i793 := $sext.i32.i64($i781);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 640, 9} true;
  assume {:verifier.code 0} true;
  $i794 := $srem.i64($i793,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 640, 7} true;
  assume {:verifier.code 0} true;
  $i795 := $trunc.i64.i32($i794);
  call {:cexpr "b"} boogie_si_record_i32($i795);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 641, 5} true;
  assume {:verifier.code 0} true;
  $i796 := $add.i32($i795,$i795);
  call {:cexpr "b"} boogie_si_record_i32($i796);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 643, 5} true;
  assume {:verifier.code 0} true;
  $i797 := $add.i32($i784,$i784);
  call {:cexpr "c"} boogie_si_record_i32($i797);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 9} true;
  assume {:verifier.code 0} true;
  $i798 := $slt.i32($i792,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 7} true;
  assume {:verifier.code 0} true;
  $i799 := $i797;
  assume {:branchcond $i798} true;
  goto $bb478, $bb479;
$bb472:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 15} true;
  assume {:verifier.code 0} true;
  assume ($i785 == 1);
  goto $bb473;
$bb473:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 635, 9} true;
  assume {:verifier.code 0} true;
  $i788 := $add.i32($i782,1);
  call {:cexpr "c"} boogie_si_record_i32($i788);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 636, 5} true;
  assume {:verifier.code 0} true;
  $i787 := $i788;
  goto $bb477;
$bb474:
  assume !($i785 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 20} true;
  assume {:verifier.code 0} true;
  $i786 := $sgt.i32($i781,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 9} true;
  assume {:verifier.code 0} true;
  $i787 := $i782;
  assume {:branchcond $i786} true;
  goto $bb475, $bb476;
$bb475:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 9} true;
  assume {:verifier.code 0} true;
  assume ($i786 == 1);
  goto $bb473;
$bb476:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 634, 9} true;
  assume {:verifier.code 0} true;
  assume !($i786 == 1);
  goto $bb477;
$bb477:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 637, 3} true;
  assume {:verifier.code 0} true;
  $i784 := $i787;
  goto $bb471;
$bb478:
  assume ($i798 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 11} true;
  assume {:verifier.code 0} true;
  $i800 := $slt.i32($i796,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i800} true;
  goto $bb481, $bb483;
$bb479:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 644, 7} true;
  assume {:verifier.code 0} true;
  assume !($i798 == 1);
  goto $bb480;
$bb480:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 649, 7} true;
  assume {:verifier.code 0} true;
  $i804 := $sext.i32.i64($i792);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 649, 9} true;
  assume {:verifier.code 0} true;
  $i805 := $srem.i64($i804,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 649, 7} true;
  assume {:verifier.code 0} true;
  $i806 := $trunc.i64.i32($i805);
  call {:cexpr "a"} boogie_si_record_i32($i806);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 650, 5} true;
  assume {:verifier.code 0} true;
  $i807 := $add.i32($i806,$i806);
  call {:cexpr "a"} boogie_si_record_i32($i807);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 651, 7} true;
  assume {:verifier.code 0} true;
  $i808 := $sext.i32.i64($i796);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 651, 9} true;
  assume {:verifier.code 0} true;
  $i809 := $srem.i64($i808,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 651, 7} true;
  assume {:verifier.code 0} true;
  $i810 := $trunc.i64.i32($i809);
  call {:cexpr "b"} boogie_si_record_i32($i810);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 652, 5} true;
  assume {:verifier.code 0} true;
  $i811 := $add.i32($i810,$i810);
  call {:cexpr "b"} boogie_si_record_i32($i811);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 654, 5} true;
  assume {:verifier.code 0} true;
  $i812 := $add.i32($i799,$i799);
  call {:cexpr "c"} boogie_si_record_i32($i812);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 655, 9} true;
  assume {:verifier.code 0} true;
  $i813 := $slt.i32($i807,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 655, 7} true;
  assume {:verifier.code 0} true;
  $i814 := $i812;
  assume {:branchcond $i813} true;
  goto $bb487, $bb488;
$bb481:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 15} true;
  assume {:verifier.code 0} true;
  assume ($i800 == 1);
  goto $bb482;
$bb482:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 646, 9} true;
  assume {:verifier.code 0} true;
  $i803 := $add.i32($i797,1);
  call {:cexpr "c"} boogie_si_record_i32($i803);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 647, 5} true;
  assume {:verifier.code 0} true;
  $i802 := $i803;
  goto $bb486;
$bb483:
  assume !($i800 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 20} true;
  assume {:verifier.code 0} true;
  $i801 := $sgt.i32($i796,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 9} true;
  assume {:verifier.code 0} true;
  $i802 := $i797;
  assume {:branchcond $i801} true;
  goto $bb484, $bb485;
$bb484:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 9} true;
  assume {:verifier.code 0} true;
  assume ($i801 == 1);
  goto $bb482;
$bb485:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 645, 9} true;
  assume {:verifier.code 0} true;
  assume !($i801 == 1);
  goto $bb486;
$bb486:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 648, 3} true;
  assume {:verifier.code 0} true;
  $i799 := $i802;
  goto $bb480;
$bb487:
  assume ($i813 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 11} true;
  assume {:verifier.code 0} true;
  $i815 := $slt.i32($i811,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i815} true;
  goto $bb490, $bb492;
$bb488:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 655, 7} true;
  assume {:verifier.code 0} true;
  assume !($i813 == 1);
  goto $bb489;
$bb489:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 660, 7} true;
  assume {:verifier.code 0} true;
  $i819 := $sext.i32.i64($i807);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 660, 9} true;
  assume {:verifier.code 0} true;
  $i820 := $srem.i64($i819,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 660, 7} true;
  assume {:verifier.code 0} true;
  $i821 := $trunc.i64.i32($i820);
  call {:cexpr "a"} boogie_si_record_i32($i821);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 661, 5} true;
  assume {:verifier.code 0} true;
  $i822 := $add.i32($i821,$i821);
  call {:cexpr "a"} boogie_si_record_i32($i822);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 662, 7} true;
  assume {:verifier.code 0} true;
  $i823 := $sext.i32.i64($i811);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 662, 9} true;
  assume {:verifier.code 0} true;
  $i824 := $srem.i64($i823,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 662, 7} true;
  assume {:verifier.code 0} true;
  $i825 := $trunc.i64.i32($i824);
  call {:cexpr "b"} boogie_si_record_i32($i825);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 663, 5} true;
  assume {:verifier.code 0} true;
  $i826 := $add.i32($i825,$i825);
  call {:cexpr "b"} boogie_si_record_i32($i826);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 665, 5} true;
  assume {:verifier.code 0} true;
  $i827 := $add.i32($i814,$i814);
  call {:cexpr "c"} boogie_si_record_i32($i827);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 9} true;
  assume {:verifier.code 0} true;
  $i828 := $slt.i32($i822,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 7} true;
  assume {:verifier.code 0} true;
  $i829 := $i827;
  assume {:branchcond $i828} true;
  goto $bb496, $bb497;
$bb490:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 15} true;
  assume {:verifier.code 0} true;
  assume ($i815 == 1);
  goto $bb491;
$bb491:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 657, 9} true;
  assume {:verifier.code 0} true;
  $i818 := $add.i32($i812,1);
  call {:cexpr "c"} boogie_si_record_i32($i818);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 658, 5} true;
  assume {:verifier.code 0} true;
  $i817 := $i818;
  goto $bb495;
$bb492:
  assume !($i815 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 20} true;
  assume {:verifier.code 0} true;
  $i816 := $sgt.i32($i811,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 9} true;
  assume {:verifier.code 0} true;
  $i817 := $i812;
  assume {:branchcond $i816} true;
  goto $bb493, $bb494;
$bb493:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 9} true;
  assume {:verifier.code 0} true;
  assume ($i816 == 1);
  goto $bb491;
$bb494:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 656, 9} true;
  assume {:verifier.code 0} true;
  assume !($i816 == 1);
  goto $bb495;
$bb495:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 659, 3} true;
  assume {:verifier.code 0} true;
  $i814 := $i817;
  goto $bb489;
$bb496:
  assume ($i828 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 11} true;
  assume {:verifier.code 0} true;
  $i830 := $slt.i32($i826,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i830} true;
  goto $bb499, $bb501;
$bb497:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 666, 7} true;
  assume {:verifier.code 0} true;
  assume !($i828 == 1);
  goto $bb498;
$bb498:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 671, 7} true;
  assume {:verifier.code 0} true;
  $i834 := $sext.i32.i64($i822);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 671, 9} true;
  assume {:verifier.code 0} true;
  $i835 := $srem.i64($i834,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 671, 7} true;
  assume {:verifier.code 0} true;
  $i836 := $trunc.i64.i32($i835);
  call {:cexpr "a"} boogie_si_record_i32($i836);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 672, 5} true;
  assume {:verifier.code 0} true;
  $i837 := $add.i32($i836,$i836);
  call {:cexpr "a"} boogie_si_record_i32($i837);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 673, 7} true;
  assume {:verifier.code 0} true;
  $i838 := $sext.i32.i64($i826);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 673, 9} true;
  assume {:verifier.code 0} true;
  $i839 := $srem.i64($i838,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 673, 7} true;
  assume {:verifier.code 0} true;
  $i840 := $trunc.i64.i32($i839);
  call {:cexpr "b"} boogie_si_record_i32($i840);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 674, 5} true;
  assume {:verifier.code 0} true;
  $i841 := $add.i32($i840,$i840);
  call {:cexpr "b"} boogie_si_record_i32($i841);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 676, 5} true;
  assume {:verifier.code 0} true;
  $i842 := $add.i32($i829,$i829);
  call {:cexpr "c"} boogie_si_record_i32($i842);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 677, 9} true;
  assume {:verifier.code 0} true;
  $i843 := $slt.i32($i837,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 677, 7} true;
  assume {:verifier.code 0} true;
  $i844 := $i842;
  assume {:branchcond $i843} true;
  goto $bb505, $bb506;
$bb499:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 15} true;
  assume {:verifier.code 0} true;
  assume ($i830 == 1);
  goto $bb500;
$bb500:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 668, 9} true;
  assume {:verifier.code 0} true;
  $i833 := $add.i32($i827,1);
  call {:cexpr "c"} boogie_si_record_i32($i833);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 669, 5} true;
  assume {:verifier.code 0} true;
  $i832 := $i833;
  goto $bb504;
$bb501:
  assume !($i830 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 20} true;
  assume {:verifier.code 0} true;
  $i831 := $sgt.i32($i826,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 9} true;
  assume {:verifier.code 0} true;
  $i832 := $i827;
  assume {:branchcond $i831} true;
  goto $bb502, $bb503;
$bb502:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 9} true;
  assume {:verifier.code 0} true;
  assume ($i831 == 1);
  goto $bb500;
$bb503:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 667, 9} true;
  assume {:verifier.code 0} true;
  assume !($i831 == 1);
  goto $bb504;
$bb504:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 670, 3} true;
  assume {:verifier.code 0} true;
  $i829 := $i832;
  goto $bb498;
$bb505:
  assume ($i843 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 11} true;
  assume {:verifier.code 0} true;
  $i845 := $slt.i32($i841,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i845} true;
  goto $bb508, $bb510;
$bb506:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 677, 7} true;
  assume {:verifier.code 0} true;
  assume !($i843 == 1);
  goto $bb507;
$bb507:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 682, 7} true;
  assume {:verifier.code 0} true;
  $i849 := $sext.i32.i64($i837);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 682, 9} true;
  assume {:verifier.code 0} true;
  $i850 := $srem.i64($i849,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 682, 7} true;
  assume {:verifier.code 0} true;
  $i851 := $trunc.i64.i32($i850);
  call {:cexpr "a"} boogie_si_record_i32($i851);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 683, 5} true;
  assume {:verifier.code 0} true;
  $i852 := $add.i32($i851,$i851);
  call {:cexpr "a"} boogie_si_record_i32($i852);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 684, 7} true;
  assume {:verifier.code 0} true;
  $i853 := $sext.i32.i64($i841);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 684, 9} true;
  assume {:verifier.code 0} true;
  $i854 := $srem.i64($i853,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 684, 7} true;
  assume {:verifier.code 0} true;
  $i855 := $trunc.i64.i32($i854);
  call {:cexpr "b"} boogie_si_record_i32($i855);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 685, 5} true;
  assume {:verifier.code 0} true;
  $i856 := $add.i32($i855,$i855);
  call {:cexpr "b"} boogie_si_record_i32($i856);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 687, 5} true;
  assume {:verifier.code 0} true;
  $i857 := $add.i32($i844,$i844);
  call {:cexpr "c"} boogie_si_record_i32($i857);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 9} true;
  assume {:verifier.code 0} true;
  $i858 := $slt.i32($i852,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 7} true;
  assume {:verifier.code 0} true;
  $i859 := $i857;
  assume {:branchcond $i858} true;
  goto $bb514, $bb515;
$bb508:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 15} true;
  assume {:verifier.code 0} true;
  assume ($i845 == 1);
  goto $bb509;
$bb509:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 679, 9} true;
  assume {:verifier.code 0} true;
  $i848 := $add.i32($i842,1);
  call {:cexpr "c"} boogie_si_record_i32($i848);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 680, 5} true;
  assume {:verifier.code 0} true;
  $i847 := $i848;
  goto $bb513;
$bb510:
  assume !($i845 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 20} true;
  assume {:verifier.code 0} true;
  $i846 := $sgt.i32($i841,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 9} true;
  assume {:verifier.code 0} true;
  $i847 := $i842;
  assume {:branchcond $i846} true;
  goto $bb511, $bb512;
$bb511:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 9} true;
  assume {:verifier.code 0} true;
  assume ($i846 == 1);
  goto $bb509;
$bb512:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 678, 9} true;
  assume {:verifier.code 0} true;
  assume !($i846 == 1);
  goto $bb513;
$bb513:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 681, 3} true;
  assume {:verifier.code 0} true;
  $i844 := $i847;
  goto $bb507;
$bb514:
  assume ($i858 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 11} true;
  assume {:verifier.code 0} true;
  $i860 := $slt.i32($i856,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i860} true;
  goto $bb517, $bb519;
$bb515:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 688, 7} true;
  assume {:verifier.code 0} true;
  assume !($i858 == 1);
  goto $bb516;
$bb516:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 693, 7} true;
  assume {:verifier.code 0} true;
  $i864 := $sext.i32.i64($i852);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 693, 9} true;
  assume {:verifier.code 0} true;
  $i865 := $srem.i64($i864,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 693, 7} true;
  assume {:verifier.code 0} true;
  $i866 := $trunc.i64.i32($i865);
  call {:cexpr "a"} boogie_si_record_i32($i866);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 694, 5} true;
  assume {:verifier.code 0} true;
  $i867 := $add.i32($i866,$i866);
  call {:cexpr "a"} boogie_si_record_i32($i867);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 695, 7} true;
  assume {:verifier.code 0} true;
  $i868 := $sext.i32.i64($i856);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 695, 9} true;
  assume {:verifier.code 0} true;
  $i869 := $srem.i64($i868,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 695, 7} true;
  assume {:verifier.code 0} true;
  $i870 := $trunc.i64.i32($i869);
  call {:cexpr "b"} boogie_si_record_i32($i870);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 696, 5} true;
  assume {:verifier.code 0} true;
  $i871 := $add.i32($i870,$i870);
  call {:cexpr "b"} boogie_si_record_i32($i871);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 698, 5} true;
  assume {:verifier.code 0} true;
  $i872 := $add.i32($i859,$i859);
  call {:cexpr "c"} boogie_si_record_i32($i872);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 699, 9} true;
  assume {:verifier.code 0} true;
  $i873 := $slt.i32($i867,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 699, 7} true;
  assume {:verifier.code 0} true;
  $i874 := $i872;
  assume {:branchcond $i873} true;
  goto $bb523, $bb524;
$bb517:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 15} true;
  assume {:verifier.code 0} true;
  assume ($i860 == 1);
  goto $bb518;
$bb518:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 690, 9} true;
  assume {:verifier.code 0} true;
  $i863 := $add.i32($i857,1);
  call {:cexpr "c"} boogie_si_record_i32($i863);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 691, 5} true;
  assume {:verifier.code 0} true;
  $i862 := $i863;
  goto $bb522;
$bb519:
  assume !($i860 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 20} true;
  assume {:verifier.code 0} true;
  $i861 := $sgt.i32($i856,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 9} true;
  assume {:verifier.code 0} true;
  $i862 := $i857;
  assume {:branchcond $i861} true;
  goto $bb520, $bb521;
$bb520:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 9} true;
  assume {:verifier.code 0} true;
  assume ($i861 == 1);
  goto $bb518;
$bb521:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 689, 9} true;
  assume {:verifier.code 0} true;
  assume !($i861 == 1);
  goto $bb522;
$bb522:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 692, 3} true;
  assume {:verifier.code 0} true;
  $i859 := $i862;
  goto $bb516;
$bb523:
  assume ($i873 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 11} true;
  assume {:verifier.code 0} true;
  $i875 := $slt.i32($i871,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i875} true;
  goto $bb526, $bb528;
$bb524:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 699, 7} true;
  assume {:verifier.code 0} true;
  assume !($i873 == 1);
  goto $bb525;
$bb525:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 704, 7} true;
  assume {:verifier.code 0} true;
  $i879 := $sext.i32.i64($i867);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 704, 9} true;
  assume {:verifier.code 0} true;
  $i880 := $srem.i64($i879,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 704, 7} true;
  assume {:verifier.code 0} true;
  $i881 := $trunc.i64.i32($i880);
  call {:cexpr "a"} boogie_si_record_i32($i881);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 705, 5} true;
  assume {:verifier.code 0} true;
  $i882 := $add.i32($i881,$i881);
  call {:cexpr "a"} boogie_si_record_i32($i882);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 706, 7} true;
  assume {:verifier.code 0} true;
  $i883 := $sext.i32.i64($i871);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 706, 9} true;
  assume {:verifier.code 0} true;
  $i884 := $srem.i64($i883,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 706, 7} true;
  assume {:verifier.code 0} true;
  $i885 := $trunc.i64.i32($i884);
  call {:cexpr "b"} boogie_si_record_i32($i885);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 707, 5} true;
  assume {:verifier.code 0} true;
  $i886 := $add.i32($i885,$i885);
  call {:cexpr "b"} boogie_si_record_i32($i886);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 709, 5} true;
  assume {:verifier.code 0} true;
  $i887 := $add.i32($i874,$i874);
  call {:cexpr "c"} boogie_si_record_i32($i887);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 9} true;
  assume {:verifier.code 0} true;
  $i888 := $slt.i32($i882,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 7} true;
  assume {:verifier.code 0} true;
  $i889 := $i887;
  assume {:branchcond $i888} true;
  goto $bb532, $bb533;
$bb526:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 15} true;
  assume {:verifier.code 0} true;
  assume ($i875 == 1);
  goto $bb527;
$bb527:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 701, 9} true;
  assume {:verifier.code 0} true;
  $i878 := $add.i32($i872,1);
  call {:cexpr "c"} boogie_si_record_i32($i878);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 702, 5} true;
  assume {:verifier.code 0} true;
  $i877 := $i878;
  goto $bb531;
$bb528:
  assume !($i875 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 20} true;
  assume {:verifier.code 0} true;
  $i876 := $sgt.i32($i871,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 9} true;
  assume {:verifier.code 0} true;
  $i877 := $i872;
  assume {:branchcond $i876} true;
  goto $bb529, $bb530;
$bb529:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 9} true;
  assume {:verifier.code 0} true;
  assume ($i876 == 1);
  goto $bb527;
$bb530:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 700, 9} true;
  assume {:verifier.code 0} true;
  assume !($i876 == 1);
  goto $bb531;
$bb531:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 703, 3} true;
  assume {:verifier.code 0} true;
  $i874 := $i877;
  goto $bb525;
$bb532:
  assume ($i888 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 11} true;
  assume {:verifier.code 0} true;
  $i890 := $slt.i32($i886,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i890} true;
  goto $bb535, $bb537;
$bb533:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 710, 7} true;
  assume {:verifier.code 0} true;
  assume !($i888 == 1);
  goto $bb534;
$bb534:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 715, 7} true;
  assume {:verifier.code 0} true;
  $i894 := $sext.i32.i64($i882);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 715, 9} true;
  assume {:verifier.code 0} true;
  $i895 := $srem.i64($i894,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 715, 7} true;
  assume {:verifier.code 0} true;
  $i896 := $trunc.i64.i32($i895);
  call {:cexpr "a"} boogie_si_record_i32($i896);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 716, 5} true;
  assume {:verifier.code 0} true;
  $i897 := $add.i32($i896,$i896);
  call {:cexpr "a"} boogie_si_record_i32($i897);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 717, 7} true;
  assume {:verifier.code 0} true;
  $i898 := $sext.i32.i64($i886);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 717, 9} true;
  assume {:verifier.code 0} true;
  $i899 := $srem.i64($i898,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 717, 7} true;
  assume {:verifier.code 0} true;
  $i900 := $trunc.i64.i32($i899);
  call {:cexpr "b"} boogie_si_record_i32($i900);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 718, 5} true;
  assume {:verifier.code 0} true;
  $i901 := $add.i32($i900,$i900);
  call {:cexpr "b"} boogie_si_record_i32($i901);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 720, 5} true;
  assume {:verifier.code 0} true;
  $i902 := $add.i32($i889,$i889);
  call {:cexpr "c"} boogie_si_record_i32($i902);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 721, 9} true;
  assume {:verifier.code 0} true;
  $i903 := $slt.i32($i897,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 721, 7} true;
  assume {:verifier.code 0} true;
  $i904 := $i902;
  assume {:branchcond $i903} true;
  goto $bb541, $bb542;
$bb535:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 15} true;
  assume {:verifier.code 0} true;
  assume ($i890 == 1);
  goto $bb536;
$bb536:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 712, 9} true;
  assume {:verifier.code 0} true;
  $i893 := $add.i32($i887,1);
  call {:cexpr "c"} boogie_si_record_i32($i893);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 713, 5} true;
  assume {:verifier.code 0} true;
  $i892 := $i893;
  goto $bb540;
$bb537:
  assume !($i890 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 20} true;
  assume {:verifier.code 0} true;
  $i891 := $sgt.i32($i886,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 9} true;
  assume {:verifier.code 0} true;
  $i892 := $i887;
  assume {:branchcond $i891} true;
  goto $bb538, $bb539;
$bb538:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 9} true;
  assume {:verifier.code 0} true;
  assume ($i891 == 1);
  goto $bb536;
$bb539:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 711, 9} true;
  assume {:verifier.code 0} true;
  assume !($i891 == 1);
  goto $bb540;
$bb540:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 714, 3} true;
  assume {:verifier.code 0} true;
  $i889 := $i892;
  goto $bb534;
$bb541:
  assume ($i903 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 11} true;
  assume {:verifier.code 0} true;
  $i905 := $slt.i32($i901,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i905} true;
  goto $bb544, $bb546;
$bb542:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 721, 7} true;
  assume {:verifier.code 0} true;
  assume !($i903 == 1);
  goto $bb543;
$bb543:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 726, 7} true;
  assume {:verifier.code 0} true;
  $i909 := $sext.i32.i64($i897);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 726, 9} true;
  assume {:verifier.code 0} true;
  $i910 := $srem.i64($i909,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 726, 7} true;
  assume {:verifier.code 0} true;
  $i911 := $trunc.i64.i32($i910);
  call {:cexpr "a"} boogie_si_record_i32($i911);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 727, 5} true;
  assume {:verifier.code 0} true;
  $i912 := $add.i32($i911,$i911);
  call {:cexpr "a"} boogie_si_record_i32($i912);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 728, 7} true;
  assume {:verifier.code 0} true;
  $i913 := $sext.i32.i64($i901);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 728, 9} true;
  assume {:verifier.code 0} true;
  $i914 := $srem.i64($i913,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 728, 7} true;
  assume {:verifier.code 0} true;
  $i915 := $trunc.i64.i32($i914);
  call {:cexpr "b"} boogie_si_record_i32($i915);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 729, 5} true;
  assume {:verifier.code 0} true;
  $i916 := $add.i32($i915,$i915);
  call {:cexpr "b"} boogie_si_record_i32($i916);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 731, 5} true;
  assume {:verifier.code 0} true;
  $i917 := $add.i32($i904,$i904);
  call {:cexpr "c"} boogie_si_record_i32($i917);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 9} true;
  assume {:verifier.code 0} true;
  $i918 := $slt.i32($i912,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 7} true;
  assume {:verifier.code 0} true;
  $i919 := $i917;
  assume {:branchcond $i918} true;
  goto $bb550, $bb551;
$bb544:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 15} true;
  assume {:verifier.code 0} true;
  assume ($i905 == 1);
  goto $bb545;
$bb545:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 723, 9} true;
  assume {:verifier.code 0} true;
  $i908 := $add.i32($i902,1);
  call {:cexpr "c"} boogie_si_record_i32($i908);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 724, 5} true;
  assume {:verifier.code 0} true;
  $i907 := $i908;
  goto $bb549;
$bb546:
  assume !($i905 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 20} true;
  assume {:verifier.code 0} true;
  $i906 := $sgt.i32($i901,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 9} true;
  assume {:verifier.code 0} true;
  $i907 := $i902;
  assume {:branchcond $i906} true;
  goto $bb547, $bb548;
$bb547:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 9} true;
  assume {:verifier.code 0} true;
  assume ($i906 == 1);
  goto $bb545;
$bb548:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 722, 9} true;
  assume {:verifier.code 0} true;
  assume !($i906 == 1);
  goto $bb549;
$bb549:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 725, 3} true;
  assume {:verifier.code 0} true;
  $i904 := $i907;
  goto $bb543;
$bb550:
  assume ($i918 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 11} true;
  assume {:verifier.code 0} true;
  $i920 := $slt.i32($i916,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i920} true;
  goto $bb553, $bb555;
$bb551:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 732, 7} true;
  assume {:verifier.code 0} true;
  assume !($i918 == 1);
  goto $bb552;
$bb552:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 737, 7} true;
  assume {:verifier.code 0} true;
  $i924 := $sext.i32.i64($i912);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 737, 9} true;
  assume {:verifier.code 0} true;
  $i925 := $srem.i64($i924,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 737, 7} true;
  assume {:verifier.code 0} true;
  $i926 := $trunc.i64.i32($i925);
  call {:cexpr "a"} boogie_si_record_i32($i926);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 738, 5} true;
  assume {:verifier.code 0} true;
  $i927 := $add.i32($i926,$i926);
  call {:cexpr "a"} boogie_si_record_i32($i927);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 739, 7} true;
  assume {:verifier.code 0} true;
  $i928 := $sext.i32.i64($i916);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 739, 9} true;
  assume {:verifier.code 0} true;
  $i929 := $srem.i64($i928,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 739, 7} true;
  assume {:verifier.code 0} true;
  $i930 := $trunc.i64.i32($i929);
  call {:cexpr "b"} boogie_si_record_i32($i930);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 740, 5} true;
  assume {:verifier.code 0} true;
  $i931 := $add.i32($i930,$i930);
  call {:cexpr "b"} boogie_si_record_i32($i931);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 742, 5} true;
  assume {:verifier.code 0} true;
  $i932 := $add.i32($i919,$i919);
  call {:cexpr "c"} boogie_si_record_i32($i932);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 743, 9} true;
  assume {:verifier.code 0} true;
  $i933 := $slt.i32($i927,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 743, 7} true;
  assume {:verifier.code 0} true;
  $i934 := $i932;
  assume {:branchcond $i933} true;
  goto $bb559, $bb560;
$bb553:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 15} true;
  assume {:verifier.code 0} true;
  assume ($i920 == 1);
  goto $bb554;
$bb554:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 734, 9} true;
  assume {:verifier.code 0} true;
  $i923 := $add.i32($i917,1);
  call {:cexpr "c"} boogie_si_record_i32($i923);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 735, 5} true;
  assume {:verifier.code 0} true;
  $i922 := $i923;
  goto $bb558;
$bb555:
  assume !($i920 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 20} true;
  assume {:verifier.code 0} true;
  $i921 := $sgt.i32($i916,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 9} true;
  assume {:verifier.code 0} true;
  $i922 := $i917;
  assume {:branchcond $i921} true;
  goto $bb556, $bb557;
$bb556:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 9} true;
  assume {:verifier.code 0} true;
  assume ($i921 == 1);
  goto $bb554;
$bb557:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 733, 9} true;
  assume {:verifier.code 0} true;
  assume !($i921 == 1);
  goto $bb558;
$bb558:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 736, 3} true;
  assume {:verifier.code 0} true;
  $i919 := $i922;
  goto $bb552;
$bb559:
  assume ($i933 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 11} true;
  assume {:verifier.code 0} true;
  $i935 := $slt.i32($i931,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i935} true;
  goto $bb562, $bb564;
$bb560:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 743, 7} true;
  assume {:verifier.code 0} true;
  assume !($i933 == 1);
  goto $bb561;
$bb561:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 748, 7} true;
  assume {:verifier.code 0} true;
  $i939 := $sext.i32.i64($i927);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 748, 9} true;
  assume {:verifier.code 0} true;
  $i940 := $srem.i64($i939,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 748, 7} true;
  assume {:verifier.code 0} true;
  $i941 := $trunc.i64.i32($i940);
  call {:cexpr "a"} boogie_si_record_i32($i941);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 749, 5} true;
  assume {:verifier.code 0} true;
  $i942 := $add.i32($i941,$i941);
  call {:cexpr "a"} boogie_si_record_i32($i942);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 750, 7} true;
  assume {:verifier.code 0} true;
  $i943 := $sext.i32.i64($i931);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 750, 9} true;
  assume {:verifier.code 0} true;
  $i944 := $srem.i64($i943,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 750, 7} true;
  assume {:verifier.code 0} true;
  $i945 := $trunc.i64.i32($i944);
  call {:cexpr "b"} boogie_si_record_i32($i945);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 751, 5} true;
  assume {:verifier.code 0} true;
  $i946 := $add.i32($i945,$i945);
  call {:cexpr "b"} boogie_si_record_i32($i946);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 753, 5} true;
  assume {:verifier.code 0} true;
  $i947 := $add.i32($i934,$i934);
  call {:cexpr "c"} boogie_si_record_i32($i947);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 754, 9} true;
  assume {:verifier.code 0} true;
  $i948 := $slt.i32($i942,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 754, 7} true;
  assume {:verifier.code 0} true;
  $i949 := $i947;
  assume {:branchcond $i948} true;
  goto $bb568, $bb569;
$bb562:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 15} true;
  assume {:verifier.code 0} true;
  assume ($i935 == 1);
  goto $bb563;
$bb563:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 745, 9} true;
  assume {:verifier.code 0} true;
  $i938 := $add.i32($i932,1);
  call {:cexpr "c"} boogie_si_record_i32($i938);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 746, 5} true;
  assume {:verifier.code 0} true;
  $i937 := $i938;
  goto $bb567;
$bb564:
  assume !($i935 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 20} true;
  assume {:verifier.code 0} true;
  $i936 := $sgt.i32($i931,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 9} true;
  assume {:verifier.code 0} true;
  $i937 := $i932;
  assume {:branchcond $i936} true;
  goto $bb565, $bb566;
$bb565:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 9} true;
  assume {:verifier.code 0} true;
  assume ($i936 == 1);
  goto $bb563;
$bb566:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 744, 9} true;
  assume {:verifier.code 0} true;
  assume !($i936 == 1);
  goto $bb567;
$bb567:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 747, 3} true;
  assume {:verifier.code 0} true;
  $i934 := $i937;
  goto $bb561;
$bb568:
  assume ($i948 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 11} true;
  assume {:verifier.code 0} true;
  $i950 := $slt.i32($i946,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i950} true;
  goto $bb571, $bb573;
$bb569:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 754, 7} true;
  assume {:verifier.code 0} true;
  assume !($i948 == 1);
  goto $bb570;
$bb570:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 764, 3} true;
  assume {:verifier.code 0} true;
  $r := $i949;
  $exn := false;
  return;
$bb571:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 15} true;
  assume {:verifier.code 0} true;
  assume ($i950 == 1);
  goto $bb572;
$bb572:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 756, 9} true;
  assume {:verifier.code 0} true;
  $i953 := $add.i32($i947,1);
  call {:cexpr "c"} boogie_si_record_i32($i953);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 757, 5} true;
  assume {:verifier.code 0} true;
  $i952 := $i953;
  goto $bb576;
$bb573:
  assume !($i950 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 20} true;
  assume {:verifier.code 0} true;
  $i951 := $sgt.i32($i946,2147483647);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 9} true;
  assume {:verifier.code 0} true;
  $i952 := $i947;
  assume {:branchcond $i951} true;
  goto $bb574, $bb575;
$bb574:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 9} true;
  assume {:verifier.code 0} true;
  assume ($i951 == 1);
  goto $bb572;
$bb575:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 755, 9} true;
  assume {:verifier.code 0} true;
  assume !($i951 == 1);
  goto $bb576;
$bb576:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 758, 3} true;
  assume {:verifier.code 0} true;
  $i949 := $i952;
  goto $bb570;
}
const __SMACK_and64: ref;
axiom (__SMACK_and64 == $sub.ref(0,42312));
procedure {:inline 1} __SMACK_and64($i0: i64, $i1: i64) returns ($r: i64)
modifies $exn;
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 65} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_and64:arg:a"} boogie_si_record_i64($i0);
  call {:cexpr "__SMACK_and64:arg:b"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 65} true;
  assume {:verifier.code 1} true;
  $i2 := $trunc.i64.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 68} true;
  assume {:verifier.code 1} true;
  $i3 := $trunc.i64.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 51} true;
  assume {:verifier.code 1} true;
  call $i4 := __SMACK_and32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_and32"} boogie_si_record_i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 45} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 767, 38} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_and16: ref;
axiom (__SMACK_and16 == $sub.ref(0,43344));
procedure {:inline 1} __SMACK_and16($i0: i16, $i1: i16) returns ($r: i16)
modifies $exn;
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i16;
  var $i13: i16;
  var $i8: i16;
  var $i17: i32;
  var $i18: i32;
  var $i19: i16;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i16;
  var $i24: i32;
  var $i25: i32;
  var $i26: i16;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i16;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i16;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i16;
  var $i42: i16;
  var $i37: i16;
  var $i46: i32;
  var $i47: i32;
  var $i48: i16;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i16;
  var $i53: i32;
  var $i54: i32;
  var $i55: i16;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i16;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i16;
  var $i64: i32;
  var $i65: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i16;
  var $i71: i16;
  var $i66: i16;
  var $i75: i32;
  var $i76: i32;
  var $i77: i16;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i16;
  var $i82: i32;
  var $i83: i32;
  var $i84: i16;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i16;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i16;
  var $i93: i32;
  var $i94: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i101: i32;
  var $i102: i32;
  var $i103: i16;
  var $i100: i16;
  var $i95: i16;
  var $i104: i32;
  var $i105: i32;
  var $i106: i16;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i16;
  var $i111: i32;
  var $i112: i32;
  var $i113: i16;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i16;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i16;
  var $i122: i32;
  var $i123: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i130: i32;
  var $i131: i32;
  var $i132: i16;
  var $i129: i16;
  var $i124: i16;
  var $i133: i32;
  var $i134: i32;
  var $i135: i16;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i16;
  var $i140: i32;
  var $i141: i32;
  var $i142: i16;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i16;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i16;
  var $i151: i32;
  var $i152: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i1;
  var $i159: i32;
  var $i160: i32;
  var $i161: i16;
  var $i158: i16;
  var $i153: i16;
  var $i162: i32;
  var $i163: i32;
  var $i164: i16;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i16;
  var $i169: i32;
  var $i170: i32;
  var $i171: i16;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i16;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i16;
  var $i180: i32;
  var $i181: i1;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i188: i32;
  var $i189: i32;
  var $i190: i16;
  var $i187: i16;
  var $i182: i16;
  var $i191: i32;
  var $i192: i32;
  var $i193: i16;
  var $i194: i32;
  var $i195: i32;
  var $i196: i32;
  var $i197: i16;
  var $i198: i32;
  var $i199: i32;
  var $i200: i16;
  var $i201: i32;
  var $i202: i32;
  var $i203: i32;
  var $i204: i16;
  var $i205: i32;
  var $i206: i32;
  var $i207: i32;
  var $i208: i16;
  var $i209: i32;
  var $i210: i1;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i215: i1;
  var $i217: i32;
  var $i218: i32;
  var $i219: i16;
  var $i216: i16;
  var $i211: i16;
  var $i220: i32;
  var $i221: i32;
  var $i222: i16;
  var $i223: i32;
  var $i224: i32;
  var $i225: i32;
  var $i226: i16;
  var $i227: i32;
  var $i228: i32;
  var $i229: i16;
  var $i230: i32;
  var $i231: i32;
  var $i232: i32;
  var $i233: i16;
  var $i234: i32;
  var $i235: i32;
  var $i236: i32;
  var $i237: i16;
  var $i238: i32;
  var $i239: i1;
  var $i241: i32;
  var $i242: i1;
  var $i243: i32;
  var $i244: i1;
  var $i246: i32;
  var $i247: i32;
  var $i248: i16;
  var $i245: i16;
  var $i240: i16;
  var $i249: i32;
  var $i250: i32;
  var $i251: i16;
  var $i252: i32;
  var $i253: i32;
  var $i254: i32;
  var $i255: i16;
  var $i256: i32;
  var $i257: i32;
  var $i258: i16;
  var $i259: i32;
  var $i260: i32;
  var $i261: i32;
  var $i262: i16;
  var $i263: i32;
  var $i264: i32;
  var $i265: i32;
  var $i266: i16;
  var $i267: i32;
  var $i268: i1;
  var $i270: i32;
  var $i271: i1;
  var $i272: i32;
  var $i273: i1;
  var $i275: i32;
  var $i276: i32;
  var $i277: i16;
  var $i274: i16;
  var $i269: i16;
  var $i278: i32;
  var $i279: i32;
  var $i280: i16;
  var $i281: i32;
  var $i282: i32;
  var $i283: i32;
  var $i284: i16;
  var $i285: i32;
  var $i286: i32;
  var $i287: i16;
  var $i288: i32;
  var $i289: i32;
  var $i290: i32;
  var $i291: i16;
  var $i292: i32;
  var $i293: i32;
  var $i294: i32;
  var $i295: i16;
  var $i296: i32;
  var $i297: i1;
  var $i299: i32;
  var $i300: i1;
  var $i301: i32;
  var $i302: i1;
  var $i304: i32;
  var $i305: i32;
  var $i306: i16;
  var $i303: i16;
  var $i298: i16;
  var $i307: i32;
  var $i308: i32;
  var $i309: i16;
  var $i310: i32;
  var $i311: i32;
  var $i312: i32;
  var $i313: i16;
  var $i314: i32;
  var $i315: i32;
  var $i316: i16;
  var $i317: i32;
  var $i318: i32;
  var $i319: i32;
  var $i320: i16;
  var $i321: i32;
  var $i322: i32;
  var $i323: i32;
  var $i324: i16;
  var $i325: i32;
  var $i326: i1;
  var $i328: i32;
  var $i329: i1;
  var $i330: i32;
  var $i331: i1;
  var $i333: i32;
  var $i334: i32;
  var $i335: i16;
  var $i332: i16;
  var $i327: i16;
  var $i336: i32;
  var $i337: i32;
  var $i338: i16;
  var $i339: i32;
  var $i340: i32;
  var $i341: i32;
  var $i342: i16;
  var $i343: i32;
  var $i344: i32;
  var $i345: i16;
  var $i346: i32;
  var $i347: i32;
  var $i348: i32;
  var $i349: i16;
  var $i350: i32;
  var $i351: i32;
  var $i352: i32;
  var $i353: i16;
  var $i354: i32;
  var $i355: i1;
  var $i357: i32;
  var $i358: i1;
  var $i359: i32;
  var $i360: i1;
  var $i362: i32;
  var $i363: i32;
  var $i364: i16;
  var $i361: i16;
  var $i356: i16;
  var $i365: i32;
  var $i366: i32;
  var $i367: i16;
  var $i368: i32;
  var $i369: i32;
  var $i370: i32;
  var $i371: i16;
  var $i372: i32;
  var $i373: i32;
  var $i374: i16;
  var $i375: i32;
  var $i376: i32;
  var $i377: i32;
  var $i378: i16;
  var $i379: i32;
  var $i380: i32;
  var $i381: i32;
  var $i382: i16;
  var $i383: i32;
  var $i384: i1;
  var $i386: i32;
  var $i387: i1;
  var $i388: i32;
  var $i389: i1;
  var $i391: i32;
  var $i392: i32;
  var $i393: i16;
  var $i390: i16;
  var $i385: i16;
  var $i394: i32;
  var $i395: i32;
  var $i396: i16;
  var $i397: i32;
  var $i398: i32;
  var $i399: i32;
  var $i400: i16;
  var $i401: i32;
  var $i402: i32;
  var $i403: i16;
  var $i404: i32;
  var $i405: i32;
  var $i406: i32;
  var $i407: i16;
  var $i408: i32;
  var $i409: i32;
  var $i410: i32;
  var $i411: i16;
  var $i412: i32;
  var $i413: i1;
  var $i415: i32;
  var $i416: i1;
  var $i417: i32;
  var $i418: i1;
  var $i420: i32;
  var $i421: i32;
  var $i422: i16;
  var $i419: i16;
  var $i414: i16;
  var $i423: i32;
  var $i424: i32;
  var $i425: i16;
  var $i426: i32;
  var $i427: i32;
  var $i428: i32;
  var $i429: i16;
  var $i430: i32;
  var $i431: i32;
  var $i432: i16;
  var $i433: i32;
  var $i434: i32;
  var $i435: i32;
  var $i436: i16;
  var $i437: i32;
  var $i438: i32;
  var $i439: i32;
  var $i440: i16;
  var $i441: i32;
  var $i442: i1;
  var $i444: i32;
  var $i445: i1;
  var $i446: i32;
  var $i447: i1;
  var $i449: i32;
  var $i450: i32;
  var $i451: i16;
  var $i448: i16;
  var $i443: i16;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 8} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__SMACK_and16:arg:a"} boogie_si_record_i16($i0);
  call {:cexpr "__SMACK_and16:arg:b"} boogie_si_record_i16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 8} true;
  assume {:verifier.code 0} true;
  $i2 := $sext.i16.i32(0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 5} true;
  assume {:verifier.code 0} true;
  $i3 := $sext.i16.i32(0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i32($i3,$i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 772, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i32.i16($i4);
  call {:cexpr "c"} boogie_si_record_i16($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.i16.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $slt.i32($i6,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $i5;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $sext.i16.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $slt.i32($i9,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb4, $bb6;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 773, 7} true;
  assume {:verifier.code 0} true;
  assume !($i7 == 1);
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 778, 7} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i16.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 778, 9} true;
  assume {:verifier.code 0} true;
  $i18 := $srem.i32($i17,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 778, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.i32.i16($i18);
  call {:cexpr "a"} boogie_si_record_i16($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 779, 8} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.i16.i32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 779, 5} true;
  assume {:verifier.code 0} true;
  $i21 := $sext.i16.i32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 779, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $add.i32($i21,$i20);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 779, 5} true;
  assume {:verifier.code 0} true;
  $i23 := $trunc.i32.i16($i22);
  call {:cexpr "a"} boogie_si_record_i16($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 780, 7} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.i16.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 780, 9} true;
  assume {:verifier.code 0} true;
  $i25 := $srem.i32($i24,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 780, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.i32.i16($i25);
  call {:cexpr "b"} boogie_si_record_i16($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 781, 8} true;
  assume {:verifier.code 0} true;
  $i27 := $sext.i16.i32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 781, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $sext.i16.i32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 781, 5} true;
  assume {:verifier.code 0} true;
  $i29 := $add.i32($i28,$i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 781, 5} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.i32.i16($i29);
  call {:cexpr "b"} boogie_si_record_i16($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 783, 8} true;
  assume {:verifier.code 0} true;
  $i31 := $sext.i16.i32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 783, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $sext.i16.i32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 783, 5} true;
  assume {:verifier.code 0} true;
  $i33 := $add.i32($i32,$i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 783, 5} true;
  assume {:verifier.code 0} true;
  $i34 := $trunc.i32.i16($i33);
  call {:cexpr "c"} boogie_si_record_i16($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 7} true;
  assume {:verifier.code 0} true;
  $i35 := $sext.i16.i32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 9} true;
  assume {:verifier.code 0} true;
  $i36 := $slt.i32($i35,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 7} true;
  assume {:verifier.code 0} true;
  $i37 := $i34;
  assume {:branchcond $i36} true;
  goto $bb10, $bb11;
$bb4:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 15} true;
  assume {:verifier.code 0} true;
  assume ($i10 == 1);
  goto $bb5;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 775, 9} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i16.i32($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 775, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i14,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 775, 9} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.i32.i16($i15);
  call {:cexpr "c"} boogie_si_record_i16($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 776, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $i16;
  goto $bb9;
$bb6:
  assume !($i10 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 18} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i16.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 20} true;
  assume {:verifier.code 0} true;
  $i12 := $sgt.i32($i11,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 9} true;
  assume {:verifier.code 0} true;
  $i13 := $i5;
  assume {:branchcond $i12} true;
  goto $bb7, $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 9} true;
  assume {:verifier.code 0} true;
  assume ($i12 == 1);
  goto $bb5;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 774, 9} true;
  assume {:verifier.code 0} true;
  assume !($i12 == 1);
  goto $bb9;
$bb9:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 777, 3} true;
  assume {:verifier.code 0} true;
  $i8 := $i13;
  goto $bb3;
$bb10:
  assume ($i36 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 9} true;
  assume {:verifier.code 0} true;
  $i38 := $sext.i16.i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 11} true;
  assume {:verifier.code 0} true;
  $i39 := $slt.i32($i38,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb13, $bb15;
$bb11:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 784, 7} true;
  assume {:verifier.code 0} true;
  assume !($i36 == 1);
  goto $bb12;
$bb12:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 789, 7} true;
  assume {:verifier.code 0} true;
  $i46 := $sext.i16.i32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 789, 9} true;
  assume {:verifier.code 0} true;
  $i47 := $srem.i32($i46,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 789, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $trunc.i32.i16($i47);
  call {:cexpr "a"} boogie_si_record_i16($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 790, 8} true;
  assume {:verifier.code 0} true;
  $i49 := $sext.i16.i32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 790, 5} true;
  assume {:verifier.code 0} true;
  $i50 := $sext.i16.i32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 790, 5} true;
  assume {:verifier.code 0} true;
  $i51 := $add.i32($i50,$i49);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 790, 5} true;
  assume {:verifier.code 0} true;
  $i52 := $trunc.i32.i16($i51);
  call {:cexpr "a"} boogie_si_record_i16($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 791, 7} true;
  assume {:verifier.code 0} true;
  $i53 := $sext.i16.i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 791, 9} true;
  assume {:verifier.code 0} true;
  $i54 := $srem.i32($i53,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 791, 7} true;
  assume {:verifier.code 0} true;
  $i55 := $trunc.i32.i16($i54);
  call {:cexpr "b"} boogie_si_record_i16($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 792, 8} true;
  assume {:verifier.code 0} true;
  $i56 := $sext.i16.i32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 792, 5} true;
  assume {:verifier.code 0} true;
  $i57 := $sext.i16.i32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 792, 5} true;
  assume {:verifier.code 0} true;
  $i58 := $add.i32($i57,$i56);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 792, 5} true;
  assume {:verifier.code 0} true;
  $i59 := $trunc.i32.i16($i58);
  call {:cexpr "b"} boogie_si_record_i16($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 794, 8} true;
  assume {:verifier.code 0} true;
  $i60 := $sext.i16.i32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 794, 5} true;
  assume {:verifier.code 0} true;
  $i61 := $sext.i16.i32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 794, 5} true;
  assume {:verifier.code 0} true;
  $i62 := $add.i32($i61,$i60);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 794, 5} true;
  assume {:verifier.code 0} true;
  $i63 := $trunc.i32.i16($i62);
  call {:cexpr "c"} boogie_si_record_i16($i63);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 795, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $sext.i16.i32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 795, 9} true;
  assume {:verifier.code 0} true;
  $i65 := $slt.i32($i64,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 795, 7} true;
  assume {:verifier.code 0} true;
  $i66 := $i63;
  assume {:branchcond $i65} true;
  goto $bb19, $bb20;
$bb13:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 15} true;
  assume {:verifier.code 0} true;
  assume ($i39 == 1);
  goto $bb14;
$bb14:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 786, 9} true;
  assume {:verifier.code 0} true;
  $i43 := $sext.i16.i32($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 786, 9} true;
  assume {:verifier.code 0} true;
  $i44 := $add.i32($i43,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 786, 9} true;
  assume {:verifier.code 0} true;
  $i45 := $trunc.i32.i16($i44);
  call {:cexpr "c"} boogie_si_record_i16($i45);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 787, 5} true;
  assume {:verifier.code 0} true;
  $i42 := $i45;
  goto $bb18;
$bb15:
  assume !($i39 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 18} true;
  assume {:verifier.code 0} true;
  $i40 := $sext.i16.i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 20} true;
  assume {:verifier.code 0} true;
  $i41 := $sgt.i32($i40,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 9} true;
  assume {:verifier.code 0} true;
  $i42 := $i34;
  assume {:branchcond $i41} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 9} true;
  assume {:verifier.code 0} true;
  assume ($i41 == 1);
  goto $bb14;
$bb17:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 785, 9} true;
  assume {:verifier.code 0} true;
  assume !($i41 == 1);
  goto $bb18;
$bb18:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 788, 3} true;
  assume {:verifier.code 0} true;
  $i37 := $i42;
  goto $bb12;
$bb19:
  assume ($i65 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 9} true;
  assume {:verifier.code 0} true;
  $i67 := $sext.i16.i32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 11} true;
  assume {:verifier.code 0} true;
  $i68 := $slt.i32($i67,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb22, $bb24;
$bb20:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 795, 7} true;
  assume {:verifier.code 0} true;
  assume !($i65 == 1);
  goto $bb21;
$bb21:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 800, 7} true;
  assume {:verifier.code 0} true;
  $i75 := $sext.i16.i32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 800, 9} true;
  assume {:verifier.code 0} true;
  $i76 := $srem.i32($i75,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 800, 7} true;
  assume {:verifier.code 0} true;
  $i77 := $trunc.i32.i16($i76);
  call {:cexpr "a"} boogie_si_record_i16($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 801, 8} true;
  assume {:verifier.code 0} true;
  $i78 := $sext.i16.i32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 801, 5} true;
  assume {:verifier.code 0} true;
  $i79 := $sext.i16.i32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 801, 5} true;
  assume {:verifier.code 0} true;
  $i80 := $add.i32($i79,$i78);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 801, 5} true;
  assume {:verifier.code 0} true;
  $i81 := $trunc.i32.i16($i80);
  call {:cexpr "a"} boogie_si_record_i16($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 802, 7} true;
  assume {:verifier.code 0} true;
  $i82 := $sext.i16.i32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 802, 9} true;
  assume {:verifier.code 0} true;
  $i83 := $srem.i32($i82,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 802, 7} true;
  assume {:verifier.code 0} true;
  $i84 := $trunc.i32.i16($i83);
  call {:cexpr "b"} boogie_si_record_i16($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 803, 8} true;
  assume {:verifier.code 0} true;
  $i85 := $sext.i16.i32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 803, 5} true;
  assume {:verifier.code 0} true;
  $i86 := $sext.i16.i32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 803, 5} true;
  assume {:verifier.code 0} true;
  $i87 := $add.i32($i86,$i85);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 803, 5} true;
  assume {:verifier.code 0} true;
  $i88 := $trunc.i32.i16($i87);
  call {:cexpr "b"} boogie_si_record_i16($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 8} true;
  assume {:verifier.code 0} true;
  $i89 := $sext.i16.i32($i66);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 5} true;
  assume {:verifier.code 0} true;
  $i90 := $sext.i16.i32($i66);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 5} true;
  assume {:verifier.code 0} true;
  $i91 := $add.i32($i90,$i89);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 805, 5} true;
  assume {:verifier.code 0} true;
  $i92 := $trunc.i32.i16($i91);
  call {:cexpr "c"} boogie_si_record_i16($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 7} true;
  assume {:verifier.code 0} true;
  $i93 := $sext.i16.i32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 9} true;
  assume {:verifier.code 0} true;
  $i94 := $slt.i32($i93,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 7} true;
  assume {:verifier.code 0} true;
  $i95 := $i92;
  assume {:branchcond $i94} true;
  goto $bb28, $bb29;
$bb22:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 15} true;
  assume {:verifier.code 0} true;
  assume ($i68 == 1);
  goto $bb23;
$bb23:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 797, 9} true;
  assume {:verifier.code 0} true;
  $i72 := $sext.i16.i32($i63);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 797, 9} true;
  assume {:verifier.code 0} true;
  $i73 := $add.i32($i72,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 797, 9} true;
  assume {:verifier.code 0} true;
  $i74 := $trunc.i32.i16($i73);
  call {:cexpr "c"} boogie_si_record_i16($i74);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 798, 5} true;
  assume {:verifier.code 0} true;
  $i71 := $i74;
  goto $bb27;
$bb24:
  assume !($i68 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 18} true;
  assume {:verifier.code 0} true;
  $i69 := $sext.i16.i32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 20} true;
  assume {:verifier.code 0} true;
  $i70 := $sgt.i32($i69,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 9} true;
  assume {:verifier.code 0} true;
  $i71 := $i63;
  assume {:branchcond $i70} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 9} true;
  assume {:verifier.code 0} true;
  assume ($i70 == 1);
  goto $bb23;
$bb26:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 796, 9} true;
  assume {:verifier.code 0} true;
  assume !($i70 == 1);
  goto $bb27;
$bb27:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 799, 3} true;
  assume {:verifier.code 0} true;
  $i66 := $i71;
  goto $bb21;
$bb28:
  assume ($i94 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 9} true;
  assume {:verifier.code 0} true;
  $i96 := $sext.i16.i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 11} true;
  assume {:verifier.code 0} true;
  $i97 := $slt.i32($i96,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i97} true;
  goto $bb31, $bb33;
$bb29:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 806, 7} true;
  assume {:verifier.code 0} true;
  assume !($i94 == 1);
  goto $bb30;
$bb30:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 811, 7} true;
  assume {:verifier.code 0} true;
  $i104 := $sext.i16.i32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 811, 9} true;
  assume {:verifier.code 0} true;
  $i105 := $srem.i32($i104,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 811, 7} true;
  assume {:verifier.code 0} true;
  $i106 := $trunc.i32.i16($i105);
  call {:cexpr "a"} boogie_si_record_i16($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 812, 8} true;
  assume {:verifier.code 0} true;
  $i107 := $sext.i16.i32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 812, 5} true;
  assume {:verifier.code 0} true;
  $i108 := $sext.i16.i32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 812, 5} true;
  assume {:verifier.code 0} true;
  $i109 := $add.i32($i108,$i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 812, 5} true;
  assume {:verifier.code 0} true;
  $i110 := $trunc.i32.i16($i109);
  call {:cexpr "a"} boogie_si_record_i16($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 813, 7} true;
  assume {:verifier.code 0} true;
  $i111 := $sext.i16.i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 813, 9} true;
  assume {:verifier.code 0} true;
  $i112 := $srem.i32($i111,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 813, 7} true;
  assume {:verifier.code 0} true;
  $i113 := $trunc.i32.i16($i112);
  call {:cexpr "b"} boogie_si_record_i16($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 814, 8} true;
  assume {:verifier.code 0} true;
  $i114 := $sext.i16.i32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 814, 5} true;
  assume {:verifier.code 0} true;
  $i115 := $sext.i16.i32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 814, 5} true;
  assume {:verifier.code 0} true;
  $i116 := $add.i32($i115,$i114);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 814, 5} true;
  assume {:verifier.code 0} true;
  $i117 := $trunc.i32.i16($i116);
  call {:cexpr "b"} boogie_si_record_i16($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 816, 8} true;
  assume {:verifier.code 0} true;
  $i118 := $sext.i16.i32($i95);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 816, 5} true;
  assume {:verifier.code 0} true;
  $i119 := $sext.i16.i32($i95);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 816, 5} true;
  assume {:verifier.code 0} true;
  $i120 := $add.i32($i119,$i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 816, 5} true;
  assume {:verifier.code 0} true;
  $i121 := $trunc.i32.i16($i120);
  call {:cexpr "c"} boogie_si_record_i16($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 817, 7} true;
  assume {:verifier.code 0} true;
  $i122 := $sext.i16.i32($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 817, 9} true;
  assume {:verifier.code 0} true;
  $i123 := $slt.i32($i122,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 817, 7} true;
  assume {:verifier.code 0} true;
  $i124 := $i121;
  assume {:branchcond $i123} true;
  goto $bb37, $bb38;
$bb31:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 15} true;
  assume {:verifier.code 0} true;
  assume ($i97 == 1);
  goto $bb32;
$bb32:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 808, 9} true;
  assume {:verifier.code 0} true;
  $i101 := $sext.i16.i32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 808, 9} true;
  assume {:verifier.code 0} true;
  $i102 := $add.i32($i101,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 808, 9} true;
  assume {:verifier.code 0} true;
  $i103 := $trunc.i32.i16($i102);
  call {:cexpr "c"} boogie_si_record_i16($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 809, 5} true;
  assume {:verifier.code 0} true;
  $i100 := $i103;
  goto $bb36;
$bb33:
  assume !($i97 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 18} true;
  assume {:verifier.code 0} true;
  $i98 := $sext.i16.i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 20} true;
  assume {:verifier.code 0} true;
  $i99 := $sgt.i32($i98,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 9} true;
  assume {:verifier.code 0} true;
  $i100 := $i92;
  assume {:branchcond $i99} true;
  goto $bb34, $bb35;
$bb34:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 9} true;
  assume {:verifier.code 0} true;
  assume ($i99 == 1);
  goto $bb32;
$bb35:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 807, 9} true;
  assume {:verifier.code 0} true;
  assume !($i99 == 1);
  goto $bb36;
$bb36:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 810, 3} true;
  assume {:verifier.code 0} true;
  $i95 := $i100;
  goto $bb30;
$bb37:
  assume ($i123 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 9} true;
  assume {:verifier.code 0} true;
  $i125 := $sext.i16.i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 11} true;
  assume {:verifier.code 0} true;
  $i126 := $slt.i32($i125,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i126} true;
  goto $bb40, $bb42;
$bb38:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 817, 7} true;
  assume {:verifier.code 0} true;
  assume !($i123 == 1);
  goto $bb39;
$bb39:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 822, 7} true;
  assume {:verifier.code 0} true;
  $i133 := $sext.i16.i32($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 822, 9} true;
  assume {:verifier.code 0} true;
  $i134 := $srem.i32($i133,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 822, 7} true;
  assume {:verifier.code 0} true;
  $i135 := $trunc.i32.i16($i134);
  call {:cexpr "a"} boogie_si_record_i16($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 823, 8} true;
  assume {:verifier.code 0} true;
  $i136 := $sext.i16.i32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 823, 5} true;
  assume {:verifier.code 0} true;
  $i137 := $sext.i16.i32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 823, 5} true;
  assume {:verifier.code 0} true;
  $i138 := $add.i32($i137,$i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 823, 5} true;
  assume {:verifier.code 0} true;
  $i139 := $trunc.i32.i16($i138);
  call {:cexpr "a"} boogie_si_record_i16($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 824, 7} true;
  assume {:verifier.code 0} true;
  $i140 := $sext.i16.i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 824, 9} true;
  assume {:verifier.code 0} true;
  $i141 := $srem.i32($i140,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 824, 7} true;
  assume {:verifier.code 0} true;
  $i142 := $trunc.i32.i16($i141);
  call {:cexpr "b"} boogie_si_record_i16($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 825, 8} true;
  assume {:verifier.code 0} true;
  $i143 := $sext.i16.i32($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 825, 5} true;
  assume {:verifier.code 0} true;
  $i144 := $sext.i16.i32($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 825, 5} true;
  assume {:verifier.code 0} true;
  $i145 := $add.i32($i144,$i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 825, 5} true;
  assume {:verifier.code 0} true;
  $i146 := $trunc.i32.i16($i145);
  call {:cexpr "b"} boogie_si_record_i16($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 8} true;
  assume {:verifier.code 0} true;
  $i147 := $sext.i16.i32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 5} true;
  assume {:verifier.code 0} true;
  $i148 := $sext.i16.i32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 5} true;
  assume {:verifier.code 0} true;
  $i149 := $add.i32($i148,$i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 827, 5} true;
  assume {:verifier.code 0} true;
  $i150 := $trunc.i32.i16($i149);
  call {:cexpr "c"} boogie_si_record_i16($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 7} true;
  assume {:verifier.code 0} true;
  $i151 := $sext.i16.i32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 9} true;
  assume {:verifier.code 0} true;
  $i152 := $slt.i32($i151,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 7} true;
  assume {:verifier.code 0} true;
  $i153 := $i150;
  assume {:branchcond $i152} true;
  goto $bb46, $bb47;
$bb40:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 15} true;
  assume {:verifier.code 0} true;
  assume ($i126 == 1);
  goto $bb41;
$bb41:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 819, 9} true;
  assume {:verifier.code 0} true;
  $i130 := $sext.i16.i32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 819, 9} true;
  assume {:verifier.code 0} true;
  $i131 := $add.i32($i130,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 819, 9} true;
  assume {:verifier.code 0} true;
  $i132 := $trunc.i32.i16($i131);
  call {:cexpr "c"} boogie_si_record_i16($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 820, 5} true;
  assume {:verifier.code 0} true;
  $i129 := $i132;
  goto $bb45;
$bb42:
  assume !($i126 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 18} true;
  assume {:verifier.code 0} true;
  $i127 := $sext.i16.i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 20} true;
  assume {:verifier.code 0} true;
  $i128 := $sgt.i32($i127,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 9} true;
  assume {:verifier.code 0} true;
  $i129 := $i121;
  assume {:branchcond $i128} true;
  goto $bb43, $bb44;
$bb43:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 9} true;
  assume {:verifier.code 0} true;
  assume ($i128 == 1);
  goto $bb41;
$bb44:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 818, 9} true;
  assume {:verifier.code 0} true;
  assume !($i128 == 1);
  goto $bb45;
$bb45:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 821, 3} true;
  assume {:verifier.code 0} true;
  $i124 := $i129;
  goto $bb39;
$bb46:
  assume ($i152 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 9} true;
  assume {:verifier.code 0} true;
  $i154 := $sext.i16.i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 11} true;
  assume {:verifier.code 0} true;
  $i155 := $slt.i32($i154,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i155} true;
  goto $bb49, $bb51;
$bb47:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 828, 7} true;
  assume {:verifier.code 0} true;
  assume !($i152 == 1);
  goto $bb48;
$bb48:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 833, 7} true;
  assume {:verifier.code 0} true;
  $i162 := $sext.i16.i32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 833, 9} true;
  assume {:verifier.code 0} true;
  $i163 := $srem.i32($i162,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 833, 7} true;
  assume {:verifier.code 0} true;
  $i164 := $trunc.i32.i16($i163);
  call {:cexpr "a"} boogie_si_record_i16($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 834, 8} true;
  assume {:verifier.code 0} true;
  $i165 := $sext.i16.i32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 834, 5} true;
  assume {:verifier.code 0} true;
  $i166 := $sext.i16.i32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 834, 5} true;
  assume {:verifier.code 0} true;
  $i167 := $add.i32($i166,$i165);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 834, 5} true;
  assume {:verifier.code 0} true;
  $i168 := $trunc.i32.i16($i167);
  call {:cexpr "a"} boogie_si_record_i16($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 835, 7} true;
  assume {:verifier.code 0} true;
  $i169 := $sext.i16.i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 835, 9} true;
  assume {:verifier.code 0} true;
  $i170 := $srem.i32($i169,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 835, 7} true;
  assume {:verifier.code 0} true;
  $i171 := $trunc.i32.i16($i170);
  call {:cexpr "b"} boogie_si_record_i16($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 836, 8} true;
  assume {:verifier.code 0} true;
  $i172 := $sext.i16.i32($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 836, 5} true;
  assume {:verifier.code 0} true;
  $i173 := $sext.i16.i32($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 836, 5} true;
  assume {:verifier.code 0} true;
  $i174 := $add.i32($i173,$i172);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 836, 5} true;
  assume {:verifier.code 0} true;
  $i175 := $trunc.i32.i16($i174);
  call {:cexpr "b"} boogie_si_record_i16($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 838, 8} true;
  assume {:verifier.code 0} true;
  $i176 := $sext.i16.i32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 838, 5} true;
  assume {:verifier.code 0} true;
  $i177 := $sext.i16.i32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 838, 5} true;
  assume {:verifier.code 0} true;
  $i178 := $add.i32($i177,$i176);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 838, 5} true;
  assume {:verifier.code 0} true;
  $i179 := $trunc.i32.i16($i178);
  call {:cexpr "c"} boogie_si_record_i16($i179);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 839, 7} true;
  assume {:verifier.code 0} true;
  $i180 := $sext.i16.i32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 839, 9} true;
  assume {:verifier.code 0} true;
  $i181 := $slt.i32($i180,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 839, 7} true;
  assume {:verifier.code 0} true;
  $i182 := $i179;
  assume {:branchcond $i181} true;
  goto $bb55, $bb56;
$bb49:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 15} true;
  assume {:verifier.code 0} true;
  assume ($i155 == 1);
  goto $bb50;
$bb50:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 830, 9} true;
  assume {:verifier.code 0} true;
  $i159 := $sext.i16.i32($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 830, 9} true;
  assume {:verifier.code 0} true;
  $i160 := $add.i32($i159,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 830, 9} true;
  assume {:verifier.code 0} true;
  $i161 := $trunc.i32.i16($i160);
  call {:cexpr "c"} boogie_si_record_i16($i161);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 831, 5} true;
  assume {:verifier.code 0} true;
  $i158 := $i161;
  goto $bb54;
$bb51:
  assume !($i155 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 18} true;
  assume {:verifier.code 0} true;
  $i156 := $sext.i16.i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 20} true;
  assume {:verifier.code 0} true;
  $i157 := $sgt.i32($i156,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 9} true;
  assume {:verifier.code 0} true;
  $i158 := $i150;
  assume {:branchcond $i157} true;
  goto $bb52, $bb53;
$bb52:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 9} true;
  assume {:verifier.code 0} true;
  assume ($i157 == 1);
  goto $bb50;
$bb53:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 829, 9} true;
  assume {:verifier.code 0} true;
  assume !($i157 == 1);
  goto $bb54;
$bb54:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 832, 3} true;
  assume {:verifier.code 0} true;
  $i153 := $i158;
  goto $bb48;
$bb55:
  assume ($i181 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $sext.i16.i32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 11} true;
  assume {:verifier.code 0} true;
  $i184 := $slt.i32($i183,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i184} true;
  goto $bb58, $bb60;
$bb56:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 839, 7} true;
  assume {:verifier.code 0} true;
  assume !($i181 == 1);
  goto $bb57;
$bb57:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 844, 7} true;
  assume {:verifier.code 0} true;
  $i191 := $sext.i16.i32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 844, 9} true;
  assume {:verifier.code 0} true;
  $i192 := $srem.i32($i191,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 844, 7} true;
  assume {:verifier.code 0} true;
  $i193 := $trunc.i32.i16($i192);
  call {:cexpr "a"} boogie_si_record_i16($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 845, 8} true;
  assume {:verifier.code 0} true;
  $i194 := $sext.i16.i32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 845, 5} true;
  assume {:verifier.code 0} true;
  $i195 := $sext.i16.i32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 845, 5} true;
  assume {:verifier.code 0} true;
  $i196 := $add.i32($i195,$i194);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 845, 5} true;
  assume {:verifier.code 0} true;
  $i197 := $trunc.i32.i16($i196);
  call {:cexpr "a"} boogie_si_record_i16($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 846, 7} true;
  assume {:verifier.code 0} true;
  $i198 := $sext.i16.i32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 846, 9} true;
  assume {:verifier.code 0} true;
  $i199 := $srem.i32($i198,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 846, 7} true;
  assume {:verifier.code 0} true;
  $i200 := $trunc.i32.i16($i199);
  call {:cexpr "b"} boogie_si_record_i16($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 847, 8} true;
  assume {:verifier.code 0} true;
  $i201 := $sext.i16.i32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 847, 5} true;
  assume {:verifier.code 0} true;
  $i202 := $sext.i16.i32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 847, 5} true;
  assume {:verifier.code 0} true;
  $i203 := $add.i32($i202,$i201);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 847, 5} true;
  assume {:verifier.code 0} true;
  $i204 := $trunc.i32.i16($i203);
  call {:cexpr "b"} boogie_si_record_i16($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 8} true;
  assume {:verifier.code 0} true;
  $i205 := $sext.i16.i32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 5} true;
  assume {:verifier.code 0} true;
  $i206 := $sext.i16.i32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 5} true;
  assume {:verifier.code 0} true;
  $i207 := $add.i32($i206,$i205);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 849, 5} true;
  assume {:verifier.code 0} true;
  $i208 := $trunc.i32.i16($i207);
  call {:cexpr "c"} boogie_si_record_i16($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 7} true;
  assume {:verifier.code 0} true;
  $i209 := $sext.i16.i32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 9} true;
  assume {:verifier.code 0} true;
  $i210 := $slt.i32($i209,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 7} true;
  assume {:verifier.code 0} true;
  $i211 := $i208;
  assume {:branchcond $i210} true;
  goto $bb64, $bb65;
$bb58:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 15} true;
  assume {:verifier.code 0} true;
  assume ($i184 == 1);
  goto $bb59;
$bb59:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 841, 9} true;
  assume {:verifier.code 0} true;
  $i188 := $sext.i16.i32($i179);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 841, 9} true;
  assume {:verifier.code 0} true;
  $i189 := $add.i32($i188,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 841, 9} true;
  assume {:verifier.code 0} true;
  $i190 := $trunc.i32.i16($i189);
  call {:cexpr "c"} boogie_si_record_i16($i190);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 842, 5} true;
  assume {:verifier.code 0} true;
  $i187 := $i190;
  goto $bb63;
$bb60:
  assume !($i184 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 18} true;
  assume {:verifier.code 0} true;
  $i185 := $sext.i16.i32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 20} true;
  assume {:verifier.code 0} true;
  $i186 := $sgt.i32($i185,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 9} true;
  assume {:verifier.code 0} true;
  $i187 := $i179;
  assume {:branchcond $i186} true;
  goto $bb61, $bb62;
$bb61:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 9} true;
  assume {:verifier.code 0} true;
  assume ($i186 == 1);
  goto $bb59;
$bb62:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 840, 9} true;
  assume {:verifier.code 0} true;
  assume !($i186 == 1);
  goto $bb63;
$bb63:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 843, 3} true;
  assume {:verifier.code 0} true;
  $i182 := $i187;
  goto $bb57;
$bb64:
  assume ($i210 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 9} true;
  assume {:verifier.code 0} true;
  $i212 := $sext.i16.i32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 11} true;
  assume {:verifier.code 0} true;
  $i213 := $slt.i32($i212,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i213} true;
  goto $bb67, $bb69;
$bb65:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 850, 7} true;
  assume {:verifier.code 0} true;
  assume !($i210 == 1);
  goto $bb66;
$bb66:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 855, 7} true;
  assume {:verifier.code 0} true;
  $i220 := $sext.i16.i32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 855, 9} true;
  assume {:verifier.code 0} true;
  $i221 := $srem.i32($i220,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 855, 7} true;
  assume {:verifier.code 0} true;
  $i222 := $trunc.i32.i16($i221);
  call {:cexpr "a"} boogie_si_record_i16($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 856, 8} true;
  assume {:verifier.code 0} true;
  $i223 := $sext.i16.i32($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 856, 5} true;
  assume {:verifier.code 0} true;
  $i224 := $sext.i16.i32($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 856, 5} true;
  assume {:verifier.code 0} true;
  $i225 := $add.i32($i224,$i223);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 856, 5} true;
  assume {:verifier.code 0} true;
  $i226 := $trunc.i32.i16($i225);
  call {:cexpr "a"} boogie_si_record_i16($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 857, 7} true;
  assume {:verifier.code 0} true;
  $i227 := $sext.i16.i32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 857, 9} true;
  assume {:verifier.code 0} true;
  $i228 := $srem.i32($i227,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 857, 7} true;
  assume {:verifier.code 0} true;
  $i229 := $trunc.i32.i16($i228);
  call {:cexpr "b"} boogie_si_record_i16($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 858, 8} true;
  assume {:verifier.code 0} true;
  $i230 := $sext.i16.i32($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 858, 5} true;
  assume {:verifier.code 0} true;
  $i231 := $sext.i16.i32($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 858, 5} true;
  assume {:verifier.code 0} true;
  $i232 := $add.i32($i231,$i230);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 858, 5} true;
  assume {:verifier.code 0} true;
  $i233 := $trunc.i32.i16($i232);
  call {:cexpr "b"} boogie_si_record_i16($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 860, 8} true;
  assume {:verifier.code 0} true;
  $i234 := $sext.i16.i32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 860, 5} true;
  assume {:verifier.code 0} true;
  $i235 := $sext.i16.i32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 860, 5} true;
  assume {:verifier.code 0} true;
  $i236 := $add.i32($i235,$i234);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 860, 5} true;
  assume {:verifier.code 0} true;
  $i237 := $trunc.i32.i16($i236);
  call {:cexpr "c"} boogie_si_record_i16($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 861, 7} true;
  assume {:verifier.code 0} true;
  $i238 := $sext.i16.i32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 861, 9} true;
  assume {:verifier.code 0} true;
  $i239 := $slt.i32($i238,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 861, 7} true;
  assume {:verifier.code 0} true;
  $i240 := $i237;
  assume {:branchcond $i239} true;
  goto $bb73, $bb74;
$bb67:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 15} true;
  assume {:verifier.code 0} true;
  assume ($i213 == 1);
  goto $bb68;
$bb68:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 852, 9} true;
  assume {:verifier.code 0} true;
  $i217 := $sext.i16.i32($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 852, 9} true;
  assume {:verifier.code 0} true;
  $i218 := $add.i32($i217,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 852, 9} true;
  assume {:verifier.code 0} true;
  $i219 := $trunc.i32.i16($i218);
  call {:cexpr "c"} boogie_si_record_i16($i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 853, 5} true;
  assume {:verifier.code 0} true;
  $i216 := $i219;
  goto $bb72;
$bb69:
  assume !($i213 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 18} true;
  assume {:verifier.code 0} true;
  $i214 := $sext.i16.i32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 20} true;
  assume {:verifier.code 0} true;
  $i215 := $sgt.i32($i214,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 9} true;
  assume {:verifier.code 0} true;
  $i216 := $i208;
  assume {:branchcond $i215} true;
  goto $bb70, $bb71;
$bb70:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 9} true;
  assume {:verifier.code 0} true;
  assume ($i215 == 1);
  goto $bb68;
$bb71:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 851, 9} true;
  assume {:verifier.code 0} true;
  assume !($i215 == 1);
  goto $bb72;
$bb72:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 854, 3} true;
  assume {:verifier.code 0} true;
  $i211 := $i216;
  goto $bb66;
$bb73:
  assume ($i239 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 9} true;
  assume {:verifier.code 0} true;
  $i241 := $sext.i16.i32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 11} true;
  assume {:verifier.code 0} true;
  $i242 := $slt.i32($i241,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i242} true;
  goto $bb76, $bb78;
$bb74:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 861, 7} true;
  assume {:verifier.code 0} true;
  assume !($i239 == 1);
  goto $bb75;
$bb75:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 866, 7} true;
  assume {:verifier.code 0} true;
  $i249 := $sext.i16.i32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 866, 9} true;
  assume {:verifier.code 0} true;
  $i250 := $srem.i32($i249,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 866, 7} true;
  assume {:verifier.code 0} true;
  $i251 := $trunc.i32.i16($i250);
  call {:cexpr "a"} boogie_si_record_i16($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 867, 8} true;
  assume {:verifier.code 0} true;
  $i252 := $sext.i16.i32($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 867, 5} true;
  assume {:verifier.code 0} true;
  $i253 := $sext.i16.i32($i251);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 867, 5} true;
  assume {:verifier.code 0} true;
  $i254 := $add.i32($i253,$i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 867, 5} true;
  assume {:verifier.code 0} true;
  $i255 := $trunc.i32.i16($i254);
  call {:cexpr "a"} boogie_si_record_i16($i255);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 868, 7} true;
  assume {:verifier.code 0} true;
  $i256 := $sext.i16.i32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 868, 9} true;
  assume {:verifier.code 0} true;
  $i257 := $srem.i32($i256,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 868, 7} true;
  assume {:verifier.code 0} true;
  $i258 := $trunc.i32.i16($i257);
  call {:cexpr "b"} boogie_si_record_i16($i258);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 869, 8} true;
  assume {:verifier.code 0} true;
  $i259 := $sext.i16.i32($i258);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 869, 5} true;
  assume {:verifier.code 0} true;
  $i260 := $sext.i16.i32($i258);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 869, 5} true;
  assume {:verifier.code 0} true;
  $i261 := $add.i32($i260,$i259);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 869, 5} true;
  assume {:verifier.code 0} true;
  $i262 := $trunc.i32.i16($i261);
  call {:cexpr "b"} boogie_si_record_i16($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 8} true;
  assume {:verifier.code 0} true;
  $i263 := $sext.i16.i32($i240);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 5} true;
  assume {:verifier.code 0} true;
  $i264 := $sext.i16.i32($i240);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 5} true;
  assume {:verifier.code 0} true;
  $i265 := $add.i32($i264,$i263);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 871, 5} true;
  assume {:verifier.code 0} true;
  $i266 := $trunc.i32.i16($i265);
  call {:cexpr "c"} boogie_si_record_i16($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 7} true;
  assume {:verifier.code 0} true;
  $i267 := $sext.i16.i32($i255);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 9} true;
  assume {:verifier.code 0} true;
  $i268 := $slt.i32($i267,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 7} true;
  assume {:verifier.code 0} true;
  $i269 := $i266;
  assume {:branchcond $i268} true;
  goto $bb82, $bb83;
$bb76:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 15} true;
  assume {:verifier.code 0} true;
  assume ($i242 == 1);
  goto $bb77;
$bb77:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 863, 9} true;
  assume {:verifier.code 0} true;
  $i246 := $sext.i16.i32($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 863, 9} true;
  assume {:verifier.code 0} true;
  $i247 := $add.i32($i246,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 863, 9} true;
  assume {:verifier.code 0} true;
  $i248 := $trunc.i32.i16($i247);
  call {:cexpr "c"} boogie_si_record_i16($i248);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 864, 5} true;
  assume {:verifier.code 0} true;
  $i245 := $i248;
  goto $bb81;
$bb78:
  assume !($i242 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 18} true;
  assume {:verifier.code 0} true;
  $i243 := $sext.i16.i32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 20} true;
  assume {:verifier.code 0} true;
  $i244 := $sgt.i32($i243,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 9} true;
  assume {:verifier.code 0} true;
  $i245 := $i237;
  assume {:branchcond $i244} true;
  goto $bb79, $bb80;
$bb79:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 9} true;
  assume {:verifier.code 0} true;
  assume ($i244 == 1);
  goto $bb77;
$bb80:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 862, 9} true;
  assume {:verifier.code 0} true;
  assume !($i244 == 1);
  goto $bb81;
$bb81:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 865, 3} true;
  assume {:verifier.code 0} true;
  $i240 := $i245;
  goto $bb75;
$bb82:
  assume ($i268 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 9} true;
  assume {:verifier.code 0} true;
  $i270 := $sext.i16.i32($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 11} true;
  assume {:verifier.code 0} true;
  $i271 := $slt.i32($i270,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i271} true;
  goto $bb85, $bb87;
$bb83:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 872, 7} true;
  assume {:verifier.code 0} true;
  assume !($i268 == 1);
  goto $bb84;
$bb84:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 877, 7} true;
  assume {:verifier.code 0} true;
  $i278 := $sext.i16.i32($i255);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 877, 9} true;
  assume {:verifier.code 0} true;
  $i279 := $srem.i32($i278,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 877, 7} true;
  assume {:verifier.code 0} true;
  $i280 := $trunc.i32.i16($i279);
  call {:cexpr "a"} boogie_si_record_i16($i280);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 878, 8} true;
  assume {:verifier.code 0} true;
  $i281 := $sext.i16.i32($i280);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 878, 5} true;
  assume {:verifier.code 0} true;
  $i282 := $sext.i16.i32($i280);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 878, 5} true;
  assume {:verifier.code 0} true;
  $i283 := $add.i32($i282,$i281);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 878, 5} true;
  assume {:verifier.code 0} true;
  $i284 := $trunc.i32.i16($i283);
  call {:cexpr "a"} boogie_si_record_i16($i284);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 879, 7} true;
  assume {:verifier.code 0} true;
  $i285 := $sext.i16.i32($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 879, 9} true;
  assume {:verifier.code 0} true;
  $i286 := $srem.i32($i285,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 879, 7} true;
  assume {:verifier.code 0} true;
  $i287 := $trunc.i32.i16($i286);
  call {:cexpr "b"} boogie_si_record_i16($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 880, 8} true;
  assume {:verifier.code 0} true;
  $i288 := $sext.i16.i32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 880, 5} true;
  assume {:verifier.code 0} true;
  $i289 := $sext.i16.i32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 880, 5} true;
  assume {:verifier.code 0} true;
  $i290 := $add.i32($i289,$i288);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 880, 5} true;
  assume {:verifier.code 0} true;
  $i291 := $trunc.i32.i16($i290);
  call {:cexpr "b"} boogie_si_record_i16($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 882, 8} true;
  assume {:verifier.code 0} true;
  $i292 := $sext.i16.i32($i269);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 882, 5} true;
  assume {:verifier.code 0} true;
  $i293 := $sext.i16.i32($i269);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 882, 5} true;
  assume {:verifier.code 0} true;
  $i294 := $add.i32($i293,$i292);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 882, 5} true;
  assume {:verifier.code 0} true;
  $i295 := $trunc.i32.i16($i294);
  call {:cexpr "c"} boogie_si_record_i16($i295);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 883, 7} true;
  assume {:verifier.code 0} true;
  $i296 := $sext.i16.i32($i284);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 883, 9} true;
  assume {:verifier.code 0} true;
  $i297 := $slt.i32($i296,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 883, 7} true;
  assume {:verifier.code 0} true;
  $i298 := $i295;
  assume {:branchcond $i297} true;
  goto $bb91, $bb92;
$bb85:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 15} true;
  assume {:verifier.code 0} true;
  assume ($i271 == 1);
  goto $bb86;
$bb86:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 874, 9} true;
  assume {:verifier.code 0} true;
  $i275 := $sext.i16.i32($i266);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 874, 9} true;
  assume {:verifier.code 0} true;
  $i276 := $add.i32($i275,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 874, 9} true;
  assume {:verifier.code 0} true;
  $i277 := $trunc.i32.i16($i276);
  call {:cexpr "c"} boogie_si_record_i16($i277);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 875, 5} true;
  assume {:verifier.code 0} true;
  $i274 := $i277;
  goto $bb90;
$bb87:
  assume !($i271 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 18} true;
  assume {:verifier.code 0} true;
  $i272 := $sext.i16.i32($i262);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 20} true;
  assume {:verifier.code 0} true;
  $i273 := $sgt.i32($i272,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 9} true;
  assume {:verifier.code 0} true;
  $i274 := $i266;
  assume {:branchcond $i273} true;
  goto $bb88, $bb89;
$bb88:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 9} true;
  assume {:verifier.code 0} true;
  assume ($i273 == 1);
  goto $bb86;
$bb89:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 873, 9} true;
  assume {:verifier.code 0} true;
  assume !($i273 == 1);
  goto $bb90;
$bb90:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 876, 3} true;
  assume {:verifier.code 0} true;
  $i269 := $i274;
  goto $bb84;
$bb91:
  assume ($i297 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 9} true;
  assume {:verifier.code 0} true;
  $i299 := $sext.i16.i32($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 11} true;
  assume {:verifier.code 0} true;
  $i300 := $slt.i32($i299,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i300} true;
  goto $bb94, $bb96;
$bb92:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 883, 7} true;
  assume {:verifier.code 0} true;
  assume !($i297 == 1);
  goto $bb93;
$bb93:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 888, 7} true;
  assume {:verifier.code 0} true;
  $i307 := $sext.i16.i32($i284);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 888, 9} true;
  assume {:verifier.code 0} true;
  $i308 := $srem.i32($i307,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 888, 7} true;
  assume {:verifier.code 0} true;
  $i309 := $trunc.i32.i16($i308);
  call {:cexpr "a"} boogie_si_record_i16($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 889, 8} true;
  assume {:verifier.code 0} true;
  $i310 := $sext.i16.i32($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 889, 5} true;
  assume {:verifier.code 0} true;
  $i311 := $sext.i16.i32($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 889, 5} true;
  assume {:verifier.code 0} true;
  $i312 := $add.i32($i311,$i310);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 889, 5} true;
  assume {:verifier.code 0} true;
  $i313 := $trunc.i32.i16($i312);
  call {:cexpr "a"} boogie_si_record_i16($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 890, 7} true;
  assume {:verifier.code 0} true;
  $i314 := $sext.i16.i32($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 890, 9} true;
  assume {:verifier.code 0} true;
  $i315 := $srem.i32($i314,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 890, 7} true;
  assume {:verifier.code 0} true;
  $i316 := $trunc.i32.i16($i315);
  call {:cexpr "b"} boogie_si_record_i16($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 891, 8} true;
  assume {:verifier.code 0} true;
  $i317 := $sext.i16.i32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 891, 5} true;
  assume {:verifier.code 0} true;
  $i318 := $sext.i16.i32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 891, 5} true;
  assume {:verifier.code 0} true;
  $i319 := $add.i32($i318,$i317);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 891, 5} true;
  assume {:verifier.code 0} true;
  $i320 := $trunc.i32.i16($i319);
  call {:cexpr "b"} boogie_si_record_i16($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 8} true;
  assume {:verifier.code 0} true;
  $i321 := $sext.i16.i32($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 5} true;
  assume {:verifier.code 0} true;
  $i322 := $sext.i16.i32($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 5} true;
  assume {:verifier.code 0} true;
  $i323 := $add.i32($i322,$i321);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 893, 5} true;
  assume {:verifier.code 0} true;
  $i324 := $trunc.i32.i16($i323);
  call {:cexpr "c"} boogie_si_record_i16($i324);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 7} true;
  assume {:verifier.code 0} true;
  $i325 := $sext.i16.i32($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 9} true;
  assume {:verifier.code 0} true;
  $i326 := $slt.i32($i325,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 7} true;
  assume {:verifier.code 0} true;
  $i327 := $i324;
  assume {:branchcond $i326} true;
  goto $bb100, $bb101;
$bb94:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 15} true;
  assume {:verifier.code 0} true;
  assume ($i300 == 1);
  goto $bb95;
$bb95:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 885, 9} true;
  assume {:verifier.code 0} true;
  $i304 := $sext.i16.i32($i295);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 885, 9} true;
  assume {:verifier.code 0} true;
  $i305 := $add.i32($i304,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 885, 9} true;
  assume {:verifier.code 0} true;
  $i306 := $trunc.i32.i16($i305);
  call {:cexpr "c"} boogie_si_record_i16($i306);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 886, 5} true;
  assume {:verifier.code 0} true;
  $i303 := $i306;
  goto $bb99;
$bb96:
  assume !($i300 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 18} true;
  assume {:verifier.code 0} true;
  $i301 := $sext.i16.i32($i291);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 20} true;
  assume {:verifier.code 0} true;
  $i302 := $sgt.i32($i301,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 9} true;
  assume {:verifier.code 0} true;
  $i303 := $i295;
  assume {:branchcond $i302} true;
  goto $bb97, $bb98;
$bb97:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 9} true;
  assume {:verifier.code 0} true;
  assume ($i302 == 1);
  goto $bb95;
$bb98:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 884, 9} true;
  assume {:verifier.code 0} true;
  assume !($i302 == 1);
  goto $bb99;
$bb99:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 887, 3} true;
  assume {:verifier.code 0} true;
  $i298 := $i303;
  goto $bb93;
$bb100:
  assume ($i326 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 9} true;
  assume {:verifier.code 0} true;
  $i328 := $sext.i16.i32($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 11} true;
  assume {:verifier.code 0} true;
  $i329 := $slt.i32($i328,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i329} true;
  goto $bb103, $bb105;
$bb101:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 894, 7} true;
  assume {:verifier.code 0} true;
  assume !($i326 == 1);
  goto $bb102;
$bb102:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 899, 7} true;
  assume {:verifier.code 0} true;
  $i336 := $sext.i16.i32($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 899, 9} true;
  assume {:verifier.code 0} true;
  $i337 := $srem.i32($i336,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 899, 7} true;
  assume {:verifier.code 0} true;
  $i338 := $trunc.i32.i16($i337);
  call {:cexpr "a"} boogie_si_record_i16($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 900, 8} true;
  assume {:verifier.code 0} true;
  $i339 := $sext.i16.i32($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 900, 5} true;
  assume {:verifier.code 0} true;
  $i340 := $sext.i16.i32($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 900, 5} true;
  assume {:verifier.code 0} true;
  $i341 := $add.i32($i340,$i339);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 900, 5} true;
  assume {:verifier.code 0} true;
  $i342 := $trunc.i32.i16($i341);
  call {:cexpr "a"} boogie_si_record_i16($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 901, 7} true;
  assume {:verifier.code 0} true;
  $i343 := $sext.i16.i32($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 901, 9} true;
  assume {:verifier.code 0} true;
  $i344 := $srem.i32($i343,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 901, 7} true;
  assume {:verifier.code 0} true;
  $i345 := $trunc.i32.i16($i344);
  call {:cexpr "b"} boogie_si_record_i16($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 902, 8} true;
  assume {:verifier.code 0} true;
  $i346 := $sext.i16.i32($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 902, 5} true;
  assume {:verifier.code 0} true;
  $i347 := $sext.i16.i32($i345);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 902, 5} true;
  assume {:verifier.code 0} true;
  $i348 := $add.i32($i347,$i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 902, 5} true;
  assume {:verifier.code 0} true;
  $i349 := $trunc.i32.i16($i348);
  call {:cexpr "b"} boogie_si_record_i16($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 904, 8} true;
  assume {:verifier.code 0} true;
  $i350 := $sext.i16.i32($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 904, 5} true;
  assume {:verifier.code 0} true;
  $i351 := $sext.i16.i32($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 904, 5} true;
  assume {:verifier.code 0} true;
  $i352 := $add.i32($i351,$i350);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 904, 5} true;
  assume {:verifier.code 0} true;
  $i353 := $trunc.i32.i16($i352);
  call {:cexpr "c"} boogie_si_record_i16($i353);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 905, 7} true;
  assume {:verifier.code 0} true;
  $i354 := $sext.i16.i32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 905, 9} true;
  assume {:verifier.code 0} true;
  $i355 := $slt.i32($i354,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 905, 7} true;
  assume {:verifier.code 0} true;
  $i356 := $i353;
  assume {:branchcond $i355} true;
  goto $bb109, $bb110;
$bb103:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 15} true;
  assume {:verifier.code 0} true;
  assume ($i329 == 1);
  goto $bb104;
$bb104:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 896, 9} true;
  assume {:verifier.code 0} true;
  $i333 := $sext.i16.i32($i324);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 896, 9} true;
  assume {:verifier.code 0} true;
  $i334 := $add.i32($i333,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 896, 9} true;
  assume {:verifier.code 0} true;
  $i335 := $trunc.i32.i16($i334);
  call {:cexpr "c"} boogie_si_record_i16($i335);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 897, 5} true;
  assume {:verifier.code 0} true;
  $i332 := $i335;
  goto $bb108;
$bb105:
  assume !($i329 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 18} true;
  assume {:verifier.code 0} true;
  $i330 := $sext.i16.i32($i320);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 20} true;
  assume {:verifier.code 0} true;
  $i331 := $sgt.i32($i330,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 9} true;
  assume {:verifier.code 0} true;
  $i332 := $i324;
  assume {:branchcond $i331} true;
  goto $bb106, $bb107;
$bb106:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 9} true;
  assume {:verifier.code 0} true;
  assume ($i331 == 1);
  goto $bb104;
$bb107:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 895, 9} true;
  assume {:verifier.code 0} true;
  assume !($i331 == 1);
  goto $bb108;
$bb108:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 898, 3} true;
  assume {:verifier.code 0} true;
  $i327 := $i332;
  goto $bb102;
$bb109:
  assume ($i355 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 9} true;
  assume {:verifier.code 0} true;
  $i357 := $sext.i16.i32($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 11} true;
  assume {:verifier.code 0} true;
  $i358 := $slt.i32($i357,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i358} true;
  goto $bb112, $bb114;
$bb110:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 905, 7} true;
  assume {:verifier.code 0} true;
  assume !($i355 == 1);
  goto $bb111;
$bb111:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 910, 7} true;
  assume {:verifier.code 0} true;
  $i365 := $sext.i16.i32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 910, 9} true;
  assume {:verifier.code 0} true;
  $i366 := $srem.i32($i365,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 910, 7} true;
  assume {:verifier.code 0} true;
  $i367 := $trunc.i32.i16($i366);
  call {:cexpr "a"} boogie_si_record_i16($i367);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 911, 8} true;
  assume {:verifier.code 0} true;
  $i368 := $sext.i16.i32($i367);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 911, 5} true;
  assume {:verifier.code 0} true;
  $i369 := $sext.i16.i32($i367);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 911, 5} true;
  assume {:verifier.code 0} true;
  $i370 := $add.i32($i369,$i368);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 911, 5} true;
  assume {:verifier.code 0} true;
  $i371 := $trunc.i32.i16($i370);
  call {:cexpr "a"} boogie_si_record_i16($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 912, 7} true;
  assume {:verifier.code 0} true;
  $i372 := $sext.i16.i32($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 912, 9} true;
  assume {:verifier.code 0} true;
  $i373 := $srem.i32($i372,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 912, 7} true;
  assume {:verifier.code 0} true;
  $i374 := $trunc.i32.i16($i373);
  call {:cexpr "b"} boogie_si_record_i16($i374);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 913, 8} true;
  assume {:verifier.code 0} true;
  $i375 := $sext.i16.i32($i374);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 913, 5} true;
  assume {:verifier.code 0} true;
  $i376 := $sext.i16.i32($i374);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 913, 5} true;
  assume {:verifier.code 0} true;
  $i377 := $add.i32($i376,$i375);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 913, 5} true;
  assume {:verifier.code 0} true;
  $i378 := $trunc.i32.i16($i377);
  call {:cexpr "b"} boogie_si_record_i16($i378);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 8} true;
  assume {:verifier.code 0} true;
  $i379 := $sext.i16.i32($i356);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 5} true;
  assume {:verifier.code 0} true;
  $i380 := $sext.i16.i32($i356);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 5} true;
  assume {:verifier.code 0} true;
  $i381 := $add.i32($i380,$i379);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 915, 5} true;
  assume {:verifier.code 0} true;
  $i382 := $trunc.i32.i16($i381);
  call {:cexpr "c"} boogie_si_record_i16($i382);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 7} true;
  assume {:verifier.code 0} true;
  $i383 := $sext.i16.i32($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 9} true;
  assume {:verifier.code 0} true;
  $i384 := $slt.i32($i383,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 7} true;
  assume {:verifier.code 0} true;
  $i385 := $i382;
  assume {:branchcond $i384} true;
  goto $bb118, $bb119;
$bb112:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 15} true;
  assume {:verifier.code 0} true;
  assume ($i358 == 1);
  goto $bb113;
$bb113:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 907, 9} true;
  assume {:verifier.code 0} true;
  $i362 := $sext.i16.i32($i353);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 907, 9} true;
  assume {:verifier.code 0} true;
  $i363 := $add.i32($i362,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 907, 9} true;
  assume {:verifier.code 0} true;
  $i364 := $trunc.i32.i16($i363);
  call {:cexpr "c"} boogie_si_record_i16($i364);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 908, 5} true;
  assume {:verifier.code 0} true;
  $i361 := $i364;
  goto $bb117;
$bb114:
  assume !($i358 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 18} true;
  assume {:verifier.code 0} true;
  $i359 := $sext.i16.i32($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 20} true;
  assume {:verifier.code 0} true;
  $i360 := $sgt.i32($i359,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 9} true;
  assume {:verifier.code 0} true;
  $i361 := $i353;
  assume {:branchcond $i360} true;
  goto $bb115, $bb116;
$bb115:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 9} true;
  assume {:verifier.code 0} true;
  assume ($i360 == 1);
  goto $bb113;
$bb116:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 906, 9} true;
  assume {:verifier.code 0} true;
  assume !($i360 == 1);
  goto $bb117;
$bb117:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 909, 3} true;
  assume {:verifier.code 0} true;
  $i356 := $i361;
  goto $bb111;
$bb118:
  assume ($i384 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 9} true;
  assume {:verifier.code 0} true;
  $i386 := $sext.i16.i32($i378);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 11} true;
  assume {:verifier.code 0} true;
  $i387 := $slt.i32($i386,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i387} true;
  goto $bb121, $bb123;
$bb119:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 916, 7} true;
  assume {:verifier.code 0} true;
  assume !($i384 == 1);
  goto $bb120;
$bb120:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 921, 7} true;
  assume {:verifier.code 0} true;
  $i394 := $sext.i16.i32($i371);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 921, 9} true;
  assume {:verifier.code 0} true;
  $i395 := $srem.i32($i394,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 921, 7} true;
  assume {:verifier.code 0} true;
  $i396 := $trunc.i32.i16($i395);
  call {:cexpr "a"} boogie_si_record_i16($i396);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 922, 8} true;
  assume {:verifier.code 0} true;
  $i397 := $sext.i16.i32($i396);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 922, 5} true;
  assume {:verifier.code 0} true;
  $i398 := $sext.i16.i32($i396);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 922, 5} true;
  assume {:verifier.code 0} true;
  $i399 := $add.i32($i398,$i397);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 922, 5} true;
  assume {:verifier.code 0} true;
  $i400 := $trunc.i32.i16($i399);
  call {:cexpr "a"} boogie_si_record_i16($i400);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 923, 7} true;
  assume {:verifier.code 0} true;
  $i401 := $sext.i16.i32($i378);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 923, 9} true;
  assume {:verifier.code 0} true;
  $i402 := $srem.i32($i401,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 923, 7} true;
  assume {:verifier.code 0} true;
  $i403 := $trunc.i32.i16($i402);
  call {:cexpr "b"} boogie_si_record_i16($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 924, 8} true;
  assume {:verifier.code 0} true;
  $i404 := $sext.i16.i32($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 924, 5} true;
  assume {:verifier.code 0} true;
  $i405 := $sext.i16.i32($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 924, 5} true;
  assume {:verifier.code 0} true;
  $i406 := $add.i32($i405,$i404);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 924, 5} true;
  assume {:verifier.code 0} true;
  $i407 := $trunc.i32.i16($i406);
  call {:cexpr "b"} boogie_si_record_i16($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 926, 8} true;
  assume {:verifier.code 0} true;
  $i408 := $sext.i16.i32($i385);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 926, 5} true;
  assume {:verifier.code 0} true;
  $i409 := $sext.i16.i32($i385);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 926, 5} true;
  assume {:verifier.code 0} true;
  $i410 := $add.i32($i409,$i408);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 926, 5} true;
  assume {:verifier.code 0} true;
  $i411 := $trunc.i32.i16($i410);
  call {:cexpr "c"} boogie_si_record_i16($i411);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 7} true;
  assume {:verifier.code 0} true;
  $i412 := $sext.i16.i32($i400);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 9} true;
  assume {:verifier.code 0} true;
  $i413 := $slt.i32($i412,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 7} true;
  assume {:verifier.code 0} true;
  $i414 := $i411;
  assume {:branchcond $i413} true;
  goto $bb127, $bb128;
$bb121:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 15} true;
  assume {:verifier.code 0} true;
  assume ($i387 == 1);
  goto $bb122;
$bb122:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 918, 9} true;
  assume {:verifier.code 0} true;
  $i391 := $sext.i16.i32($i382);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 918, 9} true;
  assume {:verifier.code 0} true;
  $i392 := $add.i32($i391,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 918, 9} true;
  assume {:verifier.code 0} true;
  $i393 := $trunc.i32.i16($i392);
  call {:cexpr "c"} boogie_si_record_i16($i393);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 919, 5} true;
  assume {:verifier.code 0} true;
  $i390 := $i393;
  goto $bb126;
$bb123:
  assume !($i387 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 18} true;
  assume {:verifier.code 0} true;
  $i388 := $sext.i16.i32($i378);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 20} true;
  assume {:verifier.code 0} true;
  $i389 := $sgt.i32($i388,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 9} true;
  assume {:verifier.code 0} true;
  $i390 := $i382;
  assume {:branchcond $i389} true;
  goto $bb124, $bb125;
$bb124:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 9} true;
  assume {:verifier.code 0} true;
  assume ($i389 == 1);
  goto $bb122;
$bb125:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 917, 9} true;
  assume {:verifier.code 0} true;
  assume !($i389 == 1);
  goto $bb126;
$bb126:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 920, 3} true;
  assume {:verifier.code 0} true;
  $i385 := $i390;
  goto $bb120;
$bb127:
  assume ($i413 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 9} true;
  assume {:verifier.code 0} true;
  $i415 := $sext.i16.i32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 11} true;
  assume {:verifier.code 0} true;
  $i416 := $slt.i32($i415,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i416} true;
  goto $bb130, $bb132;
$bb128:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 927, 7} true;
  assume {:verifier.code 0} true;
  assume !($i413 == 1);
  goto $bb129;
$bb129:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 932, 7} true;
  assume {:verifier.code 0} true;
  $i423 := $sext.i16.i32($i400);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 932, 9} true;
  assume {:verifier.code 0} true;
  $i424 := $srem.i32($i423,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 932, 7} true;
  assume {:verifier.code 0} true;
  $i425 := $trunc.i32.i16($i424);
  call {:cexpr "a"} boogie_si_record_i16($i425);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 933, 8} true;
  assume {:verifier.code 0} true;
  $i426 := $sext.i16.i32($i425);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 933, 5} true;
  assume {:verifier.code 0} true;
  $i427 := $sext.i16.i32($i425);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 933, 5} true;
  assume {:verifier.code 0} true;
  $i428 := $add.i32($i427,$i426);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 933, 5} true;
  assume {:verifier.code 0} true;
  $i429 := $trunc.i32.i16($i428);
  call {:cexpr "a"} boogie_si_record_i16($i429);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 934, 7} true;
  assume {:verifier.code 0} true;
  $i430 := $sext.i16.i32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 934, 9} true;
  assume {:verifier.code 0} true;
  $i431 := $srem.i32($i430,32768);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 934, 7} true;
  assume {:verifier.code 0} true;
  $i432 := $trunc.i32.i16($i431);
  call {:cexpr "b"} boogie_si_record_i16($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 935, 8} true;
  assume {:verifier.code 0} true;
  $i433 := $sext.i16.i32($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 935, 5} true;
  assume {:verifier.code 0} true;
  $i434 := $sext.i16.i32($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 935, 5} true;
  assume {:verifier.code 0} true;
  $i435 := $add.i32($i434,$i433);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 935, 5} true;
  assume {:verifier.code 0} true;
  $i436 := $trunc.i32.i16($i435);
  call {:cexpr "b"} boogie_si_record_i16($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 937, 8} true;
  assume {:verifier.code 0} true;
  $i437 := $sext.i16.i32($i414);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 937, 5} true;
  assume {:verifier.code 0} true;
  $i438 := $sext.i16.i32($i414);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 937, 5} true;
  assume {:verifier.code 0} true;
  $i439 := $add.i32($i438,$i437);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 937, 5} true;
  assume {:verifier.code 0} true;
  $i440 := $trunc.i32.i16($i439);
  call {:cexpr "c"} boogie_si_record_i16($i440);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 7} true;
  assume {:verifier.code 0} true;
  $i441 := $sext.i16.i32($i429);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 9} true;
  assume {:verifier.code 0} true;
  $i442 := $slt.i32($i441,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 7} true;
  assume {:verifier.code 0} true;
  $i443 := $i440;
  assume {:branchcond $i442} true;
  goto $bb136, $bb137;
$bb130:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 15} true;
  assume {:verifier.code 0} true;
  assume ($i416 == 1);
  goto $bb131;
$bb131:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 929, 9} true;
  assume {:verifier.code 0} true;
  $i420 := $sext.i16.i32($i411);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 929, 9} true;
  assume {:verifier.code 0} true;
  $i421 := $add.i32($i420,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 929, 9} true;
  assume {:verifier.code 0} true;
  $i422 := $trunc.i32.i16($i421);
  call {:cexpr "c"} boogie_si_record_i16($i422);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 930, 5} true;
  assume {:verifier.code 0} true;
  $i419 := $i422;
  goto $bb135;
$bb132:
  assume !($i416 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 18} true;
  assume {:verifier.code 0} true;
  $i417 := $sext.i16.i32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 20} true;
  assume {:verifier.code 0} true;
  $i418 := $sgt.i32($i417,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 9} true;
  assume {:verifier.code 0} true;
  $i419 := $i411;
  assume {:branchcond $i418} true;
  goto $bb133, $bb134;
$bb133:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 9} true;
  assume {:verifier.code 0} true;
  assume ($i418 == 1);
  goto $bb131;
$bb134:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 928, 9} true;
  assume {:verifier.code 0} true;
  assume !($i418 == 1);
  goto $bb135;
$bb135:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 931, 3} true;
  assume {:verifier.code 0} true;
  $i414 := $i419;
  goto $bb129;
$bb136:
  assume ($i442 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 9} true;
  assume {:verifier.code 0} true;
  $i444 := $sext.i16.i32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 11} true;
  assume {:verifier.code 0} true;
  $i445 := $slt.i32($i444,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i445} true;
  goto $bb139, $bb141;
$bb137:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 938, 7} true;
  assume {:verifier.code 0} true;
  assume !($i442 == 1);
  goto $bb138;
$bb138:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 948, 3} true;
  assume {:verifier.code 0} true;
  $r := $i443;
  $exn := false;
  return;
$bb139:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 15} true;
  assume {:verifier.code 0} true;
  assume ($i445 == 1);
  goto $bb140;
$bb140:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 940, 9} true;
  assume {:verifier.code 0} true;
  $i449 := $sext.i16.i32($i440);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 940, 9} true;
  assume {:verifier.code 0} true;
  $i450 := $add.i32($i449,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 940, 9} true;
  assume {:verifier.code 0} true;
  $i451 := $trunc.i32.i16($i450);
  call {:cexpr "c"} boogie_si_record_i16($i451);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 941, 5} true;
  assume {:verifier.code 0} true;
  $i448 := $i451;
  goto $bb144;
$bb141:
  assume !($i445 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 18} true;
  assume {:verifier.code 0} true;
  $i446 := $sext.i16.i32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 20} true;
  assume {:verifier.code 0} true;
  $i447 := $sgt.i32($i446,32767);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 9} true;
  assume {:verifier.code 0} true;
  $i448 := $i440;
  assume {:branchcond $i447} true;
  goto $bb142, $bb143;
$bb142:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 9} true;
  assume {:verifier.code 0} true;
  assume ($i447 == 1);
  goto $bb140;
$bb143:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 939, 9} true;
  assume {:verifier.code 0} true;
  assume !($i447 == 1);
  goto $bb144;
$bb144:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 942, 3} true;
  assume {:verifier.code 0} true;
  $i443 := $i448;
  goto $bb138;
}
const __SMACK_and8: ref;
axiom (__SMACK_and8 == $sub.ref(0,44376));
procedure {:inline 1} __SMACK_and8($i0: i8, $i1: i8) returns ($r: i8)
modifies $exn;
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
  var $i6: i32;
  var $i7: i1;
  var $i9: i32;
  var $i10: i1;
  var $i11: i32;
  var $i12: i1;
  var $i14: i32;
  var $i15: i32;
  var $i16: i8;
  var $i13: i8;
  var $i8: i8;
  var $i17: i32;
  var $i18: i32;
  var $i19: i8;
  var $i20: i32;
  var $i21: i32;
  var $i22: i32;
  var $i23: i8;
  var $i24: i32;
  var $i25: i32;
  var $i26: i8;
  var $i27: i32;
  var $i28: i32;
  var $i29: i32;
  var $i30: i8;
  var $i31: i32;
  var $i32: i32;
  var $i33: i32;
  var $i34: i8;
  var $i35: i32;
  var $i36: i1;
  var $i38: i32;
  var $i39: i1;
  var $i40: i32;
  var $i41: i1;
  var $i43: i32;
  var $i44: i32;
  var $i45: i8;
  var $i42: i8;
  var $i37: i8;
  var $i46: i32;
  var $i47: i32;
  var $i48: i8;
  var $i49: i32;
  var $i50: i32;
  var $i51: i32;
  var $i52: i8;
  var $i53: i32;
  var $i54: i32;
  var $i55: i8;
  var $i56: i32;
  var $i57: i32;
  var $i58: i32;
  var $i59: i8;
  var $i60: i32;
  var $i61: i32;
  var $i62: i32;
  var $i63: i8;
  var $i64: i32;
  var $i65: i1;
  var $i67: i32;
  var $i68: i1;
  var $i69: i32;
  var $i70: i1;
  var $i72: i32;
  var $i73: i32;
  var $i74: i8;
  var $i71: i8;
  var $i66: i8;
  var $i75: i32;
  var $i76: i32;
  var $i77: i8;
  var $i78: i32;
  var $i79: i32;
  var $i80: i32;
  var $i81: i8;
  var $i82: i32;
  var $i83: i32;
  var $i84: i8;
  var $i85: i32;
  var $i86: i32;
  var $i87: i32;
  var $i88: i8;
  var $i89: i32;
  var $i90: i32;
  var $i91: i32;
  var $i92: i8;
  var $i93: i32;
  var $i94: i1;
  var $i96: i32;
  var $i97: i1;
  var $i98: i32;
  var $i99: i1;
  var $i101: i32;
  var $i102: i32;
  var $i103: i8;
  var $i100: i8;
  var $i95: i8;
  var $i104: i32;
  var $i105: i32;
  var $i106: i8;
  var $i107: i32;
  var $i108: i32;
  var $i109: i32;
  var $i110: i8;
  var $i111: i32;
  var $i112: i32;
  var $i113: i8;
  var $i114: i32;
  var $i115: i32;
  var $i116: i32;
  var $i117: i8;
  var $i118: i32;
  var $i119: i32;
  var $i120: i32;
  var $i121: i8;
  var $i122: i32;
  var $i123: i1;
  var $i125: i32;
  var $i126: i1;
  var $i127: i32;
  var $i128: i1;
  var $i130: i32;
  var $i131: i32;
  var $i132: i8;
  var $i129: i8;
  var $i124: i8;
  var $i133: i32;
  var $i134: i32;
  var $i135: i8;
  var $i136: i32;
  var $i137: i32;
  var $i138: i32;
  var $i139: i8;
  var $i140: i32;
  var $i141: i32;
  var $i142: i8;
  var $i143: i32;
  var $i144: i32;
  var $i145: i32;
  var $i146: i8;
  var $i147: i32;
  var $i148: i32;
  var $i149: i32;
  var $i150: i8;
  var $i151: i32;
  var $i152: i1;
  var $i154: i32;
  var $i155: i1;
  var $i156: i32;
  var $i157: i1;
  var $i159: i32;
  var $i160: i32;
  var $i161: i8;
  var $i158: i8;
  var $i153: i8;
  var $i162: i32;
  var $i163: i32;
  var $i164: i8;
  var $i165: i32;
  var $i166: i32;
  var $i167: i32;
  var $i168: i8;
  var $i169: i32;
  var $i170: i32;
  var $i171: i8;
  var $i172: i32;
  var $i173: i32;
  var $i174: i32;
  var $i175: i8;
  var $i176: i32;
  var $i177: i32;
  var $i178: i32;
  var $i179: i8;
  var $i180: i32;
  var $i181: i1;
  var $i183: i32;
  var $i184: i1;
  var $i185: i32;
  var $i186: i1;
  var $i188: i32;
  var $i189: i32;
  var $i190: i8;
  var $i187: i8;
  var $i182: i8;
  var $i191: i32;
  var $i192: i32;
  var $i193: i8;
  var $i194: i32;
  var $i195: i32;
  var $i196: i32;
  var $i197: i8;
  var $i198: i32;
  var $i199: i32;
  var $i200: i8;
  var $i201: i32;
  var $i202: i32;
  var $i203: i32;
  var $i204: i8;
  var $i205: i32;
  var $i206: i32;
  var $i207: i32;
  var $i208: i8;
  var $i209: i32;
  var $i210: i1;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i215: i1;
  var $i217: i32;
  var $i218: i32;
  var $i219: i8;
  var $i216: i8;
  var $i211: i8;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 8} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__SMACK_and8:arg:a"} boogie_si_record_i8($i0);
  call {:cexpr "__SMACK_and8:arg:b"} boogie_si_record_i8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 8} true;
  assume {:verifier.code 0} true;
  $i2 := $sext.i8.i32(0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 5} true;
  assume {:verifier.code 0} true;
  $i3 := $sext.i8.i32(0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 5} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i32($i3,$i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 954, 5} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i32.i8($i4);
  call {:cexpr "c"} boogie_si_record_i8($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 7} true;
  assume {:verifier.code 0} true;
  $i6 := $sext.i8.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 9} true;
  assume {:verifier.code 0} true;
  $i7 := $slt.i32($i6,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $i5;
  assume {:branchcond $i7} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i7 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 9} true;
  assume {:verifier.code 0} true;
  $i9 := $sext.i8.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 11} true;
  assume {:verifier.code 0} true;
  $i10 := $slt.i32($i9,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i10} true;
  goto $bb4, $bb6;
$bb2:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 955, 7} true;
  assume {:verifier.code 0} true;
  assume !($i7 == 1);
  goto $bb3;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 960, 7} true;
  assume {:verifier.code 0} true;
  $i17 := $sext.i8.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 960, 9} true;
  assume {:verifier.code 0} true;
  $i18 := $srem.i32($i17,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 960, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $trunc.i32.i8($i18);
  call {:cexpr "a"} boogie_si_record_i8($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 961, 8} true;
  assume {:verifier.code 0} true;
  $i20 := $sext.i8.i32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 961, 5} true;
  assume {:verifier.code 0} true;
  $i21 := $sext.i8.i32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 961, 5} true;
  assume {:verifier.code 0} true;
  $i22 := $add.i32($i21,$i20);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 961, 5} true;
  assume {:verifier.code 0} true;
  $i23 := $trunc.i32.i8($i22);
  call {:cexpr "a"} boogie_si_record_i8($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 962, 7} true;
  assume {:verifier.code 0} true;
  $i24 := $sext.i8.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 962, 9} true;
  assume {:verifier.code 0} true;
  $i25 := $srem.i32($i24,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 962, 7} true;
  assume {:verifier.code 0} true;
  $i26 := $trunc.i32.i8($i25);
  call {:cexpr "b"} boogie_si_record_i8($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 963, 8} true;
  assume {:verifier.code 0} true;
  $i27 := $sext.i8.i32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 963, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $sext.i8.i32($i26);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 963, 5} true;
  assume {:verifier.code 0} true;
  $i29 := $add.i32($i28,$i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 963, 5} true;
  assume {:verifier.code 0} true;
  $i30 := $trunc.i32.i8($i29);
  call {:cexpr "b"} boogie_si_record_i8($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 965, 8} true;
  assume {:verifier.code 0} true;
  $i31 := $sext.i8.i32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 965, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $sext.i8.i32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 965, 5} true;
  assume {:verifier.code 0} true;
  $i33 := $add.i32($i32,$i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 965, 5} true;
  assume {:verifier.code 0} true;
  $i34 := $trunc.i32.i8($i33);
  call {:cexpr "c"} boogie_si_record_i8($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 7} true;
  assume {:verifier.code 0} true;
  $i35 := $sext.i8.i32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 9} true;
  assume {:verifier.code 0} true;
  $i36 := $slt.i32($i35,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 7} true;
  assume {:verifier.code 0} true;
  $i37 := $i34;
  assume {:branchcond $i36} true;
  goto $bb10, $bb11;
$bb4:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 15} true;
  assume {:verifier.code 0} true;
  assume ($i10 == 1);
  goto $bb5;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 957, 9} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i8.i32($i5);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 957, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $add.i32($i14,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 957, 9} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.i32.i8($i15);
  call {:cexpr "c"} boogie_si_record_i8($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 958, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $i16;
  goto $bb9;
$bb6:
  assume !($i10 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 18} true;
  assume {:verifier.code 0} true;
  $i11 := $sext.i8.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 20} true;
  assume {:verifier.code 0} true;
  $i12 := $sgt.i32($i11,127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 9} true;
  assume {:verifier.code 0} true;
  $i13 := $i5;
  assume {:branchcond $i12} true;
  goto $bb7, $bb8;
$bb7:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 9} true;
  assume {:verifier.code 0} true;
  assume ($i12 == 1);
  goto $bb5;
$bb8:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 956, 9} true;
  assume {:verifier.code 0} true;
  assume !($i12 == 1);
  goto $bb9;
$bb9:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 959, 3} true;
  assume {:verifier.code 0} true;
  $i8 := $i13;
  goto $bb3;
$bb10:
  assume ($i36 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 9} true;
  assume {:verifier.code 0} true;
  $i38 := $sext.i8.i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 11} true;
  assume {:verifier.code 0} true;
  $i39 := $slt.i32($i38,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i39} true;
  goto $bb13, $bb15;
$bb11:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 966, 7} true;
  assume {:verifier.code 0} true;
  assume !($i36 == 1);
  goto $bb12;
$bb12:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 971, 7} true;
  assume {:verifier.code 0} true;
  $i46 := $sext.i8.i32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 971, 9} true;
  assume {:verifier.code 0} true;
  $i47 := $srem.i32($i46,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 971, 7} true;
  assume {:verifier.code 0} true;
  $i48 := $trunc.i32.i8($i47);
  call {:cexpr "a"} boogie_si_record_i8($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 972, 8} true;
  assume {:verifier.code 0} true;
  $i49 := $sext.i8.i32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 972, 5} true;
  assume {:verifier.code 0} true;
  $i50 := $sext.i8.i32($i48);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 972, 5} true;
  assume {:verifier.code 0} true;
  $i51 := $add.i32($i50,$i49);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 972, 5} true;
  assume {:verifier.code 0} true;
  $i52 := $trunc.i32.i8($i51);
  call {:cexpr "a"} boogie_si_record_i8($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 973, 7} true;
  assume {:verifier.code 0} true;
  $i53 := $sext.i8.i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 973, 9} true;
  assume {:verifier.code 0} true;
  $i54 := $srem.i32($i53,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 973, 7} true;
  assume {:verifier.code 0} true;
  $i55 := $trunc.i32.i8($i54);
  call {:cexpr "b"} boogie_si_record_i8($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 974, 8} true;
  assume {:verifier.code 0} true;
  $i56 := $sext.i8.i32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 974, 5} true;
  assume {:verifier.code 0} true;
  $i57 := $sext.i8.i32($i55);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 974, 5} true;
  assume {:verifier.code 0} true;
  $i58 := $add.i32($i57,$i56);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 974, 5} true;
  assume {:verifier.code 0} true;
  $i59 := $trunc.i32.i8($i58);
  call {:cexpr "b"} boogie_si_record_i8($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 976, 8} true;
  assume {:verifier.code 0} true;
  $i60 := $sext.i8.i32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 976, 5} true;
  assume {:verifier.code 0} true;
  $i61 := $sext.i8.i32($i37);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 976, 5} true;
  assume {:verifier.code 0} true;
  $i62 := $add.i32($i61,$i60);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 976, 5} true;
  assume {:verifier.code 0} true;
  $i63 := $trunc.i32.i8($i62);
  call {:cexpr "c"} boogie_si_record_i8($i63);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 977, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $sext.i8.i32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 977, 9} true;
  assume {:verifier.code 0} true;
  $i65 := $slt.i32($i64,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 977, 7} true;
  assume {:verifier.code 0} true;
  $i66 := $i63;
  assume {:branchcond $i65} true;
  goto $bb19, $bb20;
$bb13:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 15} true;
  assume {:verifier.code 0} true;
  assume ($i39 == 1);
  goto $bb14;
$bb14:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 968, 9} true;
  assume {:verifier.code 0} true;
  $i43 := $sext.i8.i32($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 968, 9} true;
  assume {:verifier.code 0} true;
  $i44 := $add.i32($i43,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 968, 9} true;
  assume {:verifier.code 0} true;
  $i45 := $trunc.i32.i8($i44);
  call {:cexpr "c"} boogie_si_record_i8($i45);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 969, 5} true;
  assume {:verifier.code 0} true;
  $i42 := $i45;
  goto $bb18;
$bb15:
  assume !($i39 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 18} true;
  assume {:verifier.code 0} true;
  $i40 := $sext.i8.i32($i30);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 20} true;
  assume {:verifier.code 0} true;
  $i41 := $sgt.i32($i40,127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 9} true;
  assume {:verifier.code 0} true;
  $i42 := $i34;
  assume {:branchcond $i41} true;
  goto $bb16, $bb17;
$bb16:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 9} true;
  assume {:verifier.code 0} true;
  assume ($i41 == 1);
  goto $bb14;
$bb17:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 967, 9} true;
  assume {:verifier.code 0} true;
  assume !($i41 == 1);
  goto $bb18;
$bb18:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 970, 3} true;
  assume {:verifier.code 0} true;
  $i37 := $i42;
  goto $bb12;
$bb19:
  assume ($i65 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 9} true;
  assume {:verifier.code 0} true;
  $i67 := $sext.i8.i32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 11} true;
  assume {:verifier.code 0} true;
  $i68 := $slt.i32($i67,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i68} true;
  goto $bb22, $bb24;
$bb20:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 977, 7} true;
  assume {:verifier.code 0} true;
  assume !($i65 == 1);
  goto $bb21;
$bb21:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 982, 7} true;
  assume {:verifier.code 0} true;
  $i75 := $sext.i8.i32($i52);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 982, 9} true;
  assume {:verifier.code 0} true;
  $i76 := $srem.i32($i75,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 982, 7} true;
  assume {:verifier.code 0} true;
  $i77 := $trunc.i32.i8($i76);
  call {:cexpr "a"} boogie_si_record_i8($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 983, 8} true;
  assume {:verifier.code 0} true;
  $i78 := $sext.i8.i32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 983, 5} true;
  assume {:verifier.code 0} true;
  $i79 := $sext.i8.i32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 983, 5} true;
  assume {:verifier.code 0} true;
  $i80 := $add.i32($i79,$i78);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 983, 5} true;
  assume {:verifier.code 0} true;
  $i81 := $trunc.i32.i8($i80);
  call {:cexpr "a"} boogie_si_record_i8($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 984, 7} true;
  assume {:verifier.code 0} true;
  $i82 := $sext.i8.i32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 984, 9} true;
  assume {:verifier.code 0} true;
  $i83 := $srem.i32($i82,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 984, 7} true;
  assume {:verifier.code 0} true;
  $i84 := $trunc.i32.i8($i83);
  call {:cexpr "b"} boogie_si_record_i8($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 985, 8} true;
  assume {:verifier.code 0} true;
  $i85 := $sext.i8.i32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 985, 5} true;
  assume {:verifier.code 0} true;
  $i86 := $sext.i8.i32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 985, 5} true;
  assume {:verifier.code 0} true;
  $i87 := $add.i32($i86,$i85);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 985, 5} true;
  assume {:verifier.code 0} true;
  $i88 := $trunc.i32.i8($i87);
  call {:cexpr "b"} boogie_si_record_i8($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 8} true;
  assume {:verifier.code 0} true;
  $i89 := $sext.i8.i32($i66);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 5} true;
  assume {:verifier.code 0} true;
  $i90 := $sext.i8.i32($i66);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 5} true;
  assume {:verifier.code 0} true;
  $i91 := $add.i32($i90,$i89);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 987, 5} true;
  assume {:verifier.code 0} true;
  $i92 := $trunc.i32.i8($i91);
  call {:cexpr "c"} boogie_si_record_i8($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 7} true;
  assume {:verifier.code 0} true;
  $i93 := $sext.i8.i32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 9} true;
  assume {:verifier.code 0} true;
  $i94 := $slt.i32($i93,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 7} true;
  assume {:verifier.code 0} true;
  $i95 := $i92;
  assume {:branchcond $i94} true;
  goto $bb28, $bb29;
$bb22:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 15} true;
  assume {:verifier.code 0} true;
  assume ($i68 == 1);
  goto $bb23;
$bb23:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 979, 9} true;
  assume {:verifier.code 0} true;
  $i72 := $sext.i8.i32($i63);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 979, 9} true;
  assume {:verifier.code 0} true;
  $i73 := $add.i32($i72,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 979, 9} true;
  assume {:verifier.code 0} true;
  $i74 := $trunc.i32.i8($i73);
  call {:cexpr "c"} boogie_si_record_i8($i74);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 980, 5} true;
  assume {:verifier.code 0} true;
  $i71 := $i74;
  goto $bb27;
$bb24:
  assume !($i68 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 18} true;
  assume {:verifier.code 0} true;
  $i69 := $sext.i8.i32($i59);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 20} true;
  assume {:verifier.code 0} true;
  $i70 := $sgt.i32($i69,127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 9} true;
  assume {:verifier.code 0} true;
  $i71 := $i63;
  assume {:branchcond $i70} true;
  goto $bb25, $bb26;
$bb25:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 9} true;
  assume {:verifier.code 0} true;
  assume ($i70 == 1);
  goto $bb23;
$bb26:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 978, 9} true;
  assume {:verifier.code 0} true;
  assume !($i70 == 1);
  goto $bb27;
$bb27:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 981, 3} true;
  assume {:verifier.code 0} true;
  $i66 := $i71;
  goto $bb21;
$bb28:
  assume ($i94 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 9} true;
  assume {:verifier.code 0} true;
  $i96 := $sext.i8.i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 11} true;
  assume {:verifier.code 0} true;
  $i97 := $slt.i32($i96,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i97} true;
  goto $bb31, $bb33;
$bb29:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 988, 7} true;
  assume {:verifier.code 0} true;
  assume !($i94 == 1);
  goto $bb30;
$bb30:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 993, 7} true;
  assume {:verifier.code 0} true;
  $i104 := $sext.i8.i32($i81);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 993, 9} true;
  assume {:verifier.code 0} true;
  $i105 := $srem.i32($i104,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 993, 7} true;
  assume {:verifier.code 0} true;
  $i106 := $trunc.i32.i8($i105);
  call {:cexpr "a"} boogie_si_record_i8($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 994, 8} true;
  assume {:verifier.code 0} true;
  $i107 := $sext.i8.i32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 994, 5} true;
  assume {:verifier.code 0} true;
  $i108 := $sext.i8.i32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 994, 5} true;
  assume {:verifier.code 0} true;
  $i109 := $add.i32($i108,$i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 994, 5} true;
  assume {:verifier.code 0} true;
  $i110 := $trunc.i32.i8($i109);
  call {:cexpr "a"} boogie_si_record_i8($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 995, 7} true;
  assume {:verifier.code 0} true;
  $i111 := $sext.i8.i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 995, 9} true;
  assume {:verifier.code 0} true;
  $i112 := $srem.i32($i111,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 995, 7} true;
  assume {:verifier.code 0} true;
  $i113 := $trunc.i32.i8($i112);
  call {:cexpr "b"} boogie_si_record_i8($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 996, 8} true;
  assume {:verifier.code 0} true;
  $i114 := $sext.i8.i32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 996, 5} true;
  assume {:verifier.code 0} true;
  $i115 := $sext.i8.i32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 996, 5} true;
  assume {:verifier.code 0} true;
  $i116 := $add.i32($i115,$i114);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 996, 5} true;
  assume {:verifier.code 0} true;
  $i117 := $trunc.i32.i8($i116);
  call {:cexpr "b"} boogie_si_record_i8($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 998, 8} true;
  assume {:verifier.code 0} true;
  $i118 := $sext.i8.i32($i95);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 998, 5} true;
  assume {:verifier.code 0} true;
  $i119 := $sext.i8.i32($i95);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 998, 5} true;
  assume {:verifier.code 0} true;
  $i120 := $add.i32($i119,$i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 998, 5} true;
  assume {:verifier.code 0} true;
  $i121 := $trunc.i32.i8($i120);
  call {:cexpr "c"} boogie_si_record_i8($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 999, 7} true;
  assume {:verifier.code 0} true;
  $i122 := $sext.i8.i32($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 999, 9} true;
  assume {:verifier.code 0} true;
  $i123 := $slt.i32($i122,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 999, 7} true;
  assume {:verifier.code 0} true;
  $i124 := $i121;
  assume {:branchcond $i123} true;
  goto $bb37, $bb38;
$bb31:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 15} true;
  assume {:verifier.code 0} true;
  assume ($i97 == 1);
  goto $bb32;
$bb32:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 990, 9} true;
  assume {:verifier.code 0} true;
  $i101 := $sext.i8.i32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 990, 9} true;
  assume {:verifier.code 0} true;
  $i102 := $add.i32($i101,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 990, 9} true;
  assume {:verifier.code 0} true;
  $i103 := $trunc.i32.i8($i102);
  call {:cexpr "c"} boogie_si_record_i8($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 991, 5} true;
  assume {:verifier.code 0} true;
  $i100 := $i103;
  goto $bb36;
$bb33:
  assume !($i97 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 18} true;
  assume {:verifier.code 0} true;
  $i98 := $sext.i8.i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 20} true;
  assume {:verifier.code 0} true;
  $i99 := $sgt.i32($i98,127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 9} true;
  assume {:verifier.code 0} true;
  $i100 := $i92;
  assume {:branchcond $i99} true;
  goto $bb34, $bb35;
$bb34:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 9} true;
  assume {:verifier.code 0} true;
  assume ($i99 == 1);
  goto $bb32;
$bb35:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 989, 9} true;
  assume {:verifier.code 0} true;
  assume !($i99 == 1);
  goto $bb36;
$bb36:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 992, 3} true;
  assume {:verifier.code 0} true;
  $i95 := $i100;
  goto $bb30;
$bb37:
  assume ($i123 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 9} true;
  assume {:verifier.code 0} true;
  $i125 := $sext.i8.i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 11} true;
  assume {:verifier.code 0} true;
  $i126 := $slt.i32($i125,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i126} true;
  goto $bb40, $bb42;
$bb38:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 999, 7} true;
  assume {:verifier.code 0} true;
  assume !($i123 == 1);
  goto $bb39;
$bb39:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1004, 7} true;
  assume {:verifier.code 0} true;
  $i133 := $sext.i8.i32($i110);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1004, 9} true;
  assume {:verifier.code 0} true;
  $i134 := $srem.i32($i133,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1004, 7} true;
  assume {:verifier.code 0} true;
  $i135 := $trunc.i32.i8($i134);
  call {:cexpr "a"} boogie_si_record_i8($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1005, 8} true;
  assume {:verifier.code 0} true;
  $i136 := $sext.i8.i32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1005, 5} true;
  assume {:verifier.code 0} true;
  $i137 := $sext.i8.i32($i135);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1005, 5} true;
  assume {:verifier.code 0} true;
  $i138 := $add.i32($i137,$i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1005, 5} true;
  assume {:verifier.code 0} true;
  $i139 := $trunc.i32.i8($i138);
  call {:cexpr "a"} boogie_si_record_i8($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1006, 7} true;
  assume {:verifier.code 0} true;
  $i140 := $sext.i8.i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1006, 9} true;
  assume {:verifier.code 0} true;
  $i141 := $srem.i32($i140,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1006, 7} true;
  assume {:verifier.code 0} true;
  $i142 := $trunc.i32.i8($i141);
  call {:cexpr "b"} boogie_si_record_i8($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1007, 8} true;
  assume {:verifier.code 0} true;
  $i143 := $sext.i8.i32($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1007, 5} true;
  assume {:verifier.code 0} true;
  $i144 := $sext.i8.i32($i142);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1007, 5} true;
  assume {:verifier.code 0} true;
  $i145 := $add.i32($i144,$i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1007, 5} true;
  assume {:verifier.code 0} true;
  $i146 := $trunc.i32.i8($i145);
  call {:cexpr "b"} boogie_si_record_i8($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 8} true;
  assume {:verifier.code 0} true;
  $i147 := $sext.i8.i32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 5} true;
  assume {:verifier.code 0} true;
  $i148 := $sext.i8.i32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 5} true;
  assume {:verifier.code 0} true;
  $i149 := $add.i32($i148,$i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1009, 5} true;
  assume {:verifier.code 0} true;
  $i150 := $trunc.i32.i8($i149);
  call {:cexpr "c"} boogie_si_record_i8($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 7} true;
  assume {:verifier.code 0} true;
  $i151 := $sext.i8.i32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 9} true;
  assume {:verifier.code 0} true;
  $i152 := $slt.i32($i151,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 7} true;
  assume {:verifier.code 0} true;
  $i153 := $i150;
  assume {:branchcond $i152} true;
  goto $bb46, $bb47;
$bb40:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 15} true;
  assume {:verifier.code 0} true;
  assume ($i126 == 1);
  goto $bb41;
$bb41:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1001, 9} true;
  assume {:verifier.code 0} true;
  $i130 := $sext.i8.i32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1001, 9} true;
  assume {:verifier.code 0} true;
  $i131 := $add.i32($i130,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1001, 9} true;
  assume {:verifier.code 0} true;
  $i132 := $trunc.i32.i8($i131);
  call {:cexpr "c"} boogie_si_record_i8($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1002, 5} true;
  assume {:verifier.code 0} true;
  $i129 := $i132;
  goto $bb45;
$bb42:
  assume !($i126 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 18} true;
  assume {:verifier.code 0} true;
  $i127 := $sext.i8.i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 20} true;
  assume {:verifier.code 0} true;
  $i128 := $sgt.i32($i127,127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 9} true;
  assume {:verifier.code 0} true;
  $i129 := $i121;
  assume {:branchcond $i128} true;
  goto $bb43, $bb44;
$bb43:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 9} true;
  assume {:verifier.code 0} true;
  assume ($i128 == 1);
  goto $bb41;
$bb44:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1000, 9} true;
  assume {:verifier.code 0} true;
  assume !($i128 == 1);
  goto $bb45;
$bb45:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1003, 3} true;
  assume {:verifier.code 0} true;
  $i124 := $i129;
  goto $bb39;
$bb46:
  assume ($i152 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 9} true;
  assume {:verifier.code 0} true;
  $i154 := $sext.i8.i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 11} true;
  assume {:verifier.code 0} true;
  $i155 := $slt.i32($i154,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i155} true;
  goto $bb49, $bb51;
$bb47:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1010, 7} true;
  assume {:verifier.code 0} true;
  assume !($i152 == 1);
  goto $bb48;
$bb48:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1015, 7} true;
  assume {:verifier.code 0} true;
  $i162 := $sext.i8.i32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1015, 9} true;
  assume {:verifier.code 0} true;
  $i163 := $srem.i32($i162,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1015, 7} true;
  assume {:verifier.code 0} true;
  $i164 := $trunc.i32.i8($i163);
  call {:cexpr "a"} boogie_si_record_i8($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1016, 8} true;
  assume {:verifier.code 0} true;
  $i165 := $sext.i8.i32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1016, 5} true;
  assume {:verifier.code 0} true;
  $i166 := $sext.i8.i32($i164);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1016, 5} true;
  assume {:verifier.code 0} true;
  $i167 := $add.i32($i166,$i165);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1016, 5} true;
  assume {:verifier.code 0} true;
  $i168 := $trunc.i32.i8($i167);
  call {:cexpr "a"} boogie_si_record_i8($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1017, 7} true;
  assume {:verifier.code 0} true;
  $i169 := $sext.i8.i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1017, 9} true;
  assume {:verifier.code 0} true;
  $i170 := $srem.i32($i169,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1017, 7} true;
  assume {:verifier.code 0} true;
  $i171 := $trunc.i32.i8($i170);
  call {:cexpr "b"} boogie_si_record_i8($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1018, 8} true;
  assume {:verifier.code 0} true;
  $i172 := $sext.i8.i32($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1018, 5} true;
  assume {:verifier.code 0} true;
  $i173 := $sext.i8.i32($i171);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1018, 5} true;
  assume {:verifier.code 0} true;
  $i174 := $add.i32($i173,$i172);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1018, 5} true;
  assume {:verifier.code 0} true;
  $i175 := $trunc.i32.i8($i174);
  call {:cexpr "b"} boogie_si_record_i8($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1020, 8} true;
  assume {:verifier.code 0} true;
  $i176 := $sext.i8.i32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1020, 5} true;
  assume {:verifier.code 0} true;
  $i177 := $sext.i8.i32($i153);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1020, 5} true;
  assume {:verifier.code 0} true;
  $i178 := $add.i32($i177,$i176);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1020, 5} true;
  assume {:verifier.code 0} true;
  $i179 := $trunc.i32.i8($i178);
  call {:cexpr "c"} boogie_si_record_i8($i179);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 7} true;
  assume {:verifier.code 0} true;
  $i180 := $sext.i8.i32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 9} true;
  assume {:verifier.code 0} true;
  $i181 := $slt.i32($i180,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 7} true;
  assume {:verifier.code 0} true;
  $i182 := $i179;
  assume {:branchcond $i181} true;
  goto $bb55, $bb56;
$bb49:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 15} true;
  assume {:verifier.code 0} true;
  assume ($i155 == 1);
  goto $bb50;
$bb50:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1012, 9} true;
  assume {:verifier.code 0} true;
  $i159 := $sext.i8.i32($i150);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1012, 9} true;
  assume {:verifier.code 0} true;
  $i160 := $add.i32($i159,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1012, 9} true;
  assume {:verifier.code 0} true;
  $i161 := $trunc.i32.i8($i160);
  call {:cexpr "c"} boogie_si_record_i8($i161);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1013, 5} true;
  assume {:verifier.code 0} true;
  $i158 := $i161;
  goto $bb54;
$bb51:
  assume !($i155 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 18} true;
  assume {:verifier.code 0} true;
  $i156 := $sext.i8.i32($i146);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 20} true;
  assume {:verifier.code 0} true;
  $i157 := $sgt.i32($i156,127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 9} true;
  assume {:verifier.code 0} true;
  $i158 := $i150;
  assume {:branchcond $i157} true;
  goto $bb52, $bb53;
$bb52:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 9} true;
  assume {:verifier.code 0} true;
  assume ($i157 == 1);
  goto $bb50;
$bb53:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1011, 9} true;
  assume {:verifier.code 0} true;
  assume !($i157 == 1);
  goto $bb54;
$bb54:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1014, 3} true;
  assume {:verifier.code 0} true;
  $i153 := $i158;
  goto $bb48;
$bb55:
  assume ($i181 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $sext.i8.i32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 11} true;
  assume {:verifier.code 0} true;
  $i184 := $slt.i32($i183,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i184} true;
  goto $bb58, $bb60;
$bb56:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1021, 7} true;
  assume {:verifier.code 0} true;
  assume !($i181 == 1);
  goto $bb57;
$bb57:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1026, 7} true;
  assume {:verifier.code 0} true;
  $i191 := $sext.i8.i32($i168);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1026, 9} true;
  assume {:verifier.code 0} true;
  $i192 := $srem.i32($i191,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1026, 7} true;
  assume {:verifier.code 0} true;
  $i193 := $trunc.i32.i8($i192);
  call {:cexpr "a"} boogie_si_record_i8($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1027, 8} true;
  assume {:verifier.code 0} true;
  $i194 := $sext.i8.i32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1027, 5} true;
  assume {:verifier.code 0} true;
  $i195 := $sext.i8.i32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1027, 5} true;
  assume {:verifier.code 0} true;
  $i196 := $add.i32($i195,$i194);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1027, 5} true;
  assume {:verifier.code 0} true;
  $i197 := $trunc.i32.i8($i196);
  call {:cexpr "a"} boogie_si_record_i8($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1028, 7} true;
  assume {:verifier.code 0} true;
  $i198 := $sext.i8.i32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1028, 9} true;
  assume {:verifier.code 0} true;
  $i199 := $srem.i32($i198,128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1028, 7} true;
  assume {:verifier.code 0} true;
  $i200 := $trunc.i32.i8($i199);
  call {:cexpr "b"} boogie_si_record_i8($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1029, 8} true;
  assume {:verifier.code 0} true;
  $i201 := $sext.i8.i32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1029, 5} true;
  assume {:verifier.code 0} true;
  $i202 := $sext.i8.i32($i200);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1029, 5} true;
  assume {:verifier.code 0} true;
  $i203 := $add.i32($i202,$i201);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1029, 5} true;
  assume {:verifier.code 0} true;
  $i204 := $trunc.i32.i8($i203);
  call {:cexpr "b"} boogie_si_record_i8($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1031, 8} true;
  assume {:verifier.code 0} true;
  $i205 := $sext.i8.i32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1031, 5} true;
  assume {:verifier.code 0} true;
  $i206 := $sext.i8.i32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1031, 5} true;
  assume {:verifier.code 0} true;
  $i207 := $add.i32($i206,$i205);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1031, 5} true;
  assume {:verifier.code 0} true;
  $i208 := $trunc.i32.i8($i207);
  call {:cexpr "c"} boogie_si_record_i8($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 7} true;
  assume {:verifier.code 0} true;
  $i209 := $sext.i8.i32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 9} true;
  assume {:verifier.code 0} true;
  $i210 := $slt.i32($i209,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 7} true;
  assume {:verifier.code 0} true;
  $i211 := $i208;
  assume {:branchcond $i210} true;
  goto $bb64, $bb65;
$bb58:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 15} true;
  assume {:verifier.code 0} true;
  assume ($i184 == 1);
  goto $bb59;
$bb59:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1023, 9} true;
  assume {:verifier.code 0} true;
  $i188 := $sext.i8.i32($i179);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1023, 9} true;
  assume {:verifier.code 0} true;
  $i189 := $add.i32($i188,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1023, 9} true;
  assume {:verifier.code 0} true;
  $i190 := $trunc.i32.i8($i189);
  call {:cexpr "c"} boogie_si_record_i8($i190);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1024, 5} true;
  assume {:verifier.code 0} true;
  $i187 := $i190;
  goto $bb63;
$bb60:
  assume !($i184 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 18} true;
  assume {:verifier.code 0} true;
  $i185 := $sext.i8.i32($i175);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 20} true;
  assume {:verifier.code 0} true;
  $i186 := $sgt.i32($i185,127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 9} true;
  assume {:verifier.code 0} true;
  $i187 := $i179;
  assume {:branchcond $i186} true;
  goto $bb61, $bb62;
$bb61:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 9} true;
  assume {:verifier.code 0} true;
  assume ($i186 == 1);
  goto $bb59;
$bb62:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1022, 9} true;
  assume {:verifier.code 0} true;
  assume !($i186 == 1);
  goto $bb63;
$bb63:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1025, 3} true;
  assume {:verifier.code 0} true;
  $i182 := $i187;
  goto $bb57;
$bb64:
  assume ($i210 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 9} true;
  assume {:verifier.code 0} true;
  $i212 := $sext.i8.i32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 11} true;
  assume {:verifier.code 0} true;
  $i213 := $slt.i32($i212,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 15} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i213} true;
  goto $bb67, $bb69;
$bb65:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1032, 7} true;
  assume {:verifier.code 0} true;
  assume !($i210 == 1);
  goto $bb66;
$bb66:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1042, 3} true;
  assume {:verifier.code 0} true;
  $r := $i211;
  $exn := false;
  return;
$bb67:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 15} true;
  assume {:verifier.code 0} true;
  assume ($i213 == 1);
  goto $bb68;
$bb68:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1034, 9} true;
  assume {:verifier.code 0} true;
  $i217 := $sext.i8.i32($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1034, 9} true;
  assume {:verifier.code 0} true;
  $i218 := $add.i32($i217,1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1034, 9} true;
  assume {:verifier.code 0} true;
  $i219 := $trunc.i32.i8($i218);
  call {:cexpr "c"} boogie_si_record_i8($i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1035, 5} true;
  assume {:verifier.code 0} true;
  $i216 := $i219;
  goto $bb72;
$bb69:
  assume !($i213 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 18} true;
  assume {:verifier.code 0} true;
  $i214 := $sext.i8.i32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 20} true;
  assume {:verifier.code 0} true;
  $i215 := $sgt.i32($i214,127);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 9} true;
  assume {:verifier.code 0} true;
  $i216 := $i208;
  assume {:branchcond $i215} true;
  goto $bb70, $bb71;
$bb70:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 9} true;
  assume {:verifier.code 0} true;
  assume ($i215 == 1);
  goto $bb68;
$bb71:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1033, 9} true;
  assume {:verifier.code 0} true;
  assume !($i215 == 1);
  goto $bb72;
$bb72:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1036, 3} true;
  assume {:verifier.code 0} true;
  $i211 := $i216;
  goto $bb66;
}
const __SMACK_or32: ref;
axiom (__SMACK_or32 == $sub.ref(0,45408));
procedure {:inline 1} __SMACK_or32($i0: i32, $i1: i32) returns ($r: i32)
modifies $exn;
{
  var $i2: i32;
  var $i3: i1;
  var $i4: i32;
  var $i6: i1;
  var $i8: i32;
  var $i7: i32;
  var $i5: i32;
  var $i9: i32;
  var $i10: i64;
  var $i11: i64;
  var $i12: i32;
  var $i13: i32;
  var $i14: i64;
  var $i15: i64;
  var $i16: i32;
  var $i17: i32;
  var $i18: i1;
  var $i19: i32;
  var $i21: i1;
  var $i23: i32;
  var $i22: i32;
  var $i20: i32;
  var $i24: i32;
  var $i25: i64;
  var $i26: i64;
  var $i27: i32;
  var $i28: i32;
  var $i29: i64;
  var $i30: i64;
  var $i31: i32;
  var $i32: i32;
  var $i33: i1;
  var $i34: i32;
  var $i36: i1;
  var $i38: i32;
  var $i37: i32;
  var $i35: i32;
  var $i39: i32;
  var $i40: i64;
  var $i41: i64;
  var $i42: i32;
  var $i43: i32;
  var $i44: i64;
  var $i45: i64;
  var $i46: i32;
  var $i47: i32;
  var $i48: i1;
  var $i49: i32;
  var $i51: i1;
  var $i53: i32;
  var $i52: i32;
  var $i50: i32;
  var $i54: i32;
  var $i55: i64;
  var $i56: i64;
  var $i57: i32;
  var $i58: i32;
  var $i59: i64;
  var $i60: i64;
  var $i61: i32;
  var $i62: i32;
  var $i63: i1;
  var $i64: i32;
  var $i66: i1;
  var $i68: i32;
  var $i67: i32;
  var $i65: i32;
  var $i69: i32;
  var $i70: i64;
  var $i71: i64;
  var $i72: i32;
  var $i73: i32;
  var $i74: i64;
  var $i75: i64;
  var $i76: i32;
  var $i77: i32;
  var $i78: i1;
  var $i79: i32;
  var $i81: i1;
  var $i83: i32;
  var $i82: i32;
  var $i80: i32;
  var $i84: i32;
  var $i85: i64;
  var $i86: i64;
  var $i87: i32;
  var $i88: i32;
  var $i89: i64;
  var $i90: i64;
  var $i91: i32;
  var $i92: i32;
  var $i93: i1;
  var $i94: i32;
  var $i96: i1;
  var $i98: i32;
  var $i97: i32;
  var $i95: i32;
  var $i99: i32;
  var $i100: i64;
  var $i101: i64;
  var $i102: i32;
  var $i103: i32;
  var $i104: i64;
  var $i105: i64;
  var $i106: i32;
  var $i107: i32;
  var $i108: i1;
  var $i109: i32;
  var $i111: i1;
  var $i113: i32;
  var $i112: i32;
  var $i110: i32;
  var $i114: i32;
  var $i115: i64;
  var $i116: i64;
  var $i117: i32;
  var $i118: i32;
  var $i119: i64;
  var $i120: i64;
  var $i121: i32;
  var $i122: i32;
  var $i123: i1;
  var $i124: i32;
  var $i126: i1;
  var $i128: i32;
  var $i127: i32;
  var $i125: i32;
  var $i129: i32;
  var $i130: i64;
  var $i131: i64;
  var $i132: i32;
  var $i133: i32;
  var $i134: i64;
  var $i135: i64;
  var $i136: i32;
  var $i137: i32;
  var $i138: i1;
  var $i139: i32;
  var $i141: i1;
  var $i143: i32;
  var $i142: i32;
  var $i140: i32;
  var $i144: i32;
  var $i145: i64;
  var $i146: i64;
  var $i147: i32;
  var $i148: i32;
  var $i149: i64;
  var $i150: i64;
  var $i151: i32;
  var $i152: i32;
  var $i153: i1;
  var $i154: i32;
  var $i156: i1;
  var $i158: i32;
  var $i157: i32;
  var $i155: i32;
  var $i159: i32;
  var $i160: i64;
  var $i161: i64;
  var $i162: i32;
  var $i163: i32;
  var $i164: i64;
  var $i165: i64;
  var $i166: i32;
  var $i167: i32;
  var $i168: i1;
  var $i169: i32;
  var $i171: i1;
  var $i173: i32;
  var $i172: i32;
  var $i170: i32;
  var $i174: i32;
  var $i175: i64;
  var $i176: i64;
  var $i177: i32;
  var $i178: i32;
  var $i179: i64;
  var $i180: i64;
  var $i181: i32;
  var $i182: i32;
  var $i183: i1;
  var $i184: i32;
  var $i186: i1;
  var $i188: i32;
  var $i187: i32;
  var $i185: i32;
  var $i189: i32;
  var $i190: i64;
  var $i191: i64;
  var $i192: i32;
  var $i193: i32;
  var $i194: i64;
  var $i195: i64;
  var $i196: i32;
  var $i197: i32;
  var $i198: i1;
  var $i199: i32;
  var $i201: i1;
  var $i203: i32;
  var $i202: i32;
  var $i200: i32;
  var $i204: i32;
  var $i205: i64;
  var $i206: i64;
  var $i207: i32;
  var $i208: i32;
  var $i209: i64;
  var $i210: i64;
  var $i211: i32;
  var $i212: i32;
  var $i213: i1;
  var $i214: i32;
  var $i216: i1;
  var $i218: i32;
  var $i217: i32;
  var $i215: i32;
  var $i219: i32;
  var $i220: i64;
  var $i221: i64;
  var $i222: i32;
  var $i223: i32;
  var $i224: i64;
  var $i225: i64;
  var $i226: i32;
  var $i227: i32;
  var $i228: i1;
  var $i229: i32;
  var $i231: i1;
  var $i233: i32;
  var $i232: i32;
  var $i230: i32;
  var $i234: i32;
  var $i235: i64;
  var $i236: i64;
  var $i237: i32;
  var $i238: i32;
  var $i239: i64;
  var $i240: i64;
  var $i241: i32;
  var $i242: i32;
  var $i243: i1;
  var $i244: i32;
  var $i246: i1;
  var $i248: i32;
  var $i247: i32;
  var $i245: i32;
  var $i249: i32;
  var $i250: i64;
  var $i251: i64;
  var $i252: i32;
  var $i253: i32;
  var $i254: i64;
  var $i255: i64;
  var $i256: i32;
  var $i257: i32;
  var $i258: i1;
  var $i259: i32;
  var $i261: i1;
  var $i263: i32;
  var $i262: i32;
  var $i260: i32;
  var $i264: i32;
  var $i265: i64;
  var $i266: i64;
  var $i267: i32;
  var $i268: i32;
  var $i269: i64;
  var $i270: i64;
  var $i271: i32;
  var $i272: i32;
  var $i273: i1;
  var $i274: i32;
  var $i276: i1;
  var $i278: i32;
  var $i277: i32;
  var $i275: i32;
  var $i279: i32;
  var $i280: i64;
  var $i281: i64;
  var $i282: i32;
  var $i283: i32;
  var $i284: i64;
  var $i285: i64;
  var $i286: i32;
  var $i287: i32;
  var $i288: i1;
  var $i289: i32;
  var $i291: i1;
  var $i293: i32;
  var $i292: i32;
  var $i290: i32;
  var $i294: i32;
  var $i295: i64;
  var $i296: i64;
  var $i297: i32;
  var $i298: i32;
  var $i299: i64;
  var $i300: i64;
  var $i301: i32;
  var $i302: i32;
  var $i303: i1;
  var $i304: i32;
  var $i306: i1;
  var $i308: i32;
  var $i307: i32;
  var $i305: i32;
  var $i309: i32;
  var $i310: i64;
  var $i311: i64;
  var $i312: i32;
  var $i313: i32;
  var $i314: i64;
  var $i315: i64;
  var $i316: i32;
  var $i317: i32;
  var $i318: i1;
  var $i319: i32;
  var $i321: i1;
  var $i323: i32;
  var $i322: i32;
  var $i320: i32;
  var $i324: i32;
  var $i325: i64;
  var $i326: i64;
  var $i327: i32;
  var $i328: i32;
  var $i329: i64;
  var $i330: i64;
  var $i331: i32;
  var $i332: i32;
  var $i333: i1;
  var $i334: i32;
  var $i336: i1;
  var $i338: i32;
  var $i337: i32;
  var $i335: i32;
  var $i339: i32;
  var $i340: i64;
  var $i341: i64;
  var $i342: i32;
  var $i343: i32;
  var $i344: i64;
  var $i345: i64;
  var $i346: i32;
  var $i347: i32;
  var $i348: i1;
  var $i349: i32;
  var $i351: i1;
  var $i353: i32;
  var $i352: i32;
  var $i350: i32;
  var $i354: i32;
  var $i355: i64;
  var $i356: i64;
  var $i357: i32;
  var $i358: i32;
  var $i359: i64;
  var $i360: i64;
  var $i361: i32;
  var $i362: i32;
  var $i363: i1;
  var $i364: i32;
  var $i366: i1;
  var $i368: i32;
  var $i367: i32;
  var $i365: i32;
  var $i369: i32;
  var $i370: i64;
  var $i371: i64;
  var $i372: i32;
  var $i373: i32;
  var $i374: i64;
  var $i375: i64;
  var $i376: i32;
  var $i377: i32;
  var $i378: i1;
  var $i379: i32;
  var $i381: i1;
  var $i383: i32;
  var $i382: i32;
  var $i380: i32;
  var $i384: i32;
  var $i385: i64;
  var $i386: i64;
  var $i387: i32;
  var $i388: i32;
  var $i389: i64;
  var $i390: i64;
  var $i391: i32;
  var $i392: i32;
  var $i393: i1;
  var $i394: i32;
  var $i396: i1;
  var $i398: i32;
  var $i397: i32;
  var $i395: i32;
  var $i399: i32;
  var $i400: i64;
  var $i401: i64;
  var $i402: i32;
  var $i403: i32;
  var $i404: i64;
  var $i405: i64;
  var $i406: i32;
  var $i407: i32;
  var $i408: i1;
  var $i409: i32;
  var $i411: i1;
  var $i413: i32;
  var $i412: i32;
  var $i410: i32;
  var $i414: i32;
  var $i415: i64;
  var $i416: i64;
  var $i417: i32;
  var $i418: i32;
  var $i419: i64;
  var $i420: i64;
  var $i421: i32;
  var $i422: i32;
  var $i423: i1;
  var $i424: i32;
  var $i426: i1;
  var $i428: i32;
  var $i427: i32;
  var $i425: i32;
  var $i429: i32;
  var $i430: i64;
  var $i431: i64;
  var $i432: i32;
  var $i433: i32;
  var $i434: i64;
  var $i435: i64;
  var $i436: i32;
  var $i437: i32;
  var $i438: i1;
  var $i439: i32;
  var $i441: i1;
  var $i443: i32;
  var $i442: i32;
  var $i440: i32;
  var $i444: i32;
  var $i445: i64;
  var $i446: i64;
  var $i447: i32;
  var $i448: i32;
  var $i449: i64;
  var $i450: i64;
  var $i451: i32;
  var $i452: i32;
  var $i453: i1;
  var $i454: i32;
  var $i456: i1;
  var $i458: i32;
  var $i457: i32;
  var $i455: i32;
  var $i459: i32;
  var $i460: i64;
  var $i461: i64;
  var $i462: i32;
  var $i463: i32;
  var $i464: i64;
  var $i465: i64;
  var $i466: i32;
  var $i467: i32;
  var $i468: i1;
  var $i469: i32;
  var $i471: i1;
  var $i473: i32;
  var $i472: i32;
  var $i470: i32;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1048, 5} true;
  assume {:verifier.code 0} true;
  call {:cexpr "__SMACK_or32:arg:a"} boogie_si_record_i32($i0);
  call {:cexpr "__SMACK_or32:arg:b"} boogie_si_record_i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1048, 5} true;
  assume {:verifier.code 0} true;
  $i2 := $add.i32(0,0);
  call {:cexpr "c"} boogie_si_record_i32($i2);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1049, 9} true;
  assume {:verifier.code 0} true;
  $i3 := $slt.i32($i0,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1049, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i3} true;
  goto $bb1, $bb2;
$bb1:
  assume ($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1050, 7} true;
  assume {:verifier.code 0} true;
  $i4 := $add.i32($i2,1);
  call {:cexpr "c"} boogie_si_record_i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1051, 3} true;
  assume {:verifier.code 0} true;
  $i5 := $i4;
  goto $bb3;
$bb2:
  assume !($i3 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1051, 16} true;
  assume {:verifier.code 0} true;
  $i6 := $slt.i32($i1,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1051, 14} true;
  assume {:verifier.code 0} true;
  $i7 := $i2;
  assume {:branchcond $i6} true;
  goto $bb4, $bb5;
$bb3:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1054, 5} true;
  assume {:verifier.code 0} true;
  $i9 := $add.i32($i0,$i0);
  call {:cexpr "a"} boogie_si_record_i32($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1055, 7} true;
  assume {:verifier.code 0} true;
  $i10 := $sext.i32.i64($i9);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1055, 9} true;
  assume {:verifier.code 0} true;
  $i11 := $srem.i64($i10,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1055, 7} true;
  assume {:verifier.code 0} true;
  $i12 := $trunc.i64.i32($i11);
  call {:cexpr "a"} boogie_si_record_i32($i12);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1056, 5} true;
  assume {:verifier.code 0} true;
  $i13 := $add.i32($i1,$i1);
  call {:cexpr "b"} boogie_si_record_i32($i13);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1057, 7} true;
  assume {:verifier.code 0} true;
  $i14 := $sext.i32.i64($i13);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1057, 9} true;
  assume {:verifier.code 0} true;
  $i15 := $srem.i64($i14,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1057, 7} true;
  assume {:verifier.code 0} true;
  $i16 := $trunc.i64.i32($i15);
  call {:cexpr "b"} boogie_si_record_i32($i16);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1059, 5} true;
  assume {:verifier.code 0} true;
  $i17 := $add.i32($i5,$i5);
  call {:cexpr "c"} boogie_si_record_i32($i17);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1060, 9} true;
  assume {:verifier.code 0} true;
  $i18 := $slt.i32($i12,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1060, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i18} true;
  goto $bb7, $bb8;
$bb4:
  assume ($i6 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1052, 7} true;
  assume {:verifier.code 0} true;
  $i8 := $add.i32($i2,1);
  call {:cexpr "c"} boogie_si_record_i32($i8);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1053, 3} true;
  assume {:verifier.code 0} true;
  $i7 := $i8;
  goto $bb6;
$bb5:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1051, 14} true;
  assume {:verifier.code 0} true;
  assume !($i6 == 1);
  goto $bb6;
$bb6:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i5 := $i7;
  goto $bb3;
$bb7:
  assume ($i18 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1061, 7} true;
  assume {:verifier.code 0} true;
  $i19 := $add.i32($i17,1);
  call {:cexpr "c"} boogie_si_record_i32($i19);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1062, 3} true;
  assume {:verifier.code 0} true;
  $i20 := $i19;
  goto $bb9;
$bb8:
  assume !($i18 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1062, 16} true;
  assume {:verifier.code 0} true;
  $i21 := $slt.i32($i16,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1062, 14} true;
  assume {:verifier.code 0} true;
  $i22 := $i17;
  assume {:branchcond $i21} true;
  goto $bb10, $bb11;
$bb9:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1065, 5} true;
  assume {:verifier.code 0} true;
  $i24 := $add.i32($i12,$i12);
  call {:cexpr "a"} boogie_si_record_i32($i24);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1066, 7} true;
  assume {:verifier.code 0} true;
  $i25 := $sext.i32.i64($i24);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1066, 9} true;
  assume {:verifier.code 0} true;
  $i26 := $srem.i64($i25,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1066, 7} true;
  assume {:verifier.code 0} true;
  $i27 := $trunc.i64.i32($i26);
  call {:cexpr "a"} boogie_si_record_i32($i27);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1067, 5} true;
  assume {:verifier.code 0} true;
  $i28 := $add.i32($i16,$i16);
  call {:cexpr "b"} boogie_si_record_i32($i28);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1068, 7} true;
  assume {:verifier.code 0} true;
  $i29 := $sext.i32.i64($i28);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1068, 9} true;
  assume {:verifier.code 0} true;
  $i30 := $srem.i64($i29,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1068, 7} true;
  assume {:verifier.code 0} true;
  $i31 := $trunc.i64.i32($i30);
  call {:cexpr "b"} boogie_si_record_i32($i31);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1070, 5} true;
  assume {:verifier.code 0} true;
  $i32 := $add.i32($i20,$i20);
  call {:cexpr "c"} boogie_si_record_i32($i32);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1071, 9} true;
  assume {:verifier.code 0} true;
  $i33 := $slt.i32($i27,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1071, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i33} true;
  goto $bb13, $bb14;
$bb10:
  assume ($i21 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1063, 7} true;
  assume {:verifier.code 0} true;
  $i23 := $add.i32($i17,1);
  call {:cexpr "c"} boogie_si_record_i32($i23);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1064, 3} true;
  assume {:verifier.code 0} true;
  $i22 := $i23;
  goto $bb12;
$bb11:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1062, 14} true;
  assume {:verifier.code 0} true;
  assume !($i21 == 1);
  goto $bb12;
$bb12:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i20 := $i22;
  goto $bb9;
$bb13:
  assume ($i33 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1072, 7} true;
  assume {:verifier.code 0} true;
  $i34 := $add.i32($i32,1);
  call {:cexpr "c"} boogie_si_record_i32($i34);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1073, 3} true;
  assume {:verifier.code 0} true;
  $i35 := $i34;
  goto $bb15;
$bb14:
  assume !($i33 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1073, 16} true;
  assume {:verifier.code 0} true;
  $i36 := $slt.i32($i31,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1073, 14} true;
  assume {:verifier.code 0} true;
  $i37 := $i32;
  assume {:branchcond $i36} true;
  goto $bb16, $bb17;
$bb15:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1076, 5} true;
  assume {:verifier.code 0} true;
  $i39 := $add.i32($i27,$i27);
  call {:cexpr "a"} boogie_si_record_i32($i39);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1077, 7} true;
  assume {:verifier.code 0} true;
  $i40 := $sext.i32.i64($i39);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1077, 9} true;
  assume {:verifier.code 0} true;
  $i41 := $srem.i64($i40,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1077, 7} true;
  assume {:verifier.code 0} true;
  $i42 := $trunc.i64.i32($i41);
  call {:cexpr "a"} boogie_si_record_i32($i42);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1078, 5} true;
  assume {:verifier.code 0} true;
  $i43 := $add.i32($i31,$i31);
  call {:cexpr "b"} boogie_si_record_i32($i43);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1079, 7} true;
  assume {:verifier.code 0} true;
  $i44 := $sext.i32.i64($i43);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1079, 9} true;
  assume {:verifier.code 0} true;
  $i45 := $srem.i64($i44,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1079, 7} true;
  assume {:verifier.code 0} true;
  $i46 := $trunc.i64.i32($i45);
  call {:cexpr "b"} boogie_si_record_i32($i46);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1081, 5} true;
  assume {:verifier.code 0} true;
  $i47 := $add.i32($i35,$i35);
  call {:cexpr "c"} boogie_si_record_i32($i47);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1082, 9} true;
  assume {:verifier.code 0} true;
  $i48 := $slt.i32($i42,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1082, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i48} true;
  goto $bb19, $bb20;
$bb16:
  assume ($i36 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1074, 7} true;
  assume {:verifier.code 0} true;
  $i38 := $add.i32($i32,1);
  call {:cexpr "c"} boogie_si_record_i32($i38);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1075, 3} true;
  assume {:verifier.code 0} true;
  $i37 := $i38;
  goto $bb18;
$bb17:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1073, 14} true;
  assume {:verifier.code 0} true;
  assume !($i36 == 1);
  goto $bb18;
$bb18:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i35 := $i37;
  goto $bb15;
$bb19:
  assume ($i48 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1083, 7} true;
  assume {:verifier.code 0} true;
  $i49 := $add.i32($i47,1);
  call {:cexpr "c"} boogie_si_record_i32($i49);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1084, 3} true;
  assume {:verifier.code 0} true;
  $i50 := $i49;
  goto $bb21;
$bb20:
  assume !($i48 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1084, 16} true;
  assume {:verifier.code 0} true;
  $i51 := $slt.i32($i46,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1084, 14} true;
  assume {:verifier.code 0} true;
  $i52 := $i47;
  assume {:branchcond $i51} true;
  goto $bb22, $bb23;
$bb21:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1087, 5} true;
  assume {:verifier.code 0} true;
  $i54 := $add.i32($i42,$i42);
  call {:cexpr "a"} boogie_si_record_i32($i54);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1088, 7} true;
  assume {:verifier.code 0} true;
  $i55 := $sext.i32.i64($i54);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1088, 9} true;
  assume {:verifier.code 0} true;
  $i56 := $srem.i64($i55,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1088, 7} true;
  assume {:verifier.code 0} true;
  $i57 := $trunc.i64.i32($i56);
  call {:cexpr "a"} boogie_si_record_i32($i57);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1089, 5} true;
  assume {:verifier.code 0} true;
  $i58 := $add.i32($i46,$i46);
  call {:cexpr "b"} boogie_si_record_i32($i58);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1090, 7} true;
  assume {:verifier.code 0} true;
  $i59 := $sext.i32.i64($i58);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1090, 9} true;
  assume {:verifier.code 0} true;
  $i60 := $srem.i64($i59,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1090, 7} true;
  assume {:verifier.code 0} true;
  $i61 := $trunc.i64.i32($i60);
  call {:cexpr "b"} boogie_si_record_i32($i61);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1092, 5} true;
  assume {:verifier.code 0} true;
  $i62 := $add.i32($i50,$i50);
  call {:cexpr "c"} boogie_si_record_i32($i62);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1093, 9} true;
  assume {:verifier.code 0} true;
  $i63 := $slt.i32($i57,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1093, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i63} true;
  goto $bb25, $bb26;
$bb22:
  assume ($i51 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1085, 7} true;
  assume {:verifier.code 0} true;
  $i53 := $add.i32($i47,1);
  call {:cexpr "c"} boogie_si_record_i32($i53);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1086, 3} true;
  assume {:verifier.code 0} true;
  $i52 := $i53;
  goto $bb24;
$bb23:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1084, 14} true;
  assume {:verifier.code 0} true;
  assume !($i51 == 1);
  goto $bb24;
$bb24:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i50 := $i52;
  goto $bb21;
$bb25:
  assume ($i63 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1094, 7} true;
  assume {:verifier.code 0} true;
  $i64 := $add.i32($i62,1);
  call {:cexpr "c"} boogie_si_record_i32($i64);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1095, 3} true;
  assume {:verifier.code 0} true;
  $i65 := $i64;
  goto $bb27;
$bb26:
  assume !($i63 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1095, 16} true;
  assume {:verifier.code 0} true;
  $i66 := $slt.i32($i61,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1095, 14} true;
  assume {:verifier.code 0} true;
  $i67 := $i62;
  assume {:branchcond $i66} true;
  goto $bb28, $bb29;
$bb27:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1098, 5} true;
  assume {:verifier.code 0} true;
  $i69 := $add.i32($i57,$i57);
  call {:cexpr "a"} boogie_si_record_i32($i69);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1099, 7} true;
  assume {:verifier.code 0} true;
  $i70 := $sext.i32.i64($i69);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1099, 9} true;
  assume {:verifier.code 0} true;
  $i71 := $srem.i64($i70,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1099, 7} true;
  assume {:verifier.code 0} true;
  $i72 := $trunc.i64.i32($i71);
  call {:cexpr "a"} boogie_si_record_i32($i72);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1100, 5} true;
  assume {:verifier.code 0} true;
  $i73 := $add.i32($i61,$i61);
  call {:cexpr "b"} boogie_si_record_i32($i73);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1101, 7} true;
  assume {:verifier.code 0} true;
  $i74 := $sext.i32.i64($i73);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1101, 9} true;
  assume {:verifier.code 0} true;
  $i75 := $srem.i64($i74,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1101, 7} true;
  assume {:verifier.code 0} true;
  $i76 := $trunc.i64.i32($i75);
  call {:cexpr "b"} boogie_si_record_i32($i76);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1103, 5} true;
  assume {:verifier.code 0} true;
  $i77 := $add.i32($i65,$i65);
  call {:cexpr "c"} boogie_si_record_i32($i77);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1104, 9} true;
  assume {:verifier.code 0} true;
  $i78 := $slt.i32($i72,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1104, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i78} true;
  goto $bb31, $bb32;
$bb28:
  assume ($i66 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1096, 7} true;
  assume {:verifier.code 0} true;
  $i68 := $add.i32($i62,1);
  call {:cexpr "c"} boogie_si_record_i32($i68);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1097, 3} true;
  assume {:verifier.code 0} true;
  $i67 := $i68;
  goto $bb30;
$bb29:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1095, 14} true;
  assume {:verifier.code 0} true;
  assume !($i66 == 1);
  goto $bb30;
$bb30:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i65 := $i67;
  goto $bb27;
$bb31:
  assume ($i78 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1105, 7} true;
  assume {:verifier.code 0} true;
  $i79 := $add.i32($i77,1);
  call {:cexpr "c"} boogie_si_record_i32($i79);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1106, 3} true;
  assume {:verifier.code 0} true;
  $i80 := $i79;
  goto $bb33;
$bb32:
  assume !($i78 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1106, 16} true;
  assume {:verifier.code 0} true;
  $i81 := $slt.i32($i76,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1106, 14} true;
  assume {:verifier.code 0} true;
  $i82 := $i77;
  assume {:branchcond $i81} true;
  goto $bb34, $bb35;
$bb33:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1109, 5} true;
  assume {:verifier.code 0} true;
  $i84 := $add.i32($i72,$i72);
  call {:cexpr "a"} boogie_si_record_i32($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1110, 7} true;
  assume {:verifier.code 0} true;
  $i85 := $sext.i32.i64($i84);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1110, 9} true;
  assume {:verifier.code 0} true;
  $i86 := $srem.i64($i85,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1110, 7} true;
  assume {:verifier.code 0} true;
  $i87 := $trunc.i64.i32($i86);
  call {:cexpr "a"} boogie_si_record_i32($i87);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1111, 5} true;
  assume {:verifier.code 0} true;
  $i88 := $add.i32($i76,$i76);
  call {:cexpr "b"} boogie_si_record_i32($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1112, 7} true;
  assume {:verifier.code 0} true;
  $i89 := $sext.i32.i64($i88);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1112, 9} true;
  assume {:verifier.code 0} true;
  $i90 := $srem.i64($i89,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1112, 7} true;
  assume {:verifier.code 0} true;
  $i91 := $trunc.i64.i32($i90);
  call {:cexpr "b"} boogie_si_record_i32($i91);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1114, 5} true;
  assume {:verifier.code 0} true;
  $i92 := $add.i32($i80,$i80);
  call {:cexpr "c"} boogie_si_record_i32($i92);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1115, 9} true;
  assume {:verifier.code 0} true;
  $i93 := $slt.i32($i87,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1115, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i93} true;
  goto $bb37, $bb38;
$bb34:
  assume ($i81 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1107, 7} true;
  assume {:verifier.code 0} true;
  $i83 := $add.i32($i77,1);
  call {:cexpr "c"} boogie_si_record_i32($i83);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1108, 3} true;
  assume {:verifier.code 0} true;
  $i82 := $i83;
  goto $bb36;
$bb35:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1106, 14} true;
  assume {:verifier.code 0} true;
  assume !($i81 == 1);
  goto $bb36;
$bb36:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i80 := $i82;
  goto $bb33;
$bb37:
  assume ($i93 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1116, 7} true;
  assume {:verifier.code 0} true;
  $i94 := $add.i32($i92,1);
  call {:cexpr "c"} boogie_si_record_i32($i94);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1117, 3} true;
  assume {:verifier.code 0} true;
  $i95 := $i94;
  goto $bb39;
$bb38:
  assume !($i93 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1117, 16} true;
  assume {:verifier.code 0} true;
  $i96 := $slt.i32($i91,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1117, 14} true;
  assume {:verifier.code 0} true;
  $i97 := $i92;
  assume {:branchcond $i96} true;
  goto $bb40, $bb41;
$bb39:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1120, 5} true;
  assume {:verifier.code 0} true;
  $i99 := $add.i32($i87,$i87);
  call {:cexpr "a"} boogie_si_record_i32($i99);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1121, 7} true;
  assume {:verifier.code 0} true;
  $i100 := $sext.i32.i64($i99);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1121, 9} true;
  assume {:verifier.code 0} true;
  $i101 := $srem.i64($i100,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1121, 7} true;
  assume {:verifier.code 0} true;
  $i102 := $trunc.i64.i32($i101);
  call {:cexpr "a"} boogie_si_record_i32($i102);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1122, 5} true;
  assume {:verifier.code 0} true;
  $i103 := $add.i32($i91,$i91);
  call {:cexpr "b"} boogie_si_record_i32($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1123, 7} true;
  assume {:verifier.code 0} true;
  $i104 := $sext.i32.i64($i103);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1123, 9} true;
  assume {:verifier.code 0} true;
  $i105 := $srem.i64($i104,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1123, 7} true;
  assume {:verifier.code 0} true;
  $i106 := $trunc.i64.i32($i105);
  call {:cexpr "b"} boogie_si_record_i32($i106);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1125, 5} true;
  assume {:verifier.code 0} true;
  $i107 := $add.i32($i95,$i95);
  call {:cexpr "c"} boogie_si_record_i32($i107);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1126, 9} true;
  assume {:verifier.code 0} true;
  $i108 := $slt.i32($i102,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1126, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i108} true;
  goto $bb43, $bb44;
$bb40:
  assume ($i96 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1118, 7} true;
  assume {:verifier.code 0} true;
  $i98 := $add.i32($i92,1);
  call {:cexpr "c"} boogie_si_record_i32($i98);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1119, 3} true;
  assume {:verifier.code 0} true;
  $i97 := $i98;
  goto $bb42;
$bb41:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1117, 14} true;
  assume {:verifier.code 0} true;
  assume !($i96 == 1);
  goto $bb42;
$bb42:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i95 := $i97;
  goto $bb39;
$bb43:
  assume ($i108 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1127, 7} true;
  assume {:verifier.code 0} true;
  $i109 := $add.i32($i107,1);
  call {:cexpr "c"} boogie_si_record_i32($i109);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 3} true;
  assume {:verifier.code 0} true;
  $i110 := $i109;
  goto $bb45;
$bb44:
  assume !($i108 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 16} true;
  assume {:verifier.code 0} true;
  $i111 := $slt.i32($i106,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 14} true;
  assume {:verifier.code 0} true;
  $i112 := $i107;
  assume {:branchcond $i111} true;
  goto $bb46, $bb47;
$bb45:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1131, 5} true;
  assume {:verifier.code 0} true;
  $i114 := $add.i32($i102,$i102);
  call {:cexpr "a"} boogie_si_record_i32($i114);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1132, 7} true;
  assume {:verifier.code 0} true;
  $i115 := $sext.i32.i64($i114);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1132, 9} true;
  assume {:verifier.code 0} true;
  $i116 := $srem.i64($i115,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1132, 7} true;
  assume {:verifier.code 0} true;
  $i117 := $trunc.i64.i32($i116);
  call {:cexpr "a"} boogie_si_record_i32($i117);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1133, 5} true;
  assume {:verifier.code 0} true;
  $i118 := $add.i32($i106,$i106);
  call {:cexpr "b"} boogie_si_record_i32($i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1134, 7} true;
  assume {:verifier.code 0} true;
  $i119 := $sext.i32.i64($i118);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1134, 9} true;
  assume {:verifier.code 0} true;
  $i120 := $srem.i64($i119,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1134, 7} true;
  assume {:verifier.code 0} true;
  $i121 := $trunc.i64.i32($i120);
  call {:cexpr "b"} boogie_si_record_i32($i121);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1136, 5} true;
  assume {:verifier.code 0} true;
  $i122 := $add.i32($i110,$i110);
  call {:cexpr "c"} boogie_si_record_i32($i122);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1137, 9} true;
  assume {:verifier.code 0} true;
  $i123 := $slt.i32($i117,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1137, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i123} true;
  goto $bb49, $bb50;
$bb46:
  assume ($i111 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1129, 7} true;
  assume {:verifier.code 0} true;
  $i113 := $add.i32($i107,1);
  call {:cexpr "c"} boogie_si_record_i32($i113);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1130, 3} true;
  assume {:verifier.code 0} true;
  $i112 := $i113;
  goto $bb48;
$bb47:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1128, 14} true;
  assume {:verifier.code 0} true;
  assume !($i111 == 1);
  goto $bb48;
$bb48:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i110 := $i112;
  goto $bb45;
$bb49:
  assume ($i123 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1138, 7} true;
  assume {:verifier.code 0} true;
  $i124 := $add.i32($i122,1);
  call {:cexpr "c"} boogie_si_record_i32($i124);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1139, 3} true;
  assume {:verifier.code 0} true;
  $i125 := $i124;
  goto $bb51;
$bb50:
  assume !($i123 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1139, 16} true;
  assume {:verifier.code 0} true;
  $i126 := $slt.i32($i121,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1139, 14} true;
  assume {:verifier.code 0} true;
  $i127 := $i122;
  assume {:branchcond $i126} true;
  goto $bb52, $bb53;
$bb51:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1142, 5} true;
  assume {:verifier.code 0} true;
  $i129 := $add.i32($i117,$i117);
  call {:cexpr "a"} boogie_si_record_i32($i129);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1143, 7} true;
  assume {:verifier.code 0} true;
  $i130 := $sext.i32.i64($i129);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1143, 9} true;
  assume {:verifier.code 0} true;
  $i131 := $srem.i64($i130,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1143, 7} true;
  assume {:verifier.code 0} true;
  $i132 := $trunc.i64.i32($i131);
  call {:cexpr "a"} boogie_si_record_i32($i132);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1144, 5} true;
  assume {:verifier.code 0} true;
  $i133 := $add.i32($i121,$i121);
  call {:cexpr "b"} boogie_si_record_i32($i133);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1145, 7} true;
  assume {:verifier.code 0} true;
  $i134 := $sext.i32.i64($i133);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1145, 9} true;
  assume {:verifier.code 0} true;
  $i135 := $srem.i64($i134,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1145, 7} true;
  assume {:verifier.code 0} true;
  $i136 := $trunc.i64.i32($i135);
  call {:cexpr "b"} boogie_si_record_i32($i136);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1147, 5} true;
  assume {:verifier.code 0} true;
  $i137 := $add.i32($i125,$i125);
  call {:cexpr "c"} boogie_si_record_i32($i137);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1148, 9} true;
  assume {:verifier.code 0} true;
  $i138 := $slt.i32($i132,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1148, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i138} true;
  goto $bb55, $bb56;
$bb52:
  assume ($i126 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1140, 7} true;
  assume {:verifier.code 0} true;
  $i128 := $add.i32($i122,1);
  call {:cexpr "c"} boogie_si_record_i32($i128);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1141, 3} true;
  assume {:verifier.code 0} true;
  $i127 := $i128;
  goto $bb54;
$bb53:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1139, 14} true;
  assume {:verifier.code 0} true;
  assume !($i126 == 1);
  goto $bb54;
$bb54:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i125 := $i127;
  goto $bb51;
$bb55:
  assume ($i138 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1149, 7} true;
  assume {:verifier.code 0} true;
  $i139 := $add.i32($i137,1);
  call {:cexpr "c"} boogie_si_record_i32($i139);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1150, 3} true;
  assume {:verifier.code 0} true;
  $i140 := $i139;
  goto $bb57;
$bb56:
  assume !($i138 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1150, 16} true;
  assume {:verifier.code 0} true;
  $i141 := $slt.i32($i136,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1150, 14} true;
  assume {:verifier.code 0} true;
  $i142 := $i137;
  assume {:branchcond $i141} true;
  goto $bb58, $bb59;
$bb57:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1153, 5} true;
  assume {:verifier.code 0} true;
  $i144 := $add.i32($i132,$i132);
  call {:cexpr "a"} boogie_si_record_i32($i144);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1154, 7} true;
  assume {:verifier.code 0} true;
  $i145 := $sext.i32.i64($i144);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1154, 9} true;
  assume {:verifier.code 0} true;
  $i146 := $srem.i64($i145,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1154, 7} true;
  assume {:verifier.code 0} true;
  $i147 := $trunc.i64.i32($i146);
  call {:cexpr "a"} boogie_si_record_i32($i147);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1155, 5} true;
  assume {:verifier.code 0} true;
  $i148 := $add.i32($i136,$i136);
  call {:cexpr "b"} boogie_si_record_i32($i148);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1156, 7} true;
  assume {:verifier.code 0} true;
  $i149 := $sext.i32.i64($i148);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1156, 9} true;
  assume {:verifier.code 0} true;
  $i150 := $srem.i64($i149,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1156, 7} true;
  assume {:verifier.code 0} true;
  $i151 := $trunc.i64.i32($i150);
  call {:cexpr "b"} boogie_si_record_i32($i151);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1158, 5} true;
  assume {:verifier.code 0} true;
  $i152 := $add.i32($i140,$i140);
  call {:cexpr "c"} boogie_si_record_i32($i152);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1159, 9} true;
  assume {:verifier.code 0} true;
  $i153 := $slt.i32($i147,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1159, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i153} true;
  goto $bb61, $bb62;
$bb58:
  assume ($i141 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1151, 7} true;
  assume {:verifier.code 0} true;
  $i143 := $add.i32($i137,1);
  call {:cexpr "c"} boogie_si_record_i32($i143);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1152, 3} true;
  assume {:verifier.code 0} true;
  $i142 := $i143;
  goto $bb60;
$bb59:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1150, 14} true;
  assume {:verifier.code 0} true;
  assume !($i141 == 1);
  goto $bb60;
$bb60:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i140 := $i142;
  goto $bb57;
$bb61:
  assume ($i153 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1160, 7} true;
  assume {:verifier.code 0} true;
  $i154 := $add.i32($i152,1);
  call {:cexpr "c"} boogie_si_record_i32($i154);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1161, 3} true;
  assume {:verifier.code 0} true;
  $i155 := $i154;
  goto $bb63;
$bb62:
  assume !($i153 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1161, 16} true;
  assume {:verifier.code 0} true;
  $i156 := $slt.i32($i151,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1161, 14} true;
  assume {:verifier.code 0} true;
  $i157 := $i152;
  assume {:branchcond $i156} true;
  goto $bb64, $bb65;
$bb63:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1164, 5} true;
  assume {:verifier.code 0} true;
  $i159 := $add.i32($i147,$i147);
  call {:cexpr "a"} boogie_si_record_i32($i159);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1165, 7} true;
  assume {:verifier.code 0} true;
  $i160 := $sext.i32.i64($i159);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1165, 9} true;
  assume {:verifier.code 0} true;
  $i161 := $srem.i64($i160,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1165, 7} true;
  assume {:verifier.code 0} true;
  $i162 := $trunc.i64.i32($i161);
  call {:cexpr "a"} boogie_si_record_i32($i162);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1166, 5} true;
  assume {:verifier.code 0} true;
  $i163 := $add.i32($i151,$i151);
  call {:cexpr "b"} boogie_si_record_i32($i163);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1167, 7} true;
  assume {:verifier.code 0} true;
  $i164 := $sext.i32.i64($i163);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1167, 9} true;
  assume {:verifier.code 0} true;
  $i165 := $srem.i64($i164,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1167, 7} true;
  assume {:verifier.code 0} true;
  $i166 := $trunc.i64.i32($i165);
  call {:cexpr "b"} boogie_si_record_i32($i166);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1169, 5} true;
  assume {:verifier.code 0} true;
  $i167 := $add.i32($i155,$i155);
  call {:cexpr "c"} boogie_si_record_i32($i167);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1170, 9} true;
  assume {:verifier.code 0} true;
  $i168 := $slt.i32($i162,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1170, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i168} true;
  goto $bb67, $bb68;
$bb64:
  assume ($i156 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1162, 7} true;
  assume {:verifier.code 0} true;
  $i158 := $add.i32($i152,1);
  call {:cexpr "c"} boogie_si_record_i32($i158);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1163, 3} true;
  assume {:verifier.code 0} true;
  $i157 := $i158;
  goto $bb66;
$bb65:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1161, 14} true;
  assume {:verifier.code 0} true;
  assume !($i156 == 1);
  goto $bb66;
$bb66:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i155 := $i157;
  goto $bb63;
$bb67:
  assume ($i168 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1171, 7} true;
  assume {:verifier.code 0} true;
  $i169 := $add.i32($i167,1);
  call {:cexpr "c"} boogie_si_record_i32($i169);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1172, 3} true;
  assume {:verifier.code 0} true;
  $i170 := $i169;
  goto $bb69;
$bb68:
  assume !($i168 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1172, 16} true;
  assume {:verifier.code 0} true;
  $i171 := $slt.i32($i166,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1172, 14} true;
  assume {:verifier.code 0} true;
  $i172 := $i167;
  assume {:branchcond $i171} true;
  goto $bb70, $bb71;
$bb69:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1175, 5} true;
  assume {:verifier.code 0} true;
  $i174 := $add.i32($i162,$i162);
  call {:cexpr "a"} boogie_si_record_i32($i174);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1176, 7} true;
  assume {:verifier.code 0} true;
  $i175 := $sext.i32.i64($i174);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1176, 9} true;
  assume {:verifier.code 0} true;
  $i176 := $srem.i64($i175,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1176, 7} true;
  assume {:verifier.code 0} true;
  $i177 := $trunc.i64.i32($i176);
  call {:cexpr "a"} boogie_si_record_i32($i177);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1177, 5} true;
  assume {:verifier.code 0} true;
  $i178 := $add.i32($i166,$i166);
  call {:cexpr "b"} boogie_si_record_i32($i178);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1178, 7} true;
  assume {:verifier.code 0} true;
  $i179 := $sext.i32.i64($i178);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1178, 9} true;
  assume {:verifier.code 0} true;
  $i180 := $srem.i64($i179,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1178, 7} true;
  assume {:verifier.code 0} true;
  $i181 := $trunc.i64.i32($i180);
  call {:cexpr "b"} boogie_si_record_i32($i181);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1180, 5} true;
  assume {:verifier.code 0} true;
  $i182 := $add.i32($i170,$i170);
  call {:cexpr "c"} boogie_si_record_i32($i182);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1181, 9} true;
  assume {:verifier.code 0} true;
  $i183 := $slt.i32($i177,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1181, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i183} true;
  goto $bb73, $bb74;
$bb70:
  assume ($i171 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1173, 7} true;
  assume {:verifier.code 0} true;
  $i173 := $add.i32($i167,1);
  call {:cexpr "c"} boogie_si_record_i32($i173);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1174, 3} true;
  assume {:verifier.code 0} true;
  $i172 := $i173;
  goto $bb72;
$bb71:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1172, 14} true;
  assume {:verifier.code 0} true;
  assume !($i171 == 1);
  goto $bb72;
$bb72:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i170 := $i172;
  goto $bb69;
$bb73:
  assume ($i183 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1182, 7} true;
  assume {:verifier.code 0} true;
  $i184 := $add.i32($i182,1);
  call {:cexpr "c"} boogie_si_record_i32($i184);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1183, 3} true;
  assume {:verifier.code 0} true;
  $i185 := $i184;
  goto $bb75;
$bb74:
  assume !($i183 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1183, 16} true;
  assume {:verifier.code 0} true;
  $i186 := $slt.i32($i181,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1183, 14} true;
  assume {:verifier.code 0} true;
  $i187 := $i182;
  assume {:branchcond $i186} true;
  goto $bb76, $bb77;
$bb75:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1186, 5} true;
  assume {:verifier.code 0} true;
  $i189 := $add.i32($i177,$i177);
  call {:cexpr "a"} boogie_si_record_i32($i189);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1187, 7} true;
  assume {:verifier.code 0} true;
  $i190 := $sext.i32.i64($i189);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1187, 9} true;
  assume {:verifier.code 0} true;
  $i191 := $srem.i64($i190,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1187, 7} true;
  assume {:verifier.code 0} true;
  $i192 := $trunc.i64.i32($i191);
  call {:cexpr "a"} boogie_si_record_i32($i192);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1188, 5} true;
  assume {:verifier.code 0} true;
  $i193 := $add.i32($i181,$i181);
  call {:cexpr "b"} boogie_si_record_i32($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1189, 7} true;
  assume {:verifier.code 0} true;
  $i194 := $sext.i32.i64($i193);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1189, 9} true;
  assume {:verifier.code 0} true;
  $i195 := $srem.i64($i194,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1189, 7} true;
  assume {:verifier.code 0} true;
  $i196 := $trunc.i64.i32($i195);
  call {:cexpr "b"} boogie_si_record_i32($i196);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1191, 5} true;
  assume {:verifier.code 0} true;
  $i197 := $add.i32($i185,$i185);
  call {:cexpr "c"} boogie_si_record_i32($i197);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1192, 9} true;
  assume {:verifier.code 0} true;
  $i198 := $slt.i32($i192,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1192, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i198} true;
  goto $bb79, $bb80;
$bb76:
  assume ($i186 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1184, 7} true;
  assume {:verifier.code 0} true;
  $i188 := $add.i32($i182,1);
  call {:cexpr "c"} boogie_si_record_i32($i188);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1185, 3} true;
  assume {:verifier.code 0} true;
  $i187 := $i188;
  goto $bb78;
$bb77:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1183, 14} true;
  assume {:verifier.code 0} true;
  assume !($i186 == 1);
  goto $bb78;
$bb78:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i185 := $i187;
  goto $bb75;
$bb79:
  assume ($i198 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1193, 7} true;
  assume {:verifier.code 0} true;
  $i199 := $add.i32($i197,1);
  call {:cexpr "c"} boogie_si_record_i32($i199);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1194, 3} true;
  assume {:verifier.code 0} true;
  $i200 := $i199;
  goto $bb81;
$bb80:
  assume !($i198 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1194, 16} true;
  assume {:verifier.code 0} true;
  $i201 := $slt.i32($i196,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1194, 14} true;
  assume {:verifier.code 0} true;
  $i202 := $i197;
  assume {:branchcond $i201} true;
  goto $bb82, $bb83;
$bb81:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1197, 5} true;
  assume {:verifier.code 0} true;
  $i204 := $add.i32($i192,$i192);
  call {:cexpr "a"} boogie_si_record_i32($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1198, 7} true;
  assume {:verifier.code 0} true;
  $i205 := $sext.i32.i64($i204);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1198, 9} true;
  assume {:verifier.code 0} true;
  $i206 := $srem.i64($i205,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1198, 7} true;
  assume {:verifier.code 0} true;
  $i207 := $trunc.i64.i32($i206);
  call {:cexpr "a"} boogie_si_record_i32($i207);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1199, 5} true;
  assume {:verifier.code 0} true;
  $i208 := $add.i32($i196,$i196);
  call {:cexpr "b"} boogie_si_record_i32($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1200, 7} true;
  assume {:verifier.code 0} true;
  $i209 := $sext.i32.i64($i208);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1200, 9} true;
  assume {:verifier.code 0} true;
  $i210 := $srem.i64($i209,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1200, 7} true;
  assume {:verifier.code 0} true;
  $i211 := $trunc.i64.i32($i210);
  call {:cexpr "b"} boogie_si_record_i32($i211);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1202, 5} true;
  assume {:verifier.code 0} true;
  $i212 := $add.i32($i200,$i200);
  call {:cexpr "c"} boogie_si_record_i32($i212);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1203, 9} true;
  assume {:verifier.code 0} true;
  $i213 := $slt.i32($i207,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1203, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i213} true;
  goto $bb85, $bb86;
$bb82:
  assume ($i201 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1195, 7} true;
  assume {:verifier.code 0} true;
  $i203 := $add.i32($i197,1);
  call {:cexpr "c"} boogie_si_record_i32($i203);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1196, 3} true;
  assume {:verifier.code 0} true;
  $i202 := $i203;
  goto $bb84;
$bb83:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1194, 14} true;
  assume {:verifier.code 0} true;
  assume !($i201 == 1);
  goto $bb84;
$bb84:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i200 := $i202;
  goto $bb81;
$bb85:
  assume ($i213 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1204, 7} true;
  assume {:verifier.code 0} true;
  $i214 := $add.i32($i212,1);
  call {:cexpr "c"} boogie_si_record_i32($i214);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1205, 3} true;
  assume {:verifier.code 0} true;
  $i215 := $i214;
  goto $bb87;
$bb86:
  assume !($i213 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1205, 16} true;
  assume {:verifier.code 0} true;
  $i216 := $slt.i32($i211,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1205, 14} true;
  assume {:verifier.code 0} true;
  $i217 := $i212;
  assume {:branchcond $i216} true;
  goto $bb88, $bb89;
$bb87:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1208, 5} true;
  assume {:verifier.code 0} true;
  $i219 := $add.i32($i207,$i207);
  call {:cexpr "a"} boogie_si_record_i32($i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1209, 7} true;
  assume {:verifier.code 0} true;
  $i220 := $sext.i32.i64($i219);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1209, 9} true;
  assume {:verifier.code 0} true;
  $i221 := $srem.i64($i220,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1209, 7} true;
  assume {:verifier.code 0} true;
  $i222 := $trunc.i64.i32($i221);
  call {:cexpr "a"} boogie_si_record_i32($i222);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1210, 5} true;
  assume {:verifier.code 0} true;
  $i223 := $add.i32($i211,$i211);
  call {:cexpr "b"} boogie_si_record_i32($i223);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1211, 7} true;
  assume {:verifier.code 0} true;
  $i224 := $sext.i32.i64($i223);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1211, 9} true;
  assume {:verifier.code 0} true;
  $i225 := $srem.i64($i224,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1211, 7} true;
  assume {:verifier.code 0} true;
  $i226 := $trunc.i64.i32($i225);
  call {:cexpr "b"} boogie_si_record_i32($i226);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1213, 5} true;
  assume {:verifier.code 0} true;
  $i227 := $add.i32($i215,$i215);
  call {:cexpr "c"} boogie_si_record_i32($i227);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1214, 9} true;
  assume {:verifier.code 0} true;
  $i228 := $slt.i32($i222,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1214, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i228} true;
  goto $bb91, $bb92;
$bb88:
  assume ($i216 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1206, 7} true;
  assume {:verifier.code 0} true;
  $i218 := $add.i32($i212,1);
  call {:cexpr "c"} boogie_si_record_i32($i218);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1207, 3} true;
  assume {:verifier.code 0} true;
  $i217 := $i218;
  goto $bb90;
$bb89:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1205, 14} true;
  assume {:verifier.code 0} true;
  assume !($i216 == 1);
  goto $bb90;
$bb90:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i215 := $i217;
  goto $bb87;
$bb91:
  assume ($i228 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1215, 7} true;
  assume {:verifier.code 0} true;
  $i229 := $add.i32($i227,1);
  call {:cexpr "c"} boogie_si_record_i32($i229);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1216, 3} true;
  assume {:verifier.code 0} true;
  $i230 := $i229;
  goto $bb93;
$bb92:
  assume !($i228 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1216, 16} true;
  assume {:verifier.code 0} true;
  $i231 := $slt.i32($i226,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1216, 14} true;
  assume {:verifier.code 0} true;
  $i232 := $i227;
  assume {:branchcond $i231} true;
  goto $bb94, $bb95;
$bb93:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1219, 5} true;
  assume {:verifier.code 0} true;
  $i234 := $add.i32($i222,$i222);
  call {:cexpr "a"} boogie_si_record_i32($i234);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1220, 7} true;
  assume {:verifier.code 0} true;
  $i235 := $sext.i32.i64($i234);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1220, 9} true;
  assume {:verifier.code 0} true;
  $i236 := $srem.i64($i235,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1220, 7} true;
  assume {:verifier.code 0} true;
  $i237 := $trunc.i64.i32($i236);
  call {:cexpr "a"} boogie_si_record_i32($i237);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1221, 5} true;
  assume {:verifier.code 0} true;
  $i238 := $add.i32($i226,$i226);
  call {:cexpr "b"} boogie_si_record_i32($i238);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1222, 7} true;
  assume {:verifier.code 0} true;
  $i239 := $sext.i32.i64($i238);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1222, 9} true;
  assume {:verifier.code 0} true;
  $i240 := $srem.i64($i239,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1222, 7} true;
  assume {:verifier.code 0} true;
  $i241 := $trunc.i64.i32($i240);
  call {:cexpr "b"} boogie_si_record_i32($i241);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1224, 5} true;
  assume {:verifier.code 0} true;
  $i242 := $add.i32($i230,$i230);
  call {:cexpr "c"} boogie_si_record_i32($i242);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1225, 9} true;
  assume {:verifier.code 0} true;
  $i243 := $slt.i32($i237,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1225, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i243} true;
  goto $bb97, $bb98;
$bb94:
  assume ($i231 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1217, 7} true;
  assume {:verifier.code 0} true;
  $i233 := $add.i32($i227,1);
  call {:cexpr "c"} boogie_si_record_i32($i233);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1218, 3} true;
  assume {:verifier.code 0} true;
  $i232 := $i233;
  goto $bb96;
$bb95:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1216, 14} true;
  assume {:verifier.code 0} true;
  assume !($i231 == 1);
  goto $bb96;
$bb96:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i230 := $i232;
  goto $bb93;
$bb97:
  assume ($i243 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1226, 7} true;
  assume {:verifier.code 0} true;
  $i244 := $add.i32($i242,1);
  call {:cexpr "c"} boogie_si_record_i32($i244);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1227, 3} true;
  assume {:verifier.code 0} true;
  $i245 := $i244;
  goto $bb99;
$bb98:
  assume !($i243 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1227, 16} true;
  assume {:verifier.code 0} true;
  $i246 := $slt.i32($i241,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1227, 14} true;
  assume {:verifier.code 0} true;
  $i247 := $i242;
  assume {:branchcond $i246} true;
  goto $bb100, $bb101;
$bb99:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1230, 5} true;
  assume {:verifier.code 0} true;
  $i249 := $add.i32($i237,$i237);
  call {:cexpr "a"} boogie_si_record_i32($i249);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1231, 7} true;
  assume {:verifier.code 0} true;
  $i250 := $sext.i32.i64($i249);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1231, 9} true;
  assume {:verifier.code 0} true;
  $i251 := $srem.i64($i250,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1231, 7} true;
  assume {:verifier.code 0} true;
  $i252 := $trunc.i64.i32($i251);
  call {:cexpr "a"} boogie_si_record_i32($i252);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1232, 5} true;
  assume {:verifier.code 0} true;
  $i253 := $add.i32($i241,$i241);
  call {:cexpr "b"} boogie_si_record_i32($i253);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1233, 7} true;
  assume {:verifier.code 0} true;
  $i254 := $sext.i32.i64($i253);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1233, 9} true;
  assume {:verifier.code 0} true;
  $i255 := $srem.i64($i254,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1233, 7} true;
  assume {:verifier.code 0} true;
  $i256 := $trunc.i64.i32($i255);
  call {:cexpr "b"} boogie_si_record_i32($i256);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1235, 5} true;
  assume {:verifier.code 0} true;
  $i257 := $add.i32($i245,$i245);
  call {:cexpr "c"} boogie_si_record_i32($i257);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1236, 9} true;
  assume {:verifier.code 0} true;
  $i258 := $slt.i32($i252,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1236, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i258} true;
  goto $bb103, $bb104;
$bb100:
  assume ($i246 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1228, 7} true;
  assume {:verifier.code 0} true;
  $i248 := $add.i32($i242,1);
  call {:cexpr "c"} boogie_si_record_i32($i248);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1229, 3} true;
  assume {:verifier.code 0} true;
  $i247 := $i248;
  goto $bb102;
$bb101:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1227, 14} true;
  assume {:verifier.code 0} true;
  assume !($i246 == 1);
  goto $bb102;
$bb102:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i245 := $i247;
  goto $bb99;
$bb103:
  assume ($i258 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1237, 7} true;
  assume {:verifier.code 0} true;
  $i259 := $add.i32($i257,1);
  call {:cexpr "c"} boogie_si_record_i32($i259);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1238, 3} true;
  assume {:verifier.code 0} true;
  $i260 := $i259;
  goto $bb105;
$bb104:
  assume !($i258 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1238, 16} true;
  assume {:verifier.code 0} true;
  $i261 := $slt.i32($i256,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1238, 14} true;
  assume {:verifier.code 0} true;
  $i262 := $i257;
  assume {:branchcond $i261} true;
  goto $bb106, $bb107;
$bb105:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1241, 5} true;
  assume {:verifier.code 0} true;
  $i264 := $add.i32($i252,$i252);
  call {:cexpr "a"} boogie_si_record_i32($i264);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1242, 7} true;
  assume {:verifier.code 0} true;
  $i265 := $sext.i32.i64($i264);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1242, 9} true;
  assume {:verifier.code 0} true;
  $i266 := $srem.i64($i265,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1242, 7} true;
  assume {:verifier.code 0} true;
  $i267 := $trunc.i64.i32($i266);
  call {:cexpr "a"} boogie_si_record_i32($i267);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1243, 5} true;
  assume {:verifier.code 0} true;
  $i268 := $add.i32($i256,$i256);
  call {:cexpr "b"} boogie_si_record_i32($i268);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1244, 7} true;
  assume {:verifier.code 0} true;
  $i269 := $sext.i32.i64($i268);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1244, 9} true;
  assume {:verifier.code 0} true;
  $i270 := $srem.i64($i269,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1244, 7} true;
  assume {:verifier.code 0} true;
  $i271 := $trunc.i64.i32($i270);
  call {:cexpr "b"} boogie_si_record_i32($i271);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1246, 5} true;
  assume {:verifier.code 0} true;
  $i272 := $add.i32($i260,$i260);
  call {:cexpr "c"} boogie_si_record_i32($i272);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1247, 9} true;
  assume {:verifier.code 0} true;
  $i273 := $slt.i32($i267,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1247, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i273} true;
  goto $bb109, $bb110;
$bb106:
  assume ($i261 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1239, 7} true;
  assume {:verifier.code 0} true;
  $i263 := $add.i32($i257,1);
  call {:cexpr "c"} boogie_si_record_i32($i263);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1240, 3} true;
  assume {:verifier.code 0} true;
  $i262 := $i263;
  goto $bb108;
$bb107:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1238, 14} true;
  assume {:verifier.code 0} true;
  assume !($i261 == 1);
  goto $bb108;
$bb108:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i260 := $i262;
  goto $bb105;
$bb109:
  assume ($i273 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1248, 7} true;
  assume {:verifier.code 0} true;
  $i274 := $add.i32($i272,1);
  call {:cexpr "c"} boogie_si_record_i32($i274);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1249, 3} true;
  assume {:verifier.code 0} true;
  $i275 := $i274;
  goto $bb111;
$bb110:
  assume !($i273 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1249, 16} true;
  assume {:verifier.code 0} true;
  $i276 := $slt.i32($i271,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1249, 14} true;
  assume {:verifier.code 0} true;
  $i277 := $i272;
  assume {:branchcond $i276} true;
  goto $bb112, $bb113;
$bb111:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1252, 5} true;
  assume {:verifier.code 0} true;
  $i279 := $add.i32($i267,$i267);
  call {:cexpr "a"} boogie_si_record_i32($i279);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1253, 7} true;
  assume {:verifier.code 0} true;
  $i280 := $sext.i32.i64($i279);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1253, 9} true;
  assume {:verifier.code 0} true;
  $i281 := $srem.i64($i280,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1253, 7} true;
  assume {:verifier.code 0} true;
  $i282 := $trunc.i64.i32($i281);
  call {:cexpr "a"} boogie_si_record_i32($i282);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1254, 5} true;
  assume {:verifier.code 0} true;
  $i283 := $add.i32($i271,$i271);
  call {:cexpr "b"} boogie_si_record_i32($i283);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1255, 7} true;
  assume {:verifier.code 0} true;
  $i284 := $sext.i32.i64($i283);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1255, 9} true;
  assume {:verifier.code 0} true;
  $i285 := $srem.i64($i284,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1255, 7} true;
  assume {:verifier.code 0} true;
  $i286 := $trunc.i64.i32($i285);
  call {:cexpr "b"} boogie_si_record_i32($i286);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1257, 5} true;
  assume {:verifier.code 0} true;
  $i287 := $add.i32($i275,$i275);
  call {:cexpr "c"} boogie_si_record_i32($i287);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1258, 9} true;
  assume {:verifier.code 0} true;
  $i288 := $slt.i32($i282,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1258, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i288} true;
  goto $bb115, $bb116;
$bb112:
  assume ($i276 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1250, 7} true;
  assume {:verifier.code 0} true;
  $i278 := $add.i32($i272,1);
  call {:cexpr "c"} boogie_si_record_i32($i278);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1251, 3} true;
  assume {:verifier.code 0} true;
  $i277 := $i278;
  goto $bb114;
$bb113:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1249, 14} true;
  assume {:verifier.code 0} true;
  assume !($i276 == 1);
  goto $bb114;
$bb114:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i275 := $i277;
  goto $bb111;
$bb115:
  assume ($i288 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1259, 7} true;
  assume {:verifier.code 0} true;
  $i289 := $add.i32($i287,1);
  call {:cexpr "c"} boogie_si_record_i32($i289);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1260, 3} true;
  assume {:verifier.code 0} true;
  $i290 := $i289;
  goto $bb117;
$bb116:
  assume !($i288 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1260, 16} true;
  assume {:verifier.code 0} true;
  $i291 := $slt.i32($i286,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1260, 14} true;
  assume {:verifier.code 0} true;
  $i292 := $i287;
  assume {:branchcond $i291} true;
  goto $bb118, $bb119;
$bb117:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1263, 5} true;
  assume {:verifier.code 0} true;
  $i294 := $add.i32($i282,$i282);
  call {:cexpr "a"} boogie_si_record_i32($i294);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1264, 7} true;
  assume {:verifier.code 0} true;
  $i295 := $sext.i32.i64($i294);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1264, 9} true;
  assume {:verifier.code 0} true;
  $i296 := $srem.i64($i295,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1264, 7} true;
  assume {:verifier.code 0} true;
  $i297 := $trunc.i64.i32($i296);
  call {:cexpr "a"} boogie_si_record_i32($i297);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1265, 5} true;
  assume {:verifier.code 0} true;
  $i298 := $add.i32($i286,$i286);
  call {:cexpr "b"} boogie_si_record_i32($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1266, 7} true;
  assume {:verifier.code 0} true;
  $i299 := $sext.i32.i64($i298);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1266, 9} true;
  assume {:verifier.code 0} true;
  $i300 := $srem.i64($i299,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1266, 7} true;
  assume {:verifier.code 0} true;
  $i301 := $trunc.i64.i32($i300);
  call {:cexpr "b"} boogie_si_record_i32($i301);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1268, 5} true;
  assume {:verifier.code 0} true;
  $i302 := $add.i32($i290,$i290);
  call {:cexpr "c"} boogie_si_record_i32($i302);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1269, 9} true;
  assume {:verifier.code 0} true;
  $i303 := $slt.i32($i297,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1269, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i303} true;
  goto $bb121, $bb122;
$bb118:
  assume ($i291 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1261, 7} true;
  assume {:verifier.code 0} true;
  $i293 := $add.i32($i287,1);
  call {:cexpr "c"} boogie_si_record_i32($i293);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1262, 3} true;
  assume {:verifier.code 0} true;
  $i292 := $i293;
  goto $bb120;
$bb119:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1260, 14} true;
  assume {:verifier.code 0} true;
  assume !($i291 == 1);
  goto $bb120;
$bb120:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i290 := $i292;
  goto $bb117;
$bb121:
  assume ($i303 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1270, 7} true;
  assume {:verifier.code 0} true;
  $i304 := $add.i32($i302,1);
  call {:cexpr "c"} boogie_si_record_i32($i304);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1271, 3} true;
  assume {:verifier.code 0} true;
  $i305 := $i304;
  goto $bb123;
$bb122:
  assume !($i303 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1271, 16} true;
  assume {:verifier.code 0} true;
  $i306 := $slt.i32($i301,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1271, 14} true;
  assume {:verifier.code 0} true;
  $i307 := $i302;
  assume {:branchcond $i306} true;
  goto $bb124, $bb125;
$bb123:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1274, 5} true;
  assume {:verifier.code 0} true;
  $i309 := $add.i32($i297,$i297);
  call {:cexpr "a"} boogie_si_record_i32($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1275, 7} true;
  assume {:verifier.code 0} true;
  $i310 := $sext.i32.i64($i309);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1275, 9} true;
  assume {:verifier.code 0} true;
  $i311 := $srem.i64($i310,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1275, 7} true;
  assume {:verifier.code 0} true;
  $i312 := $trunc.i64.i32($i311);
  call {:cexpr "a"} boogie_si_record_i32($i312);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1276, 5} true;
  assume {:verifier.code 0} true;
  $i313 := $add.i32($i301,$i301);
  call {:cexpr "b"} boogie_si_record_i32($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1277, 7} true;
  assume {:verifier.code 0} true;
  $i314 := $sext.i32.i64($i313);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1277, 9} true;
  assume {:verifier.code 0} true;
  $i315 := $srem.i64($i314,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1277, 7} true;
  assume {:verifier.code 0} true;
  $i316 := $trunc.i64.i32($i315);
  call {:cexpr "b"} boogie_si_record_i32($i316);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1279, 5} true;
  assume {:verifier.code 0} true;
  $i317 := $add.i32($i305,$i305);
  call {:cexpr "c"} boogie_si_record_i32($i317);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1280, 9} true;
  assume {:verifier.code 0} true;
  $i318 := $slt.i32($i312,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1280, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i318} true;
  goto $bb127, $bb128;
$bb124:
  assume ($i306 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1272, 7} true;
  assume {:verifier.code 0} true;
  $i308 := $add.i32($i302,1);
  call {:cexpr "c"} boogie_si_record_i32($i308);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1273, 3} true;
  assume {:verifier.code 0} true;
  $i307 := $i308;
  goto $bb126;
$bb125:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1271, 14} true;
  assume {:verifier.code 0} true;
  assume !($i306 == 1);
  goto $bb126;
$bb126:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i305 := $i307;
  goto $bb123;
$bb127:
  assume ($i318 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1281, 7} true;
  assume {:verifier.code 0} true;
  $i319 := $add.i32($i317,1);
  call {:cexpr "c"} boogie_si_record_i32($i319);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1282, 3} true;
  assume {:verifier.code 0} true;
  $i320 := $i319;
  goto $bb129;
$bb128:
  assume !($i318 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1282, 16} true;
  assume {:verifier.code 0} true;
  $i321 := $slt.i32($i316,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1282, 14} true;
  assume {:verifier.code 0} true;
  $i322 := $i317;
  assume {:branchcond $i321} true;
  goto $bb130, $bb131;
$bb129:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1285, 5} true;
  assume {:verifier.code 0} true;
  $i324 := $add.i32($i312,$i312);
  call {:cexpr "a"} boogie_si_record_i32($i324);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1286, 7} true;
  assume {:verifier.code 0} true;
  $i325 := $sext.i32.i64($i324);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1286, 9} true;
  assume {:verifier.code 0} true;
  $i326 := $srem.i64($i325,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1286, 7} true;
  assume {:verifier.code 0} true;
  $i327 := $trunc.i64.i32($i326);
  call {:cexpr "a"} boogie_si_record_i32($i327);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1287, 5} true;
  assume {:verifier.code 0} true;
  $i328 := $add.i32($i316,$i316);
  call {:cexpr "b"} boogie_si_record_i32($i328);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1288, 7} true;
  assume {:verifier.code 0} true;
  $i329 := $sext.i32.i64($i328);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1288, 9} true;
  assume {:verifier.code 0} true;
  $i330 := $srem.i64($i329,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1288, 7} true;
  assume {:verifier.code 0} true;
  $i331 := $trunc.i64.i32($i330);
  call {:cexpr "b"} boogie_si_record_i32($i331);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1290, 5} true;
  assume {:verifier.code 0} true;
  $i332 := $add.i32($i320,$i320);
  call {:cexpr "c"} boogie_si_record_i32($i332);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1291, 9} true;
  assume {:verifier.code 0} true;
  $i333 := $slt.i32($i327,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1291, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i333} true;
  goto $bb133, $bb134;
$bb130:
  assume ($i321 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1283, 7} true;
  assume {:verifier.code 0} true;
  $i323 := $add.i32($i317,1);
  call {:cexpr "c"} boogie_si_record_i32($i323);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1284, 3} true;
  assume {:verifier.code 0} true;
  $i322 := $i323;
  goto $bb132;
$bb131:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1282, 14} true;
  assume {:verifier.code 0} true;
  assume !($i321 == 1);
  goto $bb132;
$bb132:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i320 := $i322;
  goto $bb129;
$bb133:
  assume ($i333 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1292, 7} true;
  assume {:verifier.code 0} true;
  $i334 := $add.i32($i332,1);
  call {:cexpr "c"} boogie_si_record_i32($i334);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1293, 3} true;
  assume {:verifier.code 0} true;
  $i335 := $i334;
  goto $bb135;
$bb134:
  assume !($i333 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1293, 16} true;
  assume {:verifier.code 0} true;
  $i336 := $slt.i32($i331,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1293, 14} true;
  assume {:verifier.code 0} true;
  $i337 := $i332;
  assume {:branchcond $i336} true;
  goto $bb136, $bb137;
$bb135:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1296, 5} true;
  assume {:verifier.code 0} true;
  $i339 := $add.i32($i327,$i327);
  call {:cexpr "a"} boogie_si_record_i32($i339);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1297, 7} true;
  assume {:verifier.code 0} true;
  $i340 := $sext.i32.i64($i339);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1297, 9} true;
  assume {:verifier.code 0} true;
  $i341 := $srem.i64($i340,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1297, 7} true;
  assume {:verifier.code 0} true;
  $i342 := $trunc.i64.i32($i341);
  call {:cexpr "a"} boogie_si_record_i32($i342);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1298, 5} true;
  assume {:verifier.code 0} true;
  $i343 := $add.i32($i331,$i331);
  call {:cexpr "b"} boogie_si_record_i32($i343);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1299, 7} true;
  assume {:verifier.code 0} true;
  $i344 := $sext.i32.i64($i343);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1299, 9} true;
  assume {:verifier.code 0} true;
  $i345 := $srem.i64($i344,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1299, 7} true;
  assume {:verifier.code 0} true;
  $i346 := $trunc.i64.i32($i345);
  call {:cexpr "b"} boogie_si_record_i32($i346);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1301, 5} true;
  assume {:verifier.code 0} true;
  $i347 := $add.i32($i335,$i335);
  call {:cexpr "c"} boogie_si_record_i32($i347);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1302, 9} true;
  assume {:verifier.code 0} true;
  $i348 := $slt.i32($i342,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1302, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i348} true;
  goto $bb139, $bb140;
$bb136:
  assume ($i336 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1294, 7} true;
  assume {:verifier.code 0} true;
  $i338 := $add.i32($i332,1);
  call {:cexpr "c"} boogie_si_record_i32($i338);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1295, 3} true;
  assume {:verifier.code 0} true;
  $i337 := $i338;
  goto $bb138;
$bb137:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1293, 14} true;
  assume {:verifier.code 0} true;
  assume !($i336 == 1);
  goto $bb138;
$bb138:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i335 := $i337;
  goto $bb135;
$bb139:
  assume ($i348 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1303, 7} true;
  assume {:verifier.code 0} true;
  $i349 := $add.i32($i347,1);
  call {:cexpr "c"} boogie_si_record_i32($i349);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1304, 3} true;
  assume {:verifier.code 0} true;
  $i350 := $i349;
  goto $bb141;
$bb140:
  assume !($i348 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1304, 16} true;
  assume {:verifier.code 0} true;
  $i351 := $slt.i32($i346,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1304, 14} true;
  assume {:verifier.code 0} true;
  $i352 := $i347;
  assume {:branchcond $i351} true;
  goto $bb142, $bb143;
$bb141:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1307, 5} true;
  assume {:verifier.code 0} true;
  $i354 := $add.i32($i342,$i342);
  call {:cexpr "a"} boogie_si_record_i32($i354);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1308, 7} true;
  assume {:verifier.code 0} true;
  $i355 := $sext.i32.i64($i354);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1308, 9} true;
  assume {:verifier.code 0} true;
  $i356 := $srem.i64($i355,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1308, 7} true;
  assume {:verifier.code 0} true;
  $i357 := $trunc.i64.i32($i356);
  call {:cexpr "a"} boogie_si_record_i32($i357);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1309, 5} true;
  assume {:verifier.code 0} true;
  $i358 := $add.i32($i346,$i346);
  call {:cexpr "b"} boogie_si_record_i32($i358);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1310, 7} true;
  assume {:verifier.code 0} true;
  $i359 := $sext.i32.i64($i358);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1310, 9} true;
  assume {:verifier.code 0} true;
  $i360 := $srem.i64($i359,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1310, 7} true;
  assume {:verifier.code 0} true;
  $i361 := $trunc.i64.i32($i360);
  call {:cexpr "b"} boogie_si_record_i32($i361);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1312, 5} true;
  assume {:verifier.code 0} true;
  $i362 := $add.i32($i350,$i350);
  call {:cexpr "c"} boogie_si_record_i32($i362);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1313, 9} true;
  assume {:verifier.code 0} true;
  $i363 := $slt.i32($i357,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1313, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i363} true;
  goto $bb145, $bb146;
$bb142:
  assume ($i351 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1305, 7} true;
  assume {:verifier.code 0} true;
  $i353 := $add.i32($i347,1);
  call {:cexpr "c"} boogie_si_record_i32($i353);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1306, 3} true;
  assume {:verifier.code 0} true;
  $i352 := $i353;
  goto $bb144;
$bb143:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1304, 14} true;
  assume {:verifier.code 0} true;
  assume !($i351 == 1);
  goto $bb144;
$bb144:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i350 := $i352;
  goto $bb141;
$bb145:
  assume ($i363 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1314, 7} true;
  assume {:verifier.code 0} true;
  $i364 := $add.i32($i362,1);
  call {:cexpr "c"} boogie_si_record_i32($i364);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1315, 3} true;
  assume {:verifier.code 0} true;
  $i365 := $i364;
  goto $bb147;
$bb146:
  assume !($i363 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1315, 16} true;
  assume {:verifier.code 0} true;
  $i366 := $slt.i32($i361,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1315, 14} true;
  assume {:verifier.code 0} true;
  $i367 := $i362;
  assume {:branchcond $i366} true;
  goto $bb148, $bb149;
$bb147:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1318, 5} true;
  assume {:verifier.code 0} true;
  $i369 := $add.i32($i357,$i357);
  call {:cexpr "a"} boogie_si_record_i32($i369);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1319, 7} true;
  assume {:verifier.code 0} true;
  $i370 := $sext.i32.i64($i369);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1319, 9} true;
  assume {:verifier.code 0} true;
  $i371 := $srem.i64($i370,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1319, 7} true;
  assume {:verifier.code 0} true;
  $i372 := $trunc.i64.i32($i371);
  call {:cexpr "a"} boogie_si_record_i32($i372);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1320, 5} true;
  assume {:verifier.code 0} true;
  $i373 := $add.i32($i361,$i361);
  call {:cexpr "b"} boogie_si_record_i32($i373);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1321, 7} true;
  assume {:verifier.code 0} true;
  $i374 := $sext.i32.i64($i373);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1321, 9} true;
  assume {:verifier.code 0} true;
  $i375 := $srem.i64($i374,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1321, 7} true;
  assume {:verifier.code 0} true;
  $i376 := $trunc.i64.i32($i375);
  call {:cexpr "b"} boogie_si_record_i32($i376);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1323, 5} true;
  assume {:verifier.code 0} true;
  $i377 := $add.i32($i365,$i365);
  call {:cexpr "c"} boogie_si_record_i32($i377);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1324, 9} true;
  assume {:verifier.code 0} true;
  $i378 := $slt.i32($i372,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1324, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i378} true;
  goto $bb151, $bb152;
$bb148:
  assume ($i366 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1316, 7} true;
  assume {:verifier.code 0} true;
  $i368 := $add.i32($i362,1);
  call {:cexpr "c"} boogie_si_record_i32($i368);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1317, 3} true;
  assume {:verifier.code 0} true;
  $i367 := $i368;
  goto $bb150;
$bb149:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1315, 14} true;
  assume {:verifier.code 0} true;
  assume !($i366 == 1);
  goto $bb150;
$bb150:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i365 := $i367;
  goto $bb147;
$bb151:
  assume ($i378 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1325, 7} true;
  assume {:verifier.code 0} true;
  $i379 := $add.i32($i377,1);
  call {:cexpr "c"} boogie_si_record_i32($i379);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1326, 3} true;
  assume {:verifier.code 0} true;
  $i380 := $i379;
  goto $bb153;
$bb152:
  assume !($i378 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1326, 16} true;
  assume {:verifier.code 0} true;
  $i381 := $slt.i32($i376,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1326, 14} true;
  assume {:verifier.code 0} true;
  $i382 := $i377;
  assume {:branchcond $i381} true;
  goto $bb154, $bb155;
$bb153:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1329, 5} true;
  assume {:verifier.code 0} true;
  $i384 := $add.i32($i372,$i372);
  call {:cexpr "a"} boogie_si_record_i32($i384);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1330, 7} true;
  assume {:verifier.code 0} true;
  $i385 := $sext.i32.i64($i384);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1330, 9} true;
  assume {:verifier.code 0} true;
  $i386 := $srem.i64($i385,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1330, 7} true;
  assume {:verifier.code 0} true;
  $i387 := $trunc.i64.i32($i386);
  call {:cexpr "a"} boogie_si_record_i32($i387);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1331, 5} true;
  assume {:verifier.code 0} true;
  $i388 := $add.i32($i376,$i376);
  call {:cexpr "b"} boogie_si_record_i32($i388);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1332, 7} true;
  assume {:verifier.code 0} true;
  $i389 := $sext.i32.i64($i388);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1332, 9} true;
  assume {:verifier.code 0} true;
  $i390 := $srem.i64($i389,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1332, 7} true;
  assume {:verifier.code 0} true;
  $i391 := $trunc.i64.i32($i390);
  call {:cexpr "b"} boogie_si_record_i32($i391);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1334, 5} true;
  assume {:verifier.code 0} true;
  $i392 := $add.i32($i380,$i380);
  call {:cexpr "c"} boogie_si_record_i32($i392);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1335, 9} true;
  assume {:verifier.code 0} true;
  $i393 := $slt.i32($i387,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1335, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i393} true;
  goto $bb157, $bb158;
$bb154:
  assume ($i381 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1327, 7} true;
  assume {:verifier.code 0} true;
  $i383 := $add.i32($i377,1);
  call {:cexpr "c"} boogie_si_record_i32($i383);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1328, 3} true;
  assume {:verifier.code 0} true;
  $i382 := $i383;
  goto $bb156;
$bb155:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1326, 14} true;
  assume {:verifier.code 0} true;
  assume !($i381 == 1);
  goto $bb156;
$bb156:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i380 := $i382;
  goto $bb153;
$bb157:
  assume ($i393 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1336, 7} true;
  assume {:verifier.code 0} true;
  $i394 := $add.i32($i392,1);
  call {:cexpr "c"} boogie_si_record_i32($i394);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1337, 3} true;
  assume {:verifier.code 0} true;
  $i395 := $i394;
  goto $bb159;
$bb158:
  assume !($i393 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1337, 16} true;
  assume {:verifier.code 0} true;
  $i396 := $slt.i32($i391,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1337, 14} true;
  assume {:verifier.code 0} true;
  $i397 := $i392;
  assume {:branchcond $i396} true;
  goto $bb160, $bb161;
$bb159:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1340, 5} true;
  assume {:verifier.code 0} true;
  $i399 := $add.i32($i387,$i387);
  call {:cexpr "a"} boogie_si_record_i32($i399);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1341, 7} true;
  assume {:verifier.code 0} true;
  $i400 := $sext.i32.i64($i399);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1341, 9} true;
  assume {:verifier.code 0} true;
  $i401 := $srem.i64($i400,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1341, 7} true;
  assume {:verifier.code 0} true;
  $i402 := $trunc.i64.i32($i401);
  call {:cexpr "a"} boogie_si_record_i32($i402);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1342, 5} true;
  assume {:verifier.code 0} true;
  $i403 := $add.i32($i391,$i391);
  call {:cexpr "b"} boogie_si_record_i32($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1343, 7} true;
  assume {:verifier.code 0} true;
  $i404 := $sext.i32.i64($i403);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1343, 9} true;
  assume {:verifier.code 0} true;
  $i405 := $srem.i64($i404,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1343, 7} true;
  assume {:verifier.code 0} true;
  $i406 := $trunc.i64.i32($i405);
  call {:cexpr "b"} boogie_si_record_i32($i406);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1345, 5} true;
  assume {:verifier.code 0} true;
  $i407 := $add.i32($i395,$i395);
  call {:cexpr "c"} boogie_si_record_i32($i407);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1346, 9} true;
  assume {:verifier.code 0} true;
  $i408 := $slt.i32($i402,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1346, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i408} true;
  goto $bb163, $bb164;
$bb160:
  assume ($i396 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1338, 7} true;
  assume {:verifier.code 0} true;
  $i398 := $add.i32($i392,1);
  call {:cexpr "c"} boogie_si_record_i32($i398);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1339, 3} true;
  assume {:verifier.code 0} true;
  $i397 := $i398;
  goto $bb162;
$bb161:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1337, 14} true;
  assume {:verifier.code 0} true;
  assume !($i396 == 1);
  goto $bb162;
$bb162:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i395 := $i397;
  goto $bb159;
$bb163:
  assume ($i408 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1347, 7} true;
  assume {:verifier.code 0} true;
  $i409 := $add.i32($i407,1);
  call {:cexpr "c"} boogie_si_record_i32($i409);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1348, 3} true;
  assume {:verifier.code 0} true;
  $i410 := $i409;
  goto $bb165;
$bb164:
  assume !($i408 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1348, 16} true;
  assume {:verifier.code 0} true;
  $i411 := $slt.i32($i406,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1348, 14} true;
  assume {:verifier.code 0} true;
  $i412 := $i407;
  assume {:branchcond $i411} true;
  goto $bb166, $bb167;
$bb165:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1351, 5} true;
  assume {:verifier.code 0} true;
  $i414 := $add.i32($i402,$i402);
  call {:cexpr "a"} boogie_si_record_i32($i414);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1352, 7} true;
  assume {:verifier.code 0} true;
  $i415 := $sext.i32.i64($i414);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1352, 9} true;
  assume {:verifier.code 0} true;
  $i416 := $srem.i64($i415,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1352, 7} true;
  assume {:verifier.code 0} true;
  $i417 := $trunc.i64.i32($i416);
  call {:cexpr "a"} boogie_si_record_i32($i417);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1353, 5} true;
  assume {:verifier.code 0} true;
  $i418 := $add.i32($i406,$i406);
  call {:cexpr "b"} boogie_si_record_i32($i418);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1354, 7} true;
  assume {:verifier.code 0} true;
  $i419 := $sext.i32.i64($i418);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1354, 9} true;
  assume {:verifier.code 0} true;
  $i420 := $srem.i64($i419,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1354, 7} true;
  assume {:verifier.code 0} true;
  $i421 := $trunc.i64.i32($i420);
  call {:cexpr "b"} boogie_si_record_i32($i421);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1356, 5} true;
  assume {:verifier.code 0} true;
  $i422 := $add.i32($i410,$i410);
  call {:cexpr "c"} boogie_si_record_i32($i422);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1357, 9} true;
  assume {:verifier.code 0} true;
  $i423 := $slt.i32($i417,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1357, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i423} true;
  goto $bb169, $bb170;
$bb166:
  assume ($i411 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1349, 7} true;
  assume {:verifier.code 0} true;
  $i413 := $add.i32($i407,1);
  call {:cexpr "c"} boogie_si_record_i32($i413);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1350, 3} true;
  assume {:verifier.code 0} true;
  $i412 := $i413;
  goto $bb168;
$bb167:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1348, 14} true;
  assume {:verifier.code 0} true;
  assume !($i411 == 1);
  goto $bb168;
$bb168:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i410 := $i412;
  goto $bb165;
$bb169:
  assume ($i423 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1358, 7} true;
  assume {:verifier.code 0} true;
  $i424 := $add.i32($i422,1);
  call {:cexpr "c"} boogie_si_record_i32($i424);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1359, 3} true;
  assume {:verifier.code 0} true;
  $i425 := $i424;
  goto $bb171;
$bb170:
  assume !($i423 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1359, 16} true;
  assume {:verifier.code 0} true;
  $i426 := $slt.i32($i421,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1359, 14} true;
  assume {:verifier.code 0} true;
  $i427 := $i422;
  assume {:branchcond $i426} true;
  goto $bb172, $bb173;
$bb171:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1362, 5} true;
  assume {:verifier.code 0} true;
  $i429 := $add.i32($i417,$i417);
  call {:cexpr "a"} boogie_si_record_i32($i429);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1363, 7} true;
  assume {:verifier.code 0} true;
  $i430 := $sext.i32.i64($i429);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1363, 9} true;
  assume {:verifier.code 0} true;
  $i431 := $srem.i64($i430,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1363, 7} true;
  assume {:verifier.code 0} true;
  $i432 := $trunc.i64.i32($i431);
  call {:cexpr "a"} boogie_si_record_i32($i432);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1364, 5} true;
  assume {:verifier.code 0} true;
  $i433 := $add.i32($i421,$i421);
  call {:cexpr "b"} boogie_si_record_i32($i433);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1365, 7} true;
  assume {:verifier.code 0} true;
  $i434 := $sext.i32.i64($i433);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1365, 9} true;
  assume {:verifier.code 0} true;
  $i435 := $srem.i64($i434,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1365, 7} true;
  assume {:verifier.code 0} true;
  $i436 := $trunc.i64.i32($i435);
  call {:cexpr "b"} boogie_si_record_i32($i436);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1367, 5} true;
  assume {:verifier.code 0} true;
  $i437 := $add.i32($i425,$i425);
  call {:cexpr "c"} boogie_si_record_i32($i437);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1368, 9} true;
  assume {:verifier.code 0} true;
  $i438 := $slt.i32($i432,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1368, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i438} true;
  goto $bb175, $bb176;
$bb172:
  assume ($i426 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1360, 7} true;
  assume {:verifier.code 0} true;
  $i428 := $add.i32($i422,1);
  call {:cexpr "c"} boogie_si_record_i32($i428);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1361, 3} true;
  assume {:verifier.code 0} true;
  $i427 := $i428;
  goto $bb174;
$bb173:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1359, 14} true;
  assume {:verifier.code 0} true;
  assume !($i426 == 1);
  goto $bb174;
$bb174:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i425 := $i427;
  goto $bb171;
$bb175:
  assume ($i438 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1369, 7} true;
  assume {:verifier.code 0} true;
  $i439 := $add.i32($i437,1);
  call {:cexpr "c"} boogie_si_record_i32($i439);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1370, 3} true;
  assume {:verifier.code 0} true;
  $i440 := $i439;
  goto $bb177;
$bb176:
  assume !($i438 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1370, 16} true;
  assume {:verifier.code 0} true;
  $i441 := $slt.i32($i436,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1370, 14} true;
  assume {:verifier.code 0} true;
  $i442 := $i437;
  assume {:branchcond $i441} true;
  goto $bb178, $bb179;
$bb177:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1373, 5} true;
  assume {:verifier.code 0} true;
  $i444 := $add.i32($i432,$i432);
  call {:cexpr "a"} boogie_si_record_i32($i444);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1374, 7} true;
  assume {:verifier.code 0} true;
  $i445 := $sext.i32.i64($i444);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1374, 9} true;
  assume {:verifier.code 0} true;
  $i446 := $srem.i64($i445,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1374, 7} true;
  assume {:verifier.code 0} true;
  $i447 := $trunc.i64.i32($i446);
  call {:cexpr "a"} boogie_si_record_i32($i447);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1375, 5} true;
  assume {:verifier.code 0} true;
  $i448 := $add.i32($i436,$i436);
  call {:cexpr "b"} boogie_si_record_i32($i448);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1376, 7} true;
  assume {:verifier.code 0} true;
  $i449 := $sext.i32.i64($i448);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1376, 9} true;
  assume {:verifier.code 0} true;
  $i450 := $srem.i64($i449,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1376, 7} true;
  assume {:verifier.code 0} true;
  $i451 := $trunc.i64.i32($i450);
  call {:cexpr "b"} boogie_si_record_i32($i451);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1378, 5} true;
  assume {:verifier.code 0} true;
  $i452 := $add.i32($i440,$i440);
  call {:cexpr "c"} boogie_si_record_i32($i452);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1379, 9} true;
  assume {:verifier.code 0} true;
  $i453 := $slt.i32($i447,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1379, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i453} true;
  goto $bb181, $bb182;
$bb178:
  assume ($i441 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1371, 7} true;
  assume {:verifier.code 0} true;
  $i443 := $add.i32($i437,1);
  call {:cexpr "c"} boogie_si_record_i32($i443);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1372, 3} true;
  assume {:verifier.code 0} true;
  $i442 := $i443;
  goto $bb180;
$bb179:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1370, 14} true;
  assume {:verifier.code 0} true;
  assume !($i441 == 1);
  goto $bb180;
$bb180:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i440 := $i442;
  goto $bb177;
$bb181:
  assume ($i453 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1380, 7} true;
  assume {:verifier.code 0} true;
  $i454 := $add.i32($i452,1);
  call {:cexpr "c"} boogie_si_record_i32($i454);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1381, 3} true;
  assume {:verifier.code 0} true;
  $i455 := $i454;
  goto $bb183;
$bb182:
  assume !($i453 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1381, 16} true;
  assume {:verifier.code 0} true;
  $i456 := $slt.i32($i451,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1381, 14} true;
  assume {:verifier.code 0} true;
  $i457 := $i452;
  assume {:branchcond $i456} true;
  goto $bb184, $bb185;
$bb183:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1384, 5} true;
  assume {:verifier.code 0} true;
  $i459 := $add.i32($i447,$i447);
  call {:cexpr "a"} boogie_si_record_i32($i459);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1385, 7} true;
  assume {:verifier.code 0} true;
  $i460 := $sext.i32.i64($i459);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1385, 9} true;
  assume {:verifier.code 0} true;
  $i461 := $srem.i64($i460,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1385, 7} true;
  assume {:verifier.code 0} true;
  $i462 := $trunc.i64.i32($i461);
  call {:cexpr "a"} boogie_si_record_i32($i462);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1386, 5} true;
  assume {:verifier.code 0} true;
  $i463 := $add.i32($i451,$i451);
  call {:cexpr "b"} boogie_si_record_i32($i463);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1387, 7} true;
  assume {:verifier.code 0} true;
  $i464 := $sext.i32.i64($i463);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1387, 9} true;
  assume {:verifier.code 0} true;
  $i465 := $srem.i64($i464,2147483648);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1387, 7} true;
  assume {:verifier.code 0} true;
  $i466 := $trunc.i64.i32($i465);
  call {:cexpr "b"} boogie_si_record_i32($i466);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1389, 5} true;
  assume {:verifier.code 0} true;
  $i467 := $add.i32($i455,$i455);
  call {:cexpr "c"} boogie_si_record_i32($i467);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1390, 9} true;
  assume {:verifier.code 0} true;
  $i468 := $slt.i32($i462,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1390, 7} true;
  assume {:verifier.code 0} true;
  assume {:branchcond $i468} true;
  goto $bb187, $bb188;
$bb184:
  assume ($i456 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1382, 7} true;
  assume {:verifier.code 0} true;
  $i458 := $add.i32($i452,1);
  call {:cexpr "c"} boogie_si_record_i32($i458);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1383, 3} true;
  assume {:verifier.code 0} true;
  $i457 := $i458;
  goto $bb186;
$bb185:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1381, 14} true;
  assume {:verifier.code 0} true;
  assume !($i456 == 1);
  goto $bb186;
$bb186:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i455 := $i457;
  goto $bb183;
$bb187:
  assume ($i468 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1391, 7} true;
  assume {:verifier.code 0} true;
  $i469 := $add.i32($i467,1);
  call {:cexpr "c"} boogie_si_record_i32($i469);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 3} true;
  assume {:verifier.code 0} true;
  $i470 := $i469;
  goto $bb189;
$bb188:
  assume !($i468 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 16} true;
  assume {:verifier.code 0} true;
  $i471 := $slt.i32($i466,0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 14} true;
  assume {:verifier.code 0} true;
  $i472 := $i467;
  assume {:branchcond $i471} true;
  goto $bb190, $bb191;
$bb189:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1400, 3} true;
  assume {:verifier.code 0} true;
  $r := $i470;
  $exn := false;
  return;
$bb190:
  assume ($i471 == 1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1393, 7} true;
  assume {:verifier.code 0} true;
  $i473 := $add.i32($i467,1);
  call {:cexpr "c"} boogie_si_record_i32($i473);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1394, 3} true;
  assume {:verifier.code 0} true;
  $i472 := $i473;
  goto $bb192;
$bb191:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1392, 14} true;
  assume {:verifier.code 0} true;
  assume !($i471 == 1);
  goto $bb192;
$bb192:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 0, 0} true;
  assume {:verifier.code 0} true;
  assume {:verifier.code 0} true;
  $i470 := $i472;
  goto $bb189;
}
const __SMACK_or64: ref;
axiom (__SMACK_or64 == $sub.ref(0,46440));
procedure {:inline 1} __SMACK_or64($i0: i64, $i1: i64) returns ($r: i64)
modifies $exn;
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i64;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 63} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_or64:arg:a"} boogie_si_record_i64($i0);
  call {:cexpr "__SMACK_or64:arg:b"} boogie_si_record_i64($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 63} true;
  assume {:verifier.code 1} true;
  $i2 := $trunc.i64.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 66} true;
  assume {:verifier.code 1} true;
  $i3 := $trunc.i64.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 50} true;
  assume {:verifier.code 1} true;
  call $i4 := __SMACK_or32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_or32"} boogie_si_record_i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 44} true;
  assume {:verifier.code 0} true;
  $i5 := $sext.i32.i64($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1403, 37} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_or16: ref;
axiom (__SMACK_or16 == $sub.ref(0,47472));
procedure {:inline 1} __SMACK_or16($i0: i16, $i1: i16) returns ($r: i16)
modifies $exn;
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i16;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 67} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_or16:arg:a"} boogie_si_record_i16($i0);
  call {:cexpr "__SMACK_or16:arg:b"} boogie_si_record_i16($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 67} true;
  assume {:verifier.code 1} true;
  $i2 := $sext.i16.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 70} true;
  assume {:verifier.code 1} true;
  $i3 := $sext.i16.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 54} true;
  assume {:verifier.code 1} true;
  call $i4 := __SMACK_or32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_or32"} boogie_si_record_i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 47} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i32.i16($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1404, 40} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_or8: ref;
axiom (__SMACK_or8 == $sub.ref(0,48504));
procedure {:inline 1} __SMACK_or8($i0: i8, $i1: i8) returns ($r: i8)
modifies $exn;
{
  var $i2: i32;
  var $i3: i32;
  var $i4: i32;
  var $i5: i8;
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 62} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_or8:arg:a"} boogie_si_record_i8($i0);
  call {:cexpr "__SMACK_or8:arg:b"} boogie_si_record_i8($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 62} true;
  assume {:verifier.code 1} true;
  $i2 := $sext.i8.i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 65} true;
  assume {:verifier.code 1} true;
  $i3 := $sext.i8.i32($i1);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 49} true;
  assume {:verifier.code 1} true;
  call $i4 := __SMACK_or32($i2, $i3);
  call {:cexpr "smack:ext:__SMACK_or32"} boogie_si_record_i32($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 43} true;
  assume {:verifier.code 0} true;
  $i5 := $trunc.i32.i8($i4);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1405, 36} true;
  assume {:verifier.code 0} true;
  $r := $i5;
  $exn := false;
  return;
}
const __SMACK_check_overflow: ref;
axiom (__SMACK_check_overflow == $sub.ref(0,49536));
procedure {:inline 1} __SMACK_check_overflow($i0: i32)
modifies $exn;
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 29} true;
  assume {:verifier.code 1} true;
  call {:cexpr "__SMACK_check_overflow:arg:flag"} boogie_si_record_i32($i0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1606, 29} true;
  assume {:verifier.code 1} true;
  assume true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1409, 3} true;
  assume {:verifier.code 1} true;
  assert {:overflow} ($i0 == $0);
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1410, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_loop_exit: ref;
axiom (__SMACK_loop_exit == $sub.ref(0,50568));
procedure {:inline 1} __SMACK_loop_exit()
modifies $exn;
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1412, 32} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1412, 32} true;
  assume {:verifier.code 1} true;
  assert {:loopexit} false;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1412, 75} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_decls: ref;
axiom (__SMACK_decls == $sub.ref(0,51600));
type $mop;
procedure {:inline 1} boogie_si_record_mop(m: $mop);
const $MOP: $mop;
var $exn: bool;
var $exn.dup: bool;
var $exnv: int;
var $exnv.dup: int;
procedure {:inline 1} corral_atomic_begin();
procedure {:inline 1} corral_atomic_end();
procedure {:inline 1} $alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  call corral_atomic_end();
}
procedure {:inline 1} $malloc(n: ref, n.dup: i1) returns (p: ref, p.dup: i1)
modifies $CurrAddr;
requires (n.dup == 0);
{
  call corral_atomic_begin();
  call p := $$alloc(n);
  p.dup := 0;
  call corral_atomic_end();
}
var $CurrAddr: ref;
var $CurrAddr.dup: ref;
var $shadow_ok: bool;
procedure {:inline 1} $$alloc(n: ref) returns (p: ref)
modifies $CurrAddr;
{
  assume $sge.ref.bool(n,$0.ref);
  if ($sgt.ref.bool(n,$0.ref)) {
    p := $CurrAddr;
    havoc $CurrAddr;
    assume $sge.ref.bool($sub.ref($CurrAddr,n),p);
    assume ($sgt.ref.bool($CurrAddr,$0.ref) && $slt.ref.bool($CurrAddr,$MALLOC_TOP));
  }
}
procedure {:inline 1} $free(p: ref);
const __SMACK_top_decl: ref;
axiom (__SMACK_top_decl == $sub.ref(0,52632));
procedure {:inline 1} __SMACK_top_decl.ref($p0: ref);
const __SMACK_init_func_memory_model: ref;
axiom (__SMACK_init_func_memory_model == $sub.ref(0,53664));
procedure {:inline 1} __SMACK_init_func_memory_model()
modifies $CurrAddr, $exn;
{
$bb0:
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1885, 3} true;
  assume {:verifier.code 1} true;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1885, 3} true;
  assume {:verifier.code 1} true;
  $CurrAddr := $1024.ref;
  assume {:sourceloc "/usr/local/share/smack/lib/smack.c", 1890, 1} true;
  assume {:verifier.code 0} true;
  $exn := false;
  return;
}
const __SMACK_static_init: ref;
axiom (__SMACK_static_init == $sub.ref(0,54696));
procedure {:inline 1} __SMACK_static_init()
modifies $exn;
{
$bb0:
  $exn := false;
  $exn.dup := false;
  return;
}
procedure {:inline 1} $memcpy.i8(M.dst: [ref] i8, M.dst.dup: [ref] i1, M.src: [ref] i8, M.src.dup: [ref] i1, dst: ref, dst.dup: i1, src: ref, src.dup: i1, len: ref, len.dup: i1, isvolatile: bool, isvolatile.dup: bool) returns (M.ret: [ref] i8, M.ret.dup: [ref] i1)
{
  assume (forall x: ref :: (($sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len))) ==> (M.ret[x] == M.src[$add.ref($sub.ref(src,dst),x)])));
  assume (forall x: ref :: (($sle.ref.bool(dst.dup,x) && $slt.ref.bool(x,$add.ref(dst.dup,len.dup))) ==> (M.ret.dup[x] == M.src.dup[$add.ref($sub.ref(src.dup,dst.dup),x)])));
  assume (forall x: ref :: ($slt.ref.bool(x,dst) ==> (M.ret[x] == M.dst[x])));
  assume (forall x: ref :: ($slt.ref.bool(x,dst.dup) ==> (M.ret.dup[x] == M.dst.dup[x])));
  assume (forall x: ref :: ($sle.ref.bool($add.ref(dst,len),x) ==> (M.ret[x] == M.dst[x])));
  assume (forall x: ref :: ($sle.ref.bool($add.ref(dst.dup,len.dup),x) ==> (M.ret.dup[x] == M.dst.dup[x])));
}
procedure {:inline 1} $memset.i8(M: [ref] i8, M.dup: [ref] i1, dst: ref, dst.dup: i1, val: i8, val.dup: i1, len: ref, len.dup: i1, isvolatile: bool, isvolatile.dup: bool) returns (M.ret: [ref] i8, M.ret.dup: [ref] i1)
{
  assume (forall x: ref :: (($sle.ref.bool(dst,x) && $slt.ref.bool(x,$add.ref(dst,len))) ==> (M.ret[x] == val)));
  assume (forall x: ref :: (($sle.ref.bool(dst.dup,x) && $slt.ref.bool(x,$add.ref(dst.dup,len.dup))) ==> (M.ret.dup[x] == val.dup)));
  assume (forall x: ref :: ($slt.ref.bool(x,dst) ==> (M.ret[x] == M[x])));
  assume (forall x: ref :: ($slt.ref.bool(x,dst.dup) ==> (M.ret.dup[x] == M.dup[x])));
  assume (forall x: ref :: ($sle.ref.bool($add.ref(dst,len),x) ==> (M.ret[x] == M[x])));
  assume (forall x: ref :: ($sle.ref.bool($add.ref(dst.dup,len.dup),x) ==> (M.ret.dup[x] == M.dup[x])));
}
const $u0: ref;
procedure {:inline 1} boogie_si_record_i128(x: i128);
procedure {:inline 1} boogie_si_record_i16(x: i16);
procedure {:inline 1} boogie_si_record_i32(x: i32);
procedure {:inline 1} boogie_si_record_i64(x: i64);
procedure {:inline 1} boogie_si_record_i8(x: i8);
procedure {:inline 1} boogie_si_record_ref(x: ref);
procedure {:inline 1} $initialize()
modifies $CurrAddr, $exn;
{
  call __SMACK_static_init();
  call __SMACK_init_func_memory_model();
  return;
}
const {:count 1} cons.dup: i1;
axiom (cons.dup == 0);